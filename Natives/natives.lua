local natives = {}

local assert = assert
local type = type
local is_trusted_mode_enabled = menu.is_trusted_mode_enabled
local natives_trust = eTrustedFlags.LUA_TRUST_NATIVES
local native_call = native.call

natives.SYSTEM = {}
natives.system = {}

--[[
Pauses execution of the current script, please note this behavior is only seen when called from one of the game script files(ysc). In order to wait an asi script use "static void WAIT(DWORD time);" found in main.h
]]
function natives.SYSTEM.WAIT(--[[int]] ms) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SYSTEM.WAIT' due to disabled trusted mode")

	assert(type(ms) == "number", "Arg #1 (ms) must be a number.")

	local result = native_call(0x4EDE34FBADD967A6, ms)
end
natives.system.wait = natives.SYSTEM.WAIT

--[[
Examples:
 g_384A = SYSTEM::START_NEW_SCRIPT("cellphone_flashhand", 1424);
 l_10D = SYSTEM::START_NEW_SCRIPT("taxiService", 1828);
 SYSTEM::START_NEW_SCRIPT("AM_MP_YACHT", 5000);
 SYSTEM::START_NEW_SCRIPT("emergencycall", 512);
 SYSTEM::START_NEW_SCRIPT("emergencycall", 512); 
 SYSTEM::START_NEW_SCRIPT("FM_maintain_cloud_header_data", 1424);
 SYSTEM::START_NEW_SCRIPT("FM_Mission_Controller", 31000);
 SYSTEM::START_NEW_SCRIPT("tennis_family", 3650);
 SYSTEM::START_NEW_SCRIPT("Celebrations", 3650);

Decompiled examples of usage when starting a script:
 
    SCRIPT::REQUEST_SCRIPT(a_0);
    if (SCRIPT::HAS_SCRIPT_LOADED(a_0)) {
        SYSTEM::START_NEW_SCRIPT(a_0, v_3);
        SCRIPT::SET_SCRIPT_AS_NO_LONGER_NEEDED(a_0);
        return 1;
    }
 
or:

    v_2 = "MrsPhilips2";
    SCRIPT::REQUEST_SCRIPT(v_2);
    while (!SCRIPT::HAS_SCRIPT_LOADED(v_2)) {
    SCRIPT::REQUEST_SCRIPT(v_2);
    SYSTEM::WAIT(0);
    }
    sub_8792(36);
    SYSTEM::START_NEW_SCRIPT(v_2, 17000);
    SCRIPT::SET_SCRIPT_AS_NO_LONGER_NEEDED(v_2);

All native script names: pastebin.com/K9adDsu4 and pastebin.com/yLNWicUi
]]
function natives.SYSTEM.START_NEW_SCRIPT(--[[const char*]] scriptName, --[[int]] stackSize) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SYSTEM.START_NEW_SCRIPT' due to disabled trusted mode")

	assert(type(scriptName) == "string", "Arg #1 (scriptName) must be a string.")
	assert(type(stackSize) == "number", "Arg #2 (stackSize) must be a number.")

	local result = native_call(0xE81651AD79516E48, scriptName, stackSize)
	return result:__tointeger()
end
natives.system.start_new_script = natives.SYSTEM.START_NEW_SCRIPT

--[[
return : script thread id, 0 if failed
Pass pointer to struct of args in p1, size of struct goes into p2
]]
function natives.SYSTEM.START_NEW_SCRIPT_WITH_ARGS(--[[const char*]] scriptName, --[[Any*]] args, --[[int]] argCount, --[[int]] stackSize) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SYSTEM.START_NEW_SCRIPT_WITH_ARGS' due to disabled trusted mode")

	assert(type(scriptName) == "string", "Arg #1 (scriptName) must be a string.")
	assert(type(args) == "userdata", "Arg #2 (args) must be a userdata.")
	assert(type(argCount) == "number", "Arg #3 (argCount) must be a number.")
	assert(type(stackSize) == "number", "Arg #4 (stackSize) must be a number.")

	local result = native_call(0xB8BA7F44DF1575E1, scriptName, args, argCount, stackSize)
	return result:__tointeger()
end
natives.system.start_new_script_with_args = natives.SYSTEM.START_NEW_SCRIPT_WITH_ARGS

function natives.SYSTEM.START_NEW_SCRIPT_WITH_NAME_HASH(--[[Hash]] scriptHash, --[[int]] stackSize) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SYSTEM.START_NEW_SCRIPT_WITH_NAME_HASH' due to disabled trusted mode")

	assert(type(scriptHash) == "number", "Arg #1 (scriptHash) must be a number.")
	assert(type(stackSize) == "number", "Arg #2 (stackSize) must be a number.")

	local result = native_call(0xEB1C67C3A5333A92, scriptHash, stackSize)
	return result:__tointeger()
end
natives.system.start_new_script_with_name_hash = natives.SYSTEM.START_NEW_SCRIPT_WITH_NAME_HASH

function natives.SYSTEM.START_NEW_SCRIPT_WITH_NAME_HASH_AND_ARGS(--[[Hash]] scriptHash, --[[Any*]] args, --[[int]] argCount, --[[int]] stackSize) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SYSTEM.START_NEW_SCRIPT_WITH_NAME_HASH_AND_ARGS' due to disabled trusted mode")

	assert(type(scriptHash) == "number", "Arg #1 (scriptHash) must be a number.")
	assert(type(args) == "userdata", "Arg #2 (args) must be a userdata.")
	assert(type(argCount) == "number", "Arg #3 (argCount) must be a number.")
	assert(type(stackSize) == "number", "Arg #4 (stackSize) must be a number.")

	local result = native_call(0xC4BB298BD441BE78, scriptHash, args, argCount, stackSize)
	return result:__tointeger()
end
natives.system.start_new_script_with_name_hash_and_args = natives.SYSTEM.START_NEW_SCRIPT_WITH_NAME_HASH_AND_ARGS

--[[
Counts up. Every 1000 is 1 real-time second. Use SETTIMERA(int value) to set the timer (e.g.: SETTIMERA(0)).
]]
function natives.SYSTEM.TIMERA() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SYSTEM.TIMERA' due to disabled trusted mode")

	local result = native_call(0x83666F9FB8FEBD4B)
	return result:__tointeger()
end
natives.system.timera = natives.SYSTEM.TIMERA

function natives.SYSTEM.TIMERB() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SYSTEM.TIMERB' due to disabled trusted mode")

	local result = native_call(0xC9D9444186B5A374)
	return result:__tointeger()
end
natives.system.timerb = natives.SYSTEM.TIMERB

function natives.SYSTEM.SETTIMERA(--[[int]] value) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SYSTEM.SETTIMERA' due to disabled trusted mode")

	assert(type(value) == "number", "Arg #1 (value) must be a number.")

	local result = native_call(0xC1B1E9A034A63A62, value)
end
natives.system.settimera = natives.SYSTEM.SETTIMERA

function natives.SYSTEM.SETTIMERB(--[[int]] value) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SYSTEM.SETTIMERB' due to disabled trusted mode")

	assert(type(value) == "number", "Arg #1 (value) must be a number.")

	local result = native_call(0x5AE11BC36633DE4E, value)
end
natives.system.settimerb = natives.SYSTEM.SETTIMERB

--[[
Gets the current frame time.
]]
function natives.SYSTEM.TIMESTEP() -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SYSTEM.TIMESTEP' due to disabled trusted mode")

	local result = native_call(0x0000000050597EE2)
	return result:__tonumber()
end
natives.system.timestep = natives.SYSTEM.TIMESTEP

function natives.SYSTEM.SIN(--[[float]] value) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SYSTEM.SIN' due to disabled trusted mode")

	assert(type(value) == "number", "Arg #1 (value) must be a number.")

	local result = native_call(0x0BADBFA3B172435F, value)
	return result:__tonumber()
end
natives.system.sin = natives.SYSTEM.SIN

function natives.SYSTEM.COS(--[[float]] value) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SYSTEM.COS' due to disabled trusted mode")

	assert(type(value) == "number", "Arg #1 (value) must be a number.")

	local result = native_call(0xD0FFB162F40A139C, value)
	return result:__tonumber()
end
natives.system.cos = natives.SYSTEM.COS

function natives.SYSTEM.SQRT(--[[float]] value) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SYSTEM.SQRT' due to disabled trusted mode")

	assert(type(value) == "number", "Arg #1 (value) must be a number.")

	local result = native_call(0x71D93B57D07F9804, value)
	return result:__tonumber()
end
natives.system.sqrt = natives.SYSTEM.SQRT

function natives.SYSTEM.POW(--[[float]] base, --[[float]] exponent) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SYSTEM.POW' due to disabled trusted mode")

	assert(type(base) == "number", "Arg #1 (base) must be a number.")
	assert(type(exponent) == "number", "Arg #2 (exponent) must be a number.")

	local result = native_call(0xE3621CC40F31FE2E, base, exponent)
	return result:__tonumber()
end
natives.system.pow = natives.SYSTEM.POW

function natives.SYSTEM.LOG10(--[[float]] value) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SYSTEM.LOG10' due to disabled trusted mode")

	assert(type(value) == "number", "Arg #1 (value) must be a number.")

	local result = native_call(0xE816E655DE37FE20, value)
	return result:__tonumber()
end
natives.system.log10 = natives.SYSTEM.LOG10

--[[
Calculates the magnitude of a vector.
]]
function natives.SYSTEM.VMAG(--[[float]] x, --[[float]] y, --[[float]] z) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SYSTEM.VMAG' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")

	local result = native_call(0x652D2EEEF1D3E62C, x, y, z)
	return result:__tonumber()
end
natives.system.vmag = natives.SYSTEM.VMAG

--[[
Calculates the magnitude of a vector but does not perform Sqrt operations. (Its way faster)
]]
function natives.SYSTEM.VMAG2(--[[float]] x, --[[float]] y, --[[float]] z) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SYSTEM.VMAG2' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")

	local result = native_call(0xA8CEACB4F35AE058, x, y, z)
	return result:__tonumber()
end
natives.system.vmag2 = natives.SYSTEM.VMAG2

--[[
Calculates distance between vectors.
]]
function natives.SYSTEM.VDIST(--[[float]] x1, --[[float]] y1, --[[float]] z1, --[[float]] x2, --[[float]] y2, --[[float]] z2) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SYSTEM.VDIST' due to disabled trusted mode")

	assert(type(x1) == "number", "Arg #1 (x1) must be a number.")
	assert(type(y1) == "number", "Arg #2 (y1) must be a number.")
	assert(type(z1) == "number", "Arg #3 (z1) must be a number.")
	assert(type(x2) == "number", "Arg #4 (x2) must be a number.")
	assert(type(y2) == "number", "Arg #5 (y2) must be a number.")
	assert(type(z2) == "number", "Arg #6 (z2) must be a number.")

	local result = native_call(0x2A488C176D52CCA5, x1, y1, z1, x2, y2, z2)
	return result:__tonumber()
end
natives.system.vdist = natives.SYSTEM.VDIST

--[[
Calculates distance between vectors but does not perform Sqrt operations. (Its way faster)
]]
function natives.SYSTEM.VDIST2(--[[float]] x1, --[[float]] y1, --[[float]] z1, --[[float]] x2, --[[float]] y2, --[[float]] z2) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SYSTEM.VDIST2' due to disabled trusted mode")

	assert(type(x1) == "number", "Arg #1 (x1) must be a number.")
	assert(type(y1) == "number", "Arg #2 (y1) must be a number.")
	assert(type(z1) == "number", "Arg #3 (z1) must be a number.")
	assert(type(x2) == "number", "Arg #4 (x2) must be a number.")
	assert(type(y2) == "number", "Arg #5 (y2) must be a number.")
	assert(type(z2) == "number", "Arg #6 (z2) must be a number.")

	local result = native_call(0xB7A628320EFF8E47, x1, y1, z1, x2, y2, z2)
	return result:__tonumber()
end
natives.system.vdist2 = natives.SYSTEM.VDIST2

function natives.SYSTEM.SHIFT_LEFT(--[[int]] value, --[[int]] bitShift) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SYSTEM.SHIFT_LEFT' due to disabled trusted mode")

	assert(type(value) == "number", "Arg #1 (value) must be a number.")
	assert(type(bitShift) == "number", "Arg #2 (bitShift) must be a number.")

	local result = native_call(0xEDD95A39E5544DE8, value, bitShift)
	return result:__tointeger()
end
natives.system.shift_left = natives.SYSTEM.SHIFT_LEFT

function natives.SYSTEM.SHIFT_RIGHT(--[[int]] value, --[[int]] bitShift) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SYSTEM.SHIFT_RIGHT' due to disabled trusted mode")

	assert(type(value) == "number", "Arg #1 (value) must be a number.")
	assert(type(bitShift) == "number", "Arg #2 (bitShift) must be a number.")

	local result = native_call(0x97EF1E5BCE9DC075, value, bitShift)
	return result:__tointeger()
end
natives.system.shift_right = natives.SYSTEM.SHIFT_RIGHT

function natives.SYSTEM.FLOOR(--[[float]] value) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SYSTEM.FLOOR' due to disabled trusted mode")

	assert(type(value) == "number", "Arg #1 (value) must be a number.")

	local result = native_call(0xF34EE736CF047844, value)
	return result:__tointeger()
end
natives.system.floor = natives.SYSTEM.FLOOR

--[[
I'm guessing this rounds a float value up to the next whole number, and FLOOR rounds it down
]]
function natives.SYSTEM.CEIL(--[[float]] value) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SYSTEM.CEIL' due to disabled trusted mode")

	assert(type(value) == "number", "Arg #1 (value) must be a number.")

	local result = native_call(0x11E019C8F43ACC8A, value)
	return result:__tointeger()
end
natives.system.ceil = natives.SYSTEM.CEIL

function natives.SYSTEM.ROUND(--[[float]] value) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SYSTEM.ROUND' due to disabled trusted mode")

	assert(type(value) == "number", "Arg #1 (value) must be a number.")

	local result = native_call(0xF2DB717A73826179, value)
	return result:__tointeger()
end
natives.system.round = natives.SYSTEM.ROUND

function natives.SYSTEM.TO_FLOAT(--[[int]] value) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SYSTEM.TO_FLOAT' due to disabled trusted mode")

	assert(type(value) == "number", "Arg #1 (value) must be a number.")

	local result = native_call(0xBBDA792448DB5A89, value)
	return result:__tonumber()
end
natives.system.to_float = natives.SYSTEM.TO_FLOAT

--[[
0 = high
1 = normal
2 = low
]]
function natives.SYSTEM.SET_THREAD_PRIORITY(--[[int]] priority) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SYSTEM.SET_THREAD_PRIORITY' due to disabled trusted mode")

	assert(type(priority) == "number", "Arg #1 (priority) must be a number.")

	local result = native_call(0x42B65DEEF2EDF2A1, priority)
end
natives.system.set_thread_priority = natives.SYSTEM.SET_THREAD_PRIORITY


natives.APP = {}
natives.app = {}

function natives.APP.APP_DATA_VALID() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'APP.APP_DATA_VALID' due to disabled trusted mode")

	local result = native_call(0x846AA8E7D55EE5B6)
	return result:__tointeger() ~= 0
end
natives.app.app_data_valid = natives.APP.APP_DATA_VALID

function natives.APP.APP_GET_INT(--[[const char*]] property) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'APP.APP_GET_INT' due to disabled trusted mode")

	assert(type(property) == "string", "Arg #1 (property) must be a string.")

	local result = native_call(0xD3A58A12C77D9D4B, property)
	return result:__tointeger()
end
natives.app.app_get_int = natives.APP.APP_GET_INT

function natives.APP.APP_GET_FLOAT(--[[const char*]] property) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'APP.APP_GET_FLOAT' due to disabled trusted mode")

	assert(type(property) == "string", "Arg #1 (property) must be a string.")

	local result = native_call(0x1514FB24C02C2322, property)
	return result:__tonumber()
end
natives.app.app_get_float = natives.APP.APP_GET_FLOAT

function natives.APP.APP_GET_STRING(--[[const char*]] property) -- Returns const char*
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'APP.APP_GET_STRING' due to disabled trusted mode")

	assert(type(property) == "string", "Arg #1 (property) must be a string.")

	local result = native_call(0x749B023950D2311C, property)
	return result:__tostring(true)
end
natives.app.app_get_string = natives.APP.APP_GET_STRING

function natives.APP.APP_SET_INT(--[[const char*]] property, --[[int]] value) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'APP.APP_SET_INT' due to disabled trusted mode")

	assert(type(property) == "string", "Arg #1 (property) must be a string.")
	assert(type(value) == "number", "Arg #2 (value) must be a number.")

	local result = native_call(0x607E8E3D3E4F9611, property, value)
end
natives.app.app_set_int = natives.APP.APP_SET_INT

function natives.APP.APP_SET_FLOAT(--[[const char*]] property, --[[float]] value) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'APP.APP_SET_FLOAT' due to disabled trusted mode")

	assert(type(property) == "string", "Arg #1 (property) must be a string.")
	assert(type(value) == "number", "Arg #2 (value) must be a number.")

	local result = native_call(0x25D7687C68E0DAA4, property, value)
end
natives.app.app_set_float = natives.APP.APP_SET_FLOAT

function natives.APP.APP_SET_STRING(--[[const char*]] property, --[[const char*]] value) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'APP.APP_SET_STRING' due to disabled trusted mode")

	assert(type(property) == "string", "Arg #1 (property) must be a string.")
	assert(type(value) == "string", "Arg #2 (value) must be a string.")

	local result = native_call(0x3FF2FCEC4B7721B4, property, value)
end
natives.app.app_set_string = natives.APP.APP_SET_STRING

--[[
Called in the gamescripts like:
APP::APP_SET_APP("car");
APP::APP_SET_APP("dog");
]]
function natives.APP.APP_SET_APP(--[[const char*]] appName) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'APP.APP_SET_APP' due to disabled trusted mode")

	assert(type(appName) == "string", "Arg #1 (appName) must be a string.")

	local result = native_call(0xCFD0406ADAF90D2B, appName)
end
natives.app.app_set_app = natives.APP.APP_SET_APP

function natives.APP.APP_SET_BLOCK(--[[const char*]] blockName) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'APP.APP_SET_BLOCK' due to disabled trusted mode")

	assert(type(blockName) == "string", "Arg #1 (blockName) must be a string.")

	local result = native_call(0x262AB456A3D21F93, blockName)
end
natives.app.app_set_block = natives.APP.APP_SET_BLOCK

function natives.APP.APP_CLEAR_BLOCK() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'APP.APP_CLEAR_BLOCK' due to disabled trusted mode")

	local result = native_call(0x5FE1DF3342DB7DBA)
end
natives.app.app_clear_block = natives.APP.APP_CLEAR_BLOCK

function natives.APP.APP_CLOSE_APP() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'APP.APP_CLOSE_APP' due to disabled trusted mode")

	local result = native_call(0xE41C65E07A5F05FC)
end
natives.app.app_close_app = natives.APP.APP_CLOSE_APP

function natives.APP.APP_CLOSE_BLOCK() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'APP.APP_CLOSE_BLOCK' due to disabled trusted mode")

	local result = native_call(0xE8E3FCF72EAC0EF8)
end
natives.app.app_close_block = natives.APP.APP_CLOSE_BLOCK

function natives.APP.APP_HAS_LINKED_SOCIAL_CLUB_ACCOUNT() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'APP.APP_HAS_LINKED_SOCIAL_CLUB_ACCOUNT' due to disabled trusted mode")

	local result = native_call(0x71EEE69745088DA0)
	return result:__tointeger() ~= 0
end
natives.app.app_has_linked_social_club_account = natives.APP.APP_HAS_LINKED_SOCIAL_CLUB_ACCOUNT

function natives.APP.APP_HAS_SYNCED_DATA(--[[const char*]] appName) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'APP.APP_HAS_SYNCED_DATA' due to disabled trusted mode")

	assert(type(appName) == "string", "Arg #1 (appName) must be a string.")

	local result = native_call(0xCA52279A7271517F, appName)
	return result:__tointeger() ~= 0
end
natives.app.app_has_synced_data = natives.APP.APP_HAS_SYNCED_DATA

function natives.APP.APP_SAVE_DATA() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'APP.APP_SAVE_DATA' due to disabled trusted mode")

	local result = native_call(0x95C5D356CDA6E85F)
end
natives.app.app_save_data = natives.APP.APP_SAVE_DATA

function natives.APP.APP_GET_DELETED_FILE_STATUS() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'APP.APP_GET_DELETED_FILE_STATUS' due to disabled trusted mode")

	local result = native_call(0xC9853A2BE3DED1A6)
	return result:__tointeger()
end
natives.app.app_get_deleted_file_status = natives.APP.APP_GET_DELETED_FILE_STATUS

function natives.APP.APP_DELETE_APP_DATA(--[[const char*]] appName) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'APP.APP_DELETE_APP_DATA' due to disabled trusted mode")

	assert(type(appName) == "string", "Arg #1 (appName) must be a string.")

	local result = native_call(0x44151AEA95C8A003, appName)
	return result:__tointeger() ~= 0
end
natives.app.app_delete_app_data = natives.APP.APP_DELETE_APP_DATA


natives.AUDIO = {}
natives.audio = {}

--[[
All found occurrences in b617d, sorted alphabetically and identical lines removed: pastebin.com/RFb4GTny

AUDIO::PLAY_PED_RINGTONE("Remote_Ring", PLAYER::PLAYER_PED_ID(), 1);
AUDIO::PLAY_PED_RINGTONE("Dial_and_Remote_Ring", PLAYER::PLAYER_PED_ID(), 1);

]]
function natives.AUDIO.PLAY_PED_RINGTONE(--[[const char*]] ringtoneName, --[[Ped]] ped, --[[BOOL]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.PLAY_PED_RINGTONE' due to disabled trusted mode")

	assert(type(ringtoneName) == "string", "Arg #1 (ringtoneName) must be a string.")
	assert(type(ped) == "number", "Arg #2 (ped) must be a number.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")

	local result = native_call(0xF9E56683CA8E11A5, ringtoneName, ped, p2)
end
natives.audio.play_ped_ringtone = natives.AUDIO.PLAY_PED_RINGTONE

function natives.AUDIO.IS_PED_RINGTONE_PLAYING(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.IS_PED_RINGTONE_PLAYING' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x1E8E5E20937E3137, ped)
	return result:__tointeger() ~= 0
end
natives.audio.is_ped_ringtone_playing = natives.AUDIO.IS_PED_RINGTONE_PLAYING

function natives.AUDIO.STOP_PED_RINGTONE(--[[Ped]] ped) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.STOP_PED_RINGTONE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x6C5AE23EFA885092, ped)
end
natives.audio.stop_ped_ringtone = natives.AUDIO.STOP_PED_RINGTONE

function natives.AUDIO.IS_MOBILE_PHONE_CALL_ONGOING() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.IS_MOBILE_PHONE_CALL_ONGOING' due to disabled trusted mode")

	local result = native_call(0x7497D2CE2C30D24C)
	return result:__tointeger() ~= 0
end
natives.audio.is_mobile_phone_call_ongoing = natives.AUDIO.IS_MOBILE_PHONE_CALL_ONGOING

function natives.AUDIO.IS_MOBILE_INTERFERENCE_ACTIVE() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.IS_MOBILE_INTERFERENCE_ACTIVE' due to disabled trusted mode")

	local result = native_call(0xC8B1B2425604CDD0)
	return result:__tointeger() ~= 0
end
natives.audio.is_mobile_interference_active = natives.AUDIO.IS_MOBILE_INTERFERENCE_ACTIVE

function natives.AUDIO.CREATE_NEW_SCRIPTED_CONVERSATION() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.CREATE_NEW_SCRIPTED_CONVERSATION' due to disabled trusted mode")

	local result = native_call(0xD2C91A0B572AAE56)
end
natives.audio.create_new_scripted_conversation = natives.AUDIO.CREATE_NEW_SCRIPTED_CONVERSATION

--[[
NOTE: ones that are -1, 0 - 35 are determined by a function where it gets a TextLabel from a global then runs,
_GET_TEXT_SUBSTRING and depending on what the result is it goes in check order of 0 - 9 then A - Z then z (lowercase). So it will then return 0 - 35 or -1 if it's 'z'. The func to handle that ^^ is func_67 in dialog_handler.c atleast in TU27 Xbox360 scripts.

p0 is -1, 0 - 35
p1 is a char or string (whatever you wanna call it)
p2 is Global 10597 + i * 6. 'i' is a while(i < 70) loop
p3 is again -1, 0 - 35 
p4 is again -1, 0 - 35 
p5 is either 0 or 1 (bool ?)
p6 is either 0 or 1 (The func to determine this is bool)
p7 is either 0 or 1 (The func to determine this is bool)
p8 is either 0 or 1 (The func to determine this is bool)
p9 is 0 - 3 (Determined by func_60 in dialogue_handler.c)
p10 is either 0 or 1 (The func to determine this is bool)
p11 is either 0 or 1 (The func to determine this is bool)
p12 is unknown as in TU27 X360 scripts it only goes to p11.
]]
function natives.AUDIO.ADD_LINE_TO_CONVERSATION(--[[int]] index, --[[const char*]] p1, --[[const char*]] p2, --[[int]] p3, --[[int]] p4, --[[BOOL]] p5, --[[BOOL]] p6, --[[BOOL]] p7, --[[BOOL]] p8, --[[int]] p9, --[[BOOL]] p10, --[[BOOL]] p11, --[[BOOL]] p12) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.ADD_LINE_TO_CONVERSATION' due to disabled trusted mode")

	assert(type(index) == "number", "Arg #1 (index) must be a number.")
	assert(type(p1) == "string", "Arg #2 (p1) must be a string.")
	assert(type(p2) == "string", "Arg #3 (p2) must be a string.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "boolean", "Arg #6 (p5) must be a boolean.")
	assert(type(p6) == "boolean", "Arg #7 (p6) must be a boolean.")
	assert(type(p7) == "boolean", "Arg #8 (p7) must be a boolean.")
	assert(type(p8) == "boolean", "Arg #9 (p8) must be a boolean.")
	assert(type(p9) == "number", "Arg #10 (p9) must be a number.")
	assert(type(p10) == "boolean", "Arg #11 (p10) must be a boolean.")
	assert(type(p11) == "boolean", "Arg #12 (p11) must be a boolean.")
	assert(type(p12) == "boolean", "Arg #13 (p12) must be a boolean.")

	local result = native_call(0xC5EF963405593646, index, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12)
end
natives.audio.add_line_to_conversation = natives.AUDIO.ADD_LINE_TO_CONVERSATION

--[[
4 calls in the b617d scripts. The only one with p0 and p2 in clear text:

AUDIO::ADD_PED_TO_CONVERSATION(5, l_AF, "DINAPOLI");

=================================================
One of the 2 calls in dialogue_handler.c p0 is in a while-loop, and so is determined to also possibly be 0 - 15.
]]
function natives.AUDIO.ADD_PED_TO_CONVERSATION(--[[int]] index, --[[Ped]] ped, --[[const char*]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.ADD_PED_TO_CONVERSATION' due to disabled trusted mode")

	assert(type(index) == "number", "Arg #1 (index) must be a number.")
	assert(type(ped) == "number", "Arg #2 (ped) must be a number.")
	assert(type(p2) == "string", "Arg #3 (p2) must be a string.")

	local result = native_call(0x95D9F4BC443956E7, index, ped, p2)
end
natives.audio.add_ped_to_conversation = natives.AUDIO.ADD_PED_TO_CONVERSATION

function natives.AUDIO.SET_POSITION_FOR_NULL_CONV_PED(--[[Any]] p0, --[[float]] p1, --[[float]] p2, --[[float]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.SET_POSITION_FOR_NULL_CONV_PED' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x33E3C6C6F2F0B506, p0, p1, p2, p3)
end
natives.audio.set_position_for_null_conv_ped = natives.AUDIO.SET_POSITION_FOR_NULL_CONV_PED

function natives.AUDIO.SET_ENTITY_FOR_NULL_CONV_PED(--[[int]] p0, --[[Entity]] entity) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.SET_ENTITY_FOR_NULL_CONV_PED' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(entity) == "number", "Arg #2 (entity) must be a number.")

	local result = native_call(0x892B6AB8F33606F5, p0, entity)
end
natives.audio.set_entity_for_null_conv_ped = natives.AUDIO.SET_ENTITY_FOR_NULL_CONV_PED

--[[
This native controls where the game plays audio from. By default the microphone is positioned on the player.
When p0 is true the game will play audio from the 3 positions inputted.
It is recommended to set all 3 positions to the same value as mixing different positions doesn't seem to work well.
The scripts mostly use it with only one position such as in fbi3.c: 
AUDIO::SET_MICROPHONE_POSITION(true, ENTITY::GET_ENTITY_COORDS(iLocal_3091, true), ENTITY::GET_ENTITY_COORDS(iLocal_3091, true), ENTITY::GET_ENTITY_COORDS(iLocal_3091, true));
]]
function natives.AUDIO.SET_MICROPHONE_POSITION(--[[BOOL]] toggle, --[[float]] x1, --[[float]] y1, --[[float]] z1, --[[float]] x2, --[[float]] y2, --[[float]] z2, --[[float]] x3, --[[float]] y3, --[[float]] z3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.SET_MICROPHONE_POSITION' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")
	assert(type(x1) == "number", "Arg #2 (x1) must be a number.")
	assert(type(y1) == "number", "Arg #3 (y1) must be a number.")
	assert(type(z1) == "number", "Arg #4 (z1) must be a number.")
	assert(type(x2) == "number", "Arg #5 (x2) must be a number.")
	assert(type(y2) == "number", "Arg #6 (y2) must be a number.")
	assert(type(z2) == "number", "Arg #7 (z2) must be a number.")
	assert(type(x3) == "number", "Arg #8 (x3) must be a number.")
	assert(type(y3) == "number", "Arg #9 (y3) must be a number.")
	assert(type(z3) == "number", "Arg #10 (z3) must be a number.")

	local result = native_call(0xB6AE90EDDE95C762, toggle, x1, y1, z1, x2, y2, z2, x3, y3, z3)
end
natives.audio.set_microphone_position = natives.AUDIO.SET_MICROPHONE_POSITION

function natives.AUDIO.SET_CONVERSATION_AUDIO_CONTROLLED_BY_ANIM(--[[BOOL]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.SET_CONVERSATION_AUDIO_CONTROLLED_BY_ANIM' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0x0B568201DD99F0EB, p0)
end
natives.audio.set_conversation_audio_controlled_by_anim = natives.AUDIO.SET_CONVERSATION_AUDIO_CONTROLLED_BY_ANIM

function natives.AUDIO.SET_CONVERSATION_AUDIO_PLACEHOLDER(--[[BOOL]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.SET_CONVERSATION_AUDIO_PLACEHOLDER' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0x61631F5DF50D1C34, p0)
end
natives.audio.set_conversation_audio_placeholder = natives.AUDIO.SET_CONVERSATION_AUDIO_PLACEHOLDER

function natives.AUDIO.START_SCRIPT_PHONE_CONVERSATION(--[[BOOL]] p0, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.START_SCRIPT_PHONE_CONVERSATION' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0x252E5F915EABB675, p0, p1)
end
natives.audio.start_script_phone_conversation = natives.AUDIO.START_SCRIPT_PHONE_CONVERSATION

function natives.AUDIO.PRELOAD_SCRIPT_PHONE_CONVERSATION(--[[BOOL]] p0, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.PRELOAD_SCRIPT_PHONE_CONVERSATION' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0x6004BCB0E226AAEA, p0, p1)
end
natives.audio.preload_script_phone_conversation = natives.AUDIO.PRELOAD_SCRIPT_PHONE_CONVERSATION

function natives.AUDIO.START_SCRIPT_CONVERSATION(--[[BOOL]] p0, --[[BOOL]] p1, --[[BOOL]] p2, --[[BOOL]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.START_SCRIPT_CONVERSATION' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")
	assert(type(p3) == "boolean", "Arg #4 (p3) must be a boolean.")

	local result = native_call(0x6B17C62C9635D2DC, p0, p1, p2, p3)
end
natives.audio.start_script_conversation = natives.AUDIO.START_SCRIPT_CONVERSATION

function natives.AUDIO.PRELOAD_SCRIPT_CONVERSATION(--[[BOOL]] p0, --[[BOOL]] p1, --[[BOOL]] p2, --[[BOOL]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.PRELOAD_SCRIPT_CONVERSATION' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")
	assert(type(p3) == "boolean", "Arg #4 (p3) must be a boolean.")

	local result = native_call(0x3B3CAD6166916D87, p0, p1, p2, p3)
end
natives.audio.preload_script_conversation = natives.AUDIO.PRELOAD_SCRIPT_CONVERSATION

function natives.AUDIO.START_PRELOADED_CONVERSATION() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.START_PRELOADED_CONVERSATION' due to disabled trusted mode")

	local result = native_call(0x23641AFE870AF385)
end
natives.audio.start_preloaded_conversation = natives.AUDIO.START_PRELOADED_CONVERSATION

function natives.AUDIO.GET_IS_PRELOADED_CONVERSATION_READY() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.GET_IS_PRELOADED_CONVERSATION_READY' due to disabled trusted mode")

	local result = native_call(0xE73364DB90778FFA)
	return result:__tointeger() ~= 0
end
natives.audio.get_is_preloaded_conversation_ready = natives.AUDIO.GET_IS_PRELOADED_CONVERSATION_READY

function natives.AUDIO.IS_SCRIPTED_CONVERSATION_ONGOING() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.IS_SCRIPTED_CONVERSATION_ONGOING' due to disabled trusted mode")

	local result = native_call(0x16754C556D2EDE3D)
	return result:__tointeger() ~= 0
end
natives.audio.is_scripted_conversation_ongoing = natives.AUDIO.IS_SCRIPTED_CONVERSATION_ONGOING

function natives.AUDIO.IS_SCRIPTED_CONVERSATION_LOADED() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.IS_SCRIPTED_CONVERSATION_LOADED' due to disabled trusted mode")

	local result = native_call(0xDF0D54BE7A776737)
	return result:__tointeger() ~= 0
end
natives.audio.is_scripted_conversation_loaded = natives.AUDIO.IS_SCRIPTED_CONVERSATION_LOADED

function natives.AUDIO.GET_CURRENT_SCRIPTED_CONVERSATION_LINE() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.GET_CURRENT_SCRIPTED_CONVERSATION_LINE' due to disabled trusted mode")

	local result = native_call(0x480357EE890C295A)
	return result:__tointeger()
end
natives.audio.get_current_scripted_conversation_line = natives.AUDIO.GET_CURRENT_SCRIPTED_CONVERSATION_LINE

function natives.AUDIO.PAUSE_SCRIPTED_CONVERSATION(--[[BOOL]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.PAUSE_SCRIPTED_CONVERSATION' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0x8530AD776CD72B12, p0)
end
natives.audio.pause_scripted_conversation = natives.AUDIO.PAUSE_SCRIPTED_CONVERSATION

function natives.AUDIO.RESTART_SCRIPTED_CONVERSATION() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.RESTART_SCRIPTED_CONVERSATION' due to disabled trusted mode")

	local result = native_call(0x9AEB285D1818C9AC)
end
natives.audio.restart_scripted_conversation = natives.AUDIO.RESTART_SCRIPTED_CONVERSATION

function natives.AUDIO.STOP_SCRIPTED_CONVERSATION(--[[BOOL]] p0) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.STOP_SCRIPTED_CONVERSATION' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0xD79DEEFB53455EBA, p0)
	return result:__tointeger()
end
natives.audio.stop_scripted_conversation = natives.AUDIO.STOP_SCRIPTED_CONVERSATION

function natives.AUDIO.SKIP_TO_NEXT_SCRIPTED_CONVERSATION_LINE() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.SKIP_TO_NEXT_SCRIPTED_CONVERSATION_LINE' due to disabled trusted mode")

	local result = native_call(0x9663FE6B7A61EB00)
end
natives.audio.skip_to_next_scripted_conversation_line = natives.AUDIO.SKIP_TO_NEXT_SCRIPTED_CONVERSATION_LINE

--[[
Example from carsteal3.c: AUDIO::INTERRUPT_CONVERSATION(PLAYER::PLAYER_PED_ID(), "CST4_CFAA", "FRANKLIN");
Voicelines can be found in GTAV\x64\audio\sfx in files starting with "SS_" which seems to mean scripted speech.
]]
function natives.AUDIO.INTERRUPT_CONVERSATION(--[[Ped]] ped, --[[const char*]] voiceline, --[[const char*]] speaker) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.INTERRUPT_CONVERSATION' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(voiceline) == "string", "Arg #2 (voiceline) must be a string.")
	assert(type(speaker) == "string", "Arg #3 (speaker) must be a string.")

	local result = native_call(0xA018A12E5C5C2FA6, ped, voiceline, speaker)
end
natives.audio.interrupt_conversation = natives.AUDIO.INTERRUPT_CONVERSATION

--[[
One call found in the b617d scripts:

AUDIO::_8A694D7A68F8DC38(NETWORK::NET_TO_PED(l_3989._f26F[0/*1*/]), "CONV_INTERRUPT_QUIT_IT", "LESTER");
]]
function natives.AUDIO.INTERRUPT_CONVERSATION_AND_PAUSE(--[[Ped]] ped, --[[const char*]] p1, --[[const char*]] speaker) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.INTERRUPT_CONVERSATION_AND_PAUSE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(p1) == "string", "Arg #2 (p1) must be a string.")
	assert(type(speaker) == "string", "Arg #3 (speaker) must be a string.")

	local result = native_call(0x8A694D7A68F8DC38, ped, p1, speaker)
end
natives.audio.interrupt_conversation_and_pause = natives.AUDIO.INTERRUPT_CONVERSATION_AND_PAUSE

function natives.AUDIO.GET_VARIATION_CHOSEN_FOR_SCRIPTED_LINE(--[[Any*]] p0) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.GET_VARIATION_CHOSEN_FOR_SCRIPTED_LINE' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")

	local result = native_call(0xAA19F5572C38B564, p0)
	return result:__tointeger()
end
natives.audio.get_variation_chosen_for_scripted_line = natives.AUDIO.GET_VARIATION_CHOSEN_FOR_SCRIPTED_LINE

function natives.AUDIO.SET_NO_DUCKING_FOR_CONVERSATION(--[[BOOL]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.SET_NO_DUCKING_FOR_CONVERSATION' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0xB542DE8C3D1CB210, p0)
end
natives.audio.set_no_ducking_for_conversation = natives.AUDIO.SET_NO_DUCKING_FOR_CONVERSATION

--[[
This native does absolutely nothing, just a nullsub
]]
function natives.AUDIO.REGISTER_SCRIPT_WITH_AUDIO(--[[int]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.REGISTER_SCRIPT_WITH_AUDIO' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xC6ED9D5092438D91, p0)
end
natives.audio.register_script_with_audio = natives.AUDIO.REGISTER_SCRIPT_WITH_AUDIO

--[[
This native does absolutely nothing, just a nullsub
]]
function natives.AUDIO.UNREGISTER_SCRIPT_WITH_AUDIO() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.UNREGISTER_SCRIPT_WITH_AUDIO' due to disabled trusted mode")

	local result = native_call(0xA8638BE228D4751A)
end
natives.audio.unregister_script_with_audio = natives.AUDIO.UNREGISTER_SCRIPT_WITH_AUDIO

--[[
All occurrences and usages found in b617d: pastebin.com/NzZZ2Tmm
Full list of mission audio bank names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/missionAudioBankNames.json
]]
function natives.AUDIO.REQUEST_MISSION_AUDIO_BANK(--[[const char*]] p0, --[[BOOL]] p1, --[[Any]] p2) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.REQUEST_MISSION_AUDIO_BANK' due to disabled trusted mode")

	assert(type(p0) == "string", "Arg #1 (p0) must be a string.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0x7345BDD95E62E0F2, p0, p1, p2)
	return result:__tointeger() ~= 0
end
natives.audio.request_mission_audio_bank = natives.AUDIO.REQUEST_MISSION_AUDIO_BANK

--[[
All occurrences and usages found in b617d, sorted alphabetically and identical lines removed: pastebin.com/XZ1tmGEz
Full list of ambient audio bank names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ambientAudioBankNames.json
]]
function natives.AUDIO.REQUEST_AMBIENT_AUDIO_BANK(--[[const char*]] p0, --[[BOOL]] p1, --[[Any]] p2) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.REQUEST_AMBIENT_AUDIO_BANK' due to disabled trusted mode")

	assert(type(p0) == "string", "Arg #1 (p0) must be a string.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0xFE02FFBED8CA9D99, p0, p1, p2)
	return result:__tointeger() ~= 0
end
natives.audio.request_ambient_audio_bank = natives.AUDIO.REQUEST_AMBIENT_AUDIO_BANK

--[[
All occurrences and usages found in b617d, sorted alphabetically and identical lines removed: pastebin.com/AkmDAVn6
Full list of script audio bank names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scriptAudioBankNames.json
]]
function natives.AUDIO.REQUEST_SCRIPT_AUDIO_BANK(--[[const char*]] p0, --[[BOOL]] p1, --[[int]] p2) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.REQUEST_SCRIPT_AUDIO_BANK' due to disabled trusted mode")

	assert(type(p0) == "string", "Arg #1 (p0) must be a string.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0x2F844A8B08D76685, p0, p1, p2)
	return result:__tointeger() ~= 0
end
natives.audio.request_script_audio_bank = natives.AUDIO.REQUEST_SCRIPT_AUDIO_BANK

function natives.AUDIO.HINT_MISSION_AUDIO_BANK(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.HINT_MISSION_AUDIO_BANK' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0x40763EA7B9B783E7, p0, p1, p2)
	return result:__tointeger()
end
natives.audio.hint_mission_audio_bank = natives.AUDIO.HINT_MISSION_AUDIO_BANK

function natives.AUDIO.HINT_AMBIENT_AUDIO_BANK(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.HINT_AMBIENT_AUDIO_BANK' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0x8F8C0E370AE62F5C, p0, p1, p2)
	return result:__tointeger()
end
natives.audio.hint_ambient_audio_bank = natives.AUDIO.HINT_AMBIENT_AUDIO_BANK

function natives.AUDIO.HINT_SCRIPT_AUDIO_BANK(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.HINT_SCRIPT_AUDIO_BANK' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0xFB380A29641EC31A, p0, p1, p2)
	return result:__tointeger()
end
natives.audio.hint_script_audio_bank = natives.AUDIO.HINT_SCRIPT_AUDIO_BANK

function natives.AUDIO.RELEASE_MISSION_AUDIO_BANK() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.RELEASE_MISSION_AUDIO_BANK' due to disabled trusted mode")

	local result = native_call(0x0EC92A1BF0857187)
end
natives.audio.release_mission_audio_bank = natives.AUDIO.RELEASE_MISSION_AUDIO_BANK

function natives.AUDIO.RELEASE_AMBIENT_AUDIO_BANK() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.RELEASE_AMBIENT_AUDIO_BANK' due to disabled trusted mode")

	local result = native_call(0x65475A218FFAA93D)
end
natives.audio.release_ambient_audio_bank = natives.AUDIO.RELEASE_AMBIENT_AUDIO_BANK

--[[
Full list of script audio bank names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scriptAudioBankNames.json
]]
function natives.AUDIO.RELEASE_NAMED_SCRIPT_AUDIO_BANK(--[[const char*]] audioBank) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.RELEASE_NAMED_SCRIPT_AUDIO_BANK' due to disabled trusted mode")

	assert(type(audioBank) == "string", "Arg #1 (audioBank) must be a string.")

	local result = native_call(0x77ED170667F50170, audioBank)
end
natives.audio.release_named_script_audio_bank = natives.AUDIO.RELEASE_NAMED_SCRIPT_AUDIO_BANK

function natives.AUDIO.RELEASE_SCRIPT_AUDIO_BANK() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.RELEASE_SCRIPT_AUDIO_BANK' due to disabled trusted mode")

	local result = native_call(0x7A2D8AD0A9EB9C3F)
end
natives.audio.release_script_audio_bank = natives.AUDIO.RELEASE_SCRIPT_AUDIO_BANK

function natives.AUDIO.UNHINT_AMBIENT_AUDIO_BANK() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.UNHINT_AMBIENT_AUDIO_BANK' due to disabled trusted mode")

	local result = native_call(0x19AF7ED9B9D23058)
end
natives.audio.unhint_ambient_audio_bank = natives.AUDIO.UNHINT_AMBIENT_AUDIO_BANK

function natives.AUDIO.UNHINT_SCRIPT_AUDIO_BANK() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.UNHINT_SCRIPT_AUDIO_BANK' due to disabled trusted mode")

	local result = native_call(0x9AC92EED5E4793AB)
end
natives.audio.unhint_script_audio_bank = natives.AUDIO.UNHINT_SCRIPT_AUDIO_BANK

function natives.AUDIO.UNHINT_NAMED_SCRIPT_AUDIO_BANK(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.UNHINT_NAMED_SCRIPT_AUDIO_BANK' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x11579D940949C49E, p0)
end
natives.audio.unhint_named_script_audio_bank = natives.AUDIO.UNHINT_NAMED_SCRIPT_AUDIO_BANK

function natives.AUDIO.GET_SOUND_ID() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.GET_SOUND_ID' due to disabled trusted mode")

	local result = native_call(0x430386FE9BF80B45)
	return result:__tointeger()
end
natives.audio.get_sound_id = natives.AUDIO.GET_SOUND_ID

function natives.AUDIO.RELEASE_SOUND_ID(--[[int]] soundId) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.RELEASE_SOUND_ID' due to disabled trusted mode")

	assert(type(soundId) == "number", "Arg #1 (soundId) must be a number.")

	local result = native_call(0x353FC880830B88FA, soundId)
end
natives.audio.release_sound_id = natives.AUDIO.RELEASE_SOUND_ID

--[[
All found occurrences in b617d, sorted alphabetically and identical lines removed: pastebin.com/A8Ny8AHZ

Full list of audio / sound names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/soundNames.json
]]
function natives.AUDIO.PLAY_SOUND(--[[int]] soundId, --[[const char*]] audioName, --[[const char*]] audioRef, --[[BOOL]] p3, --[[Any]] p4, --[[BOOL]] p5) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.PLAY_SOUND' due to disabled trusted mode")

	assert(type(soundId) == "number", "Arg #1 (soundId) must be a number.")
	assert(type(audioName) == "string", "Arg #2 (audioName) must be a string.")
	assert(type(audioRef) == "string", "Arg #3 (audioRef) must be a string.")
	assert(type(p3) == "boolean", "Arg #4 (p3) must be a boolean.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "boolean", "Arg #6 (p5) must be a boolean.")

	local result = native_call(0x7FF4944CC209192D, soundId, audioName, audioRef, p3, p4, p5)
end
natives.audio.play_sound = natives.AUDIO.PLAY_SOUND

--[[
List: https://pastebin.com/DCeRiaLJ

All occurrences as of Cayo Perico Heist DLC (b2189), sorted alphabetically and identical lines removed: https://git.io/JtLxM

Full list of audio / sound names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/soundNames.json
]]
function natives.AUDIO.PLAY_SOUND_FRONTEND(--[[int]] soundId, --[[const char*]] audioName, --[[const char*]] audioRef, --[[BOOL]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.PLAY_SOUND_FRONTEND' due to disabled trusted mode")

	assert(type(soundId) == "number", "Arg #1 (soundId) must be a number.")
	assert(type(audioName) == "string", "Arg #2 (audioName) must be a string.")
	assert(type(audioRef) == "string", "Arg #3 (audioRef) must be a string.")
	assert(type(p3) == "boolean", "Arg #4 (p3) must be a boolean.")

	local result = native_call(0x67C540AA08E4A6F5, soundId, audioName, audioRef, p3)
end
natives.audio.play_sound_frontend = natives.AUDIO.PLAY_SOUND_FRONTEND

--[[
Only call found in the b617d scripts:

AUDIO::PLAY_DEFERRED_SOUND_FRONTEND("BACK", "HUD_FREEMODE_SOUNDSET");

Full list of audio / sound names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/soundNames.json
]]
function natives.AUDIO.PLAY_DEFERRED_SOUND_FRONTEND(--[[const char*]] soundName, --[[const char*]] soundsetName) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.PLAY_DEFERRED_SOUND_FRONTEND' due to disabled trusted mode")

	assert(type(soundName) == "string", "Arg #1 (soundName) must be a string.")
	assert(type(soundsetName) == "string", "Arg #2 (soundsetName) must be a string.")

	local result = native_call(0xCADA5A0D0702381E, soundName, soundsetName)
end
natives.audio.play_deferred_sound_frontend = natives.AUDIO.PLAY_DEFERRED_SOUND_FRONTEND

--[[
All found occurrences in b617d, sorted alphabetically and identical lines removed: pastebin.com/f2A7vTj0 
No changes made in b678d.

gtaforums.com/topic/795622-audio-for-mods

Full list of audio / sound names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/soundNames.json
]]
function natives.AUDIO.PLAY_SOUND_FROM_ENTITY(--[[int]] soundId, --[[const char*]] audioName, --[[Entity]] entity, --[[const char*]] audioRef, --[[BOOL]] isNetwork, --[[Any]] p5) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.PLAY_SOUND_FROM_ENTITY' due to disabled trusted mode")

	assert(type(soundId) == "number", "Arg #1 (soundId) must be a number.")
	assert(type(audioName) == "string", "Arg #2 (audioName) must be a string.")
	assert(type(entity) == "number", "Arg #3 (entity) must be a number.")
	assert(type(audioRef) == "string", "Arg #4 (audioRef) must be a string.")
	assert(type(isNetwork) == "boolean", "Arg #5 (isNetwork) must be a boolean.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")

	local result = native_call(0xE65F427EB70AB1ED, soundId, audioName, entity, audioRef, isNetwork, p5)
end
natives.audio.play_sound_from_entity = natives.AUDIO.PLAY_SOUND_FROM_ENTITY

function natives.AUDIO.PLAY_SOUND_FROM_ENTITY_HASH(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3, --[[Any]] p4, --[[Any]] p5) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.PLAY_SOUND_FROM_ENTITY_HASH' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")

	local result = native_call(0x5B9853296731E88D, p0, p1, p2, p3, p4, p5)
end
natives.audio.play_sound_from_entity_hash = natives.AUDIO.PLAY_SOUND_FROM_ENTITY_HASH

--[[
All found occurrences in b617d, sorted alphabetically and identical lines removed: pastebin.com/eeFc5DiW

gtaforums.com/topic/795622-audio-for-mods

Full list of audio / sound names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/soundNames.json
]]
function natives.AUDIO.PLAY_SOUND_FROM_COORD(--[[int]] soundId, --[[const char*]] audioName, --[[float]] x, --[[float]] y, --[[float]] z, --[[const char*]] audioRef, --[[BOOL]] isNetwork, --[[int]] range, --[[BOOL]] p8) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.PLAY_SOUND_FROM_COORD' due to disabled trusted mode")

	assert(type(soundId) == "number", "Arg #1 (soundId) must be a number.")
	assert(type(audioName) == "string", "Arg #2 (audioName) must be a string.")
	assert(type(x) == "number", "Arg #3 (x) must be a number.")
	assert(type(y) == "number", "Arg #4 (y) must be a number.")
	assert(type(z) == "number", "Arg #5 (z) must be a number.")
	assert(type(audioRef) == "string", "Arg #6 (audioRef) must be a string.")
	assert(type(isNetwork) == "boolean", "Arg #7 (isNetwork) must be a boolean.")
	assert(type(range) == "number", "Arg #8 (range) must be a number.")
	assert(type(p8) == "boolean", "Arg #9 (p8) must be a boolean.")

	local result = native_call(0x8D8686B622B88120, soundId, audioName, x, y, z, audioRef, isNetwork, range, p8)
end
natives.audio.play_sound_from_coord = natives.AUDIO.PLAY_SOUND_FROM_COORD

function natives.AUDIO.UPDATE_SOUND_COORD(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.UPDATE_SOUND_COORD' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x7EC3C679D0E7E46B, p0, p1, p2, p3)
end
natives.audio.update_sound_coord = natives.AUDIO.UPDATE_SOUND_COORD

function natives.AUDIO.STOP_SOUND(--[[int]] soundId) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.STOP_SOUND' due to disabled trusted mode")

	assert(type(soundId) == "number", "Arg #1 (soundId) must be a number.")

	local result = native_call(0xA3B0C41BA5CC0BB5, soundId)
end
natives.audio.stop_sound = natives.AUDIO.STOP_SOUND

--[[
Could this be used alongside either, 
SET_NETWORK_ID_EXISTS_ON_ALL_MACHINES or _SET_NETWORK_ID_SYNC_TO_PLAYER to make it so other players can hear the sound while online? It'd be a bit troll-fun to be able to play the Zancudo UFO creepy sounds globally.
]]
function natives.AUDIO.GET_NETWORK_ID_FROM_SOUND_ID(--[[int]] soundId) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.GET_NETWORK_ID_FROM_SOUND_ID' due to disabled trusted mode")

	assert(type(soundId) == "number", "Arg #1 (soundId) must be a number.")

	local result = native_call(0x2DE3F0A134FFBC0D, soundId)
	return result:__tointeger()
end
natives.audio.get_network_id_from_sound_id = natives.AUDIO.GET_NETWORK_ID_FROM_SOUND_ID

function natives.AUDIO.GET_SOUND_ID_FROM_NETWORK_ID(--[[int]] netId) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.GET_SOUND_ID_FROM_NETWORK_ID' due to disabled trusted mode")

	assert(type(netId) == "number", "Arg #1 (netId) must be a number.")

	local result = native_call(0x75262FD12D0A1C84, netId)
	return result:__tointeger()
end
natives.audio.get_sound_id_from_network_id = natives.AUDIO.GET_SOUND_ID_FROM_NETWORK_ID

function natives.AUDIO.SET_VARIABLE_ON_SOUND(--[[int]] soundId, --[[Any*]] p1, --[[float]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.SET_VARIABLE_ON_SOUND' due to disabled trusted mode")

	assert(type(soundId) == "number", "Arg #1 (soundId) must be a number.")
	assert(type(p1) == "userdata", "Arg #2 (p1) must be a userdata.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0xAD6B3148A78AE9B6, soundId, p1, p2)
end
natives.audio.set_variable_on_sound = natives.AUDIO.SET_VARIABLE_ON_SOUND

--[[
From the scripts, p0:

"ArmWrestlingIntensity",
"INOUT",
"Monkey_Stream",
"ZoomLevel"
]]
function natives.AUDIO.SET_VARIABLE_ON_STREAM(--[[const char*]] p0, --[[float]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.SET_VARIABLE_ON_STREAM' due to disabled trusted mode")

	assert(type(p0) == "string", "Arg #1 (p0) must be a string.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x2F9D3834AEB9EF79, p0, p1)
end
natives.audio.set_variable_on_stream = natives.AUDIO.SET_VARIABLE_ON_STREAM

function natives.AUDIO.OVERRIDE_UNDERWATER_STREAM(--[[Any*]] p0, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.OVERRIDE_UNDERWATER_STREAM' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0xF2A9CDABCEA04BD6, p0, p1)
end
natives.audio.override_underwater_stream = natives.AUDIO.OVERRIDE_UNDERWATER_STREAM

--[[
AUDIO::SET_VARIABLE_ON_UNDER_WATER_STREAM("inTunnel", 1.0);
AUDIO::SET_VARIABLE_ON_UNDER_WATER_STREAM("inTunnel", 0.0);
]]
function natives.AUDIO.SET_VARIABLE_ON_UNDER_WATER_STREAM(--[[const char*]] variableName, --[[float]] value) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.SET_VARIABLE_ON_UNDER_WATER_STREAM' due to disabled trusted mode")

	assert(type(variableName) == "string", "Arg #1 (variableName) must be a string.")
	assert(type(value) == "number", "Arg #2 (value) must be a number.")

	local result = native_call(0x733ADF241531E5C2, variableName, value)
end
natives.audio.set_variable_on_under_water_stream = natives.AUDIO.SET_VARIABLE_ON_UNDER_WATER_STREAM

function natives.AUDIO.HAS_SOUND_FINISHED(--[[int]] soundId) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.HAS_SOUND_FINISHED' due to disabled trusted mode")

	assert(type(soundId) == "number", "Arg #1 (soundId) must be a number.")

	local result = native_call(0xFCBDCE714A7C88E5, soundId)
	return result:__tointeger() ~= 0
end
natives.audio.has_sound_finished = natives.AUDIO.HAS_SOUND_FINISHED

--[[
Plays ambient speech. See also _0x444180DB.

ped: The ped to play the ambient speech.
speechName: Name of the speech to play, eg. "GENERIC_HI".
speechParam: Can be one of the following:
SPEECH_PARAMS_STANDARD
SPEECH_PARAMS_ALLOW_REPEAT
SPEECH_PARAMS_BEAT
SPEECH_PARAMS_FORCE
SPEECH_PARAMS_FORCE_FRONTEND
SPEECH_PARAMS_FORCE_NO_REPEAT_FRONTEND
SPEECH_PARAMS_FORCE_NORMAL
SPEECH_PARAMS_FORCE_NORMAL_CLEAR
SPEECH_PARAMS_FORCE_NORMAL_CRITICAL
SPEECH_PARAMS_FORCE_SHOUTED
SPEECH_PARAMS_FORCE_SHOUTED_CLEAR
SPEECH_PARAMS_FORCE_SHOUTED_CRITICAL
SPEECH_PARAMS_FORCE_PRELOAD_ONLY
SPEECH_PARAMS_MEGAPHONE
SPEECH_PARAMS_HELI
SPEECH_PARAMS_FORCE_MEGAPHONE
SPEECH_PARAMS_FORCE_HELI
SPEECH_PARAMS_INTERRUPT
SPEECH_PARAMS_INTERRUPT_SHOUTED
SPEECH_PARAMS_INTERRUPT_SHOUTED_CLEAR
SPEECH_PARAMS_INTERRUPT_SHOUTED_CRITICAL
SPEECH_PARAMS_INTERRUPT_NO_FORCE
SPEECH_PARAMS_INTERRUPT_FRONTEND
SPEECH_PARAMS_INTERRUPT_NO_FORCE_FRONTEND
SPEECH_PARAMS_ADD_BLIP
SPEECH_PARAMS_ADD_BLIP_ALLOW_REPEAT
SPEECH_PARAMS_ADD_BLIP_FORCE
SPEECH_PARAMS_ADD_BLIP_SHOUTED
SPEECH_PARAMS_ADD_BLIP_SHOUTED_FORCE
SPEECH_PARAMS_ADD_BLIP_INTERRUPT
SPEECH_PARAMS_ADD_BLIP_INTERRUPT_FORCE
SPEECH_PARAMS_FORCE_PRELOAD_ONLY_SHOUTED
SPEECH_PARAMS_FORCE_PRELOAD_ONLY_SHOUTED_CLEAR
SPEECH_PARAMS_FORCE_PRELOAD_ONLY_SHOUTED_CRITICAL
SPEECH_PARAMS_SHOUTED
SPEECH_PARAMS_SHOUTED_CLEAR
SPEECH_PARAMS_SHOUTED_CRITICAL

Note: A list of Name and Parameters can be found here pastebin.com/1GZS5dCL

Full list of speeches and voices names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/speeches.json
]]
function natives.AUDIO.PLAY_PED_AMBIENT_SPEECH_NATIVE(--[[Ped]] ped, --[[const char*]] speechName, --[[const char*]] speechParam, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.PLAY_PED_AMBIENT_SPEECH_NATIVE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(speechName) == "string", "Arg #2 (speechName) must be a string.")
	assert(type(speechParam) == "string", "Arg #3 (speechParam) must be a string.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x8E04FEDD28D42462, ped, speechName, speechParam, p3)
end
natives.audio.play_ped_ambient_speech_native = natives.AUDIO.PLAY_PED_AMBIENT_SPEECH_NATIVE

--[[
Plays ambient speech. See also _0x5C57B85D.

See PLAY_PED_AMBIENT_SPEECH_NATIVE for parameter specifications.

Full list of speeches and voices names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/speeches.json
]]
function natives.AUDIO.PLAY_PED_AMBIENT_SPEECH_AND_CLONE_NATIVE(--[[Ped]] ped, --[[const char*]] speechName, --[[const char*]] speechParam, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.PLAY_PED_AMBIENT_SPEECH_AND_CLONE_NATIVE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(speechName) == "string", "Arg #2 (speechName) must be a string.")
	assert(type(speechParam) == "string", "Arg #3 (speechParam) must be a string.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0xC6941B4A3A8FBBB9, ped, speechName, speechParam, p3)
end
natives.audio.play_ped_ambient_speech_and_clone_native = natives.AUDIO.PLAY_PED_AMBIENT_SPEECH_AND_CLONE_NATIVE

--[[
This is the same as PLAY_PED_AMBIENT_SPEECH_NATIVE and PLAY_PED_AMBIENT_SPEECH_AND_CLONE_NATIVE but it will allow you to play a speech file from a specific voice file. It works on players and all peds, even animals.

EX (C#):
GTA.Native.Function.Call(Hash._0x3523634255FC3318, Game.Player.Character, "GENERIC_INSULT_HIGH", "s_m_y_sheriff_01_white_full_01", "SPEECH_PARAMS_FORCE_SHOUTED", 0);

The first param is the ped you want to play it on, the second is the speech name, the third is the voice name, the fourth is the speech param, and the last param is usually always 0.

Full list of speeches and voices names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/speeches.json
]]
function natives.AUDIO.PLAY_PED_AMBIENT_SPEECH_WITH_VOICE_NATIVE(--[[Ped]] ped, --[[const char*]] speechName, --[[const char*]] voiceName, --[[const char*]] speechParam, --[[BOOL]] p4) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.PLAY_PED_AMBIENT_SPEECH_WITH_VOICE_NATIVE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(speechName) == "string", "Arg #2 (speechName) must be a string.")
	assert(type(voiceName) == "string", "Arg #3 (voiceName) must be a string.")
	assert(type(speechParam) == "string", "Arg #4 (speechParam) must be a string.")
	assert(type(p4) == "boolean", "Arg #5 (p4) must be a boolean.")

	local result = native_call(0x3523634255FC3318, ped, speechName, voiceName, speechParam, p4)
end
natives.audio.play_ped_ambient_speech_with_voice_native = natives.AUDIO.PLAY_PED_AMBIENT_SPEECH_WITH_VOICE_NATIVE

--[[
Full list of speeches and voices names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/speeches.json
]]
function natives.AUDIO.PLAY_AMBIENT_SPEECH_FROM_POSITION_NATIVE(--[[const char*]] speechName, --[[const char*]] voiceName, --[[float]] x, --[[float]] y, --[[float]] z, --[[const char*]] speechParam) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.PLAY_AMBIENT_SPEECH_FROM_POSITION_NATIVE' due to disabled trusted mode")

	assert(type(speechName) == "string", "Arg #1 (speechName) must be a string.")
	assert(type(voiceName) == "string", "Arg #2 (voiceName) must be a string.")
	assert(type(x) == "number", "Arg #3 (x) must be a number.")
	assert(type(y) == "number", "Arg #4 (y) must be a number.")
	assert(type(z) == "number", "Arg #5 (z) must be a number.")
	assert(type(speechParam) == "string", "Arg #6 (speechParam) must be a string.")

	local result = native_call(0xED640017ED337E45, speechName, voiceName, x, y, z, speechParam)
end
natives.audio.play_ambient_speech_from_position_native = natives.AUDIO.PLAY_AMBIENT_SPEECH_FROM_POSITION_NATIVE

--[[
This native enables the audio flag "TrevorRageIsOverridden" and sets the voice effect to `voiceEffect`
]]
function natives.AUDIO.OVERRIDE_TREVOR_RAGE(--[[const char*]] voiceEffect) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.OVERRIDE_TREVOR_RAGE' due to disabled trusted mode")

	assert(type(voiceEffect) == "string", "Arg #1 (voiceEffect) must be a string.")

	local result = native_call(0x13AD665062541A7E, voiceEffect)
end
natives.audio.override_trevor_rage = natives.AUDIO.OVERRIDE_TREVOR_RAGE

function natives.AUDIO.RESET_TREVOR_RAGE() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.RESET_TREVOR_RAGE' due to disabled trusted mode")

	local result = native_call(0xE78503B10C4314E0)
end
natives.audio.reset_trevor_rage = natives.AUDIO.RESET_TREVOR_RAGE

function natives.AUDIO.SET_PLAYER_ANGRY(--[[Ped]] ped, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.SET_PLAYER_ANGRY' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xEA241BB04110F091, ped, toggle)
end
natives.audio.set_player_angry = natives.AUDIO.SET_PLAYER_ANGRY

--[[
Needs another parameter [int p2]. The signature is PED::PLAY_PAIN(Ped ped, int painID, int p1, int p2);

Last 2 parameters always seem to be 0.

EX: Function.Call(Hash.PLAY_PAIN, TestPed, 6, 0, 0);

Known Pain IDs
________________________

1 - Doesn't seem to do anything. Does NOT crash the game like previously said. (Latest patch)
6 - Scream (Short)
7 - Scared Scream (Kinda Long)
8 - On Fire

]]
function natives.AUDIO.PLAY_PAIN(--[[Ped]] ped, --[[int]] painID, --[[int]] p1, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.PLAY_PAIN' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(painID) == "number", "Arg #2 (painID) must be a number.")
	assert(type(p1) == "number", "Arg #3 (p1) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0xBC9AE166038A5CEC, ped, painID, p1, p3)
end
natives.audio.play_pain = natives.AUDIO.PLAY_PAIN

function natives.AUDIO.RELEASE_WEAPON_AUDIO() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.RELEASE_WEAPON_AUDIO' due to disabled trusted mode")

	local result = native_call(0xCE4AC0439F607045)
end
natives.audio.release_weapon_audio = natives.AUDIO.RELEASE_WEAPON_AUDIO

function natives.AUDIO.ACTIVATE_AUDIO_SLOWMO_MODE(--[[const char*]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.ACTIVATE_AUDIO_SLOWMO_MODE' due to disabled trusted mode")

	assert(type(p0) == "string", "Arg #1 (p0) must be a string.")

	local result = native_call(0xD01005D2BA2EB778, p0)
end
natives.audio.activate_audio_slowmo_mode = natives.AUDIO.ACTIVATE_AUDIO_SLOWMO_MODE

function natives.AUDIO.DEACTIVATE_AUDIO_SLOWMO_MODE(--[[const char*]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.DEACTIVATE_AUDIO_SLOWMO_MODE' due to disabled trusted mode")

	assert(type(p0) == "string", "Arg #1 (p0) must be a string.")

	local result = native_call(0xDDC635D5B3262C56, p0)
end
natives.audio.deactivate_audio_slowmo_mode = natives.AUDIO.DEACTIVATE_AUDIO_SLOWMO_MODE

--[[
Audio List
gtaforums.com/topic/795622-audio-for-mods/

All found occurrences in b617d, sorted alphabetically and identical lines removed: pastebin.com/FTeAj4yZ

Yes
]]
function natives.AUDIO.SET_AMBIENT_VOICE_NAME(--[[Ped]] ped, --[[const char*]] name) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.SET_AMBIENT_VOICE_NAME' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(name) == "string", "Arg #2 (name) must be a string.")

	local result = native_call(0x6C8065A3B780185B, ped, name)
end
natives.audio.set_ambient_voice_name = natives.AUDIO.SET_AMBIENT_VOICE_NAME

function natives.AUDIO.SET_AMBIENT_VOICE_NAME_HASH(--[[Ped]] ped, --[[Hash]] hash) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.SET_AMBIENT_VOICE_NAME_HASH' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(hash) == "number", "Arg #2 (hash) must be a number.")

	local result = native_call(0x9A53DED9921DE990, ped, hash)
end
natives.audio.set_ambient_voice_name_hash = natives.AUDIO.SET_AMBIENT_VOICE_NAME_HASH

function natives.AUDIO.GET_AMBIENT_VOICE_NAME_HASH(--[[Ped]] ped) -- Returns Hash
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.GET_AMBIENT_VOICE_NAME_HASH' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x5E203DA2BA15D436, ped)
	return result:__tointeger()
end
natives.audio.get_ambient_voice_name_hash = natives.AUDIO.GET_AMBIENT_VOICE_NAME_HASH

--[[
Assigns some ambient voice to the ped.
]]
function natives.AUDIO.SET_PED_VOICE_FULL(--[[Ped]] ped) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.SET_PED_VOICE_FULL' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x40CF0D12D142A9E8, ped)
end
natives.audio.set_ped_voice_full = natives.AUDIO.SET_PED_VOICE_FULL

function natives.AUDIO.SET_PED_RACE_AND_VOICE_GROUP(--[[Ped]] ped, --[[Any]] p1, --[[Any]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.SET_PED_RACE_AND_VOICE_GROUP' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0x1B7ABE26CBCBF8C7, ped, p1, p2)
end
natives.audio.set_ped_race_and_voice_group = natives.AUDIO.SET_PED_RACE_AND_VOICE_GROUP

--[[
From the scripts:

AUDIO::_SET_PED_VOICE_GROUP(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("PAIGE_PVG"));
AUDIO::_SET_PED_VOICE_GROUP(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("TALINA_PVG"));
AUDIO::_SET_PED_VOICE_GROUP(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("FEMALE_LOST_BLACK_PVG"));
AUDIO::_SET_PED_VOICE_GROUP(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("FEMALE_LOST_WHITE_PVG"));
]]
function natives.AUDIO.SET_PED_VOICE_GROUP(--[[Ped]] ped, --[[Hash]] voiceGroupHash) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.SET_PED_VOICE_GROUP' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(voiceGroupHash) == "number", "Arg #2 (voiceGroupHash) must be a number.")

	local result = native_call(0x7CDC8C3B89F661B3, ped, voiceGroupHash)
end
natives.audio.set_ped_voice_group = natives.AUDIO.SET_PED_VOICE_GROUP

--[[
Dat151RelType == 29
]]
function natives.AUDIO.SET_PED_VOICE_GROUP_FROM_RACE_TO_PVG(--[[Ped]] ped, --[[Hash]] voiceGroupHash) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.SET_PED_VOICE_GROUP_FROM_RACE_TO_PVG' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(voiceGroupHash) == "number", "Arg #2 (voiceGroupHash) must be a number.")

	local result = native_call(0x0BABC1345ABBFB16, ped, voiceGroupHash)
end
natives.audio.set_ped_voice_group_from_race_to_pvg = natives.AUDIO.SET_PED_VOICE_GROUP_FROM_RACE_TO_PVG

--[[
BOOL p1: 0 = Female; 1 = Male
]]
function natives.AUDIO.SET_PED_GENDER(--[[Ped]] ped, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.SET_PED_GENDER' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0xA5342D390CDA41D6, ped, p1)
end
natives.audio.set_ped_gender = natives.AUDIO.SET_PED_GENDER

function natives.AUDIO.STOP_CURRENT_PLAYING_SPEECH(--[[Ped]] ped) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.STOP_CURRENT_PLAYING_SPEECH' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x7A73D05A607734C7, ped)
end
natives.audio.stop_current_playing_speech = natives.AUDIO.STOP_CURRENT_PLAYING_SPEECH

function natives.AUDIO.STOP_CURRENT_PLAYING_AMBIENT_SPEECH(--[[Ped]] ped) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.STOP_CURRENT_PLAYING_AMBIENT_SPEECH' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0xB8BEC0CA6F0EDB0F, ped)
end
natives.audio.stop_current_playing_ambient_speech = natives.AUDIO.STOP_CURRENT_PLAYING_AMBIENT_SPEECH

function natives.AUDIO.IS_AMBIENT_SPEECH_PLAYING(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.IS_AMBIENT_SPEECH_PLAYING' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x9072C8B49907BFAD, ped)
	return result:__tointeger() ~= 0
end
natives.audio.is_ambient_speech_playing = natives.AUDIO.IS_AMBIENT_SPEECH_PLAYING

function natives.AUDIO.IS_SCRIPTED_SPEECH_PLAYING(--[[Any]] p0) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.IS_SCRIPTED_SPEECH_PLAYING' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xCC9AA18DCC7084F4, p0)
	return result:__tointeger() ~= 0
end
natives.audio.is_scripted_speech_playing = natives.AUDIO.IS_SCRIPTED_SPEECH_PLAYING

function natives.AUDIO.IS_ANY_SPEECH_PLAYING(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.IS_ANY_SPEECH_PLAYING' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x729072355FA39EC9, ped)
	return result:__tointeger() ~= 0
end
natives.audio.is_any_speech_playing = natives.AUDIO.IS_ANY_SPEECH_PLAYING

function natives.AUDIO.IS_ANY_POSITIONAL_SPEECH_PLAYING() -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.IS_ANY_POSITIONAL_SPEECH_PLAYING' due to disabled trusted mode")

	local result = native_call(0x30CA2EF91D15ADF8)
	return result:__tointeger()
end
natives.audio.is_any_positional_speech_playing = natives.AUDIO.IS_ANY_POSITIONAL_SPEECH_PLAYING

--[[
Checks if the ped can play the speech or has the speech file, last parameter is usually false.
]]
function natives.AUDIO.DOES_CONTEXT_EXIST_FOR_THIS_PED(--[[Ped]] ped, --[[const char*]] speechName, --[[BOOL]] unk) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.DOES_CONTEXT_EXIST_FOR_THIS_PED' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(speechName) == "string", "Arg #2 (speechName) must be a string.")
	assert(type(unk) == "boolean", "Arg #3 (unk) must be a boolean.")

	local result = native_call(0x49B99BF3FDA89A7A, ped, speechName, unk)
	return result:__tointeger() ~= 0
end
natives.audio.does_context_exist_for_this_ped = natives.AUDIO.DOES_CONTEXT_EXIST_FOR_THIS_PED

function natives.AUDIO.IS_PED_IN_CURRENT_CONVERSATION(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.IS_PED_IN_CURRENT_CONVERSATION' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x049E937F18F4020C, ped)
	return result:__tointeger() ~= 0
end
natives.audio.is_ped_in_current_conversation = natives.AUDIO.IS_PED_IN_CURRENT_CONVERSATION

--[[
Sets the ped drunk sounds.  Only works with PLAYER_PED_ID

====================================================

As mentioned above, this only sets the drunk sound to ped/player.

To give the Ped a drunk effect with drunk walking animation try using SET_PED_MOVEMENT_CLIPSET

Below is an example

if (!Function.Call<bool>(Hash.HAS_ANIM_SET_LOADED, "move_m@drunk@verydrunk"))
                {
                    Function.Call(Hash.REQUEST_ANIM_SET, "move_m@drunk@verydrunk");
                }
                Function.Call(Hash.SET_PED_MOVEMENT_CLIPSET, Ped.Handle, "move_m@drunk@verydrunk", 0x3E800000);



And to stop the effect use
RESET_PED_MOVEMENT_CLIPSET
]]
function natives.AUDIO.SET_PED_IS_DRUNK(--[[Ped]] ped, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.SET_PED_IS_DRUNK' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x95D2D383D5396B8A, ped, toggle)
end
natives.audio.set_ped_is_drunk = natives.AUDIO.SET_PED_IS_DRUNK

--[[
Plays sounds from a ped with chop model. For example it used to play bark or sniff sounds. p1 is always 3 or 4294967295 in decompiled scripts. By a quick disassembling I can assume that this arg is unused.
This native is works only when you call it on the ped with right model (ac_chop only ?)
Speech Name can be: CHOP_SNIFF_SEQ CHOP_WHINE CHOP_LICKS_MOUTH CHOP_PANT bark GROWL SNARL BARK_SEQ
]]
function natives.AUDIO.PLAY_ANIMAL_VOCALIZATION(--[[Ped]] pedHandle, --[[int]] p1, --[[const char*]] speechName) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.PLAY_ANIMAL_VOCALIZATION' due to disabled trusted mode")

	assert(type(pedHandle) == "number", "Arg #1 (pedHandle) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(speechName) == "string", "Arg #3 (speechName) must be a string.")

	local result = native_call(0xEE066C7006C49C0A, pedHandle, p1, speechName)
end
natives.audio.play_animal_vocalization = natives.AUDIO.PLAY_ANIMAL_VOCALIZATION

function natives.AUDIO.IS_ANIMAL_VOCALIZATION_PLAYING(--[[Ped]] pedHandle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.IS_ANIMAL_VOCALIZATION_PLAYING' due to disabled trusted mode")

	assert(type(pedHandle) == "number", "Arg #1 (pedHandle) must be a number.")

	local result = native_call(0xC265DF9FB44A9FBD, pedHandle)
	return result:__tointeger() ~= 0
end
natives.audio.is_animal_vocalization_playing = natives.AUDIO.IS_ANIMAL_VOCALIZATION_PLAYING

--[[
mood can be 0 or 1 (it's not a boolean value!). Effects audio of the animal.
]]
function natives.AUDIO.SET_ANIMAL_MOOD(--[[Ped]] animal, --[[int]] mood) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.SET_ANIMAL_MOOD' due to disabled trusted mode")

	assert(type(animal) == "number", "Arg #1 (animal) must be a number.")
	assert(type(mood) == "number", "Arg #2 (mood) must be a number.")

	local result = native_call(0xCC97B29285B1DC3B, animal, mood)
end
natives.audio.set_animal_mood = natives.AUDIO.SET_ANIMAL_MOOD

function natives.AUDIO.IS_MOBILE_PHONE_RADIO_ACTIVE() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.IS_MOBILE_PHONE_RADIO_ACTIVE' due to disabled trusted mode")

	local result = native_call(0xB35CE999E8EF317E)
	return result:__tointeger() ~= 0
end
natives.audio.is_mobile_phone_radio_active = natives.AUDIO.IS_MOBILE_PHONE_RADIO_ACTIVE

function natives.AUDIO.SET_MOBILE_PHONE_RADIO_STATE(--[[BOOL]] state) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.SET_MOBILE_PHONE_RADIO_STATE' due to disabled trusted mode")

	assert(type(state) == "boolean", "Arg #1 (state) must be a boolean.")

	local result = native_call(0xBF286C554784F3DF, state)
end
natives.audio.set_mobile_phone_radio_state = natives.AUDIO.SET_MOBILE_PHONE_RADIO_STATE

--[[
Returns 255 (radio off index) if the function fails.
]]
function natives.AUDIO.GET_PLAYER_RADIO_STATION_INDEX() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.GET_PLAYER_RADIO_STATION_INDEX' due to disabled trusted mode")

	local result = native_call(0xE8AF77C4C06ADC93)
	return result:__tointeger()
end
natives.audio.get_player_radio_station_index = natives.AUDIO.GET_PLAYER_RADIO_STATION_INDEX

--[[
Returns active radio station name
]]
function natives.AUDIO.GET_PLAYER_RADIO_STATION_NAME() -- Returns const char*
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.GET_PLAYER_RADIO_STATION_NAME' due to disabled trusted mode")

	local result = native_call(0xF6D733C32076AD03)
	return result:__tostring(true)
end
natives.audio.get_player_radio_station_name = natives.AUDIO.GET_PLAYER_RADIO_STATION_NAME

--[[
Converts radio station index to string. Use HUD::_GET_LABEL_TEXT to get the user-readable text.
]]
function natives.AUDIO.GET_RADIO_STATION_NAME(--[[int]] radioStation) -- Returns const char*
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.GET_RADIO_STATION_NAME' due to disabled trusted mode")

	assert(type(radioStation) == "number", "Arg #1 (radioStation) must be a number.")

	local result = native_call(0xB28ECA15046CA8B9, radioStation)
	return result:__tostring(true)
end
natives.audio.get_radio_station_name = natives.AUDIO.GET_RADIO_STATION_NAME

function natives.AUDIO.GET_PLAYER_RADIO_STATION_GENRE() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.GET_PLAYER_RADIO_STATION_GENRE' due to disabled trusted mode")

	local result = native_call(0xA571991A7FE6CCEB)
	return result:__tointeger()
end
natives.audio.get_player_radio_station_genre = natives.AUDIO.GET_PLAYER_RADIO_STATION_GENRE

function natives.AUDIO.IS_RADIO_RETUNING() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.IS_RADIO_RETUNING' due to disabled trusted mode")

	local result = native_call(0xA151A7394A214E65)
	return result:__tointeger() ~= 0
end
natives.audio.is_radio_retuning = natives.AUDIO.IS_RADIO_RETUNING

function natives.AUDIO.IS_RADIO_FADED_OUT() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.IS_RADIO_FADED_OUT' due to disabled trusted mode")

	local result = native_call(0x0626A247D2405330)
	return result:__tointeger() ~= 0
end
natives.audio.is_radio_faded_out = natives.AUDIO.IS_RADIO_FADED_OUT

--[[
Tune Forward...
]]
function natives.AUDIO.SET_RADIO_RETUNE_UP() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.SET_RADIO_RETUNE_UP' due to disabled trusted mode")

	local result = native_call(0xFF266D1D0EB1195D)
end
natives.audio.set_radio_retune_up = natives.AUDIO.SET_RADIO_RETUNE_UP

--[[
Tune Backwards...
]]
function natives.AUDIO.SET_RADIO_RETUNE_DOWN() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.SET_RADIO_RETUNE_DOWN' due to disabled trusted mode")

	local result = native_call(0xDD6BCF9E94425DF9)
end
natives.audio.set_radio_retune_down = natives.AUDIO.SET_RADIO_RETUNE_DOWN

--[[
List of radio stations that are in the wheel, in clockwise order, as of LS Tuners DLC: https://git.io/J8a3k
An older list including hidden radio stations: https://pastebin.com/Kj9t38KF
]]
function natives.AUDIO.SET_RADIO_TO_STATION_NAME(--[[const char*]] stationName) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.SET_RADIO_TO_STATION_NAME' due to disabled trusted mode")

	assert(type(stationName) == "string", "Arg #1 (stationName) must be a string.")

	local result = native_call(0xC69EDA28699D5107, stationName)
end
natives.audio.set_radio_to_station_name = natives.AUDIO.SET_RADIO_TO_STATION_NAME

--[[
List of radio stations that are in the wheel, in clockwise order, as of LS Tuners DLC: https://git.io/J8a3k
An older list including hidden radio stations: https://pastebin.com/Kj9t38KF
]]
function natives.AUDIO.SET_VEH_RADIO_STATION(--[[Vehicle]] vehicle, --[[const char*]] radioStation) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.SET_VEH_RADIO_STATION' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(radioStation) == "string", "Arg #2 (radioStation) must be a string.")

	local result = native_call(0x1B9C0099CB942AC6, vehicle, radioStation)
end
natives.audio.set_veh_radio_station = natives.AUDIO.SET_VEH_RADIO_STATION

function natives.AUDIO.SET_VEH_HAS_NORMAL_RADIO(--[[Vehicle]] vehicle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.SET_VEH_HAS_NORMAL_RADIO' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x3E45765F3FBB582F, vehicle)
end
natives.audio.set_veh_has_normal_radio = natives.AUDIO.SET_VEH_HAS_NORMAL_RADIO

function natives.AUDIO.IS_VEHICLE_RADIO_ON(--[[Vehicle]] vehicle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.IS_VEHICLE_RADIO_ON' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x0BE4BE946463F917, vehicle)
	return result:__tointeger() ~= 0
end
natives.audio.is_vehicle_radio_on = natives.AUDIO.IS_VEHICLE_RADIO_ON

function natives.AUDIO.SET_VEH_FORCED_RADIO_THIS_FRAME(--[[Vehicle]] vehicle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.SET_VEH_FORCED_RADIO_THIS_FRAME' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0xC1805D05E6D4FE10, vehicle)
end
natives.audio.set_veh_forced_radio_this_frame = natives.AUDIO.SET_VEH_FORCED_RADIO_THIS_FRAME

--[[
Full list of static emitters by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/staticEmitters.json
]]
function natives.AUDIO.SET_EMITTER_RADIO_STATION(--[[const char*]] emitterName, --[[const char*]] radioStation) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.SET_EMITTER_RADIO_STATION' due to disabled trusted mode")

	assert(type(emitterName) == "string", "Arg #1 (emitterName) must be a string.")
	assert(type(radioStation) == "string", "Arg #2 (radioStation) must be a string.")

	local result = native_call(0xACF57305B12AF907, emitterName, radioStation)
end
natives.audio.set_emitter_radio_station = natives.AUDIO.SET_EMITTER_RADIO_STATION

--[[
Example:
AUDIO::SET_STATIC_EMITTER_ENABLED((Any*)"LOS_SANTOS_VANILLA_UNICORN_01_STAGE", false);    AUDIO::SET_STATIC_EMITTER_ENABLED((Any*)"LOS_SANTOS_VANILLA_UNICORN_02_MAIN_ROOM", false);    AUDIO::SET_STATIC_EMITTER_ENABLED((Any*)"LOS_SANTOS_VANILLA_UNICORN_03_BACK_ROOM", false);

This turns off surrounding sounds not connected directly to peds.

Full list of static emitters by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/staticEmitters.json
]]
function natives.AUDIO.SET_STATIC_EMITTER_ENABLED(--[[const char*]] emitterName, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.SET_STATIC_EMITTER_ENABLED' due to disabled trusted mode")

	assert(type(emitterName) == "string", "Arg #1 (emitterName) must be a string.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x399D2D3B33F1B8EB, emitterName, toggle)
end
natives.audio.set_static_emitter_enabled = natives.AUDIO.SET_STATIC_EMITTER_ENABLED

--[[
Full list of static emitters by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/staticEmitters.json
]]
function natives.AUDIO.LINK_STATIC_EMITTER_TO_ENTITY(--[[const char*]] emitterName, --[[Entity]] entity) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.LINK_STATIC_EMITTER_TO_ENTITY' due to disabled trusted mode")

	assert(type(emitterName) == "string", "Arg #1 (emitterName) must be a string.")
	assert(type(entity) == "number", "Arg #2 (entity) must be a number.")

	local result = native_call(0x651D3228960D08AF, emitterName, entity)
end
natives.audio.link_static_emitter_to_entity = natives.AUDIO.LINK_STATIC_EMITTER_TO_ENTITY

--[[
Sets radio station by index.
]]
function natives.AUDIO.SET_RADIO_TO_STATION_INDEX(--[[int]] radioStation) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.SET_RADIO_TO_STATION_INDEX' due to disabled trusted mode")

	assert(type(radioStation) == "number", "Arg #1 (radioStation) must be a number.")

	local result = native_call(0xA619B168B8A8570F, radioStation)
end
natives.audio.set_radio_to_station_index = natives.AUDIO.SET_RADIO_TO_STATION_INDEX

function natives.AUDIO.SET_FRONTEND_RADIO_ACTIVE(--[[BOOL]] active) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.SET_FRONTEND_RADIO_ACTIVE' due to disabled trusted mode")

	assert(type(active) == "boolean", "Arg #1 (active) must be a boolean.")

	local result = native_call(0xF7F26C6E9CC9EBB8, active)
end
natives.audio.set_frontend_radio_active = natives.AUDIO.SET_FRONTEND_RADIO_ACTIVE

--[[
"news" that play on the radio after you've done something in story mode(?)
]]
function natives.AUDIO.UNLOCK_MISSION_NEWS_STORY(--[[int]] newsStory) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.UNLOCK_MISSION_NEWS_STORY' due to disabled trusted mode")

	assert(type(newsStory) == "number", "Arg #1 (newsStory) must be a number.")

	local result = native_call(0xB165AB7C248B2DC1, newsStory)
end
natives.audio.unlock_mission_news_story = natives.AUDIO.UNLOCK_MISSION_NEWS_STORY

function natives.AUDIO.IS_MISSION_NEWS_STORY_UNLOCKED(--[[int]] newsStory) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.IS_MISSION_NEWS_STORY_UNLOCKED' due to disabled trusted mode")

	assert(type(newsStory) == "number", "Arg #1 (newsStory) must be a number.")

	local result = native_call(0x66E49BF55B4B1874, newsStory)
	return result:__tointeger() ~= 0
end
natives.audio.is_mission_news_story_unlocked = natives.AUDIO.IS_MISSION_NEWS_STORY_UNLOCKED

function natives.AUDIO.GET_AUDIBLE_MUSIC_TRACK_TEXT_ID() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.GET_AUDIBLE_MUSIC_TRACK_TEXT_ID' due to disabled trusted mode")

	local result = native_call(0x50B196FC9ED6545B)
	return result:__tointeger()
end
natives.audio.get_audible_music_track_text_id = natives.AUDIO.GET_AUDIBLE_MUSIC_TRACK_TEXT_ID

function natives.AUDIO.PLAY_END_CREDITS_MUSIC(--[[BOOL]] play) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.PLAY_END_CREDITS_MUSIC' due to disabled trusted mode")

	assert(type(play) == "boolean", "Arg #1 (play) must be a boolean.")

	local result = native_call(0xCD536C4D33DCC900, play)
end
natives.audio.play_end_credits_music = natives.AUDIO.PLAY_END_CREDITS_MUSIC

function natives.AUDIO.SKIP_RADIO_FORWARD() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.SKIP_RADIO_FORWARD' due to disabled trusted mode")

	local result = native_call(0x6DDBBDD98E2E9C25)
end
natives.audio.skip_radio_forward = natives.AUDIO.SKIP_RADIO_FORWARD

function natives.AUDIO.FREEZE_RADIO_STATION(--[[const char*]] radioStation) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.FREEZE_RADIO_STATION' due to disabled trusted mode")

	assert(type(radioStation) == "string", "Arg #1 (radioStation) must be a string.")

	local result = native_call(0x344F393B027E38C3, radioStation)
end
natives.audio.freeze_radio_station = natives.AUDIO.FREEZE_RADIO_STATION

function natives.AUDIO.UNFREEZE_RADIO_STATION(--[[const char*]] radioStation) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.UNFREEZE_RADIO_STATION' due to disabled trusted mode")

	assert(type(radioStation) == "string", "Arg #1 (radioStation) must be a string.")

	local result = native_call(0xFC00454CF60B91DD, radioStation)
end
natives.audio.unfreeze_radio_station = natives.AUDIO.UNFREEZE_RADIO_STATION

function natives.AUDIO.SET_RADIO_AUTO_UNFREEZE(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.SET_RADIO_AUTO_UNFREEZE' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0xC1AA9F53CE982990, toggle)
end
natives.audio.set_radio_auto_unfreeze = natives.AUDIO.SET_RADIO_AUTO_UNFREEZE

function natives.AUDIO.SET_INITIAL_PLAYER_STATION(--[[const char*]] radioStation) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.SET_INITIAL_PLAYER_STATION' due to disabled trusted mode")

	assert(type(radioStation) == "string", "Arg #1 (radioStation) must be a string.")

	local result = native_call(0x88795F13FACDA88D, radioStation)
end
natives.audio.set_initial_player_station = natives.AUDIO.SET_INITIAL_PLAYER_STATION

function natives.AUDIO.SET_USER_RADIO_CONTROL_ENABLED(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.SET_USER_RADIO_CONTROL_ENABLED' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x19F21E63AE6EAE4E, toggle)
end
natives.audio.set_user_radio_control_enabled = natives.AUDIO.SET_USER_RADIO_CONTROL_ENABLED

--[[
Only found this one in the decompiled scripts:

AUDIO::SET_RADIO_TRACK("RADIO_03_HIPHOP_NEW", "ARM1_RADIO_STARTS");

]]
function natives.AUDIO.SET_RADIO_TRACK(--[[const char*]] radioStation, --[[const char*]] radioTrack) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.SET_RADIO_TRACK' due to disabled trusted mode")

	assert(type(radioStation) == "string", "Arg #1 (radioStation) must be a string.")
	assert(type(radioTrack) == "string", "Arg #2 (radioTrack) must be a string.")

	local result = native_call(0xB39786F201FEE30B, radioStation, radioTrack)
end
natives.audio.set_radio_track = natives.AUDIO.SET_RADIO_TRACK

function natives.AUDIO.SET_RADIO_TRACK_WITH_START_OFFSET(--[[const char*]] radioStationName, --[[const char*]] mixName, --[[int]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.SET_RADIO_TRACK_WITH_START_OFFSET' due to disabled trusted mode")

	assert(type(radioStationName) == "string", "Arg #1 (radioStationName) must be a string.")
	assert(type(mixName) == "string", "Arg #2 (mixName) must be a string.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0x2CB0075110BE1E56, radioStationName, mixName, p2)
end
natives.audio.set_radio_track_with_start_offset = natives.AUDIO.SET_RADIO_TRACK_WITH_START_OFFSET

function natives.AUDIO.SET_NEXT_RADIO_TRACK(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.SET_NEXT_RADIO_TRACK' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x55ECF4D13D9903B0, p0, p1, p2, p3)
end
natives.audio.set_next_radio_track = natives.AUDIO.SET_NEXT_RADIO_TRACK

function natives.AUDIO.SET_VEHICLE_RADIO_LOUD(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.SET_VEHICLE_RADIO_LOUD' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xBB6F1CAEC68B0BCE, vehicle, toggle)
end
natives.audio.set_vehicle_radio_loud = natives.AUDIO.SET_VEHICLE_RADIO_LOUD

function natives.AUDIO.CAN_VEHICLE_RECEIVE_CB_RADIO(--[[Vehicle]] vehicle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.CAN_VEHICLE_RECEIVE_CB_RADIO' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x032A116663A4D5AC, vehicle)
	return result:__tointeger() ~= 0
end
natives.audio.can_vehicle_receive_cb_radio = natives.AUDIO.CAN_VEHICLE_RECEIVE_CB_RADIO

function natives.AUDIO.SET_MOBILE_RADIO_ENABLED_DURING_GAMEPLAY(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.SET_MOBILE_RADIO_ENABLED_DURING_GAMEPLAY' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x1098355A16064BB3, toggle)
end
natives.audio.set_mobile_radio_enabled_during_gameplay = natives.AUDIO.SET_MOBILE_RADIO_ENABLED_DURING_GAMEPLAY

function natives.AUDIO.DOES_PLAYER_VEH_HAVE_RADIO() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.DOES_PLAYER_VEH_HAVE_RADIO' due to disabled trusted mode")

	local result = native_call(0x109697E2FFBAC8A1)
	return result:__tointeger() ~= 0
end
natives.audio.does_player_veh_have_radio = natives.AUDIO.DOES_PLAYER_VEH_HAVE_RADIO

function natives.AUDIO.IS_PLAYER_VEH_RADIO_ENABLE() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.IS_PLAYER_VEH_RADIO_ENABLE' due to disabled trusted mode")

	local result = native_call(0x5F43D83FD6738741)
	return result:__tointeger() ~= 0
end
natives.audio.is_player_veh_radio_enable = natives.AUDIO.IS_PLAYER_VEH_RADIO_ENABLE

--[[
can't seem to enable radio on cop cars etc
]]
function natives.AUDIO.SET_VEHICLE_RADIO_ENABLED(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.SET_VEHICLE_RADIO_ENABLED' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x3B988190C0AA6C0B, vehicle, toggle)
end
natives.audio.set_vehicle_radio_enabled = natives.AUDIO.SET_VEHICLE_RADIO_ENABLED

function natives.AUDIO.SET_POSITIONED_PLAYER_VEHICLE_RADIO_EMITTER_ENABLED(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.SET_POSITIONED_PLAYER_VEHICLE_RADIO_EMITTER_ENABLED' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xDA07819E452FFE8F, p0)
end
natives.audio.set_positioned_player_vehicle_radio_emitter_enabled = natives.AUDIO.SET_POSITIONED_PLAYER_VEHICLE_RADIO_EMITTER_ENABLED

--[[
Examples:

AUDIO::SET_CUSTOM_RADIO_TRACK_LIST("RADIO_01_CLASS_ROCK", "END_CREDITS_KILL_MICHAEL", 1);
AUDIO::SET_CUSTOM_RADIO_TRACK_LIST("RADIO_01_CLASS_ROCK", "END_CREDITS_KILL_MICHAEL", 1);
AUDIO::SET_CUSTOM_RADIO_TRACK_LIST("RADIO_01_CLASS_ROCK", "END_CREDITS_KILL_TREVOR", 1);
AUDIO::SET_CUSTOM_RADIO_TRACK_LIST("RADIO_01_CLASS_ROCK", "END_CREDITS_SAVE_MICHAEL_TREVOR", 1);
AUDIO::SET_CUSTOM_RADIO_TRACK_LIST("RADIO_01_CLASS_ROCK", "OFF_ROAD_RADIO_ROCK_LIST", 1);
AUDIO::SET_CUSTOM_RADIO_TRACK_LIST("RADIO_06_COUNTRY", "MAGDEMO2_RADIO_DINGHY", 1);
AUDIO::SET_CUSTOM_RADIO_TRACK_LIST("RADIO_16_SILVERLAKE", "SEA_RACE_RADIO_PLAYLIST", 1);
AUDIO::SET_CUSTOM_RADIO_TRACK_LIST("RADIO_01_CLASS_ROCK", "OFF_ROAD_RADIO_ROCK_LIST", 1);
]]
function natives.AUDIO.SET_CUSTOM_RADIO_TRACK_LIST(--[[const char*]] radioStation, --[[const char*]] trackListName, --[[BOOL]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.SET_CUSTOM_RADIO_TRACK_LIST' due to disabled trusted mode")

	assert(type(radioStation) == "string", "Arg #1 (radioStation) must be a string.")
	assert(type(trackListName) == "string", "Arg #2 (trackListName) must be a string.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")

	local result = native_call(0x4E404A9361F75BB2, radioStation, trackListName, p2)
end
natives.audio.set_custom_radio_track_list = natives.AUDIO.SET_CUSTOM_RADIO_TRACK_LIST

--[[
3 calls in the b617d scripts, removed duplicate.

AUDIO::CLEAR_CUSTOM_RADIO_TRACK_LIST("RADIO_16_SILVERLAKE");
AUDIO::CLEAR_CUSTOM_RADIO_TRACK_LIST("RADIO_01_CLASS_ROCK");
]]
function natives.AUDIO.CLEAR_CUSTOM_RADIO_TRACK_LIST(--[[const char*]] radioStation) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.CLEAR_CUSTOM_RADIO_TRACK_LIST' due to disabled trusted mode")

	assert(type(radioStation) == "string", "Arg #1 (radioStation) must be a string.")

	local result = native_call(0x1654F24A88A8E3FE, radioStation)
end
natives.audio.clear_custom_radio_track_list = natives.AUDIO.CLEAR_CUSTOM_RADIO_TRACK_LIST

function natives.AUDIO.GET_NUM_UNLOCKED_RADIO_STATIONS() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.GET_NUM_UNLOCKED_RADIO_STATIONS' due to disabled trusted mode")

	local result = native_call(0xF1620ECB50E01DE7)
	return result:__tointeger()
end
natives.audio.get_num_unlocked_radio_stations = natives.AUDIO.GET_NUM_UNLOCKED_RADIO_STATIONS

function natives.AUDIO.FIND_RADIO_STATION_INDEX(--[[Hash]] stationNameHash) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.FIND_RADIO_STATION_INDEX' due to disabled trusted mode")

	assert(type(stationNameHash) == "number", "Arg #1 (stationNameHash) must be a number.")

	local result = native_call(0x8D67489793FF428B, stationNameHash)
	return result:__tointeger()
end
natives.audio.find_radio_station_index = natives.AUDIO.FIND_RADIO_STATION_INDEX

--[[
6 calls in the b617d scripts, removed identical lines:

AUDIO::SET_RADIO_STATION_MUSIC_ONLY("RADIO_01_CLASS_ROCK", 1);
AUDIO::SET_RADIO_STATION_MUSIC_ONLY(AUDIO::GET_RADIO_STATION_NAME(10), 0);
AUDIO::SET_RADIO_STATION_MUSIC_ONLY(AUDIO::GET_RADIO_STATION_NAME(10), 1);
]]
function natives.AUDIO.SET_RADIO_STATION_MUSIC_ONLY(--[[const char*]] radioStation, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.SET_RADIO_STATION_MUSIC_ONLY' due to disabled trusted mode")

	assert(type(radioStation) == "string", "Arg #1 (radioStation) must be a string.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x774BD811F656A122, radioStation, toggle)
end
natives.audio.set_radio_station_music_only = natives.AUDIO.SET_RADIO_STATION_MUSIC_ONLY

function natives.AUDIO.SET_RADIO_FRONTEND_FADE_TIME(--[[float]] fadeTime) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.SET_RADIO_FRONTEND_FADE_TIME' due to disabled trusted mode")

	assert(type(fadeTime) == "number", "Arg #1 (fadeTime) must be a number.")

	local result = native_call(0x2C96CDB04FCA358E, fadeTime)
end
natives.audio.set_radio_frontend_fade_time = natives.AUDIO.SET_RADIO_FRONTEND_FADE_TIME

--[[
AUDIO::UNLOCK_RADIO_STATION_TRACK_LIST("RADIO_16_SILVERLAKE", "MIRRORPARK_LOCKED");
]]
function natives.AUDIO.UNLOCK_RADIO_STATION_TRACK_LIST(--[[const char*]] radioStation, --[[const char*]] trackListName) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.UNLOCK_RADIO_STATION_TRACK_LIST' due to disabled trusted mode")

	assert(type(radioStation) == "string", "Arg #1 (radioStation) must be a string.")
	assert(type(trackListName) == "string", "Arg #2 (trackListName) must be a string.")

	local result = native_call(0x031ACB6ABA18C729, radioStation, trackListName)
end
natives.audio.unlock_radio_station_track_list = natives.AUDIO.UNLOCK_RADIO_STATION_TRACK_LIST

function natives.AUDIO.LOCK_RADIO_STATION_TRACK_LIST(--[[const char*]] radioStation, --[[const char*]] trackListName) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.LOCK_RADIO_STATION_TRACK_LIST' due to disabled trusted mode")

	assert(type(radioStation) == "string", "Arg #1 (radioStation) must be a string.")
	assert(type(trackListName) == "string", "Arg #2 (trackListName) must be a string.")

	local result = native_call(0xFF5E5EA2DCEEACF3, radioStation, trackListName)
end
natives.audio.lock_radio_station_track_list = natives.AUDIO.LOCK_RADIO_STATION_TRACK_LIST

--[[
Just a nullsub (i.e. does absolutely nothing) since build 1604.
]]
function natives.AUDIO.UPDATE_UNLOCKABLE_DJ_RADIO_TRACKS(--[[BOOL]] enableMixes) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.UPDATE_UNLOCKABLE_DJ_RADIO_TRACKS' due to disabled trusted mode")

	assert(type(enableMixes) == "boolean", "Arg #1 (enableMixes) must be a boolean.")

	local result = native_call(0x47AED84213A47510, enableMixes)
end
natives.audio.update_unlockable_dj_radio_tracks = natives.AUDIO.UPDATE_UNLOCKABLE_DJ_RADIO_TRACKS

--[[
Disables the radio station (hides it from the radio wheel).
]]
function natives.AUDIO.LOCK_RADIO_STATION(--[[const char*]] radioStationName, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.LOCK_RADIO_STATION' due to disabled trusted mode")

	assert(type(radioStationName) == "string", "Arg #1 (radioStationName) must be a string.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x477D9DB48F889591, radioStationName, toggle)
end
natives.audio.lock_radio_station = natives.AUDIO.LOCK_RADIO_STATION

--[[
Doesn't have an effect in Story Mode.
]]
function natives.AUDIO.SET_RADIO_STATION_AS_FAVOURITE(--[[const char*]] radioStation, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.SET_RADIO_STATION_AS_FAVOURITE' due to disabled trusted mode")

	assert(type(radioStation) == "string", "Arg #1 (radioStation) must be a string.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x4CAFEBFA21EC188D, radioStation, toggle)
end
natives.audio.set_radio_station_as_favourite = natives.AUDIO.SET_RADIO_STATION_AS_FAVOURITE

function natives.AUDIO.IS_RADIO_STATION_FAVOURITED(--[[const char*]] radioStation) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.IS_RADIO_STATION_FAVOURITED' due to disabled trusted mode")

	assert(type(radioStation) == "string", "Arg #1 (radioStation) must be a string.")

	local result = native_call(0x2B1784DB08AFEA79, radioStation)
	return result:__tointeger() ~= 0
end
natives.audio.is_radio_station_favourited = natives.AUDIO.IS_RADIO_STATION_FAVOURITED

function natives.AUDIO.GET_NEXT_AUDIBLE_BEAT(--[[float*]] p0, --[[float*]] p1, --[[int*]] p2) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.GET_NEXT_AUDIBLE_BEAT' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")
	assert(type(p1) == "userdata", "Arg #2 (p1) must be a userdata.")
	assert(type(p2) == "userdata", "Arg #3 (p2) must be a userdata.")

	local result = native_call(0xC64A06D939F826F5, p0, p1, p2)
	return result:__tointeger() ~= 0
end
natives.audio.get_next_audible_beat = natives.AUDIO.GET_NEXT_AUDIBLE_BEAT

--[[
Changes start time of a tracklist (milliseconds)
R* uses a random int: MISC::GET_RANDOM_INT_IN_RANGE(0, 13) * 60000)
]]
function natives.AUDIO.FORCE_MUSIC_TRACK_LIST(--[[const char*]] radioStation, --[[const char*]] trackListName, --[[int]] milliseconds) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.FORCE_MUSIC_TRACK_LIST' due to disabled trusted mode")

	assert(type(radioStation) == "string", "Arg #1 (radioStation) must be a string.")
	assert(type(trackListName) == "string", "Arg #2 (trackListName) must be a string.")
	assert(type(milliseconds) == "number", "Arg #3 (milliseconds) must be a number.")

	local result = native_call(0x4E0AF9114608257C, radioStation, trackListName, milliseconds)
end
natives.audio.force_music_track_list = natives.AUDIO.FORCE_MUSIC_TRACK_LIST

function natives.AUDIO.GET_CURRENT_TRACK_PLAY_TIME(--[[const char*]] radioStationName) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.GET_CURRENT_TRACK_PLAY_TIME' due to disabled trusted mode")

	assert(type(radioStationName) == "string", "Arg #1 (radioStationName) must be a string.")

	local result = native_call(0x3E65CDE5215832C1, radioStationName)
	return result:__tointeger()
end
natives.audio.get_current_track_play_time = natives.AUDIO.GET_CURRENT_TRACK_PLAY_TIME

function natives.AUDIO.GET_CURRENT_TRACK_SOUND_NAME(--[[const char*]] radioStationName) -- Returns Hash
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.GET_CURRENT_TRACK_SOUND_NAME' due to disabled trusted mode")

	assert(type(radioStationName) == "string", "Arg #1 (radioStationName) must be a string.")

	local result = native_call(0x34D66BC058019CE0, radioStationName)
	return result:__tointeger()
end
natives.audio.get_current_track_sound_name = natives.AUDIO.GET_CURRENT_TRACK_SOUND_NAME

function natives.AUDIO.SET_VEHICLE_MISSILE_WARNING_ENABLED(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.SET_VEHICLE_MISSILE_WARNING_ENABLED' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xF3365489E0DD50F9, vehicle, toggle)
end
natives.audio.set_vehicle_missile_warning_enabled = natives.AUDIO.SET_VEHICLE_MISSILE_WARNING_ENABLED

--[[
Full list of ambient zones by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ambientZones.json
]]
function natives.AUDIO.SET_AMBIENT_ZONE_STATE(--[[const char*]] zoneName, --[[BOOL]] p1, --[[BOOL]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.SET_AMBIENT_ZONE_STATE' due to disabled trusted mode")

	assert(type(zoneName) == "string", "Arg #1 (zoneName) must be a string.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")

	local result = native_call(0xBDA07E5950085E46, zoneName, p1, p2)
end
natives.audio.set_ambient_zone_state = natives.AUDIO.SET_AMBIENT_ZONE_STATE

--[[
This function also has a p2, unknown. Signature AUDIO::CLEAR_AMBIENT_ZONE_STATE(const char* zoneName, bool p1, Any p2);

Still needs more research.

Full list of ambient zones by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ambientZones.json
]]
function natives.AUDIO.CLEAR_AMBIENT_ZONE_STATE(--[[const char*]] zoneName, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.CLEAR_AMBIENT_ZONE_STATE' due to disabled trusted mode")

	assert(type(zoneName) == "string", "Arg #1 (zoneName) must be a string.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0x218DD44AAAC964FF, zoneName, p1)
end
natives.audio.clear_ambient_zone_state = natives.AUDIO.CLEAR_AMBIENT_ZONE_STATE

function natives.AUDIO.SET_AMBIENT_ZONE_LIST_STATE(--[[Any*]] p0, --[[BOOL]] p1, --[[BOOL]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.SET_AMBIENT_ZONE_LIST_STATE' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")

	local result = native_call(0x9748FA4DE50CCE3E, p0, p1, p2)
end
natives.audio.set_ambient_zone_list_state = natives.AUDIO.SET_AMBIENT_ZONE_LIST_STATE

function natives.AUDIO.CLEAR_AMBIENT_ZONE_LIST_STATE(--[[Any*]] p0, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.CLEAR_AMBIENT_ZONE_LIST_STATE' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0x120C48C614909FA4, p0, p1)
end
natives.audio.clear_ambient_zone_list_state = natives.AUDIO.CLEAR_AMBIENT_ZONE_LIST_STATE

--[[
Full list of ambient zones by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ambientZones.json
]]
function natives.AUDIO.SET_AMBIENT_ZONE_STATE_PERSISTENT(--[[const char*]] ambientZone, --[[BOOL]] p1, --[[BOOL]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.SET_AMBIENT_ZONE_STATE_PERSISTENT' due to disabled trusted mode")

	assert(type(ambientZone) == "string", "Arg #1 (ambientZone) must be a string.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")

	local result = native_call(0x1D6650420CEC9D3B, ambientZone, p1, p2)
end
natives.audio.set_ambient_zone_state_persistent = natives.AUDIO.SET_AMBIENT_ZONE_STATE_PERSISTENT

--[[
Full list of ambient zones by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ambientZones.json
]]
function natives.AUDIO.SET_AMBIENT_ZONE_LIST_STATE_PERSISTENT(--[[const char*]] ambientZone, --[[BOOL]] p1, --[[BOOL]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.SET_AMBIENT_ZONE_LIST_STATE_PERSISTENT' due to disabled trusted mode")

	assert(type(ambientZone) == "string", "Arg #1 (ambientZone) must be a string.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")

	local result = native_call(0xF3638DAE8C4045E1, ambientZone, p1, p2)
end
natives.audio.set_ambient_zone_list_state_persistent = natives.AUDIO.SET_AMBIENT_ZONE_LIST_STATE_PERSISTENT

--[[
Full list of ambient zones by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ambientZones.json
]]
function natives.AUDIO.IS_AMBIENT_ZONE_ENABLED(--[[const char*]] ambientZone) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.IS_AMBIENT_ZONE_ENABLED' due to disabled trusted mode")

	assert(type(ambientZone) == "string", "Arg #1 (ambientZone) must be a string.")

	local result = native_call(0x01E2817A479A7F9B, ambientZone)
	return result:__tointeger() ~= 0
end
natives.audio.is_ambient_zone_enabled = natives.AUDIO.IS_AMBIENT_ZONE_ENABLED

function natives.AUDIO.REFRESH_CLOSEST_OCEAN_SHORELINE() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.REFRESH_CLOSEST_OCEAN_SHORELINE' due to disabled trusted mode")

	local result = native_call(0x5D2BFAAB8D956E0E)
end
natives.audio.refresh_closest_ocean_shoreline = natives.AUDIO.REFRESH_CLOSEST_OCEAN_SHORELINE

--[[
All occurrences found in b617d, sorted alphabetically and identical lines removed: 

AUDIO::SET_CUTSCENE_AUDIO_OVERRIDE("_AK");
AUDIO::SET_CUTSCENE_AUDIO_OVERRIDE("_CUSTOM");
AUDIO::SET_CUTSCENE_AUDIO_OVERRIDE("_TOOTHLESS");
Full list of cutscene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/cutsceneNames.json
]]
function natives.AUDIO.SET_CUTSCENE_AUDIO_OVERRIDE(--[[const char*]] name) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.SET_CUTSCENE_AUDIO_OVERRIDE' due to disabled trusted mode")

	assert(type(name) == "string", "Arg #1 (name) must be a string.")

	local result = native_call(0x3B4BF5F0859204D9, name)
end
natives.audio.set_cutscene_audio_override = natives.AUDIO.SET_CUTSCENE_AUDIO_OVERRIDE

function natives.AUDIO.SET_VARIABLE_ON_SYNCH_SCENE_AUDIO(--[[const char*]] variableName, --[[float]] value) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.SET_VARIABLE_ON_SYNCH_SCENE_AUDIO' due to disabled trusted mode")

	assert(type(variableName) == "string", "Arg #1 (variableName) must be a string.")
	assert(type(value) == "number", "Arg #2 (value) must be a number.")

	local result = native_call(0xBCC29F935ED07688, variableName, value)
end
natives.audio.set_variable_on_synch_scene_audio = natives.AUDIO.SET_VARIABLE_ON_SYNCH_SCENE_AUDIO

--[[
Plays the given police radio message.

All found occurrences in b617d, sorted alphabetically and identical lines removed: pastebin.com/GBnsQ5hr
Full list of police report names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/policeReportNames.json
]]
function natives.AUDIO.PLAY_POLICE_REPORT(--[[const char*]] name, --[[float]] p1) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.PLAY_POLICE_REPORT' due to disabled trusted mode")

	assert(type(name) == "string", "Arg #1 (name) must be a string.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xDFEBD56D9BD1EB16, name, p1)
	return result:__tointeger()
end
natives.audio.play_police_report = natives.AUDIO.PLAY_POLICE_REPORT

function natives.AUDIO.CANCEL_ALL_POLICE_REPORTS() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.CANCEL_ALL_POLICE_REPORTS' due to disabled trusted mode")

	local result = native_call(0xB4F90FAF7670B16F)
end
natives.audio.cancel_all_police_reports = natives.AUDIO.CANCEL_ALL_POLICE_REPORTS

--[[
Plays the siren sound of a vehicle which is otherwise activated when fastly double-pressing the horn key.
Only works on vehicles with a police siren.
]]
function natives.AUDIO.BLIP_SIREN(--[[Vehicle]] vehicle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.BLIP_SIREN' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x1B9025BDA76822B6, vehicle)
end
natives.audio.blip_siren = natives.AUDIO.BLIP_SIREN

--[[
Overrides the vehicle's horn hash.
When changing this hash on a vehicle, it will not return the 'overwritten' hash. It will still always return the default horn hash (same as GET_VEHICLE_DEFAULT_HORN)

vehicle - the vehicle whose horn should be overwritten
mute - p1 seems to be an option for muting the horn
p2 - maybe a horn id, since the function AUDIO::GET_VEHICLE_DEFAULT_HORN(veh) exists?
]]
function natives.AUDIO.OVERRIDE_VEH_HORN(--[[Vehicle]] vehicle, --[[BOOL]] override, --[[int]] hornHash) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.OVERRIDE_VEH_HORN' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(override) == "boolean", "Arg #2 (override) must be a boolean.")
	assert(type(hornHash) == "number", "Arg #3 (hornHash) must be a number.")

	local result = native_call(0x3CDC1E622CCE0356, vehicle, override, hornHash)
end
natives.audio.override_veh_horn = natives.AUDIO.OVERRIDE_VEH_HORN

--[[
Checks whether the horn of a vehicle is currently played.
]]
function natives.AUDIO.IS_HORN_ACTIVE(--[[Vehicle]] vehicle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.IS_HORN_ACTIVE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x9D6BFC12B05C6121, vehicle)
	return result:__tointeger() ~= 0
end
natives.audio.is_horn_active = natives.AUDIO.IS_HORN_ACTIVE

--[[
Makes pedestrians sound their horn longer, faster and more agressive when they use their horn.
]]
function natives.AUDIO.SET_AGGRESSIVE_HORNS(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.SET_AGGRESSIVE_HORNS' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x395BF71085D1B1D9, toggle)
end
natives.audio.set_aggressive_horns = natives.AUDIO.SET_AGGRESSIVE_HORNS

--[[
Does nothing (it's a nullsub).
]]
function natives.AUDIO.SET_RADIO_POSITION_AUDIO_MUTE(--[[BOOL]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.SET_RADIO_POSITION_AUDIO_MUTE' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0x02E93C796ABD3A97, p0)
end
natives.audio.set_radio_position_audio_mute = natives.AUDIO.SET_RADIO_POSITION_AUDIO_MUTE

--[[
SET_VEHICLE_CONVERSATIONS_PERSIST?
]]
function natives.AUDIO.SET_VEHICLE_CONVERSATIONS_PERSIST(--[[BOOL]] p0, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.SET_VEHICLE_CONVERSATIONS_PERSIST' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0x58BB377BEC7CD5F4, p0, p1)
end
natives.audio.set_vehicle_conversations_persist = natives.AUDIO.SET_VEHICLE_CONVERSATIONS_PERSIST

function natives.AUDIO.SET_VEHICLE_CONVERSATIONS_PERSIST_NEW(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.SET_VEHICLE_CONVERSATIONS_PERSIST_NEW' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0x9BD7BD55E4533183, p0, p1, p2)
end
natives.audio.set_vehicle_conversations_persist_new = natives.AUDIO.SET_VEHICLE_CONVERSATIONS_PERSIST_NEW

function natives.AUDIO.IS_STREAM_PLAYING() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.IS_STREAM_PLAYING' due to disabled trusted mode")

	local result = native_call(0xD11FA52EB849D978)
	return result:__tointeger() ~= 0
end
natives.audio.is_stream_playing = natives.AUDIO.IS_STREAM_PLAYING

function natives.AUDIO.GET_STREAM_PLAY_TIME() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.GET_STREAM_PLAY_TIME' due to disabled trusted mode")

	local result = native_call(0x4E72BBDBCA58A3DB)
	return result:__tointeger()
end
natives.audio.get_stream_play_time = natives.AUDIO.GET_STREAM_PLAY_TIME

--[[
Example:
AUDIO::LOAD_STREAM("CAR_STEAL_1_PASSBY", "CAR_STEAL_1_SOUNDSET");

All found occurrences in the b678d decompiled scripts: pastebin.com/3rma6w5w

Stream names often ends with "_MASTER", "_SMALL" or "_STREAM". Also "_IN", "_OUT" and numbers.   

soundSet is often set to 0 in the scripts. These are common to end the soundSets: "_SOUNDS", "_SOUNDSET" and numbers.

Full list of audio / sound names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/soundNames.json
]]
function natives.AUDIO.LOAD_STREAM(--[[const char*]] streamName, --[[const char*]] soundSet) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.LOAD_STREAM' due to disabled trusted mode")

	assert(type(streamName) == "string", "Arg #1 (streamName) must be a string.")
	assert(type(soundSet) == "string", "Arg #2 (soundSet) must be a string.")

	local result = native_call(0x1F1F957154EC51DF, streamName, soundSet)
	return result:__tointeger() ~= 0
end
natives.audio.load_stream = natives.AUDIO.LOAD_STREAM

--[[
Example:
AUDIO::LOAD_STREAM_WITH_START_OFFSET("STASH_TOXIN_STREAM", 2400, "FBI_05_SOUNDS");

Only called a few times in the scripts.

Full list of audio / sound names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/soundNames.json
]]
function natives.AUDIO.LOAD_STREAM_WITH_START_OFFSET(--[[const char*]] streamName, --[[int]] startOffset, --[[const char*]] soundSet) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.LOAD_STREAM_WITH_START_OFFSET' due to disabled trusted mode")

	assert(type(streamName) == "string", "Arg #1 (streamName) must be a string.")
	assert(type(startOffset) == "number", "Arg #2 (startOffset) must be a number.")
	assert(type(soundSet) == "string", "Arg #3 (soundSet) must be a string.")

	local result = native_call(0x59C16B79F53B3712, streamName, startOffset, soundSet)
	return result:__tointeger() ~= 0
end
natives.audio.load_stream_with_start_offset = natives.AUDIO.LOAD_STREAM_WITH_START_OFFSET

function natives.AUDIO.PLAY_STREAM_FROM_PED(--[[Ped]] ped) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.PLAY_STREAM_FROM_PED' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x89049DD63C08B5D1, ped)
end
natives.audio.play_stream_from_ped = natives.AUDIO.PLAY_STREAM_FROM_PED

function natives.AUDIO.PLAY_STREAM_FROM_VEHICLE(--[[Vehicle]] vehicle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.PLAY_STREAM_FROM_VEHICLE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0xB70374A758007DFA, vehicle)
end
natives.audio.play_stream_from_vehicle = natives.AUDIO.PLAY_STREAM_FROM_VEHICLE

--[[
Used with AUDIO::LOAD_STREAM

Example from finale_heist2b.c4:
TASK::TASK_SYNCHRONIZED_SCENE(l_4C8[2/*14*/], l_4C8[2/*14*/]._f7, l_30A, "push_out_vault_l", 4.0, -1.5, 5, 713, 4.0, 0);
                    PED::SET_SYNCHRONIZED_SCENE_PHASE(l_4C8[2/*14*/]._f7, 0.0);
                    PED::_2208438012482A1A(l_4C8[2/*14*/], 0, 0);
                    PED::SET_PED_COMBAT_ATTRIBUTES(l_4C8[2/*14*/], 38, 1);
                    PED::SET_BLOCKING_OF_NON_TEMPORARY_EVENTS(l_4C8[2/*14*/], 1);
                    if (AUDIO::LOAD_STREAM("Gold_Cart_Push_Anim_01", "BIG_SCORE_3B_SOUNDS")) {
                        AUDIO::PLAY_STREAM_FROM_OBJECT(l_36F[0/*1*/]);
                    }
]]
function natives.AUDIO.PLAY_STREAM_FROM_OBJECT(--[[Object]] object) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.PLAY_STREAM_FROM_OBJECT' due to disabled trusted mode")

	assert(type(object) == "number", "Arg #1 (object) must be a number.")

	local result = native_call(0xEBAA9B64D76356FD, object)
end
natives.audio.play_stream_from_object = natives.AUDIO.PLAY_STREAM_FROM_OBJECT

function natives.AUDIO.PLAY_STREAM_FRONTEND() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.PLAY_STREAM_FRONTEND' due to disabled trusted mode")

	local result = native_call(0x58FCE43488F9F5F4)
end
natives.audio.play_stream_frontend = natives.AUDIO.PLAY_STREAM_FRONTEND

function natives.AUDIO.PLAY_STREAM_FROM_POSITION(--[[float]] x, --[[float]] y, --[[float]] z) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.PLAY_STREAM_FROM_POSITION' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")

	local result = native_call(0x21442F412E8DE56B, x, y, z)
end
natives.audio.play_stream_from_position = natives.AUDIO.PLAY_STREAM_FROM_POSITION

function natives.AUDIO.STOP_STREAM() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.STOP_STREAM' due to disabled trusted mode")

	local result = native_call(0xA4718A1419D18151)
end
natives.audio.stop_stream = natives.AUDIO.STOP_STREAM

function natives.AUDIO.STOP_PED_SPEAKING(--[[Ped]] ped, --[[BOOL]] shaking) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.STOP_PED_SPEAKING' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(shaking) == "boolean", "Arg #2 (shaking) must be a boolean.")

	local result = native_call(0x9D64D7405520E3D3, ped, shaking)
end
natives.audio.stop_ped_speaking = natives.AUDIO.STOP_PED_SPEAKING

function natives.AUDIO.BLOCK_ALL_SPEECH_FROM_PED(--[[Ped]] ped, --[[BOOL]] p1, --[[BOOL]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.BLOCK_ALL_SPEECH_FROM_PED' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")

	local result = native_call(0xF8AD2EED7C47E8FE, ped, p1, p2)
end
natives.audio.block_all_speech_from_ped = natives.AUDIO.BLOCK_ALL_SPEECH_FROM_PED

function natives.AUDIO.STOP_PED_SPEAKING_SYNCED(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.STOP_PED_SPEAKING_SYNCED' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xAB6781A5F3101470, p0, p1)
end
natives.audio.stop_ped_speaking_synced = natives.AUDIO.STOP_PED_SPEAKING_SYNCED

function natives.AUDIO.DISABLE_PED_PAIN_AUDIO(--[[Ped]] ped, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.DISABLE_PED_PAIN_AUDIO' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xA9A41C1E940FB0E8, ped, toggle)
end
natives.audio.disable_ped_pain_audio = natives.AUDIO.DISABLE_PED_PAIN_AUDIO

--[[
Common in the scripts:
AUDIO::IS_AMBIENT_SPEECH_DISABLED(PLAYER::PLAYER_PED_ID());
]]
function natives.AUDIO.IS_AMBIENT_SPEECH_DISABLED(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.IS_AMBIENT_SPEECH_DISABLED' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x932C2D096A2C3FFF, ped)
	return result:__tointeger() ~= 0
end
natives.audio.is_ambient_speech_disabled = natives.AUDIO.IS_AMBIENT_SPEECH_DISABLED

function natives.AUDIO.BLOCK_SPEECH_CONTEXT_GROUP(--[[const char*]] p0, --[[int]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.BLOCK_SPEECH_CONTEXT_GROUP' due to disabled trusted mode")

	assert(type(p0) == "string", "Arg #1 (p0) must be a string.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xA8A7D434AFB4B97B, p0, p1)
end
natives.audio.block_speech_context_group = natives.AUDIO.BLOCK_SPEECH_CONTEXT_GROUP

function natives.AUDIO.UNBLOCK_SPEECH_CONTEXT_GROUP(--[[const char*]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.UNBLOCK_SPEECH_CONTEXT_GROUP' due to disabled trusted mode")

	assert(type(p0) == "string", "Arg #1 (p0) must be a string.")

	local result = native_call(0x2ACABED337622DF2, p0)
end
natives.audio.unblock_speech_context_group = natives.AUDIO.UNBLOCK_SPEECH_CONTEXT_GROUP

function natives.AUDIO.SET_SIREN_WITH_NO_DRIVER(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.SET_SIREN_WITH_NO_DRIVER' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x1FEF0683B96EBCF2, vehicle, toggle)
end
natives.audio.set_siren_with_no_driver = natives.AUDIO.SET_SIREN_WITH_NO_DRIVER

function natives.AUDIO.SET_SIREN_BYPASS_MP_DRIVER_CHECK(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.SET_SIREN_BYPASS_MP_DRIVER_CHECK' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xF584CF8529B51434, vehicle, toggle)
end
natives.audio.set_siren_bypass_mp_driver_check = natives.AUDIO.SET_SIREN_BYPASS_MP_DRIVER_CHECK

function natives.AUDIO.TRIGGER_SIREN_AUDIO(--[[Vehicle]] vehicle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.TRIGGER_SIREN_AUDIO' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x66C3FB05206041BA, vehicle)
end
natives.audio.trigger_siren_audio = natives.AUDIO.TRIGGER_SIREN_AUDIO

function natives.AUDIO.SET_HORN_PERMANENTLY_ON(--[[Vehicle]] vehicle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.SET_HORN_PERMANENTLY_ON' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x9C11908013EA4715, vehicle)
end
natives.audio.set_horn_permanently_on = natives.AUDIO.SET_HORN_PERMANENTLY_ON

function natives.AUDIO.SET_HORN_ENABLED(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.SET_HORN_ENABLED' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x76D683C108594D0E, vehicle, toggle)
end
natives.audio.set_horn_enabled = natives.AUDIO.SET_HORN_ENABLED

function natives.AUDIO.SET_AUDIO_VEHICLE_PRIORITY(--[[Vehicle]] vehicle, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.SET_AUDIO_VEHICLE_PRIORITY' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xE5564483E407F914, vehicle, p1)
end
natives.audio.set_audio_vehicle_priority = natives.AUDIO.SET_AUDIO_VEHICLE_PRIORITY

function natives.AUDIO.SET_HORN_PERMANENTLY_ON_TIME(--[[Vehicle]] vehicle, --[[float]] time) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.SET_HORN_PERMANENTLY_ON_TIME' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(time) == "number", "Arg #2 (time) must be a number.")

	local result = native_call(0x9D3AF56E94C9AE98, vehicle, time)
end
natives.audio.set_horn_permanently_on_time = natives.AUDIO.SET_HORN_PERMANENTLY_ON_TIME

function natives.AUDIO.USE_SIREN_AS_HORN(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.USE_SIREN_AS_HORN' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xFA932DE350266EF8, vehicle, toggle)
end
natives.audio.use_siren_as_horn = natives.AUDIO.USE_SIREN_AS_HORN

--[[
This native sets the audio of the specified vehicle to the audioName (p1).

Use the audioNameHash found in vehicles.meta

Example:
_SET_VEHICLE_AUDIO(veh, "ADDER");
The selected vehicle will now have the audio of the Adder.
]]
function natives.AUDIO.FORCE_USE_AUDIO_GAME_OBJECT(--[[Vehicle]] vehicle, --[[const char*]] audioName) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.FORCE_USE_AUDIO_GAME_OBJECT' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(audioName) == "string", "Arg #2 (audioName) must be a string.")

	local result = native_call(0x4F0C413926060B38, vehicle, audioName)
end
natives.audio.force_use_audio_game_object = natives.AUDIO.FORCE_USE_AUDIO_GAME_OBJECT

function natives.AUDIO.PRELOAD_VEHICLE_AUDIO_BANK(--[[Hash]] vehicleModel) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.PRELOAD_VEHICLE_AUDIO_BANK' due to disabled trusted mode")

	assert(type(vehicleModel) == "number", "Arg #1 (vehicleModel) must be a number.")

	local result = native_call(0xCA4CEA6AE0000A7E, vehicleModel)
end
natives.audio.preload_vehicle_audio_bank = natives.AUDIO.PRELOAD_VEHICLE_AUDIO_BANK

function natives.AUDIO.SET_VEHICLE_STARTUP_REV_SOUND(--[[Vehicle]] vehicle, --[[const char*]] p1, --[[const char*]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.SET_VEHICLE_STARTUP_REV_SOUND' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(p1) == "string", "Arg #2 (p1) must be a string.")
	assert(type(p2) == "string", "Arg #3 (p2) must be a string.")

	local result = native_call(0xF1F8157B8C3F171C, vehicle, p1, p2)
end
natives.audio.set_vehicle_startup_rev_sound = natives.AUDIO.SET_VEHICLE_STARTUP_REV_SOUND

function natives.AUDIO.RESET_VEHICLE_STARTUP_REV_SOUND(--[[Vehicle]] vehicle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.RESET_VEHICLE_STARTUP_REV_SOUND' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0xD2DCCD8E16E20997, vehicle)
end
natives.audio.reset_vehicle_startup_rev_sound = natives.AUDIO.RESET_VEHICLE_STARTUP_REV_SOUND

function natives.AUDIO.SET_VEHICLE_FORCE_REVERSE_WARNING(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.SET_VEHICLE_FORCE_REVERSE_WARNING' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x97FFB4ADEED08066, p0, p1)
end
natives.audio.set_vehicle_force_reverse_warning = natives.AUDIO.SET_VEHICLE_FORCE_REVERSE_WARNING

function natives.AUDIO.IS_VEHICLE_AUDIBLY_DAMAGED(--[[Vehicle]] vehicle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.IS_VEHICLE_AUDIBLY_DAMAGED' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x5DB8010EE71FDEF2, vehicle)
	return result:__tointeger() ~= 0
end
natives.audio.is_vehicle_audibly_damaged = natives.AUDIO.IS_VEHICLE_AUDIBLY_DAMAGED

function natives.AUDIO.SET_VEHICLE_AUDIO_ENGINE_DAMAGE_FACTOR(--[[Vehicle]] vehicle, --[[float]] damageFactor) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.SET_VEHICLE_AUDIO_ENGINE_DAMAGE_FACTOR' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(damageFactor) == "number", "Arg #2 (damageFactor) must be a number.")

	local result = native_call(0x59E7B488451F4D3A, vehicle, damageFactor)
end
natives.audio.set_vehicle_audio_engine_damage_factor = natives.AUDIO.SET_VEHICLE_AUDIO_ENGINE_DAMAGE_FACTOR

--[[
intensity: 0.0f - 1.0f, only used once with 1.0f in R* Scripts (nigel2)
Makes an engine rattling noise when you decelerate, you need to be going faster to hear lower values
]]
function natives.AUDIO.SET_VEHICLE_AUDIO_BODY_DAMAGE_FACTOR(--[[Vehicle]] vehicle, --[[float]] intensity) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.SET_VEHICLE_AUDIO_BODY_DAMAGE_FACTOR' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(intensity) == "number", "Arg #2 (intensity) must be a number.")

	local result = native_call(0x01BB4D577D38BD9E, vehicle, intensity)
end
natives.audio.set_vehicle_audio_body_damage_factor = natives.AUDIO.SET_VEHICLE_AUDIO_BODY_DAMAGE_FACTOR

function natives.AUDIO.ENABLE_VEHICLE_FANBELT_DAMAGE(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.ENABLE_VEHICLE_FANBELT_DAMAGE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x1C073274E065C6D2, vehicle, toggle)
end
natives.audio.enable_vehicle_fanbelt_damage = natives.AUDIO.ENABLE_VEHICLE_FANBELT_DAMAGE

function natives.AUDIO.ENABLE_VEHICLE_EXHAUST_POPS(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.ENABLE_VEHICLE_EXHAUST_POPS' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x2BE4BC731D039D5A, vehicle, toggle)
end
natives.audio.enable_vehicle_exhaust_pops = natives.AUDIO.ENABLE_VEHICLE_EXHAUST_POPS

--[[
SET_VEHICLE_BOOST_ACTIVE(vehicle, 1, 0);
SET_VEHICLE_BOOST_ACTIVE(vehicle, 0, 0); 

Will give a boost-soundeffect.
]]
function natives.AUDIO.SET_VEHICLE_BOOST_ACTIVE(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.SET_VEHICLE_BOOST_ACTIVE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x4A04DE7CAB2739A1, vehicle, toggle)
end
natives.audio.set_vehicle_boost_active = natives.AUDIO.SET_VEHICLE_BOOST_ACTIVE

function natives.AUDIO.SET_PLAYER_VEHICLE_ALARM_AUDIO_ACTIVE(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.SET_PLAYER_VEHICLE_ALARM_AUDIO_ACTIVE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x6FDDAD856E36988A, vehicle, toggle)
end
natives.audio.set_player_vehicle_alarm_audio_active = natives.AUDIO.SET_PLAYER_VEHICLE_ALARM_AUDIO_ACTIVE

function natives.AUDIO.SET_SCRIPT_UPDATE_DOOR_AUDIO(--[[Hash]] doorHash, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.SET_SCRIPT_UPDATE_DOOR_AUDIO' due to disabled trusted mode")

	assert(type(doorHash) == "number", "Arg #1 (doorHash) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x06C0023BED16DD6B, doorHash, toggle)
end
natives.audio.set_script_update_door_audio = natives.AUDIO.SET_SCRIPT_UPDATE_DOOR_AUDIO

--[[
doorId: see SET_VEHICLE_DOOR_SHUT
]]
function natives.AUDIO.PLAY_VEHICLE_DOOR_OPEN_SOUND(--[[Vehicle]] vehicle, --[[int]] doorId) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.PLAY_VEHICLE_DOOR_OPEN_SOUND' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(doorId) == "number", "Arg #2 (doorId) must be a number.")

	local result = native_call(0x3A539D52857EA82D, vehicle, doorId)
end
natives.audio.play_vehicle_door_open_sound = natives.AUDIO.PLAY_VEHICLE_DOOR_OPEN_SOUND

--[[
doorId: see SET_VEHICLE_DOOR_SHUT
]]
function natives.AUDIO.PLAY_VEHICLE_DOOR_CLOSE_SOUND(--[[Vehicle]] vehicle, --[[int]] doorId) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.PLAY_VEHICLE_DOOR_CLOSE_SOUND' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(doorId) == "number", "Arg #2 (doorId) must be a number.")

	local result = native_call(0x62A456AA4769EF34, vehicle, doorId)
end
natives.audio.play_vehicle_door_close_sound = natives.AUDIO.PLAY_VEHICLE_DOOR_CLOSE_SOUND

--[[
Works for planes only.
]]
function natives.AUDIO.ENABLE_STALL_WARNING_SOUNDS(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.ENABLE_STALL_WARNING_SOUNDS' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xC15907D667F7CFB2, vehicle, toggle)
end
natives.audio.enable_stall_warning_sounds = natives.AUDIO.ENABLE_STALL_WARNING_SOUNDS

--[[
Hardcoded to return 1
]]
function natives.AUDIO.IS_GAME_IN_CONTROL_OF_MUSIC() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.IS_GAME_IN_CONTROL_OF_MUSIC' due to disabled trusted mode")

	local result = native_call(0x6D28DC1671E334FD)
	return result:__tointeger() ~= 0
end
natives.audio.is_game_in_control_of_music = natives.AUDIO.IS_GAME_IN_CONTROL_OF_MUSIC

function natives.AUDIO.SET_GPS_ACTIVE(--[[BOOL]] active) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.SET_GPS_ACTIVE' due to disabled trusted mode")

	assert(type(active) == "boolean", "Arg #1 (active) must be a boolean.")

	local result = native_call(0x3BD3F52BA9B1E4E8, active)
end
natives.audio.set_gps_active = natives.AUDIO.SET_GPS_ACTIVE

--[[
Called 38 times in the scripts. There are 5 different audioNames used.
 One unknown removed below.

AUDIO::PLAY_MISSION_COMPLETE_AUDIO("DEAD");
AUDIO::PLAY_MISSION_COMPLETE_AUDIO("FRANKLIN_BIG_01");
AUDIO::PLAY_MISSION_COMPLETE_AUDIO("GENERIC_FAILED");
AUDIO::PLAY_MISSION_COMPLETE_AUDIO("TREVOR_SMALL_01");
]]
function natives.AUDIO.PLAY_MISSION_COMPLETE_AUDIO(--[[const char*]] audioName) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.PLAY_MISSION_COMPLETE_AUDIO' due to disabled trusted mode")

	assert(type(audioName) == "string", "Arg #1 (audioName) must be a string.")

	local result = native_call(0xB138AAB8A70D3C69, audioName)
end
natives.audio.play_mission_complete_audio = natives.AUDIO.PLAY_MISSION_COMPLETE_AUDIO

function natives.AUDIO.IS_MISSION_COMPLETE_PLAYING() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.IS_MISSION_COMPLETE_PLAYING' due to disabled trusted mode")

	local result = native_call(0x19A30C23F5827F8A)
	return result:__tointeger() ~= 0
end
natives.audio.is_mission_complete_playing = natives.AUDIO.IS_MISSION_COMPLETE_PLAYING

function natives.AUDIO.IS_MISSION_COMPLETE_READY_FOR_UI() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.IS_MISSION_COMPLETE_READY_FOR_UI' due to disabled trusted mode")

	local result = native_call(0x6F259F82D873B8B8)
	return result:__tointeger() ~= 0
end
natives.audio.is_mission_complete_ready_for_ui = natives.AUDIO.IS_MISSION_COMPLETE_READY_FOR_UI

function natives.AUDIO.BLOCK_DEATH_JINGLE(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.BLOCK_DEATH_JINGLE' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0xF154B8D1775B2DEC, toggle)
end
natives.audio.block_death_jingle = natives.AUDIO.BLOCK_DEATH_JINGLE

--[[
Used to prepare a scene where the surrounding sound is muted or a bit changed. This does not play any sound.

List of all usable scene names found in b617d. Sorted alphabetically and identical names removed: pastebin.com/MtM9N9CC
Full list of audio scene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/audioSceneNames.json
]]
function natives.AUDIO.START_AUDIO_SCENE(--[[const char*]] scene) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.START_AUDIO_SCENE' due to disabled trusted mode")

	assert(type(scene) == "string", "Arg #1 (scene) must be a string.")

	local result = native_call(0x013A80FC08F6E4F2, scene)
	return result:__tointeger() ~= 0
end
natives.audio.start_audio_scene = natives.AUDIO.START_AUDIO_SCENE

--[[
Full list of audio scene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/audioSceneNames.json
]]
function natives.AUDIO.STOP_AUDIO_SCENE(--[[const char*]] scene) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.STOP_AUDIO_SCENE' due to disabled trusted mode")

	assert(type(scene) == "string", "Arg #1 (scene) must be a string.")

	local result = native_call(0xDFE8422B3B94E688, scene)
end
natives.audio.stop_audio_scene = natives.AUDIO.STOP_AUDIO_SCENE

--[[
??
]]
function natives.AUDIO.STOP_AUDIO_SCENES() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.STOP_AUDIO_SCENES' due to disabled trusted mode")

	local result = native_call(0xBAC7FC81A75EC1A1)
end
natives.audio.stop_audio_scenes = natives.AUDIO.STOP_AUDIO_SCENES

--[[
Full list of audio scene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/audioSceneNames.json
]]
function natives.AUDIO.IS_AUDIO_SCENE_ACTIVE(--[[const char*]] scene) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.IS_AUDIO_SCENE_ACTIVE' due to disabled trusted mode")

	assert(type(scene) == "string", "Arg #1 (scene) must be a string.")

	local result = native_call(0xB65B60556E2A9225, scene)
	return result:__tointeger() ~= 0
end
natives.audio.is_audio_scene_active = natives.AUDIO.IS_AUDIO_SCENE_ACTIVE

--[[
Full list of audio scene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/audioSceneNames.json
]]
function natives.AUDIO.SET_AUDIO_SCENE_VARIABLE(--[[const char*]] scene, --[[const char*]] variable, --[[float]] value) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.SET_AUDIO_SCENE_VARIABLE' due to disabled trusted mode")

	assert(type(scene) == "string", "Arg #1 (scene) must be a string.")
	assert(type(variable) == "string", "Arg #2 (variable) must be a string.")
	assert(type(value) == "number", "Arg #3 (value) must be a number.")

	local result = native_call(0xEF21A9EF089A2668, scene, variable, value)
end
natives.audio.set_audio_scene_variable = natives.AUDIO.SET_AUDIO_SCENE_VARIABLE

function natives.AUDIO.SET_AUDIO_SCRIPT_CLEANUP_TIME(--[[int]] time) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.SET_AUDIO_SCRIPT_CLEANUP_TIME' due to disabled trusted mode")

	assert(type(time) == "number", "Arg #1 (time) must be a number.")

	local result = native_call(0xA5F377B175A699C5, time)
end
natives.audio.set_audio_script_cleanup_time = natives.AUDIO.SET_AUDIO_SCRIPT_CLEANUP_TIME

--[[
All found occurrences in b678d:
pastebin.com/ceu67jz8
]]
function natives.AUDIO.ADD_ENTITY_TO_AUDIO_MIX_GROUP(--[[Entity]] entity, --[[const char*]] groupName, --[[float]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.ADD_ENTITY_TO_AUDIO_MIX_GROUP' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(groupName) == "string", "Arg #2 (groupName) must be a string.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0x153973AB99FE8980, entity, groupName, p2)
end
natives.audio.add_entity_to_audio_mix_group = natives.AUDIO.ADD_ENTITY_TO_AUDIO_MIX_GROUP

function natives.AUDIO.REMOVE_ENTITY_FROM_AUDIO_MIX_GROUP(--[[Entity]] entity, --[[float]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.REMOVE_ENTITY_FROM_AUDIO_MIX_GROUP' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x18EB48CFC41F2EA0, entity, p1)
end
natives.audio.remove_entity_from_audio_mix_group = natives.AUDIO.REMOVE_ENTITY_FROM_AUDIO_MIX_GROUP

function natives.AUDIO.AUDIO_IS_MUSIC_PLAYING() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.AUDIO_IS_MUSIC_PLAYING' due to disabled trusted mode")

	local result = native_call(0x845FFC3A4FEEFA3E)
	return result:__tointeger() ~= 0
end
natives.audio.audio_is_music_playing = natives.AUDIO.AUDIO_IS_MUSIC_PLAYING

--[[
This is an alias of AUDIO_IS_MUSIC_PLAYING.
]]
function natives.AUDIO.AUDIO_IS_SCRIPTED_MUSIC_PLAYING() -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.AUDIO_IS_SCRIPTED_MUSIC_PLAYING' due to disabled trusted mode")

	local result = native_call(0x2DD39BF3E2F9C47F)
	return result:__tointeger()
end
natives.audio.audio_is_scripted_music_playing = natives.AUDIO.AUDIO_IS_SCRIPTED_MUSIC_PLAYING

--[[
All music event names found in the b617d scripts: pastebin.com/GnYt0R3P
Full list of music event names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/musicEventNames.json
]]
function natives.AUDIO.PREPARE_MUSIC_EVENT(--[[const char*]] eventName) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.PREPARE_MUSIC_EVENT' due to disabled trusted mode")

	assert(type(eventName) == "string", "Arg #1 (eventName) must be a string.")

	local result = native_call(0x1E5185B72EF5158A, eventName)
	return result:__tointeger() ~= 0
end
natives.audio.prepare_music_event = natives.AUDIO.PREPARE_MUSIC_EVENT

--[[
All music event names found in the b617d scripts: pastebin.com/GnYt0R3P
Full list of music event names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/musicEventNames.json
]]
function natives.AUDIO.CANCEL_MUSIC_EVENT(--[[const char*]] eventName) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.CANCEL_MUSIC_EVENT' due to disabled trusted mode")

	assert(type(eventName) == "string", "Arg #1 (eventName) must be a string.")

	local result = native_call(0x5B17A90291133DA5, eventName)
	return result:__tointeger() ~= 0
end
natives.audio.cancel_music_event = natives.AUDIO.CANCEL_MUSIC_EVENT

--[[
List of all usable event names found in b617d used with this native. Sorted alphabetically and identical names removed: pastebin.com/RzDFmB1W

All music event names found in the b617d scripts: pastebin.com/GnYt0R3P
Full list of music event names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/musicEventNames.json
]]
function natives.AUDIO.TRIGGER_MUSIC_EVENT(--[[const char*]] eventName) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.TRIGGER_MUSIC_EVENT' due to disabled trusted mode")

	assert(type(eventName) == "string", "Arg #1 (eventName) must be a string.")

	local result = native_call(0x706D57B0F50DA710, eventName)
	return result:__tointeger() ~= 0
end
natives.audio.trigger_music_event = natives.AUDIO.TRIGGER_MUSIC_EVENT

function natives.AUDIO.IS_MUSIC_ONESHOT_PLAYING() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.IS_MUSIC_ONESHOT_PLAYING' due to disabled trusted mode")

	local result = native_call(0xA097AB275061FB21)
	return result:__tointeger() ~= 0
end
natives.audio.is_music_oneshot_playing = natives.AUDIO.IS_MUSIC_ONESHOT_PLAYING

function natives.AUDIO.GET_MUSIC_PLAYTIME() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.GET_MUSIC_PLAYTIME' due to disabled trusted mode")

	local result = native_call(0xE7A0D23DC414507B)
	return result:__tointeger()
end
natives.audio.get_music_playtime = natives.AUDIO.GET_MUSIC_PLAYTIME

function natives.AUDIO.SET_GLOBAL_RADIO_SIGNAL_LEVEL(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.SET_GLOBAL_RADIO_SIGNAL_LEVEL' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x159B7318403A1CD8, p0)
end
natives.audio.set_global_radio_signal_level = natives.AUDIO.SET_GLOBAL_RADIO_SIGNAL_LEVEL

function natives.AUDIO.RECORD_BROKEN_GLASS(--[[float]] x, --[[float]] y, --[[float]] z, --[[float]] radius) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.RECORD_BROKEN_GLASS' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(radius) == "number", "Arg #4 (radius) must be a number.")

	local result = native_call(0xFBE20329593DEC9D, x, y, z, radius)
end
natives.audio.record_broken_glass = natives.AUDIO.RECORD_BROKEN_GLASS

function natives.AUDIO.CLEAR_ALL_BROKEN_GLASS() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.CLEAR_ALL_BROKEN_GLASS' due to disabled trusted mode")

	local result = native_call(0xB32209EFFDC04913)
end
natives.audio.clear_all_broken_glass = natives.AUDIO.CLEAR_ALL_BROKEN_GLASS

function natives.AUDIO.SCRIPT_OVERRIDES_WIND_ELEVATION(--[[BOOL]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.SCRIPT_OVERRIDES_WIND_ELEVATION' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x70B8EC8FC108A634, p0, p1)
end
natives.audio.script_overrides_wind_elevation = natives.AUDIO.SCRIPT_OVERRIDES_WIND_ELEVATION

function natives.AUDIO.SET_PED_WALLA_DENSITY(--[[float]] p0, --[[float]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.SET_PED_WALLA_DENSITY' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x149AEE66F0CB3A99, p0, p1)
end
natives.audio.set_ped_walla_density = natives.AUDIO.SET_PED_WALLA_DENSITY

function natives.AUDIO.SET_PED_INTERIOR_WALLA_DENSITY(--[[float]] p0, --[[float]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.SET_PED_INTERIOR_WALLA_DENSITY' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x8BF907833BE275DE, p0, p1)
end
natives.audio.set_ped_interior_walla_density = natives.AUDIO.SET_PED_INTERIOR_WALLA_DENSITY

function natives.AUDIO.FORCE_PED_PANIC_WALLA() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.FORCE_PED_PANIC_WALLA' due to disabled trusted mode")

	local result = native_call(0x062D5EAD4DA2FA6A)
end
natives.audio.force_ped_panic_walla = natives.AUDIO.FORCE_PED_PANIC_WALLA

--[[
Example:

bool prepareAlarm = AUDIO::PREPARE_ALARM("PORT_OF_LS_HEIST_FORT_ZANCUDO_ALARMS");
Full list of alarm names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/alarmSounds.json
]]
function natives.AUDIO.PREPARE_ALARM(--[[const char*]] alarmName) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.PREPARE_ALARM' due to disabled trusted mode")

	assert(type(alarmName) == "string", "Arg #1 (alarmName) must be a string.")

	local result = native_call(0x9D74AE343DB65533, alarmName)
	return result:__tointeger() ~= 0
end
natives.audio.prepare_alarm = natives.AUDIO.PREPARE_ALARM

--[[
Example:

This will start the alarm at Fort Zancudo.

AUDIO::START_ALARM("PORT_OF_LS_HEIST_FORT_ZANCUDO_ALARMS", 1);

First parameter (char) is the name of the alarm.
Second parameter (bool) is unknown, it does not seem to make a difference if this one is 0 or 1.

----------

It DOES make a difference but it has to do with the duration or something I dunno yet

----------

 Found in the b617d scripts:

 AUDIO::START_ALARM("AGENCY_HEIST_FIB_TOWER_ALARMS", 0);
 AUDIO::START_ALARM("AGENCY_HEIST_FIB_TOWER_ALARMS_UPPER", 1);
 AUDIO::START_ALARM("AGENCY_HEIST_FIB_TOWER_ALARMS_UPPER_B", 0);
 AUDIO::START_ALARM("BIG_SCORE_HEIST_VAULT_ALARMS", a_0);
 AUDIO::START_ALARM("FBI_01_MORGUE_ALARMS", 1);
 AUDIO::START_ALARM("FIB_05_BIOTECH_LAB_ALARMS", 0);
 AUDIO::START_ALARM("JEWEL_STORE_HEIST_ALARMS", 0);
 AUDIO::START_ALARM("PALETO_BAY_SCORE_ALARM", 1);
 AUDIO::START_ALARM("PALETO_BAY_SCORE_CHICKEN_FACTORY_ALARM", 0);
 AUDIO::START_ALARM("PORT_OF_LS_HEIST_FORT_ZANCUDO_ALARMS", 1);
 AUDIO::START_ALARM("PORT_OF_LS_HEIST_SHIP_ALARMS", 0);
 AUDIO::START_ALARM("PRISON_ALARMS", 0);
 AUDIO::START_ALARM("PROLOGUE_VAULT_ALARMS", 0);
Full list of alarm names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/alarmSounds.json
]]
function natives.AUDIO.START_ALARM(--[[const char*]] alarmName, --[[BOOL]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.START_ALARM' due to disabled trusted mode")

	assert(type(alarmName) == "string", "Arg #1 (alarmName) must be a string.")
	assert(type(p2) == "boolean", "Arg #2 (p2) must be a boolean.")

	local result = native_call(0x0355EF116C4C97B2, alarmName, p2)
end
natives.audio.start_alarm = natives.AUDIO.START_ALARM

--[[
Example:

This will stop the alarm at Fort Zancudo.

AUDIO::STOP_ALARM("PORT_OF_LS_HEIST_FORT_ZANCUDO_ALARMS", 1);

First parameter (char) is the name of the alarm.
Second parameter (bool) has to be true (1) to have any effect.
Full list of alarm names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/alarmSounds.json
]]
function natives.AUDIO.STOP_ALARM(--[[const char*]] alarmName, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.STOP_ALARM' due to disabled trusted mode")

	assert(type(alarmName) == "string", "Arg #1 (alarmName) must be a string.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xA1CADDCD98415A41, alarmName, toggle)
end
natives.audio.stop_alarm = natives.AUDIO.STOP_ALARM

function natives.AUDIO.STOP_ALL_ALARMS(--[[BOOL]] stop) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.STOP_ALL_ALARMS' due to disabled trusted mode")

	assert(type(stop) == "boolean", "Arg #1 (stop) must be a boolean.")

	local result = native_call(0x2F794A877ADD4C92, stop)
end
natives.audio.stop_all_alarms = natives.AUDIO.STOP_ALL_ALARMS

--[[
Example:

bool playing = AUDIO::IS_ALARM_PLAYING("PORT_OF_LS_HEIST_FORT_ZANCUDO_ALARMS");
Full list of alarm names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/alarmSounds.json
]]
function natives.AUDIO.IS_ALARM_PLAYING(--[[const char*]] alarmName) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.IS_ALARM_PLAYING' due to disabled trusted mode")

	assert(type(alarmName) == "string", "Arg #1 (alarmName) must be a string.")

	local result = native_call(0x226435CB96CCFC8C, alarmName)
	return result:__tointeger() ~= 0
end
natives.audio.is_alarm_playing = natives.AUDIO.IS_ALARM_PLAYING

--[[
Returns hash of default vehicle horn

Hash is stored in audVehicleAudioEntity
]]
function natives.AUDIO.GET_VEHICLE_DEFAULT_HORN(--[[Vehicle]] vehicle) -- Returns Hash
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.GET_VEHICLE_DEFAULT_HORN' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x02165D55000219AC, vehicle)
	return result:__tointeger()
end
natives.audio.get_vehicle_default_horn = natives.AUDIO.GET_VEHICLE_DEFAULT_HORN

function natives.AUDIO.GET_VEHICLE_DEFAULT_HORN_IGNORE_MODS(--[[Vehicle]] vehicle) -- Returns Hash
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.GET_VEHICLE_DEFAULT_HORN_IGNORE_MODS' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0xACB5DCCA1EC76840, vehicle)
	return result:__tointeger()
end
natives.audio.get_vehicle_default_horn_ignore_mods = natives.AUDIO.GET_VEHICLE_DEFAULT_HORN_IGNORE_MODS

function natives.AUDIO.RESET_PED_AUDIO_FLAGS(--[[Ped]] ped) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.RESET_PED_AUDIO_FLAGS' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0xF54BB7B61036F335, ped)
end
natives.audio.reset_ped_audio_flags = natives.AUDIO.RESET_PED_AUDIO_FLAGS

--[[
Enables/disables ped's "loud" footstep sound.
]]
function natives.AUDIO.SET_PED_FOOTSTEPS_EVENTS_ENABLED(--[[Ped]] ped, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.SET_PED_FOOTSTEPS_EVENTS_ENABLED' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x0653B735BFBDFE87, ped, toggle)
end
natives.audio.set_ped_footsteps_events_enabled = natives.AUDIO.SET_PED_FOOTSTEPS_EVENTS_ENABLED

--[[
Enables/disables ped's "quiet" footstep sound.
]]
function natives.AUDIO.SET_PED_CLOTH_EVENTS_ENABLED(--[[Ped]] ped, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.SET_PED_CLOTH_EVENTS_ENABLED' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x29DA3CA8D8B2692D, ped, toggle)
end
natives.audio.set_ped_cloth_events_enabled = natives.AUDIO.SET_PED_CLOTH_EVENTS_ENABLED

--[[
Sets audio flag "OverridePlayerGroundMaterial"
]]
function natives.AUDIO.OVERRIDE_PLAYER_GROUND_MATERIAL(--[[Hash]] hash, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.OVERRIDE_PLAYER_GROUND_MATERIAL' due to disabled trusted mode")

	assert(type(hash) == "number", "Arg #1 (hash) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xD2CC78CD3D0B50F9, hash, toggle)
end
natives.audio.override_player_ground_material = natives.AUDIO.OVERRIDE_PLAYER_GROUND_MATERIAL

function natives.AUDIO.USE_FOOTSTEP_SCRIPT_SWEETENERS(--[[Ped]] ped, --[[BOOL]] p1, --[[Hash]] hash) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.USE_FOOTSTEP_SCRIPT_SWEETENERS' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(hash) == "number", "Arg #3 (hash) must be a number.")

	local result = native_call(0xBF4DC1784BE94DFA, ped, p1, hash)
end
natives.audio.use_footstep_script_sweeteners = natives.AUDIO.USE_FOOTSTEP_SCRIPT_SWEETENERS

--[[
Sets audio flag "OverrideMicrophoneSettings"
]]
function natives.AUDIO.OVERRIDE_MICROPHONE_SETTINGS(--[[Hash]] hash, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.OVERRIDE_MICROPHONE_SETTINGS' due to disabled trusted mode")

	assert(type(hash) == "number", "Arg #1 (hash) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x75773E11BA459E90, hash, toggle)
end
natives.audio.override_microphone_settings = natives.AUDIO.OVERRIDE_MICROPHONE_SETTINGS

function natives.AUDIO.FREEZE_MICROPHONE() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.FREEZE_MICROPHONE' due to disabled trusted mode")

	local result = native_call(0xD57AAAE0E2214D11)
end
natives.audio.freeze_microphone = natives.AUDIO.FREEZE_MICROPHONE

--[[
If value is set to true, and ambient siren sound will be played.
Appears to enable/disable an audio flag.
]]
function natives.AUDIO.DISTANT_COP_CAR_SIRENS(--[[BOOL]] value) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.DISTANT_COP_CAR_SIRENS' due to disabled trusted mode")

	assert(type(value) == "boolean", "Arg #1 (value) must be a boolean.")

	local result = native_call(0x552369F549563AD5, value)
end
natives.audio.distant_cop_car_sirens = natives.AUDIO.DISTANT_COP_CAR_SIRENS

function natives.AUDIO.SET_SIREN_CAN_BE_CONTROLLED_BY_AUDIO(--[[Vehicle]] vehicle, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.SET_SIREN_CAN_BE_CONTROLLED_BY_AUDIO' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0x43FA0DFC5DF87815, vehicle, p1)
end
natives.audio.set_siren_can_be_controlled_by_audio = natives.AUDIO.SET_SIREN_CAN_BE_CONTROLLED_BY_AUDIO

function natives.AUDIO.ENABLE_STUNT_JUMP_AUDIO() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.ENABLE_STUNT_JUMP_AUDIO' due to disabled trusted mode")

	local result = native_call(0xB81CF134AEB56FFB)
end
natives.audio.enable_stunt_jump_audio = natives.AUDIO.ENABLE_STUNT_JUMP_AUDIO

--[[
Possible flag names:
"ActivateSwitchWheelAudio"
"AllowAmbientSpeechInSlowMo"
"AllowCutsceneOverScreenFade"
"AllowForceRadioAfterRetune"
"AllowPainAndAmbientSpeechToPlayDuringCutscene"
"AllowPlayerAIOnMission"
"AllowPoliceScannerWhenPlayerHasNoControl"
"AllowRadioDuringSwitch"
"AllowRadioOverScreenFade"
"AllowScoreAndRadio"
"AllowScriptedSpeechInSlowMo"
"AvoidMissionCompleteDelay"
"DisableAbortConversationForDeathAndInjury"
"DisableAbortConversationForRagdoll"
"DisableBarks"
"DisableFlightMusic"
"DisableReplayScriptStreamRecording"
"EnableHeadsetBeep"
"ForceConversationInterrupt"
"ForceSeamlessRadioSwitch"
"ForceSniperAudio"
"FrontendRadioDisabled"
"HoldMissionCompleteWhenPrepared"
"IsDirectorModeActive"
"IsPlayerOnMissionForSpeech"
"ListenerReverbDisabled"
"LoadMPData"
"MobileRadioInGame"
"OnlyAllowScriptTriggerPoliceScanner"
"PlayMenuMusic"
"PoliceScannerDisabled"
"ScriptedConvListenerMaySpeak"
"SpeechDucksScore"
"SuppressPlayerScubaBreathing"
"WantedMusicDisabled"
"WantedMusicOnMission"

-------------------------------
No added flag names between b393d and b573d, including b573d.

#######################################################################

"IsDirectorModeActive" is an audio flag which will allow you to play speech infinitely without any pauses like in Director Mode.

-----------------------------------------------------------------------

All flag IDs and hashes:

ID: 00 | Hash: 0x0FED7A7F
ID: 01 | Hash: 0x20A7858F
ID: 02 | Hash: 0xA11C2259
ID: 03 | Hash: 0x08DE4700
ID: 04 | Hash: 0x989F652F
ID: 05 | Hash: 0x3C9E76BA
ID: 06 | Hash: 0xA805FEB0
ID: 07 | Hash: 0x4B94EA26
ID: 08 | Hash: 0x803ACD34
ID: 09 | Hash: 0x7C741226
ID: 10 | Hash: 0x31DB9EBD
ID: 11 | Hash: 0xDF386F18
ID: 12 | Hash: 0x669CED42
ID: 13 | Hash: 0x51F22743
ID: 14 | Hash: 0x2052B35C
ID: 15 | Hash: 0x071472DC
ID: 16 | Hash: 0xF9928BCC
ID: 17 | Hash: 0x7ADBDD48
ID: 18 | Hash: 0xA959BA1A
ID: 19 | Hash: 0xBBE89B60
ID: 20 | Hash: 0x87A08871
ID: 21 | Hash: 0xED1057CE
ID: 22 | Hash: 0x1584AD7A
ID: 23 | Hash: 0x8582CFCB
ID: 24 | Hash: 0x7E5E2FB0
ID: 25 | Hash: 0xAE4F72DB
ID: 26 | Hash: 0x5D16D1FA
ID: 27 | Hash: 0x06B2F4B8
ID: 28 | Hash: 0x5D4CDC96
ID: 29 | Hash: 0x8B5A48BA
ID: 30 | Hash: 0x98FBD539
ID: 31 | Hash: 0xD8CB0473
ID: 32 | Hash: 0x5CBB4874
ID: 33 | Hash: 0x2E9F93A9
ID: 34 | Hash: 0xD93BEA86
ID: 35 | Hash: 0x92109B7D
ID: 36 | Hash: 0xB7EC9E4D
ID: 37 | Hash: 0xCABDBB1D
ID: 38 | Hash: 0xB3FD4A52
ID: 39 | Hash: 0x370D94E5
ID: 40 | Hash: 0xA0F7938F
ID: 41 | Hash: 0xCBE1CE81
ID: 42 | Hash: 0xC27F1271
ID: 43 | Hash: 0x9E3258EB
ID: 44 | Hash: 0x551CDA5B
ID: 45 | Hash: 0xCB6D663C
ID: 46 | Hash: 0x7DACE87F
ID: 47 | Hash: 0xF9DE416F
ID: 48 | Hash: 0x882E6E9E
ID: 49 | Hash: 0x16B447E7
ID: 50 | Hash: 0xBD867739
ID: 51 | Hash: 0xA3A58604
ID: 52 | Hash: 0x7E046BBC
ID: 53 | Hash: 0xD95FDB98
ID: 54 | Hash: 0x5842C0ED
ID: 55 | Hash: 0x285FECC6
ID: 56 | Hash: 0x9351AC43
ID: 57 | Hash: 0x50032E75
ID: 58 | Hash: 0xAE6D0D59
ID: 59 | Hash: 0xD6351785
ID: 60 | Hash: 0xD25D71BC
ID: 61 | Hash: 0x1F7F6423
ID: 62 | Hash: 0xE24C3AA6
ID: 63 | Hash: 0xBFFDD2B7
]]
function natives.AUDIO.SET_AUDIO_FLAG(--[[const char*]] flagName, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.SET_AUDIO_FLAG' due to disabled trusted mode")

	assert(type(flagName) == "string", "Arg #1 (flagName) must be a string.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xB9EFD5C25018725A, flagName, toggle)
end
natives.audio.set_audio_flag = natives.AUDIO.SET_AUDIO_FLAG

function natives.AUDIO.PREPARE_SYNCHRONIZED_AUDIO_EVENT(--[[const char*]] p0, --[[Any]] p1) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.PREPARE_SYNCHRONIZED_AUDIO_EVENT' due to disabled trusted mode")

	assert(type(p0) == "string", "Arg #1 (p0) must be a string.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xC7ABCACA4985A766, p0, p1)
	return result:__tointeger()
end
natives.audio.prepare_synchronized_audio_event = natives.AUDIO.PREPARE_SYNCHRONIZED_AUDIO_EVENT

function natives.AUDIO.PREPARE_SYNCHRONIZED_AUDIO_EVENT_FOR_SCENE(--[[Any]] p0, --[[Any*]] p1) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.PREPARE_SYNCHRONIZED_AUDIO_EVENT_FOR_SCENE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "userdata", "Arg #2 (p1) must be a userdata.")

	local result = native_call(0x029FE7CD1B7E2E75, p0, p1)
	return result:__tointeger() ~= 0
end
natives.audio.prepare_synchronized_audio_event_for_scene = natives.AUDIO.PREPARE_SYNCHRONIZED_AUDIO_EVENT_FOR_SCENE

function natives.AUDIO.PLAY_SYNCHRONIZED_AUDIO_EVENT(--[[Any]] p0) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.PLAY_SYNCHRONIZED_AUDIO_EVENT' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x8B2FD4560E55DD2D, p0)
	return result:__tointeger() ~= 0
end
natives.audio.play_synchronized_audio_event = natives.AUDIO.PLAY_SYNCHRONIZED_AUDIO_EVENT

function natives.AUDIO.STOP_SYNCHRONIZED_AUDIO_EVENT(--[[Any]] p0) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.STOP_SYNCHRONIZED_AUDIO_EVENT' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x92D6A88E64A94430, p0)
	return result:__tointeger() ~= 0
end
natives.audio.stop_synchronized_audio_event = natives.AUDIO.STOP_SYNCHRONIZED_AUDIO_EVENT

function natives.AUDIO.INIT_SYNCH_SCENE_AUDIO_WITH_POSITION(--[[Any*]] p0, --[[float]] x, --[[float]] y, --[[float]] z) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.INIT_SYNCH_SCENE_AUDIO_WITH_POSITION' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")

	local result = native_call(0xC8EDE9BDBCCBA6D4, p0, x, y, z)
end
natives.audio.init_synch_scene_audio_with_position = natives.AUDIO.INIT_SYNCH_SCENE_AUDIO_WITH_POSITION

function natives.AUDIO.INIT_SYNCH_SCENE_AUDIO_WITH_ENTITY(--[[const char*]] p0, --[[Entity]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.INIT_SYNCH_SCENE_AUDIO_WITH_ENTITY' due to disabled trusted mode")

	assert(type(p0) == "string", "Arg #1 (p0) must be a string.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x950A154B8DAB6185, p0, p1)
end
natives.audio.init_synch_scene_audio_with_entity = natives.AUDIO.INIT_SYNCH_SCENE_AUDIO_WITH_ENTITY

--[[
Needs to be called every frame.
Audio mode to apply this frame: https://alloc8or.re/gta5/doc/enums/audSpecialEffectMode.txt
]]
function natives.AUDIO.SET_AUDIO_SPECIAL_EFFECT_MODE(--[[int]] mode) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.SET_AUDIO_SPECIAL_EFFECT_MODE' due to disabled trusted mode")

	assert(type(mode) == "number", "Arg #1 (mode) must be a number.")

	local result = native_call(0x12561FCBB62D5B9C, mode)
end
natives.audio.set_audio_special_effect_mode = natives.AUDIO.SET_AUDIO_SPECIAL_EFFECT_MODE

--[[
Found in the b617d scripts, duplicates removed:  

AUDIO::_044DBAD7A7FA2BE5("V_CARSHOWROOM_PS_WINDOW_UNBROKEN", "V_CARSHOWROOM_PS_WINDOW_BROKEN");

 AUDIO::_044DBAD7A7FA2BE5("V_CIA_PS_WINDOW_UNBROKEN", "V_CIA_PS_WINDOW_BROKEN");

 AUDIO::_044DBAD7A7FA2BE5("V_DLC_HEIST_APARTMENT_DOOR_CLOSED", "V_DLC_HEIST_APARTMENT_DOOR_OPEN");

 AUDIO::_044DBAD7A7FA2BE5("V_FINALEBANK_PS_VAULT_INTACT", "V_FINALEBANK_PS_VAULT_BLOWN");

 AUDIO::_044DBAD7A7FA2BE5("V_MICHAEL_PS_BATHROOM_WITH_WINDOW", "V_MICHAEL_PS_BATHROOM_WITHOUT_WINDOW");
]]
function natives.AUDIO.SET_PORTAL_SETTINGS_OVERRIDE(--[[const char*]] p0, --[[const char*]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.SET_PORTAL_SETTINGS_OVERRIDE' due to disabled trusted mode")

	assert(type(p0) == "string", "Arg #1 (p0) must be a string.")
	assert(type(p1) == "string", "Arg #2 (p1) must be a string.")

	local result = native_call(0x044DBAD7A7FA2BE5, p0, p1)
end
natives.audio.set_portal_settings_override = natives.AUDIO.SET_PORTAL_SETTINGS_OVERRIDE

--[[
 Found in the b617d scripts, duplicates removed: 

 AUDIO::_B4BBFD9CD8B3922B("V_CARSHOWROOM_PS_WINDOW_UNBROKEN");
 AUDIO::_B4BBFD9CD8B3922B("V_CIA_PS_WINDOW_UNBROKEN");
 AUDIO::_B4BBFD9CD8B3922B("V_DLC_HEIST_APARTMENT_DOOR_CLOSED");
 AUDIO::_B4BBFD9CD8B3922B("V_FINALEBANK_PS_VAULT_INTACT");
 AUDIO::_B4BBFD9CD8B3922B("V_MICHAEL_PS_BATHROOM_WITH_WINDOW");
]]
function natives.AUDIO.REMOVE_PORTAL_SETTINGS_OVERRIDE(--[[const char*]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.REMOVE_PORTAL_SETTINGS_OVERRIDE' due to disabled trusted mode")

	assert(type(p0) == "string", "Arg #1 (p0) must be a string.")

	local result = native_call(0xB4BBFD9CD8B3922B, p0)
end
natives.audio.remove_portal_settings_override = natives.AUDIO.REMOVE_PORTAL_SETTINGS_OVERRIDE

--[[
STOP_S[MOKE_GRENADE_EXPLOSION_SOUNDS]?
]]
function natives.AUDIO.STOP_SMOKE_GRENADE_EXPLOSION_SOUNDS() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.STOP_SMOKE_GRENADE_EXPLOSION_SOUNDS' due to disabled trusted mode")

	local result = native_call(0xE4E6DD5566D28C82)
end
natives.audio.stop_smoke_grenade_explosion_sounds = natives.AUDIO.STOP_SMOKE_GRENADE_EXPLOSION_SOUNDS

function natives.AUDIO.GET_MUSIC_VOL_SLIDER() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.GET_MUSIC_VOL_SLIDER' due to disabled trusted mode")

	local result = native_call(0x3A48AB4445D499BE)
	return result:__tointeger()
end
natives.audio.get_music_vol_slider = natives.AUDIO.GET_MUSIC_VOL_SLIDER

function natives.AUDIO.REQUEST_TENNIS_BANKS(--[[Ped]] ped) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.REQUEST_TENNIS_BANKS' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x4ADA3F19BE4A6047, ped)
end
natives.audio.request_tennis_banks = natives.AUDIO.REQUEST_TENNIS_BANKS

function natives.AUDIO.UNREQUEST_TENNIS_BANKS() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.UNREQUEST_TENNIS_BANKS' due to disabled trusted mode")

	local result = native_call(0x0150B6FF25A9E2E5)
end
natives.audio.unrequest_tennis_banks = natives.AUDIO.UNREQUEST_TENNIS_BANKS

function natives.AUDIO.SET_SKIP_MINIGUN_SPIN_UP_AUDIO(--[[BOOL]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.SET_SKIP_MINIGUN_SPIN_UP_AUDIO' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0xBEF34B1D9624D5DD, p0)
end
natives.audio.set_skip_minigun_spin_up_audio = natives.AUDIO.SET_SKIP_MINIGUN_SPIN_UP_AUDIO

function natives.AUDIO.STOP_CUTSCENE_AUDIO() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.STOP_CUTSCENE_AUDIO' due to disabled trusted mode")

	local result = native_call(0x806058BBDC136E06)
end
natives.audio.stop_cutscene_audio = natives.AUDIO.STOP_CUTSCENE_AUDIO

function natives.AUDIO.HAS_LOADED_MP_DATA_SET() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.HAS_LOADED_MP_DATA_SET' due to disabled trusted mode")

	local result = native_call(0x544810ED9DB6BBE6)
	return result:__tointeger() ~= 0
end
natives.audio.has_loaded_mp_data_set = natives.AUDIO.HAS_LOADED_MP_DATA_SET

function natives.AUDIO.HAS_LOADED_SP_DATA_SET() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.HAS_LOADED_SP_DATA_SET' due to disabled trusted mode")

	local result = native_call(0x5B50ABB1FE3746F4)
	return result:__tointeger() ~= 0
end
natives.audio.has_loaded_sp_data_set = natives.AUDIO.HAS_LOADED_SP_DATA_SET

function natives.AUDIO.GET_VEHICLE_HORN_SOUND_INDEX(--[[Vehicle]] vehicle) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.GET_VEHICLE_HORN_SOUND_INDEX' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0xD53F3A29BCE2580E, vehicle)
	return result:__tointeger()
end
natives.audio.get_vehicle_horn_sound_index = natives.AUDIO.GET_VEHICLE_HORN_SOUND_INDEX

function natives.AUDIO.SET_VEHICLE_HORN_SOUND_INDEX(--[[Vehicle]] vehicle, --[[int]] value) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'AUDIO.SET_VEHICLE_HORN_SOUND_INDEX' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(value) == "number", "Arg #2 (value) must be a number.")

	local result = native_call(0x0350E7E17BA767D0, vehicle, value)
end
natives.audio.set_vehicle_horn_sound_index = natives.AUDIO.SET_VEHICLE_HORN_SOUND_INDEX


natives.BRAIN = {}
natives.brain = {}

--[[
BRAIN::ADD_SCRIPT_TO_RANDOM_PED("pb_prostitute", ${s_f_y_hooker_01}, 100, 0);

- Nacorpio

-----

Hardcoded to not work in Multiplayer.
]]
function natives.BRAIN.ADD_SCRIPT_TO_RANDOM_PED(--[[const char*]] name, --[[Hash]] model, --[[float]] p2, --[[float]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'BRAIN.ADD_SCRIPT_TO_RANDOM_PED' due to disabled trusted mode")

	assert(type(name) == "string", "Arg #1 (name) must be a string.")
	assert(type(model) == "number", "Arg #2 (model) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x4EE5367468A65CCC, name, model, p2, p3)
end
natives.brain.add_script_to_random_ped = natives.BRAIN.ADD_SCRIPT_TO_RANDOM_PED

--[[
Registers a script for any object with a specific model hash.

BRAIN::REGISTER_OBJECT_SCRIPT_BRAIN("ob_telescope", ${prop_telescope_01}, 100, 4.0, -1, 9);

- Nacorpio
]]
function natives.BRAIN.REGISTER_OBJECT_SCRIPT_BRAIN(--[[const char*]] scriptName, --[[Hash]] modelHash, --[[int]] p2, --[[float]] activationRange, --[[int]] p4, --[[int]] p5) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'BRAIN.REGISTER_OBJECT_SCRIPT_BRAIN' due to disabled trusted mode")

	assert(type(scriptName) == "string", "Arg #1 (scriptName) must be a string.")
	assert(type(modelHash) == "number", "Arg #2 (modelHash) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(activationRange) == "number", "Arg #4 (activationRange) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")

	local result = native_call(0x0BE84C318BA6EC22, scriptName, modelHash, p2, activationRange, p4, p5)
end
natives.brain.register_object_script_brain = natives.BRAIN.REGISTER_OBJECT_SCRIPT_BRAIN

function natives.BRAIN.IS_OBJECT_WITHIN_BRAIN_ACTIVATION_RANGE(--[[Object]] object) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'BRAIN.IS_OBJECT_WITHIN_BRAIN_ACTIVATION_RANGE' due to disabled trusted mode")

	assert(type(object) == "number", "Arg #1 (object) must be a number.")

	local result = native_call(0xCCBA154209823057, object)
	return result:__tointeger() ~= 0
end
natives.brain.is_object_within_brain_activation_range = natives.BRAIN.IS_OBJECT_WITHIN_BRAIN_ACTIVATION_RANGE

function natives.BRAIN.REGISTER_WORLD_POINT_SCRIPT_BRAIN(--[[const char*]] scriptName, --[[float]] activationRange, --[[int]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'BRAIN.REGISTER_WORLD_POINT_SCRIPT_BRAIN' due to disabled trusted mode")

	assert(type(scriptName) == "string", "Arg #1 (scriptName) must be a string.")
	assert(type(activationRange) == "number", "Arg #2 (activationRange) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0x3CDC7136613284BD, scriptName, activationRange, p2)
end
natives.brain.register_world_point_script_brain = natives.BRAIN.REGISTER_WORLD_POINT_SCRIPT_BRAIN

--[[
Gets whether the world point the calling script is registered to is within desired range of the player.
]]
function natives.BRAIN.IS_WORLD_POINT_WITHIN_BRAIN_ACTIVATION_RANGE() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'BRAIN.IS_WORLD_POINT_WITHIN_BRAIN_ACTIVATION_RANGE' due to disabled trusted mode")

	local result = native_call(0xC5042CC6F5E3D450)
	return result:__tointeger() ~= 0
end
natives.brain.is_world_point_within_brain_activation_range = natives.BRAIN.IS_WORLD_POINT_WITHIN_BRAIN_ACTIVATION_RANGE

function natives.BRAIN.ENABLE_SCRIPT_BRAIN_SET(--[[int]] brainSet) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'BRAIN.ENABLE_SCRIPT_BRAIN_SET' due to disabled trusted mode")

	assert(type(brainSet) == "number", "Arg #1 (brainSet) must be a number.")

	local result = native_call(0x67AA4D73F0CFA86B, brainSet)
end
natives.brain.enable_script_brain_set = natives.BRAIN.ENABLE_SCRIPT_BRAIN_SET

function natives.BRAIN.DISABLE_SCRIPT_BRAIN_SET(--[[int]] brainSet) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'BRAIN.DISABLE_SCRIPT_BRAIN_SET' due to disabled trusted mode")

	assert(type(brainSet) == "number", "Arg #1 (brainSet) must be a number.")

	local result = native_call(0x14D8518E9760F08F, brainSet)
end
natives.brain.disable_script_brain_set = natives.BRAIN.DISABLE_SCRIPT_BRAIN_SET

function natives.BRAIN.REACTIVATE_ALL_WORLD_BRAINS_THAT_ARE_WAITING_TILL_OUT_OF_RANGE() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'BRAIN.REACTIVATE_ALL_WORLD_BRAINS_THAT_ARE_WAITING_TILL_OUT_OF_RANGE' due to disabled trusted mode")

	local result = native_call(0x0B40ED49D7D6FF84)
end
natives.brain.reactivate_all_world_brains_that_are_waiting_till_out_of_range = natives.BRAIN.REACTIVATE_ALL_WORLD_BRAINS_THAT_ARE_WAITING_TILL_OUT_OF_RANGE

function natives.BRAIN.REACTIVATE_ALL_OBJECT_BRAINS_THAT_ARE_WAITING_TILL_OUT_OF_RANGE() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'BRAIN.REACTIVATE_ALL_OBJECT_BRAINS_THAT_ARE_WAITING_TILL_OUT_OF_RANGE' due to disabled trusted mode")

	local result = native_call(0x4D953DF78EBF8158)
end
natives.brain.reactivate_all_object_brains_that_are_waiting_till_out_of_range = natives.BRAIN.REACTIVATE_ALL_OBJECT_BRAINS_THAT_ARE_WAITING_TILL_OUT_OF_RANGE

--[[
Possible values:

act_cinema
am_mp_carwash_launch
am_mp_carwash_control
am_mp_property_ext
chop
fairgroundHub
launcher_BasejumpHeli
launcher_BasejumpPack
launcher_CarWash
launcher_golf
launcher_Hunting_Ambient
launcher_MrsPhilips
launcher_OffroadRacing
launcher_pilotschool
launcher_Racing
launcher_rampage
launcher_rampage
launcher_range
launcher_stunts
launcher_stunts
launcher_tennis
launcher_Tonya
launcher_Triathlon
launcher_Yoga
ob_mp_bed_low
ob_mp_bed_med
]]
function natives.BRAIN.REACTIVATE_NAMED_WORLD_BRAINS_WAITING_TILL_OUT_OF_RANGE(--[[const char*]] scriptName) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'BRAIN.REACTIVATE_NAMED_WORLD_BRAINS_WAITING_TILL_OUT_OF_RANGE' due to disabled trusted mode")

	assert(type(scriptName) == "string", "Arg #1 (scriptName) must be a string.")

	local result = native_call(0x6D6840CEE8845831, scriptName)
end
natives.brain.reactivate_named_world_brains_waiting_till_out_of_range = natives.BRAIN.REACTIVATE_NAMED_WORLD_BRAINS_WAITING_TILL_OUT_OF_RANGE

--[[
Looks like a cousin of above function _6D6840CEE8845831 as it was found among them. Must be similar

Here are possible values of argument - 

"ob_tv"
"launcher_Darts"
]]
function natives.BRAIN.REACTIVATE_NAMED_OBJECT_BRAINS_WAITING_TILL_OUT_OF_RANGE(--[[const char*]] scriptName) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'BRAIN.REACTIVATE_NAMED_OBJECT_BRAINS_WAITING_TILL_OUT_OF_RANGE' due to disabled trusted mode")

	assert(type(scriptName) == "string", "Arg #1 (scriptName) must be a string.")

	local result = native_call(0x6E91B04E08773030, scriptName)
end
natives.brain.reactivate_named_object_brains_waiting_till_out_of_range = natives.BRAIN.REACTIVATE_NAMED_OBJECT_BRAINS_WAITING_TILL_OUT_OF_RANGE


natives.CAM = {}
natives.cam = {}

--[[
ease - smooth transition between the camera's positions
easeTime - Time in milliseconds for the transition to happen

If you have created a script (rendering) camera, and want to go back to the 
character (gameplay) camera, call this native with render set to 0.
Setting ease to 1 will smooth the transition.
]]
function natives.CAM.RENDER_SCRIPT_CAMS(--[[BOOL]] render, --[[BOOL]] ease, --[[int]] easeTime, --[[BOOL]] p3, --[[BOOL]] p4, --[[Any]] p5) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.RENDER_SCRIPT_CAMS' due to disabled trusted mode")

	assert(type(render) == "boolean", "Arg #1 (render) must be a boolean.")
	assert(type(ease) == "boolean", "Arg #2 (ease) must be a boolean.")
	assert(type(easeTime) == "number", "Arg #3 (easeTime) must be a number.")
	assert(type(p3) == "boolean", "Arg #4 (p3) must be a boolean.")
	assert(type(p4) == "boolean", "Arg #5 (p4) must be a boolean.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")

	local result = native_call(0x07E5B515DB0636FC, render, ease, easeTime, p3, p4, p5)
end
natives.cam.render_script_cams = natives.CAM.RENDER_SCRIPT_CAMS

--[[
This native makes the gameplay camera zoom into first person/third person with a special effect.
]]
function natives.CAM.STOP_RENDERING_SCRIPT_CAMS_USING_CATCH_UP(--[[BOOL]] render, --[[float]] p1, --[[int]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.STOP_RENDERING_SCRIPT_CAMS_USING_CATCH_UP' due to disabled trusted mode")

	assert(type(render) == "boolean", "Arg #1 (render) must be a boolean.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0xC819F3CBB62BF692, render, p1, p2, p3)
end
natives.cam.stop_rendering_script_cams_using_catch_up = natives.CAM.STOP_RENDERING_SCRIPT_CAMS_USING_CATCH_UP

--[[
"DEFAULT_SCRIPTED_CAMERA"
"DEFAULT_ANIMATED_CAMERA"
"DEFAULT_SPLINE_CAMERA"
"DEFAULT_SCRIPTED_FLY_CAMERA"
"TIMED_SPLINE_CAMERA"
]]
function natives.CAM.CREATE_CAM(--[[const char*]] camName, --[[BOOL]] p1) -- Returns Cam
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.CREATE_CAM' due to disabled trusted mode")

	assert(type(camName) == "string", "Arg #1 (camName) must be a string.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0xC3981DCE61D9E13F, camName, p1)
	return result:__tointeger()
end
natives.cam.create_cam = natives.CAM.CREATE_CAM

--[[
camName is always set to "DEFAULT_SCRIPTED_CAMERA" in Rockstar's scripts.
------------
Camera names found in the b617d scripts:
"DEFAULT_ANIMATED_CAMERA"
"DEFAULT_SCRIPTED_CAMERA"
"DEFAULT_SCRIPTED_FLY_CAMERA"
"DEFAULT_SPLINE_CAMERA"
------------
Side Note: It seems p8 is basically to represent what would be the bool p1 within CREATE_CAM native. As well as the p9 since it's always 2 in scripts seems to represent what would be the last param within SET_CAM_ROT native which normally would be 2.
]]
function natives.CAM.CREATE_CAM_WITH_PARAMS(--[[const char*]] camName, --[[float]] posX, --[[float]] posY, --[[float]] posZ, --[[float]] rotX, --[[float]] rotY, --[[float]] rotZ, --[[float]] fov, --[[BOOL]] p8, --[[int]] p9) -- Returns Cam
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.CREATE_CAM_WITH_PARAMS' due to disabled trusted mode")

	assert(type(camName) == "string", "Arg #1 (camName) must be a string.")
	assert(type(posX) == "number", "Arg #2 (posX) must be a number.")
	assert(type(posY) == "number", "Arg #3 (posY) must be a number.")
	assert(type(posZ) == "number", "Arg #4 (posZ) must be a number.")
	assert(type(rotX) == "number", "Arg #5 (rotX) must be a number.")
	assert(type(rotY) == "number", "Arg #6 (rotY) must be a number.")
	assert(type(rotZ) == "number", "Arg #7 (rotZ) must be a number.")
	assert(type(fov) == "number", "Arg #8 (fov) must be a number.")
	assert(type(p8) == "boolean", "Arg #9 (p8) must be a boolean.")
	assert(type(p9) == "number", "Arg #10 (p9) must be a number.")

	local result = native_call(0xB51194800B257161, camName, posX, posY, posZ, rotX, rotY, rotZ, fov, p8, p9)
	return result:__tointeger()
end
natives.cam.create_cam_with_params = natives.CAM.CREATE_CAM_WITH_PARAMS

function natives.CAM.CREATE_CAMERA(--[[Hash]] camHash, --[[BOOL]] p1) -- Returns Cam
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.CREATE_CAMERA' due to disabled trusted mode")

	assert(type(camHash) == "number", "Arg #1 (camHash) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0x5E3CF89C6BCCA67D, camHash, p1)
	return result:__tointeger()
end
natives.cam.create_camera = natives.CAM.CREATE_CAMERA

--[[
CAM::_GET_GAMEPLAY_CAM_COORDS can be used instead of posX,Y,Z
CAM::_GET_GAMEPLAY_CAM_ROT can be used instead of rotX,Y,Z
CAM::_80EC114669DAEFF4() can be used instead of p7 (Possible p7 is FOV parameter. )
p8 ???
p9 uses 2 by default

]]
function natives.CAM.CREATE_CAMERA_WITH_PARAMS(--[[Hash]] camHash, --[[float]] posX, --[[float]] posY, --[[float]] posZ, --[[float]] rotX, --[[float]] rotY, --[[float]] rotZ, --[[float]] fov, --[[BOOL]] p8, --[[Any]] p9) -- Returns Cam
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.CREATE_CAMERA_WITH_PARAMS' due to disabled trusted mode")

	assert(type(camHash) == "number", "Arg #1 (camHash) must be a number.")
	assert(type(posX) == "number", "Arg #2 (posX) must be a number.")
	assert(type(posY) == "number", "Arg #3 (posY) must be a number.")
	assert(type(posZ) == "number", "Arg #4 (posZ) must be a number.")
	assert(type(rotX) == "number", "Arg #5 (rotX) must be a number.")
	assert(type(rotY) == "number", "Arg #6 (rotY) must be a number.")
	assert(type(rotZ) == "number", "Arg #7 (rotZ) must be a number.")
	assert(type(fov) == "number", "Arg #8 (fov) must be a number.")
	assert(type(p8) == "boolean", "Arg #9 (p8) must be a boolean.")
	assert(type(p9) == "number", "Arg #10 (p9) must be a number.")

	local result = native_call(0x6ABFA3E16460F22D, camHash, posX, posY, posZ, rotX, rotY, rotZ, fov, p8, p9)
	return result:__tointeger()
end
natives.cam.create_camera_with_params = natives.CAM.CREATE_CAMERA_WITH_PARAMS

--[[
BOOL param indicates whether the cam should be destroyed if it belongs to the calling script.
]]
function natives.CAM.DESTROY_CAM(--[[Cam]] cam, --[[BOOL]] bScriptHostCam) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.DESTROY_CAM' due to disabled trusted mode")

	assert(type(cam) == "number", "Arg #1 (cam) must be a number.")
	assert(type(bScriptHostCam) == "boolean", "Arg #2 (bScriptHostCam) must be a boolean.")

	local result = native_call(0x865908C81A2C22E9, cam, bScriptHostCam)
end
natives.cam.destroy_cam = natives.CAM.DESTROY_CAM

--[[
BOOL param indicates whether the cam should be destroyed if it belongs to the calling script.
]]
function natives.CAM.DESTROY_ALL_CAMS(--[[BOOL]] bScriptHostCam) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.DESTROY_ALL_CAMS' due to disabled trusted mode")

	assert(type(bScriptHostCam) == "boolean", "Arg #1 (bScriptHostCam) must be a boolean.")

	local result = native_call(0x8E5FB15663F79120, bScriptHostCam)
end
natives.cam.destroy_all_cams = natives.CAM.DESTROY_ALL_CAMS

--[[
Returns whether or not the passed camera handle exists.
]]
function natives.CAM.DOES_CAM_EXIST(--[[Cam]] cam) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.DOES_CAM_EXIST' due to disabled trusted mode")

	assert(type(cam) == "number", "Arg #1 (cam) must be a number.")

	local result = native_call(0xA7A932170592B50E, cam)
	return result:__tointeger() ~= 0
end
natives.cam.does_cam_exist = natives.CAM.DOES_CAM_EXIST

--[[
Set camera as active/inactive.
]]
function natives.CAM.SET_CAM_ACTIVE(--[[Cam]] cam, --[[BOOL]] active) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_CAM_ACTIVE' due to disabled trusted mode")

	assert(type(cam) == "number", "Arg #1 (cam) must be a number.")
	assert(type(active) == "boolean", "Arg #2 (active) must be a boolean.")

	local result = native_call(0x026FB97D0A425F84, cam, active)
end
natives.cam.set_cam_active = natives.CAM.SET_CAM_ACTIVE

--[[
Returns whether or not the passed camera handle is active.
]]
function natives.CAM.IS_CAM_ACTIVE(--[[Cam]] cam) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.IS_CAM_ACTIVE' due to disabled trusted mode")

	assert(type(cam) == "number", "Arg #1 (cam) must be a number.")

	local result = native_call(0xDFB2B516207D3534, cam)
	return result:__tointeger() ~= 0
end
natives.cam.is_cam_active = natives.CAM.IS_CAM_ACTIVE

function natives.CAM.IS_CAM_RENDERING(--[[Cam]] cam) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.IS_CAM_RENDERING' due to disabled trusted mode")

	assert(type(cam) == "number", "Arg #1 (cam) must be a number.")

	local result = native_call(0x02EC0AF5C5A49B7A, cam)
	return result:__tointeger() ~= 0
end
natives.cam.is_cam_rendering = natives.CAM.IS_CAM_RENDERING

function natives.CAM.GET_RENDERING_CAM() -- Returns Cam
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.GET_RENDERING_CAM' due to disabled trusted mode")

	local result = native_call(0x5234F9F10919EABA)
	return result:__tointeger()
end
natives.cam.get_rendering_cam = natives.CAM.GET_RENDERING_CAM

function natives.CAM.GET_CAM_COORD(--[[Cam]] cam) -- Returns Vector3
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.GET_CAM_COORD' due to disabled trusted mode")

	assert(type(cam) == "number", "Arg #1 (cam) must be a number.")

	local result = native_call(0xBAC038F7459AE5AE, cam)
	return result:__tov3()
end
natives.cam.get_cam_coord = natives.CAM.GET_CAM_COORD

--[[
The last parameter, as in other "ROT" methods, is usually 2.
]]
function natives.CAM.GET_CAM_ROT(--[[Cam]] cam, --[[int]] rotationOrder) -- Returns Vector3
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.GET_CAM_ROT' due to disabled trusted mode")

	assert(type(cam) == "number", "Arg #1 (cam) must be a number.")
	assert(type(rotationOrder) == "number", "Arg #2 (rotationOrder) must be a number.")

	local result = native_call(0x7D304C1C955E3E12, cam, rotationOrder)
	return result:__tov3()
end
natives.cam.get_cam_rot = natives.CAM.GET_CAM_ROT

function natives.CAM.GET_CAM_FOV(--[[Cam]] cam) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.GET_CAM_FOV' due to disabled trusted mode")

	assert(type(cam) == "number", "Arg #1 (cam) must be a number.")

	local result = native_call(0xC3330A45CCCDB26A, cam)
	return result:__tonumber()
end
natives.cam.get_cam_fov = natives.CAM.GET_CAM_FOV

function natives.CAM.GET_CAM_NEAR_CLIP(--[[Cam]] cam) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.GET_CAM_NEAR_CLIP' due to disabled trusted mode")

	assert(type(cam) == "number", "Arg #1 (cam) must be a number.")

	local result = native_call(0xC520A34DAFBF24B1, cam)
	return result:__tonumber()
end
natives.cam.get_cam_near_clip = natives.CAM.GET_CAM_NEAR_CLIP

function natives.CAM.GET_CAM_FAR_CLIP(--[[Cam]] cam) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.GET_CAM_FAR_CLIP' due to disabled trusted mode")

	assert(type(cam) == "number", "Arg #1 (cam) must be a number.")

	local result = native_call(0xB60A9CFEB21CA6AA, cam)
	return result:__tonumber()
end
natives.cam.get_cam_far_clip = natives.CAM.GET_CAM_FAR_CLIP

function natives.CAM.GET_CAM_NEAR_DOF(--[[Cam]] cam) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.GET_CAM_NEAR_DOF' due to disabled trusted mode")

	assert(type(cam) == "number", "Arg #1 (cam) must be a number.")

	local result = native_call(0xC2612D223D915A1C, cam)
	return result:__tonumber()
end
natives.cam.get_cam_near_dof = natives.CAM.GET_CAM_NEAR_DOF

function natives.CAM.GET_CAM_FAR_DOF(--[[Cam]] cam) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.GET_CAM_FAR_DOF' due to disabled trusted mode")

	assert(type(cam) == "number", "Arg #1 (cam) must be a number.")

	local result = native_call(0x255F8DAFD540D397, cam)
	return result:__tonumber()
end
natives.cam.get_cam_far_dof = natives.CAM.GET_CAM_FAR_DOF

function natives.CAM.GET_CAM_DOF_STRENGTH(--[[Cam]] cam) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.GET_CAM_DOF_STRENGTH' due to disabled trusted mode")

	assert(type(cam) == "number", "Arg #1 (cam) must be a number.")

	local result = native_call(0x06D153C0B99B6128, cam)
	return result:__tonumber()
end
natives.cam.get_cam_dof_strength = natives.CAM.GET_CAM_DOF_STRENGTH

function natives.CAM.SET_CAM_PARAMS(--[[Cam]] cam, --[[float]] posX, --[[float]] posY, --[[float]] posZ, --[[float]] rotX, --[[float]] rotY, --[[float]] rotZ, --[[float]] fieldOfView, --[[Any]] p8, --[[int]] p9, --[[int]] p10, --[[int]] p11) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_CAM_PARAMS' due to disabled trusted mode")

	assert(type(cam) == "number", "Arg #1 (cam) must be a number.")
	assert(type(posX) == "number", "Arg #2 (posX) must be a number.")
	assert(type(posY) == "number", "Arg #3 (posY) must be a number.")
	assert(type(posZ) == "number", "Arg #4 (posZ) must be a number.")
	assert(type(rotX) == "number", "Arg #5 (rotX) must be a number.")
	assert(type(rotY) == "number", "Arg #6 (rotY) must be a number.")
	assert(type(rotZ) == "number", "Arg #7 (rotZ) must be a number.")
	assert(type(fieldOfView) == "number", "Arg #8 (fieldOfView) must be a number.")
	assert(type(p8) == "number", "Arg #9 (p8) must be a number.")
	assert(type(p9) == "number", "Arg #10 (p9) must be a number.")
	assert(type(p10) == "number", "Arg #11 (p10) must be a number.")
	assert(type(p11) == "number", "Arg #12 (p11) must be a number.")

	local result = native_call(0xBFD8727AEA3CCEBA, cam, posX, posY, posZ, rotX, rotY, rotZ, fieldOfView, p8, p9, p10, p11)
end
natives.cam.set_cam_params = natives.CAM.SET_CAM_PARAMS

--[[
Sets the position of the cam.
]]
function natives.CAM.SET_CAM_COORD(--[[Cam]] cam, --[[float]] posX, --[[float]] posY, --[[float]] posZ) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_CAM_COORD' due to disabled trusted mode")

	assert(type(cam) == "number", "Arg #1 (cam) must be a number.")
	assert(type(posX) == "number", "Arg #2 (posX) must be a number.")
	assert(type(posY) == "number", "Arg #3 (posY) must be a number.")
	assert(type(posZ) == "number", "Arg #4 (posZ) must be a number.")

	local result = native_call(0x4D41783FB745E42E, cam, posX, posY, posZ)
end
natives.cam.set_cam_coord = natives.CAM.SET_CAM_COORD

--[[
Sets the rotation of the cam.
Last parameter unknown.

Last parameter seems to always be set to 2.
]]
function natives.CAM.SET_CAM_ROT(--[[Cam]] cam, --[[float]] rotX, --[[float]] rotY, --[[float]] rotZ, --[[int]] rotationOrder) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_CAM_ROT' due to disabled trusted mode")

	assert(type(cam) == "number", "Arg #1 (cam) must be a number.")
	assert(type(rotX) == "number", "Arg #2 (rotX) must be a number.")
	assert(type(rotY) == "number", "Arg #3 (rotY) must be a number.")
	assert(type(rotZ) == "number", "Arg #4 (rotZ) must be a number.")
	assert(type(rotationOrder) == "number", "Arg #5 (rotationOrder) must be a number.")

	local result = native_call(0x85973643155D0B07, cam, rotX, rotY, rotZ, rotationOrder)
end
natives.cam.set_cam_rot = natives.CAM.SET_CAM_ROT

--[[
Sets the field of view of the cam.
---------------------------------------------
Min: 1.0f
Max: 130.0f
]]
function natives.CAM.SET_CAM_FOV(--[[Cam]] cam, --[[float]] fieldOfView) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_CAM_FOV' due to disabled trusted mode")

	assert(type(cam) == "number", "Arg #1 (cam) must be a number.")
	assert(type(fieldOfView) == "number", "Arg #2 (fieldOfView) must be a number.")

	local result = native_call(0xB13C14F66A00D047, cam, fieldOfView)
end
natives.cam.set_cam_fov = natives.CAM.SET_CAM_FOV

function natives.CAM.SET_CAM_NEAR_CLIP(--[[Cam]] cam, --[[float]] nearClip) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_CAM_NEAR_CLIP' due to disabled trusted mode")

	assert(type(cam) == "number", "Arg #1 (cam) must be a number.")
	assert(type(nearClip) == "number", "Arg #2 (nearClip) must be a number.")

	local result = native_call(0xC7848EFCCC545182, cam, nearClip)
end
natives.cam.set_cam_near_clip = natives.CAM.SET_CAM_NEAR_CLIP

function natives.CAM.SET_CAM_FAR_CLIP(--[[Cam]] cam, --[[float]] farClip) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_CAM_FAR_CLIP' due to disabled trusted mode")

	assert(type(cam) == "number", "Arg #1 (cam) must be a number.")
	assert(type(farClip) == "number", "Arg #2 (farClip) must be a number.")

	local result = native_call(0xAE306F2A904BF86E, cam, farClip)
end
natives.cam.set_cam_far_clip = natives.CAM.SET_CAM_FAR_CLIP

function natives.CAM.FORCE_CAM_FAR_CLIP(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.FORCE_CAM_FAR_CLIP' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xAABD62873FFB1A33, p0, p1)
end
natives.cam.force_cam_far_clip = natives.CAM.FORCE_CAM_FAR_CLIP

function natives.CAM.SET_CAM_MOTION_BLUR_STRENGTH(--[[Cam]] cam, --[[float]] strength) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_CAM_MOTION_BLUR_STRENGTH' due to disabled trusted mode")

	assert(type(cam) == "number", "Arg #1 (cam) must be a number.")
	assert(type(strength) == "number", "Arg #2 (strength) must be a number.")

	local result = native_call(0x6F0F77FBA9A8F2E6, cam, strength)
end
natives.cam.set_cam_motion_blur_strength = natives.CAM.SET_CAM_MOTION_BLUR_STRENGTH

function natives.CAM.SET_CAM_NEAR_DOF(--[[Cam]] cam, --[[float]] nearDOF) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_CAM_NEAR_DOF' due to disabled trusted mode")

	assert(type(cam) == "number", "Arg #1 (cam) must be a number.")
	assert(type(nearDOF) == "number", "Arg #2 (nearDOF) must be a number.")

	local result = native_call(0x3FA4BF0A7AB7DE2C, cam, nearDOF)
end
natives.cam.set_cam_near_dof = natives.CAM.SET_CAM_NEAR_DOF

function natives.CAM.SET_CAM_FAR_DOF(--[[Cam]] cam, --[[float]] farDOF) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_CAM_FAR_DOF' due to disabled trusted mode")

	assert(type(cam) == "number", "Arg #1 (cam) must be a number.")
	assert(type(farDOF) == "number", "Arg #2 (farDOF) must be a number.")

	local result = native_call(0xEDD91296CD01AEE0, cam, farDOF)
end
natives.cam.set_cam_far_dof = natives.CAM.SET_CAM_FAR_DOF

function natives.CAM.SET_CAM_DOF_STRENGTH(--[[Cam]] cam, --[[float]] dofStrength) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_CAM_DOF_STRENGTH' due to disabled trusted mode")

	assert(type(cam) == "number", "Arg #1 (cam) must be a number.")
	assert(type(dofStrength) == "number", "Arg #2 (dofStrength) must be a number.")

	local result = native_call(0x5EE29B4D7D5DF897, cam, dofStrength)
end
natives.cam.set_cam_dof_strength = natives.CAM.SET_CAM_DOF_STRENGTH

function natives.CAM.SET_CAM_DOF_PLANES(--[[Cam]] cam, --[[float]] p1, --[[float]] p2, --[[float]] p3, --[[float]] p4) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_CAM_DOF_PLANES' due to disabled trusted mode")

	assert(type(cam) == "number", "Arg #1 (cam) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")

	local result = native_call(0x3CF48F6F96E749DC, cam, p1, p2, p3, p4)
end
natives.cam.set_cam_dof_planes = natives.CAM.SET_CAM_DOF_PLANES

function natives.CAM.SET_CAM_USE_SHALLOW_DOF_MODE(--[[Cam]] cam, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_CAM_USE_SHALLOW_DOF_MODE' due to disabled trusted mode")

	assert(type(cam) == "number", "Arg #1 (cam) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x16A96863A17552BB, cam, toggle)
end
natives.cam.set_cam_use_shallow_dof_mode = natives.CAM.SET_CAM_USE_SHALLOW_DOF_MODE

function natives.CAM.SET_USE_HI_DOF() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_USE_HI_DOF' due to disabled trusted mode")

	local result = native_call(0xA13B0222F3D94A94)
end
natives.cam.set_use_hi_dof = natives.CAM.SET_USE_HI_DOF

--[[
Only used in R* Script fm_mission_controller_2020
]]
function natives.CAM.SET_USE_HI_DOF_ON_SYNCED_SCENE_THIS_UPDATE() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_USE_HI_DOF_ON_SYNCED_SCENE_THIS_UPDATE' due to disabled trusted mode")

	local result = native_call(0x731A880555DA3647)
end
natives.cam.set_use_hi_dof_on_synced_scene_this_update = natives.CAM.SET_USE_HI_DOF_ON_SYNCED_SCENE_THIS_UPDATE

function natives.CAM.SET_CAM_DOF_OVERRIDDEN_FOCUS_DISTANCE(--[[Any]] p0, --[[float]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_CAM_DOF_OVERRIDDEN_FOCUS_DISTANCE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xF55E4046F6F831DC, p0, p1)
end
natives.cam.set_cam_dof_overridden_focus_distance = natives.CAM.SET_CAM_DOF_OVERRIDDEN_FOCUS_DISTANCE

function natives.CAM.SET_CAM_DOF_OVERRIDDEN_FOCUS_DISTANCE_BLEND_LEVEL(--[[Any]] p0, --[[float]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_CAM_DOF_OVERRIDDEN_FOCUS_DISTANCE_BLEND_LEVEL' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xE111A7C0D200CBC5, p0, p1)
end
natives.cam.set_cam_dof_overridden_focus_distance_blend_level = natives.CAM.SET_CAM_DOF_OVERRIDDEN_FOCUS_DISTANCE_BLEND_LEVEL

--[[
This native has its name defined inside its codE

]]
function natives.CAM.SET_CAM_DOF_FNUMBER_OF_LENS(--[[Cam]] camera, --[[float]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_CAM_DOF_FNUMBER_OF_LENS' due to disabled trusted mode")

	assert(type(camera) == "number", "Arg #1 (camera) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x7DD234D6F3914C5B, camera, p1)
end
natives.cam.set_cam_dof_fnumber_of_lens = natives.CAM.SET_CAM_DOF_FNUMBER_OF_LENS

--[[
Native name labeled within its code
]]
function natives.CAM.SET_CAM_DOF_FOCAL_LENGTH_MULTIPLIER(--[[Cam]] camera, --[[float]] multiplier) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_CAM_DOF_FOCAL_LENGTH_MULTIPLIER' due to disabled trusted mode")

	assert(type(camera) == "number", "Arg #1 (camera) must be a number.")
	assert(type(multiplier) == "number", "Arg #2 (multiplier) must be a number.")

	local result = native_call(0x47B595D60664CFFA, camera, multiplier)
end
natives.cam.set_cam_dof_focal_length_multiplier = natives.CAM.SET_CAM_DOF_FOCAL_LENGTH_MULTIPLIER

--[[
This native has a name defined inside its code
]]
function natives.CAM.SET_CAM_DOF_FOCUS_DISTANCE_BIAS(--[[Cam]] camera, --[[float]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_CAM_DOF_FOCUS_DISTANCE_BIAS' due to disabled trusted mode")

	assert(type(camera) == "number", "Arg #1 (camera) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xC669EEA5D031B7DE, camera, p1)
end
natives.cam.set_cam_dof_focus_distance_bias = natives.CAM.SET_CAM_DOF_FOCUS_DISTANCE_BIAS

--[[
This native has a name defined inside its code
]]
function natives.CAM.SET_CAM_DOF_MAX_NEAR_IN_FOCUS_DISTANCE(--[[Cam]] camera, --[[float]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_CAM_DOF_MAX_NEAR_IN_FOCUS_DISTANCE' due to disabled trusted mode")

	assert(type(camera) == "number", "Arg #1 (camera) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xC3654A441402562D, camera, p1)
end
natives.cam.set_cam_dof_max_near_in_focus_distance = natives.CAM.SET_CAM_DOF_MAX_NEAR_IN_FOCUS_DISTANCE

--[[
This native has a name defined inside its code
]]
function natives.CAM.SET_CAM_DOF_MAX_NEAR_IN_FOCUS_DISTANCE_BLEND_LEVEL(--[[Cam]] camera, --[[float]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_CAM_DOF_MAX_NEAR_IN_FOCUS_DISTANCE_BLEND_LEVEL' due to disabled trusted mode")

	assert(type(camera) == "number", "Arg #1 (camera) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x2C654B4943BDDF7C, camera, p1)
end
natives.cam.set_cam_dof_max_near_in_focus_distance_blend_level = natives.CAM.SET_CAM_DOF_MAX_NEAR_IN_FOCUS_DISTANCE_BLEND_LEVEL

--[[
Last param determines if its relative to the Entity
]]
function natives.CAM.ATTACH_CAM_TO_ENTITY(--[[Cam]] cam, --[[Entity]] entity, --[[float]] xOffset, --[[float]] yOffset, --[[float]] zOffset, --[[BOOL]] isRelative) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.ATTACH_CAM_TO_ENTITY' due to disabled trusted mode")

	assert(type(cam) == "number", "Arg #1 (cam) must be a number.")
	assert(type(entity) == "number", "Arg #2 (entity) must be a number.")
	assert(type(xOffset) == "number", "Arg #3 (xOffset) must be a number.")
	assert(type(yOffset) == "number", "Arg #4 (yOffset) must be a number.")
	assert(type(zOffset) == "number", "Arg #5 (zOffset) must be a number.")
	assert(type(isRelative) == "boolean", "Arg #6 (isRelative) must be a boolean.")

	local result = native_call(0xFEDB7D269E8C60E3, cam, entity, xOffset, yOffset, zOffset, isRelative)
end
natives.cam.attach_cam_to_entity = natives.CAM.ATTACH_CAM_TO_ENTITY

function natives.CAM.ATTACH_CAM_TO_PED_BONE(--[[Cam]] cam, --[[Ped]] ped, --[[int]] boneIndex, --[[float]] x, --[[float]] y, --[[float]] z, --[[BOOL]] heading) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.ATTACH_CAM_TO_PED_BONE' due to disabled trusted mode")

	assert(type(cam) == "number", "Arg #1 (cam) must be a number.")
	assert(type(ped) == "number", "Arg #2 (ped) must be a number.")
	assert(type(boneIndex) == "number", "Arg #3 (boneIndex) must be a number.")
	assert(type(x) == "number", "Arg #4 (x) must be a number.")
	assert(type(y) == "number", "Arg #5 (y) must be a number.")
	assert(type(z) == "number", "Arg #6 (z) must be a number.")
	assert(type(heading) == "boolean", "Arg #7 (heading) must be a boolean.")

	local result = native_call(0x61A3DBA14AB7F411, cam, ped, boneIndex, x, y, z, heading)
end
natives.cam.attach_cam_to_ped_bone = natives.CAM.ATTACH_CAM_TO_PED_BONE

function natives.CAM.HARD_ATTACH_CAM_TO_PED_BONE(--[[Cam]] cam, --[[Ped]] ped, --[[int]] boneIndex, --[[float]] p3, --[[float]] p4, --[[float]] p5, --[[float]] p6, --[[float]] p7, --[[float]] p8, --[[BOOL]] p9) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.HARD_ATTACH_CAM_TO_PED_BONE' due to disabled trusted mode")

	assert(type(cam) == "number", "Arg #1 (cam) must be a number.")
	assert(type(ped) == "number", "Arg #2 (ped) must be a number.")
	assert(type(boneIndex) == "number", "Arg #3 (boneIndex) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")
	assert(type(p6) == "number", "Arg #7 (p6) must be a number.")
	assert(type(p7) == "number", "Arg #8 (p7) must be a number.")
	assert(type(p8) == "number", "Arg #9 (p8) must be a number.")
	assert(type(p9) == "boolean", "Arg #10 (p9) must be a boolean.")

	local result = native_call(0x149916F50C34A40D, cam, ped, boneIndex, p3, p4, p5, p6, p7, p8, p9)
end
natives.cam.hard_attach_cam_to_ped_bone = natives.CAM.HARD_ATTACH_CAM_TO_PED_BONE

--[[
Example from am_mp_drone script: 

CAM::_0x202A5ED9CE01D6E7(Local_190.f_169, NETWORK::NET_TO_OBJ(Local_190.f_159), 0f, 0f, 180f, Var0, 1);
]]
function natives.CAM.HARD_ATTACH_CAM_TO_ENTITY(--[[Cam]] cam, --[[Entity]] entity, --[[float]] xRot, --[[float]] yRot, --[[float]] zRot, --[[float]] xOffset, --[[float]] yOffset, --[[float]] zOffset, --[[BOOL]] isRelative) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.HARD_ATTACH_CAM_TO_ENTITY' due to disabled trusted mode")

	assert(type(cam) == "number", "Arg #1 (cam) must be a number.")
	assert(type(entity) == "number", "Arg #2 (entity) must be a number.")
	assert(type(xRot) == "number", "Arg #3 (xRot) must be a number.")
	assert(type(yRot) == "number", "Arg #4 (yRot) must be a number.")
	assert(type(zRot) == "number", "Arg #5 (zRot) must be a number.")
	assert(type(xOffset) == "number", "Arg #6 (xOffset) must be a number.")
	assert(type(yOffset) == "number", "Arg #7 (yOffset) must be a number.")
	assert(type(zOffset) == "number", "Arg #8 (zOffset) must be a number.")
	assert(type(isRelative) == "boolean", "Arg #9 (isRelative) must be a boolean.")

	local result = native_call(0x202A5ED9CE01D6E7, cam, entity, xRot, yRot, zRot, xOffset, yOffset, zOffset, isRelative)
end
natives.cam.hard_attach_cam_to_entity = natives.CAM.HARD_ATTACH_CAM_TO_ENTITY

--[[
This native works with vehicles only. Bone indexes are usually given by this native GET_ENTITY_BONE_INDEX_BY_NAME.
]]
function natives.CAM.ATTACH_CAM_TO_VEHICLE_BONE(--[[Cam]] cam, --[[Vehicle]] vehicle, --[[int]] boneIndex, --[[BOOL]] relativeRotation, --[[float]] rotX, --[[float]] rotY, --[[float]] rotZ, --[[float]] offsetX, --[[float]] offsetY, --[[float]] offsetZ, --[[BOOL]] fixedDirection) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.ATTACH_CAM_TO_VEHICLE_BONE' due to disabled trusted mode")

	assert(type(cam) == "number", "Arg #1 (cam) must be a number.")
	assert(type(vehicle) == "number", "Arg #2 (vehicle) must be a number.")
	assert(type(boneIndex) == "number", "Arg #3 (boneIndex) must be a number.")
	assert(type(relativeRotation) == "boolean", "Arg #4 (relativeRotation) must be a boolean.")
	assert(type(rotX) == "number", "Arg #5 (rotX) must be a number.")
	assert(type(rotY) == "number", "Arg #6 (rotY) must be a number.")
	assert(type(rotZ) == "number", "Arg #7 (rotZ) must be a number.")
	assert(type(offsetX) == "number", "Arg #8 (offsetX) must be a number.")
	assert(type(offsetY) == "number", "Arg #9 (offsetY) must be a number.")
	assert(type(offsetZ) == "number", "Arg #10 (offsetZ) must be a number.")
	assert(type(fixedDirection) == "boolean", "Arg #11 (fixedDirection) must be a boolean.")

	local result = native_call(0x8DB3F12A02CAEF72, cam, vehicle, boneIndex, relativeRotation, rotX, rotY, rotZ, offsetX, offsetY, offsetZ, fixedDirection)
end
natives.cam.attach_cam_to_vehicle_bone = natives.CAM.ATTACH_CAM_TO_VEHICLE_BONE

function natives.CAM.DETACH_CAM(--[[Cam]] cam) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.DETACH_CAM' due to disabled trusted mode")

	assert(type(cam) == "number", "Arg #1 (cam) must be a number.")

	local result = native_call(0xA2FABBE87F4BAD82, cam)
end
natives.cam.detach_cam = natives.CAM.DETACH_CAM

--[[
The native seems to only be called once.

The native is used as so,
CAM::SET_CAM_INHERIT_ROLL_VEHICLE(l_544, getElem(2, &l_525, 4));
In the exile1 script.
]]
function natives.CAM.SET_CAM_INHERIT_ROLL_VEHICLE(--[[Cam]] cam, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_CAM_INHERIT_ROLL_VEHICLE' due to disabled trusted mode")

	assert(type(cam) == "number", "Arg #1 (cam) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0x45F1DE9C34B93AE6, cam, p1)
end
natives.cam.set_cam_inherit_roll_vehicle = natives.CAM.SET_CAM_INHERIT_ROLL_VEHICLE

function natives.CAM.POINT_CAM_AT_COORD(--[[Cam]] cam, --[[float]] x, --[[float]] y, --[[float]] z) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.POINT_CAM_AT_COORD' due to disabled trusted mode")

	assert(type(cam) == "number", "Arg #1 (cam) must be a number.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")

	local result = native_call(0xF75497BB865F0803, cam, x, y, z)
end
natives.cam.point_cam_at_coord = natives.CAM.POINT_CAM_AT_COORD

--[[
p5 always seems to be 1 i.e TRUE
]]
function natives.CAM.POINT_CAM_AT_ENTITY(--[[Cam]] cam, --[[Entity]] entity, --[[float]] p2, --[[float]] p3, --[[float]] p4, --[[BOOL]] p5) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.POINT_CAM_AT_ENTITY' due to disabled trusted mode")

	assert(type(cam) == "number", "Arg #1 (cam) must be a number.")
	assert(type(entity) == "number", "Arg #2 (entity) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "boolean", "Arg #6 (p5) must be a boolean.")

	local result = native_call(0x5640BFF86B16E8DC, cam, entity, p2, p3, p4, p5)
end
natives.cam.point_cam_at_entity = natives.CAM.POINT_CAM_AT_ENTITY

--[[
Parameters p0-p5 seems correct. The bool p6 is unknown, but through every X360 script it's always 1. Please correct p0-p5 if any prove to be wrong. 
]]
function natives.CAM.POINT_CAM_AT_PED_BONE(--[[Cam]] cam, --[[Ped]] ped, --[[int]] boneIndex, --[[float]] x, --[[float]] y, --[[float]] z, --[[BOOL]] p6) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.POINT_CAM_AT_PED_BONE' due to disabled trusted mode")

	assert(type(cam) == "number", "Arg #1 (cam) must be a number.")
	assert(type(ped) == "number", "Arg #2 (ped) must be a number.")
	assert(type(boneIndex) == "number", "Arg #3 (boneIndex) must be a number.")
	assert(type(x) == "number", "Arg #4 (x) must be a number.")
	assert(type(y) == "number", "Arg #5 (y) must be a number.")
	assert(type(z) == "number", "Arg #6 (z) must be a number.")
	assert(type(p6) == "boolean", "Arg #7 (p6) must be a boolean.")

	local result = native_call(0x68B2B5F33BA63C41, cam, ped, boneIndex, x, y, z, p6)
end
natives.cam.point_cam_at_ped_bone = natives.CAM.POINT_CAM_AT_PED_BONE

function natives.CAM.STOP_CAM_POINTING(--[[Cam]] cam) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.STOP_CAM_POINTING' due to disabled trusted mode")

	assert(type(cam) == "number", "Arg #1 (cam) must be a number.")

	local result = native_call(0xF33AB75780BA57DE, cam)
end
natives.cam.stop_cam_pointing = natives.CAM.STOP_CAM_POINTING

--[[
Allows you to aim and shoot at the direction the camera is facing.
]]
function natives.CAM.SET_CAM_AFFECTS_AIMING(--[[Cam]] cam, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_CAM_AFFECTS_AIMING' due to disabled trusted mode")

	assert(type(cam) == "number", "Arg #1 (cam) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x8C1DC7770C51DC8D, cam, toggle)
end
natives.cam.set_cam_affects_aiming = natives.CAM.SET_CAM_AFFECTS_AIMING

--[[
Rotates the radar to match the camera's Z rotation
]]
function natives.CAM.SET_CAM_CONTROLS_MINI_MAP_HEADING(--[[Cam]] cam, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_CAM_CONTROLS_MINI_MAP_HEADING' due to disabled trusted mode")

	assert(type(cam) == "number", "Arg #1 (cam) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x661B5C8654ADD825, cam, toggle)
end
natives.cam.set_cam_controls_mini_map_heading = natives.CAM.SET_CAM_CONTROLS_MINI_MAP_HEADING

--[[
When set to true shadows appear more smooth but less detailed.
Set to false by default.
]]
function natives.CAM.SET_CAM_IS_INSIDE_VEHICLE(--[[Cam]] cam, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_CAM_IS_INSIDE_VEHICLE' due to disabled trusted mode")

	assert(type(cam) == "number", "Arg #1 (cam) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xA2767257A320FC82, cam, toggle)
end
natives.cam.set_cam_is_inside_vehicle = natives.CAM.SET_CAM_IS_INSIDE_VEHICLE

function natives.CAM.ALLOW_MOTION_BLUR_DECAY(--[[Any]] p0, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.ALLOW_MOTION_BLUR_DECAY' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0x271017B9BA825366, p0, p1)
end
natives.cam.allow_motion_blur_decay = natives.CAM.ALLOW_MOTION_BLUR_DECAY

--[[
NOTE: Debugging functions are not present in the retail version of the game.
]]
function natives.CAM.SET_CAM_DEBUG_NAME(--[[Cam]] camera, --[[const char*]] name) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_CAM_DEBUG_NAME' due to disabled trusted mode")

	assert(type(camera) == "number", "Arg #1 (camera) must be a number.")
	assert(type(name) == "string", "Arg #2 (name) must be a string.")

	local result = native_call(0x1B93E0107865DD40, camera, name)
end
natives.cam.set_cam_debug_name = natives.CAM.SET_CAM_DEBUG_NAME

function natives.CAM.GET_DEBUG_CAM() -- Returns Cam
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.GET_DEBUG_CAM' due to disabled trusted mode")

	local result = native_call(0x77C3CEC46BE286F6)
	return result:__tointeger()
end
natives.cam.get_debug_cam = natives.CAM.GET_DEBUG_CAM

--[[
I filled p1-p6 (the floats) as they are as other natives with 6 floats in a row are similar and I see no other method. So if a test from anyone proves them wrong please correct.

p7 (length) determines the length of the spline, affects camera path and duration of transition between previous node and this one

p8 big values ~100 will slow down the camera movement before reaching this node

p9 != 0 seems to override the rotation/pitch (bool?)
]]
function natives.CAM.ADD_CAM_SPLINE_NODE(--[[Cam]] camera, --[[float]] x, --[[float]] y, --[[float]] z, --[[float]] xRot, --[[float]] yRot, --[[float]] zRot, --[[int]] length, --[[int]] smoothingStyle, --[[int]] rotationOrder) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.ADD_CAM_SPLINE_NODE' due to disabled trusted mode")

	assert(type(camera) == "number", "Arg #1 (camera) must be a number.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")
	assert(type(xRot) == "number", "Arg #5 (xRot) must be a number.")
	assert(type(yRot) == "number", "Arg #6 (yRot) must be a number.")
	assert(type(zRot) == "number", "Arg #7 (zRot) must be a number.")
	assert(type(length) == "number", "Arg #8 (length) must be a number.")
	assert(type(smoothingStyle) == "number", "Arg #9 (smoothingStyle) must be a number.")
	assert(type(rotationOrder) == "number", "Arg #10 (rotationOrder) must be a number.")

	local result = native_call(0x8609C75EC438FB3B, camera, x, y, z, xRot, yRot, zRot, length, smoothingStyle, rotationOrder)
end
natives.cam.add_cam_spline_node = natives.CAM.ADD_CAM_SPLINE_NODE

--[[
p0 is the spline camera to which the node is being added.
p1 is the camera used to create the node.
p3 is always 3 in scripts. It might be smoothing style or rotation order.
]]
function natives.CAM.ADD_CAM_SPLINE_NODE_USING_CAMERA_FRAME(--[[Cam]] cam, --[[Cam]] cam2, --[[int]] length, --[[int]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.ADD_CAM_SPLINE_NODE_USING_CAMERA_FRAME' due to disabled trusted mode")

	assert(type(cam) == "number", "Arg #1 (cam) must be a number.")
	assert(type(cam2) == "number", "Arg #2 (cam2) must be a number.")
	assert(type(length) == "number", "Arg #3 (length) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x0A9F2A468B328E74, cam, cam2, length, p3)
end
natives.cam.add_cam_spline_node_using_camera_frame = natives.CAM.ADD_CAM_SPLINE_NODE_USING_CAMERA_FRAME

--[[
p0 is the spline camera to which the node is being added.
p1 is the camera used to create the node.
p3 is always 3 in scripts. It might be smoothing style or rotation order.
]]
function natives.CAM.ADD_CAM_SPLINE_NODE_USING_CAMERA(--[[Cam]] cam, --[[Cam]] cam2, --[[int]] length, --[[int]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.ADD_CAM_SPLINE_NODE_USING_CAMERA' due to disabled trusted mode")

	assert(type(cam) == "number", "Arg #1 (cam) must be a number.")
	assert(type(cam2) == "number", "Arg #2 (cam2) must be a number.")
	assert(type(length) == "number", "Arg #3 (length) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x0FB82563989CF4FB, cam, cam2, length, p3)
end
natives.cam.add_cam_spline_node_using_camera = natives.CAM.ADD_CAM_SPLINE_NODE_USING_CAMERA

--[[
p2 is always 2 in scripts. It might be smoothing style or rotation order.
]]
function natives.CAM.ADD_CAM_SPLINE_NODE_USING_GAMEPLAY_FRAME(--[[Cam]] cam, --[[int]] length, --[[int]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.ADD_CAM_SPLINE_NODE_USING_GAMEPLAY_FRAME' due to disabled trusted mode")

	assert(type(cam) == "number", "Arg #1 (cam) must be a number.")
	assert(type(length) == "number", "Arg #2 (length) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0x609278246A29CA34, cam, length, p2)
end
natives.cam.add_cam_spline_node_using_gameplay_frame = natives.CAM.ADD_CAM_SPLINE_NODE_USING_GAMEPLAY_FRAME

function natives.CAM.SET_CAM_SPLINE_PHASE(--[[Cam]] cam, --[[float]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_CAM_SPLINE_PHASE' due to disabled trusted mode")

	assert(type(cam) == "number", "Arg #1 (cam) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x242B5874F0A4E052, cam, p1)
end
natives.cam.set_cam_spline_phase = natives.CAM.SET_CAM_SPLINE_PHASE

--[[
Can use this with SET_CAM_SPLINE_PHASE to set the float it this native returns.

(returns 1.0f when no nodes has been added, reached end of non existing spline)
]]
function natives.CAM.GET_CAM_SPLINE_PHASE(--[[Cam]] cam) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.GET_CAM_SPLINE_PHASE' due to disabled trusted mode")

	assert(type(cam) == "number", "Arg #1 (cam) must be a number.")

	local result = native_call(0xB5349E36C546509A, cam)
	return result:__tonumber()
end
natives.cam.get_cam_spline_phase = natives.CAM.GET_CAM_SPLINE_PHASE

--[[
I'm pretty sure the parameter is the camera as usual, but I am not certain so I'm going to leave it as is.
]]
function natives.CAM.GET_CAM_SPLINE_NODE_PHASE(--[[Cam]] cam) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.GET_CAM_SPLINE_NODE_PHASE' due to disabled trusted mode")

	assert(type(cam) == "number", "Arg #1 (cam) must be a number.")

	local result = native_call(0xD9D0E694C8282C96, cam)
	return result:__tonumber()
end
natives.cam.get_cam_spline_node_phase = natives.CAM.GET_CAM_SPLINE_NODE_PHASE

--[[
I named p1 as timeDuration as it is obvious. I'm assuming tho it is ran in ms(Milliseconds) as usual.
]]
function natives.CAM.SET_CAM_SPLINE_DURATION(--[[Cam]] cam, --[[int]] timeDuration) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_CAM_SPLINE_DURATION' due to disabled trusted mode")

	assert(type(cam) == "number", "Arg #1 (cam) must be a number.")
	assert(type(timeDuration) == "number", "Arg #2 (timeDuration) must be a number.")

	local result = native_call(0x1381539FEE034CDA, cam, timeDuration)
end
natives.cam.set_cam_spline_duration = natives.CAM.SET_CAM_SPLINE_DURATION

function natives.CAM.SET_CAM_SPLINE_SMOOTHING_STYLE(--[[Cam]] cam, --[[int]] smoothingStyle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_CAM_SPLINE_SMOOTHING_STYLE' due to disabled trusted mode")

	assert(type(cam) == "number", "Arg #1 (cam) must be a number.")
	assert(type(smoothingStyle) == "number", "Arg #2 (smoothingStyle) must be a number.")

	local result = native_call(0xD1B0F412F109EA5D, cam, smoothingStyle)
end
natives.cam.set_cam_spline_smoothing_style = natives.CAM.SET_CAM_SPLINE_SMOOTHING_STYLE

function natives.CAM.GET_CAM_SPLINE_NODE_INDEX(--[[Cam]] cam) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.GET_CAM_SPLINE_NODE_INDEX' due to disabled trusted mode")

	assert(type(cam) == "number", "Arg #1 (cam) must be a number.")

	local result = native_call(0xB22B17DF858716A6, cam)
	return result:__tointeger()
end
natives.cam.get_cam_spline_node_index = natives.CAM.GET_CAM_SPLINE_NODE_INDEX

function natives.CAM.SET_CAM_SPLINE_NODE_EASE(--[[Cam]] cam, --[[int]] easingFunction, --[[int]] p2, --[[float]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_CAM_SPLINE_NODE_EASE' due to disabled trusted mode")

	assert(type(cam) == "number", "Arg #1 (cam) must be a number.")
	assert(type(easingFunction) == "number", "Arg #2 (easingFunction) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x83B8201ED82A9A2D, cam, easingFunction, p2, p3)
end
natives.cam.set_cam_spline_node_ease = natives.CAM.SET_CAM_SPLINE_NODE_EASE

function natives.CAM.SET_CAM_SPLINE_NODE_VELOCITY_SCALE(--[[Cam]] cam, --[[int]] p1, --[[float]] scale) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_CAM_SPLINE_NODE_VELOCITY_SCALE' due to disabled trusted mode")

	assert(type(cam) == "number", "Arg #1 (cam) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(scale) == "number", "Arg #3 (scale) must be a number.")

	local result = native_call(0xA6385DEB180F319F, cam, p1, scale)
end
natives.cam.set_cam_spline_node_velocity_scale = natives.CAM.SET_CAM_SPLINE_NODE_VELOCITY_SCALE

function natives.CAM.OVERRIDE_CAM_SPLINE_VELOCITY(--[[Cam]] cam, --[[int]] p1, --[[float]] p2, --[[float]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.OVERRIDE_CAM_SPLINE_VELOCITY' due to disabled trusted mode")

	assert(type(cam) == "number", "Arg #1 (cam) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x40B62FA033EB0346, cam, p1, p2, p3)
end
natives.cam.override_cam_spline_velocity = natives.CAM.OVERRIDE_CAM_SPLINE_VELOCITY

--[[
Max value for p1 is 15.
]]
function natives.CAM.OVERRIDE_CAM_SPLINE_MOTION_BLUR(--[[Cam]] cam, --[[int]] p1, --[[float]] p2, --[[float]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.OVERRIDE_CAM_SPLINE_MOTION_BLUR' due to disabled trusted mode")

	assert(type(cam) == "number", "Arg #1 (cam) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x7DCF7C708D292D55, cam, p1, p2, p3)
end
natives.cam.override_cam_spline_motion_blur = natives.CAM.OVERRIDE_CAM_SPLINE_MOTION_BLUR

function natives.CAM.SET_CAM_SPLINE_NODE_EXTRA_FLAGS(--[[Cam]] cam, --[[int]] p1, --[[int]] flags) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_CAM_SPLINE_NODE_EXTRA_FLAGS' due to disabled trusted mode")

	assert(type(cam) == "number", "Arg #1 (cam) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(flags) == "number", "Arg #3 (flags) must be a number.")

	local result = native_call(0x7BF1A54AE67AC070, cam, p1, flags)
end
natives.cam.set_cam_spline_node_extra_flags = natives.CAM.SET_CAM_SPLINE_NODE_EXTRA_FLAGS

function natives.CAM.IS_CAM_SPLINE_PAUSED(--[[Cam]] cam) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.IS_CAM_SPLINE_PAUSED' due to disabled trusted mode")

	assert(type(cam) == "number", "Arg #1 (cam) must be a number.")

	local result = native_call(0x0290F35C0AD97864, cam)
	return result:__tointeger() ~= 0
end
natives.cam.is_cam_spline_paused = natives.CAM.IS_CAM_SPLINE_PAUSED

--[[
Previous declaration void SET_CAM_ACTIVE_WITH_INTERP(Cam camTo, Cam camFrom, int duration, BOOL easeLocation, BOOL easeRotation) is completely wrong. The last two params are integers not BOOLs...

]]
function natives.CAM.SET_CAM_ACTIVE_WITH_INTERP(--[[Cam]] camTo, --[[Cam]] camFrom, --[[int]] duration, --[[int]] easeLocation, --[[int]] easeRotation) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_CAM_ACTIVE_WITH_INTERP' due to disabled trusted mode")

	assert(type(camTo) == "number", "Arg #1 (camTo) must be a number.")
	assert(type(camFrom) == "number", "Arg #2 (camFrom) must be a number.")
	assert(type(duration) == "number", "Arg #3 (duration) must be a number.")
	assert(type(easeLocation) == "number", "Arg #4 (easeLocation) must be a number.")
	assert(type(easeRotation) == "number", "Arg #5 (easeRotation) must be a number.")

	local result = native_call(0x9FBDA379383A52A4, camTo, camFrom, duration, easeLocation, easeRotation)
end
natives.cam.set_cam_active_with_interp = natives.CAM.SET_CAM_ACTIVE_WITH_INTERP

function natives.CAM.IS_CAM_INTERPOLATING(--[[Cam]] cam) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.IS_CAM_INTERPOLATING' due to disabled trusted mode")

	assert(type(cam) == "number", "Arg #1 (cam) must be a number.")

	local result = native_call(0x036F97C908C2B52C, cam)
	return result:__tointeger() ~= 0
end
natives.cam.is_cam_interpolating = natives.CAM.IS_CAM_INTERPOLATING

--[[
Possible shake types (updated b617d):

DEATH_FAIL_IN_EFFECT_SHAKE
DRUNK_SHAKE
FAMILY5_DRUG_TRIP_SHAKE
HAND_SHAKE
JOLT_SHAKE
LARGE_EXPLOSION_SHAKE
MEDIUM_EXPLOSION_SHAKE
SMALL_EXPLOSION_SHAKE
ROAD_VIBRATION_SHAKE
SKY_DIVING_SHAKE
VIBRATE_SHAKE

Full list of cam shake types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/camShakeTypesCompact.json
]]
function natives.CAM.SHAKE_CAM(--[[Cam]] cam, --[[const char*]] type, --[[float]] amplitude) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SHAKE_CAM' due to disabled trusted mode")

	assert(type(cam) == "number", "Arg #1 (cam) must be a number.")
	assert(type(type) == "string", "Arg #2 (type) must be a string.")
	assert(type(amplitude) == "number", "Arg #3 (amplitude) must be a number.")

	local result = native_call(0x6A25241C340D3822, cam, type, amplitude)
end
natives.cam.shake_cam = natives.CAM.SHAKE_CAM

--[[
Example from michael2 script.

CAM::ANIMATED_SHAKE_CAM(l_5069, "shake_cam_all@", "light", "", 1f);
]]
function natives.CAM.ANIMATED_SHAKE_CAM(--[[Cam]] cam, --[[const char*]] p1, --[[const char*]] p2, --[[const char*]] p3, --[[float]] amplitude) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.ANIMATED_SHAKE_CAM' due to disabled trusted mode")

	assert(type(cam) == "number", "Arg #1 (cam) must be a number.")
	assert(type(p1) == "string", "Arg #2 (p1) must be a string.")
	assert(type(p2) == "string", "Arg #3 (p2) must be a string.")
	assert(type(p3) == "string", "Arg #4 (p3) must be a string.")
	assert(type(amplitude) == "number", "Arg #5 (amplitude) must be a number.")

	local result = native_call(0xA2746EEAE3E577CD, cam, p1, p2, p3, amplitude)
end
natives.cam.animated_shake_cam = natives.CAM.ANIMATED_SHAKE_CAM

function natives.CAM.IS_CAM_SHAKING(--[[Cam]] cam) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.IS_CAM_SHAKING' due to disabled trusted mode")

	assert(type(cam) == "number", "Arg #1 (cam) must be a number.")

	local result = native_call(0x6B24BFE83A2BE47B, cam)
	return result:__tointeger() ~= 0
end
natives.cam.is_cam_shaking = natives.CAM.IS_CAM_SHAKING

function natives.CAM.SET_CAM_SHAKE_AMPLITUDE(--[[Cam]] cam, --[[float]] amplitude) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_CAM_SHAKE_AMPLITUDE' due to disabled trusted mode")

	assert(type(cam) == "number", "Arg #1 (cam) must be a number.")
	assert(type(amplitude) == "number", "Arg #2 (amplitude) must be a number.")

	local result = native_call(0xD93DB43B82BC0D00, cam, amplitude)
end
natives.cam.set_cam_shake_amplitude = natives.CAM.SET_CAM_SHAKE_AMPLITUDE

function natives.CAM.STOP_CAM_SHAKING(--[[Cam]] cam, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.STOP_CAM_SHAKING' due to disabled trusted mode")

	assert(type(cam) == "number", "Arg #1 (cam) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0xBDECF64367884AC3, cam, p1)
end
natives.cam.stop_cam_shaking = natives.CAM.STOP_CAM_SHAKING

--[[
CAM::SHAKE_SCRIPT_GLOBAL("HAND_SHAKE", 0.2);

Full list of cam shake types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/camShakeTypesCompact.json
]]
function natives.CAM.SHAKE_SCRIPT_GLOBAL(--[[const char*]] p0, --[[float]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SHAKE_SCRIPT_GLOBAL' due to disabled trusted mode")

	assert(type(p0) == "string", "Arg #1 (p0) must be a string.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xF4C8CF9E353AFECA, p0, p1)
end
natives.cam.shake_script_global = natives.CAM.SHAKE_SCRIPT_GLOBAL

--[[
CAM::ANIMATED_SHAKE_SCRIPT_GLOBAL("SHAKE_CAM_medium", "medium", "", 0.5f);

Full list of cam shake types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/camShakeTypesCompact.json
]]
function natives.CAM.ANIMATED_SHAKE_SCRIPT_GLOBAL(--[[const char*]] p0, --[[const char*]] p1, --[[const char*]] p2, --[[float]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.ANIMATED_SHAKE_SCRIPT_GLOBAL' due to disabled trusted mode")

	assert(type(p0) == "string", "Arg #1 (p0) must be a string.")
	assert(type(p1) == "string", "Arg #2 (p1) must be a string.")
	assert(type(p2) == "string", "Arg #3 (p2) must be a string.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0xC2EAE3FB8CDBED31, p0, p1, p2, p3)
end
natives.cam.animated_shake_script_global = natives.CAM.ANIMATED_SHAKE_SCRIPT_GLOBAL

--[[
In drunk_controller.c4, sub_309
if (CAM::IS_SCRIPT_GLOBAL_SHAKING()) {
    CAM::STOP_SCRIPT_GLOBAL_SHAKING(0);
}
]]
function natives.CAM.IS_SCRIPT_GLOBAL_SHAKING() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.IS_SCRIPT_GLOBAL_SHAKING' due to disabled trusted mode")

	local result = native_call(0xC912AF078AF19212)
	return result:__tointeger() ~= 0
end
natives.cam.is_script_global_shaking = natives.CAM.IS_SCRIPT_GLOBAL_SHAKING

--[[
In drunk_controller.c4, sub_309
if (CAM::IS_SCRIPT_GLOBAL_SHAKING()) {
    CAM::STOP_SCRIPT_GLOBAL_SHAKING(0);
}
]]
function natives.CAM.STOP_SCRIPT_GLOBAL_SHAKING(--[[BOOL]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.STOP_SCRIPT_GLOBAL_SHAKING' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0x1C9D7949FA533490, p0)
end
natives.cam.stop_script_global_shaking = natives.CAM.STOP_SCRIPT_GLOBAL_SHAKING

--[[
p1: 0..16
]]
function natives.CAM.TRIGGER_VEHICLE_PART_BROKEN_CAMERA_SHAKE(--[[Vehicle]] vehicle, --[[int]] p1, --[[float]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.TRIGGER_VEHICLE_PART_BROKEN_CAMERA_SHAKE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0x5D96CFB59DA076A0, vehicle, p1, p2)
end
natives.cam.trigger_vehicle_part_broken_camera_shake = natives.CAM.TRIGGER_VEHICLE_PART_BROKEN_CAMERA_SHAKE

--[[
Atleast one time in a script for the zRot Rockstar uses GET_ENTITY_HEADING to help fill the parameter.

p9 is unknown at this time.
p10 throughout all the X360 Scripts is always 2.

Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
]]
function natives.CAM.PLAY_CAM_ANIM(--[[Cam]] cam, --[[const char*]] animName, --[[const char*]] animDictionary, --[[float]] x, --[[float]] y, --[[float]] z, --[[float]] xRot, --[[float]] yRot, --[[float]] zRot, --[[BOOL]] p9, --[[int]] p10) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.PLAY_CAM_ANIM' due to disabled trusted mode")

	assert(type(cam) == "number", "Arg #1 (cam) must be a number.")
	assert(type(animName) == "string", "Arg #2 (animName) must be a string.")
	assert(type(animDictionary) == "string", "Arg #3 (animDictionary) must be a string.")
	assert(type(x) == "number", "Arg #4 (x) must be a number.")
	assert(type(y) == "number", "Arg #5 (y) must be a number.")
	assert(type(z) == "number", "Arg #6 (z) must be a number.")
	assert(type(xRot) == "number", "Arg #7 (xRot) must be a number.")
	assert(type(yRot) == "number", "Arg #8 (yRot) must be a number.")
	assert(type(zRot) == "number", "Arg #9 (zRot) must be a number.")
	assert(type(p9) == "boolean", "Arg #10 (p9) must be a boolean.")
	assert(type(p10) == "number", "Arg #11 (p10) must be a number.")

	local result = native_call(0x9A2D0FB2E7852392, cam, animName, animDictionary, x, y, z, xRot, yRot, zRot, p9, p10)
	return result:__tointeger() ~= 0
end
natives.cam.play_cam_anim = natives.CAM.PLAY_CAM_ANIM

function natives.CAM.IS_CAM_PLAYING_ANIM(--[[Cam]] cam, --[[const char*]] animName, --[[const char*]] animDictionary) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.IS_CAM_PLAYING_ANIM' due to disabled trusted mode")

	assert(type(cam) == "number", "Arg #1 (cam) must be a number.")
	assert(type(animName) == "string", "Arg #2 (animName) must be a string.")
	assert(type(animDictionary) == "string", "Arg #3 (animDictionary) must be a string.")

	local result = native_call(0xC90621D8A0CEECF2, cam, animName, animDictionary)
	return result:__tointeger() ~= 0
end
natives.cam.is_cam_playing_anim = natives.CAM.IS_CAM_PLAYING_ANIM

function natives.CAM.SET_CAM_ANIM_CURRENT_PHASE(--[[Cam]] cam, --[[float]] phase) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_CAM_ANIM_CURRENT_PHASE' due to disabled trusted mode")

	assert(type(cam) == "number", "Arg #1 (cam) must be a number.")
	assert(type(phase) == "number", "Arg #2 (phase) must be a number.")

	local result = native_call(0x4145A4C44FF3B5A6, cam, phase)
end
natives.cam.set_cam_anim_current_phase = natives.CAM.SET_CAM_ANIM_CURRENT_PHASE

function natives.CAM.GET_CAM_ANIM_CURRENT_PHASE(--[[Cam]] cam) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.GET_CAM_ANIM_CURRENT_PHASE' due to disabled trusted mode")

	assert(type(cam) == "number", "Arg #1 (cam) must be a number.")

	local result = native_call(0xA10B2DB49E92A6B0, cam)
	return result:__tonumber()
end
natives.cam.get_cam_anim_current_phase = natives.CAM.GET_CAM_ANIM_CURRENT_PHASE

--[[
Examples:

CAM::PLAY_SYNCHRONIZED_CAM_ANIM(l_2734, NETWORK::_02C40BF885C567B6(l_2739), "PLAYER_EXIT_L_CAM", "mp_doorbell");

CAM::PLAY_SYNCHRONIZED_CAM_ANIM(l_F0D[7/*1*/], l_F4D[15/*1*/], "ah3b_attackheli_cam2", "missheistfbi3b_helicrash");
]]
function natives.CAM.PLAY_SYNCHRONIZED_CAM_ANIM(--[[Any]] p0, --[[Any]] p1, --[[const char*]] animName, --[[const char*]] animDictionary) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.PLAY_SYNCHRONIZED_CAM_ANIM' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(animName) == "string", "Arg #3 (animName) must be a string.")
	assert(type(animDictionary) == "string", "Arg #4 (animDictionary) must be a string.")

	local result = native_call(0xE32EFE9AB4A9AA0C, p0, p1, animName, animDictionary)
	return result:__tointeger() ~= 0
end
natives.cam.play_synchronized_cam_anim = natives.CAM.PLAY_SYNCHRONIZED_CAM_ANIM

function natives.CAM.SET_FLY_CAM_HORIZONTAL_RESPONSE(--[[Cam]] cam, --[[float]] p1, --[[float]] p2, --[[float]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_FLY_CAM_HORIZONTAL_RESPONSE' due to disabled trusted mode")

	assert(type(cam) == "number", "Arg #1 (cam) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x503F5920162365B2, cam, p1, p2, p3)
end
natives.cam.set_fly_cam_horizontal_response = natives.CAM.SET_FLY_CAM_HORIZONTAL_RESPONSE

function natives.CAM.SET_FLY_CAM_VERTICAL_RESPONSE(--[[Cam]] cam, --[[float]] p1, --[[float]] p2, --[[float]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_FLY_CAM_VERTICAL_RESPONSE' due to disabled trusted mode")

	assert(type(cam) == "number", "Arg #1 (cam) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0xE827B9382CFB41BA, cam, p1, p2, p3)
end
natives.cam.set_fly_cam_vertical_response = natives.CAM.SET_FLY_CAM_VERTICAL_RESPONSE

function natives.CAM.SET_FLY_CAM_MAX_HEIGHT(--[[Cam]] cam, --[[float]] height) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_FLY_CAM_MAX_HEIGHT' due to disabled trusted mode")

	assert(type(cam) == "number", "Arg #1 (cam) must be a number.")
	assert(type(height) == "number", "Arg #2 (height) must be a number.")

	local result = native_call(0xF9D02130ECDD1D77, cam, height)
end
natives.cam.set_fly_cam_max_height = natives.CAM.SET_FLY_CAM_MAX_HEIGHT

function natives.CAM.SET_FLY_CAM_COORD_AND_CONSTRAIN(--[[Cam]] cam, --[[float]] x, --[[float]] y, --[[float]] z) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_FLY_CAM_COORD_AND_CONSTRAIN' due to disabled trusted mode")

	assert(type(cam) == "number", "Arg #1 (cam) must be a number.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")

	local result = native_call(0xC91C6C55199308CA, cam, x, y, z)
end
natives.cam.set_fly_cam_coord_and_constrain = natives.CAM.SET_FLY_CAM_COORD_AND_CONSTRAIN

function natives.CAM.SET_FLY_CAM_VERTICAL_CONTROLS_THIS_UPDATE(--[[Cam]] cam) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_FLY_CAM_VERTICAL_CONTROLS_THIS_UPDATE' due to disabled trusted mode")

	assert(type(cam) == "number", "Arg #1 (cam) must be a number.")

	local result = native_call(0xC8B5C4A79CC18B94, cam)
end
natives.cam.set_fly_cam_vertical_controls_this_update = natives.CAM.SET_FLY_CAM_VERTICAL_CONTROLS_THIS_UPDATE

function natives.CAM.WAS_FLY_CAM_CONSTRAINED_ON_PREVIOUS_UDPATE(--[[Cam]] cam) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.WAS_FLY_CAM_CONSTRAINED_ON_PREVIOUS_UDPATE' due to disabled trusted mode")

	assert(type(cam) == "number", "Arg #1 (cam) must be a number.")

	local result = native_call(0x5C48A1D6E3B33179, cam)
	return result:__tointeger() ~= 0
end
natives.cam.was_fly_cam_constrained_on_previous_udpate = natives.CAM.WAS_FLY_CAM_CONSTRAINED_ON_PREVIOUS_UDPATE

function natives.CAM.IS_SCREEN_FADED_OUT() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.IS_SCREEN_FADED_OUT' due to disabled trusted mode")

	local result = native_call(0xB16FCE9DDC7BA182)
	return result:__tointeger() ~= 0
end
natives.cam.is_screen_faded_out = natives.CAM.IS_SCREEN_FADED_OUT

function natives.CAM.IS_SCREEN_FADED_IN() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.IS_SCREEN_FADED_IN' due to disabled trusted mode")

	local result = native_call(0x5A859503B0C08678)
	return result:__tointeger() ~= 0
end
natives.cam.is_screen_faded_in = natives.CAM.IS_SCREEN_FADED_IN

function natives.CAM.IS_SCREEN_FADING_OUT() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.IS_SCREEN_FADING_OUT' due to disabled trusted mode")

	local result = native_call(0x797AC7CB535BA28F)
	return result:__tointeger() ~= 0
end
natives.cam.is_screen_fading_out = natives.CAM.IS_SCREEN_FADING_OUT

function natives.CAM.IS_SCREEN_FADING_IN() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.IS_SCREEN_FADING_IN' due to disabled trusted mode")

	local result = native_call(0x5C544BC6C57AC575)
	return result:__tointeger() ~= 0
end
natives.cam.is_screen_fading_in = natives.CAM.IS_SCREEN_FADING_IN

--[[
Fades the screen in.

duration: The time the fade should take, in milliseconds.
]]
function natives.CAM.DO_SCREEN_FADE_IN(--[[int]] duration) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.DO_SCREEN_FADE_IN' due to disabled trusted mode")

	assert(type(duration) == "number", "Arg #1 (duration) must be a number.")

	local result = native_call(0xD4E8E24955024033, duration)
end
natives.cam.do_screen_fade_in = natives.CAM.DO_SCREEN_FADE_IN

--[[
Fades the screen out.

duration: The time the fade should take, in milliseconds.
]]
function natives.CAM.DO_SCREEN_FADE_OUT(--[[int]] duration) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.DO_SCREEN_FADE_OUT' due to disabled trusted mode")

	assert(type(duration) == "number", "Arg #1 (duration) must be a number.")

	local result = native_call(0x891B5B39AC6302AF, duration)
end
natives.cam.do_screen_fade_out = natives.CAM.DO_SCREEN_FADE_OUT

function natives.CAM.SET_WIDESCREEN_BORDERS(--[[BOOL]] p0, --[[int]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_WIDESCREEN_BORDERS' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xDCD4EA924F42D01A, p0, p1)
end
natives.cam.set_widescreen_borders = natives.CAM.SET_WIDESCREEN_BORDERS

function natives.CAM.ARE_WIDESCREEN_BORDERS_ACTIVE() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.ARE_WIDESCREEN_BORDERS_ACTIVE' due to disabled trusted mode")

	local result = native_call(0x4879E4FE39074CDF)
	return result:__tointeger() ~= 0
end
natives.cam.are_widescreen_borders_active = natives.CAM.ARE_WIDESCREEN_BORDERS_ACTIVE

function natives.CAM.GET_GAMEPLAY_CAM_COORD() -- Returns Vector3
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.GET_GAMEPLAY_CAM_COORD' due to disabled trusted mode")

	local result = native_call(0x14D6F5678D8F1B37)
	return result:__tov3()
end
natives.cam.get_gameplay_cam_coord = natives.CAM.GET_GAMEPLAY_CAM_COORD

--[[
p0 dosen't seem to change much, I tried it with 0, 1, 2:
0-Pitch(X): -70.000092
0-Roll(Y): -0.000001
0-Yaw(Z): -43.886459
1-Pitch(X): -70.000092
1-Roll(Y): -0.000001
1-Yaw(Z): -43.886463
2-Pitch(X): -70.000092
2-Roll(Y): -0.000002
2-Yaw(Z): -43.886467
]]
function natives.CAM.GET_GAMEPLAY_CAM_ROT(--[[int]] rotationOrder) -- Returns Vector3
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.GET_GAMEPLAY_CAM_ROT' due to disabled trusted mode")

	assert(type(rotationOrder) == "number", "Arg #1 (rotationOrder) must be a number.")

	local result = native_call(0x837765A25378F0BB, rotationOrder)
	return result:__tov3()
end
natives.cam.get_gameplay_cam_rot = natives.CAM.GET_GAMEPLAY_CAM_ROT

function natives.CAM.GET_GAMEPLAY_CAM_FOV() -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.GET_GAMEPLAY_CAM_FOV' due to disabled trusted mode")

	local result = native_call(0x65019750A0324133)
	return result:__tonumber()
end
natives.cam.get_gameplay_cam_fov = natives.CAM.GET_GAMEPLAY_CAM_FOV

--[[
some camera effect that is used in the drunk-cheat, and turned off (by setting it to 0.0) along with the shaking effects once the drunk cheat is disabled.
]]
function natives.CAM.SET_GAMEPLAY_CAM_MOTION_BLUR_SCALING_THIS_UPDATE(--[[float]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_GAMEPLAY_CAM_MOTION_BLUR_SCALING_THIS_UPDATE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x487A82C650EB7799, p0)
end
natives.cam.set_gameplay_cam_motion_blur_scaling_this_update = natives.CAM.SET_GAMEPLAY_CAM_MOTION_BLUR_SCALING_THIS_UPDATE

--[[
some camera effect that is (also) used in the drunk-cheat, and turned off (by setting it to 0.0) along with the shaking effects once the drunk cheat is disabled. Possibly a cinematic or script-cam version of _0x487A82C650EB7799
]]
function natives.CAM.SET_GAMEPLAY_CAM_MAX_MOTION_BLUR_STRENGTH_THIS_UPDATE(--[[float]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_GAMEPLAY_CAM_MAX_MOTION_BLUR_STRENGTH_THIS_UPDATE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x0225778816FDC28C, p0)
end
natives.cam.set_gameplay_cam_max_motion_blur_strength_this_update = natives.CAM.SET_GAMEPLAY_CAM_MAX_MOTION_BLUR_STRENGTH_THIS_UPDATE

function natives.CAM.GET_GAMEPLAY_CAM_RELATIVE_HEADING() -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.GET_GAMEPLAY_CAM_RELATIVE_HEADING' due to disabled trusted mode")

	local result = native_call(0x743607648ADD4587)
	return result:__tonumber()
end
natives.cam.get_gameplay_cam_relative_heading = natives.CAM.GET_GAMEPLAY_CAM_RELATIVE_HEADING

--[[
Sets the camera position relative to heading in float from -360 to +360.

Heading is alwyas 0 in aiming camera.
]]
function natives.CAM.SET_GAMEPLAY_CAM_RELATIVE_HEADING(--[[float]] heading) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_GAMEPLAY_CAM_RELATIVE_HEADING' due to disabled trusted mode")

	assert(type(heading) == "number", "Arg #1 (heading) must be a number.")

	local result = native_call(0xB4EC2312F4E5B1F1, heading)
end
natives.cam.set_gameplay_cam_relative_heading = natives.CAM.SET_GAMEPLAY_CAM_RELATIVE_HEADING

function natives.CAM.GET_GAMEPLAY_CAM_RELATIVE_PITCH() -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.GET_GAMEPLAY_CAM_RELATIVE_PITCH' due to disabled trusted mode")

	local result = native_call(0x3A6867B4845BEDA2)
	return result:__tonumber()
end
natives.cam.get_gameplay_cam_relative_pitch = natives.CAM.GET_GAMEPLAY_CAM_RELATIVE_PITCH

--[[
This native sets the camera's pitch (rotation on the x-axis).
]]
function natives.CAM.SET_GAMEPLAY_CAM_RELATIVE_PITCH(--[[float]] angle, --[[float]] scalingFactor) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_GAMEPLAY_CAM_RELATIVE_PITCH' due to disabled trusted mode")

	assert(type(angle) == "number", "Arg #1 (angle) must be a number.")
	assert(type(scalingFactor) == "number", "Arg #2 (scalingFactor) must be a number.")

	local result = native_call(0x6D0858B8EDFD2B7D, angle, scalingFactor)
end
natives.cam.set_gameplay_cam_relative_pitch = natives.CAM.SET_GAMEPLAY_CAM_RELATIVE_PITCH

function natives.CAM.RESET_GAMEPLAY_CAM_FULL_ATTACH_PARENT_TRANSFORM_TIMER() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.RESET_GAMEPLAY_CAM_FULL_ATTACH_PARENT_TRANSFORM_TIMER' due to disabled trusted mode")

	local result = native_call(0x7295C203DD659DFE)
end
natives.cam.reset_gameplay_cam_full_attach_parent_transform_timer = natives.CAM.RESET_GAMEPLAY_CAM_FULL_ATTACH_PARENT_TRANSFORM_TIMER

function natives.CAM.FORCE_CAMERA_RELATIVE_HEADING_AND_PITCH(--[[float]] roll, --[[float]] pitch, --[[float]] yaw) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.FORCE_CAMERA_RELATIVE_HEADING_AND_PITCH' due to disabled trusted mode")

	assert(type(roll) == "number", "Arg #1 (roll) must be a number.")
	assert(type(pitch) == "number", "Arg #2 (pitch) must be a number.")
	assert(type(yaw) == "number", "Arg #3 (yaw) must be a number.")

	local result = native_call(0x48608C3464F58AB4, roll, pitch, yaw)
end
natives.cam.force_camera_relative_heading_and_pitch = natives.CAM.FORCE_CAMERA_RELATIVE_HEADING_AND_PITCH

function natives.CAM.FORCE_BONNET_CAMERA_RELATIVE_HEADING_AND_PITCH(--[[float]] p0, --[[float]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.FORCE_BONNET_CAMERA_RELATIVE_HEADING_AND_PITCH' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x28B022A17B068A3A, p0, p1)
end
natives.cam.force_bonnet_camera_relative_heading_and_pitch = natives.CAM.FORCE_BONNET_CAMERA_RELATIVE_HEADING_AND_PITCH

--[[
Does nothing
]]
function natives.CAM.SET_FIRST_PERSON_SHOOTER_CAMERA_HEADING(--[[float]] yaw) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_FIRST_PERSON_SHOOTER_CAMERA_HEADING' due to disabled trusted mode")

	assert(type(yaw) == "number", "Arg #1 (yaw) must be a number.")

	local result = native_call(0x103991D4A307D472, yaw)
end
natives.cam.set_first_person_shooter_camera_heading = natives.CAM.SET_FIRST_PERSON_SHOOTER_CAMERA_HEADING

function natives.CAM.SET_FIRST_PERSON_SHOOTER_CAMERA_PITCH(--[[float]] pitch) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_FIRST_PERSON_SHOOTER_CAMERA_PITCH' due to disabled trusted mode")

	assert(type(pitch) == "number", "Arg #1 (pitch) must be a number.")

	local result = native_call(0x759E13EBC1C15C5A, pitch)
end
natives.cam.set_first_person_shooter_camera_pitch = natives.CAM.SET_FIRST_PERSON_SHOOTER_CAMERA_PITCH

function natives.CAM.SET_SCRIPTED_CAMERA_IS_FIRST_PERSON_THIS_FRAME(--[[BOOL]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_SCRIPTED_CAMERA_IS_FIRST_PERSON_THIS_FRAME' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0x469F2ECDEC046337, p0)
end
natives.cam.set_scripted_camera_is_first_person_this_frame = natives.CAM.SET_SCRIPTED_CAMERA_IS_FIRST_PERSON_THIS_FRAME

--[[
Possible shake types (updated b617d):

DEATH_FAIL_IN_EFFECT_SHAKE
DRUNK_SHAKE
FAMILY5_DRUG_TRIP_SHAKE
HAND_SHAKE
JOLT_SHAKE
LARGE_EXPLOSION_SHAKE
MEDIUM_EXPLOSION_SHAKE
SMALL_EXPLOSION_SHAKE
ROAD_VIBRATION_SHAKE
SKY_DIVING_SHAKE
VIBRATE_SHAKE

Full list of cam shake types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/camShakeTypesCompact.json
]]
function natives.CAM.SHAKE_GAMEPLAY_CAM(--[[const char*]] shakeName, --[[float]] intensity) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SHAKE_GAMEPLAY_CAM' due to disabled trusted mode")

	assert(type(shakeName) == "string", "Arg #1 (shakeName) must be a string.")
	assert(type(intensity) == "number", "Arg #2 (intensity) must be a number.")

	local result = native_call(0xFD55E49555E017CF, shakeName, intensity)
end
natives.cam.shake_gameplay_cam = natives.CAM.SHAKE_GAMEPLAY_CAM

function natives.CAM.IS_GAMEPLAY_CAM_SHAKING() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.IS_GAMEPLAY_CAM_SHAKING' due to disabled trusted mode")

	local result = native_call(0x016C090630DF1F89)
	return result:__tointeger() ~= 0
end
natives.cam.is_gameplay_cam_shaking = natives.CAM.IS_GAMEPLAY_CAM_SHAKING

--[[
Sets the amplitude for the gameplay (i.e. 3rd or 1st) camera to shake. Used in script "drunk_controller.ysc.c4" to simulate making the player drunk.
]]
function natives.CAM.SET_GAMEPLAY_CAM_SHAKE_AMPLITUDE(--[[float]] amplitude) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_GAMEPLAY_CAM_SHAKE_AMPLITUDE' due to disabled trusted mode")

	assert(type(amplitude) == "number", "Arg #1 (amplitude) must be a number.")

	local result = native_call(0xA87E00932DB4D85D, amplitude)
end
natives.cam.set_gameplay_cam_shake_amplitude = natives.CAM.SET_GAMEPLAY_CAM_SHAKE_AMPLITUDE

function natives.CAM.STOP_GAMEPLAY_CAM_SHAKING(--[[BOOL]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.STOP_GAMEPLAY_CAM_SHAKING' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0x0EF93E9F3D08C178, p0)
end
natives.cam.stop_gameplay_cam_shaking = natives.CAM.STOP_GAMEPLAY_CAM_SHAKING

--[[
Forces gameplay cam to specified ped as if you were the ped or spectating it
]]
function natives.CAM.SET_GAMEPLAY_CAM_FOLLOW_PED_THIS_UPDATE(--[[Ped]] ped) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_GAMEPLAY_CAM_FOLLOW_PED_THIS_UPDATE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x8BBACBF51DA047A8, ped)
end
natives.cam.set_gameplay_cam_follow_ped_this_update = natives.CAM.SET_GAMEPLAY_CAM_FOLLOW_PED_THIS_UPDATE

--[[
Examples when this function will return 0 are:
- During busted screen.
- When player is coming out from a hospital.
- When player is coming out from a police station.
- When player is buying gun from AmmuNation.
]]
function natives.CAM.IS_GAMEPLAY_CAM_RENDERING() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.IS_GAMEPLAY_CAM_RENDERING' due to disabled trusted mode")

	local result = native_call(0x39B5D1B10383F0C8)
	return result:__tointeger() ~= 0
end
natives.cam.is_gameplay_cam_rendering = natives.CAM.IS_GAMEPLAY_CAM_RENDERING

function natives.CAM.IS_INTERPOLATING_FROM_SCRIPT_CAMS() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.IS_INTERPOLATING_FROM_SCRIPT_CAMS' due to disabled trusted mode")

	local result = native_call(0x3044240D2E0FA842)
	return result:__tointeger() ~= 0
end
natives.cam.is_interpolating_from_script_cams = natives.CAM.IS_INTERPOLATING_FROM_SCRIPT_CAMS

function natives.CAM.IS_INTERPOLATING_TO_SCRIPT_CAMS() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.IS_INTERPOLATING_TO_SCRIPT_CAMS' due to disabled trusted mode")

	local result = native_call(0x705A276EBFF3133D)
	return result:__tointeger() ~= 0
end
natives.cam.is_interpolating_to_script_cams = natives.CAM.IS_INTERPOLATING_TO_SCRIPT_CAMS

function natives.CAM.SET_GAMEPLAY_CAM_ALTITUDE_FOV_SCALING_STATE(--[[BOOL]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_GAMEPLAY_CAM_ALTITUDE_FOV_SCALING_STATE' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0xDB90C6CCA48940F1, p0)
end
natives.cam.set_gameplay_cam_altitude_fov_scaling_state = natives.CAM.SET_GAMEPLAY_CAM_ALTITUDE_FOV_SCALING_STATE

--[[
Shows the crosshair even if it wouldn't show normally. Only works for one frame, so make sure to call it repeatedly.
]]
function natives.CAM.DISABLE_GAMEPLAY_CAM_ALTITUDE_FOV_SCALING_THIS_UPDATE() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.DISABLE_GAMEPLAY_CAM_ALTITUDE_FOV_SCALING_THIS_UPDATE' due to disabled trusted mode")

	local result = native_call(0xEA7F0AD7E9BA676F)
end
natives.cam.disable_gameplay_cam_altitude_fov_scaling_this_update = natives.CAM.DISABLE_GAMEPLAY_CAM_ALTITUDE_FOV_SCALING_THIS_UPDATE

function natives.CAM.IS_GAMEPLAY_CAM_LOOKING_BEHIND() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.IS_GAMEPLAY_CAM_LOOKING_BEHIND' due to disabled trusted mode")

	local result = native_call(0x70FDA869F3317EA9)
	return result:__tointeger() ~= 0
end
natives.cam.is_gameplay_cam_looking_behind = natives.CAM.IS_GAMEPLAY_CAM_LOOKING_BEHIND

function natives.CAM.SET_GAMEPLAY_CAM_IGNORE_ENTITY_COLLISION_THIS_UPDATE(--[[Entity]] entity) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_GAMEPLAY_CAM_IGNORE_ENTITY_COLLISION_THIS_UPDATE' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0x2AED6301F67007D5, entity)
end
natives.cam.set_gameplay_cam_ignore_entity_collision_this_update = natives.CAM.SET_GAMEPLAY_CAM_IGNORE_ENTITY_COLLISION_THIS_UPDATE

function natives.CAM.DISABLE_CAM_COLLISION_FOR_OBJECT(--[[Entity]] entity) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.DISABLE_CAM_COLLISION_FOR_OBJECT' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0x49482F9FCD825AAA, entity)
end
natives.cam.disable_cam_collision_for_object = natives.CAM.DISABLE_CAM_COLLISION_FOR_OBJECT

function natives.CAM.BYPASS_CAMERA_COLLISION_BUOYANCY_TEST_THIS_UPDATE() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.BYPASS_CAMERA_COLLISION_BUOYANCY_TEST_THIS_UPDATE' due to disabled trusted mode")

	local result = native_call(0xA7092AFE81944852)
end
natives.cam.bypass_camera_collision_buoyancy_test_this_update = natives.CAM.BYPASS_CAMERA_COLLISION_BUOYANCY_TEST_THIS_UPDATE

function natives.CAM.SET_GAMEPLAY_CAM_ENTITY_TO_LIMIT_FOCUS_OVER_BOUNDING_SPHERE_THIS_UPDATE(--[[Entity]] entity) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_GAMEPLAY_CAM_ENTITY_TO_LIMIT_FOCUS_OVER_BOUNDING_SPHERE_THIS_UPDATE' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0xFD3151CD37EA2245, entity)
end
natives.cam.set_gameplay_cam_entity_to_limit_focus_over_bounding_sphere_this_update = natives.CAM.SET_GAMEPLAY_CAM_ENTITY_TO_LIMIT_FOCUS_OVER_BOUNDING_SPHERE_THIS_UPDATE

--[[
Sets some flag on cinematic camera
]]
function natives.CAM.DISABLE_FIRST_PERSON_CAMERA_WATER_CLIPPING_TEST_THIS_UPDATE() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.DISABLE_FIRST_PERSON_CAMERA_WATER_CLIPPING_TEST_THIS_UPDATE' due to disabled trusted mode")

	local result = native_call(0xB1381B97F70C7B30)
end
natives.cam.disable_first_person_camera_water_clipping_test_this_update = natives.CAM.DISABLE_FIRST_PERSON_CAMERA_WATER_CLIPPING_TEST_THIS_UPDATE

function natives.CAM.SET_FOLLOW_CAM_IGNORE_ATTACH_PARENT_MOVEMENT_THIS_UPDATE() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_FOLLOW_CAM_IGNORE_ATTACH_PARENT_MOVEMENT_THIS_UPDATE' due to disabled trusted mode")

	local result = native_call(0xDD79DF9F4D26E1C9)
end
natives.cam.set_follow_cam_ignore_attach_parent_movement_this_update = natives.CAM.SET_FOLLOW_CAM_IGNORE_ATTACH_PARENT_MOVEMENT_THIS_UPDATE

function natives.CAM.IS_SPHERE_VISIBLE(--[[float]] x, --[[float]] y, --[[float]] z, --[[float]] radius) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.IS_SPHERE_VISIBLE' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(radius) == "number", "Arg #4 (radius) must be a number.")

	local result = native_call(0xE33D59DA70B58FDF, x, y, z, radius)
	return result:__tointeger() ~= 0
end
natives.cam.is_sphere_visible = natives.CAM.IS_SPHERE_VISIBLE

function natives.CAM.IS_FOLLOW_PED_CAM_ACTIVE() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.IS_FOLLOW_PED_CAM_ACTIVE' due to disabled trusted mode")

	local result = native_call(0xC6D3D26810C8E0F9)
	return result:__tointeger() ~= 0
end
natives.cam.is_follow_ped_cam_active = natives.CAM.IS_FOLLOW_PED_CAM_ACTIVE

--[[
From the scripts:

CAM::SET_FOLLOW_PED_CAM_THIS_UPDATE("FOLLOW_PED_ATTACHED_TO_ROPE_CAMERA", 0);
CAM::SET_FOLLOW_PED_CAM_THIS_UPDATE("FOLLOW_PED_ON_EXILE1_LADDER_CAMERA", 1500);
CAM::SET_FOLLOW_PED_CAM_THIS_UPDATE("FOLLOW_PED_SKY_DIVING_CAMERA", 0);
CAM::SET_FOLLOW_PED_CAM_THIS_UPDATE("FOLLOW_PED_SKY_DIVING_CAMERA", 3000);
CAM::SET_FOLLOW_PED_CAM_THIS_UPDATE("FOLLOW_PED_SKY_DIVING_FAMILY5_CAMERA", 0);
CAM::SET_FOLLOW_PED_CAM_THIS_UPDATE("FOLLOW_PED_SKY_DIVING_CAMERA", 0);
]]
function natives.CAM.SET_FOLLOW_PED_CAM_THIS_UPDATE(--[[const char*]] camName, --[[int]] p1) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_FOLLOW_PED_CAM_THIS_UPDATE' due to disabled trusted mode")

	assert(type(camName) == "string", "Arg #1 (camName) must be a string.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x44A113DD6FFC48D1, camName, p1)
	return result:__tointeger() ~= 0
end
natives.cam.set_follow_ped_cam_this_update = natives.CAM.SET_FOLLOW_PED_CAM_THIS_UPDATE

function natives.CAM.USE_SCRIPT_CAM_FOR_AMBIENT_POPULATION_ORIGIN_THIS_FRAME(--[[BOOL]] p0, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.USE_SCRIPT_CAM_FOR_AMBIENT_POPULATION_ORIGIN_THIS_FRAME' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0x271401846BD26E92, p0, p1)
end
natives.cam.use_script_cam_for_ambient_population_origin_this_frame = natives.CAM.USE_SCRIPT_CAM_FOR_AMBIENT_POPULATION_ORIGIN_THIS_FRAME

function natives.CAM.SET_FOLLOW_PED_CAM_LADDER_ALIGN_THIS_UPDATE() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_FOLLOW_PED_CAM_LADDER_ALIGN_THIS_UPDATE' due to disabled trusted mode")

	local result = native_call(0xC8391C309684595A)
end
natives.cam.set_follow_ped_cam_ladder_align_this_update = natives.CAM.SET_FOLLOW_PED_CAM_LADDER_ALIGN_THIS_UPDATE

--[[
minimum: Degrees between -180f and 180f.
maximum: Degrees between -180f and 180f.

Clamps the gameplay camera's current yaw.

Eg. _CLAMP_GAMEPLAY_CAM_YAW(0.0f, 0.0f) will set the horizontal angle directly behind the player.
]]
function natives.CAM.SET_THIRD_PERSON_CAM_RELATIVE_HEADING_LIMITS_THIS_UPDATE(--[[float]] minimum, --[[float]] maximum) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_THIRD_PERSON_CAM_RELATIVE_HEADING_LIMITS_THIS_UPDATE' due to disabled trusted mode")

	assert(type(minimum) == "number", "Arg #1 (minimum) must be a number.")
	assert(type(maximum) == "number", "Arg #2 (maximum) must be a number.")

	local result = native_call(0x8F993D26E0CA5E8E, minimum, maximum)
end
natives.cam.set_third_person_cam_relative_heading_limits_this_update = natives.CAM.SET_THIRD_PERSON_CAM_RELATIVE_HEADING_LIMITS_THIS_UPDATE

--[[
minimum: Degrees between -90f and 90f.
maximum: Degrees between -90f and 90f.

Clamps the gameplay camera's current pitch.

Eg. _CLAMP_GAMEPLAY_CAM_PITCH(0.0f, 0.0f) will set the vertical angle directly behind the player.
]]
function natives.CAM.SET_THIRD_PERSON_CAM_RELATIVE_PITCH_LIMITS_THIS_UPDATE(--[[float]] minimum, --[[float]] maximum) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_THIRD_PERSON_CAM_RELATIVE_PITCH_LIMITS_THIS_UPDATE' due to disabled trusted mode")

	assert(type(minimum) == "number", "Arg #1 (minimum) must be a number.")
	assert(type(maximum) == "number", "Arg #2 (maximum) must be a number.")

	local result = native_call(0xA516C198B7DCA1E1, minimum, maximum)
end
natives.cam.set_third_person_cam_relative_pitch_limits_this_update = natives.CAM.SET_THIRD_PERSON_CAM_RELATIVE_PITCH_LIMITS_THIS_UPDATE

--[[
Seems to animate the gameplay camera zoom.

Eg. _ANIMATE_GAMEPLAY_CAM_ZOOM(1f, 1000f);
will animate the camera zooming in from 1000 meters away.

Game scripts use it like this:

// Setting this to 1 prevents V key from changing zoom
PLAYER::SET_PLAYER_FORCED_ZOOM(PLAYER::PLAYER_ID(), 1);

// These restrict how far you can move cam up/down left/right
CAM::_CLAMP_GAMEPLAY_CAM_YAW(-20f, 50f);
CAM::_CLAMP_GAMEPLAY_CAM_PITCH(-60f, 0f);

CAM::_ANIMATE_GAMEPLAY_CAM_ZOOM(1f, 1f);
]]
function natives.CAM.SET_THIRD_PERSON_CAM_ORBIT_DISTANCE_LIMITS_THIS_UPDATE(--[[float]] p0, --[[float]] distance) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_THIRD_PERSON_CAM_ORBIT_DISTANCE_LIMITS_THIS_UPDATE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(distance) == "number", "Arg #2 (distance) must be a number.")

	local result = native_call(0xDF2E1F7742402E81, p0, distance)
end
natives.cam.set_third_person_cam_orbit_distance_limits_this_update = natives.CAM.SET_THIRD_PERSON_CAM_ORBIT_DISTANCE_LIMITS_THIS_UPDATE

--[[
Forces gameplay cam to specified vehicle as if you were in it
]]
function natives.CAM.SET_IN_VEHICLE_CAM_STATE_THIS_UPDATE(--[[Vehicle]] p0, --[[int]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_IN_VEHICLE_CAM_STATE_THIS_UPDATE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xE9EA16D6E54CDCA4, p0, p1)
end
natives.cam.set_in_vehicle_cam_state_this_update = natives.CAM.SET_IN_VEHICLE_CAM_STATE_THIS_UPDATE

--[[
Disables first person camera for the current frame.

Found in decompiled scripts:
GRAPHICS::DRAW_DEBUG_TEXT_2D("Disabling First Person Cam", 0.5, 0.8, 0.0, 0, 0, 255, 255);
CAM::_DE2EF5DA284CC8DF();
]]
function natives.CAM.DISABLE_ON_FOOT_FIRST_PERSON_VIEW_THIS_UPDATE() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.DISABLE_ON_FOOT_FIRST_PERSON_VIEW_THIS_UPDATE' due to disabled trusted mode")

	local result = native_call(0xDE2EF5DA284CC8DF)
end
natives.cam.disable_on_foot_first_person_view_this_update = natives.CAM.DISABLE_ON_FOOT_FIRST_PERSON_VIEW_THIS_UPDATE

function natives.CAM.DISABLE_FIRST_PERSON_FLASH_EFFECT_THIS_UPDATE() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.DISABLE_FIRST_PERSON_FLASH_EFFECT_THIS_UPDATE' due to disabled trusted mode")

	local result = native_call(0x59424BD75174C9B1)
end
natives.cam.disable_first_person_flash_effect_this_update = natives.CAM.DISABLE_FIRST_PERSON_FLASH_EFFECT_THIS_UPDATE

function natives.CAM.BLOCK_FIRST_PERSON_ORIENTATION_RESET_THIS_UPDATE() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.BLOCK_FIRST_PERSON_ORIENTATION_RESET_THIS_UPDATE' due to disabled trusted mode")

	local result = native_call(0x9F97DA93681F87EA)
end
natives.cam.block_first_person_orientation_reset_this_update = natives.CAM.BLOCK_FIRST_PERSON_ORIENTATION_RESET_THIS_UPDATE

function natives.CAM.GET_FOLLOW_PED_CAM_ZOOM_LEVEL() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.GET_FOLLOW_PED_CAM_ZOOM_LEVEL' due to disabled trusted mode")

	local result = native_call(0x33E6C8EFD0CD93E9)
	return result:__tointeger()
end
natives.cam.get_follow_ped_cam_zoom_level = natives.CAM.GET_FOLLOW_PED_CAM_ZOOM_LEVEL

--[[
Returns
0 - Third Person Close
1 - Third Person Mid
2 - Third Person Far
4 - First Person
]]
function natives.CAM.GET_FOLLOW_PED_CAM_VIEW_MODE() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.GET_FOLLOW_PED_CAM_VIEW_MODE' due to disabled trusted mode")

	local result = native_call(0x8D4D46230B2C353A)
	return result:__tointeger()
end
natives.cam.get_follow_ped_cam_view_mode = natives.CAM.GET_FOLLOW_PED_CAM_VIEW_MODE

--[[
Sets the type of Player camera:

0 - Third Person Close
1 - Third Person Mid
2 - Third Person Far
4 - First Person
]]
function natives.CAM.SET_FOLLOW_PED_CAM_VIEW_MODE(--[[int]] viewMode) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_FOLLOW_PED_CAM_VIEW_MODE' due to disabled trusted mode")

	assert(type(viewMode) == "number", "Arg #1 (viewMode) must be a number.")

	local result = native_call(0x5A4F9EDF1673F704, viewMode)
end
natives.cam.set_follow_ped_cam_view_mode = natives.CAM.SET_FOLLOW_PED_CAM_VIEW_MODE

function natives.CAM.IS_FOLLOW_VEHICLE_CAM_ACTIVE() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.IS_FOLLOW_VEHICLE_CAM_ACTIVE' due to disabled trusted mode")

	local result = native_call(0xCBBDE6D335D6D496)
	return result:__tointeger() ~= 0
end
natives.cam.is_follow_vehicle_cam_active = natives.CAM.IS_FOLLOW_VEHICLE_CAM_ACTIVE

function natives.CAM.SET_FOLLOW_VEHICLE_CAM_HIGH_ANGLE_MODE_THIS_UPDATE(--[[BOOL]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_FOLLOW_VEHICLE_CAM_HIGH_ANGLE_MODE_THIS_UPDATE' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0x91EF6EE6419E5B97, p0)
end
natives.cam.set_follow_vehicle_cam_high_angle_mode_this_update = natives.CAM.SET_FOLLOW_VEHICLE_CAM_HIGH_ANGLE_MODE_THIS_UPDATE

function natives.CAM.SET_FOLLOW_VEHICLE_CAM_HIGH_ANGLE_MODE_EVERY_UPDATE(--[[BOOL]] p0, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_FOLLOW_VEHICLE_CAM_HIGH_ANGLE_MODE_EVERY_UPDATE' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0x9DFE13ECDC1EC196, p0, p1)
end
natives.cam.set_follow_vehicle_cam_high_angle_mode_every_update = natives.CAM.SET_FOLLOW_VEHICLE_CAM_HIGH_ANGLE_MODE_EVERY_UPDATE

function natives.CAM.SET_TABLE_GAMES_CAMERA_THIS_UPDATE(--[[Hash]] hash) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_TABLE_GAMES_CAMERA_THIS_UPDATE' due to disabled trusted mode")

	assert(type(hash) == "number", "Arg #1 (hash) must be a number.")

	local result = native_call(0x79C0E43EB9B944E2, hash)
	return result:__tointeger() ~= 0
end
natives.cam.set_table_games_camera_this_update = natives.CAM.SET_TABLE_GAMES_CAMERA_THIS_UPDATE

function natives.CAM.GET_FOLLOW_VEHICLE_CAM_ZOOM_LEVEL() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.GET_FOLLOW_VEHICLE_CAM_ZOOM_LEVEL' due to disabled trusted mode")

	local result = native_call(0xEE82280AB767B690)
	return result:__tointeger()
end
natives.cam.get_follow_vehicle_cam_zoom_level = natives.CAM.GET_FOLLOW_VEHICLE_CAM_ZOOM_LEVEL

function natives.CAM.SET_FOLLOW_VEHICLE_CAM_ZOOM_LEVEL(--[[int]] zoomLevel) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_FOLLOW_VEHICLE_CAM_ZOOM_LEVEL' due to disabled trusted mode")

	assert(type(zoomLevel) == "number", "Arg #1 (zoomLevel) must be a number.")

	local result = native_call(0x19464CB6E4078C8A, zoomLevel)
end
natives.cam.set_follow_vehicle_cam_zoom_level = natives.CAM.SET_FOLLOW_VEHICLE_CAM_ZOOM_LEVEL

--[[
Returns the type of camera:

0 - Third Person Close
1 - Third Person Mid
2 - Third Person Far
4 - First Person
]]
function natives.CAM.GET_FOLLOW_VEHICLE_CAM_VIEW_MODE() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.GET_FOLLOW_VEHICLE_CAM_VIEW_MODE' due to disabled trusted mode")

	local result = native_call(0xA4FF579AC0E3AAAE)
	return result:__tointeger()
end
natives.cam.get_follow_vehicle_cam_view_mode = natives.CAM.GET_FOLLOW_VEHICLE_CAM_VIEW_MODE

--[[
Sets the type of Player camera in vehicles:

0 - Third Person Close
1 - Third Person Mid
2 - Third Person Far
4 - First Person
]]
function natives.CAM.SET_FOLLOW_VEHICLE_CAM_VIEW_MODE(--[[int]] viewMode) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_FOLLOW_VEHICLE_CAM_VIEW_MODE' due to disabled trusted mode")

	assert(type(viewMode) == "number", "Arg #1 (viewMode) must be a number.")

	local result = native_call(0xAC253D7842768F48, viewMode)
end
natives.cam.set_follow_vehicle_cam_view_mode = natives.CAM.SET_FOLLOW_VEHICLE_CAM_VIEW_MODE

--[[
context: see _GET_CAM_ACTIVE_VIEW_MODE_CONTEXT
]]
function natives.CAM.GET_CAM_VIEW_MODE_FOR_CONTEXT(--[[int]] context) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.GET_CAM_VIEW_MODE_FOR_CONTEXT' due to disabled trusted mode")

	assert(type(context) == "number", "Arg #1 (context) must be a number.")

	local result = native_call(0xEE778F8C7E1142E2, context)
	return result:__tointeger()
end
natives.cam.get_cam_view_mode_for_context = natives.CAM.GET_CAM_VIEW_MODE_FOR_CONTEXT

--[[
context: see _GET_CAM_ACTIVE_VIEW_MODE_CONTEXT
]]
function natives.CAM.SET_CAM_VIEW_MODE_FOR_CONTEXT(--[[int]] context, --[[int]] viewMode) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_CAM_VIEW_MODE_FOR_CONTEXT' due to disabled trusted mode")

	assert(type(context) == "number", "Arg #1 (context) must be a number.")
	assert(type(viewMode) == "number", "Arg #2 (viewMode) must be a number.")

	local result = native_call(0x2A2173E46DAECD12, context, viewMode)
end
natives.cam.set_cam_view_mode_for_context = natives.CAM.SET_CAM_VIEW_MODE_FOR_CONTEXT

--[[
enum Context
{
	ON_FOOT,
	IN_VEHICLE,
	ON_BIKE,
	IN_BOAT,
	IN_AIRCRAFT,
	IN_SUBMARINE,
	IN_HELI,
	IN_TURRET
};
]]
function natives.CAM.GET_CAM_ACTIVE_VIEW_MODE_CONTEXT() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.GET_CAM_ACTIVE_VIEW_MODE_CONTEXT' due to disabled trusted mode")

	local result = native_call(0x19CAFA3C87F7C2FF)
	return result:__tointeger()
end
natives.cam.get_cam_active_view_mode_context = natives.CAM.GET_CAM_ACTIVE_VIEW_MODE_CONTEXT

function natives.CAM.USE_VEHICLE_CAM_STUNT_SETTINGS_THIS_UPDATE() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.USE_VEHICLE_CAM_STUNT_SETTINGS_THIS_UPDATE' due to disabled trusted mode")

	local result = native_call(0x6493CF69859B116A)
end
natives.cam.use_vehicle_cam_stunt_settings_this_update = natives.CAM.USE_VEHICLE_CAM_STUNT_SETTINGS_THIS_UPDATE

--[[
Sets gameplay camera to hash
]]
function natives.CAM.USE_DEDICATED_STUNT_CAMERA_THIS_UPDATE(--[[const char*]] camName) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.USE_DEDICATED_STUNT_CAMERA_THIS_UPDATE' due to disabled trusted mode")

	assert(type(camName) == "string", "Arg #1 (camName) must be a string.")

	local result = native_call(0x425A920FDB9A0DDA, camName)
end
natives.cam.use_dedicated_stunt_camera_this_update = natives.CAM.USE_DEDICATED_STUNT_CAMERA_THIS_UPDATE

function natives.CAM.FORCE_VEHICLE_CAM_STUNT_SETTINGS_THIS_UPDATE() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.FORCE_VEHICLE_CAM_STUNT_SETTINGS_THIS_UPDATE' due to disabled trusted mode")

	local result = native_call(0x0AA27680A0BD43FA)
end
natives.cam.force_vehicle_cam_stunt_settings_this_update = natives.CAM.FORCE_VEHICLE_CAM_STUNT_SETTINGS_THIS_UPDATE

function natives.CAM.SET_FOLLOW_VEHICLE_CAM_SEAT_THIS_UPDATE(--[[int]] seatIndex) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_FOLLOW_VEHICLE_CAM_SEAT_THIS_UPDATE' due to disabled trusted mode")

	assert(type(seatIndex) == "number", "Arg #1 (seatIndex) must be a number.")

	local result = native_call(0x5C90CAB09951A12F, seatIndex)
end
natives.cam.set_follow_vehicle_cam_seat_this_update = natives.CAM.SET_FOLLOW_VEHICLE_CAM_SEAT_THIS_UPDATE

function natives.CAM.IS_AIM_CAM_ACTIVE() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.IS_AIM_CAM_ACTIVE' due to disabled trusted mode")

	local result = native_call(0x68EDDA28A5976D07)
	return result:__tointeger() ~= 0
end
natives.cam.is_aim_cam_active = natives.CAM.IS_AIM_CAM_ACTIVE

function natives.CAM.IS_AIM_CAM_ACTIVE_IN_ACCURATE_MODE() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.IS_AIM_CAM_ACTIVE_IN_ACCURATE_MODE' due to disabled trusted mode")

	local result = native_call(0x74BD83EA840F6BC9)
	return result:__tointeger() ~= 0
end
natives.cam.is_aim_cam_active_in_accurate_mode = natives.CAM.IS_AIM_CAM_ACTIVE_IN_ACCURATE_MODE

function natives.CAM.IS_FIRST_PERSON_AIM_CAM_ACTIVE() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.IS_FIRST_PERSON_AIM_CAM_ACTIVE' due to disabled trusted mode")

	local result = native_call(0x5E346D934122613F)
	return result:__tointeger() ~= 0
end
natives.cam.is_first_person_aim_cam_active = natives.CAM.IS_FIRST_PERSON_AIM_CAM_ACTIVE

function natives.CAM.DISABLE_AIM_CAM_THIS_UPDATE() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.DISABLE_AIM_CAM_THIS_UPDATE' due to disabled trusted mode")

	local result = native_call(0x1A31FE0049E542F6)
end
natives.cam.disable_aim_cam_this_update = natives.CAM.DISABLE_AIM_CAM_THIS_UPDATE

function natives.CAM.GET_FIRST_PERSON_AIM_CAM_ZOOM_FACTOR() -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.GET_FIRST_PERSON_AIM_CAM_ZOOM_FACTOR' due to disabled trusted mode")

	local result = native_call(0x7EC52CC40597D170)
	return result:__tonumber()
end
natives.cam.get_first_person_aim_cam_zoom_factor = natives.CAM.GET_FIRST_PERSON_AIM_CAM_ZOOM_FACTOR

function natives.CAM.SET_FIRST_PERSON_AIM_CAM_ZOOM_FACTOR(--[[float]] zoomFactor) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_FIRST_PERSON_AIM_CAM_ZOOM_FACTOR' due to disabled trusted mode")

	assert(type(zoomFactor) == "number", "Arg #1 (zoomFactor) must be a number.")

	local result = native_call(0x70894BD0915C5BCA, zoomFactor)
end
natives.cam.set_first_person_aim_cam_zoom_factor = natives.CAM.SET_FIRST_PERSON_AIM_CAM_ZOOM_FACTOR

function natives.CAM.SET_FIRST_PERSON_AIM_CAM_ZOOM_FACTOR_LIMITS_THIS_UPDATE(--[[float]] p0, --[[float]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_FIRST_PERSON_AIM_CAM_ZOOM_FACTOR_LIMITS_THIS_UPDATE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xCED08CBE8EBB97C7, p0, p1)
end
natives.cam.set_first_person_aim_cam_zoom_factor_limits_this_update = natives.CAM.SET_FIRST_PERSON_AIM_CAM_ZOOM_FACTOR_LIMITS_THIS_UPDATE

function natives.CAM.SET_FIRST_PERSON_AIM_CAM_RELATIVE_HEADING_LIMITS_THIS_UPDATE(--[[float]] p0, --[[float]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_FIRST_PERSON_AIM_CAM_RELATIVE_HEADING_LIMITS_THIS_UPDATE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x2F7F2B26DD3F18EE, p0, p1)
end
natives.cam.set_first_person_aim_cam_relative_heading_limits_this_update = natives.CAM.SET_FIRST_PERSON_AIM_CAM_RELATIVE_HEADING_LIMITS_THIS_UPDATE

function natives.CAM.SET_FIRST_PERSON_AIM_CAM_RELATIVE_PITCH_LIMITS_THIS_UPDATE(--[[float]] p0, --[[float]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_FIRST_PERSON_AIM_CAM_RELATIVE_PITCH_LIMITS_THIS_UPDATE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xBCFC632DB7673BF0, p0, p1)
end
natives.cam.set_first_person_aim_cam_relative_pitch_limits_this_update = natives.CAM.SET_FIRST_PERSON_AIM_CAM_RELATIVE_PITCH_LIMITS_THIS_UPDATE

function natives.CAM.SET_FIRST_PERSON_AIM_CAM_NEAR_CLIP_THIS_UPDATE(--[[float]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_FIRST_PERSON_AIM_CAM_NEAR_CLIP_THIS_UPDATE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x0AF7B437918103B3, p0)
end
natives.cam.set_first_person_aim_cam_near_clip_this_update = natives.CAM.SET_FIRST_PERSON_AIM_CAM_NEAR_CLIP_THIS_UPDATE

function natives.CAM.SET_THIRD_PERSON_AIM_CAM_NEAR_CLIP_THIS_UPDATE(--[[float]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_THIRD_PERSON_AIM_CAM_NEAR_CLIP_THIS_UPDATE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x42156508606DE65E, p0)
end
natives.cam.set_third_person_aim_cam_near_clip_this_update = natives.CAM.SET_THIRD_PERSON_AIM_CAM_NEAR_CLIP_THIS_UPDATE

function natives.CAM.SET_ALLOW_CUSTOM_VEHICLE_DRIVE_BY_CAM_THIS_UPDATE(--[[BOOL]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_ALLOW_CUSTOM_VEHICLE_DRIVE_BY_CAM_THIS_UPDATE' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0x4008EDF7D6E48175, p0)
end
natives.cam.set_allow_custom_vehicle_drive_by_cam_this_update = natives.CAM.SET_ALLOW_CUSTOM_VEHICLE_DRIVE_BY_CAM_THIS_UPDATE

function natives.CAM.FORCE_TIGHTSPACE_CUSTOM_FRAMING_THIS_UPDATE() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.FORCE_TIGHTSPACE_CUSTOM_FRAMING_THIS_UPDATE' due to disabled trusted mode")

	local result = native_call(0x380B4968D1E09E55)
end
natives.cam.force_tightspace_custom_framing_this_update = natives.CAM.FORCE_TIGHTSPACE_CUSTOM_FRAMING_THIS_UPDATE

function natives.CAM.GET_FINAL_RENDERED_CAM_COORD() -- Returns Vector3
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.GET_FINAL_RENDERED_CAM_COORD' due to disabled trusted mode")

	local result = native_call(0xA200EB1EE790F448)
	return result:__tov3()
end
natives.cam.get_final_rendered_cam_coord = natives.CAM.GET_FINAL_RENDERED_CAM_COORD

--[[
p0 seems to consistently be 2 across scripts

Function is called faily often by CAM::CREATE_CAM_WITH_PARAMS
]]
function natives.CAM.GET_FINAL_RENDERED_CAM_ROT(--[[int]] rotationOrder) -- Returns Vector3
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.GET_FINAL_RENDERED_CAM_ROT' due to disabled trusted mode")

	assert(type(rotationOrder) == "number", "Arg #1 (rotationOrder) must be a number.")

	local result = native_call(0x5B4E4C817FCC2DFB, rotationOrder)
	return result:__tov3()
end
natives.cam.get_final_rendered_cam_rot = natives.CAM.GET_FINAL_RENDERED_CAM_ROT

function natives.CAM.GET_FINAL_RENDERED_REMOTE_PLAYER_CAM_ROT(--[[Player]] player, --[[int]] rotationOrder) -- Returns Vector3
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.GET_FINAL_RENDERED_REMOTE_PLAYER_CAM_ROT' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(rotationOrder) == "number", "Arg #2 (rotationOrder) must be a number.")

	local result = native_call(0x26903D9CD1175F2C, player, rotationOrder)
	return result:__tov3()
end
natives.cam.get_final_rendered_remote_player_cam_rot = natives.CAM.GET_FINAL_RENDERED_REMOTE_PLAYER_CAM_ROT

--[[
Gets some camera fov
]]
function natives.CAM.GET_FINAL_RENDERED_CAM_FOV() -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.GET_FINAL_RENDERED_CAM_FOV' due to disabled trusted mode")

	local result = native_call(0x80EC114669DAEFF4)
	return result:__tonumber()
end
natives.cam.get_final_rendered_cam_fov = natives.CAM.GET_FINAL_RENDERED_CAM_FOV

function natives.CAM.GET_FINAL_RENDERED_REMOTE_PLAYER_CAM_FOV(--[[Player]] player) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.GET_FINAL_RENDERED_REMOTE_PLAYER_CAM_FOV' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0x5F35F6732C3FBBA0, player)
	return result:__tonumber()
end
natives.cam.get_final_rendered_remote_player_cam_fov = natives.CAM.GET_FINAL_RENDERED_REMOTE_PLAYER_CAM_FOV

function natives.CAM.GET_FINAL_RENDERED_CAM_NEAR_CLIP() -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.GET_FINAL_RENDERED_CAM_NEAR_CLIP' due to disabled trusted mode")

	local result = native_call(0xD0082607100D7193)
	return result:__tonumber()
end
natives.cam.get_final_rendered_cam_near_clip = natives.CAM.GET_FINAL_RENDERED_CAM_NEAR_CLIP

function natives.CAM.GET_FINAL_RENDERED_CAM_FAR_CLIP() -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.GET_FINAL_RENDERED_CAM_FAR_CLIP' due to disabled trusted mode")

	local result = native_call(0xDFC8CBC606FDB0FC)
	return result:__tonumber()
end
natives.cam.get_final_rendered_cam_far_clip = natives.CAM.GET_FINAL_RENDERED_CAM_FAR_CLIP

function natives.CAM.GET_FINAL_RENDERED_CAM_NEAR_DOF() -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.GET_FINAL_RENDERED_CAM_NEAR_DOF' due to disabled trusted mode")

	local result = native_call(0xA03502FC581F7D9B)
	return result:__tonumber()
end
natives.cam.get_final_rendered_cam_near_dof = natives.CAM.GET_FINAL_RENDERED_CAM_NEAR_DOF

function natives.CAM.GET_FINAL_RENDERED_CAM_FAR_DOF() -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.GET_FINAL_RENDERED_CAM_FAR_DOF' due to disabled trusted mode")

	local result = native_call(0x9780F32BCAF72431)
	return result:__tonumber()
end
natives.cam.get_final_rendered_cam_far_dof = natives.CAM.GET_FINAL_RENDERED_CAM_FAR_DOF

function natives.CAM.GET_FINAL_RENDERED_CAM_MOTION_BLUR_STRENGTH() -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.GET_FINAL_RENDERED_CAM_MOTION_BLUR_STRENGTH' due to disabled trusted mode")

	local result = native_call(0x162F9D995753DC19)
	return result:__tonumber()
end
natives.cam.get_final_rendered_cam_motion_blur_strength = natives.CAM.GET_FINAL_RENDERED_CAM_MOTION_BLUR_STRENGTH

function natives.CAM.SET_GAMEPLAY_COORD_HINT(--[[float]] x, --[[float]] y, --[[float]] z, --[[int]] duration, --[[int]] blendOutDuration, --[[int]] blendInDuration, --[[int]] unk) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_GAMEPLAY_COORD_HINT' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(duration) == "number", "Arg #4 (duration) must be a number.")
	assert(type(blendOutDuration) == "number", "Arg #5 (blendOutDuration) must be a number.")
	assert(type(blendInDuration) == "number", "Arg #6 (blendInDuration) must be a number.")
	assert(type(unk) == "number", "Arg #7 (unk) must be a number.")

	local result = native_call(0xD51ADCD2D8BC0FB3, x, y, z, duration, blendOutDuration, blendInDuration, unk)
end
natives.cam.set_gameplay_coord_hint = natives.CAM.SET_GAMEPLAY_COORD_HINT

function natives.CAM.SET_GAMEPLAY_PED_HINT(--[[Ped]] ped, --[[float]] x1, --[[float]] y1, --[[float]] z1, --[[BOOL]] p4, --[[int]] duration, --[[int]] blendOutDuration, --[[int]] blendInDuration) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_GAMEPLAY_PED_HINT' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(x1) == "number", "Arg #2 (x1) must be a number.")
	assert(type(y1) == "number", "Arg #3 (y1) must be a number.")
	assert(type(z1) == "number", "Arg #4 (z1) must be a number.")
	assert(type(p4) == "boolean", "Arg #5 (p4) must be a boolean.")
	assert(type(duration) == "number", "Arg #6 (duration) must be a number.")
	assert(type(blendOutDuration) == "number", "Arg #7 (blendOutDuration) must be a number.")
	assert(type(blendInDuration) == "number", "Arg #8 (blendInDuration) must be a number.")

	local result = native_call(0x2B486269ACD548D3, ped, x1, y1, z1, p4, duration, blendOutDuration, blendInDuration)
end
natives.cam.set_gameplay_ped_hint = natives.CAM.SET_GAMEPLAY_PED_HINT

--[[
Focuses the camera on the specified vehicle.
]]
function natives.CAM.SET_GAMEPLAY_VEHICLE_HINT(--[[Vehicle]] vehicle, --[[float]] offsetX, --[[float]] offsetY, --[[float]] offsetZ, --[[BOOL]] p4, --[[int]] time, --[[int]] easeInTime, --[[int]] easeOutTime) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_GAMEPLAY_VEHICLE_HINT' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(offsetX) == "number", "Arg #2 (offsetX) must be a number.")
	assert(type(offsetY) == "number", "Arg #3 (offsetY) must be a number.")
	assert(type(offsetZ) == "number", "Arg #4 (offsetZ) must be a number.")
	assert(type(p4) == "boolean", "Arg #5 (p4) must be a boolean.")
	assert(type(time) == "number", "Arg #6 (time) must be a number.")
	assert(type(easeInTime) == "number", "Arg #7 (easeInTime) must be a number.")
	assert(type(easeOutTime) == "number", "Arg #8 (easeOutTime) must be a number.")

	local result = native_call(0xA2297E18F3E71C2E, vehicle, offsetX, offsetY, offsetZ, p4, time, easeInTime, easeOutTime)
end
natives.cam.set_gameplay_vehicle_hint = natives.CAM.SET_GAMEPLAY_VEHICLE_HINT

function natives.CAM.SET_GAMEPLAY_OBJECT_HINT(--[[Object]] object, --[[float]] xOffset, --[[float]] yOffset, --[[float]] zOffset, --[[BOOL]] p4, --[[int]] time, --[[int]] easeInTime, --[[int]] easeOutTime) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_GAMEPLAY_OBJECT_HINT' due to disabled trusted mode")

	assert(type(object) == "number", "Arg #1 (object) must be a number.")
	assert(type(xOffset) == "number", "Arg #2 (xOffset) must be a number.")
	assert(type(yOffset) == "number", "Arg #3 (yOffset) must be a number.")
	assert(type(zOffset) == "number", "Arg #4 (zOffset) must be a number.")
	assert(type(p4) == "boolean", "Arg #5 (p4) must be a boolean.")
	assert(type(time) == "number", "Arg #6 (time) must be a number.")
	assert(type(easeInTime) == "number", "Arg #7 (easeInTime) must be a number.")
	assert(type(easeOutTime) == "number", "Arg #8 (easeOutTime) must be a number.")

	local result = native_call(0x83E87508A2CA2AC6, object, xOffset, yOffset, zOffset, p4, time, easeInTime, easeOutTime)
end
natives.cam.set_gameplay_object_hint = natives.CAM.SET_GAMEPLAY_OBJECT_HINT

--[[
p8 could be some sort of flag. Scripts use:
-244429742
0
1726668277
1844968929
]]
function natives.CAM.SET_GAMEPLAY_ENTITY_HINT(--[[Entity]] entity, --[[float]] xOffset, --[[float]] yOffset, --[[float]] zOffset, --[[BOOL]] p4, --[[int]] time, --[[int]] easeInTime, --[[int]] easeOutTime, --[[int]] p8) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_GAMEPLAY_ENTITY_HINT' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(xOffset) == "number", "Arg #2 (xOffset) must be a number.")
	assert(type(yOffset) == "number", "Arg #3 (yOffset) must be a number.")
	assert(type(zOffset) == "number", "Arg #4 (zOffset) must be a number.")
	assert(type(p4) == "boolean", "Arg #5 (p4) must be a boolean.")
	assert(type(time) == "number", "Arg #6 (time) must be a number.")
	assert(type(easeInTime) == "number", "Arg #7 (easeInTime) must be a number.")
	assert(type(easeOutTime) == "number", "Arg #8 (easeOutTime) must be a number.")
	assert(type(p8) == "number", "Arg #9 (p8) must be a number.")

	local result = native_call(0x189E955A8313E298, entity, xOffset, yOffset, zOffset, p4, time, easeInTime, easeOutTime, p8)
end
natives.cam.set_gameplay_entity_hint = natives.CAM.SET_GAMEPLAY_ENTITY_HINT

function natives.CAM.IS_GAMEPLAY_HINT_ACTIVE() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.IS_GAMEPLAY_HINT_ACTIVE' due to disabled trusted mode")

	local result = native_call(0xE520FF1AD2785B40)
	return result:__tointeger() ~= 0
end
natives.cam.is_gameplay_hint_active = natives.CAM.IS_GAMEPLAY_HINT_ACTIVE

function natives.CAM.STOP_GAMEPLAY_HINT(--[[BOOL]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.STOP_GAMEPLAY_HINT' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0xF46C581C61718916, p0)
end
natives.cam.stop_gameplay_hint = natives.CAM.STOP_GAMEPLAY_HINT

--[[
This native does absolutely nothing, just a nullsub
]]
function natives.CAM.STOP_GAMEPLAY_HINT_BEING_CANCELLED_THIS_UPDATE(--[[BOOL]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.STOP_GAMEPLAY_HINT_BEING_CANCELLED_THIS_UPDATE' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0xCCD078C2665D2973, p0)
end
natives.cam.stop_gameplay_hint_being_cancelled_this_update = natives.CAM.STOP_GAMEPLAY_HINT_BEING_CANCELLED_THIS_UPDATE

function natives.CAM.STOP_CODE_GAMEPLAY_HINT(--[[BOOL]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.STOP_CODE_GAMEPLAY_HINT' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0x247ACBC4ABBC9D1C, p0)
end
natives.cam.stop_code_gameplay_hint = natives.CAM.STOP_CODE_GAMEPLAY_HINT

function natives.CAM.IS_CODE_GAMEPLAY_HINT_ACTIVE() -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.IS_CODE_GAMEPLAY_HINT_ACTIVE' due to disabled trusted mode")

	local result = native_call(0xBF72910D0F26F025)
	return result:__tointeger()
end
natives.cam.is_code_gameplay_hint_active = natives.CAM.IS_CODE_GAMEPLAY_HINT_ACTIVE

function natives.CAM.SET_GAMEPLAY_HINT_FOV(--[[float]] FOV) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_GAMEPLAY_HINT_FOV' due to disabled trusted mode")

	assert(type(FOV) == "number", "Arg #1 (FOV) must be a number.")

	local result = native_call(0x513403FB9C56211F, FOV)
end
natives.cam.set_gameplay_hint_fov = natives.CAM.SET_GAMEPLAY_HINT_FOV

function natives.CAM.SET_GAMEPLAY_HINT_FOLLOW_DISTANCE_SCALAR(--[[float]] value) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_GAMEPLAY_HINT_FOLLOW_DISTANCE_SCALAR' due to disabled trusted mode")

	assert(type(value) == "number", "Arg #1 (value) must be a number.")

	local result = native_call(0xF8BDBF3D573049A1, value)
end
natives.cam.set_gameplay_hint_follow_distance_scalar = natives.CAM.SET_GAMEPLAY_HINT_FOLLOW_DISTANCE_SCALAR

function natives.CAM.SET_GAMEPLAY_HINT_BASE_ORBIT_PITCH_OFFSET(--[[float]] value) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_GAMEPLAY_HINT_BASE_ORBIT_PITCH_OFFSET' due to disabled trusted mode")

	assert(type(value) == "number", "Arg #1 (value) must be a number.")

	local result = native_call(0xD1F8363DFAD03848, value)
end
natives.cam.set_gameplay_hint_base_orbit_pitch_offset = natives.CAM.SET_GAMEPLAY_HINT_BASE_ORBIT_PITCH_OFFSET

function natives.CAM.SET_GAMEPLAY_HINT_CAMERA_RELATIVE_SIDE_OFFSET(--[[float]] xOffset) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_GAMEPLAY_HINT_CAMERA_RELATIVE_SIDE_OFFSET' due to disabled trusted mode")

	assert(type(xOffset) == "number", "Arg #1 (xOffset) must be a number.")

	local result = native_call(0x5D7B620DAE436138, xOffset)
end
natives.cam.set_gameplay_hint_camera_relative_side_offset = natives.CAM.SET_GAMEPLAY_HINT_CAMERA_RELATIVE_SIDE_OFFSET

function natives.CAM.SET_GAMEPLAY_HINT_CAMERA_RELATIVE_VERTICAL_OFFSET(--[[float]] yOffset) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_GAMEPLAY_HINT_CAMERA_RELATIVE_VERTICAL_OFFSET' due to disabled trusted mode")

	assert(type(yOffset) == "number", "Arg #1 (yOffset) must be a number.")

	local result = native_call(0xC92717EF615B6704, yOffset)
end
natives.cam.set_gameplay_hint_camera_relative_vertical_offset = natives.CAM.SET_GAMEPLAY_HINT_CAMERA_RELATIVE_VERTICAL_OFFSET

function natives.CAM.SET_GAMEPLAY_HINT_CAMERA_BLEND_TO_FOLLOW_PED_MEDIUM_VIEW_MODE(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_GAMEPLAY_HINT_CAMERA_BLEND_TO_FOLLOW_PED_MEDIUM_VIEW_MODE' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0xE3433EADAAF7EE40, toggle)
end
natives.cam.set_gameplay_hint_camera_blend_to_follow_ped_medium_view_mode = natives.CAM.SET_GAMEPLAY_HINT_CAMERA_BLEND_TO_FOLLOW_PED_MEDIUM_VIEW_MODE

function natives.CAM.SET_CINEMATIC_BUTTON_ACTIVE(--[[BOOL]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_CINEMATIC_BUTTON_ACTIVE' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0x51669F7D1FB53D9F, p0)
end
natives.cam.set_cinematic_button_active = natives.CAM.SET_CINEMATIC_BUTTON_ACTIVE

function natives.CAM.IS_CINEMATIC_CAM_RENDERING() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.IS_CINEMATIC_CAM_RENDERING' due to disabled trusted mode")

	local result = native_call(0xB15162CB5826E9E8)
	return result:__tointeger() ~= 0
end
natives.cam.is_cinematic_cam_rendering = natives.CAM.IS_CINEMATIC_CAM_RENDERING

--[[
p0 argument found in the b617d scripts: "DRUNK_SHAKE"

Full list of cam shake types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/camShakeTypesCompact.json
]]
function natives.CAM.SHAKE_CINEMATIC_CAM(--[[const char*]] p0, --[[float]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SHAKE_CINEMATIC_CAM' due to disabled trusted mode")

	assert(type(p0) == "string", "Arg #1 (p0) must be a string.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xDCE214D9ED58F3CF, p0, p1)
end
natives.cam.shake_cinematic_cam = natives.CAM.SHAKE_CINEMATIC_CAM

function natives.CAM.IS_CINEMATIC_CAM_SHAKING() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.IS_CINEMATIC_CAM_SHAKING' due to disabled trusted mode")

	local result = native_call(0xBBC08F6B4CB8FF0A)
	return result:__tointeger() ~= 0
end
natives.cam.is_cinematic_cam_shaking = natives.CAM.IS_CINEMATIC_CAM_SHAKING

function natives.CAM.SET_CINEMATIC_CAM_SHAKE_AMPLITUDE(--[[float]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_CINEMATIC_CAM_SHAKE_AMPLITUDE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xC724C701C30B2FE7, p0)
end
natives.cam.set_cinematic_cam_shake_amplitude = natives.CAM.SET_CINEMATIC_CAM_SHAKE_AMPLITUDE

function natives.CAM.STOP_CINEMATIC_CAM_SHAKING(--[[BOOL]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.STOP_CINEMATIC_CAM_SHAKING' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0x2238E588E588A6D7, p0)
end
natives.cam.stop_cinematic_cam_shaking = natives.CAM.STOP_CINEMATIC_CAM_SHAKING

function natives.CAM.DISABLE_CINEMATIC_BONNET_CAMERA_THIS_UPDATE() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.DISABLE_CINEMATIC_BONNET_CAMERA_THIS_UPDATE' due to disabled trusted mode")

	local result = native_call(0xADFF1B2A555F5FBA)
end
natives.cam.disable_cinematic_bonnet_camera_this_update = natives.CAM.DISABLE_CINEMATIC_BONNET_CAMERA_THIS_UPDATE

function natives.CAM.DISABLE_CINEMATIC_VEHICLE_IDLE_MODE_THIS_UPDATE() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.DISABLE_CINEMATIC_VEHICLE_IDLE_MODE_THIS_UPDATE' due to disabled trusted mode")

	local result = native_call(0x62ECFCFDEE7885D6)
end
natives.cam.disable_cinematic_vehicle_idle_mode_this_update = natives.CAM.DISABLE_CINEMATIC_VEHICLE_IDLE_MODE_THIS_UPDATE

--[[
Resets the vehicle idle camera timer. Calling this in a loop will disable the idle camera.
]]
function natives.CAM.INVALIDATE_CINEMATIC_VEHICLE_IDLE_MODE() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.INVALIDATE_CINEMATIC_VEHICLE_IDLE_MODE' due to disabled trusted mode")

	local result = native_call(0x9E4CFFF989258472)
end
natives.cam.invalidate_cinematic_vehicle_idle_mode = natives.CAM.INVALIDATE_CINEMATIC_VEHICLE_IDLE_MODE

--[[
Resets the idle camera timer. Calling that in a loop once every few seconds is enough to disable the idle cinematic camera.
]]
function natives.CAM.INVALIDATE_IDLE_CAM() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.INVALIDATE_IDLE_CAM' due to disabled trusted mode")

	local result = native_call(0xF4F2C0D4EE209E20)
end
natives.cam.invalidate_idle_cam = natives.CAM.INVALIDATE_IDLE_CAM

function natives.CAM.IS_CINEMATIC_IDLE_CAM_RENDERING() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.IS_CINEMATIC_IDLE_CAM_RENDERING' due to disabled trusted mode")

	local result = native_call(0xCA9D2AA3E326D720)
	return result:__tointeger() ~= 0
end
natives.cam.is_cinematic_idle_cam_rendering = natives.CAM.IS_CINEMATIC_IDLE_CAM_RENDERING

function natives.CAM.IS_CINEMATIC_FIRST_PERSON_VEHICLE_INTERIOR_CAM_RENDERING() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.IS_CINEMATIC_FIRST_PERSON_VEHICLE_INTERIOR_CAM_RENDERING' due to disabled trusted mode")

	local result = native_call(0x4F32C0D5A90A9B40)
	return result:__tointeger() ~= 0
end
natives.cam.is_cinematic_first_person_vehicle_interior_cam_rendering = natives.CAM.IS_CINEMATIC_FIRST_PERSON_VEHICLE_INTERIOR_CAM_RENDERING

function natives.CAM.CREATE_CINEMATIC_SHOT(--[[Any]] p0, --[[int]] p1, --[[Any]] p2, --[[Entity]] entity) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.CREATE_CINEMATIC_SHOT' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(entity) == "number", "Arg #4 (entity) must be a number.")

	local result = native_call(0x741B0129D4560F31, p0, p1, p2, entity)
end
natives.cam.create_cinematic_shot = natives.CAM.CREATE_CINEMATIC_SHOT

function natives.CAM.IS_CINEMATIC_SHOT_ACTIVE(--[[Any]] p0) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.IS_CINEMATIC_SHOT_ACTIVE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xCC9F3371A7C28BC9, p0)
	return result:__tointeger() ~= 0
end
natives.cam.is_cinematic_shot_active = natives.CAM.IS_CINEMATIC_SHOT_ACTIVE

--[[
Only used once in carsteal3 with p0 set to -1096069633 (CAMERA_MAN_SHOT)
]]
function natives.CAM.STOP_CINEMATIC_SHOT(--[[Hash]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.STOP_CINEMATIC_SHOT' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x7660C6E75D3A078E, p0)
end
natives.cam.stop_cinematic_shot = natives.CAM.STOP_CINEMATIC_SHOT

function natives.CAM.FORCE_CINEMATIC_RENDERING_THIS_UPDATE(--[[BOOL]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.FORCE_CINEMATIC_RENDERING_THIS_UPDATE' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0xA41BCD7213805AAC, p0)
end
natives.cam.force_cinematic_rendering_this_update = natives.CAM.FORCE_CINEMATIC_RENDERING_THIS_UPDATE

function natives.CAM.SET_CINEMATIC_NEWS_CHANNEL_ACTIVE_THIS_UPDATE() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_CINEMATIC_NEWS_CHANNEL_ACTIVE_THIS_UPDATE' due to disabled trusted mode")

	local result = native_call(0xDC9DA9E8789F5246)
end
natives.cam.set_cinematic_news_channel_active_this_update = natives.CAM.SET_CINEMATIC_NEWS_CHANNEL_ACTIVE_THIS_UPDATE

--[[
Toggles the vehicle cinematic cam; requires the player ped to be in a vehicle to work.
]]
function natives.CAM.SET_CINEMATIC_MODE_ACTIVE(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_CINEMATIC_MODE_ACTIVE' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0xDCF0754AC3D6FD4E, toggle)
end
natives.cam.set_cinematic_mode_active = natives.CAM.SET_CINEMATIC_MODE_ACTIVE

function natives.CAM.IS_IN_VEHICLE_MOBILE_PHONE_CAMERA_RENDERING() -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.IS_IN_VEHICLE_MOBILE_PHONE_CAMERA_RENDERING' due to disabled trusted mode")

	local result = native_call(0x1F2300CB7FA7B7F6)
	return result:__tointeger()
end
natives.cam.is_in_vehicle_mobile_phone_camera_rendering = natives.CAM.IS_IN_VEHICLE_MOBILE_PHONE_CAMERA_RENDERING

function natives.CAM.DISABLE_CINEMATIC_SLOW_MO_THIS_UPDATE() -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.DISABLE_CINEMATIC_SLOW_MO_THIS_UPDATE' due to disabled trusted mode")

	local result = native_call(0x17FCA7199A530203)
	return result:__tointeger()
end
natives.cam.disable_cinematic_slow_mo_this_update = natives.CAM.DISABLE_CINEMATIC_SLOW_MO_THIS_UPDATE

function natives.CAM.IS_BONNET_CINEMATIC_CAM_RENDERING() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.IS_BONNET_CINEMATIC_CAM_RENDERING' due to disabled trusted mode")

	local result = native_call(0xD7360051C885628B)
	return result:__tointeger() ~= 0
end
natives.cam.is_bonnet_cinematic_cam_rendering = natives.CAM.IS_BONNET_CINEMATIC_CAM_RENDERING

--[[
Tests some cinematic camera flags
]]
function natives.CAM.IS_CINEMATIC_CAM_INPUT_ACTIVE() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.IS_CINEMATIC_CAM_INPUT_ACTIVE' due to disabled trusted mode")

	local result = native_call(0xF5F1E89A970B7796)
	return result:__tointeger() ~= 0
end
natives.cam.is_cinematic_cam_input_active = natives.CAM.IS_CINEMATIC_CAM_INPUT_ACTIVE

function natives.CAM.IGNORE_MENU_PREFERENCE_FOR_BONNET_CAMERA_THIS_UPDATE() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.IGNORE_MENU_PREFERENCE_FOR_BONNET_CAMERA_THIS_UPDATE' due to disabled trusted mode")

	local result = native_call(0x7B8A361C1813FBEF)
end
natives.cam.ignore_menu_preference_for_bonnet_camera_this_update = natives.CAM.IGNORE_MENU_PREFERENCE_FOR_BONNET_CAMERA_THIS_UPDATE

function natives.CAM.BYPASS_CUTSCENE_CAM_RENDERING_THIS_UPDATE() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.BYPASS_CUTSCENE_CAM_RENDERING_THIS_UPDATE' due to disabled trusted mode")

	local result = native_call(0xDB629FFD9285FA06)
end
natives.cam.bypass_cutscene_cam_rendering_this_update = natives.CAM.BYPASS_CUTSCENE_CAM_RENDERING_THIS_UPDATE

function natives.CAM.STOP_CUTSCENE_CAM_SHAKING(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.STOP_CUTSCENE_CAM_SHAKING' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x324C5AA411DA7737, p0)
end
natives.cam.stop_cutscene_cam_shaking = natives.CAM.STOP_CUTSCENE_CAM_SHAKING

--[[
Hardcoded to only work in multiplayer.
]]
function natives.CAM.SET_CUTSCENE_CAM_FAR_CLIP_THIS_UPDATE(--[[float]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_CUTSCENE_CAM_FAR_CLIP_THIS_UPDATE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x12DED8CA53D47EA5, p0)
end
natives.cam.set_cutscene_cam_far_clip_this_update = natives.CAM.SET_CUTSCENE_CAM_FAR_CLIP_THIS_UPDATE

function natives.CAM.GET_FOCUS_PED_ON_SCREEN(--[[float]] p0, --[[int]] p1, --[[float]] p2, --[[float]] p3, --[[float]] p4, --[[float]] p5, --[[float]] p6, --[[int]] p7, --[[int]] p8) -- Returns Ped
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.GET_FOCUS_PED_ON_SCREEN' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")
	assert(type(p6) == "number", "Arg #7 (p6) must be a number.")
	assert(type(p7) == "number", "Arg #8 (p7) must be a number.")
	assert(type(p8) == "number", "Arg #9 (p8) must be a number.")

	local result = native_call(0x89215EC747DF244A, p0, p1, p2, p3, p4, p5, p6, p7, p8)
	return result:__tointeger()
end
natives.cam.get_focus_ped_on_screen = natives.CAM.GET_FOCUS_PED_ON_SCREEN

function natives.CAM.DISABLE_NEAR_CLIP_SCAN_THIS_UPDATE() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.DISABLE_NEAR_CLIP_SCAN_THIS_UPDATE' due to disabled trusted mode")

	local result = native_call(0x5A43C76F7FC7BA5F)
end
natives.cam.disable_near_clip_scan_this_update = natives.CAM.DISABLE_NEAR_CLIP_SCAN_THIS_UPDATE

--[[
if p0 is 0, effect is cancelled

if p0 is 1, effect zooms in, gradually tilts cam clockwise apx 30 degrees, wobbles slowly. Motion blur is active until cancelled.

if p0 is 2, effect immediately tilts cam clockwise apx 30 degrees, begins to wobble slowly, then gradually tilts cam back to normal. The wobbling will continue until the effect is cancelled.
]]
function natives.CAM.SET_CAM_DEATH_FAIL_EFFECT_STATE(--[[int]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_CAM_DEATH_FAIL_EFFECT_STATE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x80C8B1846639BB19, p0)
end
natives.cam.set_cam_death_fail_effect_state = natives.CAM.SET_CAM_DEATH_FAIL_EFFECT_STATE

function natives.CAM.SET_FIRST_PERSON_FLASH_EFFECT_TYPE(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_FIRST_PERSON_FLASH_EFFECT_TYPE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x5C41E6BABC9E2112, p0)
end
natives.cam.set_first_person_flash_effect_type = natives.CAM.SET_FIRST_PERSON_FLASH_EFFECT_TYPE

--[[
From b617 scripts:

CAM::_21E253A7F8DA5DFB("DINGHY");
CAM::_21E253A7F8DA5DFB("ISSI2");
CAM::_21E253A7F8DA5DFB("SPEEDO");
]]
function natives.CAM.SET_FIRST_PERSON_FLASH_EFFECT_VEHICLE_MODEL_NAME(--[[const char*]] vehicleName) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_FIRST_PERSON_FLASH_EFFECT_VEHICLE_MODEL_NAME' due to disabled trusted mode")

	assert(type(vehicleName) == "string", "Arg #1 (vehicleName) must be a string.")

	local result = native_call(0x21E253A7F8DA5DFB, vehicleName)
end
natives.cam.set_first_person_flash_effect_vehicle_model_name = natives.CAM.SET_FIRST_PERSON_FLASH_EFFECT_VEHICLE_MODEL_NAME

function natives.CAM.SET_FIRST_PERSON_FLASH_EFFECT_VEHICLE_MODEL_HASH(--[[Hash]] vehicleModel) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.SET_FIRST_PERSON_FLASH_EFFECT_VEHICLE_MODEL_HASH' due to disabled trusted mode")

	assert(type(vehicleModel) == "number", "Arg #1 (vehicleModel) must be a number.")

	local result = native_call(0x11FA5D3479C7DD47, vehicleModel)
end
natives.cam.set_first_person_flash_effect_vehicle_model_hash = natives.CAM.SET_FIRST_PERSON_FLASH_EFFECT_VEHICLE_MODEL_HASH

function natives.CAM.IS_ALLOWED_INDEPENDENT_CAMERA_MODES() -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.IS_ALLOWED_INDEPENDENT_CAMERA_MODES' due to disabled trusted mode")

	local result = native_call(0xEAF0FA793D05C592)
	return result:__tointeger()
end
natives.cam.is_allowed_independent_camera_modes = natives.CAM.IS_ALLOWED_INDEPENDENT_CAMERA_MODES

function natives.CAM.CAMERA_PREVENT_COLLISION_SETTINGS_FOR_TRIPLEHEAD_IN_INTERIORS_THIS_UPDATE() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.CAMERA_PREVENT_COLLISION_SETTINGS_FOR_TRIPLEHEAD_IN_INTERIORS_THIS_UPDATE' due to disabled trusted mode")

	local result = native_call(0x62374889A4D59F72)
end
natives.cam.camera_prevent_collision_settings_for_triplehead_in_interiors_this_update = natives.CAM.CAMERA_PREVENT_COLLISION_SETTINGS_FOR_TRIPLEHEAD_IN_INTERIORS_THIS_UPDATE

function natives.CAM.REPLAY_GET_MAX_DISTANCE_ALLOWED_FROM_PLAYER() -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CAM.REPLAY_GET_MAX_DISTANCE_ALLOWED_FROM_PLAYER' due to disabled trusted mode")

	local result = native_call(0x8BFCEB5EA1B161B6)
	return result:__tonumber()
end
natives.cam.replay_get_max_distance_allowed_from_player = natives.CAM.REPLAY_GET_MAX_DISTANCE_ALLOWED_FROM_PLAYER


natives.CLOCK = {}
natives.clock = {}

--[[
SET_CLOCK_TIME(12, 34, 56);
]]
function natives.CLOCK.SET_CLOCK_TIME(--[[int]] hour, --[[int]] minute, --[[int]] second) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CLOCK.SET_CLOCK_TIME' due to disabled trusted mode")

	assert(type(hour) == "number", "Arg #1 (hour) must be a number.")
	assert(type(minute) == "number", "Arg #2 (minute) must be a number.")
	assert(type(second) == "number", "Arg #3 (second) must be a number.")

	local result = native_call(0x47C3B5848C3E45D8, hour, minute, second)
end
natives.clock.set_clock_time = natives.CLOCK.SET_CLOCK_TIME

function natives.CLOCK.PAUSE_CLOCK(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CLOCK.PAUSE_CLOCK' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x4055E40BD2DBEC1D, toggle)
end
natives.clock.pause_clock = natives.CLOCK.PAUSE_CLOCK

function natives.CLOCK.ADVANCE_CLOCK_TIME_TO(--[[int]] hour, --[[int]] minute, --[[int]] second) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CLOCK.ADVANCE_CLOCK_TIME_TO' due to disabled trusted mode")

	assert(type(hour) == "number", "Arg #1 (hour) must be a number.")
	assert(type(minute) == "number", "Arg #2 (minute) must be a number.")
	assert(type(second) == "number", "Arg #3 (second) must be a number.")

	local result = native_call(0xC8CA9670B9D83B3B, hour, minute, second)
end
natives.clock.advance_clock_time_to = natives.CLOCK.ADVANCE_CLOCK_TIME_TO

function natives.CLOCK.ADD_TO_CLOCK_TIME(--[[int]] hours, --[[int]] minutes, --[[int]] seconds) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CLOCK.ADD_TO_CLOCK_TIME' due to disabled trusted mode")

	assert(type(hours) == "number", "Arg #1 (hours) must be a number.")
	assert(type(minutes) == "number", "Arg #2 (minutes) must be a number.")
	assert(type(seconds) == "number", "Arg #3 (seconds) must be a number.")

	local result = native_call(0xD716F30D8C8980E2, hours, minutes, seconds)
end
natives.clock.add_to_clock_time = natives.CLOCK.ADD_TO_CLOCK_TIME

--[[
Gets the current ingame hour, expressed without zeros. (09:34 will be represented as 9)
]]
function natives.CLOCK.GET_CLOCK_HOURS() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CLOCK.GET_CLOCK_HOURS' due to disabled trusted mode")

	local result = native_call(0x25223CA6B4D20B7F)
	return result:__tointeger()
end
natives.clock.get_clock_hours = natives.CLOCK.GET_CLOCK_HOURS

--[[
Gets the current ingame clock minute.
]]
function natives.CLOCK.GET_CLOCK_MINUTES() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CLOCK.GET_CLOCK_MINUTES' due to disabled trusted mode")

	local result = native_call(0x13D2B8ADD79640F2)
	return result:__tointeger()
end
natives.clock.get_clock_minutes = natives.CLOCK.GET_CLOCK_MINUTES

--[[
Gets the current ingame clock second. Note that ingame clock seconds change really fast since a day in GTA is only 48 minutes in real life.
]]
function natives.CLOCK.GET_CLOCK_SECONDS() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CLOCK.GET_CLOCK_SECONDS' due to disabled trusted mode")

	local result = native_call(0x494E97C2EF27C470)
	return result:__tointeger()
end
natives.clock.get_clock_seconds = natives.CLOCK.GET_CLOCK_SECONDS

function natives.CLOCK.SET_CLOCK_DATE(--[[int]] day, --[[int]] month, --[[int]] year) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CLOCK.SET_CLOCK_DATE' due to disabled trusted mode")

	assert(type(day) == "number", "Arg #1 (day) must be a number.")
	assert(type(month) == "number", "Arg #2 (month) must be a number.")
	assert(type(year) == "number", "Arg #3 (year) must be a number.")

	local result = native_call(0xB096419DF0D06CE7, day, month, year)
end
natives.clock.set_clock_date = natives.CLOCK.SET_CLOCK_DATE

--[[
Gets the current day of the week.

0: Sunday
1: Monday
2: Tuesday
3: Wednesday
4: Thursday
5: Friday
6: Saturday
]]
function natives.CLOCK.GET_CLOCK_DAY_OF_WEEK() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CLOCK.GET_CLOCK_DAY_OF_WEEK' due to disabled trusted mode")

	local result = native_call(0xD972E4BD7AEB235F)
	return result:__tointeger()
end
natives.clock.get_clock_day_of_week = natives.CLOCK.GET_CLOCK_DAY_OF_WEEK

function natives.CLOCK.GET_CLOCK_DAY_OF_MONTH() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CLOCK.GET_CLOCK_DAY_OF_MONTH' due to disabled trusted mode")

	local result = native_call(0x3D10BC92A4DB1D35)
	return result:__tointeger()
end
natives.clock.get_clock_day_of_month = natives.CLOCK.GET_CLOCK_DAY_OF_MONTH

function natives.CLOCK.GET_CLOCK_MONTH() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CLOCK.GET_CLOCK_MONTH' due to disabled trusted mode")

	local result = native_call(0xBBC72712E80257A1)
	return result:__tointeger()
end
natives.clock.get_clock_month = natives.CLOCK.GET_CLOCK_MONTH

function natives.CLOCK.GET_CLOCK_YEAR() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CLOCK.GET_CLOCK_YEAR' due to disabled trusted mode")

	local result = native_call(0x961777E64BDAF717)
	return result:__tointeger()
end
natives.clock.get_clock_year = natives.CLOCK.GET_CLOCK_YEAR

function natives.CLOCK.GET_MILLISECONDS_PER_GAME_MINUTE() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CLOCK.GET_MILLISECONDS_PER_GAME_MINUTE' due to disabled trusted mode")

	local result = native_call(0x2F8B4D1C595B11DB)
	return result:__tointeger()
end
natives.clock.get_milliseconds_per_game_minute = natives.CLOCK.GET_MILLISECONDS_PER_GAME_MINUTE

--[[
Gets system time as year, month, day, hour, minute and second.

Example usage:

    int year;
 int month;
    int day;
  int hour;
 int minute;
   int second;

 TIME::GET_POSIX_TIME(&year, &month, &day, &hour, &minute, &second);

]]
function natives.CLOCK.GET_POSIX_TIME(--[[int*]] year, --[[int*]] month, --[[int*]] day, --[[int*]] hour, --[[int*]] minute, --[[int*]] second) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CLOCK.GET_POSIX_TIME' due to disabled trusted mode")

	assert(type(year) == "userdata", "Arg #1 (year) must be a userdata.")
	assert(type(month) == "userdata", "Arg #2 (month) must be a userdata.")
	assert(type(day) == "userdata", "Arg #3 (day) must be a userdata.")
	assert(type(hour) == "userdata", "Arg #4 (hour) must be a userdata.")
	assert(type(minute) == "userdata", "Arg #5 (minute) must be a userdata.")
	assert(type(second) == "userdata", "Arg #6 (second) must be a userdata.")

	local result = native_call(0xDA488F299A5B164E, year, month, day, hour, minute, second)
end
natives.clock.get_posix_time = natives.CLOCK.GET_POSIX_TIME

--[[
Gets current UTC time
]]
function natives.CLOCK.GET_UTC_TIME(--[[int*]] year, --[[int*]] month, --[[int*]] day, --[[int*]] hour, --[[int*]] minute, --[[int*]] second) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CLOCK.GET_UTC_TIME' due to disabled trusted mode")

	assert(type(year) == "userdata", "Arg #1 (year) must be a userdata.")
	assert(type(month) == "userdata", "Arg #2 (month) must be a userdata.")
	assert(type(day) == "userdata", "Arg #3 (day) must be a userdata.")
	assert(type(hour) == "userdata", "Arg #4 (hour) must be a userdata.")
	assert(type(minute) == "userdata", "Arg #5 (minute) must be a userdata.")
	assert(type(second) == "userdata", "Arg #6 (second) must be a userdata.")

	local result = native_call(0x8117E09A19EEF4D3, year, month, day, hour, minute, second)
end
natives.clock.get_utc_time = natives.CLOCK.GET_UTC_TIME

--[[
Gets local system time as year, month, day, hour, minute and second.

Example usage:

int year;
int month;
int day;
int hour;
int minute;
int second;
or use std::tm struct

TIME::GET_LOCAL_TIME(&year, &month, &day, &hour, &minute, &second);

]]
function natives.CLOCK.GET_LOCAL_TIME(--[[int*]] year, --[[int*]] month, --[[int*]] day, --[[int*]] hour, --[[int*]] minute, --[[int*]] second) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CLOCK.GET_LOCAL_TIME' due to disabled trusted mode")

	assert(type(year) == "userdata", "Arg #1 (year) must be a userdata.")
	assert(type(month) == "userdata", "Arg #2 (month) must be a userdata.")
	assert(type(day) == "userdata", "Arg #3 (day) must be a userdata.")
	assert(type(hour) == "userdata", "Arg #4 (hour) must be a userdata.")
	assert(type(minute) == "userdata", "Arg #5 (minute) must be a userdata.")
	assert(type(second) == "userdata", "Arg #6 (second) must be a userdata.")

	local result = native_call(0x50C7A99057A69748, year, month, day, hour, minute, second)
end
natives.clock.get_local_time = natives.CLOCK.GET_LOCAL_TIME


natives.CUTSCENE = {}
natives.cutscene = {}

--[[
flags: Usually 8
Full list of cutscene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/cutsceneNames.json
]]
function natives.CUTSCENE.REQUEST_CUTSCENE(--[[const char*]] cutsceneName, --[[int]] flags) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CUTSCENE.REQUEST_CUTSCENE' due to disabled trusted mode")

	assert(type(cutsceneName) == "string", "Arg #1 (cutsceneName) must be a string.")
	assert(type(flags) == "number", "Arg #2 (flags) must be a number.")

	local result = native_call(0x7A86743F475D9E09, cutsceneName, flags)
end
natives.cutscene.request_cutscene = natives.CUTSCENE.REQUEST_CUTSCENE

--[[
flags: Usually 8

playbackFlags: Which scenes should be played.
Example: 0x105 (bit 0, 2 and 8 set) will enable scene 1, 3 and 9.
Full list of cutscene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/cutsceneNames.json
]]
function natives.CUTSCENE.REQUEST_CUTSCENE_WITH_PLAYBACK_LIST(--[[const char*]] cutsceneName, --[[int]] playbackFlags, --[[int]] flags) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CUTSCENE.REQUEST_CUTSCENE_WITH_PLAYBACK_LIST' due to disabled trusted mode")

	assert(type(cutsceneName) == "string", "Arg #1 (cutsceneName) must be a string.")
	assert(type(playbackFlags) == "number", "Arg #2 (playbackFlags) must be a number.")
	assert(type(flags) == "number", "Arg #3 (flags) must be a number.")

	local result = native_call(0xC23DE0E91C30B58C, cutsceneName, playbackFlags, flags)
end
natives.cutscene.request_cutscene_with_playback_list = natives.CUTSCENE.REQUEST_CUTSCENE_WITH_PLAYBACK_LIST

function natives.CUTSCENE.REMOVE_CUTSCENE() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CUTSCENE.REMOVE_CUTSCENE' due to disabled trusted mode")

	local result = native_call(0x440AF51A3462B86F)
end
natives.cutscene.remove_cutscene = natives.CUTSCENE.REMOVE_CUTSCENE

function natives.CUTSCENE.HAS_CUTSCENE_LOADED() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CUTSCENE.HAS_CUTSCENE_LOADED' due to disabled trusted mode")

	local result = native_call(0xC59F528E9AB9F339)
	return result:__tointeger() ~= 0
end
natives.cutscene.has_cutscene_loaded = natives.CUTSCENE.HAS_CUTSCENE_LOADED

--[[
Full list of cutscene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/cutsceneNames.json
]]
function natives.CUTSCENE.HAS_THIS_CUTSCENE_LOADED(--[[const char*]] cutsceneName) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CUTSCENE.HAS_THIS_CUTSCENE_LOADED' due to disabled trusted mode")

	assert(type(cutsceneName) == "string", "Arg #1 (cutsceneName) must be a string.")

	local result = native_call(0x228D3D94F8A11C3C, cutsceneName)
	return result:__tointeger() ~= 0
end
natives.cutscene.has_this_cutscene_loaded = natives.CUTSCENE.HAS_THIS_CUTSCENE_LOADED

--[[
Sets the cutscene's owning thread ID.
]]
function natives.CUTSCENE.SET_SCRIPT_CAN_START_CUTSCENE(--[[int]] threadId) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CUTSCENE.SET_SCRIPT_CAN_START_CUTSCENE' due to disabled trusted mode")

	assert(type(threadId) == "number", "Arg #1 (threadId) must be a number.")

	local result = native_call(0x8D9DF6ECA8768583, threadId)
end
natives.cutscene.set_script_can_start_cutscene = natives.CUTSCENE.SET_SCRIPT_CAN_START_CUTSCENE

function natives.CUTSCENE.CAN_REQUEST_ASSETS_FOR_CUTSCENE_ENTITY() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CUTSCENE.CAN_REQUEST_ASSETS_FOR_CUTSCENE_ENTITY' due to disabled trusted mode")

	local result = native_call(0xB56BBBCC2955D9CB)
	return result:__tointeger() ~= 0
end
natives.cutscene.can_request_assets_for_cutscene_entity = natives.CUTSCENE.CAN_REQUEST_ASSETS_FOR_CUTSCENE_ENTITY

function natives.CUTSCENE.IS_CUTSCENE_PLAYBACK_FLAG_SET(--[[int]] flag) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CUTSCENE.IS_CUTSCENE_PLAYBACK_FLAG_SET' due to disabled trusted mode")

	assert(type(flag) == "number", "Arg #1 (flag) must be a number.")

	local result = native_call(0x71B74D2AE19338D0, flag)
	return result:__tointeger() ~= 0
end
natives.cutscene.is_cutscene_playback_flag_set = natives.CUTSCENE.IS_CUTSCENE_PLAYBACK_FLAG_SET

function natives.CUTSCENE.SET_CUTSCENE_ENTITY_STREAMING_FLAGS(--[[const char*]] cutsceneEntName, --[[int]] p1, --[[int]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CUTSCENE.SET_CUTSCENE_ENTITY_STREAMING_FLAGS' due to disabled trusted mode")

	assert(type(cutsceneEntName) == "string", "Arg #1 (cutsceneEntName) must be a string.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0x4C61C75BEE8184C2, cutsceneEntName, p1, p2)
end
natives.cutscene.set_cutscene_entity_streaming_flags = natives.CUTSCENE.SET_CUTSCENE_ENTITY_STREAMING_FLAGS

--[[
Simply loads the cutscene and doesn't do extra stuff that REQUEST_CUTSCENE does.
Full list of cutscene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/cutsceneNames.json
]]
function natives.CUTSCENE.REQUEST_CUT_FILE(--[[const char*]] cutsceneName) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CUTSCENE.REQUEST_CUT_FILE' due to disabled trusted mode")

	assert(type(cutsceneName) == "string", "Arg #1 (cutsceneName) must be a string.")

	local result = native_call(0x06A3524161C502BA, cutsceneName)
end
natives.cutscene.request_cut_file = natives.CUTSCENE.REQUEST_CUT_FILE

--[[
Simply checks if the cutscene has loaded and doesn't check via CutSceneManager as opposed to HAS_[THIS]_CUTSCENE_LOADED.
Full list of cutscene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/cutsceneNames.json
]]
function natives.CUTSCENE.HAS_CUT_FILE_LOADED(--[[const char*]] cutsceneName) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CUTSCENE.HAS_CUT_FILE_LOADED' due to disabled trusted mode")

	assert(type(cutsceneName) == "string", "Arg #1 (cutsceneName) must be a string.")

	local result = native_call(0xA1C996C2A744262E, cutsceneName)
	return result:__tointeger() ~= 0
end
natives.cutscene.has_cut_file_loaded = natives.CUTSCENE.HAS_CUT_FILE_LOADED

--[[
Simply unloads the cutscene and doesn't do extra stuff that REMOVE_CUTSCENE does.
Full list of cutscene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/cutsceneNames.json
]]
function natives.CUTSCENE.REMOVE_CUT_FILE(--[[const char*]] cutsceneName) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CUTSCENE.REMOVE_CUT_FILE' due to disabled trusted mode")

	assert(type(cutsceneName) == "string", "Arg #1 (cutsceneName) must be a string.")

	local result = native_call(0xD00D76A7DFC9D852, cutsceneName)
end
natives.cutscene.remove_cut_file = natives.CUTSCENE.REMOVE_CUT_FILE

--[[
Full list of cutscene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/cutsceneNames.json
]]
function natives.CUTSCENE.GET_CUT_FILE_CONCAT_COUNT(--[[const char*]] cutsceneName) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CUTSCENE.GET_CUT_FILE_CONCAT_COUNT' due to disabled trusted mode")

	assert(type(cutsceneName) == "string", "Arg #1 (cutsceneName) must be a string.")

	local result = native_call(0x0ABC54DE641DC0FC, cutsceneName)
	return result:__tointeger()
end
natives.cutscene.get_cut_file_concat_count = natives.CUTSCENE.GET_CUT_FILE_CONCAT_COUNT

--[[
flags: Usually 0.
]]
function natives.CUTSCENE.START_CUTSCENE(--[[int]] flags) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CUTSCENE.START_CUTSCENE' due to disabled trusted mode")

	assert(type(flags) == "number", "Arg #1 (flags) must be a number.")

	local result = native_call(0x186D5CB5E7B0FF7B, flags)
end
natives.cutscene.start_cutscene = natives.CUTSCENE.START_CUTSCENE

--[[
flags: Usually 0.
]]
function natives.CUTSCENE.START_CUTSCENE_AT_COORDS(--[[float]] x, --[[float]] y, --[[float]] z, --[[int]] flags) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CUTSCENE.START_CUTSCENE_AT_COORDS' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(flags) == "number", "Arg #4 (flags) must be a number.")

	local result = native_call(0x1C9ADDA3244A1FBF, x, y, z, flags)
end
natives.cutscene.start_cutscene_at_coords = natives.CUTSCENE.START_CUTSCENE_AT_COORDS

function natives.CUTSCENE.STOP_CUTSCENE(--[[BOOL]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CUTSCENE.STOP_CUTSCENE' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0xC7272775B4DC786E, p0)
end
natives.cutscene.stop_cutscene = natives.CUTSCENE.STOP_CUTSCENE

function natives.CUTSCENE.STOP_CUTSCENE_IMMEDIATELY() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CUTSCENE.STOP_CUTSCENE_IMMEDIATELY' due to disabled trusted mode")

	local result = native_call(0xD220BDD222AC4A1E)
end
natives.cutscene.stop_cutscene_immediately = natives.CUTSCENE.STOP_CUTSCENE_IMMEDIATELY

--[[
p3 could be heading. Needs more research.
]]
function natives.CUTSCENE.SET_CUTSCENE_ORIGIN(--[[float]] x, --[[float]] y, --[[float]] z, --[[float]] p3, --[[int]] p4) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CUTSCENE.SET_CUTSCENE_ORIGIN' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")

	local result = native_call(0xB812B3FD1C01CF27, x, y, z, p3, p4)
end
natives.cutscene.set_cutscene_origin = natives.CUTSCENE.SET_CUTSCENE_ORIGIN

function natives.CUTSCENE.SET_CUTSCENE_ORIGIN_AND_ORIENTATION(--[[float]] x1, --[[float]] y1, --[[float]] z1, --[[float]] x2, --[[float]] y2, --[[float]] z2, --[[int]] p6) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CUTSCENE.SET_CUTSCENE_ORIGIN_AND_ORIENTATION' due to disabled trusted mode")

	assert(type(x1) == "number", "Arg #1 (x1) must be a number.")
	assert(type(y1) == "number", "Arg #2 (y1) must be a number.")
	assert(type(z1) == "number", "Arg #3 (z1) must be a number.")
	assert(type(x2) == "number", "Arg #4 (x2) must be a number.")
	assert(type(y2) == "number", "Arg #5 (y2) must be a number.")
	assert(type(z2) == "number", "Arg #6 (z2) must be a number.")
	assert(type(p6) == "number", "Arg #7 (p6) must be a number.")

	local result = native_call(0x011883F41211432A, x1, y1, z1, x2, y2, z2, p6)
end
natives.cutscene.set_cutscene_origin_and_orientation = natives.CUTSCENE.SET_CUTSCENE_ORIGIN_AND_ORIENTATION

function natives.CUTSCENE.GET_CUTSCENE_TIME() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CUTSCENE.GET_CUTSCENE_TIME' due to disabled trusted mode")

	local result = native_call(0xE625BEABBAFFDAB9)
	return result:__tointeger()
end
natives.cutscene.get_cutscene_time = natives.CUTSCENE.GET_CUTSCENE_TIME

function natives.CUTSCENE.GET_CUTSCENE_TOTAL_DURATION() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CUTSCENE.GET_CUTSCENE_TOTAL_DURATION' due to disabled trusted mode")

	local result = native_call(0xEE53B14A19E480D4)
	return result:__tointeger()
end
natives.cutscene.get_cutscene_total_duration = natives.CUTSCENE.GET_CUTSCENE_TOTAL_DURATION

function natives.CUTSCENE.GET_CUTSCENE_END_TIME() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CUTSCENE.GET_CUTSCENE_END_TIME' due to disabled trusted mode")

	local result = native_call(0x971D7B15BCDBEF99)
	return result:__tointeger()
end
natives.cutscene.get_cutscene_end_time = natives.CUTSCENE.GET_CUTSCENE_END_TIME

function natives.CUTSCENE.WAS_CUTSCENE_SKIPPED() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CUTSCENE.WAS_CUTSCENE_SKIPPED' due to disabled trusted mode")

	local result = native_call(0x40C8656EDAEDD569)
	return result:__tointeger() ~= 0
end
natives.cutscene.was_cutscene_skipped = natives.CUTSCENE.WAS_CUTSCENE_SKIPPED

function natives.CUTSCENE.HAS_CUTSCENE_FINISHED() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CUTSCENE.HAS_CUTSCENE_FINISHED' due to disabled trusted mode")

	local result = native_call(0x7C0A893088881D57)
	return result:__tointeger() ~= 0
end
natives.cutscene.has_cutscene_finished = natives.CUTSCENE.HAS_CUTSCENE_FINISHED

function natives.CUTSCENE.IS_CUTSCENE_ACTIVE() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CUTSCENE.IS_CUTSCENE_ACTIVE' due to disabled trusted mode")

	local result = native_call(0x991251AFC3981F84)
	return result:__tointeger() ~= 0
end
natives.cutscene.is_cutscene_active = natives.CUTSCENE.IS_CUTSCENE_ACTIVE

function natives.CUTSCENE.IS_CUTSCENE_PLAYING() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CUTSCENE.IS_CUTSCENE_PLAYING' due to disabled trusted mode")

	local result = native_call(0xD3C2E180A40F031E)
	return result:__tointeger() ~= 0
end
natives.cutscene.is_cutscene_playing = natives.CUTSCENE.IS_CUTSCENE_PLAYING

function natives.CUTSCENE.GET_CUTSCENE_SECTION_PLAYING() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CUTSCENE.GET_CUTSCENE_SECTION_PLAYING' due to disabled trusted mode")

	local result = native_call(0x49010A6A396553D8)
	return result:__tointeger()
end
natives.cutscene.get_cutscene_section_playing = natives.CUTSCENE.GET_CUTSCENE_SECTION_PLAYING

function natives.CUTSCENE.GET_ENTITY_INDEX_OF_CUTSCENE_ENTITY(--[[const char*]] cutsceneEntName, --[[Hash]] modelHash) -- Returns Entity
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CUTSCENE.GET_ENTITY_INDEX_OF_CUTSCENE_ENTITY' due to disabled trusted mode")

	assert(type(cutsceneEntName) == "string", "Arg #1 (cutsceneEntName) must be a string.")
	assert(type(modelHash) == "number", "Arg #2 (modelHash) must be a number.")

	local result = native_call(0x0A2E9FDB9A8C62F6, cutsceneEntName, modelHash)
	return result:__tointeger()
end
natives.cutscene.get_entity_index_of_cutscene_entity = natives.CUTSCENE.GET_ENTITY_INDEX_OF_CUTSCENE_ENTITY

function natives.CUTSCENE.GET_CUTSCENE_CONCAT_SECTION_PLAYING() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CUTSCENE.GET_CUTSCENE_CONCAT_SECTION_PLAYING' due to disabled trusted mode")

	local result = native_call(0x583DF8E3D4AFBD98)
	return result:__tointeger()
end
natives.cutscene.get_cutscene_concat_section_playing = natives.CUTSCENE.GET_CUTSCENE_CONCAT_SECTION_PLAYING

--[[
This function is hard-coded to always return 1.
]]
function natives.CUTSCENE.IS_CUTSCENE_AUTHORIZED(--[[const char*]] cutsceneName) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CUTSCENE.IS_CUTSCENE_AUTHORIZED' due to disabled trusted mode")

	assert(type(cutsceneName) == "string", "Arg #1 (cutsceneName) must be a string.")

	local result = native_call(0x4CEBC1ED31E8925E, cutsceneName)
	return result:__tointeger() ~= 0
end
natives.cutscene.is_cutscene_authorized = natives.CUTSCENE.IS_CUTSCENE_AUTHORIZED

function natives.CUTSCENE.DOES_CUTSCENE_HANDLE_EXIST(--[[Any]] p0) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CUTSCENE.DOES_CUTSCENE_HANDLE_EXIST' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x4FCD976DA686580C, p0)
	return result:__tointeger()
end
natives.cutscene.does_cutscene_handle_exist = natives.CUTSCENE.DOES_CUTSCENE_HANDLE_EXIST

function natives.CUTSCENE.REGISTER_ENTITY_FOR_CUTSCENE(--[[Ped]] cutscenePed, --[[const char*]] cutsceneEntName, --[[int]] p2, --[[Hash]] modelHash, --[[int]] p4) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CUTSCENE.REGISTER_ENTITY_FOR_CUTSCENE' due to disabled trusted mode")

	assert(type(cutscenePed) == "number", "Arg #1 (cutscenePed) must be a number.")
	assert(type(cutsceneEntName) == "string", "Arg #2 (cutsceneEntName) must be a string.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(modelHash) == "number", "Arg #4 (modelHash) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")

	local result = native_call(0xE40C1C56DF95C2E8, cutscenePed, cutsceneEntName, p2, modelHash, p4)
end
natives.cutscene.register_entity_for_cutscene = natives.CUTSCENE.REGISTER_ENTITY_FOR_CUTSCENE

function natives.CUTSCENE.GET_ENTITY_INDEX_OF_REGISTERED_ENTITY(--[[const char*]] cutsceneEntName, --[[Hash]] modelHash) -- Returns Entity
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CUTSCENE.GET_ENTITY_INDEX_OF_REGISTERED_ENTITY' due to disabled trusted mode")

	assert(type(cutsceneEntName) == "string", "Arg #1 (cutsceneEntName) must be a string.")
	assert(type(modelHash) == "number", "Arg #2 (modelHash) must be a number.")

	local result = native_call(0xC0741A26499654CD, cutsceneEntName, modelHash)
	return result:__tointeger()
end
natives.cutscene.get_entity_index_of_registered_entity = natives.CUTSCENE.GET_ENTITY_INDEX_OF_REGISTERED_ENTITY

--[[
Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
]]
function natives.CUTSCENE.SET_VEHICLE_MODEL_PLAYER_WILL_EXIT_SCENE(--[[Hash]] modelHash) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CUTSCENE.SET_VEHICLE_MODEL_PLAYER_WILL_EXIT_SCENE' due to disabled trusted mode")

	assert(type(modelHash) == "number", "Arg #1 (modelHash) must be a number.")

	local result = native_call(0x7F96F23FA9B73327, modelHash)
end
natives.cutscene.set_vehicle_model_player_will_exit_scene = natives.CUTSCENE.SET_VEHICLE_MODEL_PLAYER_WILL_EXIT_SCENE

--[[
Only used twice in R* scripts
]]
function natives.CUTSCENE.SET_CUTSCENE_TRIGGER_AREA(--[[float]] x1, --[[float]] y1, --[[float]] z1, --[[float]] x2, --[[float]] y2, --[[float]] z2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CUTSCENE.SET_CUTSCENE_TRIGGER_AREA' due to disabled trusted mode")

	assert(type(x1) == "number", "Arg #1 (x1) must be a number.")
	assert(type(y1) == "number", "Arg #2 (y1) must be a number.")
	assert(type(z1) == "number", "Arg #3 (z1) must be a number.")
	assert(type(x2) == "number", "Arg #4 (x2) must be a number.")
	assert(type(y2) == "number", "Arg #5 (y2) must be a number.")
	assert(type(z2) == "number", "Arg #6 (z2) must be a number.")

	local result = native_call(0x9896CE4721BE84BA, x1, y1, z1, x2, y2, z2)
end
natives.cutscene.set_cutscene_trigger_area = natives.CUTSCENE.SET_CUTSCENE_TRIGGER_AREA

--[[
modelHash (p1) was always 0 in R* scripts
]]
function natives.CUTSCENE.CAN_SET_ENTER_STATE_FOR_REGISTERED_ENTITY(--[[const char*]] cutsceneEntName, --[[Hash]] modelHash) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CUTSCENE.CAN_SET_ENTER_STATE_FOR_REGISTERED_ENTITY' due to disabled trusted mode")

	assert(type(cutsceneEntName) == "string", "Arg #1 (cutsceneEntName) must be a string.")
	assert(type(modelHash) == "number", "Arg #2 (modelHash) must be a number.")

	local result = native_call(0x645D0B458D8E17B5, cutsceneEntName, modelHash)
	return result:__tointeger() ~= 0
end
natives.cutscene.can_set_enter_state_for_registered_entity = natives.CUTSCENE.CAN_SET_ENTER_STATE_FOR_REGISTERED_ENTITY

function natives.CUTSCENE.CAN_SET_EXIT_STATE_FOR_REGISTERED_ENTITY(--[[const char*]] cutsceneEntName, --[[Hash]] modelHash) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CUTSCENE.CAN_SET_EXIT_STATE_FOR_REGISTERED_ENTITY' due to disabled trusted mode")

	assert(type(cutsceneEntName) == "string", "Arg #1 (cutsceneEntName) must be a string.")
	assert(type(modelHash) == "number", "Arg #2 (modelHash) must be a number.")

	local result = native_call(0x4C6A6451C79E4662, cutsceneEntName, modelHash)
	return result:__tointeger() ~= 0
end
natives.cutscene.can_set_exit_state_for_registered_entity = natives.CUTSCENE.CAN_SET_EXIT_STATE_FOR_REGISTERED_ENTITY

function natives.CUTSCENE.CAN_SET_EXIT_STATE_FOR_CAMERA(--[[BOOL]] p0) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CUTSCENE.CAN_SET_EXIT_STATE_FOR_CAMERA' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0xB2CBCD0930DFB420, p0)
	return result:__tointeger() ~= 0
end
natives.cutscene.can_set_exit_state_for_camera = natives.CUTSCENE.CAN_SET_EXIT_STATE_FOR_CAMERA

--[[
Toggles a value (bool) for cutscenes.
]]
function natives.CUTSCENE.SET_PAD_CAN_SHAKE_DURING_CUTSCENE(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CUTSCENE.SET_PAD_CAN_SHAKE_DURING_CUTSCENE' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0xC61B86C9F61EB404, toggle)
end
natives.cutscene.set_pad_can_shake_during_cutscene = natives.CUTSCENE.SET_PAD_CAN_SHAKE_DURING_CUTSCENE

function natives.CUTSCENE.SET_CUTSCENE_FADE_VALUES(--[[BOOL]] p0, --[[BOOL]] p1, --[[BOOL]] p2, --[[BOOL]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CUTSCENE.SET_CUTSCENE_FADE_VALUES' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")
	assert(type(p3) == "boolean", "Arg #4 (p3) must be a boolean.")

	local result = native_call(0x8093F23ABACCC7D4, p0, p1, p2, p3)
end
natives.cutscene.set_cutscene_fade_values = natives.CUTSCENE.SET_CUTSCENE_FADE_VALUES

function natives.CUTSCENE.SET_CUTSCENE_MULTIHEAD_FADE(--[[BOOL]] p0, --[[BOOL]] p1, --[[BOOL]] p2, --[[BOOL]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CUTSCENE.SET_CUTSCENE_MULTIHEAD_FADE' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")
	assert(type(p3) == "boolean", "Arg #4 (p3) must be a boolean.")

	local result = native_call(0x20746F7B1032A3C7, p0, p1, p2, p3)
end
natives.cutscene.set_cutscene_multihead_fade = natives.CUTSCENE.SET_CUTSCENE_MULTIHEAD_FADE

function natives.CUTSCENE.SET_CUTSCENE_MULTIHEAD_FADE_MANUAL(--[[BOOL]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CUTSCENE.SET_CUTSCENE_MULTIHEAD_FADE_MANUAL' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0x06EE9048FD080382, p0)
end
natives.cutscene.set_cutscene_multihead_fade_manual = natives.CUTSCENE.SET_CUTSCENE_MULTIHEAD_FADE_MANUAL

function natives.CUTSCENE.IS_MULTIHEAD_FADE_UP() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CUTSCENE.IS_MULTIHEAD_FADE_UP' due to disabled trusted mode")

	local result = native_call(0xA0FE76168A189DDB)
	return result:__tointeger()
end
natives.cutscene.is_multihead_fade_up = natives.CUTSCENE.IS_MULTIHEAD_FADE_UP

--[[
Stops current cutscene with a fade transition
p0: always true in R* Scripts
You will need to manually fade the screen back in
SET_CUTSCENE_INPUTS_PARTIALLY_FADE?
]]
function natives.CUTSCENE.NETWORK_SET_MOCAP_CUTSCENE_CAN_BE_SKIPPED(--[[BOOL]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CUTSCENE.NETWORK_SET_MOCAP_CUTSCENE_CAN_BE_SKIPPED' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0x2F137B508DE238F2, p0)
end
natives.cutscene.network_set_mocap_cutscene_can_be_skipped = natives.CUTSCENE.NETWORK_SET_MOCAP_CUTSCENE_CAN_BE_SKIPPED

function natives.CUTSCENE.SET_CAR_GENERATORS_CAN_UPDATE_DURING_CUTSCENE(--[[BOOL]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CUTSCENE.SET_CAR_GENERATORS_CAN_UPDATE_DURING_CUTSCENE' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0xE36A98D8AB3D3C66, p0)
end
natives.cutscene.set_car_generators_can_update_during_cutscene = natives.CUTSCENE.SET_CAR_GENERATORS_CAN_UPDATE_DURING_CUTSCENE

function natives.CUTSCENE.CAN_USE_MOBILE_PHONE_DURING_CUTSCENE() -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CUTSCENE.CAN_USE_MOBILE_PHONE_DURING_CUTSCENE' due to disabled trusted mode")

	local result = native_call(0x5EDEF0CF8C1DAB3C)
	return result:__tointeger()
end
natives.cutscene.can_use_mobile_phone_during_cutscene = natives.CUTSCENE.CAN_USE_MOBILE_PHONE_DURING_CUTSCENE

function natives.CUTSCENE.SET_CUTSCENE_CAN_BE_SKIPPED(--[[BOOL]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CUTSCENE.SET_CUTSCENE_CAN_BE_SKIPPED' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0x41FAA8FB2ECE8720, p0)
end
natives.cutscene.set_cutscene_can_be_skipped = natives.CUTSCENE.SET_CUTSCENE_CAN_BE_SKIPPED

function natives.CUTSCENE.SET_CAN_DISPLAY_MINIMAP_DURING_CUTSCENE_THIS_UPDATE() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CUTSCENE.SET_CAN_DISPLAY_MINIMAP_DURING_CUTSCENE_THIS_UPDATE' due to disabled trusted mode")

	local result = native_call(0x2131046957F31B04)
end
natives.cutscene.set_can_display_minimap_during_cutscene_this_update = natives.CUTSCENE.SET_CAN_DISPLAY_MINIMAP_DURING_CUTSCENE_THIS_UPDATE

--[[
Full list of ped components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedComponentVariations.json
]]
function natives.CUTSCENE.SET_CUTSCENE_PED_COMPONENT_VARIATION(--[[const char*]] cutsceneEntName, --[[int]] p1, --[[int]] p2, --[[int]] p3, --[[Hash]] modelHash) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CUTSCENE.SET_CUTSCENE_PED_COMPONENT_VARIATION' due to disabled trusted mode")

	assert(type(cutsceneEntName) == "string", "Arg #1 (cutsceneEntName) must be a string.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(modelHash) == "number", "Arg #5 (modelHash) must be a number.")

	local result = native_call(0xBA01E7B6DEEFBBC9, cutsceneEntName, p1, p2, p3, modelHash)
end
natives.cutscene.set_cutscene_ped_component_variation = natives.CUTSCENE.SET_CUTSCENE_PED_COMPONENT_VARIATION

function natives.CUTSCENE.SET_CUTSCENE_PED_COMPONENT_VARIATION_FROM_PED(--[[const char*]] cutsceneEntName, --[[Ped]] ped, --[[Hash]] modelHash) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CUTSCENE.SET_CUTSCENE_PED_COMPONENT_VARIATION_FROM_PED' due to disabled trusted mode")

	assert(type(cutsceneEntName) == "string", "Arg #1 (cutsceneEntName) must be a string.")
	assert(type(ped) == "number", "Arg #2 (ped) must be a number.")
	assert(type(modelHash) == "number", "Arg #3 (modelHash) must be a number.")

	local result = native_call(0x2A56C06EBEF2B0D9, cutsceneEntName, ped, modelHash)
end
natives.cutscene.set_cutscene_ped_component_variation_from_ped = natives.CUTSCENE.SET_CUTSCENE_PED_COMPONENT_VARIATION_FROM_PED

function natives.CUTSCENE.DOES_CUTSCENE_ENTITY_EXIST(--[[const char*]] cutsceneEntName, --[[Hash]] modelHash) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CUTSCENE.DOES_CUTSCENE_ENTITY_EXIST' due to disabled trusted mode")

	assert(type(cutsceneEntName) == "string", "Arg #1 (cutsceneEntName) must be a string.")
	assert(type(modelHash) == "number", "Arg #2 (modelHash) must be a number.")

	local result = native_call(0x499EF20C5DB25C59, cutsceneEntName, modelHash)
	return result:__tointeger() ~= 0
end
natives.cutscene.does_cutscene_entity_exist = natives.CUTSCENE.DOES_CUTSCENE_ENTITY_EXIST

--[[
Thanks R*! ;)

if ((l_161 == 0) || (l_161 == 2)) {
    sub_2ea27("Trying to set Jimmy prop variation");
    CUTSCENE::_0546524ADE2E9723("Jimmy_Boston", 1, 0, 0, 0);
}

Full list of ped components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedComponentVariations.json
]]
function natives.CUTSCENE.SET_CUTSCENE_PED_PROP_VARIATION(--[[const char*]] cutsceneEntName, --[[int]] p1, --[[int]] p2, --[[int]] p3, --[[Hash]] modelHash) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CUTSCENE.SET_CUTSCENE_PED_PROP_VARIATION' due to disabled trusted mode")

	assert(type(cutsceneEntName) == "string", "Arg #1 (cutsceneEntName) must be a string.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(modelHash) == "number", "Arg #5 (modelHash) must be a number.")

	local result = native_call(0x0546524ADE2E9723, cutsceneEntName, p1, p2, p3, modelHash)
end
natives.cutscene.set_cutscene_ped_prop_variation = natives.CUTSCENE.SET_CUTSCENE_PED_PROP_VARIATION

--[[
Possibly HAS_CUTSCENE_CUT_THIS_FRAME, needs more research.
]]
function natives.CUTSCENE.HAS_CUTSCENE_CUT_THIS_FRAME() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'CUTSCENE.HAS_CUTSCENE_CUT_THIS_FRAME' due to disabled trusted mode")

	local result = native_call(0x708BDD8CD795B043)
	return result:__tointeger() ~= 0
end
natives.cutscene.has_cutscene_cut_this_frame = natives.CUTSCENE.HAS_CUTSCENE_CUT_THIS_FRAME


natives.DATAFILE = {}
natives.datafile = {}

--[[
Adds the given request ID to the watch list.
]]
function natives.DATAFILE.DATAFILE_WATCH_REQUEST_ID(--[[int]] id) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'DATAFILE.DATAFILE_WATCH_REQUEST_ID' due to disabled trusted mode")

	assert(type(id) == "number", "Arg #1 (id) must be a number.")

	local result = native_call(0xAD6875BBC0FC899C, id)
end
natives.datafile.datafile_watch_request_id = natives.DATAFILE.DATAFILE_WATCH_REQUEST_ID

function natives.DATAFILE.DATAFILE_CLEAR_WATCH_LIST() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'DATAFILE.DATAFILE_CLEAR_WATCH_LIST' due to disabled trusted mode")

	local result = native_call(0x6CC86E78358D5119)
end
natives.datafile.datafile_clear_watch_list = natives.DATAFILE.DATAFILE_CLEAR_WATCH_LIST

function natives.DATAFILE.DATAFILE_IS_VALID_REQUEST_ID(--[[int]] index) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'DATAFILE.DATAFILE_IS_VALID_REQUEST_ID' due to disabled trusted mode")

	assert(type(index) == "number", "Arg #1 (index) must be a number.")

	local result = native_call(0xFCCAE5B92A830878, index)
	return result:__tointeger() ~= 0
end
natives.datafile.datafile_is_valid_request_id = natives.DATAFILE.DATAFILE_IS_VALID_REQUEST_ID

function natives.DATAFILE.DATAFILE_HAS_LOADED_FILE_DATA(--[[Any]] p0) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'DATAFILE.DATAFILE_HAS_LOADED_FILE_DATA' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x15FF52B809DB2353, p0)
	return result:__tointeger() ~= 0
end
natives.datafile.datafile_has_loaded_file_data = natives.DATAFILE.DATAFILE_HAS_LOADED_FILE_DATA

function natives.DATAFILE.DATAFILE_HAS_VALID_FILE_DATA(--[[Any]] p0) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'DATAFILE.DATAFILE_HAS_VALID_FILE_DATA' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xF8CC1EBE0B62E29F, p0)
	return result:__tointeger() ~= 0
end
natives.datafile.datafile_has_valid_file_data = natives.DATAFILE.DATAFILE_HAS_VALID_FILE_DATA

function natives.DATAFILE.DATAFILE_SELECT_ACTIVE_FILE(--[[Any]] p0, --[[Any]] p1) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'DATAFILE.DATAFILE_SELECT_ACTIVE_FILE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x22DA66936E0FFF37, p0, p1)
	return result:__tointeger() ~= 0
end
natives.datafile.datafile_select_active_file = natives.DATAFILE.DATAFILE_SELECT_ACTIVE_FILE

function natives.DATAFILE.DATAFILE_DELETE_REQUESTED_FILE(--[[Any]] p0) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'DATAFILE.DATAFILE_DELETE_REQUESTED_FILE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x8F5EA1C01D65A100, p0)
	return result:__tointeger() ~= 0
end
natives.datafile.datafile_delete_requested_file = natives.DATAFILE.DATAFILE_DELETE_REQUESTED_FILE

function natives.DATAFILE.UGC_CREATE_CONTENT(--[[Any*]] data, --[[int]] dataCount, --[[const char*]] contentName, --[[const char*]] description, --[[const char*]] tagsCsv, --[[const char*]] contentTypeName, --[[BOOL]] publish, --[[Any]] p7) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'DATAFILE.UGC_CREATE_CONTENT' due to disabled trusted mode")

	assert(type(data) == "userdata", "Arg #1 (data) must be a userdata.")
	assert(type(dataCount) == "number", "Arg #2 (dataCount) must be a number.")
	assert(type(contentName) == "string", "Arg #3 (contentName) must be a string.")
	assert(type(description) == "string", "Arg #4 (description) must be a string.")
	assert(type(tagsCsv) == "string", "Arg #5 (tagsCsv) must be a string.")
	assert(type(contentTypeName) == "string", "Arg #6 (contentTypeName) must be a string.")
	assert(type(publish) == "boolean", "Arg #7 (publish) must be a boolean.")
	assert(type(p7) == "number", "Arg #8 (p7) must be a number.")

	local result = native_call(0xC84527E235FCA219, data, dataCount, contentName, description, tagsCsv, contentTypeName, publish, p7)
	return result:__tointeger() ~= 0
end
natives.datafile.ugc_create_content = natives.DATAFILE.UGC_CREATE_CONTENT

function natives.DATAFILE.UGC_CREATE_MISSION(--[[const char*]] contentName, --[[const char*]] description, --[[const char*]] tagsCsv, --[[const char*]] contentTypeName, --[[BOOL]] publish, --[[Any]] p5) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'DATAFILE.UGC_CREATE_MISSION' due to disabled trusted mode")

	assert(type(contentName) == "string", "Arg #1 (contentName) must be a string.")
	assert(type(description) == "string", "Arg #2 (description) must be a string.")
	assert(type(tagsCsv) == "string", "Arg #3 (tagsCsv) must be a string.")
	assert(type(contentTypeName) == "string", "Arg #4 (contentTypeName) must be a string.")
	assert(type(publish) == "boolean", "Arg #5 (publish) must be a boolean.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")

	local result = native_call(0xA5EFC3E847D60507, contentName, description, tagsCsv, contentTypeName, publish, p5)
	return result:__tointeger() ~= 0
end
natives.datafile.ugc_create_mission = natives.DATAFILE.UGC_CREATE_MISSION

function natives.DATAFILE.UGC_UPDATE_CONTENT(--[[const char*]] contentId, --[[Any*]] data, --[[int]] dataCount, --[[const char*]] contentName, --[[const char*]] description, --[[const char*]] tagsCsv, --[[const char*]] contentTypeName, --[[Any]] p7) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'DATAFILE.UGC_UPDATE_CONTENT' due to disabled trusted mode")

	assert(type(contentId) == "string", "Arg #1 (contentId) must be a string.")
	assert(type(data) == "userdata", "Arg #2 (data) must be a userdata.")
	assert(type(dataCount) == "number", "Arg #3 (dataCount) must be a number.")
	assert(type(contentName) == "string", "Arg #4 (contentName) must be a string.")
	assert(type(description) == "string", "Arg #5 (description) must be a string.")
	assert(type(tagsCsv) == "string", "Arg #6 (tagsCsv) must be a string.")
	assert(type(contentTypeName) == "string", "Arg #7 (contentTypeName) must be a string.")
	assert(type(p7) == "number", "Arg #8 (p7) must be a number.")

	local result = native_call(0x648E7A5434AF7969, contentId, data, dataCount, contentName, description, tagsCsv, contentTypeName, p7)
	return result:__tointeger() ~= 0
end
natives.datafile.ugc_update_content = natives.DATAFILE.UGC_UPDATE_CONTENT

function natives.DATAFILE.UGC_UPDATE_MISSION(--[[const char*]] contentId, --[[const char*]] contentName, --[[const char*]] description, --[[const char*]] tagsCsv, --[[const char*]] contentTypeName, --[[Any]] p5) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'DATAFILE.UGC_UPDATE_MISSION' due to disabled trusted mode")

	assert(type(contentId) == "string", "Arg #1 (contentId) must be a string.")
	assert(type(contentName) == "string", "Arg #2 (contentName) must be a string.")
	assert(type(description) == "string", "Arg #3 (description) must be a string.")
	assert(type(tagsCsv) == "string", "Arg #4 (tagsCsv) must be a string.")
	assert(type(contentTypeName) == "string", "Arg #5 (contentTypeName) must be a string.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")

	local result = native_call(0x4645DE9980999E93, contentId, contentName, description, tagsCsv, contentTypeName, p5)
	return result:__tointeger() ~= 0
end
natives.datafile.ugc_update_mission = natives.DATAFILE.UGC_UPDATE_MISSION

function natives.DATAFILE.UGC_SET_PLAYER_DATA(--[[const char*]] contentId, --[[float]] rating, --[[const char*]] contentTypeName, --[[Any]] p3) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'DATAFILE.UGC_SET_PLAYER_DATA' due to disabled trusted mode")

	assert(type(contentId) == "string", "Arg #1 (contentId) must be a string.")
	assert(type(rating) == "number", "Arg #2 (rating) must be a number.")
	assert(type(contentTypeName) == "string", "Arg #3 (contentTypeName) must be a string.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x692D808C34A82143, contentId, rating, contentTypeName, p3)
	return result:__tointeger() ~= 0
end
natives.datafile.ugc_set_player_data = natives.DATAFILE.UGC_SET_PLAYER_DATA

function natives.DATAFILE.DATAFILE_SELECT_UGC_DATA(--[[int]] p0, --[[Any]] p1) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'DATAFILE.DATAFILE_SELECT_UGC_DATA' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xA69AC4ADE82B57A4, p0, p1)
	return result:__tointeger() ~= 0
end
natives.datafile.datafile_select_ugc_data = natives.DATAFILE.DATAFILE_SELECT_UGC_DATA

function natives.DATAFILE.DATAFILE_SELECT_UGC_STATS(--[[int]] p0, --[[BOOL]] p1, --[[Any]] p2) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'DATAFILE.DATAFILE_SELECT_UGC_STATS' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0x9CB0BFA7A9342C3D, p0, p1, p2)
	return result:__tointeger() ~= 0
end
natives.datafile.datafile_select_ugc_stats = natives.DATAFILE.DATAFILE_SELECT_UGC_STATS

function natives.DATAFILE.DATAFILE_SELECT_UGC_PLAYER_DATA(--[[int]] p0, --[[Any]] p1) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'DATAFILE.DATAFILE_SELECT_UGC_PLAYER_DATA' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x52818819057F2B40, p0, p1)
	return result:__tointeger() ~= 0
end
natives.datafile.datafile_select_ugc_player_data = natives.DATAFILE.DATAFILE_SELECT_UGC_PLAYER_DATA

--[[
if ((NETWORK::_597F8DBA9B206FC7() > 0) && DATAFILE::_01095C95CD46B624(0)) {
    v_10 = DATAFILE::_GET_ROOT_OBJECT();
    v_11 = DATAFILE::_OBJECT_VALUE_GET_INTEGER(v_10, "pt");
    sub_20202(2, v_11);
    a_0 += 1;
} else { 
    a_0 += 1;
}

]]
function natives.DATAFILE.DATAFILE_SELECT_CREATOR_STATS(--[[int]] p0, --[[Any]] p1) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'DATAFILE.DATAFILE_SELECT_CREATOR_STATS' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x01095C95CD46B624, p0, p1)
	return result:__tointeger() ~= 0
end
natives.datafile.datafile_select_creator_stats = natives.DATAFILE.DATAFILE_SELECT_CREATOR_STATS

--[[
Loads a User-Generated Content (UGC) file. These files can be found in "[GTA5]\data\ugc" and "[GTA5]\common\patch\ugc". They seem to follow a naming convention, most likely of "[name]_[part].ugc". See example below for usage.

Returns whether or not the file was successfully loaded.

Example:
DATAFILE::_LOAD_UGC_FILE("RockstarPlaylists") // loads "rockstarplaylists_00.ugc"
]]
function natives.DATAFILE.DATAFILE_LOAD_OFFLINE_UGC(--[[const char*]] filename, --[[Any]] p1) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'DATAFILE.DATAFILE_LOAD_OFFLINE_UGC' due to disabled trusted mode")

	assert(type(filename) == "string", "Arg #1 (filename) must be a string.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xC5238C011AF405E4, filename, p1)
	return result:__tointeger() ~= 0
end
natives.datafile.datafile_load_offline_ugc = natives.DATAFILE.DATAFILE_LOAD_OFFLINE_UGC

function natives.DATAFILE.DATAFILE_CREATE(--[[int]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'DATAFILE.DATAFILE_CREATE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xD27058A1CA2B13EE, p0)
end
natives.datafile.datafile_create = natives.DATAFILE.DATAFILE_CREATE

function natives.DATAFILE.DATAFILE_DELETE(--[[int]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'DATAFILE.DATAFILE_DELETE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x9AB9C1CFC8862DFB, p0)
end
natives.datafile.datafile_delete = natives.DATAFILE.DATAFILE_DELETE

function natives.DATAFILE.DATAFILE_STORE_MISSION_HEADER(--[[int]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'DATAFILE.DATAFILE_STORE_MISSION_HEADER' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x2ED61456317B8178, p0)
end
natives.datafile.datafile_store_mission_header = natives.DATAFILE.DATAFILE_STORE_MISSION_HEADER

function natives.DATAFILE.DATAFILE_FLUSH_MISSION_HEADER() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'DATAFILE.DATAFILE_FLUSH_MISSION_HEADER' due to disabled trusted mode")

	local result = native_call(0xC55854C7D7274882)
end
natives.datafile.datafile_flush_mission_header = natives.DATAFILE.DATAFILE_FLUSH_MISSION_HEADER

function natives.DATAFILE.DATAFILE_GET_FILE_DICT(--[[int]] p0) -- Returns const char*
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'DATAFILE.DATAFILE_GET_FILE_DICT' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x906B778CA1DC72B6, p0)
	return result:__tostring(true)
end
natives.datafile.datafile_get_file_dict = natives.DATAFILE.DATAFILE_GET_FILE_DICT

function natives.DATAFILE.DATAFILE_START_SAVE_TO_CLOUD(--[[const char*]] filename, --[[Any]] p1) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'DATAFILE.DATAFILE_START_SAVE_TO_CLOUD' due to disabled trusted mode")

	assert(type(filename) == "string", "Arg #1 (filename) must be a string.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x83BCCE3224735F05, filename, p1)
	return result:__tointeger() ~= 0
end
natives.datafile.datafile_start_save_to_cloud = natives.DATAFILE.DATAFILE_START_SAVE_TO_CLOUD

function natives.DATAFILE.DATAFILE_UPDATE_SAVE_TO_CLOUD(--[[BOOL*]] p0) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'DATAFILE.DATAFILE_UPDATE_SAVE_TO_CLOUD' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")

	local result = native_call(0x4DFDD9EB705F8140, p0)
	return result:__tointeger() ~= 0
end
natives.datafile.datafile_update_save_to_cloud = natives.DATAFILE.DATAFILE_UPDATE_SAVE_TO_CLOUD

--[[
Example:
if (!DATAFILE::_BEDB96A7584AA8CF())
{
    if (!g_109E3)
 {
        if (((sub_d4f() == 2) == 0) && (!NETWORK::NETWORK_IS_GAME_IN_PROGRESS()))
      {
            if (NETWORK::NETWORK_IS_CLOUD_AVAILABLE())
         {
                g_17A8B = 0;
            }
            if (!g_D52C)
          {
                sub_730();
            }
        }
    }
}


]]
function natives.DATAFILE.DATAFILE_IS_SAVE_PENDING() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'DATAFILE.DATAFILE_IS_SAVE_PENDING' due to disabled trusted mode")

	local result = native_call(0xBEDB96A7584AA8CF)
	return result:__tointeger() ~= 0
end
natives.datafile.datafile_is_save_pending = natives.DATAFILE.DATAFILE_IS_SAVE_PENDING

function natives.DATAFILE.DATAFILE_LOAD_OFFLINE_UGC_FOR_ADDITIONAL_DATA_FILE(--[[Any]] p0, --[[Any]] p1) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'DATAFILE.DATAFILE_LOAD_OFFLINE_UGC_FOR_ADDITIONAL_DATA_FILE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xA6EEF01087181EDD, p0, p1)
	return result:__tointeger()
end
natives.datafile.datafile_load_offline_ugc_for_additional_data_file = natives.DATAFILE.DATAFILE_LOAD_OFFLINE_UGC_FOR_ADDITIONAL_DATA_FILE

function natives.DATAFILE.DATAFILE_DELETE_FOR_ADDITIONAL_DATA_FILE(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'DATAFILE.DATAFILE_DELETE_FOR_ADDITIONAL_DATA_FILE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x6AD0BD5E087866CB, p0)
end
natives.datafile.datafile_delete_for_additional_data_file = natives.DATAFILE.DATAFILE_DELETE_FOR_ADDITIONAL_DATA_FILE

function natives.DATAFILE.DATAFILE_GET_FILE_DICT_FOR_ADDITIONAL_DATA_FILE(--[[Any]] p0) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'DATAFILE.DATAFILE_GET_FILE_DICT_FOR_ADDITIONAL_DATA_FILE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xDBF860CF1DB8E599, p0)
	return result:__tointeger()
end
natives.datafile.datafile_get_file_dict_for_additional_data_file = natives.DATAFILE.DATAFILE_GET_FILE_DICT_FOR_ADDITIONAL_DATA_FILE

function natives.DATAFILE.DATADICT_SET_BOOL(--[[Any*]] objectData, --[[const char*]] key, --[[BOOL]] value) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'DATAFILE.DATADICT_SET_BOOL' due to disabled trusted mode")

	assert(type(objectData) == "userdata", "Arg #1 (objectData) must be a userdata.")
	assert(type(key) == "string", "Arg #2 (key) must be a string.")
	assert(type(value) == "boolean", "Arg #3 (value) must be a boolean.")

	local result = native_call(0x35124302A556A325, objectData, key, value)
end
natives.datafile.datadict_set_bool = natives.DATAFILE.DATADICT_SET_BOOL

function natives.DATAFILE.DATADICT_SET_INT(--[[Any*]] objectData, --[[const char*]] key, --[[int]] value) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'DATAFILE.DATADICT_SET_INT' due to disabled trusted mode")

	assert(type(objectData) == "userdata", "Arg #1 (objectData) must be a userdata.")
	assert(type(key) == "string", "Arg #2 (key) must be a string.")
	assert(type(value) == "number", "Arg #3 (value) must be a number.")

	local result = native_call(0xE7E035450A7948D5, objectData, key, value)
end
natives.datafile.datadict_set_int = natives.DATAFILE.DATADICT_SET_INT

function natives.DATAFILE.DATADICT_SET_FLOAT(--[[Any*]] objectData, --[[const char*]] key, --[[float]] value) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'DATAFILE.DATADICT_SET_FLOAT' due to disabled trusted mode")

	assert(type(objectData) == "userdata", "Arg #1 (objectData) must be a userdata.")
	assert(type(key) == "string", "Arg #2 (key) must be a string.")
	assert(type(value) == "number", "Arg #3 (value) must be a number.")

	local result = native_call(0xC27E1CC2D795105E, objectData, key, value)
end
natives.datafile.datadict_set_float = natives.DATAFILE.DATADICT_SET_FLOAT

function natives.DATAFILE.DATADICT_SET_STRING(--[[Any*]] objectData, --[[const char*]] key, --[[const char*]] value) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'DATAFILE.DATADICT_SET_STRING' due to disabled trusted mode")

	assert(type(objectData) == "userdata", "Arg #1 (objectData) must be a userdata.")
	assert(type(key) == "string", "Arg #2 (key) must be a string.")
	assert(type(value) == "string", "Arg #3 (value) must be a string.")

	local result = native_call(0x8FF3847DADD8E30C, objectData, key, value)
end
natives.datafile.datadict_set_string = natives.DATAFILE.DATADICT_SET_STRING

function natives.DATAFILE.DATADICT_SET_VECTOR(--[[Any*]] objectData, --[[const char*]] key, --[[float]] valueX, --[[float]] valueY, --[[float]] valueZ) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'DATAFILE.DATADICT_SET_VECTOR' due to disabled trusted mode")

	assert(type(objectData) == "userdata", "Arg #1 (objectData) must be a userdata.")
	assert(type(key) == "string", "Arg #2 (key) must be a string.")
	assert(type(valueX) == "number", "Arg #3 (valueX) must be a number.")
	assert(type(valueY) == "number", "Arg #4 (valueY) must be a number.")
	assert(type(valueZ) == "number", "Arg #5 (valueZ) must be a number.")

	local result = native_call(0x4CD49B76338C7DEE, objectData, key, valueX, valueY, valueZ)
end
natives.datafile.datadict_set_vector = natives.DATAFILE.DATADICT_SET_VECTOR

function natives.DATAFILE.DATADICT_CREATE_DICT(--[[Any*]] objectData, --[[const char*]] key) -- Returns Any*
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'DATAFILE.DATADICT_CREATE_DICT' due to disabled trusted mode")

	assert(type(objectData) == "userdata", "Arg #1 (objectData) must be a userdata.")
	assert(type(key) == "string", "Arg #2 (key) must be a string.")

	local result = native_call(0xA358F56F10732EE1, objectData, key)
	return result:__tointeger64()
end
natives.datafile.datadict_create_dict = natives.DATAFILE.DATADICT_CREATE_DICT

function natives.DATAFILE.DATADICT_CREATE_ARRAY(--[[Any*]] objectData, --[[const char*]] key) -- Returns Any*
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'DATAFILE.DATADICT_CREATE_ARRAY' due to disabled trusted mode")

	assert(type(objectData) == "userdata", "Arg #1 (objectData) must be a userdata.")
	assert(type(key) == "string", "Arg #2 (key) must be a string.")

	local result = native_call(0x5B11728527CA6E5F, objectData, key)
	return result:__tointeger64()
end
natives.datafile.datadict_create_array = natives.DATAFILE.DATADICT_CREATE_ARRAY

function natives.DATAFILE.DATADICT_GET_BOOL(--[[Any*]] objectData, --[[const char*]] key) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'DATAFILE.DATADICT_GET_BOOL' due to disabled trusted mode")

	assert(type(objectData) == "userdata", "Arg #1 (objectData) must be a userdata.")
	assert(type(key) == "string", "Arg #2 (key) must be a string.")

	local result = native_call(0x1186940ED72FFEEC, objectData, key)
	return result:__tointeger() ~= 0
end
natives.datafile.datadict_get_bool = natives.DATAFILE.DATADICT_GET_BOOL

function natives.DATAFILE.DATADICT_GET_INT(--[[Any*]] objectData, --[[const char*]] key) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'DATAFILE.DATADICT_GET_INT' due to disabled trusted mode")

	assert(type(objectData) == "userdata", "Arg #1 (objectData) must be a userdata.")
	assert(type(key) == "string", "Arg #2 (key) must be a string.")

	local result = native_call(0x78F06F6B1FB5A80C, objectData, key)
	return result:__tointeger()
end
natives.datafile.datadict_get_int = natives.DATAFILE.DATADICT_GET_INT

function natives.DATAFILE.DATADICT_GET_FLOAT(--[[Any*]] objectData, --[[const char*]] key) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'DATAFILE.DATADICT_GET_FLOAT' due to disabled trusted mode")

	assert(type(objectData) == "userdata", "Arg #1 (objectData) must be a userdata.")
	assert(type(key) == "string", "Arg #2 (key) must be a string.")

	local result = native_call(0x06610343E73B9727, objectData, key)
	return result:__tonumber()
end
natives.datafile.datadict_get_float = natives.DATAFILE.DATADICT_GET_FLOAT

function natives.DATAFILE.DATADICT_GET_STRING(--[[Any*]] objectData, --[[const char*]] key) -- Returns const char*
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'DATAFILE.DATADICT_GET_STRING' due to disabled trusted mode")

	assert(type(objectData) == "userdata", "Arg #1 (objectData) must be a userdata.")
	assert(type(key) == "string", "Arg #2 (key) must be a string.")

	local result = native_call(0x3D2FD9E763B24472, objectData, key)
	return result:__tostring(true)
end
natives.datafile.datadict_get_string = natives.DATAFILE.DATADICT_GET_STRING

function natives.DATAFILE.DATADICT_GET_VECTOR(--[[Any*]] objectData, --[[const char*]] key) -- Returns Vector3
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'DATAFILE.DATADICT_GET_VECTOR' due to disabled trusted mode")

	assert(type(objectData) == "userdata", "Arg #1 (objectData) must be a userdata.")
	assert(type(key) == "string", "Arg #2 (key) must be a string.")

	local result = native_call(0x46CD3CB66E0825CC, objectData, key)
	return result:__tov3()
end
natives.datafile.datadict_get_vector = natives.DATAFILE.DATADICT_GET_VECTOR

function natives.DATAFILE.DATADICT_GET_DICT(--[[Any*]] objectData, --[[const char*]] key) -- Returns Any*
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'DATAFILE.DATADICT_GET_DICT' due to disabled trusted mode")

	assert(type(objectData) == "userdata", "Arg #1 (objectData) must be a userdata.")
	assert(type(key) == "string", "Arg #2 (key) must be a string.")

	local result = native_call(0xB6B9DDC412FCEEE2, objectData, key)
	return result:__tointeger64()
end
natives.datafile.datadict_get_dict = natives.DATAFILE.DATADICT_GET_DICT

function natives.DATAFILE.DATADICT_GET_ARRAY(--[[Any*]] objectData, --[[const char*]] key) -- Returns Any*
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'DATAFILE.DATADICT_GET_ARRAY' due to disabled trusted mode")

	assert(type(objectData) == "userdata", "Arg #1 (objectData) must be a userdata.")
	assert(type(key) == "string", "Arg #2 (key) must be a string.")

	local result = native_call(0x7A983AA9DA2659ED, objectData, key)
	return result:__tointeger64()
end
natives.datafile.datadict_get_array = natives.DATAFILE.DATADICT_GET_ARRAY

--[[
Types:
1 = Boolean
2 = Integer
3 = Float
4 = String
5 = Vector3
6 = Object
7 = Array
]]
function natives.DATAFILE.DATADICT_GET_TYPE(--[[Any*]] objectData, --[[const char*]] key) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'DATAFILE.DATADICT_GET_TYPE' due to disabled trusted mode")

	assert(type(objectData) == "userdata", "Arg #1 (objectData) must be a userdata.")
	assert(type(key) == "string", "Arg #2 (key) must be a string.")

	local result = native_call(0x031C55ED33227371, objectData, key)
	return result:__tointeger()
end
natives.datafile.datadict_get_type = natives.DATAFILE.DATADICT_GET_TYPE

function natives.DATAFILE.DATAARRAY_ADD_BOOL(--[[Any*]] arrayData, --[[BOOL]] value) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'DATAFILE.DATAARRAY_ADD_BOOL' due to disabled trusted mode")

	assert(type(arrayData) == "userdata", "Arg #1 (arrayData) must be a userdata.")
	assert(type(value) == "boolean", "Arg #2 (value) must be a boolean.")

	local result = native_call(0xF8B0F5A43E928C76, arrayData, value)
end
natives.datafile.dataarray_add_bool = natives.DATAFILE.DATAARRAY_ADD_BOOL

function natives.DATAFILE.DATAARRAY_ADD_INT(--[[Any*]] arrayData, --[[int]] value) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'DATAFILE.DATAARRAY_ADD_INT' due to disabled trusted mode")

	assert(type(arrayData) == "userdata", "Arg #1 (arrayData) must be a userdata.")
	assert(type(value) == "number", "Arg #2 (value) must be a number.")

	local result = native_call(0xCABDB751D86FE93B, arrayData, value)
end
natives.datafile.dataarray_add_int = natives.DATAFILE.DATAARRAY_ADD_INT

function natives.DATAFILE.DATAARRAY_ADD_FLOAT(--[[Any*]] arrayData, --[[float]] value) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'DATAFILE.DATAARRAY_ADD_FLOAT' due to disabled trusted mode")

	assert(type(arrayData) == "userdata", "Arg #1 (arrayData) must be a userdata.")
	assert(type(value) == "number", "Arg #2 (value) must be a number.")

	local result = native_call(0x57A995FD75D37F56, arrayData, value)
end
natives.datafile.dataarray_add_float = natives.DATAFILE.DATAARRAY_ADD_FLOAT

function natives.DATAFILE.DATAARRAY_ADD_STRING(--[[Any*]] arrayData, --[[const char*]] value) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'DATAFILE.DATAARRAY_ADD_STRING' due to disabled trusted mode")

	assert(type(arrayData) == "userdata", "Arg #1 (arrayData) must be a userdata.")
	assert(type(value) == "string", "Arg #2 (value) must be a string.")

	local result = native_call(0x2F0661C155AEEEAA, arrayData, value)
end
natives.datafile.dataarray_add_string = natives.DATAFILE.DATAARRAY_ADD_STRING

function natives.DATAFILE.DATAARRAY_ADD_VECTOR(--[[Any*]] arrayData, --[[float]] valueX, --[[float]] valueY, --[[float]] valueZ) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'DATAFILE.DATAARRAY_ADD_VECTOR' due to disabled trusted mode")

	assert(type(arrayData) == "userdata", "Arg #1 (arrayData) must be a userdata.")
	assert(type(valueX) == "number", "Arg #2 (valueX) must be a number.")
	assert(type(valueY) == "number", "Arg #3 (valueY) must be a number.")
	assert(type(valueZ) == "number", "Arg #4 (valueZ) must be a number.")

	local result = native_call(0x407F8D034F70F0C2, arrayData, valueX, valueY, valueZ)
end
natives.datafile.dataarray_add_vector = natives.DATAFILE.DATAARRAY_ADD_VECTOR

function natives.DATAFILE.DATAARRAY_ADD_DICT(--[[Any*]] arrayData) -- Returns Any*
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'DATAFILE.DATAARRAY_ADD_DICT' due to disabled trusted mode")

	assert(type(arrayData) == "userdata", "Arg #1 (arrayData) must be a userdata.")

	local result = native_call(0x6889498B3E19C797, arrayData)
	return result:__tointeger64()
end
natives.datafile.dataarray_add_dict = natives.DATAFILE.DATAARRAY_ADD_DICT

function natives.DATAFILE.DATAARRAY_GET_BOOL(--[[Any*]] arrayData, --[[int]] arrayIndex) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'DATAFILE.DATAARRAY_GET_BOOL' due to disabled trusted mode")

	assert(type(arrayData) == "userdata", "Arg #1 (arrayData) must be a userdata.")
	assert(type(arrayIndex) == "number", "Arg #2 (arrayIndex) must be a number.")

	local result = native_call(0x50C1B2874E50C114, arrayData, arrayIndex)
	return result:__tointeger() ~= 0
end
natives.datafile.dataarray_get_bool = natives.DATAFILE.DATAARRAY_GET_BOOL

function natives.DATAFILE.DATAARRAY_GET_INT(--[[Any*]] arrayData, --[[int]] arrayIndex) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'DATAFILE.DATAARRAY_GET_INT' due to disabled trusted mode")

	assert(type(arrayData) == "userdata", "Arg #1 (arrayData) must be a userdata.")
	assert(type(arrayIndex) == "number", "Arg #2 (arrayIndex) must be a number.")

	local result = native_call(0x3E5AE19425CD74BE, arrayData, arrayIndex)
	return result:__tointeger()
end
natives.datafile.dataarray_get_int = natives.DATAFILE.DATAARRAY_GET_INT

function natives.DATAFILE.DATAARRAY_GET_FLOAT(--[[Any*]] arrayData, --[[int]] arrayIndex) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'DATAFILE.DATAARRAY_GET_FLOAT' due to disabled trusted mode")

	assert(type(arrayData) == "userdata", "Arg #1 (arrayData) must be a userdata.")
	assert(type(arrayIndex) == "number", "Arg #2 (arrayIndex) must be a number.")

	local result = native_call(0xC0C527B525D7CFB5, arrayData, arrayIndex)
	return result:__tonumber()
end
natives.datafile.dataarray_get_float = natives.DATAFILE.DATAARRAY_GET_FLOAT

function natives.DATAFILE.DATAARRAY_GET_STRING(--[[Any*]] arrayData, --[[int]] arrayIndex) -- Returns const char*
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'DATAFILE.DATAARRAY_GET_STRING' due to disabled trusted mode")

	assert(type(arrayData) == "userdata", "Arg #1 (arrayData) must be a userdata.")
	assert(type(arrayIndex) == "number", "Arg #2 (arrayIndex) must be a number.")

	local result = native_call(0xD3F2FFEB8D836F52, arrayData, arrayIndex)
	return result:__tostring(true)
end
natives.datafile.dataarray_get_string = natives.DATAFILE.DATAARRAY_GET_STRING

function natives.DATAFILE.DATAARRAY_GET_VECTOR(--[[Any*]] arrayData, --[[int]] arrayIndex) -- Returns Vector3
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'DATAFILE.DATAARRAY_GET_VECTOR' due to disabled trusted mode")

	assert(type(arrayData) == "userdata", "Arg #1 (arrayData) must be a userdata.")
	assert(type(arrayIndex) == "number", "Arg #2 (arrayIndex) must be a number.")

	local result = native_call(0x8D2064E5B64A628A, arrayData, arrayIndex)
	return result:__tov3()
end
natives.datafile.dataarray_get_vector = natives.DATAFILE.DATAARRAY_GET_VECTOR

function natives.DATAFILE.DATAARRAY_GET_DICT(--[[Any*]] arrayData, --[[int]] arrayIndex) -- Returns Any*
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'DATAFILE.DATAARRAY_GET_DICT' due to disabled trusted mode")

	assert(type(arrayData) == "userdata", "Arg #1 (arrayData) must be a userdata.")
	assert(type(arrayIndex) == "number", "Arg #2 (arrayIndex) must be a number.")

	local result = native_call(0x8B5FADCC4E3A145F, arrayData, arrayIndex)
	return result:__tointeger64()
end
natives.datafile.dataarray_get_dict = natives.DATAFILE.DATAARRAY_GET_DICT

function natives.DATAFILE.DATAARRAY_GET_COUNT(--[[Any*]] arrayData) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'DATAFILE.DATAARRAY_GET_COUNT' due to disabled trusted mode")

	assert(type(arrayData) == "userdata", "Arg #1 (arrayData) must be a userdata.")

	local result = native_call(0x065DB281590CEA2D, arrayData)
	return result:__tointeger()
end
natives.datafile.dataarray_get_count = natives.DATAFILE.DATAARRAY_GET_COUNT

--[[
Types:
1 = Boolean
2 = Integer
3 = Float
4 = String
5 = Vector3
6 = Object
7 = Array
]]
function natives.DATAFILE.DATAARRAY_GET_TYPE(--[[Any*]] arrayData, --[[int]] arrayIndex) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'DATAFILE.DATAARRAY_GET_TYPE' due to disabled trusted mode")

	assert(type(arrayData) == "userdata", "Arg #1 (arrayData) must be a userdata.")
	assert(type(arrayIndex) == "number", "Arg #2 (arrayIndex) must be a number.")

	local result = native_call(0x3A0014ADB172A3C5, arrayData, arrayIndex)
	return result:__tointeger()
end
natives.datafile.dataarray_get_type = natives.DATAFILE.DATAARRAY_GET_TYPE


natives.DECORATOR = {}
natives.decorator = {}

function natives.DECORATOR.DECOR_SET_TIME(--[[Entity]] entity, --[[const char*]] propertyName, --[[int]] timestamp) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'DECORATOR.DECOR_SET_TIME' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(propertyName) == "string", "Arg #2 (propertyName) must be a string.")
	assert(type(timestamp) == "number", "Arg #3 (timestamp) must be a number.")

	local result = native_call(0x95AED7B8E39ECAA4, entity, propertyName, timestamp)
	return result:__tointeger() ~= 0
end
natives.decorator.decor_set_time = natives.DECORATOR.DECOR_SET_TIME

--[[
This function sets metadata of type bool to specified entity.

]]
function natives.DECORATOR.DECOR_SET_BOOL(--[[Entity]] entity, --[[const char*]] propertyName, --[[BOOL]] value) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'DECORATOR.DECOR_SET_BOOL' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(propertyName) == "string", "Arg #2 (propertyName) must be a string.")
	assert(type(value) == "boolean", "Arg #3 (value) must be a boolean.")

	local result = native_call(0x6B1E8E2ED1335B71, entity, propertyName, value)
	return result:__tointeger() ~= 0
end
natives.decorator.decor_set_bool = natives.DECORATOR.DECOR_SET_BOOL

function natives.DECORATOR.DECOR_SET_FLOAT(--[[Entity]] entity, --[[const char*]] propertyName, --[[float]] value) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'DECORATOR.DECOR_SET_FLOAT' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(propertyName) == "string", "Arg #2 (propertyName) must be a string.")
	assert(type(value) == "number", "Arg #3 (value) must be a number.")

	local result = native_call(0x211AB1DD8D0F363A, entity, propertyName, value)
	return result:__tointeger() ~= 0
end
natives.decorator.decor_set_float = natives.DECORATOR.DECOR_SET_FLOAT

--[[
Sets property to int.
]]
function natives.DECORATOR.DECOR_SET_INT(--[[Entity]] entity, --[[const char*]] propertyName, --[[int]] value) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'DECORATOR.DECOR_SET_INT' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(propertyName) == "string", "Arg #2 (propertyName) must be a string.")
	assert(type(value) == "number", "Arg #3 (value) must be a number.")

	local result = native_call(0x0CE3AA5E1CA19E10, entity, propertyName, value)
	return result:__tointeger() ~= 0
end
natives.decorator.decor_set_int = natives.DECORATOR.DECOR_SET_INT

function natives.DECORATOR.DECOR_GET_BOOL(--[[Entity]] entity, --[[const char*]] propertyName) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'DECORATOR.DECOR_GET_BOOL' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(propertyName) == "string", "Arg #2 (propertyName) must be a string.")

	local result = native_call(0xDACE671663F2F5DB, entity, propertyName)
	return result:__tointeger() ~= 0
end
natives.decorator.decor_get_bool = natives.DECORATOR.DECOR_GET_BOOL

function natives.DECORATOR.DECOR_GET_FLOAT(--[[Entity]] entity, --[[const char*]] propertyName) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'DECORATOR.DECOR_GET_FLOAT' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(propertyName) == "string", "Arg #2 (propertyName) must be a string.")

	local result = native_call(0x6524A2F114706F43, entity, propertyName)
	return result:__tonumber()
end
natives.decorator.decor_get_float = natives.DECORATOR.DECOR_GET_FLOAT

function natives.DECORATOR.DECOR_GET_INT(--[[Entity]] entity, --[[const char*]] propertyName) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'DECORATOR.DECOR_GET_INT' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(propertyName) == "string", "Arg #2 (propertyName) must be a string.")

	local result = native_call(0xA06C969B02A97298, entity, propertyName)
	return result:__tointeger()
end
natives.decorator.decor_get_int = natives.DECORATOR.DECOR_GET_INT

--[[
Returns whether or not the specified property is set for the entity.
]]
function natives.DECORATOR.DECOR_EXIST_ON(--[[Entity]] entity, --[[const char*]] propertyName) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'DECORATOR.DECOR_EXIST_ON' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(propertyName) == "string", "Arg #2 (propertyName) must be a string.")

	local result = native_call(0x05661B80A8C9165F, entity, propertyName)
	return result:__tointeger() ~= 0
end
natives.decorator.decor_exist_on = natives.DECORATOR.DECOR_EXIST_ON

function natives.DECORATOR.DECOR_REMOVE(--[[Entity]] entity, --[[const char*]] propertyName) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'DECORATOR.DECOR_REMOVE' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(propertyName) == "string", "Arg #2 (propertyName) must be a string.")

	local result = native_call(0x00EE9F297C738720, entity, propertyName)
	return result:__tointeger() ~= 0
end
natives.decorator.decor_remove = natives.DECORATOR.DECOR_REMOVE

--[[
https://alloc8or.re/gta5/doc/enums/eDecorType.txt
]]
function natives.DECORATOR.DECOR_REGISTER(--[[const char*]] propertyName, --[[int]] type) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'DECORATOR.DECOR_REGISTER' due to disabled trusted mode")

	assert(type(propertyName) == "string", "Arg #1 (propertyName) must be a string.")
	assert(type(type) == "number", "Arg #2 (type) must be a number.")

	local result = native_call(0x9FD90732F56403CE, propertyName, type)
end
natives.decorator.decor_register = natives.DECORATOR.DECOR_REGISTER

--[[
type: see DECOR_REGISTER
]]
function natives.DECORATOR.DECOR_IS_REGISTERED_AS_TYPE(--[[const char*]] propertyName, --[[int]] type) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'DECORATOR.DECOR_IS_REGISTERED_AS_TYPE' due to disabled trusted mode")

	assert(type(propertyName) == "string", "Arg #1 (propertyName) must be a string.")
	assert(type(type) == "number", "Arg #2 (type) must be a number.")

	local result = native_call(0x4F14F9F870D6FBC8, propertyName, type)
	return result:__tointeger() ~= 0
end
natives.decorator.decor_is_registered_as_type = natives.DECORATOR.DECOR_IS_REGISTERED_AS_TYPE

--[[
Called after all decorator type initializations.
]]
function natives.DECORATOR.DECOR_REGISTER_LOCK() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'DECORATOR.DECOR_REGISTER_LOCK' due to disabled trusted mode")

	local result = native_call(0xA9D14EEA259F9248)
end
natives.decorator.decor_register_lock = natives.DECORATOR.DECOR_REGISTER_LOCK


natives.DLC = {}
natives.dlc = {}

--[[
Only used once in scripts, in maintransition.

maintransition.c4, line ~82432:
if (PED::_7350823473013C02(PLAYER::PLAYER_PED_ID()) && (DECORATOR::_241FCA5B1AA14F75() == 0)) {
    g_2542A5 = a_1; // 'g_2542A5' used in 'building_controller.ysc' for IPL stuff?
    return 1;
}

Likely used solely for the players ped. The function it's in seems to only be used for initialization/quitting. Called among natives to discard scaleforms, disable frontend, fading in/out, etc. Neighboring strings to some calls include "HUD_JOINING", "HUD_QUITTING".
]]
function natives.DLC.ARE_ANY_CCS_PENDING() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'DLC.ARE_ANY_CCS_PENDING' due to disabled trusted mode")

	local result = native_call(0x241FCA5B1AA14F75)
	return result:__tointeger() ~= 0
end
natives.dlc.are_any_ccs_pending = natives.DLC.ARE_ANY_CCS_PENDING

--[[
Example:
DLC::IS_DLC_PRESENT($\mpbusiness2\);
($ = gethashkey)

bruteforce these:
0xB119F6D
0x96F02EE6
]]
function natives.DLC.IS_DLC_PRESENT(--[[Hash]] dlcHash) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'DLC.IS_DLC_PRESENT' due to disabled trusted mode")

	assert(type(dlcHash) == "number", "Arg #1 (dlcHash) must be a number.")

	local result = native_call(0x812595A0644CE1DE, dlcHash)
	return result:__tointeger() ~= 0
end
natives.dlc.is_dlc_present = natives.DLC.IS_DLC_PRESENT

--[[
MulleDK19: This function is hard-coded to always return 1.
]]
function natives.DLC.DLC_CHECK_CLOUD_DATA_CORRECT() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'DLC.DLC_CHECK_CLOUD_DATA_CORRECT' due to disabled trusted mode")

	local result = native_call(0xF2E07819EF1A5289)
	return result:__tointeger() ~= 0
end
natives.dlc.dlc_check_cloud_data_correct = natives.DLC.DLC_CHECK_CLOUD_DATA_CORRECT

--[[
MulleDK19: This function is hard-coded to always return 0.
]]
function natives.DLC.GET_EXTRACONTENT_CLOUD_RESULT() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'DLC.GET_EXTRACONTENT_CLOUD_RESULT' due to disabled trusted mode")

	local result = native_call(0x9489659372A81585)
	return result:__tointeger() ~= 0
end
natives.dlc.get_extracontent_cloud_result = natives.DLC.GET_EXTRACONTENT_CLOUD_RESULT

--[[
MulleDK19: This function is hard-coded to always return 1.
]]
function natives.DLC.DLC_CHECK_COMPAT_PACK_CONFIGURATION() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'DLC.DLC_CHECK_COMPAT_PACK_CONFIGURATION' due to disabled trusted mode")

	local result = native_call(0xA213B11DFF526300)
	return result:__tointeger() ~= 0
end
natives.dlc.dlc_check_compat_pack_configuration = natives.DLC.DLC_CHECK_COMPAT_PACK_CONFIGURATION

function natives.DLC.GET_EVER_HAD_BAD_PACK_ORDER() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'DLC.GET_EVER_HAD_BAD_PACK_ORDER' due to disabled trusted mode")

	local result = native_call(0x8D30F648014A92B5)
	return result:__tointeger() ~= 0
end
natives.dlc.get_ever_had_bad_pack_order = natives.DLC.GET_EVER_HAD_BAD_PACK_ORDER

function natives.DLC.GET_IS_LOADING_SCREEN_ACTIVE() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'DLC.GET_IS_LOADING_SCREEN_ACTIVE' due to disabled trusted mode")

	local result = native_call(0x10D0A8F259E93EC9)
	return result:__tointeger() ~= 0
end
natives.dlc.get_is_loading_screen_active = natives.DLC.GET_IS_LOADING_SCREEN_ACTIVE

function natives.DLC.GET_IS_INITIAL_LOADING_SCREEN_ACTIVE() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'DLC.GET_IS_INITIAL_LOADING_SCREEN_ACTIVE' due to disabled trusted mode")

	local result = native_call(0xC4637A6D03C24CC3)
	return result:__tointeger() ~= 0
end
natives.dlc.get_is_initial_loading_screen_active = natives.DLC.GET_IS_INITIAL_LOADING_SCREEN_ACTIVE

--[[
Sets the value of the specified variable to 0.
Always returns true.
]]
function natives.DLC.HAS_CLOUD_REQUESTS_FINISHED(--[[BOOL*]] p0, --[[Any]] unused) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'DLC.HAS_CLOUD_REQUESTS_FINISHED' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")
	assert(type(unused) == "number", "Arg #2 (unused) must be a number.")

	local result = native_call(0x46E2B844905BC5F0, p0, unused)
	return result:__tointeger() ~= 0
end
natives.dlc.has_cloud_requests_finished = natives.DLC.HAS_CLOUD_REQUESTS_FINISHED

--[[
Unloads GROUP_MAP (GTAO/MP) DLC data and loads GROUP_MAP_SP DLC. Neither are loaded by default, 0888C3502DBBEEF5 is a cognate to this function and loads MP DLC (and unloads SP DLC by extension).

The original (and wrong) definition is below:

This unload the GTA:O DLC map parts (like high end garages/apartments).
Works in singleplayer.
]]
function natives.DLC.ON_ENTER_SP() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'DLC.ON_ENTER_SP' due to disabled trusted mode")

	local result = native_call(0xD7C10C4A637992C9)
end
natives.dlc.on_enter_sp = natives.DLC.ON_ENTER_SP

--[[
This loads the GTA:O dlc map parts (high end garages, apartments).
Works in singleplayer.
In order to use GTA:O heist IPL's you have to call this native with the following params: SET_INSTANCE_PRIORITY_MODE(1);
]]
function natives.DLC.ON_ENTER_MP() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'DLC.ON_ENTER_MP' due to disabled trusted mode")

	local result = native_call(0x0888C3502DBBEEF5)
end
natives.dlc.on_enter_mp = natives.DLC.ON_ENTER_MP


natives.ENTITY = {}
natives.entity = {}

--[[
Checks whether an entity exists in the game world.
]]
function natives.ENTITY.DOES_ENTITY_EXIST(--[[Entity]] entity) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.DOES_ENTITY_EXIST' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0x7239B21A38F536BA, entity)
	return result:__tointeger() ~= 0
end
natives.entity.does_entity_exist = natives.ENTITY.DOES_ENTITY_EXIST

function natives.ENTITY.DOES_ENTITY_BELONG_TO_THIS_SCRIPT(--[[Entity]] entity, --[[BOOL]] p1) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.DOES_ENTITY_BELONG_TO_THIS_SCRIPT' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0xDDE6DF5AE89981D2, entity, p1)
	return result:__tointeger() ~= 0
end
natives.entity.does_entity_belong_to_this_script = natives.ENTITY.DOES_ENTITY_BELONG_TO_THIS_SCRIPT

function natives.ENTITY.DOES_ENTITY_HAVE_DRAWABLE(--[[Entity]] entity) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.DOES_ENTITY_HAVE_DRAWABLE' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0x060D6E96F8B8E48D, entity)
	return result:__tointeger() ~= 0
end
natives.entity.does_entity_have_drawable = natives.ENTITY.DOES_ENTITY_HAVE_DRAWABLE

function natives.ENTITY.DOES_ENTITY_HAVE_PHYSICS(--[[Entity]] entity) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.DOES_ENTITY_HAVE_PHYSICS' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0xDA95EA3317CC5064, entity)
	return result:__tointeger() ~= 0
end
natives.entity.does_entity_have_physics = natives.ENTITY.DOES_ENTITY_HAVE_PHYSICS

function natives.ENTITY.DOES_ENTITY_HAVE_SKELETON(--[[Entity]] entity) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.DOES_ENTITY_HAVE_SKELETON' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0x764EB96874EFFDC1, entity)
	return result:__tointeger() ~= 0
end
natives.entity.does_entity_have_skeleton = natives.ENTITY.DOES_ENTITY_HAVE_SKELETON

function natives.ENTITY.DOES_ENTITY_HAVE_ANIM_DIRECTOR(--[[Entity]] entity) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.DOES_ENTITY_HAVE_ANIM_DIRECTOR' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0x2158E81A6AF65EA9, entity)
	return result:__tointeger() ~= 0
end
natives.entity.does_entity_have_anim_director = natives.ENTITY.DOES_ENTITY_HAVE_ANIM_DIRECTOR

--[[
P3 is always 3 as far as i cant tell

Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
]]
function natives.ENTITY.HAS_ENTITY_ANIM_FINISHED(--[[Entity]] entity, --[[const char*]] animDict, --[[const char*]] animName, --[[int]] p3) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.HAS_ENTITY_ANIM_FINISHED' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(animDict) == "string", "Arg #2 (animDict) must be a string.")
	assert(type(animName) == "string", "Arg #3 (animName) must be a string.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x20B711662962B472, entity, animDict, animName, p3)
	return result:__tointeger() ~= 0
end
natives.entity.has_entity_anim_finished = natives.ENTITY.HAS_ENTITY_ANIM_FINISHED

function natives.ENTITY.HAS_ENTITY_BEEN_DAMAGED_BY_ANY_OBJECT(--[[Entity]] entity) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.HAS_ENTITY_BEEN_DAMAGED_BY_ANY_OBJECT' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0x95EB9964FF5C5C65, entity)
	return result:__tointeger() ~= 0
end
natives.entity.has_entity_been_damaged_by_any_object = natives.ENTITY.HAS_ENTITY_BEEN_DAMAGED_BY_ANY_OBJECT

function natives.ENTITY.HAS_ENTITY_BEEN_DAMAGED_BY_ANY_PED(--[[Entity]] entity) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.HAS_ENTITY_BEEN_DAMAGED_BY_ANY_PED' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0x605F5A140F202491, entity)
	return result:__tointeger() ~= 0
end
natives.entity.has_entity_been_damaged_by_any_ped = natives.ENTITY.HAS_ENTITY_BEEN_DAMAGED_BY_ANY_PED

function natives.ENTITY.HAS_ENTITY_BEEN_DAMAGED_BY_ANY_VEHICLE(--[[Entity]] entity) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.HAS_ENTITY_BEEN_DAMAGED_BY_ANY_VEHICLE' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0xDFD5033FDBA0A9C8, entity)
	return result:__tointeger() ~= 0
end
natives.entity.has_entity_been_damaged_by_any_vehicle = natives.ENTITY.HAS_ENTITY_BEEN_DAMAGED_BY_ANY_VEHICLE

--[[
Entity 1 = Victim
Entity 2 = Attacker

p2 seems to always be 1
]]
function natives.ENTITY.HAS_ENTITY_BEEN_DAMAGED_BY_ENTITY(--[[Entity]] entity1, --[[Entity]] entity2, --[[BOOL]] p2) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.HAS_ENTITY_BEEN_DAMAGED_BY_ENTITY' due to disabled trusted mode")

	assert(type(entity1) == "number", "Arg #1 (entity1) must be a number.")
	assert(type(entity2) == "number", "Arg #2 (entity2) must be a number.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")

	local result = native_call(0xC86D67D52A707CF8, entity1, entity2, p2)
	return result:__tointeger() ~= 0
end
natives.entity.has_entity_been_damaged_by_entity = natives.ENTITY.HAS_ENTITY_BEEN_DAMAGED_BY_ENTITY

--[[
traceType is always 17 in the scripts.

There is other codes used for traceType:
19 - in jewelry_prep1a
126 - in am_hunt_the_beast
256 & 287 - in fm_mission_controller
]]
function natives.ENTITY.HAS_ENTITY_CLEAR_LOS_TO_ENTITY(--[[Entity]] entity1, --[[Entity]] entity2, --[[int]] traceType) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.HAS_ENTITY_CLEAR_LOS_TO_ENTITY' due to disabled trusted mode")

	assert(type(entity1) == "number", "Arg #1 (entity1) must be a number.")
	assert(type(entity2) == "number", "Arg #2 (entity2) must be a number.")
	assert(type(traceType) == "number", "Arg #3 (traceType) must be a number.")

	local result = native_call(0xFCDFF7B72D23A1AC, entity1, entity2, traceType)
	return result:__tointeger() ~= 0
end
natives.entity.has_entity_clear_los_to_entity = natives.ENTITY.HAS_ENTITY_CLEAR_LOS_TO_ENTITY

function natives.ENTITY.HAS_ENTITY_CLEAR_LOS_TO_ENTITY_ADJUST_FOR_COVER(--[[Entity]] entity1, --[[Entity]] entity2, --[[int]] traceType) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.HAS_ENTITY_CLEAR_LOS_TO_ENTITY_ADJUST_FOR_COVER' due to disabled trusted mode")

	assert(type(entity1) == "number", "Arg #1 (entity1) must be a number.")
	assert(type(entity2) == "number", "Arg #2 (entity2) must be a number.")
	assert(type(traceType) == "number", "Arg #3 (traceType) must be a number.")

	local result = native_call(0x394BDE2A7BBA031E, entity1, entity2, traceType)
	return result:__tointeger()
end
natives.entity.has_entity_clear_los_to_entity_adjust_for_cover = natives.ENTITY.HAS_ENTITY_CLEAR_LOS_TO_ENTITY_ADJUST_FOR_COVER

--[[
Has the entity1 got a clear line of sight to the other entity2 from the direction entity1 is facing.
This is one of the most CPU demanding BOOL natives in the game; avoid calling this in things like nested for-loops
]]
function natives.ENTITY.HAS_ENTITY_CLEAR_LOS_TO_ENTITY_IN_FRONT(--[[Entity]] entity1, --[[Entity]] entity2) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.HAS_ENTITY_CLEAR_LOS_TO_ENTITY_IN_FRONT' due to disabled trusted mode")

	assert(type(entity1) == "number", "Arg #1 (entity1) must be a number.")
	assert(type(entity2) == "number", "Arg #2 (entity2) must be a number.")

	local result = native_call(0x0267D00AF114F17A, entity1, entity2)
	return result:__tointeger() ~= 0
end
natives.entity.has_entity_clear_los_to_entity_in_front = natives.ENTITY.HAS_ENTITY_CLEAR_LOS_TO_ENTITY_IN_FRONT

--[[
Called on tick.
Tested with vehicles, returns true whenever the vehicle is touching any entity.

Note: for vehicles, the wheels can touch the ground and it will still return false, but if the body of the vehicle touches the ground, it will return true.
]]
function natives.ENTITY.HAS_ENTITY_COLLIDED_WITH_ANYTHING(--[[Entity]] entity) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.HAS_ENTITY_COLLIDED_WITH_ANYTHING' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0x8BAD02F0368D9E14, entity)
	return result:__tointeger() ~= 0
end
natives.entity.has_entity_collided_with_anything = natives.ENTITY.HAS_ENTITY_COLLIDED_WITH_ANYTHING

function natives.ENTITY.GET_LAST_MATERIAL_HIT_BY_ENTITY(--[[Entity]] entity) -- Returns Hash
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.GET_LAST_MATERIAL_HIT_BY_ENTITY' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0x5C3D0A935F535C4C, entity)
	return result:__tointeger()
end
natives.entity.get_last_material_hit_by_entity = natives.ENTITY.GET_LAST_MATERIAL_HIT_BY_ENTITY

function natives.ENTITY.GET_COLLISION_NORMAL_OF_LAST_HIT_FOR_ENTITY(--[[Entity]] entity) -- Returns Vector3
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.GET_COLLISION_NORMAL_OF_LAST_HIT_FOR_ENTITY' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0xE465D4AB7CA6AE72, entity)
	return result:__tov3()
end
natives.entity.get_collision_normal_of_last_hit_for_entity = natives.ENTITY.GET_COLLISION_NORMAL_OF_LAST_HIT_FOR_ENTITY

--[[
Based on carmod_shop script decompile this takes a vehicle parameter. It is called when repair is done on initial enter.
]]
function natives.ENTITY.FORCE_ENTITY_AI_AND_ANIMATION_UPDATE(--[[Entity]] entity) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.FORCE_ENTITY_AI_AND_ANIMATION_UPDATE' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0x40FDEDB72F8293B2, entity)
end
natives.entity.force_entity_ai_and_animation_update = natives.ENTITY.FORCE_ENTITY_AI_AND_ANIMATION_UPDATE

--[[
Returns a float value representing animation's current playtime with respect to its total playtime. This value increasing in a range from [0 to 1] and wrap back to 0 when it reach 1.

Example:
0.000000 - mark the starting of animation.
0.500000 - mark the midpoint of the animation.
1.000000 - mark the end of animation.

Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
]]
function natives.ENTITY.GET_ENTITY_ANIM_CURRENT_TIME(--[[Entity]] entity, --[[const char*]] animDict, --[[const char*]] animName) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.GET_ENTITY_ANIM_CURRENT_TIME' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(animDict) == "string", "Arg #2 (animDict) must be a string.")
	assert(type(animName) == "string", "Arg #3 (animName) must be a string.")

	local result = native_call(0x346D81500D088F42, entity, animDict, animName)
	return result:__tonumber()
end
natives.entity.get_entity_anim_current_time = natives.ENTITY.GET_ENTITY_ANIM_CURRENT_TIME

--[[
Returns a float value representing animation's total playtime in milliseconds.

Example:
GET_ENTITY_ANIM_TOTAL_TIME(PLAYER_ID(),"amb@world_human_yoga@female@base","base_b") 
return 20800.000000

Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
]]
function natives.ENTITY.GET_ENTITY_ANIM_TOTAL_TIME(--[[Entity]] entity, --[[const char*]] animDict, --[[const char*]] animName) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.GET_ENTITY_ANIM_TOTAL_TIME' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(animDict) == "string", "Arg #2 (animDict) must be a string.")
	assert(type(animName) == "string", "Arg #3 (animName) must be a string.")

	local result = native_call(0x50BD2730B191E360, entity, animDict, animName)
	return result:__tonumber()
end
natives.entity.get_entity_anim_total_time = natives.ENTITY.GET_ENTITY_ANIM_TOTAL_TIME

--[[
Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
]]
function natives.ENTITY.GET_ANIM_DURATION(--[[const char*]] animDict, --[[const char*]] animName) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.GET_ANIM_DURATION' due to disabled trusted mode")

	assert(type(animDict) == "string", "Arg #1 (animDict) must be a string.")
	assert(type(animName) == "string", "Arg #2 (animName) must be a string.")

	local result = native_call(0xFEDDF04D62B8D790, animDict, animName)
	return result:__tonumber()
end
natives.entity.get_anim_duration = natives.ENTITY.GET_ANIM_DURATION

function natives.ENTITY.GET_ENTITY_ATTACHED_TO(--[[Entity]] entity) -- Returns Entity
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.GET_ENTITY_ATTACHED_TO' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0x48C2BED9180FE123, entity)
	return result:__tointeger()
end
natives.entity.get_entity_attached_to = natives.ENTITY.GET_ENTITY_ATTACHED_TO

--[[
Gets the current coordinates for a specified entity.
`entity` = The entity to get the coordinates from.
`alive` = Unused by the game, potentially used by debug builds of GTA in order to assert whether or not an entity was alive.
]]
function natives.ENTITY.GET_ENTITY_COORDS(--[[Entity]] entity, --[[BOOL]] alive) -- Returns Vector3
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.GET_ENTITY_COORDS' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(alive) == "boolean", "Arg #2 (alive) must be a boolean.")

	local result = native_call(0x3FEF770D40960D5A, entity, alive)
	return result:__tov3()
end
natives.entity.get_entity_coords = natives.ENTITY.GET_ENTITY_COORDS

--[[
Gets the entity's forward vector.
]]
function natives.ENTITY.GET_ENTITY_FORWARD_VECTOR(--[[Entity]] entity) -- Returns Vector3
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.GET_ENTITY_FORWARD_VECTOR' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0x0A794A5A57F8DF91, entity)
	return result:__tov3()
end
natives.entity.get_entity_forward_vector = natives.ENTITY.GET_ENTITY_FORWARD_VECTOR

--[[
Gets the X-component of the entity's forward vector.
]]
function natives.ENTITY.GET_ENTITY_FORWARD_X(--[[Entity]] entity) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.GET_ENTITY_FORWARD_X' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0x8BB4EF4214E0E6D5, entity)
	return result:__tonumber()
end
natives.entity.get_entity_forward_x = natives.ENTITY.GET_ENTITY_FORWARD_X

--[[
Gets the Y-component of the entity's forward vector.
]]
function natives.ENTITY.GET_ENTITY_FORWARD_Y(--[[Entity]] entity) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.GET_ENTITY_FORWARD_Y' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0x866A4A5FAE349510, entity)
	return result:__tonumber()
end
natives.entity.get_entity_forward_y = natives.ENTITY.GET_ENTITY_FORWARD_Y

--[[
Returns the heading of the entity in degrees. Also know as the "Yaw" of an entity.
]]
function natives.ENTITY.GET_ENTITY_HEADING(--[[Entity]] entity) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.GET_ENTITY_HEADING' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0xE83D4F9BA2A38914, entity)
	return result:__tonumber()
end
natives.entity.get_entity_heading = natives.ENTITY.GET_ENTITY_HEADING

--[[
Gets the heading of the entity physics in degrees, which tends to be more accurate than just "GET_ENTITY_HEADING". This can be clearly seen while, for example, ragdolling a ped/player.

NOTE: The name and description of this native are based on independent research. If you find this native to be more suitable under a different name and/or described differently, please feel free to do so.
]]
function natives.ENTITY.GET_ENTITY_HEADING_FROM_EULERS(--[[Entity]] entity) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.GET_ENTITY_HEADING_FROM_EULERS' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0x846BF6291198A71E, entity)
	return result:__tonumber()
end
natives.entity.get_entity_heading_from_eulers = natives.ENTITY.GET_ENTITY_HEADING_FROM_EULERS

--[[
Returns an integer value of entity's current health.

Example of range for ped:
- Player [0 to 200]
- Ped [100 to 200]
- Vehicle [0 to 1000]
- Object [0 to 1000]

Health is actually a float value but this native casts it to int.
In order to get the actual value, do:
float health = *(float *)(entityAddress + 0x280);
]]
function natives.ENTITY.GET_ENTITY_HEALTH(--[[Entity]] entity) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.GET_ENTITY_HEALTH' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0xEEF059FAD016D209, entity)
	return result:__tointeger()
end
natives.entity.get_entity_health = natives.ENTITY.GET_ENTITY_HEALTH

--[[
Return an integer value of entity's maximum health.

Example:
- Player = 200
- Ped = 150
]]
function natives.ENTITY.GET_ENTITY_MAX_HEALTH(--[[Entity]] entity) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.GET_ENTITY_MAX_HEALTH' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0x15D757606D170C3C, entity)
	return result:__tointeger()
end
natives.entity.get_entity_max_health = natives.ENTITY.GET_ENTITY_MAX_HEALTH

--[[
For instance: ENTITY::SET_ENTITY_MAX_HEALTH(PLAYER::PLAYER_PED_ID(), 200); // director_mode.c4: 67849
]]
function natives.ENTITY.SET_ENTITY_MAX_HEALTH(--[[Entity]] entity, --[[int]] value) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.SET_ENTITY_MAX_HEALTH' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(value) == "number", "Arg #2 (value) must be a number.")

	local result = native_call(0x166E7CF68597D8B5, entity, value)
end
natives.entity.set_entity_max_health = natives.ENTITY.SET_ENTITY_MAX_HEALTH

function natives.ENTITY.GET_ENTITY_HEIGHT(--[[Entity]] entity, --[[float]] X, --[[float]] Y, --[[float]] Z, --[[BOOL]] atTop, --[[BOOL]] inWorldCoords) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.GET_ENTITY_HEIGHT' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(X) == "number", "Arg #2 (X) must be a number.")
	assert(type(Y) == "number", "Arg #3 (Y) must be a number.")
	assert(type(Z) == "number", "Arg #4 (Z) must be a number.")
	assert(type(atTop) == "boolean", "Arg #5 (atTop) must be a boolean.")
	assert(type(inWorldCoords) == "boolean", "Arg #6 (inWorldCoords) must be a boolean.")

	local result = native_call(0x5A504562485944DD, entity, X, Y, Z, atTop, inWorldCoords)
	return result:__tonumber()
end
natives.entity.get_entity_height = natives.ENTITY.GET_ENTITY_HEIGHT

--[[
Return height (z-dimension) above ground. 
Example: The pilot in a titan plane is 1.844176 above ground.

How can i convert it to meters?
Everything seems to be in meters, probably this too.
]]
function natives.ENTITY.GET_ENTITY_HEIGHT_ABOVE_GROUND(--[[Entity]] entity) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.GET_ENTITY_HEIGHT_ABOVE_GROUND' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0x1DD55701034110E5, entity)
	return result:__tonumber()
end
natives.entity.get_entity_height_above_ground = natives.ENTITY.GET_ENTITY_HEIGHT_ABOVE_GROUND

function natives.ENTITY.GET_ENTITY_MATRIX(--[[Entity]] entity, --[[Vector3*]] forwardVector, --[[Vector3*]] rightVector, --[[Vector3*]] upVector, --[[Vector3*]] position) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.GET_ENTITY_MATRIX' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(forwardVector) == "userdata", "Arg #2 (forwardVector) must be a userdata.")
	assert(type(rightVector) == "userdata", "Arg #3 (rightVector) must be a userdata.")
	assert(type(upVector) == "userdata", "Arg #4 (upVector) must be a userdata.")
	assert(type(position) == "userdata", "Arg #5 (position) must be a userdata.")

	local result = native_call(0xECB2FC7235A7D137, entity, forwardVector, rightVector, upVector, position)
end
natives.entity.get_entity_matrix = natives.ENTITY.GET_ENTITY_MATRIX

--[[
Returns the model hash from the entity
]]
function natives.ENTITY.GET_ENTITY_MODEL(--[[Entity]] entity) -- Returns Hash
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.GET_ENTITY_MODEL' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0x9F47B058362C84B5, entity)
	return result:__tointeger()
end
natives.entity.get_entity_model = natives.ENTITY.GET_ENTITY_MODEL

--[[
Converts world coords (posX - Z) to coords relative to the entity

Example:
posX is given as 50
entity's x coord is 40
the returned x coord will then be 10 or -10, not sure haven't used this in a while (think it is 10 though).
]]
function natives.ENTITY.GET_OFFSET_FROM_ENTITY_GIVEN_WORLD_COORDS(--[[Entity]] entity, --[[float]] posX, --[[float]] posY, --[[float]] posZ) -- Returns Vector3
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.GET_OFFSET_FROM_ENTITY_GIVEN_WORLD_COORDS' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(posX) == "number", "Arg #2 (posX) must be a number.")
	assert(type(posY) == "number", "Arg #3 (posY) must be a number.")
	assert(type(posZ) == "number", "Arg #4 (posZ) must be a number.")

	local result = native_call(0x2274BC1C4885E333, entity, posX, posY, posZ)
	return result:__tov3()
end
natives.entity.get_offset_from_entity_given_world_coords = natives.ENTITY.GET_OFFSET_FROM_ENTITY_GIVEN_WORLD_COORDS

--[[
Offset values are relative to the entity.

x = left/right
y = forward/backward
z = up/down
]]
function natives.ENTITY.GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(--[[Entity]] entity, --[[float]] offsetX, --[[float]] offsetY, --[[float]] offsetZ) -- Returns Vector3
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(offsetX) == "number", "Arg #2 (offsetX) must be a number.")
	assert(type(offsetY) == "number", "Arg #3 (offsetY) must be a number.")
	assert(type(offsetZ) == "number", "Arg #4 (offsetZ) must be a number.")

	local result = native_call(0x1899F328B0E12848, entity, offsetX, offsetY, offsetZ)
	return result:__tov3()
end
natives.entity.get_offset_from_entity_in_world_coords = natives.ENTITY.GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS

function natives.ENTITY.GET_ENTITY_PITCH(--[[Entity]] entity) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.GET_ENTITY_PITCH' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0xD45DC2893621E1FE, entity)
	return result:__tonumber()
end
natives.entity.get_entity_pitch = natives.ENTITY.GET_ENTITY_PITCH

--[[
w is the correct parameter name!
]]
function natives.ENTITY.GET_ENTITY_QUATERNION(--[[Entity]] entity, --[[float*]] x, --[[float*]] y, --[[float*]] z, --[[float*]] w) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.GET_ENTITY_QUATERNION' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(x) == "userdata", "Arg #2 (x) must be a userdata.")
	assert(type(y) == "userdata", "Arg #3 (y) must be a userdata.")
	assert(type(z) == "userdata", "Arg #4 (z) must be a userdata.")
	assert(type(w) == "userdata", "Arg #5 (w) must be a userdata.")

	local result = native_call(0x7B3703D2D32DFA18, entity, x, y, z, w)
end
natives.entity.get_entity_quaternion = natives.ENTITY.GET_ENTITY_QUATERNION

--[[
Displays the current ROLL axis of the entity [-180.0000/180.0000+]
(Sideways Roll) such as a vehicle tipped on its side
]]
function natives.ENTITY.GET_ENTITY_ROLL(--[[Entity]] entity) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.GET_ENTITY_ROLL' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0x831E0242595560DF, entity)
	return result:__tonumber()
end
natives.entity.get_entity_roll = natives.ENTITY.GET_ENTITY_ROLL

--[[
rotationOrder is the order yaw, pitch and roll is applied. Usually 2. Returns a vector where the Z coordinate is the yaw.

rotationOrder refers to the order yaw pitch roll is applied; value ranges from 0 to 5 and is usually *2* in scripts.
What you use for rotationOrder when getting must be the same as rotationOrder when setting the rotation.

What it returns is the yaw on the z part of the vector, which makes sense considering R* considers z as vertical. Here's a picture for those of you who don't understand pitch, yaw, and roll: www.allstar.fiu.edu/aero/images/pic5-1.gif

Rotation Orders:
0: ZYX - Rotate around the z-axis, then the y-axis and finally the x-axis.
1: YZX - Rotate around the y-axis, then the z-axis and finally the x-axis.
2: ZXY - Rotate around the z-axis, then the x-axis and finally the y-axis.
3: XZY - Rotate around the x-axis, then the z-axis and finally the y-axis.
4: YXZ - Rotate around the y-axis, then the x-axis and finally the z-axis.
5: XYZ - Rotate around the x-axis, then the y-axis and finally the z-axis.
]]
function natives.ENTITY.GET_ENTITY_ROTATION(--[[Entity]] entity, --[[int]] rotationOrder) -- Returns Vector3
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.GET_ENTITY_ROTATION' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(rotationOrder) == "number", "Arg #2 (rotationOrder) must be a number.")

	local result = native_call(0xAFBD61CC738D9EB9, entity, rotationOrder)
	return result:__tov3()
end
natives.entity.get_entity_rotation = natives.ENTITY.GET_ENTITY_ROTATION

function natives.ENTITY.GET_ENTITY_ROTATION_VELOCITY(--[[Entity]] entity) -- Returns Vector3
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.GET_ENTITY_ROTATION_VELOCITY' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0x213B91045D09B983, entity)
	return result:__tov3()
end
natives.entity.get_entity_rotation_velocity = natives.ENTITY.GET_ENTITY_ROTATION_VELOCITY

--[[
Returns the name of the script that owns/created the entity or nullptr. Second parameter is unused, can just be a nullptr.
]]
function natives.ENTITY.GET_ENTITY_SCRIPT(--[[Entity]] entity, --[[ScrHandle*]] script) -- Returns const char*
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.GET_ENTITY_SCRIPT' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(script) == "userdata", "Arg #2 (script) must be a userdata.")

	local result = native_call(0xA6E9C38DB51D7748, entity, script)
	return result:__tostring(true)
end
natives.entity.get_entity_script = natives.ENTITY.GET_ENTITY_SCRIPT

--[[
result is in meters per second

------------------------------------------------------------
So would the conversion to mph and km/h, be along the lines of this.

float speed = GET_ENTITY_SPEED(veh);
float kmh = (speed * 3.6);
float mph = (speed * 2.236936);
------------------------------------------------------------
]]
function natives.ENTITY.GET_ENTITY_SPEED(--[[Entity]] entity) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.GET_ENTITY_SPEED' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0xD5037BA82E12416F, entity)
	return result:__tonumber()
end
natives.entity.get_entity_speed = natives.ENTITY.GET_ENTITY_SPEED

--[[
Relative can be used for getting speed relative to the frame of the vehicle, to determine for example, if you are going in reverse (-y speed) or not (+y speed). 
]]
function natives.ENTITY.GET_ENTITY_SPEED_VECTOR(--[[Entity]] entity, --[[BOOL]] relative) -- Returns Vector3
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.GET_ENTITY_SPEED_VECTOR' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(relative) == "boolean", "Arg #2 (relative) must be a boolean.")

	local result = native_call(0x9A8D700A51CB7B0D, entity, relative)
	return result:__tov3()
end
natives.entity.get_entity_speed_vector = natives.ENTITY.GET_ENTITY_SPEED_VECTOR

function natives.ENTITY.GET_ENTITY_UPRIGHT_VALUE(--[[Entity]] entity) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.GET_ENTITY_UPRIGHT_VALUE' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0x95EED5A694951F9F, entity)
	return result:__tonumber()
end
natives.entity.get_entity_upright_value = natives.ENTITY.GET_ENTITY_UPRIGHT_VALUE

function natives.ENTITY.GET_ENTITY_VELOCITY(--[[Entity]] entity) -- Returns Vector3
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.GET_ENTITY_VELOCITY' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0x4805D2B1D8CF94A9, entity)
	return result:__tov3()
end
natives.entity.get_entity_velocity = natives.ENTITY.GET_ENTITY_VELOCITY

--[[
Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).
]]
function natives.ENTITY.GET_OBJECT_INDEX_FROM_ENTITY_INDEX(--[[Entity]] entity) -- Returns Object
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.GET_OBJECT_INDEX_FROM_ENTITY_INDEX' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0xD7E3B9735C0F89D6, entity)
	return result:__tointeger()
end
natives.entity.get_object_index_from_entity_index = natives.ENTITY.GET_OBJECT_INDEX_FROM_ENTITY_INDEX

--[[
Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).
]]
function natives.ENTITY.GET_PED_INDEX_FROM_ENTITY_INDEX(--[[Entity]] entity) -- Returns Ped
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.GET_PED_INDEX_FROM_ENTITY_INDEX' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0x04A2A40C73395041, entity)
	return result:__tointeger()
end
natives.entity.get_ped_index_from_entity_index = natives.ENTITY.GET_PED_INDEX_FROM_ENTITY_INDEX

--[[
Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).
]]
function natives.ENTITY.GET_VEHICLE_INDEX_FROM_ENTITY_INDEX(--[[Entity]] entity) -- Returns Vehicle
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.GET_VEHICLE_INDEX_FROM_ENTITY_INDEX' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0x4B53F92932ADFAC0, entity)
	return result:__tointeger()
end
natives.entity.get_vehicle_index_from_entity_index = natives.ENTITY.GET_VEHICLE_INDEX_FROM_ENTITY_INDEX

--[[
Returns the coordinates of an entity-bone.
]]
function natives.ENTITY.GET_WORLD_POSITION_OF_ENTITY_BONE(--[[Entity]] entity, --[[int]] boneIndex) -- Returns Vector3
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.GET_WORLD_POSITION_OF_ENTITY_BONE' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(boneIndex) == "number", "Arg #2 (boneIndex) must be a number.")

	local result = native_call(0x44A8FCB8ED227738, entity, boneIndex)
	return result:__tov3()
end
natives.entity.get_world_position_of_entity_bone = natives.ENTITY.GET_WORLD_POSITION_OF_ENTITY_BONE

function natives.ENTITY.GET_NEAREST_PLAYER_TO_ENTITY(--[[Entity]] entity) -- Returns Player
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.GET_NEAREST_PLAYER_TO_ENTITY' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0x7196842CB375CDB3, entity)
	return result:__tointeger()
end
natives.entity.get_nearest_player_to_entity = natives.ENTITY.GET_NEAREST_PLAYER_TO_ENTITY

function natives.ENTITY.GET_NEAREST_PLAYER_TO_ENTITY_ON_TEAM(--[[Entity]] entity, --[[int]] team) -- Returns Player
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.GET_NEAREST_PLAYER_TO_ENTITY_ON_TEAM' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(team) == "number", "Arg #2 (team) must be a number.")

	local result = native_call(0x4DC9A62F844D9337, entity, team)
	return result:__tointeger()
end
natives.entity.get_nearest_player_to_entity_on_team = natives.ENTITY.GET_NEAREST_PLAYER_TO_ENTITY_ON_TEAM

--[[
Returns:
0 = no entity
1 = ped
2 = vehicle
3 = object
]]
function natives.ENTITY.GET_ENTITY_TYPE(--[[Entity]] entity) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.GET_ENTITY_TYPE' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0x8ACD366038D14505, entity)
	return result:__tointeger()
end
natives.entity.get_entity_type = natives.ENTITY.GET_ENTITY_TYPE

--[[
A population type, from the following enum: https://alloc8or.re/gta5/doc/enums/ePopulationType.txt
]]
function natives.ENTITY.GET_ENTITY_POPULATION_TYPE(--[[Entity]] entity) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.GET_ENTITY_POPULATION_TYPE' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0xF6F5161F4534EDFF, entity)
	return result:__tointeger()
end
natives.entity.get_entity_population_type = natives.ENTITY.GET_ENTITY_POPULATION_TYPE

function natives.ENTITY.IS_AN_ENTITY(--[[ScrHandle]] handle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.IS_AN_ENTITY' due to disabled trusted mode")

	assert(type(handle) == "number", "Arg #1 (handle) must be a number.")

	local result = native_call(0x731EC8A916BD11A1, handle)
	return result:__tointeger() ~= 0
end
natives.entity.is_an_entity = natives.ENTITY.IS_AN_ENTITY

function natives.ENTITY.IS_ENTITY_A_PED(--[[Entity]] entity) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.IS_ENTITY_A_PED' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0x524AC5ECEA15343E, entity)
	return result:__tointeger() ~= 0
end
natives.entity.is_entity_a_ped = natives.ENTITY.IS_ENTITY_A_PED

function natives.ENTITY.IS_ENTITY_A_MISSION_ENTITY(--[[Entity]] entity) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.IS_ENTITY_A_MISSION_ENTITY' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0x0A7B270912999B3C, entity)
	return result:__tointeger() ~= 0
end
natives.entity.is_entity_a_mission_entity = natives.ENTITY.IS_ENTITY_A_MISSION_ENTITY

function natives.ENTITY.IS_ENTITY_A_VEHICLE(--[[Entity]] entity) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.IS_ENTITY_A_VEHICLE' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0x6AC7003FA6E5575E, entity)
	return result:__tointeger() ~= 0
end
natives.entity.is_entity_a_vehicle = natives.ENTITY.IS_ENTITY_A_VEHICLE

function natives.ENTITY.IS_ENTITY_AN_OBJECT(--[[Entity]] entity) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.IS_ENTITY_AN_OBJECT' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0x8D68C8FD0FACA94E, entity)
	return result:__tointeger() ~= 0
end
natives.entity.is_entity_an_object = natives.ENTITY.IS_ENTITY_AN_OBJECT

--[[
Checks if entity is within x/y/zSize distance of x/y/z. 

Last three are unknown ints, almost always p7 = 0, p8 = 1, p9 = 0
]]
function natives.ENTITY.IS_ENTITY_AT_COORD(--[[Entity]] entity, --[[float]] xPos, --[[float]] yPos, --[[float]] zPos, --[[float]] xSize, --[[float]] ySize, --[[float]] zSize, --[[BOOL]] p7, --[[BOOL]] p8, --[[int]] p9) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.IS_ENTITY_AT_COORD' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(xPos) == "number", "Arg #2 (xPos) must be a number.")
	assert(type(yPos) == "number", "Arg #3 (yPos) must be a number.")
	assert(type(zPos) == "number", "Arg #4 (zPos) must be a number.")
	assert(type(xSize) == "number", "Arg #5 (xSize) must be a number.")
	assert(type(ySize) == "number", "Arg #6 (ySize) must be a number.")
	assert(type(zSize) == "number", "Arg #7 (zSize) must be a number.")
	assert(type(p7) == "boolean", "Arg #8 (p7) must be a boolean.")
	assert(type(p8) == "boolean", "Arg #9 (p8) must be a boolean.")
	assert(type(p9) == "number", "Arg #10 (p9) must be a number.")

	local result = native_call(0x20B60995556D004F, entity, xPos, yPos, zPos, xSize, ySize, zSize, p7, p8, p9)
	return result:__tointeger() ~= 0
end
natives.entity.is_entity_at_coord = natives.ENTITY.IS_ENTITY_AT_COORD

--[[
Checks if entity1 is within the box defined by x/y/zSize of entity2.

Last three parameters are almost alwasy p5 = 0, p6 = 1, p7 = 0
]]
function natives.ENTITY.IS_ENTITY_AT_ENTITY(--[[Entity]] entity1, --[[Entity]] entity2, --[[float]] xSize, --[[float]] ySize, --[[float]] zSize, --[[BOOL]] p5, --[[BOOL]] p6, --[[int]] p7) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.IS_ENTITY_AT_ENTITY' due to disabled trusted mode")

	assert(type(entity1) == "number", "Arg #1 (entity1) must be a number.")
	assert(type(entity2) == "number", "Arg #2 (entity2) must be a number.")
	assert(type(xSize) == "number", "Arg #3 (xSize) must be a number.")
	assert(type(ySize) == "number", "Arg #4 (ySize) must be a number.")
	assert(type(zSize) == "number", "Arg #5 (zSize) must be a number.")
	assert(type(p5) == "boolean", "Arg #6 (p5) must be a boolean.")
	assert(type(p6) == "boolean", "Arg #7 (p6) must be a boolean.")
	assert(type(p7) == "number", "Arg #8 (p7) must be a number.")

	local result = native_call(0x751B70C3D034E187, entity1, entity2, xSize, ySize, zSize, p5, p6, p7)
	return result:__tointeger() ~= 0
end
natives.entity.is_entity_at_entity = natives.ENTITY.IS_ENTITY_AT_ENTITY

--[[
Whether the entity is attached to any other entity.
]]
function natives.ENTITY.IS_ENTITY_ATTACHED(--[[Entity]] entity) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.IS_ENTITY_ATTACHED' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0xB346476EF1A64897, entity)
	return result:__tointeger() ~= 0
end
natives.entity.is_entity_attached = natives.ENTITY.IS_ENTITY_ATTACHED

function natives.ENTITY.IS_ENTITY_ATTACHED_TO_ANY_OBJECT(--[[Entity]] entity) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.IS_ENTITY_ATTACHED_TO_ANY_OBJECT' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0xCF511840CEEDE0CC, entity)
	return result:__tointeger() ~= 0
end
natives.entity.is_entity_attached_to_any_object = natives.ENTITY.IS_ENTITY_ATTACHED_TO_ANY_OBJECT

function natives.ENTITY.IS_ENTITY_ATTACHED_TO_ANY_PED(--[[Entity]] entity) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.IS_ENTITY_ATTACHED_TO_ANY_PED' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0xB1632E9A5F988D11, entity)
	return result:__tointeger() ~= 0
end
natives.entity.is_entity_attached_to_any_ped = natives.ENTITY.IS_ENTITY_ATTACHED_TO_ANY_PED

function natives.ENTITY.IS_ENTITY_ATTACHED_TO_ANY_VEHICLE(--[[Entity]] entity) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.IS_ENTITY_ATTACHED_TO_ANY_VEHICLE' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0x26AA915AD89BFB4B, entity)
	return result:__tointeger() ~= 0
end
natives.entity.is_entity_attached_to_any_vehicle = natives.ENTITY.IS_ENTITY_ATTACHED_TO_ANY_VEHICLE

function natives.ENTITY.IS_ENTITY_ATTACHED_TO_ENTITY(--[[Entity]] from, --[[Entity]] to) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.IS_ENTITY_ATTACHED_TO_ENTITY' due to disabled trusted mode")

	assert(type(from) == "number", "Arg #1 (from) must be a number.")
	assert(type(to) == "number", "Arg #2 (to) must be a number.")

	local result = native_call(0xEFBE71898A993728, from, to)
	return result:__tointeger() ~= 0
end
natives.entity.is_entity_attached_to_entity = natives.ENTITY.IS_ENTITY_ATTACHED_TO_ENTITY

function natives.ENTITY.IS_ENTITY_DEAD(--[[Entity]] entity, --[[BOOL]] p1) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.IS_ENTITY_DEAD' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0x5F9532F3B5CC2551, entity, p1)
	return result:__tointeger() ~= 0
end
natives.entity.is_entity_dead = natives.ENTITY.IS_ENTITY_DEAD

function natives.ENTITY.IS_ENTITY_IN_AIR(--[[Entity]] entity) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.IS_ENTITY_IN_AIR' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0x886E37EC497200B6, entity)
	return result:__tointeger() ~= 0
end
natives.entity.is_entity_in_air = natives.ENTITY.IS_ENTITY_IN_AIR

--[[
`p8` is a debug flag invoking functions in the same path as ``DRAW_MARKER``
`p10` is some entity flag check, also used in `IS_ENTITY_AT_ENTITY`, `IS_ENTITY_IN_AREA`, and `IS_ENTITY_AT_COORD`.
See IS_POINT_IN_ANGLED_AREA for the definition of an angled area.
]]
function natives.ENTITY.IS_ENTITY_IN_ANGLED_AREA(--[[Entity]] entity, --[[float]] x1, --[[float]] y1, --[[float]] z1, --[[float]] x2, --[[float]] y2, --[[float]] z2, --[[float]] width, --[[BOOL]] debug, --[[BOOL]] includeZ, --[[Any]] p10) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.IS_ENTITY_IN_ANGLED_AREA' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(x1) == "number", "Arg #2 (x1) must be a number.")
	assert(type(y1) == "number", "Arg #3 (y1) must be a number.")
	assert(type(z1) == "number", "Arg #4 (z1) must be a number.")
	assert(type(x2) == "number", "Arg #5 (x2) must be a number.")
	assert(type(y2) == "number", "Arg #6 (y2) must be a number.")
	assert(type(z2) == "number", "Arg #7 (z2) must be a number.")
	assert(type(width) == "number", "Arg #8 (width) must be a number.")
	assert(type(debug) == "boolean", "Arg #9 (debug) must be a boolean.")
	assert(type(includeZ) == "boolean", "Arg #10 (includeZ) must be a boolean.")
	assert(type(p10) == "number", "Arg #11 (p10) must be a number.")

	local result = native_call(0x51210CED3DA1C78A, entity, x1, y1, z1, x2, y2, z2, width, debug, includeZ, p10)
	return result:__tointeger() ~= 0
end
natives.entity.is_entity_in_angled_area = natives.ENTITY.IS_ENTITY_IN_ANGLED_AREA

function natives.ENTITY.IS_ENTITY_IN_AREA(--[[Entity]] entity, --[[float]] x1, --[[float]] y1, --[[float]] z1, --[[float]] x2, --[[float]] y2, --[[float]] z2, --[[BOOL]] p7, --[[BOOL]] p8, --[[Any]] p9) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.IS_ENTITY_IN_AREA' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(x1) == "number", "Arg #2 (x1) must be a number.")
	assert(type(y1) == "number", "Arg #3 (y1) must be a number.")
	assert(type(z1) == "number", "Arg #4 (z1) must be a number.")
	assert(type(x2) == "number", "Arg #5 (x2) must be a number.")
	assert(type(y2) == "number", "Arg #6 (y2) must be a number.")
	assert(type(z2) == "number", "Arg #7 (z2) must be a number.")
	assert(type(p7) == "boolean", "Arg #8 (p7) must be a boolean.")
	assert(type(p8) == "boolean", "Arg #9 (p8) must be a boolean.")
	assert(type(p9) == "number", "Arg #10 (p9) must be a number.")

	local result = native_call(0x54736AA40E271165, entity, x1, y1, z1, x2, y2, z2, p7, p8, p9)
	return result:__tointeger() ~= 0
end
natives.entity.is_entity_in_area = natives.ENTITY.IS_ENTITY_IN_AREA

--[[
Full list of zones by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/zones.json
]]
function natives.ENTITY.IS_ENTITY_IN_ZONE(--[[Entity]] entity, --[[const char*]] zone) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.IS_ENTITY_IN_ZONE' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(zone) == "string", "Arg #2 (zone) must be a string.")

	local result = native_call(0xB6463CF6AF527071, entity, zone)
	return result:__tointeger() ~= 0
end
natives.entity.is_entity_in_zone = natives.ENTITY.IS_ENTITY_IN_ZONE

function natives.ENTITY.IS_ENTITY_IN_WATER(--[[Entity]] entity) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.IS_ENTITY_IN_WATER' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0xCFB0A0D8EDD145A3, entity)
	return result:__tointeger() ~= 0
end
natives.entity.is_entity_in_water = natives.ENTITY.IS_ENTITY_IN_WATER

--[[
Get how much of the entity is submerged.  1.0f is whole entity.
]]
function natives.ENTITY.GET_ENTITY_SUBMERGED_LEVEL(--[[Entity]] entity) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.GET_ENTITY_SUBMERGED_LEVEL' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0xE81AFC1BC4CC41CE, entity)
	return result:__tonumber()
end
natives.entity.get_entity_submerged_level = natives.ENTITY.GET_ENTITY_SUBMERGED_LEVEL

function natives.ENTITY.SET_ENTITY_REQUIRES_MORE_EXPENSIVE_RIVER_CHECK(--[[Entity]] entity, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.SET_ENTITY_REQUIRES_MORE_EXPENSIVE_RIVER_CHECK' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x694E00132F2823ED, entity, toggle)
end
natives.entity.set_entity_requires_more_expensive_river_check = natives.ENTITY.SET_ENTITY_REQUIRES_MORE_EXPENSIVE_RIVER_CHECK

--[[
Returns true if the entity is in between the minimum and maximum values for the 2d screen coords. 
This means that it will return true even if the entity is behind a wall for example, as long as you're looking at their location. 
Chipping
]]
function natives.ENTITY.IS_ENTITY_ON_SCREEN(--[[Entity]] entity) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.IS_ENTITY_ON_SCREEN' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0xE659E47AF827484B, entity)
	return result:__tointeger() ~= 0
end
natives.entity.is_entity_on_screen = natives.ENTITY.IS_ENTITY_ON_SCREEN

--[[
See also PED::IS_SCRIPTED_SCENARIO_PED_USING_CONDITIONAL_ANIM 0x6EC47A344923E1ED 0x3C30B447

Taken from ENTITY::IS_ENTITY_PLAYING_ANIM(PLAYER::PLAYER_PED_ID(), "creatures@shark@move", "attack_player", 3)

p4 is always 3 in the scripts.

Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
]]
function natives.ENTITY.IS_ENTITY_PLAYING_ANIM(--[[Entity]] entity, --[[const char*]] animDict, --[[const char*]] animName, --[[int]] taskFlag) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.IS_ENTITY_PLAYING_ANIM' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(animDict) == "string", "Arg #2 (animDict) must be a string.")
	assert(type(animName) == "string", "Arg #3 (animName) must be a string.")
	assert(type(taskFlag) == "number", "Arg #4 (taskFlag) must be a number.")

	local result = native_call(0x1F0B79228E461EC9, entity, animDict, animName, taskFlag)
	return result:__tointeger() ~= 0
end
natives.entity.is_entity_playing_anim = natives.ENTITY.IS_ENTITY_PLAYING_ANIM

--[[
a static ped will not react to natives like "APPLY_FORCE_TO_ENTITY" or "SET_ENTITY_VELOCITY" and oftentimes will not react to task-natives like "TASK::TASK_COMBAT_PED". The only way I know of to make one of these peds react is to ragdoll them (or sometimes to use CLEAR_PED_TASKS_IMMEDIATELY(). Static peds include almost all far-away peds, beach-combers, peds in certain scenarios, peds crossing a crosswalk, peds walking to get back into their cars, and others. If anyone knows how to make a ped non-static without ragdolling them, please edit this with the solution.

how can I make an entity static???
]]
function natives.ENTITY.IS_ENTITY_STATIC(--[[Entity]] entity) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.IS_ENTITY_STATIC' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0x1218E6886D3D8327, entity)
	return result:__tointeger() ~= 0
end
natives.entity.is_entity_static = natives.ENTITY.IS_ENTITY_STATIC

function natives.ENTITY.IS_ENTITY_TOUCHING_ENTITY(--[[Entity]] entity, --[[Entity]] targetEntity) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.IS_ENTITY_TOUCHING_ENTITY' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(targetEntity) == "number", "Arg #2 (targetEntity) must be a number.")

	local result = native_call(0x17FFC1B2BA35A494, entity, targetEntity)
	return result:__tointeger() ~= 0
end
natives.entity.is_entity_touching_entity = natives.ENTITY.IS_ENTITY_TOUCHING_ENTITY

function natives.ENTITY.IS_ENTITY_TOUCHING_MODEL(--[[Entity]] entity, --[[Hash]] modelHash) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.IS_ENTITY_TOUCHING_MODEL' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(modelHash) == "number", "Arg #2 (modelHash) must be a number.")

	local result = native_call(0x0F42323798A58C8C, entity, modelHash)
	return result:__tointeger() ~= 0
end
natives.entity.is_entity_touching_model = natives.ENTITY.IS_ENTITY_TOUCHING_MODEL

function natives.ENTITY.IS_ENTITY_UPRIGHT(--[[Entity]] entity, --[[float]] angle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.IS_ENTITY_UPRIGHT' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(angle) == "number", "Arg #2 (angle) must be a number.")

	local result = native_call(0x5333F526F6AB19AA, entity, angle)
	return result:__tointeger() ~= 0
end
natives.entity.is_entity_upright = natives.ENTITY.IS_ENTITY_UPRIGHT

function natives.ENTITY.IS_ENTITY_UPSIDEDOWN(--[[Entity]] entity) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.IS_ENTITY_UPSIDEDOWN' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0x1DBD58820FA61D71, entity)
	return result:__tointeger() ~= 0
end
natives.entity.is_entity_upsidedown = natives.ENTITY.IS_ENTITY_UPSIDEDOWN

function natives.ENTITY.IS_ENTITY_VISIBLE(--[[Entity]] entity) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.IS_ENTITY_VISIBLE' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0x47D6F43D77935C75, entity)
	return result:__tointeger() ~= 0
end
natives.entity.is_entity_visible = natives.ENTITY.IS_ENTITY_VISIBLE

function natives.ENTITY.IS_ENTITY_VISIBLE_TO_SCRIPT(--[[Entity]] entity) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.IS_ENTITY_VISIBLE_TO_SCRIPT' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0xD796CB5BA8F20E32, entity)
	return result:__tointeger() ~= 0
end
natives.entity.is_entity_visible_to_script = natives.ENTITY.IS_ENTITY_VISIBLE_TO_SCRIPT

function natives.ENTITY.IS_ENTITY_OCCLUDED(--[[Entity]] entity) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.IS_ENTITY_OCCLUDED' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0xE31C2C72B8692B64, entity)
	return result:__tointeger() ~= 0
end
natives.entity.is_entity_occluded = natives.ENTITY.IS_ENTITY_OCCLUDED

function natives.ENTITY.WOULD_ENTITY_BE_OCCLUDED(--[[Hash]] entityModelHash, --[[float]] x, --[[float]] y, --[[float]] z, --[[BOOL]] p4) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.WOULD_ENTITY_BE_OCCLUDED' due to disabled trusted mode")

	assert(type(entityModelHash) == "number", "Arg #1 (entityModelHash) must be a number.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")
	assert(type(p4) == "boolean", "Arg #5 (p4) must be a boolean.")

	local result = native_call(0xEE5D2A122E09EC42, entityModelHash, x, y, z, p4)
	return result:__tointeger() ~= 0
end
natives.entity.would_entity_be_occluded = natives.ENTITY.WOULD_ENTITY_BE_OCCLUDED

function natives.ENTITY.IS_ENTITY_WAITING_FOR_WORLD_COLLISION(--[[Entity]] entity) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.IS_ENTITY_WAITING_FOR_WORLD_COLLISION' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0xD05BFF0C0A12C68F, entity)
	return result:__tointeger() ~= 0
end
natives.entity.is_entity_waiting_for_world_collision = natives.ENTITY.IS_ENTITY_WAITING_FOR_WORLD_COLLISION

--[[
Applies a force to the specified entity.

**List of force types (p1)**:
public enum ForceType
{
    MinForce = 0,
    MaxForceRot = 1,
    MinForce2 = 2,
    MaxForceRot2 = 3,
    ForceNoRot = 4,
    ForceRotPlusForce = 5
}
Research/documentation on the gtaforums can be found here https://gtaforums.com/topic/885669-precisely-define-object-physics/) and here https://gtaforums.com/topic/887362-apply-forces-and-momentums-to-entityobject/.

p6/relative - makes the xyz force not relative to world coords, but to something else
p7/highForce - setting false will make the force really low
]]
function natives.ENTITY.APPLY_FORCE_TO_ENTITY_CENTER_OF_MASS(--[[Entity]] entity, --[[int]] forceType, --[[float]] x, --[[float]] y, --[[float]] z, --[[BOOL]] p5, --[[BOOL]] isDirectionRel, --[[BOOL]] isForceRel, --[[BOOL]] p8) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.APPLY_FORCE_TO_ENTITY_CENTER_OF_MASS' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(forceType) == "number", "Arg #2 (forceType) must be a number.")
	assert(type(x) == "number", "Arg #3 (x) must be a number.")
	assert(type(y) == "number", "Arg #4 (y) must be a number.")
	assert(type(z) == "number", "Arg #5 (z) must be a number.")
	assert(type(p5) == "boolean", "Arg #6 (p5) must be a boolean.")
	assert(type(isDirectionRel) == "boolean", "Arg #7 (isDirectionRel) must be a boolean.")
	assert(type(isForceRel) == "boolean", "Arg #8 (isForceRel) must be a boolean.")
	assert(type(p8) == "boolean", "Arg #9 (p8) must be a boolean.")

	local result = native_call(0x18FF00FC7EFF559E, entity, forceType, x, y, z, p5, isDirectionRel, isForceRel, p8)
end
natives.entity.apply_force_to_entity_center_of_mass = natives.ENTITY.APPLY_FORCE_TO_ENTITY_CENTER_OF_MASS

--[[
Documented here:
gtaforums.com/topic/885669-precisely-define-object-physics/
gtaforums.com/topic/887362-apply-forces-and-momentums-to-entityobject/

forceFlags:
First bit (lowest): Strong force flag, factor 100
Second bit: Unkown flag
Third bit: Momentum flag=1 (vector (x,y,z) is a momentum, more research needed)
If higher bits are unequal 0 the function doesn't applay any forces at all.
(As integer possible values are 0-7)

0: weak force
1: strong force
2: same as 0 (2nd bit?)
3: same as 1
4: weak momentum
5: strong momentum
6: same as 4
7: same as 5

isLocal: vector defined in local (body-fixed) coordinate frame
isMassRel: if true the force gets multiplied with the objects mass (this is why it was known as highForce) and different objects will have the same acceleration.

p8 !!! Whenever I set this !=0, my script stopped.
]]
function natives.ENTITY.APPLY_FORCE_TO_ENTITY(--[[Entity]] entity, --[[int]] forceFlags, --[[float]] x, --[[float]] y, --[[float]] z, --[[float]] offX, --[[float]] offY, --[[float]] offZ, --[[int]] boneIndex, --[[BOOL]] isDirectionRel, --[[BOOL]] ignoreUpVec, --[[BOOL]] isForceRel, --[[BOOL]] p12, --[[BOOL]] p13) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.APPLY_FORCE_TO_ENTITY' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(forceFlags) == "number", "Arg #2 (forceFlags) must be a number.")
	assert(type(x) == "number", "Arg #3 (x) must be a number.")
	assert(type(y) == "number", "Arg #4 (y) must be a number.")
	assert(type(z) == "number", "Arg #5 (z) must be a number.")
	assert(type(offX) == "number", "Arg #6 (offX) must be a number.")
	assert(type(offY) == "number", "Arg #7 (offY) must be a number.")
	assert(type(offZ) == "number", "Arg #8 (offZ) must be a number.")
	assert(type(boneIndex) == "number", "Arg #9 (boneIndex) must be a number.")
	assert(type(isDirectionRel) == "boolean", "Arg #10 (isDirectionRel) must be a boolean.")
	assert(type(ignoreUpVec) == "boolean", "Arg #11 (ignoreUpVec) must be a boolean.")
	assert(type(isForceRel) == "boolean", "Arg #12 (isForceRel) must be a boolean.")
	assert(type(p12) == "boolean", "Arg #13 (p12) must be a boolean.")
	assert(type(p13) == "boolean", "Arg #14 (p13) must be a boolean.")

	local result = native_call(0xC5F68BE9613E2D18, entity, forceFlags, x, y, z, offX, offY, offZ, boneIndex, isDirectionRel, ignoreUpVec, isForceRel, p12, p13)
end
natives.entity.apply_force_to_entity = natives.ENTITY.APPLY_FORCE_TO_ENTITY

--[[
Attaches entity1 to bone (boneIndex) of entity2.

boneIndex - this is different to boneID, use GET_PED_BONE_INDEX to get the index from the ID. use the index for attaching to specific bones. entity1 will be attached to entity2's centre if bone index given doesn't correspond to bone indexes for that entity type.

useSoftPinning - if set to false attached entity will not detach when fixed
collision - controls collision between the two entities (FALSE disables collision).
isPed - pitch doesnt work when false and roll will only work on negative numbers (only peds)
vertexIndex - position of vertex
fixedRot - if false it ignores entity vector 

]]
function natives.ENTITY.ATTACH_ENTITY_TO_ENTITY(--[[Entity]] entity1, --[[Entity]] entity2, --[[int]] boneIndex, --[[float]] xPos, --[[float]] yPos, --[[float]] zPos, --[[float]] xRot, --[[float]] yRot, --[[float]] zRot, --[[BOOL]] p9, --[[BOOL]] useSoftPinning, --[[BOOL]] collision, --[[BOOL]] isPed, --[[int]] vertexIndex, --[[BOOL]] fixedRot, --[[Any]] p15) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.ATTACH_ENTITY_TO_ENTITY' due to disabled trusted mode")

	assert(type(entity1) == "number", "Arg #1 (entity1) must be a number.")
	assert(type(entity2) == "number", "Arg #2 (entity2) must be a number.")
	assert(type(boneIndex) == "number", "Arg #3 (boneIndex) must be a number.")
	assert(type(xPos) == "number", "Arg #4 (xPos) must be a number.")
	assert(type(yPos) == "number", "Arg #5 (yPos) must be a number.")
	assert(type(zPos) == "number", "Arg #6 (zPos) must be a number.")
	assert(type(xRot) == "number", "Arg #7 (xRot) must be a number.")
	assert(type(yRot) == "number", "Arg #8 (yRot) must be a number.")
	assert(type(zRot) == "number", "Arg #9 (zRot) must be a number.")
	assert(type(p9) == "boolean", "Arg #10 (p9) must be a boolean.")
	assert(type(useSoftPinning) == "boolean", "Arg #11 (useSoftPinning) must be a boolean.")
	assert(type(collision) == "boolean", "Arg #12 (collision) must be a boolean.")
	assert(type(isPed) == "boolean", "Arg #13 (isPed) must be a boolean.")
	assert(type(vertexIndex) == "number", "Arg #14 (vertexIndex) must be a number.")
	assert(type(fixedRot) == "boolean", "Arg #15 (fixedRot) must be a boolean.")
	assert(type(p15) == "number", "Arg #16 (p15) must be a number.")

	local result = native_call(0x6B9BBD38AB0796DF, entity1, entity2, boneIndex, xPos, yPos, zPos, xRot, yRot, zRot, p9, useSoftPinning, collision, isPed, vertexIndex, fixedRot, p15)
end
natives.entity.attach_entity_to_entity = natives.ENTITY.ATTACH_ENTITY_TO_ENTITY

function natives.ENTITY.ATTACH_ENTITY_BONE_TO_ENTITY_BONE(--[[Entity]] entity1, --[[Entity]] entity2, --[[int]] boneIndex1, --[[int]] boneIndex2, --[[BOOL]] p4, --[[BOOL]] p5) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.ATTACH_ENTITY_BONE_TO_ENTITY_BONE' due to disabled trusted mode")

	assert(type(entity1) == "number", "Arg #1 (entity1) must be a number.")
	assert(type(entity2) == "number", "Arg #2 (entity2) must be a number.")
	assert(type(boneIndex1) == "number", "Arg #3 (boneIndex1) must be a number.")
	assert(type(boneIndex2) == "number", "Arg #4 (boneIndex2) must be a number.")
	assert(type(p4) == "boolean", "Arg #5 (p4) must be a boolean.")
	assert(type(p5) == "boolean", "Arg #6 (p5) must be a boolean.")

	local result = native_call(0x5C48B75732C8456C, entity1, entity2, boneIndex1, boneIndex2, p4, p5)
end
natives.entity.attach_entity_bone_to_entity_bone = natives.ENTITY.ATTACH_ENTITY_BONE_TO_ENTITY_BONE

function natives.ENTITY.ATTACH_ENTITY_BONE_TO_ENTITY_BONE_Y_FORWARD(--[[Entity]] entity1, --[[Entity]] entity2, --[[int]] boneIndex1, --[[int]] boneIndex2, --[[BOOL]] p4, --[[BOOL]] p5) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.ATTACH_ENTITY_BONE_TO_ENTITY_BONE_Y_FORWARD' due to disabled trusted mode")

	assert(type(entity1) == "number", "Arg #1 (entity1) must be a number.")
	assert(type(entity2) == "number", "Arg #2 (entity2) must be a number.")
	assert(type(boneIndex1) == "number", "Arg #3 (boneIndex1) must be a number.")
	assert(type(boneIndex2) == "number", "Arg #4 (boneIndex2) must be a number.")
	assert(type(p4) == "boolean", "Arg #5 (p4) must be a boolean.")
	assert(type(p5) == "boolean", "Arg #6 (p5) must be a boolean.")

	local result = native_call(0xFD1695C5D3B05439, entity1, entity2, boneIndex1, boneIndex2, p4, p5)
end
natives.entity.attach_entity_bone_to_entity_bone_y_forward = natives.ENTITY.ATTACH_ENTITY_BONE_TO_ENTITY_BONE_Y_FORWARD

--[[
breakForce is the amount of force required to break the bond.
p14 - is always 1 in scripts
p15 - is 1 or 0 in scripts - unknoun what it does
p16 - controls collision between the two entities (FALSE disables collision).
p17 - do not teleport entity to be attached to the position of the bone Index of the target entity (if 1, entity will not be teleported to target bone)
p18 - is always 2 in scripts.


]]
function natives.ENTITY.ATTACH_ENTITY_TO_ENTITY_PHYSICALLY(--[[Entity]] entity1, --[[Entity]] entity2, --[[int]] boneIndex1, --[[int]] boneIndex2, --[[float]] xPos1, --[[float]] yPos1, --[[float]] zPos1, --[[float]] xPos2, --[[float]] yPos2, --[[float]] zPos2, --[[float]] xRot, --[[float]] yRot, --[[float]] zRot, --[[float]] breakForce, --[[BOOL]] fixedRot, --[[BOOL]] p15, --[[BOOL]] collision, --[[BOOL]] p17, --[[int]] p18) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.ATTACH_ENTITY_TO_ENTITY_PHYSICALLY' due to disabled trusted mode")

	assert(type(entity1) == "number", "Arg #1 (entity1) must be a number.")
	assert(type(entity2) == "number", "Arg #2 (entity2) must be a number.")
	assert(type(boneIndex1) == "number", "Arg #3 (boneIndex1) must be a number.")
	assert(type(boneIndex2) == "number", "Arg #4 (boneIndex2) must be a number.")
	assert(type(xPos1) == "number", "Arg #5 (xPos1) must be a number.")
	assert(type(yPos1) == "number", "Arg #6 (yPos1) must be a number.")
	assert(type(zPos1) == "number", "Arg #7 (zPos1) must be a number.")
	assert(type(xPos2) == "number", "Arg #8 (xPos2) must be a number.")
	assert(type(yPos2) == "number", "Arg #9 (yPos2) must be a number.")
	assert(type(zPos2) == "number", "Arg #10 (zPos2) must be a number.")
	assert(type(xRot) == "number", "Arg #11 (xRot) must be a number.")
	assert(type(yRot) == "number", "Arg #12 (yRot) must be a number.")
	assert(type(zRot) == "number", "Arg #13 (zRot) must be a number.")
	assert(type(breakForce) == "number", "Arg #14 (breakForce) must be a number.")
	assert(type(fixedRot) == "boolean", "Arg #15 (fixedRot) must be a boolean.")
	assert(type(p15) == "boolean", "Arg #16 (p15) must be a boolean.")
	assert(type(collision) == "boolean", "Arg #17 (collision) must be a boolean.")
	assert(type(p17) == "boolean", "Arg #18 (p17) must be a boolean.")
	assert(type(p18) == "number", "Arg #19 (p18) must be a number.")

	local result = native_call(0xC3675780C92F90F9, entity1, entity2, boneIndex1, boneIndex2, xPos1, yPos1, zPos1, xPos2, yPos2, zPos2, xRot, yRot, zRot, breakForce, fixedRot, p15, collision, p17, p18)
end
natives.entity.attach_entity_to_entity_physically = natives.ENTITY.ATTACH_ENTITY_TO_ENTITY_PHYSICALLY

--[[
Called to update entity attachments.
]]
function natives.ENTITY.PROCESS_ENTITY_ATTACHMENTS(--[[Entity]] entity) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.PROCESS_ENTITY_ATTACHMENTS' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0xF4080490ADC51C6F, entity)
end
natives.entity.process_entity_attachments = natives.ENTITY.PROCESS_ENTITY_ATTACHMENTS

--[[
Returns the index of the bone. If the bone was not found, -1 will be returned. 

list:
pastebin.com/D7JMnX1g

BoneNames:
  chassis,
  windscreen,
   seat_pside_r,
 seat_dside_r,
 bodyshell,
    suspension_lm,
    suspension_lr,
    platelight,
   attach_female,
    attach_male,
  bonnet,
   boot,
 chassis_dummy,  //Center of the dummy
 chassis_Control,    //Not found yet
   door_dside_f,   //Door left, front
    door_dside_r,   //Door left, back
 door_pside_f,   //Door right, front
   door_pside_r,   //Door right, back
    Gun_GripR,
    windscreen_f,
 platelight, //Position where the light above the numberplate is located
   VFX_Emitter,
  window_lf,  //Window left, front
  window_lr,  //Window left, back
   window_rf,  //Window right, front
 window_rr,  //Window right, back
  engine, //Position of the engine
  gun_ammo,
 ROPE_ATTATCH,   //Not misspelled. In script "finale_heist2b.c4".
    wheel_lf,   //Wheel left, front
   wheel_lr,   //Wheel left, back
    wheel_rf,   //Wheel right, front
  wheel_rr,   //Wheel right, back
   exhaust,    //Exhaust. shows only the position of the stock-exhaust
   overheat,   //A position on the engine(not exactly sure, how to name it)
  misc_e, //Not a car-bone.
 seat_dside_f,   //Driver-seat
 seat_pside_f,   //Seat next to driver
 Gun_Nuzzle,
   seat_r

I doubt that the function is case-sensitive, since I found a "Chassis" and a "chassis". - Just tested: Definitely not case-sensitive.


]]
function natives.ENTITY.GET_ENTITY_BONE_INDEX_BY_NAME(--[[Entity]] entity, --[[const char*]] boneName) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.GET_ENTITY_BONE_INDEX_BY_NAME' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(boneName) == "string", "Arg #2 (boneName) must be a string.")

	local result = native_call(0xFB71170B7E76ACBA, entity, boneName)
	return result:__tointeger()
end
natives.entity.get_entity_bone_index_by_name = natives.ENTITY.GET_ENTITY_BONE_INDEX_BY_NAME

function natives.ENTITY.CLEAR_ENTITY_LAST_DAMAGE_ENTITY(--[[Entity]] entity) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.CLEAR_ENTITY_LAST_DAMAGE_ENTITY' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0xA72CD9CA74A5ECBA, entity)
end
natives.entity.clear_entity_last_damage_entity = natives.ENTITY.CLEAR_ENTITY_LAST_DAMAGE_ENTITY

--[[
Deletes the specified entity, then sets the handle pointed to by the pointer to NULL.
]]
function natives.ENTITY.DELETE_ENTITY(--[[Entity*]] entity) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.DELETE_ENTITY' due to disabled trusted mode")

	assert(type(entity) == "userdata", "Arg #1 (entity) must be a userdata.")

	local result = native_call(0xAE3CBE5BF394C9C9, entity)
end
natives.entity.delete_entity = natives.ENTITY.DELETE_ENTITY

--[[
If `collision` is set to true, both entities won't collide with the other until the distance between them is above 4 meters.
Set `dynamic` to true to keep velocity after dettaching
]]
function natives.ENTITY.DETACH_ENTITY(--[[Entity]] entity, --[[BOOL]] dynamic, --[[BOOL]] collision) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.DETACH_ENTITY' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(dynamic) == "boolean", "Arg #2 (dynamic) must be a boolean.")
	assert(type(collision) == "boolean", "Arg #3 (collision) must be a boolean.")

	local result = native_call(0x961AC54BF0613F5D, entity, dynamic, collision)
end
natives.entity.detach_entity = natives.ENTITY.DETACH_ENTITY

--[[
Freezes or unfreezes an entity preventing its coordinates to change by the player if set to `true`. You can still change the entity position using SET_ENTITY_COORDS.
]]
function natives.ENTITY.FREEZE_ENTITY_POSITION(--[[Entity]] entity, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.FREEZE_ENTITY_POSITION' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x428CA6DBD1094446, entity, toggle)
end
natives.entity.freeze_entity_position = natives.ENTITY.FREEZE_ENTITY_POSITION

--[[
True means it can be deleted by the engine when switching lobbies/missions/etc, false means the script is expected to clean it up.

"Allow Freeze If No Collision"
]]
function natives.ENTITY.SET_ENTITY_SHOULD_FREEZE_WAITING_ON_COLLISION(--[[Entity]] entity, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.SET_ENTITY_SHOULD_FREEZE_WAITING_ON_COLLISION' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x3910051CCECDB00C, entity, toggle)
end
natives.entity.set_entity_should_freeze_waiting_on_collision = natives.ENTITY.SET_ENTITY_SHOULD_FREEZE_WAITING_ON_COLLISION

--[[
delta and bitset are guessed fields. They are based on the fact that most of the calls have 0 or nil field types passed in.

The only time bitset has a value is 0x4000 and the only time delta has a value is during stealth with usually <1.0f values.

Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
]]
function natives.ENTITY.PLAY_ENTITY_ANIM(--[[Entity]] entity, --[[const char*]] animName, --[[const char*]] animDict, --[[float]] p3, --[[BOOL]] loop, --[[BOOL]] stayInAnim, --[[BOOL]] p6, --[[float]] delta, --[[Any]] bitset) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.PLAY_ENTITY_ANIM' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(animName) == "string", "Arg #2 (animName) must be a string.")
	assert(type(animDict) == "string", "Arg #3 (animDict) must be a string.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(loop) == "boolean", "Arg #5 (loop) must be a boolean.")
	assert(type(stayInAnim) == "boolean", "Arg #6 (stayInAnim) must be a boolean.")
	assert(type(p6) == "boolean", "Arg #7 (p6) must be a boolean.")
	assert(type(delta) == "number", "Arg #8 (delta) must be a number.")
	assert(type(bitset) == "number", "Arg #9 (bitset) must be a number.")

	local result = native_call(0x7FB218262B810701, entity, animName, animDict, p3, loop, stayInAnim, p6, delta, bitset)
	return result:__tointeger() ~= 0
end
natives.entity.play_entity_anim = natives.ENTITY.PLAY_ENTITY_ANIM

--[[
p4 and p7 are usually 1000.0f.

Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
]]
function natives.ENTITY.PLAY_SYNCHRONIZED_ENTITY_ANIM(--[[Entity]] entity, --[[int]] syncedScene, --[[const char*]] animation, --[[const char*]] propName, --[[float]] p4, --[[float]] p5, --[[Any]] p6, --[[float]] p7) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.PLAY_SYNCHRONIZED_ENTITY_ANIM' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(syncedScene) == "number", "Arg #2 (syncedScene) must be a number.")
	assert(type(animation) == "string", "Arg #3 (animation) must be a string.")
	assert(type(propName) == "string", "Arg #4 (propName) must be a string.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")
	assert(type(p6) == "number", "Arg #7 (p6) must be a number.")
	assert(type(p7) == "number", "Arg #8 (p7) must be a number.")

	local result = native_call(0xC77720A12FE14A86, entity, syncedScene, animation, propName, p4, p5, p6, p7)
	return result:__tointeger() ~= 0
end
natives.entity.play_synchronized_entity_anim = natives.ENTITY.PLAY_SYNCHRONIZED_ENTITY_ANIM

--[[
Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
]]
function natives.ENTITY.PLAY_SYNCHRONIZED_MAP_ENTITY_ANIM(--[[float]] p0, --[[float]] p1, --[[float]] p2, --[[float]] p3, --[[Any]] p4, --[[Any]] p5, --[[Any*]] p6, --[[Any*]] p7, --[[float]] p8, --[[float]] p9, --[[Any]] p10, --[[float]] p11) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.PLAY_SYNCHRONIZED_MAP_ENTITY_ANIM' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")
	assert(type(p6) == "userdata", "Arg #7 (p6) must be a userdata.")
	assert(type(p7) == "userdata", "Arg #8 (p7) must be a userdata.")
	assert(type(p8) == "number", "Arg #9 (p8) must be a number.")
	assert(type(p9) == "number", "Arg #10 (p9) must be a number.")
	assert(type(p10) == "number", "Arg #11 (p10) must be a number.")
	assert(type(p11) == "number", "Arg #12 (p11) must be a number.")

	local result = native_call(0xB9C54555ED30FBC4, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11)
	return result:__tointeger() ~= 0
end
natives.entity.play_synchronized_map_entity_anim = natives.ENTITY.PLAY_SYNCHRONIZED_MAP_ENTITY_ANIM

function natives.ENTITY.STOP_SYNCHRONIZED_MAP_ENTITY_ANIM(--[[float]] p0, --[[float]] p1, --[[float]] p2, --[[float]] p3, --[[Any]] p4, --[[float]] p5) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.STOP_SYNCHRONIZED_MAP_ENTITY_ANIM' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")

	local result = native_call(0x11E79CAB7183B6F5, p0, p1, p2, p3, p4, p5)
	return result:__tointeger() ~= 0
end
natives.entity.stop_synchronized_map_entity_anim = natives.ENTITY.STOP_SYNCHRONIZED_MAP_ENTITY_ANIM

--[[
Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json

RAGEPluginHook list: docs.ragepluginhook.net/html/62951c37-a440-478c-b389-c471230ddfc5.htm
]]
function natives.ENTITY.STOP_ENTITY_ANIM(--[[Entity]] entity, --[[const char*]] animation, --[[const char*]] animGroup, --[[float]] p3) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.STOP_ENTITY_ANIM' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(animation) == "string", "Arg #2 (animation) must be a string.")
	assert(type(animGroup) == "string", "Arg #3 (animGroup) must be a string.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x28004F88151E03E0, entity, animation, animGroup, p3)
	return result:__tointeger()
end
natives.entity.stop_entity_anim = natives.ENTITY.STOP_ENTITY_ANIM

--[[
p1 sync task id?
]]
function natives.ENTITY.STOP_SYNCHRONIZED_ENTITY_ANIM(--[[Entity]] entity, --[[float]] p1, --[[BOOL]] p2) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.STOP_SYNCHRONIZED_ENTITY_ANIM' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")

	local result = native_call(0x43D3807C077261E3, entity, p1, p2)
	return result:__tointeger() ~= 0
end
natives.entity.stop_synchronized_entity_anim = natives.ENTITY.STOP_SYNCHRONIZED_ENTITY_ANIM

--[[
if (ENTITY::HAS_ANIM_EVENT_FIRED(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("CreateObject")))
]]
function natives.ENTITY.HAS_ANIM_EVENT_FIRED(--[[Entity]] entity, --[[Hash]] actionHash) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.HAS_ANIM_EVENT_FIRED' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(actionHash) == "number", "Arg #2 (actionHash) must be a number.")

	local result = native_call(0xEAF4CD9EA3E7E922, entity, actionHash)
	return result:__tointeger() ~= 0
end
natives.entity.has_anim_event_fired = natives.ENTITY.HAS_ANIM_EVENT_FIRED

--[[
In the script "player_scene_t_bbfight.c4":
"if (ENTITY::FIND_ANIM_EVENT_PHASE(&l_16E, &l_19F[v_4/*16*/], v_9, &v_A, &v_B))"
-- &l_16E (p0) is requested as an anim dictionary earlier in the script.
-- &l_19F[v_4/*16*/] (p1) is used in other natives in the script as the "animation" param.
-- v_9 (p2) is instantiated as "victim_fall"; I'm guessing that's another anim
--v_A and v_B (p3 & p4) are both set as -1.0, but v_A is used immediately after this native for: 
"if (v_A < ENTITY::GET_ENTITY_ANIM_CURRENT_TIME(...))"
Both v_A and v_B are seemingly used to contain both Vector3's and floats, so I can't say what either really is other than that they are both output parameters. p4 looks more like a *Vector3 though
-alphazolam

Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
]]
function natives.ENTITY.FIND_ANIM_EVENT_PHASE(--[[const char*]] animDictionary, --[[const char*]] animName, --[[const char*]] p2, --[[Any*]] p3, --[[Any*]] p4) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.FIND_ANIM_EVENT_PHASE' due to disabled trusted mode")

	assert(type(animDictionary) == "string", "Arg #1 (animDictionary) must be a string.")
	assert(type(animName) == "string", "Arg #2 (animName) must be a string.")
	assert(type(p2) == "string", "Arg #3 (p2) must be a string.")
	assert(type(p3) == "userdata", "Arg #4 (p3) must be a userdata.")
	assert(type(p4) == "userdata", "Arg #5 (p4) must be a userdata.")

	local result = native_call(0x07F1BE2BCCAA27A7, animDictionary, animName, p2, p3, p4)
	return result:__tointeger() ~= 0
end
natives.entity.find_anim_event_phase = natives.ENTITY.FIND_ANIM_EVENT_PHASE

--[[
Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
]]
function natives.ENTITY.SET_ENTITY_ANIM_CURRENT_TIME(--[[Entity]] entity, --[[const char*]] animDictionary, --[[const char*]] animName, --[[float]] time) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.SET_ENTITY_ANIM_CURRENT_TIME' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(animDictionary) == "string", "Arg #2 (animDictionary) must be a string.")
	assert(type(animName) == "string", "Arg #3 (animName) must be a string.")
	assert(type(time) == "number", "Arg #4 (time) must be a number.")

	local result = native_call(0x4487C259F0F70977, entity, animDictionary, animName, time)
end
natives.entity.set_entity_anim_current_time = natives.ENTITY.SET_ENTITY_ANIM_CURRENT_TIME

--[[
Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
]]
function natives.ENTITY.SET_ENTITY_ANIM_SPEED(--[[Entity]] entity, --[[const char*]] animDictionary, --[[const char*]] animName, --[[float]] speedMultiplier) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.SET_ENTITY_ANIM_SPEED' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(animDictionary) == "string", "Arg #2 (animDictionary) must be a string.")
	assert(type(animName) == "string", "Arg #3 (animName) must be a string.")
	assert(type(speedMultiplier) == "number", "Arg #4 (speedMultiplier) must be a number.")

	local result = native_call(0x28D1A16553C51776, entity, animDictionary, animName, speedMultiplier)
end
natives.entity.set_entity_anim_speed = natives.ENTITY.SET_ENTITY_ANIM_SPEED

--[[
Makes the specified entity (ped, vehicle or object) persistent. Persistent entities will not automatically be removed by the engine.

p1 has no effect when either its on or off 
maybe a quick disassembly will tell us what it does

p2 has no effect when either its on or off 
maybe a quick disassembly will tell us what it does
]]
function natives.ENTITY.SET_ENTITY_AS_MISSION_ENTITY(--[[Entity]] entity, --[[BOOL]] p1, --[[BOOL]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.SET_ENTITY_AS_MISSION_ENTITY' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")

	local result = native_call(0xAD738C3085FE7E11, entity, p1, p2)
end
natives.entity.set_entity_as_mission_entity = natives.ENTITY.SET_ENTITY_AS_MISSION_ENTITY

--[[
Marks the specified entity (ped, vehicle or object) as no longer needed if its population type is set to the mission type.
If the entity is ped, it will also clear their tasks immediately just like when CLEAR_PED_TASKS_IMMEDIATELY is called.
Entities marked as no longer needed, will be deleted as the engine sees fit.
Use this if you just want to just let the game delete the ped:
void MarkPedAsAmbientPed(Ped ped) {
  auto addr = getScriptHandleBaseAddress(ped);

  if (!addr) {
    return;
  }

  //the game uses only lower 4 bits as entity population type 
  BYTE origValue = *(BYTE *)(addr + 0xDA);
  *(BYTE *)(addr + 0xDA) = ((origValue & 0xF0) | ePopulationType::POPTYPE_RANDOM_AMBIENT);
}
]]
function natives.ENTITY.SET_ENTITY_AS_NO_LONGER_NEEDED(--[[Entity*]] entity) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.SET_ENTITY_AS_NO_LONGER_NEEDED' due to disabled trusted mode")

	assert(type(entity) == "userdata", "Arg #1 (entity) must be a userdata.")

	local result = native_call(0xB736A491E64A32CF, entity)
end
natives.entity.set_entity_as_no_longer_needed = natives.ENTITY.SET_ENTITY_AS_NO_LONGER_NEEDED

--[[
This is an alias of SET_ENTITY_AS_NO_LONGER_NEEDED.
]]
function natives.ENTITY.SET_PED_AS_NO_LONGER_NEEDED(--[[Ped*]] ped) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.SET_PED_AS_NO_LONGER_NEEDED' due to disabled trusted mode")

	assert(type(ped) == "userdata", "Arg #1 (ped) must be a userdata.")

	local result = native_call(0x2595DD4236549CE3, ped)
end
natives.entity.set_ped_as_no_longer_needed = natives.ENTITY.SET_PED_AS_NO_LONGER_NEEDED

--[[
This is an alias of SET_ENTITY_AS_NO_LONGER_NEEDED.
]]
function natives.ENTITY.SET_VEHICLE_AS_NO_LONGER_NEEDED(--[[Vehicle*]] vehicle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.SET_VEHICLE_AS_NO_LONGER_NEEDED' due to disabled trusted mode")

	assert(type(vehicle) == "userdata", "Arg #1 (vehicle) must be a userdata.")

	local result = native_call(0x629BFA74418D6239, vehicle)
end
natives.entity.set_vehicle_as_no_longer_needed = natives.ENTITY.SET_VEHICLE_AS_NO_LONGER_NEEDED

--[[
This is an alias of SET_ENTITY_AS_NO_LONGER_NEEDED.
]]
function natives.ENTITY.SET_OBJECT_AS_NO_LONGER_NEEDED(--[[Object*]] object) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.SET_OBJECT_AS_NO_LONGER_NEEDED' due to disabled trusted mode")

	assert(type(object) == "userdata", "Arg #1 (object) must be a userdata.")

	local result = native_call(0x3AE22DEB5BA5A3E6, object)
end
natives.entity.set_object_as_no_longer_needed = natives.ENTITY.SET_OBJECT_AS_NO_LONGER_NEEDED

function natives.ENTITY.SET_ENTITY_CAN_BE_DAMAGED(--[[Entity]] entity, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.SET_ENTITY_CAN_BE_DAMAGED' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x1760FFA8AB074D66, entity, toggle)
end
natives.entity.set_entity_can_be_damaged = natives.ENTITY.SET_ENTITY_CAN_BE_DAMAGED

function natives.ENTITY.GET_ENTITY_CAN_BE_DAMAGED(--[[Entity]] entity) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.GET_ENTITY_CAN_BE_DAMAGED' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0xD95CC5D2AB15A09F, entity)
	return result:__tointeger() ~= 0
end
natives.entity.get_entity_can_be_damaged = natives.ENTITY.GET_ENTITY_CAN_BE_DAMAGED

function natives.ENTITY.SET_ENTITY_CAN_BE_DAMAGED_BY_RELATIONSHIP_GROUP(--[[Entity]] entity, --[[BOOL]] bCanBeDamaged, --[[int]] relGroup) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.SET_ENTITY_CAN_BE_DAMAGED_BY_RELATIONSHIP_GROUP' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(bCanBeDamaged) == "boolean", "Arg #2 (bCanBeDamaged) must be a boolean.")
	assert(type(relGroup) == "number", "Arg #3 (relGroup) must be a number.")

	local result = native_call(0xE22D8FDE858B8119, entity, bCanBeDamaged, relGroup)
end
natives.entity.set_entity_can_be_damaged_by_relationship_group = natives.ENTITY.SET_ENTITY_CAN_BE_DAMAGED_BY_RELATIONSHIP_GROUP

function natives.ENTITY.SET_ENTITY_CAN_ONLY_BE_DAMAGED_BY_SCRIPT_PARTICIPANTS(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.SET_ENTITY_CAN_ONLY_BE_DAMAGED_BY_SCRIPT_PARTICIPANTS' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x352E2B5CF420BF3B, p0, p1)
end
natives.entity.set_entity_can_only_be_damaged_by_script_participants = natives.ENTITY.SET_ENTITY_CAN_ONLY_BE_DAMAGED_BY_SCRIPT_PARTICIPANTS

--[[
Sets whether the entity can be targeted without being in line-of-sight.
]]
function natives.ENTITY.SET_ENTITY_CAN_BE_TARGETED_WITHOUT_LOS(--[[Entity]] entity, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.SET_ENTITY_CAN_BE_TARGETED_WITHOUT_LOS' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xD3997889736FD899, entity, toggle)
end
natives.entity.set_entity_can_be_targeted_without_los = natives.ENTITY.SET_ENTITY_CAN_BE_TARGETED_WITHOUT_LOS

function natives.ENTITY.SET_ENTITY_COLLISION(--[[Entity]] entity, --[[BOOL]] toggle, --[[BOOL]] keepPhysics) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.SET_ENTITY_COLLISION' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")
	assert(type(keepPhysics) == "boolean", "Arg #3 (keepPhysics) must be a boolean.")

	local result = native_call(0x1A9205C1B9EE827F, entity, toggle, keepPhysics)
end
natives.entity.set_entity_collision = natives.ENTITY.SET_ENTITY_COLLISION

function natives.ENTITY.GET_ENTITY_COLLISION_DISABLED(--[[Entity]] entity) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.GET_ENTITY_COLLISION_DISABLED' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0xCCF1E97BEFDAE480, entity)
	return result:__tointeger() ~= 0
end
natives.entity.get_entity_collision_disabled = natives.ENTITY.GET_ENTITY_COLLISION_DISABLED

function natives.ENTITY.SET_ENTITY_COMPLETELY_DISABLE_COLLISION(--[[Entity]] entity, --[[BOOL]] toggle, --[[BOOL]] keepPhysics) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.SET_ENTITY_COMPLETELY_DISABLE_COLLISION' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")
	assert(type(keepPhysics) == "boolean", "Arg #3 (keepPhysics) must be a boolean.")

	local result = native_call(0x9EBC85ED0FFFE51C, entity, toggle, keepPhysics)
end
natives.entity.set_entity_completely_disable_collision = natives.ENTITY.SET_ENTITY_COMPLETELY_DISABLE_COLLISION

--[[
p7 is always 1 in the scripts. Set to 1, an area around the destination coords for the moved entity is cleared from other entities. 
 
Often ends with 1, 0, 0, 1); in the scripts. It works. 

Axis - Invert Axis Flags
]]
function natives.ENTITY.SET_ENTITY_COORDS(--[[Entity]] entity, --[[float]] xPos, --[[float]] yPos, --[[float]] zPos, --[[BOOL]] xAxis, --[[BOOL]] yAxis, --[[BOOL]] zAxis, --[[BOOL]] clearArea) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.SET_ENTITY_COORDS' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(xPos) == "number", "Arg #2 (xPos) must be a number.")
	assert(type(yPos) == "number", "Arg #3 (yPos) must be a number.")
	assert(type(zPos) == "number", "Arg #4 (zPos) must be a number.")
	assert(type(xAxis) == "boolean", "Arg #5 (xAxis) must be a boolean.")
	assert(type(yAxis) == "boolean", "Arg #6 (yAxis) must be a boolean.")
	assert(type(zAxis) == "boolean", "Arg #7 (zAxis) must be a boolean.")
	assert(type(clearArea) == "boolean", "Arg #8 (clearArea) must be a boolean.")

	local result = native_call(0x06843DA7060A026B, entity, xPos, yPos, zPos, xAxis, yAxis, zAxis, clearArea)
end
natives.entity.set_entity_coords = natives.ENTITY.SET_ENTITY_COORDS

function natives.ENTITY.SET_ENTITY_COORDS_WITHOUT_PLANTS_RESET(--[[Entity]] entity, --[[float]] xPos, --[[float]] yPos, --[[float]] zPos, --[[BOOL]] alive, --[[BOOL]] deadFlag, --[[BOOL]] ragdollFlag, --[[BOOL]] clearArea) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.SET_ENTITY_COORDS_WITHOUT_PLANTS_RESET' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(xPos) == "number", "Arg #2 (xPos) must be a number.")
	assert(type(yPos) == "number", "Arg #3 (yPos) must be a number.")
	assert(type(zPos) == "number", "Arg #4 (zPos) must be a number.")
	assert(type(alive) == "boolean", "Arg #5 (alive) must be a boolean.")
	assert(type(deadFlag) == "boolean", "Arg #6 (deadFlag) must be a boolean.")
	assert(type(ragdollFlag) == "boolean", "Arg #7 (ragdollFlag) must be a boolean.")
	assert(type(clearArea) == "boolean", "Arg #8 (clearArea) must be a boolean.")

	local result = native_call(0x621873ECE1178967, entity, xPos, yPos, zPos, alive, deadFlag, ragdollFlag, clearArea)
end
natives.entity.set_entity_coords_without_plants_reset = natives.ENTITY.SET_ENTITY_COORDS_WITHOUT_PLANTS_RESET

--[[
Axis - Invert Axis Flags
]]
function natives.ENTITY.SET_ENTITY_COORDS_NO_OFFSET(--[[Entity]] entity, --[[float]] xPos, --[[float]] yPos, --[[float]] zPos, --[[BOOL]] xAxis, --[[BOOL]] yAxis, --[[BOOL]] zAxis) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.SET_ENTITY_COORDS_NO_OFFSET' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(xPos) == "number", "Arg #2 (xPos) must be a number.")
	assert(type(yPos) == "number", "Arg #3 (yPos) must be a number.")
	assert(type(zPos) == "number", "Arg #4 (zPos) must be a number.")
	assert(type(xAxis) == "boolean", "Arg #5 (xAxis) must be a boolean.")
	assert(type(yAxis) == "boolean", "Arg #6 (yAxis) must be a boolean.")
	assert(type(zAxis) == "boolean", "Arg #7 (zAxis) must be a boolean.")

	local result = native_call(0x239A3351AC1DA385, entity, xPos, yPos, zPos, xAxis, yAxis, zAxis)
end
natives.entity.set_entity_coords_no_offset = natives.ENTITY.SET_ENTITY_COORDS_NO_OFFSET

function natives.ENTITY.SET_ENTITY_DYNAMIC(--[[Entity]] entity, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.SET_ENTITY_DYNAMIC' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x1718DE8E3F2823CA, entity, toggle)
end
natives.entity.set_entity_dynamic = natives.ENTITY.SET_ENTITY_DYNAMIC

--[[
Set the heading of an entity in degrees also known as "Yaw".
]]
function natives.ENTITY.SET_ENTITY_HEADING(--[[Entity]] entity, --[[float]] heading) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.SET_ENTITY_HEADING' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(heading) == "number", "Arg #2 (heading) must be a number.")

	local result = native_call(0x8E2530AA8ADA980E, entity, heading)
end
natives.entity.set_entity_heading = natives.ENTITY.SET_ENTITY_HEADING

--[[
health >= 0
male ped ~= 100 - 200
female ped ~= 0 - 100
]]
function natives.ENTITY.SET_ENTITY_HEALTH(--[[Entity]] entity, --[[int]] health, --[[int]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.SET_ENTITY_HEALTH' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(health) == "number", "Arg #2 (health) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0x6B76DC1F3AE6E6A3, entity, health, p2)
end
natives.entity.set_entity_health = natives.ENTITY.SET_ENTITY_HEALTH

--[[
Sets a ped or an object totally invincible. It doesn't take any kind of damage. Peds will not ragdoll on explosions and the tazer animation won't apply either.

If you use this for a ped and you want Ragdoll to stay enabled, then do:
*(DWORD *)(pedAddress + 0x188) |= (1 << 9);

Use this if you want to get the invincibility status:
  bool IsPedInvincible(Ped ped)
 {
     auto addr = getScriptHandleBaseAddress(ped);    

        if (addr)
     {
         DWORD flag = *(DWORD *)(addr + 0x188);
            return ((flag & (1 << 8)) != 0) || ((flag & (1 << 9)) != 0);
      }

       return false;
 }
]]
function natives.ENTITY.SET_ENTITY_INVINCIBLE(--[[Entity]] entity, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.SET_ENTITY_INVINCIBLE' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x3882114BDE571AD4, entity, toggle)
end
natives.entity.set_entity_invincible = natives.ENTITY.SET_ENTITY_INVINCIBLE

function natives.ENTITY.SET_ENTITY_IS_TARGET_PRIORITY(--[[Entity]] entity, --[[BOOL]] p1, --[[float]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.SET_ENTITY_IS_TARGET_PRIORITY' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0xEA02E132F5C68722, entity, p1, p2)
end
natives.entity.set_entity_is_target_priority = natives.ENTITY.SET_ENTITY_IS_TARGET_PRIORITY

function natives.ENTITY.SET_ENTITY_LIGHTS(--[[Entity]] entity, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.SET_ENTITY_LIGHTS' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x7CFBA6A80BDF3874, entity, toggle)
end
natives.entity.set_entity_lights = natives.ENTITY.SET_ENTITY_LIGHTS

--[[
Loads collision grid for an entity spawned outside of a player's loaded area. This allows peds to execute tasks rather than sit dormant because of a lack of a physics grid.
Certainly not the main usage of this native but when set to true for a Vehicle, it will prevent the vehicle to explode if it is spawned far away from the player.
]]
function natives.ENTITY.SET_ENTITY_LOAD_COLLISION_FLAG(--[[Entity]] entity, --[[BOOL]] toggle, --[[Any]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.SET_ENTITY_LOAD_COLLISION_FLAG' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0x0DC7CABAB1E9B67E, entity, toggle, p2)
end
natives.entity.set_entity_load_collision_flag = natives.ENTITY.SET_ENTITY_LOAD_COLLISION_FLAG

function natives.ENTITY.HAS_COLLISION_LOADED_AROUND_ENTITY(--[[Entity]] entity) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.HAS_COLLISION_LOADED_AROUND_ENTITY' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0xE9676F61BC0B3321, entity)
	return result:__tointeger() ~= 0
end
natives.entity.has_collision_loaded_around_entity = natives.ENTITY.HAS_COLLISION_LOADED_AROUND_ENTITY

function natives.ENTITY.SET_ENTITY_MAX_SPEED(--[[Entity]] entity, --[[float]] speed) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.SET_ENTITY_MAX_SPEED' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(speed) == "number", "Arg #2 (speed) must be a number.")

	local result = native_call(0x0E46A3FCBDE2A1B1, entity, speed)
end
natives.entity.set_entity_max_speed = natives.ENTITY.SET_ENTITY_MAX_SPEED

function natives.ENTITY.SET_ENTITY_ONLY_DAMAGED_BY_PLAYER(--[[Entity]] entity, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.SET_ENTITY_ONLY_DAMAGED_BY_PLAYER' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x79F020FF9EDC0748, entity, toggle)
end
natives.entity.set_entity_only_damaged_by_player = natives.ENTITY.SET_ENTITY_ONLY_DAMAGED_BY_PLAYER

function natives.ENTITY.SET_ENTITY_ONLY_DAMAGED_BY_RELATIONSHIP_GROUP(--[[Entity]] entity, --[[BOOL]] p1, --[[Any]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.SET_ENTITY_ONLY_DAMAGED_BY_RELATIONSHIP_GROUP' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0x7022BD828FA0B082, entity, p1, p2)
end
natives.entity.set_entity_only_damaged_by_relationship_group = natives.ENTITY.SET_ENTITY_ONLY_DAMAGED_BY_RELATIONSHIP_GROUP

--[[
Enable / disable each type of damage.

Can't get drownProof to work.
--------------
p7 is to to '1' in am_mp_property_ext/int: entity::set_entity_proofs(uParam0->f_19, true, true, true, true, true, true, 1, true);

]]
function natives.ENTITY.SET_ENTITY_PROOFS(--[[Entity]] entity, --[[BOOL]] bulletProof, --[[BOOL]] fireProof, --[[BOOL]] explosionProof, --[[BOOL]] collisionProof, --[[BOOL]] meleeProof, --[[BOOL]] p6, --[[BOOL]] p7, --[[BOOL]] drownProof) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.SET_ENTITY_PROOFS' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(bulletProof) == "boolean", "Arg #2 (bulletProof) must be a boolean.")
	assert(type(fireProof) == "boolean", "Arg #3 (fireProof) must be a boolean.")
	assert(type(explosionProof) == "boolean", "Arg #4 (explosionProof) must be a boolean.")
	assert(type(collisionProof) == "boolean", "Arg #5 (collisionProof) must be a boolean.")
	assert(type(meleeProof) == "boolean", "Arg #6 (meleeProof) must be a boolean.")
	assert(type(p6) == "boolean", "Arg #7 (p6) must be a boolean.")
	assert(type(p7) == "boolean", "Arg #8 (p7) must be a boolean.")
	assert(type(drownProof) == "boolean", "Arg #9 (drownProof) must be a boolean.")

	local result = native_call(0xFAEE099C6F890BB8, entity, bulletProof, fireProof, explosionProof, collisionProof, meleeProof, p6, p7, drownProof)
end
natives.entity.set_entity_proofs = natives.ENTITY.SET_ENTITY_PROOFS

function natives.ENTITY.GET_ENTITY_PROOFS(--[[Entity]] entity, --[[BOOL*]] bulletProof, --[[BOOL*]] fireProof, --[[BOOL*]] explosionProof, --[[BOOL*]] collisionProof, --[[BOOL*]] meleeProof, --[[BOOL*]] steamProof, --[[BOOL*]] p7, --[[BOOL*]] drownProof) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.GET_ENTITY_PROOFS' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(bulletProof) == "userdata", "Arg #2 (bulletProof) must be a userdata.")
	assert(type(fireProof) == "userdata", "Arg #3 (fireProof) must be a userdata.")
	assert(type(explosionProof) == "userdata", "Arg #4 (explosionProof) must be a userdata.")
	assert(type(collisionProof) == "userdata", "Arg #5 (collisionProof) must be a userdata.")
	assert(type(meleeProof) == "userdata", "Arg #6 (meleeProof) must be a userdata.")
	assert(type(steamProof) == "userdata", "Arg #7 (steamProof) must be a userdata.")
	assert(type(p7) == "userdata", "Arg #8 (p7) must be a userdata.")
	assert(type(drownProof) == "userdata", "Arg #9 (drownProof) must be a userdata.")

	local result = native_call(0xBE8CD9BE829BBEBF, entity, bulletProof, fireProof, explosionProof, collisionProof, meleeProof, steamProof, p7, drownProof)
	return result:__tointeger() ~= 0
end
natives.entity.get_entity_proofs = natives.ENTITY.GET_ENTITY_PROOFS

--[[
w is the correct parameter name!
]]
function natives.ENTITY.SET_ENTITY_QUATERNION(--[[Entity]] entity, --[[float]] x, --[[float]] y, --[[float]] z, --[[float]] w) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.SET_ENTITY_QUATERNION' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")
	assert(type(w) == "number", "Arg #5 (w) must be a number.")

	local result = native_call(0x77B21BE7AC540F07, entity, x, y, z, w)
end
natives.entity.set_entity_quaternion = natives.ENTITY.SET_ENTITY_QUATERNION

function natives.ENTITY.SET_ENTITY_RECORDS_COLLISIONS(--[[Entity]] entity, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.SET_ENTITY_RECORDS_COLLISIONS' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x0A50A1EEDAD01E65, entity, toggle)
end
natives.entity.set_entity_records_collisions = natives.ENTITY.SET_ENTITY_RECORDS_COLLISIONS

--[[
rotationOrder refers to the order yaw pitch roll is applied
value ranges from 0 to 5. What you use for rotationOrder when setting must be the same as rotationOrder when getting the rotation. 
Unsure what value corresponds to what rotation order, more testing will be needed for that.
For the most part R* uses 1 or 2 as the order.
p5 is usually set as true

]]
function natives.ENTITY.SET_ENTITY_ROTATION(--[[Entity]] entity, --[[float]] pitch, --[[float]] roll, --[[float]] yaw, --[[int]] rotationOrder, --[[BOOL]] p5) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.SET_ENTITY_ROTATION' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(pitch) == "number", "Arg #2 (pitch) must be a number.")
	assert(type(roll) == "number", "Arg #3 (roll) must be a number.")
	assert(type(yaw) == "number", "Arg #4 (yaw) must be a number.")
	assert(type(rotationOrder) == "number", "Arg #5 (rotationOrder) must be a number.")
	assert(type(p5) == "boolean", "Arg #6 (p5) must be a boolean.")

	local result = native_call(0x8524A8B0171D5E07, entity, pitch, roll, yaw, rotationOrder, p5)
end
natives.entity.set_entity_rotation = natives.ENTITY.SET_ENTITY_ROTATION

--[[
unk was always 0.
]]
function natives.ENTITY.SET_ENTITY_VISIBLE(--[[Entity]] entity, --[[BOOL]] toggle, --[[BOOL]] unk) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.SET_ENTITY_VISIBLE' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")
	assert(type(unk) == "boolean", "Arg #3 (unk) must be a boolean.")

	local result = native_call(0xEA1C610A04DB6BBB, entity, toggle, unk)
end
natives.entity.set_entity_visible = natives.ENTITY.SET_ENTITY_VISIBLE

function natives.ENTITY.SET_ENTITY_WATER_REFLECTION_FLAG(--[[Entity]] entity, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.SET_ENTITY_WATER_REFLECTION_FLAG' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xC34BC448DA29F5E9, entity, toggle)
end
natives.entity.set_entity_water_reflection_flag = natives.ENTITY.SET_ENTITY_WATER_REFLECTION_FLAG

function natives.ENTITY.SET_ENTITY_MIRROR_REFLECTION_FLAG(--[[Entity]] entity, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.SET_ENTITY_MIRROR_REFLECTION_FLAG' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0xE66377CDDADA4810, entity, p1)
end
natives.entity.set_entity_mirror_reflection_flag = natives.ENTITY.SET_ENTITY_MIRROR_REFLECTION_FLAG

--[[
Note that the third parameter(denoted as z) is "up and down" with positive numbers encouraging upwards movement.
]]
function natives.ENTITY.SET_ENTITY_VELOCITY(--[[Entity]] entity, --[[float]] x, --[[float]] y, --[[float]] z) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.SET_ENTITY_VELOCITY' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")

	local result = native_call(0x1C99BB7B6E96D16F, entity, x, y, z)
end
natives.entity.set_entity_velocity = natives.ENTITY.SET_ENTITY_VELOCITY

function natives.ENTITY.SET_ENTITY_ANGULAR_VELOCITY(--[[Entity]] entity, --[[float]] x, --[[float]] y, --[[float]] z) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.SET_ENTITY_ANGULAR_VELOCITY' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")

	local result = native_call(0x8339643499D1222E, entity, x, y, z)
end
natives.entity.set_entity_angular_velocity = natives.ENTITY.SET_ENTITY_ANGULAR_VELOCITY

function natives.ENTITY.SET_ENTITY_HAS_GRAVITY(--[[Entity]] entity, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.SET_ENTITY_HAS_GRAVITY' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x4A4722448F18EEF5, entity, toggle)
end
natives.entity.set_entity_has_gravity = natives.ENTITY.SET_ENTITY_HAS_GRAVITY

--[[
LOD distance can be 0 to 0xFFFF (higher values will result in 0xFFFF) as it is actually stored as a 16-bit value (aka uint16_t).
]]
function natives.ENTITY.SET_ENTITY_LOD_DIST(--[[Entity]] entity, --[[int]] value) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.SET_ENTITY_LOD_DIST' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(value) == "number", "Arg #2 (value) must be a number.")

	local result = native_call(0x5927F96A78577363, entity, value)
end
natives.entity.set_entity_lod_dist = natives.ENTITY.SET_ENTITY_LOD_DIST

--[[
Returns the LOD distance of an entity.
]]
function natives.ENTITY.GET_ENTITY_LOD_DIST(--[[Entity]] entity) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.GET_ENTITY_LOD_DIST' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0x4159C2762B5791D6, entity)
	return result:__tointeger()
end
natives.entity.get_entity_lod_dist = natives.ENTITY.GET_ENTITY_LOD_DIST

--[[
skin - everything alpha except skin
Set entity alpha level. Ranging from 0 to 255 but chnages occur after every 20 percent (after every 51).
]]
function natives.ENTITY.SET_ENTITY_ALPHA(--[[Entity]] entity, --[[int]] alphaLevel, --[[BOOL]] skin) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.SET_ENTITY_ALPHA' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(alphaLevel) == "number", "Arg #2 (alphaLevel) must be a number.")
	assert(type(skin) == "boolean", "Arg #3 (skin) must be a boolean.")

	local result = native_call(0x44A0870B7E92D7C0, entity, alphaLevel, skin)
end
natives.entity.set_entity_alpha = natives.ENTITY.SET_ENTITY_ALPHA

function natives.ENTITY.GET_ENTITY_ALPHA(--[[Entity]] entity) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.GET_ENTITY_ALPHA' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0x5A47B3B5E63E94C6, entity)
	return result:__tointeger()
end
natives.entity.get_entity_alpha = natives.ENTITY.GET_ENTITY_ALPHA

function natives.ENTITY.RESET_ENTITY_ALPHA(--[[Entity]] entity) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.RESET_ENTITY_ALPHA' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0x9B1E824FFBB7027A, entity)
end
natives.entity.reset_entity_alpha = natives.ENTITY.RESET_ENTITY_ALPHA

--[[
Similar to RESET_ENTITY_ALPHA
]]
function natives.ENTITY.RESET_PICKUP_ENTITY_GLOW(--[[Entity]] entity) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.RESET_PICKUP_ENTITY_GLOW' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0x490861B88F4FD846, entity)
end
natives.entity.reset_pickup_entity_glow = natives.ENTITY.RESET_PICKUP_ENTITY_GLOW

function natives.ENTITY.SET_PICKUP_COLLIDES_WITH_PROJECTILES(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.SET_PICKUP_COLLIDES_WITH_PROJECTILES' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xCEA7C8E1B48FF68C, p0, p1)
end
natives.entity.set_pickup_collides_with_projectiles = natives.ENTITY.SET_PICKUP_COLLIDES_WITH_PROJECTILES

--[[
Only called once in the scripts.

Related to weapon objects.

]]
function natives.ENTITY.SET_ENTITY_SORT_BIAS(--[[Entity]] entity, --[[float]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.SET_ENTITY_SORT_BIAS' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x5C3B791D580E0BC2, entity, p1)
end
natives.entity.set_entity_sort_bias = natives.ENTITY.SET_ENTITY_SORT_BIAS

function natives.ENTITY.SET_ENTITY_ALWAYS_PRERENDER(--[[Entity]] entity, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.SET_ENTITY_ALWAYS_PRERENDER' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xACAD101E1FB66689, entity, toggle)
end
natives.entity.set_entity_always_prerender = natives.ENTITY.SET_ENTITY_ALWAYS_PRERENDER

function natives.ENTITY.SET_ENTITY_RENDER_SCORCHED(--[[Entity]] entity, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.SET_ENTITY_RENDER_SCORCHED' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x730F5F8D3F0F2050, entity, toggle)
end
natives.entity.set_entity_render_scorched = natives.ENTITY.SET_ENTITY_RENDER_SCORCHED

--[[
Example here: www.gtaforums.com/topic/830463-help-with-turning-lights-green-and-causing-peds-to-crash-into-each-other/#entry1068211340

0 = green
1 = red
2 = yellow
3 = reset changes
changing lights may not change the behavior of vehicles
]]
function natives.ENTITY.SET_ENTITY_TRAFFICLIGHT_OVERRIDE(--[[Entity]] entity, --[[int]] state) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.SET_ENTITY_TRAFFICLIGHT_OVERRIDE' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(state) == "number", "Arg #2 (state) must be a number.")

	local result = native_call(0x57C5DB656185EAC4, entity, state)
end
natives.entity.set_entity_trafficlight_override = natives.ENTITY.SET_ENTITY_TRAFFICLIGHT_OVERRIDE

function natives.ENTITY.SET_ENTITY_IS_IN_VEHICLE(--[[Entity]] entity) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.SET_ENTITY_IS_IN_VEHICLE' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0x78E8E3A640178255, entity)
end
natives.entity.set_entity_is_in_vehicle = natives.ENTITY.SET_ENTITY_IS_IN_VEHICLE

--[[
Only works with objects!
Network players do not see changes done with this.
- Did ya try modifying p6 lol
]]
function natives.ENTITY.CREATE_MODEL_SWAP(--[[float]] x, --[[float]] y, --[[float]] z, --[[float]] radius, --[[Hash]] originalModel, --[[Hash]] newModel, --[[BOOL]] p6) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.CREATE_MODEL_SWAP' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(radius) == "number", "Arg #4 (radius) must be a number.")
	assert(type(originalModel) == "number", "Arg #5 (originalModel) must be a number.")
	assert(type(newModel) == "number", "Arg #6 (newModel) must be a number.")
	assert(type(p6) == "boolean", "Arg #7 (p6) must be a boolean.")

	local result = native_call(0x92C47782FDA8B2A3, x, y, z, radius, originalModel, newModel, p6)
end
natives.entity.create_model_swap = natives.ENTITY.CREATE_MODEL_SWAP

function natives.ENTITY.REMOVE_MODEL_SWAP(--[[float]] x, --[[float]] y, --[[float]] z, --[[float]] radius, --[[Hash]] originalModel, --[[Hash]] newModel, --[[BOOL]] p6) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.REMOVE_MODEL_SWAP' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(radius) == "number", "Arg #4 (radius) must be a number.")
	assert(type(originalModel) == "number", "Arg #5 (originalModel) must be a number.")
	assert(type(newModel) == "number", "Arg #6 (newModel) must be a number.")
	assert(type(p6) == "boolean", "Arg #7 (p6) must be a boolean.")

	local result = native_call(0x033C0F9A64E229AE, x, y, z, radius, originalModel, newModel, p6)
end
natives.entity.remove_model_swap = natives.ENTITY.REMOVE_MODEL_SWAP

--[[
p5 = sets as true in scripts
Same as the comment for CREATE_MODEL_SWAP unless for some reason p5 affects it this only works with objects as well.

Network players do not see changes done with this.
]]
function natives.ENTITY.CREATE_MODEL_HIDE(--[[float]] x, --[[float]] y, --[[float]] z, --[[float]] radius, --[[Hash]] modelHash, --[[BOOL]] p5) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.CREATE_MODEL_HIDE' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(radius) == "number", "Arg #4 (radius) must be a number.")
	assert(type(modelHash) == "number", "Arg #5 (modelHash) must be a number.")
	assert(type(p5) == "boolean", "Arg #6 (p5) must be a boolean.")

	local result = native_call(0x8A97BCA30A0CE478, x, y, z, radius, modelHash, p5)
end
natives.entity.create_model_hide = natives.ENTITY.CREATE_MODEL_HIDE

function natives.ENTITY.CREATE_MODEL_HIDE_EXCLUDING_SCRIPT_OBJECTS(--[[float]] x, --[[float]] y, --[[float]] z, --[[float]] radius, --[[Hash]] modelHash, --[[BOOL]] p5) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.CREATE_MODEL_HIDE_EXCLUDING_SCRIPT_OBJECTS' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(radius) == "number", "Arg #4 (radius) must be a number.")
	assert(type(modelHash) == "number", "Arg #5 (modelHash) must be a number.")
	assert(type(p5) == "boolean", "Arg #6 (p5) must be a boolean.")

	local result = native_call(0x3A52AE588830BF7F, x, y, z, radius, modelHash, p5)
end
natives.entity.create_model_hide_excluding_script_objects = natives.ENTITY.CREATE_MODEL_HIDE_EXCLUDING_SCRIPT_OBJECTS

--[[
This native makes entities visible that are hidden by the native CREATE_MODEL_HIDE.
p5 should be false, true does nothing
]]
function natives.ENTITY.REMOVE_MODEL_HIDE(--[[float]] x, --[[float]] y, --[[float]] z, --[[float]] radius, --[[Hash]] modelHash, --[[BOOL]] p5) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.REMOVE_MODEL_HIDE' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(radius) == "number", "Arg #4 (radius) must be a number.")
	assert(type(modelHash) == "number", "Arg #5 (modelHash) must be a number.")
	assert(type(p5) == "boolean", "Arg #6 (p5) must be a boolean.")

	local result = native_call(0xD9E3006FB3CBD765, x, y, z, radius, modelHash, p5)
end
natives.entity.remove_model_hide = natives.ENTITY.REMOVE_MODEL_HIDE

function natives.ENTITY.CREATE_FORCED_OBJECT(--[[float]] x, --[[float]] y, --[[float]] z, --[[Any]] p3, --[[Hash]] modelHash, --[[BOOL]] p5) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.CREATE_FORCED_OBJECT' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(modelHash) == "number", "Arg #5 (modelHash) must be a number.")
	assert(type(p5) == "boolean", "Arg #6 (p5) must be a boolean.")

	local result = native_call(0x150E808B375A385A, x, y, z, p3, modelHash, p5)
end
natives.entity.create_forced_object = natives.ENTITY.CREATE_FORCED_OBJECT

function natives.ENTITY.REMOVE_FORCED_OBJECT(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3, --[[Any]] p4) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.REMOVE_FORCED_OBJECT' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")

	local result = native_call(0x61B6775E83C0DB6F, p0, p1, p2, p3, p4)
end
natives.entity.remove_forced_object = natives.ENTITY.REMOVE_FORCED_OBJECT

--[[
Calling this function disables collision between two entities.
The importance of the order for entity1 and entity2 is unclear.
The third parameter, `thisFrame`, decides whether the collision is to be disabled until it is turned back on, or if it's just this frame.
]]
function natives.ENTITY.SET_ENTITY_NO_COLLISION_ENTITY(--[[Entity]] entity1, --[[Entity]] entity2, --[[BOOL]] thisFrameOnly) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.SET_ENTITY_NO_COLLISION_ENTITY' due to disabled trusted mode")

	assert(type(entity1) == "number", "Arg #1 (entity1) must be a number.")
	assert(type(entity2) == "number", "Arg #2 (entity2) must be a number.")
	assert(type(thisFrameOnly) == "boolean", "Arg #3 (thisFrameOnly) must be a boolean.")

	local result = native_call(0xA53ED5520C07654A, entity1, entity2, thisFrameOnly)
end
natives.entity.set_entity_no_collision_entity = natives.ENTITY.SET_ENTITY_NO_COLLISION_ENTITY

function natives.ENTITY.SET_ENTITY_MOTION_BLUR(--[[Entity]] entity, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.SET_ENTITY_MOTION_BLUR' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x295D82A8559F9150, entity, toggle)
end
natives.entity.set_entity_motion_blur = natives.ENTITY.SET_ENTITY_MOTION_BLUR

--[[
p1 always false.
]]
function natives.ENTITY.SET_CAN_AUTO_VAULT_ON_ENTITY(--[[Entity]] entity, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.SET_CAN_AUTO_VAULT_ON_ENTITY' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xE12ABE5E3A389A6C, entity, toggle)
end
natives.entity.set_can_auto_vault_on_entity = natives.ENTITY.SET_CAN_AUTO_VAULT_ON_ENTITY

--[[
p1 always false.
]]
function natives.ENTITY.SET_CAN_CLIMB_ON_ENTITY(--[[Entity]] entity, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.SET_CAN_CLIMB_ON_ENTITY' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xA80AE305E0A3044F, entity, toggle)
end
natives.entity.set_can_climb_on_entity = natives.ENTITY.SET_CAN_CLIMB_ON_ENTITY

--[[
Only called within 1 script for x360. 'fm_mission_controller' and it used on an object. 

Ran after these 2 natives,
set_object_targettable(uParam0, 0);
set_entity_invincible(uParam0, 1);
]]
function natives.ENTITY.SET_WAIT_FOR_COLLISIONS_BEFORE_PROBE(--[[Entity]] entity, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.SET_WAIT_FOR_COLLISIONS_BEFORE_PROBE' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xDC6F8601FAF2E893, entity, toggle)
end
natives.entity.set_wait_for_collisions_before_probe = natives.ENTITY.SET_WAIT_FOR_COLLISIONS_BEFORE_PROBE

function natives.ENTITY.SET_ENTITY_NOWEAPONDECALS(--[[Entity]] entity, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.SET_ENTITY_NOWEAPONDECALS' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0x2C2E3DC128F44309, entity, p1)
end
natives.entity.set_entity_noweapondecals = natives.ENTITY.SET_ENTITY_NOWEAPONDECALS

function natives.ENTITY.SET_ENTITY_USE_MAX_DISTANCE_FOR_WATER_REFLECTION(--[[Entity]] entity, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.SET_ENTITY_USE_MAX_DISTANCE_FOR_WATER_REFLECTION' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0x1A092BB0C3808B96, entity, p1)
end
natives.entity.set_entity_use_max_distance_for_water_reflection = natives.ENTITY.SET_ENTITY_USE_MAX_DISTANCE_FOR_WATER_REFLECTION

--[[
Gets the world rotation of the specified bone of the specified entity.
]]
function natives.ENTITY.GET_ENTITY_BONE_ROTATION(--[[Entity]] entity, --[[int]] boneIndex) -- Returns Vector3
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.GET_ENTITY_BONE_ROTATION' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(boneIndex) == "number", "Arg #2 (boneIndex) must be a number.")

	local result = native_call(0xCE6294A232D03786, entity, boneIndex)
	return result:__tov3()
end
natives.entity.get_entity_bone_rotation = natives.ENTITY.GET_ENTITY_BONE_ROTATION

--[[
Gets the world rotation of the specified bone of the specified entity.
This native is used in casinoroulette.c but I don't know yet what is the difference with _GET_ENTITY_BONE_ROTATION
]]
function natives.ENTITY.GET_ENTITY_BONE_POSTION(--[[Entity]] entity, --[[int]] boneIndex) -- Returns Vector3
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.GET_ENTITY_BONE_POSTION' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(boneIndex) == "number", "Arg #2 (boneIndex) must be a number.")

	local result = native_call(0x46F8696933A63C9B, entity, boneIndex)
	return result:__tov3()
end
natives.entity.get_entity_bone_postion = natives.ENTITY.GET_ENTITY_BONE_POSTION

--[[
Gets the local rotation of the specified bone of the specified entity.
]]
function natives.ENTITY.GET_ENTITY_BONE_OBJECT_ROTATION(--[[Entity]] entity, --[[int]] boneIndex) -- Returns Vector3
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.GET_ENTITY_BONE_OBJECT_ROTATION' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(boneIndex) == "number", "Arg #2 (boneIndex) must be a number.")

	local result = native_call(0xBD8D32550E5CEBFE, entity, boneIndex)
	return result:__tov3()
end
natives.entity.get_entity_bone_object_rotation = natives.ENTITY.GET_ENTITY_BONE_OBJECT_ROTATION

function natives.ENTITY.GET_ENTITY_BONE_COUNT(--[[Entity]] entity) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.GET_ENTITY_BONE_COUNT' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0xB328DCC3A3AA401B, entity)
	return result:__tointeger()
end
natives.entity.get_entity_bone_count = natives.ENTITY.GET_ENTITY_BONE_COUNT

function natives.ENTITY.ENABLE_ENTITY_BULLET_COLLISION(--[[Entity]] entity) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.ENABLE_ENTITY_BULLET_COLLISION' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0x6CE177D014502E8A, entity)
end
natives.entity.enable_entity_bullet_collision = natives.ENTITY.ENABLE_ENTITY_BULLET_COLLISION

function natives.ENTITY.SET_ENTITY_CAN_ONLY_BE_DAMAGED_BY_ENTITY(--[[Entity]] entity1, --[[Entity]] entity2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.SET_ENTITY_CAN_ONLY_BE_DAMAGED_BY_ENTITY' due to disabled trusted mode")

	assert(type(entity1) == "number", "Arg #1 (entity1) must be a number.")
	assert(type(entity2) == "number", "Arg #2 (entity2) must be a number.")

	local result = native_call(0xB17BC6453F6CF5AC, entity1, entity2)
end
natives.entity.set_entity_can_only_be_damaged_by_entity = natives.ENTITY.SET_ENTITY_CAN_ONLY_BE_DAMAGED_BY_ENTITY

function natives.ENTITY.SET_ENTITY_CANT_CAUSE_COLLISION_DAMAGED_ENTITY(--[[Entity]] entity1, --[[Entity]] entity2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.SET_ENTITY_CANT_CAUSE_COLLISION_DAMAGED_ENTITY' due to disabled trusted mode")

	assert(type(entity1) == "number", "Arg #1 (entity1) must be a number.")
	assert(type(entity2) == "number", "Arg #2 (entity2) must be a number.")

	local result = native_call(0x68B562E124CC0AEF, entity1, entity2)
end
natives.entity.set_entity_cant_cause_collision_damaged_entity = natives.ENTITY.SET_ENTITY_CANT_CAUSE_COLLISION_DAMAGED_ENTITY

--[[
p1 is always set to 1
]]
function natives.ENTITY.SET_ALLOW_MIGRATE_TO_SPECTATOR(--[[Entity]] entity, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.SET_ALLOW_MIGRATE_TO_SPECTATOR' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x36F32DE87082343E, entity, p1)
end
natives.entity.set_allow_migrate_to_spectator = natives.ENTITY.SET_ALLOW_MIGRATE_TO_SPECTATOR

--[[
Gets the handle of an entity with a specific model hash attached to another entity, such as an object attached to a ped.
 This native does not appear to have anything to do with pickups as in scripts it is used with objects.

Example from fm_mission_controller_2020.c:

iVar8 = ENTITY::_0x1F922734E259BD26(bParam0->f_9, joaat("p_cs_clipboard"));
]]
function natives.ENTITY.GET_ENTITY_OF_TYPE_ATTACHED_TO_ENTITY(--[[Entity]] entity, --[[Hash]] modelHash) -- Returns Entity
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.GET_ENTITY_OF_TYPE_ATTACHED_TO_ENTITY' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(modelHash) == "number", "Arg #2 (modelHash) must be a number.")

	local result = native_call(0x1F922734E259BD26, entity, modelHash)
	return result:__tointeger()
end
natives.entity.get_entity_of_type_attached_to_entity = natives.ENTITY.GET_ENTITY_OF_TYPE_ATTACHED_TO_ENTITY

function natives.ENTITY.SET_PICK_UP_BY_CARGOBOB_DISABLED(--[[Entity]] entity, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ENTITY.SET_PICK_UP_BY_CARGOBOB_DISABLED' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xD7B80E7C3BEFC396, entity, toggle)
end
natives.entity.set_pick_up_by_cargobob_disabled = natives.ENTITY.SET_PICK_UP_BY_CARGOBOB_DISABLED


natives.EVENT = {}
natives.event = {}

function natives.EVENT.SET_DECISION_MAKER(--[[Ped]] ped, --[[Hash]] name) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'EVENT.SET_DECISION_MAKER' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(name) == "number", "Arg #2 (name) must be a number.")

	local result = native_call(0xB604A2942ADED0EE, ped, name)
end
natives.event.set_decision_maker = natives.EVENT.SET_DECISION_MAKER

--[[
eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt
]]
function natives.EVENT.CLEAR_DECISION_MAKER_EVENT_RESPONSE(--[[Hash]] name, --[[int]] eventType) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'EVENT.CLEAR_DECISION_MAKER_EVENT_RESPONSE' due to disabled trusted mode")

	assert(type(name) == "number", "Arg #1 (name) must be a number.")
	assert(type(eventType) == "number", "Arg #2 (eventType) must be a number.")

	local result = native_call(0x4FC9381A7AEE8968, name, eventType)
end
natives.event.clear_decision_maker_event_response = natives.EVENT.CLEAR_DECISION_MAKER_EVENT_RESPONSE

--[[
eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt

This is limited to 4 blocked events at a time.
]]
function natives.EVENT.BLOCK_DECISION_MAKER_EVENT(--[[Hash]] name, --[[int]] eventType) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'EVENT.BLOCK_DECISION_MAKER_EVENT' due to disabled trusted mode")

	assert(type(name) == "number", "Arg #1 (name) must be a number.")
	assert(type(eventType) == "number", "Arg #2 (eventType) must be a number.")

	local result = native_call(0xE42FCDFD0E4196F7, name, eventType)
end
natives.event.block_decision_maker_event = natives.EVENT.BLOCK_DECISION_MAKER_EVENT

--[[
eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt
]]
function natives.EVENT.UNBLOCK_DECISION_MAKER_EVENT(--[[Hash]] name, --[[int]] eventType) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'EVENT.UNBLOCK_DECISION_MAKER_EVENT' due to disabled trusted mode")

	assert(type(name) == "number", "Arg #1 (name) must be a number.")
	assert(type(eventType) == "number", "Arg #2 (eventType) must be a number.")

	local result = native_call(0xD7CD9CF34F2C99E8, name, eventType)
end
natives.event.unblock_decision_maker_event = natives.EVENT.UNBLOCK_DECISION_MAKER_EVENT

--[[
eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt
]]
function natives.EVENT.ADD_SHOCKING_EVENT_AT_POSITION(--[[int]] eventType, --[[float]] x, --[[float]] y, --[[float]] z, --[[float]] duration) -- Returns ScrHandle
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'EVENT.ADD_SHOCKING_EVENT_AT_POSITION' due to disabled trusted mode")

	assert(type(eventType) == "number", "Arg #1 (eventType) must be a number.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")
	assert(type(duration) == "number", "Arg #5 (duration) must be a number.")

	local result = native_call(0xD9F8455409B525E9, eventType, x, y, z, duration)
	return result:__tointeger()
end
natives.event.add_shocking_event_at_position = natives.EVENT.ADD_SHOCKING_EVENT_AT_POSITION

--[[
eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt
]]
function natives.EVENT.ADD_SHOCKING_EVENT_FOR_ENTITY(--[[int]] eventType, --[[Entity]] entity, --[[float]] duration) -- Returns ScrHandle
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'EVENT.ADD_SHOCKING_EVENT_FOR_ENTITY' due to disabled trusted mode")

	assert(type(eventType) == "number", "Arg #1 (eventType) must be a number.")
	assert(type(entity) == "number", "Arg #2 (entity) must be a number.")
	assert(type(duration) == "number", "Arg #3 (duration) must be a number.")

	local result = native_call(0x7FD8F3BE76F89422, eventType, entity, duration)
	return result:__tointeger()
end
natives.event.add_shocking_event_for_entity = natives.EVENT.ADD_SHOCKING_EVENT_FOR_ENTITY

--[[
eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt
]]
function natives.EVENT.IS_SHOCKING_EVENT_IN_SPHERE(--[[int]] eventType, --[[float]] x, --[[float]] y, --[[float]] z, --[[float]] radius) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'EVENT.IS_SHOCKING_EVENT_IN_SPHERE' due to disabled trusted mode")

	assert(type(eventType) == "number", "Arg #1 (eventType) must be a number.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")
	assert(type(radius) == "number", "Arg #5 (radius) must be a number.")

	local result = native_call(0x1374ABB7C15BAB92, eventType, x, y, z, radius)
	return result:__tointeger() ~= 0
end
natives.event.is_shocking_event_in_sphere = natives.EVENT.IS_SHOCKING_EVENT_IN_SPHERE

function natives.EVENT.REMOVE_SHOCKING_EVENT(--[[ScrHandle]] event) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'EVENT.REMOVE_SHOCKING_EVENT' due to disabled trusted mode")

	assert(type(event) == "number", "Arg #1 (event) must be a number.")

	local result = native_call(0x2CDA538C44C6CCE5, event)
	return result:__tointeger() ~= 0
end
natives.event.remove_shocking_event = natives.EVENT.REMOVE_SHOCKING_EVENT

function natives.EVENT.REMOVE_ALL_SHOCKING_EVENTS(--[[BOOL]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'EVENT.REMOVE_ALL_SHOCKING_EVENTS' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0xEAABE8FDFA21274C, p0)
end
natives.event.remove_all_shocking_events = natives.EVENT.REMOVE_ALL_SHOCKING_EVENTS

function natives.EVENT.REMOVE_SHOCKING_EVENT_SPAWN_BLOCKING_AREAS() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'EVENT.REMOVE_SHOCKING_EVENT_SPAWN_BLOCKING_AREAS' due to disabled trusted mode")

	local result = native_call(0x340F1415B68AEADE)
end
natives.event.remove_shocking_event_spawn_blocking_areas = natives.EVENT.REMOVE_SHOCKING_EVENT_SPAWN_BLOCKING_AREAS

function natives.EVENT.SUPPRESS_SHOCKING_EVENTS_NEXT_FRAME() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'EVENT.SUPPRESS_SHOCKING_EVENTS_NEXT_FRAME' due to disabled trusted mode")

	local result = native_call(0x2F9A292AD0A3BD89)
end
natives.event.suppress_shocking_events_next_frame = natives.EVENT.SUPPRESS_SHOCKING_EVENTS_NEXT_FRAME

--[[
eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt
]]
function natives.EVENT.SUPPRESS_SHOCKING_EVENT_TYPE_NEXT_FRAME(--[[int]] eventType) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'EVENT.SUPPRESS_SHOCKING_EVENT_TYPE_NEXT_FRAME' due to disabled trusted mode")

	assert(type(eventType) == "number", "Arg #1 (eventType) must be a number.")

	local result = native_call(0x3FD2EC8BF1F1CF30, eventType)
end
natives.event.suppress_shocking_event_type_next_frame = natives.EVENT.SUPPRESS_SHOCKING_EVENT_TYPE_NEXT_FRAME

function natives.EVENT.SUPPRESS_AGITATION_EVENTS_NEXT_FRAME() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'EVENT.SUPPRESS_AGITATION_EVENTS_NEXT_FRAME' due to disabled trusted mode")

	local result = native_call(0x5F3B7749C112D552)
end
natives.event.suppress_agitation_events_next_frame = natives.EVENT.SUPPRESS_AGITATION_EVENTS_NEXT_FRAME


natives.FILES = {}
natives.files = {}

--[[
Character types:
0 = Michael, 
1 = Franklin, 
2 = Trevor, 
3 = MPMale, 
4 = MPFemale
]]
function natives.FILES.GET_NUM_TATTOO_SHOP_DLC_ITEMS(--[[int]] character) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'FILES.GET_NUM_TATTOO_SHOP_DLC_ITEMS' due to disabled trusted mode")

	assert(type(character) == "number", "Arg #1 (character) must be a number.")

	local result = native_call(0x278F76C3B0A8F109, character)
	return result:__tointeger()
end
natives.files.get_num_tattoo_shop_dlc_items = natives.FILES.GET_NUM_TATTOO_SHOP_DLC_ITEMS

--[[
Character types:
0 = Michael, 
1 = Franklin, 
2 = Trevor, 
3 = MPMale, 
4 = MPFemale


enum TattooZoneData
{  
    ZONE_TORSO = 0,  
    ZONE_HEAD = 1,  
    ZONE_LEFT_ARM = 2,  
    ZONE_RIGHT_ARM = 3,  
    ZONE_LEFT_LEG = 4,  
    ZONE_RIGHT_LEG = 5,  
    ZONE_UNKNOWN = 6,
    ZONE_NONE = 7,  
};
struct outComponent
{
    // these vars are suffixed with 4 bytes of padding each.
    uint unk;
    int unk2;
    uint tattooCollectionHash;
    uint tattooNameHash;
    int unk3;
    TattooZoneData zoneId;
    uint unk4;
    uint unk5;
    // maybe more, not sure exactly, decompiled scripts are very vague around this part.
}
]]
function natives.FILES.GET_TATTOO_SHOP_DLC_ITEM_DATA(--[[int]] characterType, --[[int]] decorationIndex, --[[Any*]] outComponent) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'FILES.GET_TATTOO_SHOP_DLC_ITEM_DATA' due to disabled trusted mode")

	assert(type(characterType) == "number", "Arg #1 (characterType) must be a number.")
	assert(type(decorationIndex) == "number", "Arg #2 (decorationIndex) must be a number.")
	assert(type(outComponent) == "userdata", "Arg #3 (outComponent) must be a userdata.")

	local result = native_call(0xFF56381874F82086, characterType, decorationIndex, outComponent)
	return result:__tointeger() ~= 0
end
natives.files.get_tattoo_shop_dlc_item_data = natives.FILES.GET_TATTOO_SHOP_DLC_ITEM_DATA

--[[
Returns some sort of index/offset for overlays/decorations.

Character types:
0 = Michael, 
1 = Franklin, 
2 = Trevor, 
3 = MPMale, 
4 = MPFemale
]]
function natives.FILES.GET_TATTOO_SHOP_DLC_ITEM_INDEX(--[[Hash]] overlayHash, --[[Any]] p1, --[[int]] character) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'FILES.GET_TATTOO_SHOP_DLC_ITEM_INDEX' due to disabled trusted mode")

	assert(type(overlayHash) == "number", "Arg #1 (overlayHash) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(character) == "number", "Arg #3 (character) must be a number.")

	local result = native_call(0x10144267DD22866C, overlayHash, p1, character)
	return result:__tointeger()
end
natives.files.get_tattoo_shop_dlc_item_index = natives.FILES.GET_TATTOO_SHOP_DLC_ITEM_INDEX

function natives.FILES.INIT_SHOP_PED_COMPONENT(--[[Any*]] outComponent) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'FILES.INIT_SHOP_PED_COMPONENT' due to disabled trusted mode")

	assert(type(outComponent) == "userdata", "Arg #1 (outComponent) must be a userdata.")

	local result = native_call(0x1E8C308FD312C036, outComponent)
end
natives.files.init_shop_ped_component = natives.FILES.INIT_SHOP_PED_COMPONENT

function natives.FILES.INIT_SHOP_PED_PROP(--[[Any*]] outProp) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'FILES.INIT_SHOP_PED_PROP' due to disabled trusted mode")

	assert(type(outProp) == "userdata", "Arg #1 (outProp) must be a userdata.")

	local result = native_call(0xEB0A2B758F7B850F, outProp)
end
natives.files.init_shop_ped_prop = natives.FILES.INIT_SHOP_PED_PROP

function natives.FILES.SETUP_SHOP_PED_APPAREL_QUERY(--[[int]] p0, --[[int]] p1, --[[int]] p2, --[[int]] p3) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'FILES.SETUP_SHOP_PED_APPAREL_QUERY' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x50F457823CE6EB5F, p0, p1, p2, p3)
	return result:__tointeger()
end
natives.files.setup_shop_ped_apparel_query = natives.FILES.SETUP_SHOP_PED_APPAREL_QUERY

--[[
character is 0 for Michael, 1 for Franklin, 2 for Trevor, 3 for freemode male, and 4 for freemode female.

componentId is between 0 and 11 and corresponds to the usual component slots.

p1 could be the outfit number; unsure.

p2 is usually -1; unknown function.

p3 appears to be for selecting between clothes and props; false is used with components/clothes, true is used with props.

p4 is usually -1; unknown function.

componentId is -1 when p3 is true in decompiled scripts.
]]
function natives.FILES.SETUP_SHOP_PED_APPAREL_QUERY_TU(--[[int]] character, --[[int]] p1, --[[int]] p2, --[[BOOL]] p3, --[[int]] p4, --[[int]] componentId) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'FILES.SETUP_SHOP_PED_APPAREL_QUERY_TU' due to disabled trusted mode")

	assert(type(character) == "number", "Arg #1 (character) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "boolean", "Arg #4 (p3) must be a boolean.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(componentId) == "number", "Arg #6 (componentId) must be a number.")

	local result = native_call(0x9BDF59818B1E38C1, character, p1, p2, p3, p4, componentId)
	return result:__tointeger()
end
natives.files.setup_shop_ped_apparel_query_tu = natives.FILES.SETUP_SHOP_PED_APPAREL_QUERY_TU

--[[
See https://git.io/JtcRf for example and structs.
]]
function natives.FILES.GET_SHOP_PED_QUERY_COMPONENT(--[[int]] componentId, --[[Any*]] outComponent) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'FILES.GET_SHOP_PED_QUERY_COMPONENT' due to disabled trusted mode")

	assert(type(componentId) == "number", "Arg #1 (componentId) must be a number.")
	assert(type(outComponent) == "userdata", "Arg #2 (outComponent) must be a userdata.")

	local result = native_call(0x249E310B2D920699, componentId, outComponent)
end
natives.files.get_shop_ped_query_component = natives.FILES.GET_SHOP_PED_QUERY_COMPONENT

--[[
Returns some sort of index/offset for components.
Needs _GET_NUM_PROPS_FROM_OUTFIT to be called with p3 = false and componentId with the drawable's component slot first, returns -1 otherwise.
]]
function natives.FILES.GET_SHOP_PED_QUERY_COMPONENT_INDEX(--[[Hash]] componentHash) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'FILES.GET_SHOP_PED_QUERY_COMPONENT_INDEX' due to disabled trusted mode")

	assert(type(componentHash) == "number", "Arg #1 (componentHash) must be a number.")

	local result = native_call(0x96E2929292A4DB77, componentHash)
	return result:__tointeger()
end
natives.files.get_shop_ped_query_component_index = natives.FILES.GET_SHOP_PED_QUERY_COMPONENT_INDEX

--[[
More info here: https://gist.github.com/root-cause/3b80234367b0c856d60bf5cb4b826f86
]]
function natives.FILES.GET_SHOP_PED_COMPONENT(--[[Hash]] componentHash, --[[Any*]] outComponent) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'FILES.GET_SHOP_PED_COMPONENT' due to disabled trusted mode")

	assert(type(componentHash) == "number", "Arg #1 (componentHash) must be a number.")
	assert(type(outComponent) == "userdata", "Arg #2 (outComponent) must be a userdata.")

	local result = native_call(0x74C0E2A57EC66760, componentHash, outComponent)
end
natives.files.get_shop_ped_component = natives.FILES.GET_SHOP_PED_COMPONENT

--[[
See https://git.io/JtcRf for example and structs.
]]
function natives.FILES.GET_SHOP_PED_QUERY_PROP(--[[int]] componentId, --[[Any*]] outProp) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'FILES.GET_SHOP_PED_QUERY_PROP' due to disabled trusted mode")

	assert(type(componentId) == "number", "Arg #1 (componentId) must be a number.")
	assert(type(outProp) == "userdata", "Arg #2 (outProp) must be a userdata.")

	local result = native_call(0xDE44A00999B2837D, componentId, outProp)
end
natives.files.get_shop_ped_query_prop = natives.FILES.GET_SHOP_PED_QUERY_PROP

--[[
Returns some sort of index/offset for props.
Needs _GET_NUM_PROPS_FROM_OUTFIT to be called with p3 = true and componentId = -1 first, returns -1 otherwise.
]]
function natives.FILES.GET_SHOP_PED_QUERY_PROP_INDEX(--[[Hash]] componentHash) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'FILES.GET_SHOP_PED_QUERY_PROP_INDEX' due to disabled trusted mode")

	assert(type(componentHash) == "number", "Arg #1 (componentHash) must be a number.")

	local result = native_call(0x6CEBE002E58DEE97, componentHash)
	return result:__tointeger()
end
natives.files.get_shop_ped_query_prop_index = natives.FILES.GET_SHOP_PED_QUERY_PROP_INDEX

--[[
More info here: https://gist.github.com/root-cause/3b80234367b0c856d60bf5cb4b826f86
]]
function natives.FILES.GET_SHOP_PED_PROP(--[[Hash]] componentHash, --[[Any*]] outProp) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'FILES.GET_SHOP_PED_PROP' due to disabled trusted mode")

	assert(type(componentHash) == "number", "Arg #1 (componentHash) must be a number.")
	assert(type(outProp) == "userdata", "Arg #2 (outProp) must be a userdata.")

	local result = native_call(0x5D5CAFF661DDF6FC, componentHash, outProp)
end
natives.files.get_shop_ped_prop = natives.FILES.GET_SHOP_PED_PROP

function natives.FILES.GET_HASH_NAME_FOR_COMPONENT(--[[Entity]] entity, --[[int]] componentId, --[[int]] drawableVariant, --[[int]] textureVariant) -- Returns Hash
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'FILES.GET_HASH_NAME_FOR_COMPONENT' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(componentId) == "number", "Arg #2 (componentId) must be a number.")
	assert(type(drawableVariant) == "number", "Arg #3 (drawableVariant) must be a number.")
	assert(type(textureVariant) == "number", "Arg #4 (textureVariant) must be a number.")

	local result = native_call(0x0368B3A838070348, entity, componentId, drawableVariant, textureVariant)
	return result:__tointeger()
end
natives.files.get_hash_name_for_component = natives.FILES.GET_HASH_NAME_FOR_COMPONENT

function natives.FILES.GET_HASH_NAME_FOR_PROP(--[[Entity]] entity, --[[int]] componentId, --[[int]] propIndex, --[[int]] propTextureIndex) -- Returns Hash
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'FILES.GET_HASH_NAME_FOR_PROP' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(componentId) == "number", "Arg #2 (componentId) must be a number.")
	assert(type(propIndex) == "number", "Arg #3 (propIndex) must be a number.")
	assert(type(propTextureIndex) == "number", "Arg #4 (propTextureIndex) must be a number.")

	local result = native_call(0x5D6160275CAEC8DD, entity, componentId, propIndex, propTextureIndex)
	return result:__tointeger()
end
natives.files.get_hash_name_for_prop = natives.FILES.GET_HASH_NAME_FOR_PROP

function natives.FILES.GET_SHOP_PED_APPAREL_VARIANT_COMPONENT_COUNT(--[[Hash]] componentHash) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'FILES.GET_SHOP_PED_APPAREL_VARIANT_COMPONENT_COUNT' due to disabled trusted mode")

	assert(type(componentHash) == "number", "Arg #1 (componentHash) must be a number.")

	local result = native_call(0xC17AD0E5752BECDA, componentHash)
	return result:__tointeger()
end
natives.files.get_shop_ped_apparel_variant_component_count = natives.FILES.GET_SHOP_PED_APPAREL_VARIANT_COMPONENT_COUNT

--[[
`propHash`: Ped helmet prop hash?
This native returns 1 when the player helmet has a visor (there is another prop index for the same helmet with closed/opened visor variant) that can be toggled. 0 if there's no alternative version with a visor for this helmet prop.
]]
function natives.FILES.GET_SHOP_PED_APPAREL_VARIANT_PROP_COUNT(--[[Hash]] propHash) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'FILES.GET_SHOP_PED_APPAREL_VARIANT_PROP_COUNT' due to disabled trusted mode")

	assert(type(propHash) == "number", "Arg #1 (propHash) must be a number.")

	local result = native_call(0xD40AAC51E8E4C663, propHash)
	return result:__tointeger()
end
natives.files.get_shop_ped_apparel_variant_prop_count = natives.FILES.GET_SHOP_PED_APPAREL_VARIANT_PROP_COUNT

function natives.FILES.GET_VARIANT_COMPONENT(--[[Hash]] componentHash, --[[int]] variantComponentIndex, --[[Hash*]] nameHash, --[[int*]] enumValue, --[[int*]] componentType) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'FILES.GET_VARIANT_COMPONENT' due to disabled trusted mode")

	assert(type(componentHash) == "number", "Arg #1 (componentHash) must be a number.")
	assert(type(variantComponentIndex) == "number", "Arg #2 (variantComponentIndex) must be a number.")
	assert(type(nameHash) == "userdata", "Arg #3 (nameHash) must be a userdata.")
	assert(type(enumValue) == "userdata", "Arg #4 (enumValue) must be a userdata.")
	assert(type(componentType) == "userdata", "Arg #5 (componentType) must be a userdata.")

	local result = native_call(0x6E11F282F11863B6, componentHash, variantComponentIndex, nameHash, enumValue, componentType)
end
natives.files.get_variant_component = natives.FILES.GET_VARIANT_COMPONENT

function natives.FILES.GET_VARIANT_PROP(--[[Hash]] componentHash, --[[int]] variantPropIndex, --[[Hash*]] nameHash, --[[int*]] enumValue, --[[int*]] anchorPoint) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'FILES.GET_VARIANT_PROP' due to disabled trusted mode")

	assert(type(componentHash) == "number", "Arg #1 (componentHash) must be a number.")
	assert(type(variantPropIndex) == "number", "Arg #2 (variantPropIndex) must be a number.")
	assert(type(nameHash) == "userdata", "Arg #3 (nameHash) must be a userdata.")
	assert(type(enumValue) == "userdata", "Arg #4 (enumValue) must be a userdata.")
	assert(type(anchorPoint) == "userdata", "Arg #5 (anchorPoint) must be a userdata.")

	local result = native_call(0xD81B7F27BC773E66, componentHash, variantPropIndex, nameHash, enumValue, anchorPoint)
end
natives.files.get_variant_prop = natives.FILES.GET_VARIANT_PROP

--[[
Returns number of possible values of the forcedComponentIndex argument of GET_FORCED_COMPONENT.
]]
function natives.FILES.GET_SHOP_PED_APPAREL_FORCED_COMPONENT_COUNT(--[[Hash]] componentHash) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'FILES.GET_SHOP_PED_APPAREL_FORCED_COMPONENT_COUNT' due to disabled trusted mode")

	assert(type(componentHash) == "number", "Arg #1 (componentHash) must be a number.")

	local result = native_call(0xC6B9DB42C04DD8C3, componentHash)
	return result:__tointeger()
end
natives.files.get_shop_ped_apparel_forced_component_count = natives.FILES.GET_SHOP_PED_APPAREL_FORCED_COMPONENT_COUNT

--[[
Returns number of possible values of the forcedPropIndex argument of GET_FORCED_PROP.
]]
function natives.FILES.GET_SHOP_PED_APPAREL_FORCED_PROP_COUNT(--[[Hash]] componentHash) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'FILES.GET_SHOP_PED_APPAREL_FORCED_PROP_COUNT' due to disabled trusted mode")

	assert(type(componentHash) == "number", "Arg #1 (componentHash) must be a number.")

	local result = native_call(0x017568A8182D98A6, componentHash)
	return result:__tointeger()
end
natives.files.get_shop_ped_apparel_forced_prop_count = natives.FILES.GET_SHOP_PED_APPAREL_FORCED_PROP_COUNT

function natives.FILES.GET_FORCED_COMPONENT(--[[Hash]] componentHash, --[[int]] forcedComponentIndex, --[[Hash*]] nameHash, --[[int*]] enumValue, --[[int*]] componentType) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'FILES.GET_FORCED_COMPONENT' due to disabled trusted mode")

	assert(type(componentHash) == "number", "Arg #1 (componentHash) must be a number.")
	assert(type(forcedComponentIndex) == "number", "Arg #2 (forcedComponentIndex) must be a number.")
	assert(type(nameHash) == "userdata", "Arg #3 (nameHash) must be a userdata.")
	assert(type(enumValue) == "userdata", "Arg #4 (enumValue) must be a userdata.")
	assert(type(componentType) == "userdata", "Arg #5 (componentType) must be a userdata.")

	local result = native_call(0x6C93ED8C2F74859B, componentHash, forcedComponentIndex, nameHash, enumValue, componentType)
end
natives.files.get_forced_component = natives.FILES.GET_FORCED_COMPONENT

function natives.FILES.GET_FORCED_PROP(--[[Hash]] componentHash, --[[int]] forcedPropIndex, --[[Hash*]] nameHash, --[[int*]] enumValue, --[[int*]] anchorPoint) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'FILES.GET_FORCED_PROP' due to disabled trusted mode")

	assert(type(componentHash) == "number", "Arg #1 (componentHash) must be a number.")
	assert(type(forcedPropIndex) == "number", "Arg #2 (forcedPropIndex) must be a number.")
	assert(type(nameHash) == "userdata", "Arg #3 (nameHash) must be a userdata.")
	assert(type(enumValue) == "userdata", "Arg #4 (enumValue) must be a userdata.")
	assert(type(anchorPoint) == "userdata", "Arg #5 (anchorPoint) must be a userdata.")

	local result = native_call(0xE1CA84EBF72E691D, componentHash, forcedPropIndex, nameHash, enumValue, anchorPoint)
end
natives.files.get_forced_prop = natives.FILES.GET_FORCED_PROP

--[[
Full list of restriction tags by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedApparelRestrictionTags.json

componentId/last parameter seems to be unused.
]]
function natives.FILES.DOES_SHOP_PED_APPAREL_HAVE_RESTRICTION_TAG(--[[Hash]] componentHash, --[[Hash]] restrictionTagHash, --[[int]] componentId) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'FILES.DOES_SHOP_PED_APPAREL_HAVE_RESTRICTION_TAG' due to disabled trusted mode")

	assert(type(componentHash) == "number", "Arg #1 (componentHash) must be a number.")
	assert(type(restrictionTagHash) == "number", "Arg #2 (restrictionTagHash) must be a number.")
	assert(type(componentId) == "number", "Arg #3 (componentId) must be a number.")

	local result = native_call(0x341DE7ED1D2A1BFD, componentHash, restrictionTagHash, componentId)
	return result:__tointeger() ~= 0
end
natives.files.does_shop_ped_apparel_have_restriction_tag = natives.FILES.DOES_SHOP_PED_APPAREL_HAVE_RESTRICTION_TAG

function natives.FILES.DOES_CURRENT_PED_COMPONENT_HAVE_RESTRICTION_TAG(--[[Ped]] ped, --[[int]] componentId, --[[Hash]] restrictionTagHash) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'FILES.DOES_CURRENT_PED_COMPONENT_HAVE_RESTRICTION_TAG' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(componentId) == "number", "Arg #2 (componentId) must be a number.")
	assert(type(restrictionTagHash) == "number", "Arg #3 (restrictionTagHash) must be a number.")

	local result = native_call(0x7796B21B76221BC5, ped, componentId, restrictionTagHash)
	return result:__tointeger() ~= 0
end
natives.files.does_current_ped_component_have_restriction_tag = natives.FILES.DOES_CURRENT_PED_COMPONENT_HAVE_RESTRICTION_TAG

function natives.FILES.DOES_CURRENT_PED_PROP_HAVE_RESTRICTION_TAG(--[[Ped]] ped, --[[int]] componentId, --[[Hash]] restrictionTagHash) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'FILES.DOES_CURRENT_PED_PROP_HAVE_RESTRICTION_TAG' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(componentId) == "number", "Arg #2 (componentId) must be a number.")
	assert(type(restrictionTagHash) == "number", "Arg #3 (restrictionTagHash) must be a number.")

	local result = native_call(0xD726BAB4554DA580, ped, componentId, restrictionTagHash)
	return result:__tointeger() ~= 0
end
natives.files.does_current_ped_prop_have_restriction_tag = natives.FILES.DOES_CURRENT_PED_PROP_HAVE_RESTRICTION_TAG

--[[
characters

0: Michael
1: Franklin
2: Trevor
3: MPMale
4: MPFemale
]]
function natives.FILES.SETUP_SHOP_PED_OUTFIT_QUERY(--[[int]] character, --[[BOOL]] p1) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'FILES.SETUP_SHOP_PED_OUTFIT_QUERY' due to disabled trusted mode")

	assert(type(character) == "number", "Arg #1 (character) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0xF3FBE2D50A6A8C28, character, p1)
	return result:__tointeger()
end
natives.files.setup_shop_ped_outfit_query = natives.FILES.SETUP_SHOP_PED_OUTFIT_QUERY

--[[
outfitIndex: from 0 to _GET_NUM_SHOP_PED_OUTFITS(characterIndex, false) - 1.
See https://git.io/JtcB8 for example and outfit struct.
]]
function natives.FILES.GET_SHOP_PED_QUERY_OUTFIT(--[[int]] outfitIndex, --[[Any*]] outfit) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'FILES.GET_SHOP_PED_QUERY_OUTFIT' due to disabled trusted mode")

	assert(type(outfitIndex) == "number", "Arg #1 (outfitIndex) must be a number.")
	assert(type(outfit) == "userdata", "Arg #2 (outfit) must be a userdata.")

	local result = native_call(0x6D793F03A631FE56, outfitIndex, outfit)
end
natives.files.get_shop_ped_query_outfit = natives.FILES.GET_SHOP_PED_QUERY_OUTFIT

function natives.FILES.GET_SHOP_PED_OUTFIT(--[[Any]] p0, --[[Any*]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'FILES.GET_SHOP_PED_OUTFIT' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "userdata", "Arg #2 (p1) must be a userdata.")

	local result = native_call(0xB7952076E444979D, p0, p1)
end
natives.files.get_shop_ped_outfit = natives.FILES.GET_SHOP_PED_OUTFIT

function natives.FILES.GET_SHOP_PED_OUTFIT_LOCATE(--[[Any]] p0) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'FILES.GET_SHOP_PED_OUTFIT_LOCATE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x073CA26B079F956E, p0)
	return result:__tointeger()
end
natives.files.get_shop_ped_outfit_locate = natives.FILES.GET_SHOP_PED_OUTFIT_LOCATE

--[[
See https://git.io/JtcBH for example and structs.
]]
function natives.FILES.GET_SHOP_PED_OUTFIT_PROP_VARIANT(--[[Hash]] outfitHash, --[[int]] variantIndex, --[[Any*]] outPropVariant) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'FILES.GET_SHOP_PED_OUTFIT_PROP_VARIANT' due to disabled trusted mode")

	assert(type(outfitHash) == "number", "Arg #1 (outfitHash) must be a number.")
	assert(type(variantIndex) == "number", "Arg #2 (variantIndex) must be a number.")
	assert(type(outPropVariant) == "userdata", "Arg #3 (outPropVariant) must be a userdata.")

	local result = native_call(0xA9F9C2E0FDE11CBB, outfitHash, variantIndex, outPropVariant)
	return result:__tointeger() ~= 0
end
natives.files.get_shop_ped_outfit_prop_variant = natives.FILES.GET_SHOP_PED_OUTFIT_PROP_VARIANT

--[[
See https://git.io/JtcBH for example and structs.
]]
function natives.FILES.GET_SHOP_PED_OUTFIT_COMPONENT_VARIANT(--[[Hash]] outfitHash, --[[int]] variantIndex, --[[Any*]] outComponentVariant) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'FILES.GET_SHOP_PED_OUTFIT_COMPONENT_VARIANT' due to disabled trusted mode")

	assert(type(outfitHash) == "number", "Arg #1 (outfitHash) must be a number.")
	assert(type(variantIndex) == "number", "Arg #2 (variantIndex) must be a number.")
	assert(type(outComponentVariant) == "userdata", "Arg #3 (outComponentVariant) must be a userdata.")

	local result = native_call(0x19F2A026EDF0013F, outfitHash, variantIndex, outComponentVariant)
	return result:__tointeger() ~= 0
end
natives.files.get_shop_ped_outfit_component_variant = natives.FILES.GET_SHOP_PED_OUTFIT_COMPONENT_VARIANT

function natives.FILES.GET_NUM_DLC_VEHICLES() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'FILES.GET_NUM_DLC_VEHICLES' due to disabled trusted mode")

	local result = native_call(0xA7A866D21CD2329B)
	return result:__tointeger()
end
natives.files.get_num_dlc_vehicles = natives.FILES.GET_NUM_DLC_VEHICLES

--[[
dlcVehicleIndex is 0 to GET_NUM_DLC_VEHICLS() - 1
]]
function natives.FILES.GET_DLC_VEHICLE_MODEL(--[[int]] dlcVehicleIndex) -- Returns Hash
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'FILES.GET_DLC_VEHICLE_MODEL' due to disabled trusted mode")

	assert(type(dlcVehicleIndex) == "number", "Arg #1 (dlcVehicleIndex) must be a number.")

	local result = native_call(0xECC01B7C5763333C, dlcVehicleIndex)
	return result:__tointeger()
end
natives.files.get_dlc_vehicle_model = natives.FILES.GET_DLC_VEHICLE_MODEL

--[[
dlcVehicleIndex takes a number from 0 - GET_NUM_DLC_VEHICLES() - 1.
outData is a struct of 3 8-byte items.
The Second item in the struct *(Hash *)(outData + 1) is the vehicle hash.
]]
function natives.FILES.GET_DLC_VEHICLE_DATA(--[[int]] dlcVehicleIndex, --[[Any*]] outData) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'FILES.GET_DLC_VEHICLE_DATA' due to disabled trusted mode")

	assert(type(dlcVehicleIndex) == "number", "Arg #1 (dlcVehicleIndex) must be a number.")
	assert(type(outData) == "userdata", "Arg #2 (outData) must be a userdata.")

	local result = native_call(0x33468EDC08E371F6, dlcVehicleIndex, outData)
	return result:__tointeger() ~= 0
end
natives.files.get_dlc_vehicle_data = natives.FILES.GET_DLC_VEHICLE_DATA

function natives.FILES.GET_DLC_VEHICLE_FLAGS(--[[int]] dlcVehicleIndex) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'FILES.GET_DLC_VEHICLE_FLAGS' due to disabled trusted mode")

	assert(type(dlcVehicleIndex) == "number", "Arg #1 (dlcVehicleIndex) must be a number.")

	local result = native_call(0x5549EE11FA22FCF2, dlcVehicleIndex)
	return result:__tointeger()
end
natives.files.get_dlc_vehicle_flags = natives.FILES.GET_DLC_VEHICLE_FLAGS

--[[
Returns the total number of DLC weapons.
]]
function natives.FILES.GET_NUM_DLC_WEAPONS() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'FILES.GET_NUM_DLC_WEAPONS' due to disabled trusted mode")

	local result = native_call(0xEE47635F352DA367)
	return result:__tointeger()
end
natives.files.get_num_dlc_weapons = natives.FILES.GET_NUM_DLC_WEAPONS

--[[
Returns the total number of DLC weapons that are available in SP (availableInSP field in shop_weapon.meta).
]]
function natives.FILES.GET_NUM_DLC_WEAPONS_SP() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'FILES.GET_NUM_DLC_WEAPONS_SP' due to disabled trusted mode")

	local result = native_call(0x4160B65AE085B5A9)
	return result:__tointeger()
end
natives.files.get_num_dlc_weapons_sp = natives.FILES.GET_NUM_DLC_WEAPONS_SP

--[[

dlcWeaponIndex takes a number from 0 - GET_NUM_DLC_WEAPONS() - 1.
struct DlcWeaponData
{
int emptyCheck; //use DLC1::_IS_DLC_DATA_EMPTY on this
int padding1;
int weaponHash;
int padding2;
int unk;
int padding3;
int weaponCost;
int padding4;
int ammoCost;
int padding5;
int ammoType;
int padding6;
int defaultClipSize;
int padding7;
char nameLabel[64];
char descLabel[64];
char desc2Label[64]; // usually "the" + name
char upperCaseNameLabel[64];
};
]]
function natives.FILES.GET_DLC_WEAPON_DATA(--[[int]] dlcWeaponIndex, --[[Any*]] outData) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'FILES.GET_DLC_WEAPON_DATA' due to disabled trusted mode")

	assert(type(dlcWeaponIndex) == "number", "Arg #1 (dlcWeaponIndex) must be a number.")
	assert(type(outData) == "userdata", "Arg #2 (outData) must be a userdata.")

	local result = native_call(0x79923CD21BECE14E, dlcWeaponIndex, outData)
	return result:__tointeger() ~= 0
end
natives.files.get_dlc_weapon_data = natives.FILES.GET_DLC_WEAPON_DATA

--[[
Same as GET_DLC_WEAPON_DATA but only works for DLC weapons that are available in SP.
]]
function natives.FILES.GET_DLC_WEAPON_DATA_SP(--[[int]] dlcWeaponIndex, --[[Any*]] outData) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'FILES.GET_DLC_WEAPON_DATA_SP' due to disabled trusted mode")

	assert(type(dlcWeaponIndex) == "number", "Arg #1 (dlcWeaponIndex) must be a number.")
	assert(type(outData) == "userdata", "Arg #2 (outData) must be a userdata.")

	local result = native_call(0x310836EE7129BA33, dlcWeaponIndex, outData)
	return result:__tointeger() ~= 0
end
natives.files.get_dlc_weapon_data_sp = natives.FILES.GET_DLC_WEAPON_DATA_SP

--[[
Returns the total number of DLC weapon components.
]]
function natives.FILES.GET_NUM_DLC_WEAPON_COMPONENTS(--[[int]] dlcWeaponIndex) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'FILES.GET_NUM_DLC_WEAPON_COMPONENTS' due to disabled trusted mode")

	assert(type(dlcWeaponIndex) == "number", "Arg #1 (dlcWeaponIndex) must be a number.")

	local result = native_call(0x405425358A7D61FE, dlcWeaponIndex)
	return result:__tointeger()
end
natives.files.get_num_dlc_weapon_components = natives.FILES.GET_NUM_DLC_WEAPON_COMPONENTS

--[[
Returns the total number of DLC weapon components that are available in SP.
]]
function natives.FILES.GET_NUM_DLC_WEAPON_COMPONENTS_SP(--[[int]] dlcWeaponIndex) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'FILES.GET_NUM_DLC_WEAPON_COMPONENTS_SP' due to disabled trusted mode")

	assert(type(dlcWeaponIndex) == "number", "Arg #1 (dlcWeaponIndex) must be a number.")

	local result = native_call(0xAD2A7A6DFF55841B, dlcWeaponIndex)
	return result:__tointeger()
end
natives.files.get_num_dlc_weapon_components_sp = natives.FILES.GET_NUM_DLC_WEAPON_COMPONENTS_SP

--[[
p0 seems to be the weapon index
p1 seems to be the weapon component index
struct DlcComponentData{
int attachBone;
int padding1;
int bActiveByDefault;
int padding2;
int unk;
int padding3;
int componentHash;
int padding4;
int unk2;
int padding5;
int componentCost;
int padding6;
char nameLabel[64];
char descLabel[64];
};

]]
function natives.FILES.GET_DLC_WEAPON_COMPONENT_DATA(--[[int]] dlcWeaponIndex, --[[int]] dlcWeapCompIndex, --[[Any*]] ComponentDataPtr) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'FILES.GET_DLC_WEAPON_COMPONENT_DATA' due to disabled trusted mode")

	assert(type(dlcWeaponIndex) == "number", "Arg #1 (dlcWeaponIndex) must be a number.")
	assert(type(dlcWeapCompIndex) == "number", "Arg #2 (dlcWeapCompIndex) must be a number.")
	assert(type(ComponentDataPtr) == "userdata", "Arg #3 (ComponentDataPtr) must be a userdata.")

	local result = native_call(0x6CF598A2957C2BF8, dlcWeaponIndex, dlcWeapCompIndex, ComponentDataPtr)
	return result:__tointeger() ~= 0
end
natives.files.get_dlc_weapon_component_data = natives.FILES.GET_DLC_WEAPON_COMPONENT_DATA

--[[
Same as GET_DLC_WEAPON_COMPONENT_DATA but only works for DLC components that are available in SP.
]]
function natives.FILES.GET_DLC_WEAPON_COMPONENT_DATA_SP(--[[int]] dlcWeaponIndex, --[[int]] dlcWeapCompIndex, --[[Any*]] ComponentDataPtr) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'FILES.GET_DLC_WEAPON_COMPONENT_DATA_SP' due to disabled trusted mode")

	assert(type(dlcWeaponIndex) == "number", "Arg #1 (dlcWeaponIndex) must be a number.")
	assert(type(dlcWeapCompIndex) == "number", "Arg #2 (dlcWeapCompIndex) must be a number.")
	assert(type(ComponentDataPtr) == "userdata", "Arg #3 (ComponentDataPtr) must be a userdata.")

	local result = native_call(0x31D5E073B6F93CDC, dlcWeaponIndex, dlcWeapCompIndex, ComponentDataPtr)
	return result:__tointeger() ~= 0
end
natives.files.get_dlc_weapon_component_data_sp = natives.FILES.GET_DLC_WEAPON_COMPONENT_DATA_SP

function natives.FILES.IS_CONTENT_ITEM_LOCKED(--[[Hash]] itemHash) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'FILES.IS_CONTENT_ITEM_LOCKED' due to disabled trusted mode")

	assert(type(itemHash) == "number", "Arg #1 (itemHash) must be a number.")

	local result = native_call(0xD4D7B033C3AA243C, itemHash)
	return result:__tointeger() ~= 0
end
natives.files.is_content_item_locked = natives.FILES.IS_CONTENT_ITEM_LOCKED

function natives.FILES.IS_DLC_VEHICLE_MOD(--[[Hash]] hash) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'FILES.IS_DLC_VEHICLE_MOD' due to disabled trusted mode")

	assert(type(hash) == "number", "Arg #1 (hash) must be a number.")

	local result = native_call(0x0564B9FF9631B82C, hash)
	return result:__tointeger() ~= 0
end
natives.files.is_dlc_vehicle_mod = natives.FILES.IS_DLC_VEHICLE_MOD

function natives.FILES.GET_DLC_VEHICLE_MOD_LOCK_HASH(--[[Hash]] hash) -- Returns Hash
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'FILES.GET_DLC_VEHICLE_MOD_LOCK_HASH' due to disabled trusted mode")

	assert(type(hash) == "number", "Arg #1 (hash) must be a number.")

	local result = native_call(0xC098810437312FFF, hash)
	return result:__tointeger()
end
natives.files.get_dlc_vehicle_mod_lock_hash = natives.FILES.GET_DLC_VEHICLE_MOD_LOCK_HASH

--[[
From fm_deathmatch_creator and fm_race_creator:

FILES::_UNLOAD_CONTENT_CHANGE_SET_GROUP(joaat("GROUP_MAP_SP"));
FILES::_LOAD_CONTENT_CHANGE_SET_GROUP(joaat("GROUP_MAP"));
]]
function natives.FILES.EXECUTE_CONTENT_CHANGESET_GROUP_FOR_ALL(--[[Hash]] hash) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'FILES.EXECUTE_CONTENT_CHANGESET_GROUP_FOR_ALL' due to disabled trusted mode")

	assert(type(hash) == "number", "Arg #1 (hash) must be a number.")

	local result = native_call(0x6BEDF5769AC2DC07, hash)
end
natives.files.execute_content_changeset_group_for_all = natives.FILES.EXECUTE_CONTENT_CHANGESET_GROUP_FOR_ALL

--[[
From fm_deathmatch_creator and fm_race_creator:

FILES::_UNLOAD_CONTENT_CHANGE_SET_GROUP(joaat("GROUP_MAP_SP"));
FILES::_LOAD_CONTENT_CHANGE_SET_GROUP(joaat("GROUP_MAP"));
]]
function natives.FILES.REVERT_CONTENT_CHANGESET_GROUP_FOR_ALL(--[[Hash]] hash) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'FILES.REVERT_CONTENT_CHANGESET_GROUP_FOR_ALL' due to disabled trusted mode")

	assert(type(hash) == "number", "Arg #1 (hash) must be a number.")

	local result = native_call(0x3C1978285B036B25, hash)
end
natives.files.revert_content_changeset_group_for_all = natives.FILES.REVERT_CONTENT_CHANGESET_GROUP_FOR_ALL


natives.FIRE = {}
natives.fire = {}

--[[
Starts a fire:

xyz: Location of fire
maxChildren: The max amount of times a fire can spread to other objects. Must be 25 or less, or the function will do nothing.
isGasFire: Whether or not the fire is powered by gasoline.
]]
function natives.FIRE.START_SCRIPT_FIRE(--[[float]] X, --[[float]] Y, --[[float]] Z, --[[int]] maxChildren, --[[BOOL]] isGasFire) -- Returns FireId
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'FIRE.START_SCRIPT_FIRE' due to disabled trusted mode")

	assert(type(X) == "number", "Arg #1 (X) must be a number.")
	assert(type(Y) == "number", "Arg #2 (Y) must be a number.")
	assert(type(Z) == "number", "Arg #3 (Z) must be a number.")
	assert(type(maxChildren) == "number", "Arg #4 (maxChildren) must be a number.")
	assert(type(isGasFire) == "boolean", "Arg #5 (isGasFire) must be a boolean.")

	local result = native_call(0x6B83617E04503888, X, Y, Z, maxChildren, isGasFire)
	return result:__tointeger()
end
natives.fire.start_script_fire = natives.FIRE.START_SCRIPT_FIRE

function natives.FIRE.REMOVE_SCRIPT_FIRE(--[[FireId]] fireHandle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'FIRE.REMOVE_SCRIPT_FIRE' due to disabled trusted mode")

	assert(type(fireHandle) == "number", "Arg #1 (fireHandle) must be a number.")

	local result = native_call(0x7FF548385680673F, fireHandle)
end
natives.fire.remove_script_fire = natives.FIRE.REMOVE_SCRIPT_FIRE

function natives.FIRE.START_ENTITY_FIRE(--[[Entity]] entity) -- Returns FireId
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'FIRE.START_ENTITY_FIRE' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0xF6A9D9708F6F23DF, entity)
	return result:__tointeger()
end
natives.fire.start_entity_fire = natives.FIRE.START_ENTITY_FIRE

function natives.FIRE.STOP_ENTITY_FIRE(--[[Entity]] entity) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'FIRE.STOP_ENTITY_FIRE' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0x7F0DD2EBBB651AFF, entity)
end
natives.fire.stop_entity_fire = natives.FIRE.STOP_ENTITY_FIRE

function natives.FIRE.IS_ENTITY_ON_FIRE(--[[Entity]] entity) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'FIRE.IS_ENTITY_ON_FIRE' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0x28D3FED7190D3A0B, entity)
	return result:__tointeger() ~= 0
end
natives.fire.is_entity_on_fire = natives.FIRE.IS_ENTITY_ON_FIRE

function natives.FIRE.GET_NUMBER_OF_FIRES_IN_RANGE(--[[float]] x, --[[float]] y, --[[float]] z, --[[float]] radius) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'FIRE.GET_NUMBER_OF_FIRES_IN_RANGE' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(radius) == "number", "Arg #4 (radius) must be a number.")

	local result = native_call(0x50CAD495A460B305, x, y, z, radius)
	return result:__tointeger()
end
natives.fire.get_number_of_fires_in_range = natives.FIRE.GET_NUMBER_OF_FIRES_IN_RANGE

function natives.FIRE.SET_FLAMMABILITY_MULTIPLIER(--[[float]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'FIRE.SET_FLAMMABILITY_MULTIPLIER' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x8F390AC4155099BA, p0)
end
natives.fire.set_flammability_multiplier = natives.FIRE.SET_FLAMMABILITY_MULTIPLIER

function natives.FIRE.STOP_FIRE_IN_RANGE(--[[float]] x, --[[float]] y, --[[float]] z, --[[float]] radius) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'FIRE.STOP_FIRE_IN_RANGE' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(radius) == "number", "Arg #4 (radius) must be a number.")

	local result = native_call(0x056A8A219B8E829F, x, y, z, radius)
end
natives.fire.stop_fire_in_range = natives.FIRE.STOP_FIRE_IN_RANGE

--[[
Returns TRUE if it found something. FALSE if not.
]]
function natives.FIRE.GET_CLOSEST_FIRE_POS(--[[Vector3*]] outPosition, --[[float]] x, --[[float]] y, --[[float]] z) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'FIRE.GET_CLOSEST_FIRE_POS' due to disabled trusted mode")

	assert(type(outPosition) == "userdata", "Arg #1 (outPosition) must be a userdata.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")

	local result = native_call(0x352A9F6BCF90081F, outPosition, x, y, z)
	return result:__tointeger() ~= 0
end
natives.fire.get_closest_fire_pos = natives.FIRE.GET_CLOSEST_FIRE_POS

--[[
BOOL isAudible = If explosion makes a sound.
BOOL isInvisible = If the explosion is invisible or not.

explosionType: https://alloc8or.re/gta5/doc/enums/eExplosionTag.txt
]]
function natives.FIRE.ADD_EXPLOSION(--[[float]] x, --[[float]] y, --[[float]] z, --[[int]] explosionType, --[[float]] damageScale, --[[BOOL]] isAudible, --[[BOOL]] isInvisible, --[[float]] cameraShake, --[[BOOL]] noDamage) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'FIRE.ADD_EXPLOSION' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(explosionType) == "number", "Arg #4 (explosionType) must be a number.")
	assert(type(damageScale) == "number", "Arg #5 (damageScale) must be a number.")
	assert(type(isAudible) == "boolean", "Arg #6 (isAudible) must be a boolean.")
	assert(type(isInvisible) == "boolean", "Arg #7 (isInvisible) must be a boolean.")
	assert(type(cameraShake) == "number", "Arg #8 (cameraShake) must be a number.")
	assert(type(noDamage) == "boolean", "Arg #9 (noDamage) must be a boolean.")

	local result = native_call(0xE3AD2BDBAEE269AC, x, y, z, explosionType, damageScale, isAudible, isInvisible, cameraShake, noDamage)
end
natives.fire.add_explosion = natives.FIRE.ADD_EXPLOSION

--[[
isAudible: If explosion makes a sound.
isInvisible: If the explosion is invisible or not.
explosionType: See ADD_EXPLOSION.
]]
function natives.FIRE.ADD_OWNED_EXPLOSION(--[[Ped]] ped, --[[float]] x, --[[float]] y, --[[float]] z, --[[int]] explosionType, --[[float]] damageScale, --[[BOOL]] isAudible, --[[BOOL]] isInvisible, --[[float]] cameraShake) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'FIRE.ADD_OWNED_EXPLOSION' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")
	assert(type(explosionType) == "number", "Arg #5 (explosionType) must be a number.")
	assert(type(damageScale) == "number", "Arg #6 (damageScale) must be a number.")
	assert(type(isAudible) == "boolean", "Arg #7 (isAudible) must be a boolean.")
	assert(type(isInvisible) == "boolean", "Arg #8 (isInvisible) must be a boolean.")
	assert(type(cameraShake) == "number", "Arg #9 (cameraShake) must be a number.")

	local result = native_call(0x172AA1B624FA1013, ped, x, y, z, explosionType, damageScale, isAudible, isInvisible, cameraShake)
end
natives.fire.add_owned_explosion = natives.FIRE.ADD_OWNED_EXPLOSION

--[[
isAudible: If explosion makes a sound.
isInvisible: If the explosion is invisible or not.
explosionType: See ADD_EXPLOSION.
]]
function natives.FIRE.ADD_EXPLOSION_WITH_USER_VFX(--[[float]] x, --[[float]] y, --[[float]] z, --[[int]] explosionType, --[[Hash]] explosionFx, --[[float]] damageScale, --[[BOOL]] isAudible, --[[BOOL]] isInvisible, --[[float]] cameraShake) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'FIRE.ADD_EXPLOSION_WITH_USER_VFX' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(explosionType) == "number", "Arg #4 (explosionType) must be a number.")
	assert(type(explosionFx) == "number", "Arg #5 (explosionFx) must be a number.")
	assert(type(damageScale) == "number", "Arg #6 (damageScale) must be a number.")
	assert(type(isAudible) == "boolean", "Arg #7 (isAudible) must be a boolean.")
	assert(type(isInvisible) == "boolean", "Arg #8 (isInvisible) must be a boolean.")
	assert(type(cameraShake) == "number", "Arg #9 (cameraShake) must be a number.")

	local result = native_call(0x36DD3FE58B5E5212, x, y, z, explosionType, explosionFx, damageScale, isAudible, isInvisible, cameraShake)
end
natives.fire.add_explosion_with_user_vfx = natives.FIRE.ADD_EXPLOSION_WITH_USER_VFX

--[[
explosionType: See ADD_EXPLOSION.
]]
function natives.FIRE.IS_EXPLOSION_IN_AREA(--[[int]] explosionType, --[[float]] x1, --[[float]] y1, --[[float]] z1, --[[float]] x2, --[[float]] y2, --[[float]] z2) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'FIRE.IS_EXPLOSION_IN_AREA' due to disabled trusted mode")

	assert(type(explosionType) == "number", "Arg #1 (explosionType) must be a number.")
	assert(type(x1) == "number", "Arg #2 (x1) must be a number.")
	assert(type(y1) == "number", "Arg #3 (y1) must be a number.")
	assert(type(z1) == "number", "Arg #4 (z1) must be a number.")
	assert(type(x2) == "number", "Arg #5 (x2) must be a number.")
	assert(type(y2) == "number", "Arg #6 (y2) must be a number.")
	assert(type(z2) == "number", "Arg #7 (z2) must be a number.")

	local result = native_call(0x2E2EBA0EE7CED0E0, explosionType, x1, y1, z1, x2, y2, z2)
	return result:__tointeger() ~= 0
end
natives.fire.is_explosion_in_area = natives.FIRE.IS_EXPLOSION_IN_AREA

--[[
explosionType: See ADD_EXPLOSION.
]]
function natives.FIRE.IS_EXPLOSION_ACTIVE_IN_AREA(--[[int]] explosionType, --[[float]] x1, --[[float]] y1, --[[float]] z1, --[[float]] x2, --[[float]] y2, --[[float]] z2) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'FIRE.IS_EXPLOSION_ACTIVE_IN_AREA' due to disabled trusted mode")

	assert(type(explosionType) == "number", "Arg #1 (explosionType) must be a number.")
	assert(type(x1) == "number", "Arg #2 (x1) must be a number.")
	assert(type(y1) == "number", "Arg #3 (y1) must be a number.")
	assert(type(z1) == "number", "Arg #4 (z1) must be a number.")
	assert(type(x2) == "number", "Arg #5 (x2) must be a number.")
	assert(type(y2) == "number", "Arg #6 (y2) must be a number.")
	assert(type(z2) == "number", "Arg #7 (z2) must be a number.")

	local result = native_call(0x6070104B699B2EF4, explosionType, x1, y1, z1, x2, y2, z2)
	return result:__tointeger() ~= 0
end
natives.fire.is_explosion_active_in_area = natives.FIRE.IS_EXPLOSION_ACTIVE_IN_AREA

--[[
explosionType: See ADD_EXPLOSION.
]]
function natives.FIRE.IS_EXPLOSION_IN_SPHERE(--[[int]] explosionType, --[[float]] x, --[[float]] y, --[[float]] z, --[[float]] radius) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'FIRE.IS_EXPLOSION_IN_SPHERE' due to disabled trusted mode")

	assert(type(explosionType) == "number", "Arg #1 (explosionType) must be a number.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")
	assert(type(radius) == "number", "Arg #5 (radius) must be a number.")

	local result = native_call(0xAB0F816885B0E483, explosionType, x, y, z, radius)
	return result:__tointeger() ~= 0
end
natives.fire.is_explosion_in_sphere = natives.FIRE.IS_EXPLOSION_IN_SPHERE

--[[
explosionType: See ADD_EXPLOSION.
]]
function natives.FIRE.GET_OWNER_OF_EXPLOSION_IN_SPHERE(--[[int]] explosionType, --[[float]] x, --[[float]] y, --[[float]] z, --[[float]] radius) -- Returns Entity
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'FIRE.GET_OWNER_OF_EXPLOSION_IN_SPHERE' due to disabled trusted mode")

	assert(type(explosionType) == "number", "Arg #1 (explosionType) must be a number.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")
	assert(type(radius) == "number", "Arg #5 (radius) must be a number.")

	local result = native_call(0xB3CD51E3DB86F176, explosionType, x, y, z, radius)
	return result:__tointeger()
end
natives.fire.get_owner_of_explosion_in_sphere = natives.FIRE.GET_OWNER_OF_EXPLOSION_IN_SPHERE

--[[
explosionType: See ADD_EXPLOSION, -1 for any explosion type

]]
function natives.FIRE.IS_EXPLOSION_IN_ANGLED_AREA(--[[int]] explosionType, --[[float]] x1, --[[float]] y1, --[[float]] z1, --[[float]] x2, --[[float]] y2, --[[float]] z2, --[[float]] width) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'FIRE.IS_EXPLOSION_IN_ANGLED_AREA' due to disabled trusted mode")

	assert(type(explosionType) == "number", "Arg #1 (explosionType) must be a number.")
	assert(type(x1) == "number", "Arg #2 (x1) must be a number.")
	assert(type(y1) == "number", "Arg #3 (y1) must be a number.")
	assert(type(z1) == "number", "Arg #4 (z1) must be a number.")
	assert(type(x2) == "number", "Arg #5 (x2) must be a number.")
	assert(type(y2) == "number", "Arg #6 (y2) must be a number.")
	assert(type(z2) == "number", "Arg #7 (z2) must be a number.")
	assert(type(width) == "number", "Arg #8 (width) must be a number.")

	local result = native_call(0xA079A6C51525DC4B, explosionType, x1, y1, z1, x2, y2, z2, width)
	return result:__tointeger() ~= 0
end
natives.fire.is_explosion_in_angled_area = natives.FIRE.IS_EXPLOSION_IN_ANGLED_AREA

--[[
Returns a handle to the first entity within the a circle spawned inside the 2 points from a radius.

explosionType: See ADD_EXPLOSION.
]]
function natives.FIRE.GET_OWNER_OF_EXPLOSION_IN_ANGLED_AREA(--[[int]] explosionType, --[[float]] x1, --[[float]] y1, --[[float]] z1, --[[float]] x2, --[[float]] y2, --[[float]] z2, --[[float]] radius) -- Returns Entity
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'FIRE.GET_OWNER_OF_EXPLOSION_IN_ANGLED_AREA' due to disabled trusted mode")

	assert(type(explosionType) == "number", "Arg #1 (explosionType) must be a number.")
	assert(type(x1) == "number", "Arg #2 (x1) must be a number.")
	assert(type(y1) == "number", "Arg #3 (y1) must be a number.")
	assert(type(z1) == "number", "Arg #4 (z1) must be a number.")
	assert(type(x2) == "number", "Arg #5 (x2) must be a number.")
	assert(type(y2) == "number", "Arg #6 (y2) must be a number.")
	assert(type(z2) == "number", "Arg #7 (z2) must be a number.")
	assert(type(radius) == "number", "Arg #8 (radius) must be a number.")

	local result = native_call(0x14BA4BA137AF6CEC, explosionType, x1, y1, z1, x2, y2, z2, radius)
	return result:__tointeger()
end
natives.fire.get_owner_of_explosion_in_angled_area = natives.FIRE.GET_OWNER_OF_EXPLOSION_IN_ANGLED_AREA


natives.GRAPHICS = {}
natives.graphics = {}

--[[
NOTE: Debugging functions are not present in the retail version of the game.
]]
function natives.GRAPHICS.SET_DEBUG_LINES_AND_SPHERES_DRAWING_ACTIVE(--[[BOOL]] enabled) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_DEBUG_LINES_AND_SPHERES_DRAWING_ACTIVE' due to disabled trusted mode")

	assert(type(enabled) == "boolean", "Arg #1 (enabled) must be a boolean.")

	local result = native_call(0x175B6BFC15CDD0C5, enabled)
end
natives.graphics.set_debug_lines_and_spheres_drawing_active = natives.GRAPHICS.SET_DEBUG_LINES_AND_SPHERES_DRAWING_ACTIVE

function natives.GRAPHICS.DRAW_DEBUG_LINE(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3, --[[Any]] p4, --[[Any]] p5, --[[Any]] p6, --[[Any]] p7, --[[Any]] p8, --[[Any]] p9) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.DRAW_DEBUG_LINE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")
	assert(type(p6) == "number", "Arg #7 (p6) must be a number.")
	assert(type(p7) == "number", "Arg #8 (p7) must be a number.")
	assert(type(p8) == "number", "Arg #9 (p8) must be a number.")
	assert(type(p9) == "number", "Arg #10 (p9) must be a number.")

	local result = native_call(0x7FDFADE676AA3CB0, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9)
end
natives.graphics.draw_debug_line = natives.GRAPHICS.DRAW_DEBUG_LINE

--[[
NOTE: Debugging functions are not present in the retail version of the game.
]]
function natives.GRAPHICS.DRAW_DEBUG_LINE_WITH_TWO_COLOURS(--[[float]] x1, --[[float]] y1, --[[float]] z1, --[[float]] x2, --[[float]] y2, --[[float]] z2, --[[int]] r1, --[[int]] g1, --[[int]] b1, --[[int]] r2, --[[int]] g2, --[[int]] b2, --[[int]] alpha1, --[[int]] alpha2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.DRAW_DEBUG_LINE_WITH_TWO_COLOURS' due to disabled trusted mode")

	assert(type(x1) == "number", "Arg #1 (x1) must be a number.")
	assert(type(y1) == "number", "Arg #2 (y1) must be a number.")
	assert(type(z1) == "number", "Arg #3 (z1) must be a number.")
	assert(type(x2) == "number", "Arg #4 (x2) must be a number.")
	assert(type(y2) == "number", "Arg #5 (y2) must be a number.")
	assert(type(z2) == "number", "Arg #6 (z2) must be a number.")
	assert(type(r1) == "number", "Arg #7 (r1) must be a number.")
	assert(type(g1) == "number", "Arg #8 (g1) must be a number.")
	assert(type(b1) == "number", "Arg #9 (b1) must be a number.")
	assert(type(r2) == "number", "Arg #10 (r2) must be a number.")
	assert(type(g2) == "number", "Arg #11 (g2) must be a number.")
	assert(type(b2) == "number", "Arg #12 (b2) must be a number.")
	assert(type(alpha1) == "number", "Arg #13 (alpha1) must be a number.")
	assert(type(alpha2) == "number", "Arg #14 (alpha2) must be a number.")

	local result = native_call(0xD8B9A8AC5608FF94, x1, y1, z1, x2, y2, z2, r1, g1, b1, r2, g2, b2, alpha1, alpha2)
end
natives.graphics.draw_debug_line_with_two_colours = natives.GRAPHICS.DRAW_DEBUG_LINE_WITH_TWO_COLOURS

--[[
NOTE: Debugging functions are not present in the retail version of the game.
]]
function natives.GRAPHICS.DRAW_DEBUG_SPHERE(--[[float]] x, --[[float]] y, --[[float]] z, --[[float]] radius, --[[int]] red, --[[int]] green, --[[int]] blue, --[[int]] alpha) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.DRAW_DEBUG_SPHERE' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(radius) == "number", "Arg #4 (radius) must be a number.")
	assert(type(red) == "number", "Arg #5 (red) must be a number.")
	assert(type(green) == "number", "Arg #6 (green) must be a number.")
	assert(type(blue) == "number", "Arg #7 (blue) must be a number.")
	assert(type(alpha) == "number", "Arg #8 (alpha) must be a number.")

	local result = native_call(0xAAD68E1AB39DA632, x, y, z, radius, red, green, blue, alpha)
end
natives.graphics.draw_debug_sphere = natives.GRAPHICS.DRAW_DEBUG_SPHERE

function natives.GRAPHICS.DRAW_DEBUG_BOX(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3, --[[Any]] p4, --[[Any]] p5, --[[Any]] p6, --[[Any]] p7, --[[Any]] p8, --[[Any]] p9) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.DRAW_DEBUG_BOX' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")
	assert(type(p6) == "number", "Arg #7 (p6) must be a number.")
	assert(type(p7) == "number", "Arg #8 (p7) must be a number.")
	assert(type(p8) == "number", "Arg #9 (p8) must be a number.")
	assert(type(p9) == "number", "Arg #10 (p9) must be a number.")

	local result = native_call(0x083A2CA4F2E573BD, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9)
end
natives.graphics.draw_debug_box = natives.GRAPHICS.DRAW_DEBUG_BOX

--[[
NOTE: Debugging functions are not present in the retail version of the game.
]]
function natives.GRAPHICS.DRAW_DEBUG_CROSS(--[[float]] x, --[[float]] y, --[[float]] z, --[[float]] size, --[[int]] red, --[[int]] green, --[[int]] blue, --[[int]] alpha) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.DRAW_DEBUG_CROSS' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(size) == "number", "Arg #4 (size) must be a number.")
	assert(type(red) == "number", "Arg #5 (red) must be a number.")
	assert(type(green) == "number", "Arg #6 (green) must be a number.")
	assert(type(blue) == "number", "Arg #7 (blue) must be a number.")
	assert(type(alpha) == "number", "Arg #8 (alpha) must be a number.")

	local result = native_call(0x73B1189623049839, x, y, z, size, red, green, blue, alpha)
end
natives.graphics.draw_debug_cross = natives.GRAPHICS.DRAW_DEBUG_CROSS

--[[
NOTE: Debugging functions are not present in the retail version of the game.
]]
function natives.GRAPHICS.DRAW_DEBUG_TEXT(--[[const char*]] text, --[[float]] x, --[[float]] y, --[[float]] z, --[[int]] red, --[[int]] green, --[[int]] blue, --[[int]] alpha) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.DRAW_DEBUG_TEXT' due to disabled trusted mode")

	assert(type(text) == "string", "Arg #1 (text) must be a string.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")
	assert(type(red) == "number", "Arg #5 (red) must be a number.")
	assert(type(green) == "number", "Arg #6 (green) must be a number.")
	assert(type(blue) == "number", "Arg #7 (blue) must be a number.")
	assert(type(alpha) == "number", "Arg #8 (alpha) must be a number.")

	local result = native_call(0x3903E216620488E8, text, x, y, z, red, green, blue, alpha)
end
natives.graphics.draw_debug_text = natives.GRAPHICS.DRAW_DEBUG_TEXT

--[[
NOTE: Debugging functions are not present in the retail version of the game.
]]
function natives.GRAPHICS.DRAW_DEBUG_TEXT_2D(--[[const char*]] text, --[[float]] x, --[[float]] y, --[[float]] z, --[[int]] red, --[[int]] green, --[[int]] blue, --[[int]] alpha) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.DRAW_DEBUG_TEXT_2D' due to disabled trusted mode")

	assert(type(text) == "string", "Arg #1 (text) must be a string.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")
	assert(type(red) == "number", "Arg #5 (red) must be a number.")
	assert(type(green) == "number", "Arg #6 (green) must be a number.")
	assert(type(blue) == "number", "Arg #7 (blue) must be a number.")
	assert(type(alpha) == "number", "Arg #8 (alpha) must be a number.")

	local result = native_call(0xA3BB2E9555C05A8F, text, x, y, z, red, green, blue, alpha)
end
natives.graphics.draw_debug_text_2d = natives.GRAPHICS.DRAW_DEBUG_TEXT_2D

--[[
Draws a depth-tested line from one point to another.
----------------
x1, y1, z1 : Coordinates for the first point
x2, y2, z2 : Coordinates for the second point
r, g, b, alpha : Color with RGBA-Values
I recommend using a predefined function to call this.
[VB.NET]
Public Sub DrawLine(from As Vector3, [to] As Vector3, col As Color)
    [Function].Call(Hash.DRAW_LINE, from.X, from.Y, from.Z, [to].X, [to].Y, [to].Z, col.R, col.G, col.B, col.A)
End Sub

[C#]
public void DrawLine(Vector3 from, Vector3 to, Color col)
{
    Function.Call(Hash.DRAW_LINE, from.X, from.Y, from.Z, to.X, to.Y, to.Z, col.R, col.G, col.B, col.A);
}
]]
function natives.GRAPHICS.DRAW_LINE(--[[float]] x1, --[[float]] y1, --[[float]] z1, --[[float]] x2, --[[float]] y2, --[[float]] z2, --[[int]] red, --[[int]] green, --[[int]] blue, --[[int]] alpha) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.DRAW_LINE' due to disabled trusted mode")

	assert(type(x1) == "number", "Arg #1 (x1) must be a number.")
	assert(type(y1) == "number", "Arg #2 (y1) must be a number.")
	assert(type(z1) == "number", "Arg #3 (z1) must be a number.")
	assert(type(x2) == "number", "Arg #4 (x2) must be a number.")
	assert(type(y2) == "number", "Arg #5 (y2) must be a number.")
	assert(type(z2) == "number", "Arg #6 (z2) must be a number.")
	assert(type(red) == "number", "Arg #7 (red) must be a number.")
	assert(type(green) == "number", "Arg #8 (green) must be a number.")
	assert(type(blue) == "number", "Arg #9 (blue) must be a number.")
	assert(type(alpha) == "number", "Arg #10 (alpha) must be a number.")

	local result = native_call(0x6B7256074AE34680, x1, y1, z1, x2, y2, z2, red, green, blue, alpha)
end
natives.graphics.draw_line = natives.GRAPHICS.DRAW_LINE

--[[
x/y/z - Location of a vertex (in world coords), presumably.
----------------
x1, y1, z1     : Coordinates for the first point
x2, y2, z2     : Coordinates for the second point
x3, y3, z3     : Coordinates for the third point
r, g, b, alpha : Color with RGBA-Values

Keep in mind that only one side of the drawn triangle is visible: It's the side, in which the vector-product of the vectors heads to: (b-a)x(c-a) Or (b-a)x(c-b).
But be aware: The function seems to work somehow differently. I have trouble having them drawn in rotated orientation. Try it yourself and if you somehow succeed, please edit this and post your solution.
I recommend using a predefined function to call this.
[VB.NET]
Public Sub DrawPoly(a As Vector3, b As Vector3, c As Vector3, col As Color)
    [Function].Call(Hash.DRAW_POLY, a.X, a.Y, a.Z, b.X, b.Y, b.Z, c.X, c.Y, c.Z, col.R, col.G, col.B, col.A)
End Sub

[C#]
public void DrawPoly(Vector3 a, Vector3 b, Vector3 c, Color col)
{
    Function.Call(Hash.DRAW_POLY, a.X, a.Y, a.Z, b.X, b.Y, b.Z, c.X, c.Y, c.Z, col.R, col.G, col.B, col.A);
}
BTW: Intersecting triangles are not supported: They overlap in the order they were called.
]]
function natives.GRAPHICS.DRAW_POLY(--[[float]] x1, --[[float]] y1, --[[float]] z1, --[[float]] x2, --[[float]] y2, --[[float]] z2, --[[float]] x3, --[[float]] y3, --[[float]] z3, --[[int]] red, --[[int]] green, --[[int]] blue, --[[int]] alpha) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.DRAW_POLY' due to disabled trusted mode")

	assert(type(x1) == "number", "Arg #1 (x1) must be a number.")
	assert(type(y1) == "number", "Arg #2 (y1) must be a number.")
	assert(type(z1) == "number", "Arg #3 (z1) must be a number.")
	assert(type(x2) == "number", "Arg #4 (x2) must be a number.")
	assert(type(y2) == "number", "Arg #5 (y2) must be a number.")
	assert(type(z2) == "number", "Arg #6 (z2) must be a number.")
	assert(type(x3) == "number", "Arg #7 (x3) must be a number.")
	assert(type(y3) == "number", "Arg #8 (y3) must be a number.")
	assert(type(z3) == "number", "Arg #9 (z3) must be a number.")
	assert(type(red) == "number", "Arg #10 (red) must be a number.")
	assert(type(green) == "number", "Arg #11 (green) must be a number.")
	assert(type(blue) == "number", "Arg #12 (blue) must be a number.")
	assert(type(alpha) == "number", "Arg #13 (alpha) must be a number.")

	local result = native_call(0xAC26716048436851, x1, y1, z1, x2, y2, z2, x3, y3, z3, red, green, blue, alpha)
end
natives.graphics.draw_poly = natives.GRAPHICS.DRAW_POLY

--[[
Used for drawling Deadline trailing lights, see deadline.ytd

p15 through p23 are values that appear to be related to illiumation, scaling, and rotation; more testing required.
For UVW mapping (u,v,w parameters), reference your favourite internet resource for more details.
]]
function natives.GRAPHICS.DRAW_TEXTURED_POLY(--[[float]] x1, --[[float]] y1, --[[float]] z1, --[[float]] x2, --[[float]] y2, --[[float]] z2, --[[float]] x3, --[[float]] y3, --[[float]] z3, --[[int]] red, --[[int]] green, --[[int]] blue, --[[int]] alpha, --[[const char*]] textureDict, --[[const char*]] textureName, --[[float]] u1, --[[float]] v1, --[[float]] w1, --[[float]] u2, --[[float]] v2, --[[float]] w2, --[[float]] u3, --[[float]] v3, --[[float]] w3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.DRAW_TEXTURED_POLY' due to disabled trusted mode")

	assert(type(x1) == "number", "Arg #1 (x1) must be a number.")
	assert(type(y1) == "number", "Arg #2 (y1) must be a number.")
	assert(type(z1) == "number", "Arg #3 (z1) must be a number.")
	assert(type(x2) == "number", "Arg #4 (x2) must be a number.")
	assert(type(y2) == "number", "Arg #5 (y2) must be a number.")
	assert(type(z2) == "number", "Arg #6 (z2) must be a number.")
	assert(type(x3) == "number", "Arg #7 (x3) must be a number.")
	assert(type(y3) == "number", "Arg #8 (y3) must be a number.")
	assert(type(z3) == "number", "Arg #9 (z3) must be a number.")
	assert(type(red) == "number", "Arg #10 (red) must be a number.")
	assert(type(green) == "number", "Arg #11 (green) must be a number.")
	assert(type(blue) == "number", "Arg #12 (blue) must be a number.")
	assert(type(alpha) == "number", "Arg #13 (alpha) must be a number.")
	assert(type(textureDict) == "string", "Arg #14 (textureDict) must be a string.")
	assert(type(textureName) == "string", "Arg #15 (textureName) must be a string.")
	assert(type(u1) == "number", "Arg #16 (u1) must be a number.")
	assert(type(v1) == "number", "Arg #17 (v1) must be a number.")
	assert(type(w1) == "number", "Arg #18 (w1) must be a number.")
	assert(type(u2) == "number", "Arg #19 (u2) must be a number.")
	assert(type(v2) == "number", "Arg #20 (v2) must be a number.")
	assert(type(w2) == "number", "Arg #21 (w2) must be a number.")
	assert(type(u3) == "number", "Arg #22 (u3) must be a number.")
	assert(type(v3) == "number", "Arg #23 (v3) must be a number.")
	assert(type(w3) == "number", "Arg #24 (w3) must be a number.")

	local result = native_call(0x29280002282F1928, x1, y1, z1, x2, y2, z2, x3, y3, z3, red, green, blue, alpha, textureDict, textureName, u1, v1, w1, u2, v2, w2, u3, v3, w3)
end
natives.graphics.draw_textured_poly = natives.GRAPHICS.DRAW_TEXTURED_POLY

--[[
Used for drawling Deadline trailing lights, see deadline.ytd

Each vertex has its own colour that is blended/illuminated on the texture. Additionally, the R, G, and B components are floats that are int-casted internally.
For UVW mapping (u,v,w parameters), reference your favourite internet resource for more details.
]]
function natives.GRAPHICS.DRAW_TEXTURED_POLY_WITH_THREE_COLOURS(--[[float]] x1, --[[float]] y1, --[[float]] z1, --[[float]] x2, --[[float]] y2, --[[float]] z2, --[[float]] x3, --[[float]] y3, --[[float]] z3, --[[float]] red1, --[[float]] green1, --[[float]] blue1, --[[int]] alpha1, --[[float]] red2, --[[float]] green2, --[[float]] blue2, --[[int]] alpha2, --[[float]] red3, --[[float]] green3, --[[float]] blue3, --[[int]] alpha3, --[[const char*]] textureDict, --[[const char*]] textureName, --[[float]] u1, --[[float]] v1, --[[float]] w1, --[[float]] u2, --[[float]] v2, --[[float]] w2, --[[float]] u3, --[[float]] v3, --[[float]] w3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.DRAW_TEXTURED_POLY_WITH_THREE_COLOURS' due to disabled trusted mode")

	assert(type(x1) == "number", "Arg #1 (x1) must be a number.")
	assert(type(y1) == "number", "Arg #2 (y1) must be a number.")
	assert(type(z1) == "number", "Arg #3 (z1) must be a number.")
	assert(type(x2) == "number", "Arg #4 (x2) must be a number.")
	assert(type(y2) == "number", "Arg #5 (y2) must be a number.")
	assert(type(z2) == "number", "Arg #6 (z2) must be a number.")
	assert(type(x3) == "number", "Arg #7 (x3) must be a number.")
	assert(type(y3) == "number", "Arg #8 (y3) must be a number.")
	assert(type(z3) == "number", "Arg #9 (z3) must be a number.")
	assert(type(red1) == "number", "Arg #10 (red1) must be a number.")
	assert(type(green1) == "number", "Arg #11 (green1) must be a number.")
	assert(type(blue1) == "number", "Arg #12 (blue1) must be a number.")
	assert(type(alpha1) == "number", "Arg #13 (alpha1) must be a number.")
	assert(type(red2) == "number", "Arg #14 (red2) must be a number.")
	assert(type(green2) == "number", "Arg #15 (green2) must be a number.")
	assert(type(blue2) == "number", "Arg #16 (blue2) must be a number.")
	assert(type(alpha2) == "number", "Arg #17 (alpha2) must be a number.")
	assert(type(red3) == "number", "Arg #18 (red3) must be a number.")
	assert(type(green3) == "number", "Arg #19 (green3) must be a number.")
	assert(type(blue3) == "number", "Arg #20 (blue3) must be a number.")
	assert(type(alpha3) == "number", "Arg #21 (alpha3) must be a number.")
	assert(type(textureDict) == "string", "Arg #22 (textureDict) must be a string.")
	assert(type(textureName) == "string", "Arg #23 (textureName) must be a string.")
	assert(type(u1) == "number", "Arg #24 (u1) must be a number.")
	assert(type(v1) == "number", "Arg #25 (v1) must be a number.")
	assert(type(w1) == "number", "Arg #26 (w1) must be a number.")
	assert(type(u2) == "number", "Arg #27 (u2) must be a number.")
	assert(type(v2) == "number", "Arg #28 (v2) must be a number.")
	assert(type(w2) == "number", "Arg #29 (w2) must be a number.")
	assert(type(u3) == "number", "Arg #30 (u3) must be a number.")
	assert(type(v3) == "number", "Arg #31 (v3) must be a number.")
	assert(type(w3) == "number", "Arg #32 (w3) must be a number.")

	local result = native_call(0x736D7AA1B750856B, x1, y1, z1, x2, y2, z2, x3, y3, z3, red1, green1, blue1, alpha1, red2, green2, blue2, alpha2, red3, green3, blue3, alpha3, textureDict, textureName, u1, v1, w1, u2, v2, w2, u3, v3, w3)
end
natives.graphics.draw_textured_poly_with_three_colours = natives.GRAPHICS.DRAW_TEXTURED_POLY_WITH_THREE_COLOURS

--[[
x,y,z = start pos
x2,y2,z2 = end pos

Draw's a 3D Box between the two x,y,z coords.
--------------
Keep in mind that the edges of the box do only align to the worlds base-vectors. Therefore something like rotation cannot be applied. That means this function is pretty much useless, unless you want a static unicolor box somewhere.
I recommend using a predefined function to call this.
[VB.NET]
Public Sub DrawBox(a As Vector3, b As Vector3, col As Color)
    [Function].Call(Hash.DRAW_BOX,a.X, a.Y, a.Z,b.X, b.Y, b.Z,col.R, col.G, col.B, col.A)
End Sub

[C#]
public void DrawBox(Vector3 a, Vector3 b, Color col)
{
    Function.Call(Hash.DRAW_BOX,a.X, a.Y, a.Z,b.X, b.Y, b.Z,col.R, col.G, col.B, col.A);
}
]]
function natives.GRAPHICS.DRAW_BOX(--[[float]] x1, --[[float]] y1, --[[float]] z1, --[[float]] x2, --[[float]] y2, --[[float]] z2, --[[int]] red, --[[int]] green, --[[int]] blue, --[[int]] alpha) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.DRAW_BOX' due to disabled trusted mode")

	assert(type(x1) == "number", "Arg #1 (x1) must be a number.")
	assert(type(y1) == "number", "Arg #2 (y1) must be a number.")
	assert(type(z1) == "number", "Arg #3 (z1) must be a number.")
	assert(type(x2) == "number", "Arg #4 (x2) must be a number.")
	assert(type(y2) == "number", "Arg #5 (y2) must be a number.")
	assert(type(z2) == "number", "Arg #6 (z2) must be a number.")
	assert(type(red) == "number", "Arg #7 (red) must be a number.")
	assert(type(green) == "number", "Arg #8 (green) must be a number.")
	assert(type(blue) == "number", "Arg #9 (blue) must be a number.")
	assert(type(alpha) == "number", "Arg #10 (alpha) must be a number.")

	local result = native_call(0xD3A9971CADAC7252, x1, y1, z1, x2, y2, z2, red, green, blue, alpha)
end
natives.graphics.draw_box = natives.GRAPHICS.DRAW_BOX

function natives.GRAPHICS.SET_BACKFACECULLING(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_BACKFACECULLING' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x23BA6B0C2AD7B0D3, toggle)
end
natives.graphics.set_backfaceculling = natives.GRAPHICS.SET_BACKFACECULLING

function natives.GRAPHICS.SET_DEPTHWRITING(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_DEPTHWRITING' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xC5C8F970D4EDFF71, p0)
end
natives.graphics.set_depthwriting = natives.GRAPHICS.SET_DEPTHWRITING

function natives.GRAPHICS.BEGIN_TAKE_MISSION_CREATOR_PHOTO() -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.BEGIN_TAKE_MISSION_CREATOR_PHOTO' due to disabled trusted mode")

	local result = native_call(0x1DD2139A9A20DCE8)
	return result:__tointeger()
end
natives.graphics.begin_take_mission_creator_photo = natives.GRAPHICS.BEGIN_TAKE_MISSION_CREATOR_PHOTO

function natives.GRAPHICS.GET_STATUS_OF_TAKE_MISSION_CREATOR_PHOTO() -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.GET_STATUS_OF_TAKE_MISSION_CREATOR_PHOTO' due to disabled trusted mode")

	local result = native_call(0x90A78ECAA4E78453)
	return result:__tointeger()
end
natives.graphics.get_status_of_take_mission_creator_photo = natives.GRAPHICS.GET_STATUS_OF_TAKE_MISSION_CREATOR_PHOTO

function natives.GRAPHICS.FREE_MEMORY_FOR_MISSION_CREATOR_PHOTO() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.FREE_MEMORY_FOR_MISSION_CREATOR_PHOTO' due to disabled trusted mode")

	local result = native_call(0x0A46AF8A78DC5E0A)
end
natives.graphics.free_memory_for_mission_creator_photo = natives.GRAPHICS.FREE_MEMORY_FOR_MISSION_CREATOR_PHOTO

function natives.GRAPHICS.LOAD_MISSION_CREATOR_PHOTO(--[[Any*]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.LOAD_MISSION_CREATOR_PHOTO' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x4862437A486F91B0, p0, p1, p2, p3)
	return result:__tointeger() ~= 0
end
natives.graphics.load_mission_creator_photo = natives.GRAPHICS.LOAD_MISSION_CREATOR_PHOTO

function natives.GRAPHICS.GET_STATUS_OF_LOAD_MISSION_CREATOR_PHOTO(--[[Any*]] p0) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.GET_STATUS_OF_LOAD_MISSION_CREATOR_PHOTO' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")

	local result = native_call(0x1670F8D05056F257, p0)
	return result:__tointeger()
end
natives.graphics.get_status_of_load_mission_creator_photo = natives.GRAPHICS.GET_STATUS_OF_LOAD_MISSION_CREATOR_PHOTO

function natives.GRAPHICS.BEGIN_CREATE_MISSION_CREATOR_PHOTO_PREVIEW() -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.BEGIN_CREATE_MISSION_CREATOR_PHOTO_PREVIEW' due to disabled trusted mode")

	local result = native_call(0x7FA5D82B8F58EC06)
	return result:__tointeger()
end
natives.graphics.begin_create_mission_creator_photo_preview = natives.GRAPHICS.BEGIN_CREATE_MISSION_CREATOR_PHOTO_PREVIEW

function natives.GRAPHICS.GET_STATUS_OF_CREATE_MISSION_CREATOR_PHOTO_PREVIEW() -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.GET_STATUS_OF_CREATE_MISSION_CREATOR_PHOTO_PREVIEW' due to disabled trusted mode")

	local result = native_call(0x5B0316762AFD4A64)
	return result:__tointeger()
end
natives.graphics.get_status_of_create_mission_creator_photo_preview = natives.GRAPHICS.GET_STATUS_OF_CREATE_MISSION_CREATOR_PHOTO_PREVIEW

function natives.GRAPHICS.FREE_MEMORY_FOR_MISSION_CREATOR_PHOTO_PREVIEW() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.FREE_MEMORY_FOR_MISSION_CREATOR_PHOTO_PREVIEW' due to disabled trusted mode")

	local result = native_call(0x346EF3ECAAAB149E)
end
natives.graphics.free_memory_for_mission_creator_photo_preview = natives.GRAPHICS.FREE_MEMORY_FOR_MISSION_CREATOR_PHOTO_PREVIEW

function natives.GRAPHICS.BEGIN_TAKE_HIGH_QUALITY_PHOTO() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.BEGIN_TAKE_HIGH_QUALITY_PHOTO' due to disabled trusted mode")

	local result = native_call(0xA67C35C56EB1BD9D)
	return result:__tointeger() ~= 0
end
natives.graphics.begin_take_high_quality_photo = natives.GRAPHICS.BEGIN_TAKE_HIGH_QUALITY_PHOTO

function natives.GRAPHICS.GET_STATUS_OF_TAKE_HIGH_QUALITY_PHOTO() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.GET_STATUS_OF_TAKE_HIGH_QUALITY_PHOTO' due to disabled trusted mode")

	local result = native_call(0x0D6CA79EEEBD8CA3)
	return result:__tointeger()
end
natives.graphics.get_status_of_take_high_quality_photo = natives.GRAPHICS.GET_STATUS_OF_TAKE_HIGH_QUALITY_PHOTO

function natives.GRAPHICS.FREE_MEMORY_FOR_HIGH_QUALITY_PHOTO() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.FREE_MEMORY_FOR_HIGH_QUALITY_PHOTO' due to disabled trusted mode")

	local result = native_call(0xD801CC02177FA3F1)
end
natives.graphics.free_memory_for_high_quality_photo = natives.GRAPHICS.FREE_MEMORY_FOR_HIGH_QUALITY_PHOTO

function natives.GRAPHICS.SET_TAKEN_PHOTO_IS_MUGSHOT(--[[BOOL]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_TAKEN_PHOTO_IS_MUGSHOT' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0x1BBC135A4D25EDDE, p0)
end
natives.graphics.set_taken_photo_is_mugshot = natives.GRAPHICS.SET_TAKEN_PHOTO_IS_MUGSHOT

function natives.GRAPHICS.SET_ARENA_THEME_AND_VARIATION_FOR_TAKEN_PHOTO(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_ARENA_THEME_AND_VARIATION_FOR_TAKEN_PHOTO' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xF3F776ADA161E47D, p0, p1)
end
natives.graphics.set_arena_theme_and_variation_for_taken_photo = natives.GRAPHICS.SET_ARENA_THEME_AND_VARIATION_FOR_TAKEN_PHOTO

function natives.GRAPHICS.SET_ON_ISLAND_X_FOR_TAKEN_PHOTO(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_ON_ISLAND_X_FOR_TAKEN_PHOTO' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xADD6627C4D325458, p0)
end
natives.graphics.set_on_island_x_for_taken_photo = natives.GRAPHICS.SET_ON_ISLAND_X_FOR_TAKEN_PHOTO

--[[
1 match in 1 script. cellphone_controller.
p0 is -1 in scripts.
]]
function natives.GRAPHICS.SAVE_HIGH_QUALITY_PHOTO(--[[int]] unused) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SAVE_HIGH_QUALITY_PHOTO' due to disabled trusted mode")

	assert(type(unused) == "number", "Arg #1 (unused) must be a number.")

	local result = native_call(0x3DEC726C25A11BAC, unused)
	return result:__tointeger() ~= 0
end
natives.graphics.save_high_quality_photo = natives.GRAPHICS.SAVE_HIGH_QUALITY_PHOTO

function natives.GRAPHICS.GET_STATUS_OF_SAVE_HIGH_QUALITY_PHOTO() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.GET_STATUS_OF_SAVE_HIGH_QUALITY_PHOTO' due to disabled trusted mode")

	local result = native_call(0x0C0C4E81E1AC60A0)
	return result:__tointeger()
end
natives.graphics.get_status_of_save_high_quality_photo = natives.GRAPHICS.GET_STATUS_OF_SAVE_HIGH_QUALITY_PHOTO

function natives.GRAPHICS.BEGIN_CREATE_LOW_QUALITY_COPY_OF_PHOTO(--[[Any]] p0) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.BEGIN_CREATE_LOW_QUALITY_COPY_OF_PHOTO' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x759650634F07B6B4, p0)
	return result:__tointeger() ~= 0
end
natives.graphics.begin_create_low_quality_copy_of_photo = natives.GRAPHICS.BEGIN_CREATE_LOW_QUALITY_COPY_OF_PHOTO

function natives.GRAPHICS.GET_STATUS_OF_CREATE_LOW_QUALITY_COPY_OF_PHOTO(--[[int]] p0) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.GET_STATUS_OF_CREATE_LOW_QUALITY_COPY_OF_PHOTO' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xCB82A0BF0E3E3265, p0)
	return result:__tointeger()
end
natives.graphics.get_status_of_create_low_quality_copy_of_photo = natives.GRAPHICS.GET_STATUS_OF_CREATE_LOW_QUALITY_COPY_OF_PHOTO

function natives.GRAPHICS.FREE_MEMORY_FOR_LOW_QUALITY_PHOTO() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.FREE_MEMORY_FOR_LOW_QUALITY_PHOTO' due to disabled trusted mode")

	local result = native_call(0x6A12D88881435DCA)
end
natives.graphics.free_memory_for_low_quality_photo = natives.GRAPHICS.FREE_MEMORY_FOR_LOW_QUALITY_PHOTO

function natives.GRAPHICS.DRAW_LOW_QUALITY_PHOTO_TO_PHONE(--[[BOOL]] p0, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.DRAW_LOW_QUALITY_PHOTO_TO_PHONE' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0x1072F115DAB0717E, p0, p1)
end
natives.graphics.draw_low_quality_photo_to_phone = natives.GRAPHICS.DRAW_LOW_QUALITY_PHOTO_TO_PHONE

--[[
This function is hard-coded to always return 0.
]]
function natives.GRAPHICS.GET_MAXIMUM_NUMBER_OF_PHOTOS() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.GET_MAXIMUM_NUMBER_OF_PHOTOS' due to disabled trusted mode")

	local result = native_call(0x34D23450F028B0BF)
	return result:__tointeger()
end
natives.graphics.get_maximum_number_of_photos = natives.GRAPHICS.GET_MAXIMUM_NUMBER_OF_PHOTOS

--[[
This function is hard-coded to always return 96.
]]
function natives.GRAPHICS.GET_MAXIMUM_NUMBER_OF_CLOUD_PHOTOS() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.GET_MAXIMUM_NUMBER_OF_CLOUD_PHOTOS' due to disabled trusted mode")

	local result = native_call(0xDC54A7AF8B3A14EF)
	return result:__tointeger()
end
natives.graphics.get_maximum_number_of_cloud_photos = natives.GRAPHICS.GET_MAXIMUM_NUMBER_OF_CLOUD_PHOTOS

function natives.GRAPHICS.GET_CURRENT_NUMBER_OF_CLOUD_PHOTOS() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.GET_CURRENT_NUMBER_OF_CLOUD_PHOTOS' due to disabled trusted mode")

	local result = native_call(0x473151EBC762C6DA)
	return result:__tointeger()
end
natives.graphics.get_current_number_of_cloud_photos = natives.GRAPHICS.GET_CURRENT_NUMBER_OF_CLOUD_PHOTOS

--[[
2 matches across 2 scripts. Only showed in appcamera & appmedia. Both were 0.
]]
function natives.GRAPHICS.QUEUE_OPERATION_TO_CREATE_SORTED_LIST_OF_PHOTOS(--[[Any]] p0) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.QUEUE_OPERATION_TO_CREATE_SORTED_LIST_OF_PHOTOS' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x2A893980E96B659A, p0)
	return result:__tointeger()
end
natives.graphics.queue_operation_to_create_sorted_list_of_photos = natives.GRAPHICS.QUEUE_OPERATION_TO_CREATE_SORTED_LIST_OF_PHOTOS

--[[
3 matches across 3 scripts. First 2 were 0, 3rd was 1. Possibly a bool.
appcamera, appmedia, and cellphone_controller.
]]
function natives.GRAPHICS.GET_STATUS_OF_SORTED_LIST_OPERATION(--[[Any]] p0) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.GET_STATUS_OF_SORTED_LIST_OPERATION' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xF5BED327CEA362B1, p0)
	return result:__tointeger()
end
natives.graphics.get_status_of_sorted_list_operation = natives.GRAPHICS.GET_STATUS_OF_SORTED_LIST_OPERATION

function natives.GRAPHICS.CLEAR_STATUS_OF_SORTED_LIST_OPERATION() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.CLEAR_STATUS_OF_SORTED_LIST_OPERATION' due to disabled trusted mode")

	local result = native_call(0x4AF92ACD3141D96C)
end
natives.graphics.clear_status_of_sorted_list_operation = natives.GRAPHICS.CLEAR_STATUS_OF_SORTED_LIST_OPERATION

--[[
This function is hard-coded to always return 0.
]]
function natives.GRAPHICS.DOES_THIS_PHOTO_SLOT_CONTAIN_A_VALID_PHOTO(--[[Any]] p0) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.DOES_THIS_PHOTO_SLOT_CONTAIN_A_VALID_PHOTO' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xE791DF1F73ED2C8B, p0)
	return result:__tointeger()
end
natives.graphics.does_this_photo_slot_contain_a_valid_photo = natives.GRAPHICS.DOES_THIS_PHOTO_SLOT_CONTAIN_A_VALID_PHOTO

--[[
This function is hard-coded to always return 0.
]]
function natives.GRAPHICS.LOAD_HIGH_QUALITY_PHOTO(--[[Any]] p0) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.LOAD_HIGH_QUALITY_PHOTO' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xEC72C258667BE5EA, p0)
	return result:__tointeger()
end
natives.graphics.load_high_quality_photo = natives.GRAPHICS.LOAD_HIGH_QUALITY_PHOTO

--[[
Hardcoded to always return 2.
]]
function natives.GRAPHICS.GET_LOAD_HIGH_QUALITY_PHOTO_STATUS(--[[int]] p0) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.GET_LOAD_HIGH_QUALITY_PHOTO_STATUS' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x40AFB081F8ADD4EE, p0)
	return result:__tointeger()
end
natives.graphics.get_load_high_quality_photo_status = natives.GRAPHICS.GET_LOAD_HIGH_QUALITY_PHOTO_STATUS

function natives.GRAPHICS.DRAW_LIGHT_WITH_RANGEEX(--[[float]] x, --[[float]] y, --[[float]] z, --[[int]] r, --[[int]] g, --[[int]] b, --[[float]] range, --[[float]] intensity, --[[float]] shadow) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.DRAW_LIGHT_WITH_RANGEEX' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(r) == "number", "Arg #4 (r) must be a number.")
	assert(type(g) == "number", "Arg #5 (g) must be a number.")
	assert(type(b) == "number", "Arg #6 (b) must be a number.")
	assert(type(range) == "number", "Arg #7 (range) must be a number.")
	assert(type(intensity) == "number", "Arg #8 (intensity) must be a number.")
	assert(type(shadow) == "number", "Arg #9 (shadow) must be a number.")

	local result = native_call(0xF49E9A9716A04595, x, y, z, r, g, b, range, intensity, shadow)
end
natives.graphics.draw_light_with_rangeex = natives.GRAPHICS.DRAW_LIGHT_WITH_RANGEEX

function natives.GRAPHICS.DRAW_LIGHT_WITH_RANGE(--[[float]] posX, --[[float]] posY, --[[float]] posZ, --[[int]] colorR, --[[int]] colorG, --[[int]] colorB, --[[float]] range, --[[float]] intensity) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.DRAW_LIGHT_WITH_RANGE' due to disabled trusted mode")

	assert(type(posX) == "number", "Arg #1 (posX) must be a number.")
	assert(type(posY) == "number", "Arg #2 (posY) must be a number.")
	assert(type(posZ) == "number", "Arg #3 (posZ) must be a number.")
	assert(type(colorR) == "number", "Arg #4 (colorR) must be a number.")
	assert(type(colorG) == "number", "Arg #5 (colorG) must be a number.")
	assert(type(colorB) == "number", "Arg #6 (colorB) must be a number.")
	assert(type(range) == "number", "Arg #7 (range) must be a number.")
	assert(type(intensity) == "number", "Arg #8 (intensity) must be a number.")

	local result = native_call(0xF2A1B2771A01DBD4, posX, posY, posZ, colorR, colorG, colorB, range, intensity)
end
natives.graphics.draw_light_with_range = natives.GRAPHICS.DRAW_LIGHT_WITH_RANGE

--[[
Parameters:
* pos - coordinate where the spotlight is located
* dir - the direction vector the spotlight should aim at from its current position
* r,g,b - color of the spotlight
* distance - the maximum distance the light can reach
* brightness - the brightness of the light
* roundness - "smoothness" of the circle edge
* radius - the radius size of the spotlight
* falloff - the falloff size of the light's edge (example: www.i.imgur.com/DemAWeO.jpg)

Example in C# (spotlight aims at the closest vehicle):
Vector3 myPos = Game.Player.Character.Position;
Vehicle nearest = World.GetClosestVehicle(myPos , 1000f);
Vector3 destinationCoords = nearest.Position;
Vector3 dirVector = destinationCoords - myPos;
dirVector.Normalize();
Function.Call(Hash.DRAW_SPOT_LIGHT, pos.X, pos.Y, pos.Z, dirVector.X, dirVector.Y, dirVector.Z, 255, 255, 255, 100.0f, 1f, 0.0f, 13.0f, 1f);
]]
function natives.GRAPHICS.DRAW_SPOT_LIGHT(--[[float]] posX, --[[float]] posY, --[[float]] posZ, --[[float]] dirX, --[[float]] dirY, --[[float]] dirZ, --[[int]] colorR, --[[int]] colorG, --[[int]] colorB, --[[float]] distance, --[[float]] brightness, --[[float]] hardness, --[[float]] radius, --[[float]] falloff) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.DRAW_SPOT_LIGHT' due to disabled trusted mode")

	assert(type(posX) == "number", "Arg #1 (posX) must be a number.")
	assert(type(posY) == "number", "Arg #2 (posY) must be a number.")
	assert(type(posZ) == "number", "Arg #3 (posZ) must be a number.")
	assert(type(dirX) == "number", "Arg #4 (dirX) must be a number.")
	assert(type(dirY) == "number", "Arg #5 (dirY) must be a number.")
	assert(type(dirZ) == "number", "Arg #6 (dirZ) must be a number.")
	assert(type(colorR) == "number", "Arg #7 (colorR) must be a number.")
	assert(type(colorG) == "number", "Arg #8 (colorG) must be a number.")
	assert(type(colorB) == "number", "Arg #9 (colorB) must be a number.")
	assert(type(distance) == "number", "Arg #10 (distance) must be a number.")
	assert(type(brightness) == "number", "Arg #11 (brightness) must be a number.")
	assert(type(hardness) == "number", "Arg #12 (hardness) must be a number.")
	assert(type(radius) == "number", "Arg #13 (radius) must be a number.")
	assert(type(falloff) == "number", "Arg #14 (falloff) must be a number.")

	local result = native_call(0xD0F64B265C8C8B33, posX, posY, posZ, dirX, dirY, dirZ, colorR, colorG, colorB, distance, brightness, hardness, radius, falloff)
end
natives.graphics.draw_spot_light = natives.GRAPHICS.DRAW_SPOT_LIGHT

function natives.GRAPHICS.DRAW_SHADOWED_SPOT_LIGHT(--[[float]] posX, --[[float]] posY, --[[float]] posZ, --[[float]] dirX, --[[float]] dirY, --[[float]] dirZ, --[[int]] colorR, --[[int]] colorG, --[[int]] colorB, --[[float]] distance, --[[float]] brightness, --[[float]] roundness, --[[float]] radius, --[[float]] falloff, --[[int]] shadowId) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.DRAW_SHADOWED_SPOT_LIGHT' due to disabled trusted mode")

	assert(type(posX) == "number", "Arg #1 (posX) must be a number.")
	assert(type(posY) == "number", "Arg #2 (posY) must be a number.")
	assert(type(posZ) == "number", "Arg #3 (posZ) must be a number.")
	assert(type(dirX) == "number", "Arg #4 (dirX) must be a number.")
	assert(type(dirY) == "number", "Arg #5 (dirY) must be a number.")
	assert(type(dirZ) == "number", "Arg #6 (dirZ) must be a number.")
	assert(type(colorR) == "number", "Arg #7 (colorR) must be a number.")
	assert(type(colorG) == "number", "Arg #8 (colorG) must be a number.")
	assert(type(colorB) == "number", "Arg #9 (colorB) must be a number.")
	assert(type(distance) == "number", "Arg #10 (distance) must be a number.")
	assert(type(brightness) == "number", "Arg #11 (brightness) must be a number.")
	assert(type(roundness) == "number", "Arg #12 (roundness) must be a number.")
	assert(type(radius) == "number", "Arg #13 (radius) must be a number.")
	assert(type(falloff) == "number", "Arg #14 (falloff) must be a number.")
	assert(type(shadowId) == "number", "Arg #15 (shadowId) must be a number.")

	local result = native_call(0x5BCA583A583194DB, posX, posY, posZ, dirX, dirY, dirZ, colorR, colorG, colorB, distance, brightness, roundness, radius, falloff, shadowId)
end
natives.graphics.draw_shadowed_spot_light = natives.GRAPHICS.DRAW_SHADOWED_SPOT_LIGHT

function natives.GRAPHICS.FADE_UP_PED_LIGHT(--[[float]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.FADE_UP_PED_LIGHT' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xC9B18B4619F48F7B, p0)
end
natives.graphics.fade_up_ped_light = natives.GRAPHICS.FADE_UP_PED_LIGHT

function natives.GRAPHICS.UPDATE_LIGHTS_ON_ENTITY(--[[Entity]] entity) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.UPDATE_LIGHTS_ON_ENTITY' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0xDEADC0DEDEADC0DE, entity)
end
natives.graphics.update_lights_on_entity = natives.GRAPHICS.UPDATE_LIGHTS_ON_ENTITY

function natives.GRAPHICS.SET_LIGHT_OVERRIDE_MAX_INTENSITY_SCALE(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_LIGHT_OVERRIDE_MAX_INTENSITY_SCALE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x9641588DAB93B4B5, p0)
end
natives.graphics.set_light_override_max_intensity_scale = natives.GRAPHICS.SET_LIGHT_OVERRIDE_MAX_INTENSITY_SCALE

function natives.GRAPHICS.GET_LIGHT_OVERRIDE_MAX_INTENSITY_SCALE() -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.GET_LIGHT_OVERRIDE_MAX_INTENSITY_SCALE' due to disabled trusted mode")

	local result = native_call(0x393BD2275CEB7793)
	return result:__tointeger()
end
natives.graphics.get_light_override_max_intensity_scale = natives.GRAPHICS.GET_LIGHT_OVERRIDE_MAX_INTENSITY_SCALE

--[[
enum MarkerTypes
{
    MarkerTypeUpsideDownCone = 0,
 MarkerTypeVerticalCylinder = 1,
   MarkerTypeThickChevronUp = 2,
 MarkerTypeThinChevronUp = 3,
  MarkerTypeCheckeredFlagRect = 4,
  MarkerTypeCheckeredFlagCircle = 5,
    MarkerTypeVerticleCircle = 6,
 MarkerTypePlaneModel = 7,
 MarkerTypeLostMCDark = 8,
 MarkerTypeLostMCLight = 9,
    MarkerTypeNumber0 = 10,
   MarkerTypeNumber1 = 11,
   MarkerTypeNumber2 = 12,
   MarkerTypeNumber3 = 13,
   MarkerTypeNumber4 = 14,
   MarkerTypeNumber5 = 15,
   MarkerTypeNumber6 = 16,
   MarkerTypeNumber7 = 17,
   MarkerTypeNumber8 = 18,
   MarkerTypeNumber9 = 19,
   MarkerTypeChevronUpx1 = 20,
   MarkerTypeChevronUpx2 = 21,
   MarkerTypeChevronUpx3 = 22,
   MarkerTypeHorizontalCircleFat = 23,
   MarkerTypeReplayIcon = 24,
    MarkerTypeHorizontalCircleSkinny = 25,
    MarkerTypeHorizontalCircleSkinny_Arrow = 26,
  MarkerTypeHorizontalSplitArrowCircle = 27,
    MarkerTypeDebugSphere = 28,
   MarkerTypeDallorSign = 29,
    MarkerTypeHorizontalBars = 30,
    MarkerTypeWolfHead = 31
};

dirX/Y/Z represent a heading on each axis in which the marker should face, alternatively you can rotate each axis independently with rotX/Y/Z (and set dirX/Y/Z all to 0).

faceCamera - Rotates only the y-axis (the heading) towards the camera

p19 - no effect, default value in script is 2

rotate - Rotates only on the y-axis (the heading)

textureDict - Name of texture dictionary to load texture from (e.g. "GolfPutting")

textureName - Name of texture inside dictionary to load (e.g. "PuttingMarker")

drawOnEnts - Draws the marker onto any entities that intersect it

basically what he said, except textureDict and textureName are totally not const char*, or if so, then they are always set to 0/NULL/nullptr in every script I checked, eg:

bj.c: graphics::draw_marker(6, vParam0, 0f, 0f, 1f, 0f, 0f, 0f, 4f, 4f, 4f, 240, 200, 80, iVar1, 0, 0, 2, 0, 0, 0, false);

his is what I used to draw an amber downward pointing chevron "V", has to be redrawn every frame.  The 180 is for 180 degrees rotation around the Y axis, the 50 is alpha, assuming max is 100, but it will accept 255.

GRAPHICS::DRAW_MARKER(2, v.x, v.y, v.z + 2, 0, 0, 0, 0, 180, 0, 2, 2, 2, 255, 128, 0, 50, 0, 1, 1, 0, 0, 0, 0);


]]
function natives.GRAPHICS.DRAW_MARKER(--[[int]] type, --[[float]] posX, --[[float]] posY, --[[float]] posZ, --[[float]] dirX, --[[float]] dirY, --[[float]] dirZ, --[[float]] rotX, --[[float]] rotY, --[[float]] rotZ, --[[float]] scaleX, --[[float]] scaleY, --[[float]] scaleZ, --[[int]] red, --[[int]] green, --[[int]] blue, --[[int]] alpha, --[[BOOL]] bobUpAndDown, --[[BOOL]] faceCamera, --[[int]] p19, --[[BOOL]] rotate, --[[const char*]] textureDict, --[[const char*]] textureName, --[[BOOL]] drawOnEnts) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.DRAW_MARKER' due to disabled trusted mode")

	assert(type(type) == "number", "Arg #1 (type) must be a number.")
	assert(type(posX) == "number", "Arg #2 (posX) must be a number.")
	assert(type(posY) == "number", "Arg #3 (posY) must be a number.")
	assert(type(posZ) == "number", "Arg #4 (posZ) must be a number.")
	assert(type(dirX) == "number", "Arg #5 (dirX) must be a number.")
	assert(type(dirY) == "number", "Arg #6 (dirY) must be a number.")
	assert(type(dirZ) == "number", "Arg #7 (dirZ) must be a number.")
	assert(type(rotX) == "number", "Arg #8 (rotX) must be a number.")
	assert(type(rotY) == "number", "Arg #9 (rotY) must be a number.")
	assert(type(rotZ) == "number", "Arg #10 (rotZ) must be a number.")
	assert(type(scaleX) == "number", "Arg #11 (scaleX) must be a number.")
	assert(type(scaleY) == "number", "Arg #12 (scaleY) must be a number.")
	assert(type(scaleZ) == "number", "Arg #13 (scaleZ) must be a number.")
	assert(type(red) == "number", "Arg #14 (red) must be a number.")
	assert(type(green) == "number", "Arg #15 (green) must be a number.")
	assert(type(blue) == "number", "Arg #16 (blue) must be a number.")
	assert(type(alpha) == "number", "Arg #17 (alpha) must be a number.")
	assert(type(bobUpAndDown) == "boolean", "Arg #18 (bobUpAndDown) must be a boolean.")
	assert(type(faceCamera) == "boolean", "Arg #19 (faceCamera) must be a boolean.")
	assert(type(p19) == "number", "Arg #20 (p19) must be a number.")
	assert(type(rotate) == "boolean", "Arg #21 (rotate) must be a boolean.")
	assert(type(textureDict) == "string", "Arg #22 (textureDict) must be a string.")
	assert(type(textureName) == "string", "Arg #23 (textureName) must be a string.")
	assert(type(drawOnEnts) == "boolean", "Arg #24 (drawOnEnts) must be a boolean.")

	local result = native_call(0x28477EC23D892089, type, posX, posY, posZ, dirX, dirY, dirZ, rotX, rotY, rotZ, scaleX, scaleY, scaleZ, red, green, blue, alpha, bobUpAndDown, faceCamera, p19, rotate, textureDict, textureName, drawOnEnts)
end
natives.graphics.draw_marker = natives.GRAPHICS.DRAW_MARKER

function natives.GRAPHICS.DRAW_MARKER_EX(--[[int]] type, --[[float]] posX, --[[float]] posY, --[[float]] posZ, --[[float]] dirX, --[[float]] dirY, --[[float]] dirZ, --[[float]] rotX, --[[float]] rotY, --[[float]] rotZ, --[[float]] scaleX, --[[float]] scaleY, --[[float]] scaleZ, --[[int]] red, --[[int]] green, --[[int]] blue, --[[int]] alpha, --[[BOOL]] bobUpAndDown, --[[BOOL]] faceCamera, --[[Any]] p19, --[[BOOL]] rotate, --[[const char*]] textureDict, --[[const char*]] textureName, --[[BOOL]] drawOnEnts, --[[BOOL]] p24, --[[BOOL]] p25) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.DRAW_MARKER_EX' due to disabled trusted mode")

	assert(type(type) == "number", "Arg #1 (type) must be a number.")
	assert(type(posX) == "number", "Arg #2 (posX) must be a number.")
	assert(type(posY) == "number", "Arg #3 (posY) must be a number.")
	assert(type(posZ) == "number", "Arg #4 (posZ) must be a number.")
	assert(type(dirX) == "number", "Arg #5 (dirX) must be a number.")
	assert(type(dirY) == "number", "Arg #6 (dirY) must be a number.")
	assert(type(dirZ) == "number", "Arg #7 (dirZ) must be a number.")
	assert(type(rotX) == "number", "Arg #8 (rotX) must be a number.")
	assert(type(rotY) == "number", "Arg #9 (rotY) must be a number.")
	assert(type(rotZ) == "number", "Arg #10 (rotZ) must be a number.")
	assert(type(scaleX) == "number", "Arg #11 (scaleX) must be a number.")
	assert(type(scaleY) == "number", "Arg #12 (scaleY) must be a number.")
	assert(type(scaleZ) == "number", "Arg #13 (scaleZ) must be a number.")
	assert(type(red) == "number", "Arg #14 (red) must be a number.")
	assert(type(green) == "number", "Arg #15 (green) must be a number.")
	assert(type(blue) == "number", "Arg #16 (blue) must be a number.")
	assert(type(alpha) == "number", "Arg #17 (alpha) must be a number.")
	assert(type(bobUpAndDown) == "boolean", "Arg #18 (bobUpAndDown) must be a boolean.")
	assert(type(faceCamera) == "boolean", "Arg #19 (faceCamera) must be a boolean.")
	assert(type(p19) == "number", "Arg #20 (p19) must be a number.")
	assert(type(rotate) == "boolean", "Arg #21 (rotate) must be a boolean.")
	assert(type(textureDict) == "string", "Arg #22 (textureDict) must be a string.")
	assert(type(textureName) == "string", "Arg #23 (textureName) must be a string.")
	assert(type(drawOnEnts) == "boolean", "Arg #24 (drawOnEnts) must be a boolean.")
	assert(type(p24) == "boolean", "Arg #25 (p24) must be a boolean.")
	assert(type(p25) == "boolean", "Arg #26 (p25) must be a boolean.")

	local result = native_call(0xE82728F0DE75D13A, type, posX, posY, posZ, dirX, dirY, dirZ, rotX, rotY, rotZ, scaleX, scaleY, scaleZ, red, green, blue, alpha, bobUpAndDown, faceCamera, p19, rotate, textureDict, textureName, drawOnEnts, p24, p25)
end
natives.graphics.draw_marker_ex = natives.GRAPHICS.DRAW_MARKER_EX

--[[
Draws a 3D sphere, typically seen in the GTA:O freemode event "Penned In".
Example https://imgur.com/nCbtS4H
]]
function natives.GRAPHICS.DRAW_MARKER_SPHERE(--[[float]] x, --[[float]] y, --[[float]] z, --[[float]] radius, --[[int]] red, --[[int]] green, --[[int]] blue, --[[float]] alpha) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.DRAW_MARKER_SPHERE' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(radius) == "number", "Arg #4 (radius) must be a number.")
	assert(type(red) == "number", "Arg #5 (red) must be a number.")
	assert(type(green) == "number", "Arg #6 (green) must be a number.")
	assert(type(blue) == "number", "Arg #7 (blue) must be a number.")
	assert(type(alpha) == "number", "Arg #8 (alpha) must be a number.")

	local result = native_call(0x799017F9E3B10112, x, y, z, radius, red, green, blue, alpha)
end
natives.graphics.draw_marker_sphere = natives.GRAPHICS.DRAW_MARKER_SPHERE

--[[
Creates a checkpoint. Returns the handle of the checkpoint.

20/03/17 : Attention, checkpoints are already handled by the game itself, so you must not loop it like markers.

Parameters:
* type - The type of checkpoint to create. See below for a list of checkpoint types.
* pos1 - The position of the checkpoint.
* pos2 - The position of the next checkpoint to point to.
* radius - The radius of the checkpoint.
* color - The color of the checkpoint.
* reserved - Special parameter, see below for details. Usually set to 0 in the scripts.

Checkpoint types:
0-4---------Cylinder: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker
5-9---------Cylinder: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker
10-14-------Ring: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker
15-19-------1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker      
20-24-------Cylinder: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker 
25-29-------Cylinder: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker    
30-34-------Cylinder: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker 
35-38-------Ring: Airplane Up, Left, Right, UpsideDown
39----------?
40----------Ring: just a ring
41----------?
42-44-------Cylinder w/ number (uses 'reserved' parameter)
45-47-------Cylinder no arrow or number

If using type 42-44, reserved sets number / number and shape to display

0-99------------Just numbers (0-99)
100-109-----------------Arrow (0-9)
110-119------------Two arrows (0-9)
120-129----------Three arrows (0-9)
130-139----------------Circle (0-9)
140-149------------CycleArrow (0-9)
150-159----------------Circle (0-9)
160-169----Circle  w/ pointer (0-9)
170-179-------Perforated ring (0-9)
180-189----------------Sphere (0-9)
]]
function natives.GRAPHICS.CREATE_CHECKPOINT(--[[int]] type, --[[float]] posX1, --[[float]] posY1, --[[float]] posZ1, --[[float]] posX2, --[[float]] posY2, --[[float]] posZ2, --[[float]] diameter, --[[int]] red, --[[int]] green, --[[int]] blue, --[[int]] alpha, --[[int]] reserved) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.CREATE_CHECKPOINT' due to disabled trusted mode")

	assert(type(type) == "number", "Arg #1 (type) must be a number.")
	assert(type(posX1) == "number", "Arg #2 (posX1) must be a number.")
	assert(type(posY1) == "number", "Arg #3 (posY1) must be a number.")
	assert(type(posZ1) == "number", "Arg #4 (posZ1) must be a number.")
	assert(type(posX2) == "number", "Arg #5 (posX2) must be a number.")
	assert(type(posY2) == "number", "Arg #6 (posY2) must be a number.")
	assert(type(posZ2) == "number", "Arg #7 (posZ2) must be a number.")
	assert(type(diameter) == "number", "Arg #8 (diameter) must be a number.")
	assert(type(red) == "number", "Arg #9 (red) must be a number.")
	assert(type(green) == "number", "Arg #10 (green) must be a number.")
	assert(type(blue) == "number", "Arg #11 (blue) must be a number.")
	assert(type(alpha) == "number", "Arg #12 (alpha) must be a number.")
	assert(type(reserved) == "number", "Arg #13 (reserved) must be a number.")

	local result = native_call(0x0134F0835AB6BFCB, type, posX1, posY1, posZ1, posX2, posY2, posZ2, diameter, red, green, blue, alpha, reserved)
	return result:__tointeger()
end
natives.graphics.create_checkpoint = natives.GRAPHICS.CREATE_CHECKPOINT

function natives.GRAPHICS.SET_CHECKPOINT_INSIDE_CYLINDER_HEIGHT_SCALE(--[[int]] checkpoint, --[[float]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_CHECKPOINT_INSIDE_CYLINDER_HEIGHT_SCALE' due to disabled trusted mode")

	assert(type(checkpoint) == "number", "Arg #1 (checkpoint) must be a number.")
	assert(type(p0) == "number", "Arg #2 (p0) must be a number.")

	local result = native_call(0x4B5B4DA5D79F1943, checkpoint, p0)
end
natives.graphics.set_checkpoint_inside_cylinder_height_scale = natives.GRAPHICS.SET_CHECKPOINT_INSIDE_CYLINDER_HEIGHT_SCALE

function natives.GRAPHICS.SET_CHECKPOINT_INSIDE_CYLINDER_SCALE(--[[int]] checkpoint, --[[float]] scale) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_CHECKPOINT_INSIDE_CYLINDER_SCALE' due to disabled trusted mode")

	assert(type(checkpoint) == "number", "Arg #1 (checkpoint) must be a number.")
	assert(type(scale) == "number", "Arg #2 (scale) must be a number.")

	local result = native_call(0x44621483FF966526, checkpoint, scale)
end
natives.graphics.set_checkpoint_inside_cylinder_scale = natives.GRAPHICS.SET_CHECKPOINT_INSIDE_CYLINDER_SCALE

--[[
Sets the cylinder height of the checkpoint.

Parameters:
* nearHeight - The height of the checkpoint when inside of the radius.
* farHeight - The height of the checkpoint when outside of the radius.
* radius - The radius of the checkpoint.
]]
function natives.GRAPHICS.SET_CHECKPOINT_CYLINDER_HEIGHT(--[[int]] checkpoint, --[[float]] nearHeight, --[[float]] farHeight, --[[float]] radius) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_CHECKPOINT_CYLINDER_HEIGHT' due to disabled trusted mode")

	assert(type(checkpoint) == "number", "Arg #1 (checkpoint) must be a number.")
	assert(type(nearHeight) == "number", "Arg #2 (nearHeight) must be a number.")
	assert(type(farHeight) == "number", "Arg #3 (farHeight) must be a number.")
	assert(type(radius) == "number", "Arg #4 (radius) must be a number.")

	local result = native_call(0x2707AAE9D9297D89, checkpoint, nearHeight, farHeight, radius)
end
natives.graphics.set_checkpoint_cylinder_height = natives.GRAPHICS.SET_CHECKPOINT_CYLINDER_HEIGHT

--[[
Sets the checkpoint color.
]]
function natives.GRAPHICS.SET_CHECKPOINT_RGBA(--[[int]] checkpoint, --[[int]] red, --[[int]] green, --[[int]] blue, --[[int]] alpha) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_CHECKPOINT_RGBA' due to disabled trusted mode")

	assert(type(checkpoint) == "number", "Arg #1 (checkpoint) must be a number.")
	assert(type(red) == "number", "Arg #2 (red) must be a number.")
	assert(type(green) == "number", "Arg #3 (green) must be a number.")
	assert(type(blue) == "number", "Arg #4 (blue) must be a number.")
	assert(type(alpha) == "number", "Arg #5 (alpha) must be a number.")

	local result = native_call(0x7167371E8AD747F7, checkpoint, red, green, blue, alpha)
end
natives.graphics.set_checkpoint_rgba = natives.GRAPHICS.SET_CHECKPOINT_RGBA

--[[
Sets the checkpoint icon color.
]]
function natives.GRAPHICS.SET_CHECKPOINT_RGBA2(--[[int]] checkpoint, --[[int]] red, --[[int]] green, --[[int]] blue, --[[int]] alpha) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_CHECKPOINT_RGBA2' due to disabled trusted mode")

	assert(type(checkpoint) == "number", "Arg #1 (checkpoint) must be a number.")
	assert(type(red) == "number", "Arg #2 (red) must be a number.")
	assert(type(green) == "number", "Arg #3 (green) must be a number.")
	assert(type(blue) == "number", "Arg #4 (blue) must be a number.")
	assert(type(alpha) == "number", "Arg #5 (alpha) must be a number.")

	local result = native_call(0xB9EA40907C680580, checkpoint, red, green, blue, alpha)
end
natives.graphics.set_checkpoint_rgba2 = natives.GRAPHICS.SET_CHECKPOINT_RGBA2

--[[
This does not move an existing checkpoint... so wtf.
]]
function natives.GRAPHICS.SET_CHECKPOINT_CLIPPLANE_WITH_POS_NORM(--[[int]] checkpoint, --[[float]] posX, --[[float]] posY, --[[float]] posZ, --[[float]] unkX, --[[float]] unkY, --[[float]] unkZ) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_CHECKPOINT_CLIPPLANE_WITH_POS_NORM' due to disabled trusted mode")

	assert(type(checkpoint) == "number", "Arg #1 (checkpoint) must be a number.")
	assert(type(posX) == "number", "Arg #2 (posX) must be a number.")
	assert(type(posY) == "number", "Arg #3 (posY) must be a number.")
	assert(type(posZ) == "number", "Arg #4 (posZ) must be a number.")
	assert(type(unkX) == "number", "Arg #5 (unkX) must be a number.")
	assert(type(unkY) == "number", "Arg #6 (unkY) must be a number.")
	assert(type(unkZ) == "number", "Arg #7 (unkZ) must be a number.")

	local result = native_call(0xF51D36185993515D, checkpoint, posX, posY, posZ, unkX, unkY, unkZ)
end
natives.graphics.set_checkpoint_clipplane_with_pos_norm = natives.GRAPHICS.SET_CHECKPOINT_CLIPPLANE_WITH_POS_NORM

function natives.GRAPHICS.SET_CHECKPOINT_FORCE_OLD_ARROW_POINTING(--[[int]] checkpoint) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_CHECKPOINT_FORCE_OLD_ARROW_POINTING' due to disabled trusted mode")

	assert(type(checkpoint) == "number", "Arg #1 (checkpoint) must be a number.")

	local result = native_call(0xFCF6788FC4860CD4, checkpoint)
end
natives.graphics.set_checkpoint_force_old_arrow_pointing = natives.GRAPHICS.SET_CHECKPOINT_FORCE_OLD_ARROW_POINTING

--[[
Unknown. Called after creating a checkpoint (type: 51) in the creators.
]]
function natives.GRAPHICS.SET_CHECKPOINT_DECAL_ROT_ALIGNED_TO_CAMERA_ROT(--[[int]] checkpoint) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_CHECKPOINT_DECAL_ROT_ALIGNED_TO_CAMERA_ROT' due to disabled trusted mode")

	assert(type(checkpoint) == "number", "Arg #1 (checkpoint) must be a number.")

	local result = native_call(0x615D3925E87A3B26, checkpoint)
end
natives.graphics.set_checkpoint_decal_rot_aligned_to_camera_rot = natives.GRAPHICS.SET_CHECKPOINT_DECAL_ROT_ALIGNED_TO_CAMERA_ROT

function natives.GRAPHICS.SET_CHECKPOINT_FORCE_DIRECTION(--[[int]] checkpoint) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_CHECKPOINT_FORCE_DIRECTION' due to disabled trusted mode")

	assert(type(checkpoint) == "number", "Arg #1 (checkpoint) must be a number.")

	local result = native_call(0xDB1EA9411C8911EC, checkpoint)
end
natives.graphics.set_checkpoint_force_direction = natives.GRAPHICS.SET_CHECKPOINT_FORCE_DIRECTION

function natives.GRAPHICS.SET_CHECKPOINT_DIRECTION(--[[int]] checkpoint, --[[float]] posX, --[[float]] posY, --[[float]] posZ) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_CHECKPOINT_DIRECTION' due to disabled trusted mode")

	assert(type(checkpoint) == "number", "Arg #1 (checkpoint) must be a number.")
	assert(type(posX) == "number", "Arg #2 (posX) must be a number.")
	assert(type(posY) == "number", "Arg #3 (posY) must be a number.")
	assert(type(posZ) == "number", "Arg #4 (posZ) must be a number.")

	local result = native_call(0x3C788E7F6438754D, checkpoint, posX, posY, posZ)
end
natives.graphics.set_checkpoint_direction = natives.GRAPHICS.SET_CHECKPOINT_DIRECTION

function natives.GRAPHICS.DELETE_CHECKPOINT(--[[int]] checkpoint) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.DELETE_CHECKPOINT' due to disabled trusted mode")

	assert(type(checkpoint) == "number", "Arg #1 (checkpoint) must be a number.")

	local result = native_call(0xF5ED37F54CD4D52E, checkpoint)
end
natives.graphics.delete_checkpoint = natives.GRAPHICS.DELETE_CHECKPOINT

function natives.GRAPHICS.DONT_RENDER_IN_GAME_UI(--[[BOOL]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.DONT_RENDER_IN_GAME_UI' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0x22A249A53034450A, p0)
end
natives.graphics.dont_render_in_game_ui = natives.GRAPHICS.DONT_RENDER_IN_GAME_UI

function natives.GRAPHICS.FORCE_RENDER_IN_GAME_UI(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.FORCE_RENDER_IN_GAME_UI' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0xDC459CFA0CCE245B, toggle)
end
natives.graphics.force_render_in_game_ui = natives.GRAPHICS.FORCE_RENDER_IN_GAME_UI

--[[
This function can requests texture dictonaries from following RPFs:
scaleform_generic.rpf
scaleform_minigames.rpf
scaleform_minimap.rpf
scaleform_web.rpf

last param isnt a toggle
]]
function natives.GRAPHICS.REQUEST_STREAMED_TEXTURE_DICT(--[[const char*]] textureDict, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.REQUEST_STREAMED_TEXTURE_DICT' due to disabled trusted mode")

	assert(type(textureDict) == "string", "Arg #1 (textureDict) must be a string.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0xDFA2EF8E04127DD5, textureDict, p1)
end
natives.graphics.request_streamed_texture_dict = natives.GRAPHICS.REQUEST_STREAMED_TEXTURE_DICT

function natives.GRAPHICS.HAS_STREAMED_TEXTURE_DICT_LOADED(--[[const char*]] textureDict) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.HAS_STREAMED_TEXTURE_DICT_LOADED' due to disabled trusted mode")

	assert(type(textureDict) == "string", "Arg #1 (textureDict) must be a string.")

	local result = native_call(0x0145F696AAAAD2E4, textureDict)
	return result:__tointeger() ~= 0
end
natives.graphics.has_streamed_texture_dict_loaded = natives.GRAPHICS.HAS_STREAMED_TEXTURE_DICT_LOADED

function natives.GRAPHICS.SET_STREAMED_TEXTURE_DICT_AS_NO_LONGER_NEEDED(--[[const char*]] textureDict) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_STREAMED_TEXTURE_DICT_AS_NO_LONGER_NEEDED' due to disabled trusted mode")

	assert(type(textureDict) == "string", "Arg #1 (textureDict) must be a string.")

	local result = native_call(0xBE2CACCF5A8AA805, textureDict)
end
natives.graphics.set_streamed_texture_dict_as_no_longer_needed = natives.GRAPHICS.SET_STREAMED_TEXTURE_DICT_AS_NO_LONGER_NEEDED

--[[
Draws a rectangle on the screen.

-x: The relative X point of the center of the rectangle. (0.0-1.0, 0.0 is the left edge of the screen, 1.0 is the right edge of the screen)

-y: The relative Y point of the center of the rectangle. (0.0-1.0, 0.0 is the top edge of the screen, 1.0 is the bottom edge of the screen)

-width: The relative width of the rectangle. (0.0-1.0, 1.0 means the whole screen width)

-height: The relative height of the rectangle. (0.0-1.0, 1.0 means the whole screen height)

-R: Red part of the color. (0-255)

-G: Green part of the color. (0-255)

-B: Blue part of the color. (0-255)

-A: Alpha part of the color. (0-255, 0 means totally transparent, 255 means totally opaque)

The total number of rectangles to be drawn in one frame is apparently limited to 399.

]]
function natives.GRAPHICS.DRAW_RECT(--[[float]] x, --[[float]] y, --[[float]] width, --[[float]] height, --[[int]] r, --[[int]] g, --[[int]] b, --[[int]] a, --[[BOOL]] p8) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.DRAW_RECT' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(width) == "number", "Arg #3 (width) must be a number.")
	assert(type(height) == "number", "Arg #4 (height) must be a number.")
	assert(type(r) == "number", "Arg #5 (r) must be a number.")
	assert(type(g) == "number", "Arg #6 (g) must be a number.")
	assert(type(b) == "number", "Arg #7 (b) must be a number.")
	assert(type(a) == "number", "Arg #8 (a) must be a number.")
	assert(type(p8) == "boolean", "Arg #9 (p8) must be a boolean.")

	local result = native_call(0x3A618A217E5154F0, x, y, width, height, r, g, b, a, p8)
end
natives.graphics.draw_rect = natives.GRAPHICS.DRAW_RECT

--[[
Sets a flag defining whether or not script draw commands should continue being drawn behind the pause menu. This is usually used for TV channels and other draw commands that are used with a world render target.
]]
function natives.GRAPHICS.SET_SCRIPT_GFX_DRAW_BEHIND_PAUSEMENU(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_SCRIPT_GFX_DRAW_BEHIND_PAUSEMENU' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0xC6372ECD45D73BCD, toggle)
end
natives.graphics.set_script_gfx_draw_behind_pausemenu = natives.GRAPHICS.SET_SCRIPT_GFX_DRAW_BEHIND_PAUSEMENU

--[[
Sets the draw order for script draw commands.

Examples from decompiled scripts:
GRAPHICS::SET_SCRIPT_GFX_DRAW_ORDER(7);
GRAPHICS::DRAW_RECT(0.5, 0.5, 3.0, 3.0, v_4, v_5, v_6, a_0._f172, 0);

GRAPHICS::SET_SCRIPT_GFX_DRAW_ORDER(1);
GRAPHICS::DRAW_RECT(0.5, 0.5, 1.5, 1.5, 0, 0, 0, 255, 0);
]]
function natives.GRAPHICS.SET_SCRIPT_GFX_DRAW_ORDER(--[[int]] drawOrder) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_SCRIPT_GFX_DRAW_ORDER' due to disabled trusted mode")

	assert(type(drawOrder) == "number", "Arg #1 (drawOrder) must be a number.")

	local result = native_call(0x61BB1D9B3A95D802, drawOrder)
end
natives.graphics.set_script_gfx_draw_order = natives.GRAPHICS.SET_SCRIPT_GFX_DRAW_ORDER

--[[
horizontalAlign: The horizontal alignment. This can be 67 ('C'), 76 ('L'), or 82 ('R').
verticalAlign: The vertical alignment. This can be 67 ('C'), 66 ('B'), or 84 ('T').

This function anchors script draws to a side of the safe zone. This needs to be called to make the interface independent of the player's safe zone configuration.

These values are equivalent to alignX and alignY in common:/data/ui/frontend.xml, which can be used as a baseline for default alignment.

Using any other value (including 0) will result in the safe zone not being taken into account for this draw. The canonical value for this is 'I' (73).

For example, you can use SET_SCRIPT_GFX_ALIGN(0, 84) to only scale on the Y axis (to the top), but not change the X axis.

To reset the value, use RESET_SCRIPT_GFX_ALIGN.
]]
function natives.GRAPHICS.SET_SCRIPT_GFX_ALIGN(--[[int]] horizontalAlign, --[[int]] verticalAlign) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_SCRIPT_GFX_ALIGN' due to disabled trusted mode")

	assert(type(horizontalAlign) == "number", "Arg #1 (horizontalAlign) must be a number.")
	assert(type(verticalAlign) == "number", "Arg #2 (verticalAlign) must be a number.")

	local result = native_call(0xB8A850F20A067EB6, horizontalAlign, verticalAlign)
end
natives.graphics.set_script_gfx_align = natives.GRAPHICS.SET_SCRIPT_GFX_ALIGN

--[[
This function resets the alignment set using SET_SCRIPT_GFX_ALIGN and SET_SCRIPT_GFX_ALIGN_PARAMS to the default values ('I', 'I'; 0, 0, 0, 0).
This should be used after having used the aforementioned functions in order to not affect any other scripts attempting to draw.
]]
function natives.GRAPHICS.RESET_SCRIPT_GFX_ALIGN() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.RESET_SCRIPT_GFX_ALIGN' due to disabled trusted mode")

	local result = native_call(0xE3A3DB414A373DAB)
end
natives.graphics.reset_script_gfx_align = natives.GRAPHICS.RESET_SCRIPT_GFX_ALIGN

--[[
Sets the draw offset/calculated size for SET_SCRIPT_GFX_ALIGN. If using any alignment other than left/top, the game expects the width/height to be configured using this native in order to get a proper starting position for the draw command.
]]
function natives.GRAPHICS.SET_SCRIPT_GFX_ALIGN_PARAMS(--[[float]] x, --[[float]] y, --[[float]] w, --[[float]] h) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_SCRIPT_GFX_ALIGN_PARAMS' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(w) == "number", "Arg #3 (w) must be a number.")
	assert(type(h) == "number", "Arg #4 (h) must be a number.")

	local result = native_call(0xF5A2C681787E579D, x, y, w, h)
end
natives.graphics.set_script_gfx_align_params = natives.GRAPHICS.SET_SCRIPT_GFX_ALIGN_PARAMS

--[[
Calculates the effective X/Y fractions when applying the values set by SET_SCRIPT_GFX_ALIGN and SET_SCRIPT_GFX_ALIGN_PARAMS
]]
function natives.GRAPHICS.GET_SCRIPT_GFX_ALIGN_POSITION(--[[float]] x, --[[float]] y, --[[float*]] calculatedX, --[[float*]] calculatedY) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.GET_SCRIPT_GFX_ALIGN_POSITION' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(calculatedX) == "userdata", "Arg #3 (calculatedX) must be a userdata.")
	assert(type(calculatedY) == "userdata", "Arg #4 (calculatedY) must be a userdata.")

	local result = native_call(0x6DD8F5AA635EB4B2, x, y, calculatedX, calculatedY)
end
natives.graphics.get_script_gfx_align_position = natives.GRAPHICS.GET_SCRIPT_GFX_ALIGN_POSITION

--[[
Gets the scale of safe zone. if the safe zone size scale is max, it will return 1.0.
]]
function natives.GRAPHICS.GET_SAFE_ZONE_SIZE() -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.GET_SAFE_ZONE_SIZE' due to disabled trusted mode")

	local result = native_call(0xBAF107B6BB2C97F0)
	return result:__tonumber()
end
natives.graphics.get_safe_zone_size = natives.GRAPHICS.GET_SAFE_ZONE_SIZE

--[[
Draws a 2D sprite on the screen.

Parameters:
textureDict - Name of texture dictionary to load texture from (e.g. "CommonMenu", "MPWeaponsCommon", etc.)

textureName - Name of texture to load from texture dictionary (e.g. "last_team_standing_icon", "tennis_icon", etc.)

screenX/Y - Screen offset (0.5 = center)
scaleX/Y - Texture scaling. Negative values can be used to flip the texture on that axis. (0.5 = half)

heading - Texture rotation in degrees (default = 0.0) positive is clockwise, measured in degrees

red,green,blue - Sprite color (default = 255/255/255)

alpha - opacity level
]]
function natives.GRAPHICS.DRAW_SPRITE(--[[const char*]] textureDict, --[[const char*]] textureName, --[[float]] screenX, --[[float]] screenY, --[[float]] width, --[[float]] height, --[[float]] heading, --[[int]] red, --[[int]] green, --[[int]] blue, --[[int]] alpha, --[[BOOL]] p11, --[[Any]] p12) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.DRAW_SPRITE' due to disabled trusted mode")

	assert(type(textureDict) == "string", "Arg #1 (textureDict) must be a string.")
	assert(type(textureName) == "string", "Arg #2 (textureName) must be a string.")
	assert(type(screenX) == "number", "Arg #3 (screenX) must be a number.")
	assert(type(screenY) == "number", "Arg #4 (screenY) must be a number.")
	assert(type(width) == "number", "Arg #5 (width) must be a number.")
	assert(type(height) == "number", "Arg #6 (height) must be a number.")
	assert(type(heading) == "number", "Arg #7 (heading) must be a number.")
	assert(type(red) == "number", "Arg #8 (red) must be a number.")
	assert(type(green) == "number", "Arg #9 (green) must be a number.")
	assert(type(blue) == "number", "Arg #10 (blue) must be a number.")
	assert(type(alpha) == "number", "Arg #11 (alpha) must be a number.")
	assert(type(p11) == "boolean", "Arg #12 (p11) must be a boolean.")
	assert(type(p12) == "number", "Arg #13 (p12) must be a number.")

	local result = native_call(0xE7FFAE5EBF23D890, textureDict, textureName, screenX, screenY, width, height, heading, red, green, blue, alpha, p11, p12)
end
natives.graphics.draw_sprite = natives.GRAPHICS.DRAW_SPRITE

--[[
Used in arcade games and Beam hack minigame in Doomsday Heist. I will most certainly dive into this to try replicate arcade games.
x position must be between 0.0 and 1.0 (1.0 being the most right side of the screen)
y position must be between 0.0 and 1.0 (1.0 being the most bottom side of the screen)
width 0.0 - 1.0 is the reasonable amount generally
height 0.0 - 1.0 is the reasonable amount generally
p6 almost always 0.0
p11 seems to be unknown but almost always 0 int
]]
function natives.GRAPHICS.DRAW_SPRITE_ARX(--[[const char*]] textureDict, --[[const char*]] textureName, --[[float]] x, --[[float]] y, --[[float]] width, --[[float]] height, --[[float]] p6, --[[int]] red, --[[int]] green, --[[int]] blue, --[[int]] alpha, --[[Any]] p11, --[[Any]] p12) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.DRAW_SPRITE_ARX' due to disabled trusted mode")

	assert(type(textureDict) == "string", "Arg #1 (textureDict) must be a string.")
	assert(type(textureName) == "string", "Arg #2 (textureName) must be a string.")
	assert(type(x) == "number", "Arg #3 (x) must be a number.")
	assert(type(y) == "number", "Arg #4 (y) must be a number.")
	assert(type(width) == "number", "Arg #5 (width) must be a number.")
	assert(type(height) == "number", "Arg #6 (height) must be a number.")
	assert(type(p6) == "number", "Arg #7 (p6) must be a number.")
	assert(type(red) == "number", "Arg #8 (red) must be a number.")
	assert(type(green) == "number", "Arg #9 (green) must be a number.")
	assert(type(blue) == "number", "Arg #10 (blue) must be a number.")
	assert(type(alpha) == "number", "Arg #11 (alpha) must be a number.")
	assert(type(p11) == "number", "Arg #12 (p11) must be a number.")
	assert(type(p12) == "number", "Arg #13 (p12) must be a number.")

	local result = native_call(0x2D3B147AFAD49DE0, textureDict, textureName, x, y, width, height, p6, red, green, blue, alpha, p11, p12)
end
natives.graphics.draw_sprite_arx = natives.GRAPHICS.DRAW_SPRITE_ARX

--[[
Similar to _DRAW_SPRITE, but seems to be some kind of "interactive" sprite, at least used by render targets.
These seem to be the only dicts ever requested by this native:

prop_screen_biker_laptop
Prop_Screen_GR_Disruption
Prop_Screen_TaleOfUs
prop_screen_nightclub
Prop_Screen_IE_Adhawk
prop_screen_sm_free_trade_shipping
prop_screen_hacker_truck
MPDesktop
Prop_Screen_Nightclub
And a few others

]]
function natives.GRAPHICS.DRAW_SPRITE_NAMED_RENDERTARGET(--[[const char*]] textureDict, --[[const char*]] textureName, --[[float]] screenX, --[[float]] screenY, --[[float]] width, --[[float]] height, --[[float]] heading, --[[int]] red, --[[int]] green, --[[int]] blue, --[[int]] alpha, --[[Any]] p11) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.DRAW_SPRITE_NAMED_RENDERTARGET' due to disabled trusted mode")

	assert(type(textureDict) == "string", "Arg #1 (textureDict) must be a string.")
	assert(type(textureName) == "string", "Arg #2 (textureName) must be a string.")
	assert(type(screenX) == "number", "Arg #3 (screenX) must be a number.")
	assert(type(screenY) == "number", "Arg #4 (screenY) must be a number.")
	assert(type(width) == "number", "Arg #5 (width) must be a number.")
	assert(type(height) == "number", "Arg #6 (height) must be a number.")
	assert(type(heading) == "number", "Arg #7 (heading) must be a number.")
	assert(type(red) == "number", "Arg #8 (red) must be a number.")
	assert(type(green) == "number", "Arg #9 (green) must be a number.")
	assert(type(blue) == "number", "Arg #10 (blue) must be a number.")
	assert(type(alpha) == "number", "Arg #11 (alpha) must be a number.")
	assert(type(p11) == "number", "Arg #12 (p11) must be a number.")

	local result = native_call(0x2BC54A8188768488, textureDict, textureName, screenX, screenY, width, height, heading, red, green, blue, alpha, p11)
end
natives.graphics.draw_sprite_named_rendertarget = natives.GRAPHICS.DRAW_SPRITE_NAMED_RENDERTARGET

--[[
Similar to DRAW_SPRITE, but allows to specify the texture coordinates used to draw the sprite.

u1, v1 - texture coordinates for the top-left corner
u2, v2 - texture coordinates for the bottom-right corner
]]
function natives.GRAPHICS.DRAW_SPRITE_ARX_WITH_UV(--[[const char*]] textureDict, --[[const char*]] textureName, --[[float]] x, --[[float]] y, --[[float]] width, --[[float]] height, --[[float]] u1, --[[float]] v1, --[[float]] u2, --[[float]] v2, --[[float]] heading, --[[int]] red, --[[int]] green, --[[int]] blue, --[[int]] alpha, --[[Any]] p15) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.DRAW_SPRITE_ARX_WITH_UV' due to disabled trusted mode")

	assert(type(textureDict) == "string", "Arg #1 (textureDict) must be a string.")
	assert(type(textureName) == "string", "Arg #2 (textureName) must be a string.")
	assert(type(x) == "number", "Arg #3 (x) must be a number.")
	assert(type(y) == "number", "Arg #4 (y) must be a number.")
	assert(type(width) == "number", "Arg #5 (width) must be a number.")
	assert(type(height) == "number", "Arg #6 (height) must be a number.")
	assert(type(u1) == "number", "Arg #7 (u1) must be a number.")
	assert(type(v1) == "number", "Arg #8 (v1) must be a number.")
	assert(type(u2) == "number", "Arg #9 (u2) must be a number.")
	assert(type(v2) == "number", "Arg #10 (v2) must be a number.")
	assert(type(heading) == "number", "Arg #11 (heading) must be a number.")
	assert(type(red) == "number", "Arg #12 (red) must be a number.")
	assert(type(green) == "number", "Arg #13 (green) must be a number.")
	assert(type(blue) == "number", "Arg #14 (blue) must be a number.")
	assert(type(alpha) == "number", "Arg #15 (alpha) must be a number.")
	assert(type(p15) == "number", "Arg #16 (p15) must be a number.")

	local result = native_call(0x95812F9B26074726, textureDict, textureName, x, y, width, height, u1, v1, u2, v2, heading, red, green, blue, alpha, p15)
end
natives.graphics.draw_sprite_arx_with_uv = natives.GRAPHICS.DRAW_SPRITE_ARX_WITH_UV

--[[
Example:
GRAPHICS::ADD_ENTITY_ICON(a_0, "MP_Arrow");

I tried this and nothing happened...
]]
function natives.GRAPHICS.ADD_ENTITY_ICON(--[[Entity]] entity, --[[const char*]] icon) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.ADD_ENTITY_ICON' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(icon) == "string", "Arg #2 (icon) must be a string.")

	local result = native_call(0x9CD43EEE12BF4DD0, entity, icon)
	return result:__tointeger()
end
natives.graphics.add_entity_icon = natives.GRAPHICS.ADD_ENTITY_ICON

function natives.GRAPHICS.SET_ENTITY_ICON_VISIBILITY(--[[Entity]] entity, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_ENTITY_ICON_VISIBILITY' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xE0E8BEECCA96BA31, entity, toggle)
end
natives.graphics.set_entity_icon_visibility = natives.GRAPHICS.SET_ENTITY_ICON_VISIBILITY

function natives.GRAPHICS.SET_ENTITY_ICON_COLOR(--[[Entity]] entity, --[[int]] red, --[[int]] green, --[[int]] blue, --[[int]] alpha) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_ENTITY_ICON_COLOR' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(red) == "number", "Arg #2 (red) must be a number.")
	assert(type(green) == "number", "Arg #3 (green) must be a number.")
	assert(type(blue) == "number", "Arg #4 (blue) must be a number.")
	assert(type(alpha) == "number", "Arg #5 (alpha) must be a number.")

	local result = native_call(0x1D5F595CCAE2E238, entity, red, green, blue, alpha)
end
natives.graphics.set_entity_icon_color = natives.GRAPHICS.SET_ENTITY_ICON_COLOR

--[[
Sets the on-screen drawing origin for draw-functions (which is normally x=0,y=0 in the upper left corner of the screen) to a world coordinate.
From now on, the screen coordinate which displays the given world coordinate on the screen is seen as x=0,y=0.

Example in C#:
Vector3 boneCoord = somePed.GetBoneCoord(Bone.SKEL_Head);
Function.Call(Hash.SET_DRAW_ORIGIN, boneCoord.X, boneCoord.Y, boneCoord.Z, 0);
Function.Call(Hash.DRAW_SPRITE, "helicopterhud", "hud_corner", -0.01, -0.015, 0.013, 0.013, 0.0, 255, 0, 0, 200);
Function.Call(Hash.DRAW_SPRITE, "helicopterhud", "hud_corner", 0.01, -0.015, 0.013, 0.013, 90.0, 255, 0, 0, 200);
Function.Call(Hash.DRAW_SPRITE, "helicopterhud", "hud_corner", -0.01, 0.015, 0.013, 0.013, 270.0, 255, 0, 0, 200);
Function.Call(Hash.DRAW_SPRITE, "helicopterhud", "hud_corner", 0.01, 0.015, 0.013, 0.013, 180.0, 255, 0, 0, 200);
Function.Call(Hash.CLEAR_DRAW_ORIGIN);

Result: www11.pic-upload.de/19.06.15/bkqohvil2uao.jpg
If the pedestrian starts walking around now, the sprites are always around her head, no matter where the head is displayed on the screen.

This function also effects the drawing of texts and other UI-elements.
The effect can be reset by calling GRAPHICS::CLEAR_DRAW_ORIGIN().
]]
function natives.GRAPHICS.SET_DRAW_ORIGIN(--[[float]] x, --[[float]] y, --[[float]] z, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_DRAW_ORIGIN' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0xAA0008F3BBB8F416, x, y, z, p3)
end
natives.graphics.set_draw_origin = natives.GRAPHICS.SET_DRAW_ORIGIN

--[[
Resets the screen's draw-origin which was changed by the function GRAPHICS::SET_DRAW_ORIGIN(...) back to x=0,y=0.

See GRAPHICS::SET_DRAW_ORIGIN(...) for further information.
]]
function natives.GRAPHICS.CLEAR_DRAW_ORIGIN() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.CLEAR_DRAW_ORIGIN' due to disabled trusted mode")

	local result = native_call(0xFF0B610F6BE0D7AF)
end
natives.graphics.clear_draw_origin = natives.GRAPHICS.CLEAR_DRAW_ORIGIN

function natives.GRAPHICS.SET_BINK_MOVIE(--[[const char*]] name) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_BINK_MOVIE' due to disabled trusted mode")

	assert(type(name) == "string", "Arg #1 (name) must be a string.")

	local result = native_call(0x338D9F609FD632DB, name)
	return result:__tointeger()
end
natives.graphics.set_bink_movie = natives.GRAPHICS.SET_BINK_MOVIE

function natives.GRAPHICS.PLAY_BINK_MOVIE(--[[int]] binkMovie) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.PLAY_BINK_MOVIE' due to disabled trusted mode")

	assert(type(binkMovie) == "number", "Arg #1 (binkMovie) must be a number.")

	local result = native_call(0x70D2CC8A542A973C, binkMovie)
end
natives.graphics.play_bink_movie = natives.GRAPHICS.PLAY_BINK_MOVIE

function natives.GRAPHICS.STOP_BINK_MOVIE(--[[int]] binkMovie) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.STOP_BINK_MOVIE' due to disabled trusted mode")

	assert(type(binkMovie) == "number", "Arg #1 (binkMovie) must be a number.")

	local result = native_call(0x63606A61DE68898A, binkMovie)
end
natives.graphics.stop_bink_movie = natives.GRAPHICS.STOP_BINK_MOVIE

function natives.GRAPHICS.RELEASE_BINK_MOVIE(--[[int]] binkMovie) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.RELEASE_BINK_MOVIE' due to disabled trusted mode")

	assert(type(binkMovie) == "number", "Arg #1 (binkMovie) must be a number.")

	local result = native_call(0x04D950EEFA4EED8C, binkMovie)
end
natives.graphics.release_bink_movie = natives.GRAPHICS.RELEASE_BINK_MOVIE

function natives.GRAPHICS.DRAW_BINK_MOVIE(--[[int]] binkMovie, --[[float]] p1, --[[float]] p2, --[[float]] p3, --[[float]] p4, --[[float]] p5, --[[int]] r, --[[int]] g, --[[int]] b, --[[int]] a) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.DRAW_BINK_MOVIE' due to disabled trusted mode")

	assert(type(binkMovie) == "number", "Arg #1 (binkMovie) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")
	assert(type(r) == "number", "Arg #7 (r) must be a number.")
	assert(type(g) == "number", "Arg #8 (g) must be a number.")
	assert(type(b) == "number", "Arg #9 (b) must be a number.")
	assert(type(a) == "number", "Arg #10 (a) must be a number.")

	local result = native_call(0x7118E83EEB9F7238, binkMovie, p1, p2, p3, p4, p5, r, g, b, a)
end
natives.graphics.draw_bink_movie = natives.GRAPHICS.DRAW_BINK_MOVIE

--[[
In percentage: 0.0 - 100.0
]]
function natives.GRAPHICS.SET_BINK_MOVIE_TIME(--[[int]] binkMovie, --[[float]] progress) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_BINK_MOVIE_TIME' due to disabled trusted mode")

	assert(type(binkMovie) == "number", "Arg #1 (binkMovie) must be a number.")
	assert(type(progress) == "number", "Arg #2 (progress) must be a number.")

	local result = native_call(0x0CB6B3446855B57A, binkMovie, progress)
end
natives.graphics.set_bink_movie_time = natives.GRAPHICS.SET_BINK_MOVIE_TIME

--[[
In percentage: 0.0 - 100.0
]]
function natives.GRAPHICS.GET_BINK_MOVIE_TIME(--[[int]] binkMovie) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.GET_BINK_MOVIE_TIME' due to disabled trusted mode")

	assert(type(binkMovie) == "number", "Arg #1 (binkMovie) must be a number.")

	local result = native_call(0x8E17DDD6B9D5BF29, binkMovie)
	return result:__tonumber()
end
natives.graphics.get_bink_movie_time = natives.GRAPHICS.GET_BINK_MOVIE_TIME

--[[
binkMovie: Is return value from _SET_BINK_MOVIE. Has something to do with bink volume? (audRequestedSettings::SetVolumeCurveScale)
]]
function natives.GRAPHICS.SET_BINK_MOVIE_VOLUME(--[[int]] binkMovie, --[[float]] value) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_BINK_MOVIE_VOLUME' due to disabled trusted mode")

	assert(type(binkMovie) == "number", "Arg #1 (binkMovie) must be a number.")
	assert(type(value) == "number", "Arg #2 (value) must be a number.")

	local result = native_call(0xAFF33B1178172223, binkMovie, value)
end
natives.graphics.set_bink_movie_volume = natives.GRAPHICS.SET_BINK_MOVIE_VOLUME

--[[
Might be more appropriate in AUDIO?
]]
function natives.GRAPHICS.ATTACH_TV_AUDIO_TO_ENTITY(--[[Entity]] entity) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.ATTACH_TV_AUDIO_TO_ENTITY' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0x845BAD77CC770633, entity)
end
natives.graphics.attach_tv_audio_to_entity = natives.GRAPHICS.ATTACH_TV_AUDIO_TO_ENTITY

function natives.GRAPHICS.SET_BINK_MOVIE_AUDIO_FRONTEND(--[[int]] binkMovie, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_BINK_MOVIE_AUDIO_FRONTEND' due to disabled trusted mode")

	assert(type(binkMovie) == "number", "Arg #1 (binkMovie) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0xF816F2933752322D, binkMovie, p1)
end
natives.graphics.set_bink_movie_audio_frontend = natives.GRAPHICS.SET_BINK_MOVIE_AUDIO_FRONTEND

--[[
Probably changes tvs from being a 3d audio to being "global" audio
]]
function natives.GRAPHICS.SET_TV_AUDIO_FRONTEND(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_TV_AUDIO_FRONTEND' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x113D2C5DC57E1774, toggle)
end
natives.graphics.set_tv_audio_frontend = natives.GRAPHICS.SET_TV_AUDIO_FRONTEND

function natives.GRAPHICS.SET_BINK_SHOULD_SKIP(--[[int]] binkMovie, --[[BOOL]] bShouldSkip) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_BINK_SHOULD_SKIP' due to disabled trusted mode")

	assert(type(binkMovie) == "number", "Arg #1 (binkMovie) must be a number.")
	assert(type(bShouldSkip) == "boolean", "Arg #2 (bShouldSkip) must be a boolean.")

	local result = native_call(0x6805D58CAA427B72, binkMovie, bShouldSkip)
end
natives.graphics.set_bink_should_skip = natives.GRAPHICS.SET_BINK_SHOULD_SKIP

function natives.GRAPHICS.LOAD_MOVIE_MESH_SET(--[[const char*]] movieMeshSetName) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.LOAD_MOVIE_MESH_SET' due to disabled trusted mode")

	assert(type(movieMeshSetName) == "string", "Arg #1 (movieMeshSetName) must be a string.")

	local result = native_call(0xB66064452270E8F1, movieMeshSetName)
	return result:__tointeger()
end
natives.graphics.load_movie_mesh_set = natives.GRAPHICS.LOAD_MOVIE_MESH_SET

function natives.GRAPHICS.RELEASE_MOVIE_MESH_SET(--[[int]] movieMeshSet) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.RELEASE_MOVIE_MESH_SET' due to disabled trusted mode")

	assert(type(movieMeshSet) == "number", "Arg #1 (movieMeshSet) must be a number.")

	local result = native_call(0xEB119AA014E89183, movieMeshSet)
end
natives.graphics.release_movie_mesh_set = natives.GRAPHICS.RELEASE_MOVIE_MESH_SET

function natives.GRAPHICS.QUERY_MOVIE_MESH_SET_STATE(--[[Any]] p0) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.QUERY_MOVIE_MESH_SET_STATE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x9B6E70C5CEEF4EEB, p0)
	return result:__tointeger()
end
natives.graphics.query_movie_mesh_set_state = natives.GRAPHICS.QUERY_MOVIE_MESH_SET_STATE

--[[
int screenresx,screenresy;
GET_SCREEN_RESOLUTION(&screenresx,&screenresy);
]]
function natives.GRAPHICS.GET_SCREEN_RESOLUTION(--[[int*]] x, --[[int*]] y) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.GET_SCREEN_RESOLUTION' due to disabled trusted mode")

	assert(type(x) == "userdata", "Arg #1 (x) must be a userdata.")
	assert(type(y) == "userdata", "Arg #2 (y) must be a userdata.")

	local result = native_call(0x888D57E407E63624, x, y)
end
natives.graphics.get_screen_resolution = natives.GRAPHICS.GET_SCREEN_RESOLUTION

--[[
Returns current screen resolution.
]]
function natives.GRAPHICS.GET_ACTUAL_SCREEN_RESOLUTION(--[[int*]] x, --[[int*]] y) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.GET_ACTUAL_SCREEN_RESOLUTION' due to disabled trusted mode")

	assert(type(x) == "userdata", "Arg #1 (x) must be a userdata.")
	assert(type(y) == "userdata", "Arg #2 (y) must be a userdata.")

	local result = native_call(0x873C9F3104101DD3, x, y)
end
natives.graphics.get_actual_screen_resolution = natives.GRAPHICS.GET_ACTUAL_SCREEN_RESOLUTION

function natives.GRAPHICS.GET_ASPECT_RATIO(--[[BOOL]] b) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.GET_ASPECT_RATIO' due to disabled trusted mode")

	assert(type(b) == "boolean", "Arg #1 (b) must be a boolean.")

	local result = native_call(0xF1307EF624A80D87, b)
	return result:__tonumber()
end
natives.graphics.get_aspect_ratio = natives.GRAPHICS.GET_ASPECT_RATIO

function natives.GRAPHICS.GET_SCREEN_ASPECT_RATIO() -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.GET_SCREEN_ASPECT_RATIO' due to disabled trusted mode")

	local result = native_call(0xB2EBE8CBC58B90E9)
	return result:__tointeger()
end
natives.graphics.get_screen_aspect_ratio = natives.GRAPHICS.GET_SCREEN_ASPECT_RATIO

--[[
Setting Aspect Ratio Manually in game will return:

false - for Narrow format Aspect Ratios (3:2, 4:3, 5:4, etc. )
true - for Wide format Aspect Ratios (5:3, 16:9, 16:10, etc. )

Setting Aspect Ratio to "Auto" in game will return "false" or "true" based on the actual set Resolution Ratio.
]]
function natives.GRAPHICS.GET_IS_WIDESCREEN() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.GET_IS_WIDESCREEN' due to disabled trusted mode")

	local result = native_call(0x30CF4BDA4FCB1905)
	return result:__tointeger() ~= 0
end
natives.graphics.get_is_widescreen = natives.GRAPHICS.GET_IS_WIDESCREEN

--[[
false = Any resolution < 1280x720
true = Any resolution >= 1280x720
]]
function natives.GRAPHICS.GET_IS_HIDEF() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.GET_IS_HIDEF' due to disabled trusted mode")

	local result = native_call(0x84ED31191CC5D2C9)
	return result:__tointeger() ~= 0
end
natives.graphics.get_is_hidef = natives.GRAPHICS.GET_IS_HIDEF

--[[
*
]]
function natives.GRAPHICS.ADJUST_NEXT_POS_SIZE_AS_NORMALIZED_16_9() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.ADJUST_NEXT_POS_SIZE_AS_NORMALIZED_16_9' due to disabled trusted mode")

	local result = native_call(0xEFABC7722293DA7C)
end
natives.graphics.adjust_next_pos_size_as_normalized_16_9 = natives.GRAPHICS.ADJUST_NEXT_POS_SIZE_AS_NORMALIZED_16_9

--[[
Enables Night Vision.

Example:
C#: Function.Call(Hash.SET_NIGHTVISION, true);
C++: GRAPHICS::SET_NIGHTVISION(true);

BOOL toggle:
true = turns night vision on for your player.
false = turns night vision off for your player.
]]
function natives.GRAPHICS.SET_NIGHTVISION(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_NIGHTVISION' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x18F621F7A5B1F85D, toggle)
end
natives.graphics.set_nightvision = natives.GRAPHICS.SET_NIGHTVISION

function natives.GRAPHICS.GET_REQUESTINGNIGHTVISION() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.GET_REQUESTINGNIGHTVISION' due to disabled trusted mode")

	local result = native_call(0x35FB78DC42B7BD21)
	return result:__tointeger() ~= 0
end
natives.graphics.get_requestingnightvision = natives.GRAPHICS.GET_REQUESTINGNIGHTVISION

function natives.GRAPHICS.GET_USINGNIGHTVISION() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.GET_USINGNIGHTVISION' due to disabled trusted mode")

	local result = native_call(0x2202A3F42C8E5F79)
	return result:__tointeger() ~= 0
end
natives.graphics.get_usingnightvision = natives.GRAPHICS.GET_USINGNIGHTVISION

function natives.GRAPHICS.SET_EXPOSURETWEAK(--[[BOOL]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_EXPOSURETWEAK' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0xEF398BEEE4EF45F9, p0)
end
natives.graphics.set_exposuretweak = natives.GRAPHICS.SET_EXPOSURETWEAK

function natives.GRAPHICS.FORCE_EXPOSURE_READBACK(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.FORCE_EXPOSURE_READBACK' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x814AF7DCAACC597B, p0)
end
natives.graphics.force_exposure_readback = natives.GRAPHICS.FORCE_EXPOSURE_READBACK

function natives.GRAPHICS.OVERRIDE_NIGHTVISION_LIGHT_RANGE(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.OVERRIDE_NIGHTVISION_LIGHT_RANGE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x43FA7CBE20DAB219, p0)
end
natives.graphics.override_nightvision_light_range = natives.GRAPHICS.OVERRIDE_NIGHTVISION_LIGHT_RANGE

function natives.GRAPHICS.SET_NOISEOVERIDE(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_NOISEOVERIDE' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0xE787BF1C5CF823C9, toggle)
end
natives.graphics.set_noiseoveride = natives.GRAPHICS.SET_NOISEOVERIDE

function natives.GRAPHICS.SET_NOISINESSOVERIDE(--[[float]] value) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_NOISINESSOVERIDE' due to disabled trusted mode")

	assert(type(value) == "number", "Arg #1 (value) must be a number.")

	local result = native_call(0xCB6A7C3BB17A0C67, value)
end
natives.graphics.set_noisinessoveride = natives.GRAPHICS.SET_NOISINESSOVERIDE

--[[
Convert a world coordinate into its relative screen coordinate.  (WorldToScreen)

Returns a boolean; whether or not the operation was successful. It will return false if the coordinates given are not visible to the rendering camera.


For .NET users...

VB:
Public Shared Function World3DToScreen2d(pos as vector3) As Vector2

        Dim x2dp, y2dp As New Native.OutputArgument

        Native.Function.Call(Of Boolean)(Native.Hash.GET_SCREEN_COORD_FROM_WORLD_COORD , pos.x, pos.y, pos.z, x2dp, y2dp)
        Return New Vector2(x2dp.GetResult(Of Single), y2dp.GetResult(Of Single))
      
    End Function

C#:
Vector2 World3DToScreen2d(Vector3 pos)
    {
        var x2dp = new OutputArgument();
        var y2dp = new OutputArgument();

        Function.Call<bool>(Hash.GET_SCREEN_COORD_FROM_WORLD_COORD , pos.X, pos.Y, pos.Z, x2dp, y2dp);
        return new Vector2(x2dp.GetResult<float>(), y2dp.GetResult<float>());
    }
//USE VERY SMALL VALUES FOR THE SCALE OF RECTS/TEXT because it is dramatically larger on screen than in 3D, e.g '0.05' small.

Used to be called _WORLD3D_TO_SCREEN2D

I thought we lost you from the scene forever. It does seem however that calling SET_DRAW_ORIGIN then your natives, then ending it. Seems to work better for certain things such as keeping boxes around people for a predator missile e.g.
]]
function natives.GRAPHICS.GET_SCREEN_COORD_FROM_WORLD_COORD(--[[float]] worldX, --[[float]] worldY, --[[float]] worldZ, --[[float*]] screenX, --[[float*]] screenY) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.GET_SCREEN_COORD_FROM_WORLD_COORD' due to disabled trusted mode")

	assert(type(worldX) == "number", "Arg #1 (worldX) must be a number.")
	assert(type(worldY) == "number", "Arg #2 (worldY) must be a number.")
	assert(type(worldZ) == "number", "Arg #3 (worldZ) must be a number.")
	assert(type(screenX) == "userdata", "Arg #4 (screenX) must be a userdata.")
	assert(type(screenY) == "userdata", "Arg #5 (screenY) must be a userdata.")

	local result = native_call(0x34E82F05DF2974F5, worldX, worldY, worldZ, screenX, screenY)
	return result:__tointeger() ~= 0
end
natives.graphics.get_screen_coord_from_world_coord = natives.GRAPHICS.GET_SCREEN_COORD_FROM_WORLD_COORD

--[[
Returns the texture resolution of the passed texture dict+name.

Note: Most texture resolutions are doubled compared to the console version of the game.
]]
function natives.GRAPHICS.GET_TEXTURE_RESOLUTION(--[[const char*]] textureDict, --[[const char*]] textureName) -- Returns Vector3
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.GET_TEXTURE_RESOLUTION' due to disabled trusted mode")

	assert(type(textureDict) == "string", "Arg #1 (textureDict) must be a string.")
	assert(type(textureName) == "string", "Arg #2 (textureName) must be a string.")

	local result = native_call(0x35736EE65BD00C11, textureDict, textureName)
	return result:__tov3()
end
natives.graphics.get_texture_resolution = natives.GRAPHICS.GET_TEXTURE_RESOLUTION

--[[
Overriding ped badge texture to a passed texture. It's synced between players (even custom textures!), don't forget to request used dict on *all* clients to make it sync properly. Can be removed by passing empty strings.
]]
function natives.GRAPHICS.OVERRIDE_PED_CREW_LOGO_TEXTURE(--[[Ped]] ped, --[[const char*]] txd, --[[const char*]] txn) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.OVERRIDE_PED_CREW_LOGO_TEXTURE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(txd) == "string", "Arg #2 (txd) must be a string.")
	assert(type(txn) == "string", "Arg #3 (txn) must be a string.")

	local result = native_call(0x95EB5E34F821BABE, ped, txd, txn)
	return result:__tointeger() ~= 0
end
natives.graphics.override_ped_crew_logo_texture = natives.GRAPHICS.OVERRIDE_PED_CREW_LOGO_TEXTURE

function natives.GRAPHICS.SET_DISTANCE_BLUR_STRENGTH_OVERRIDE(--[[float]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_DISTANCE_BLUR_STRENGTH_OVERRIDE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xE2892E7E55D7073A, p0)
end
natives.graphics.set_distance_blur_strength_override = natives.GRAPHICS.SET_DISTANCE_BLUR_STRENGTH_OVERRIDE

--[[
Purpose of p0 and p1 unknown.
]]
function natives.GRAPHICS.SET_FLASH(--[[float]] p0, --[[float]] p1, --[[float]] fadeIn, --[[float]] duration, --[[float]] fadeOut) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_FLASH' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(fadeIn) == "number", "Arg #3 (fadeIn) must be a number.")
	assert(type(duration) == "number", "Arg #4 (duration) must be a number.")
	assert(type(fadeOut) == "number", "Arg #5 (fadeOut) must be a number.")

	local result = native_call(0x0AB84296FED9CFC6, p0, p1, fadeIn, duration, fadeOut)
end
natives.graphics.set_flash = natives.GRAPHICS.SET_FLASH

function natives.GRAPHICS.DISABLE_OCCLUSION_THIS_FRAME() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.DISABLE_OCCLUSION_THIS_FRAME' due to disabled trusted mode")

	local result = native_call(0x3669F1B198DCAA4F)
end
natives.graphics.disable_occlusion_this_frame = natives.GRAPHICS.DISABLE_OCCLUSION_THIS_FRAME

--[[
Does not affect weapons, particles, fire/explosions, flashlights or the sun.
When set to true, all emissive textures (including ped components that have light effects), street lights, building lights, vehicle lights, etc will all be turned off.

Used in Humane Labs Heist for EMP.

state: True turns off all artificial light sources in the map: buildings, street lights, car lights, etc. False turns them back on.
]]
function natives.GRAPHICS.SET_ARTIFICIAL_LIGHTS_STATE(--[[BOOL]] state) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_ARTIFICIAL_LIGHTS_STATE' due to disabled trusted mode")

	assert(type(state) == "boolean", "Arg #1 (state) must be a boolean.")

	local result = native_call(0x1268615ACE24D504, state)
end
natives.graphics.set_artificial_lights_state = natives.GRAPHICS.SET_ARTIFICIAL_LIGHTS_STATE

--[[
If "blackout" is enabled, this native allows you to ignore "blackout" for vehicles.
]]
function natives.GRAPHICS.SET_ARTIFICIAL_VEHICLE_LIGHTS_STATE(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_ARTIFICIAL_VEHICLE_LIGHTS_STATE' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0xE2B187C0939B3D32, toggle)
end
natives.graphics.set_artificial_vehicle_lights_state = natives.GRAPHICS.SET_ARTIFICIAL_VEHICLE_LIGHTS_STATE

function natives.GRAPHICS.DISABLE_HDTEX_THIS_FRAME() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.DISABLE_HDTEX_THIS_FRAME' due to disabled trusted mode")

	local result = native_call(0xC35A6D07C93802B2)
end
natives.graphics.disable_hdtex_this_frame = natives.GRAPHICS.DISABLE_HDTEX_THIS_FRAME

--[[
Creates a tracked point, useful for checking the visibility of a 3D point on screen.
]]
function natives.GRAPHICS.CREATE_TRACKED_POINT() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.CREATE_TRACKED_POINT' due to disabled trusted mode")

	local result = native_call(0xE2C9439ED45DEA60)
	return result:__tointeger()
end
natives.graphics.create_tracked_point = natives.GRAPHICS.CREATE_TRACKED_POINT

function natives.GRAPHICS.SET_TRACKED_POINT_INFO(--[[int]] point, --[[float]] x, --[[float]] y, --[[float]] z, --[[float]] radius) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_TRACKED_POINT_INFO' due to disabled trusted mode")

	assert(type(point) == "number", "Arg #1 (point) must be a number.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")
	assert(type(radius) == "number", "Arg #5 (radius) must be a number.")

	local result = native_call(0x164ECBB3CF750CB0, point, x, y, z, radius)
end
natives.graphics.set_tracked_point_info = natives.GRAPHICS.SET_TRACKED_POINT_INFO

function natives.GRAPHICS.IS_TRACKED_POINT_VISIBLE(--[[int]] point) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.IS_TRACKED_POINT_VISIBLE' due to disabled trusted mode")

	assert(type(point) == "number", "Arg #1 (point) must be a number.")

	local result = native_call(0xC45CCDAAC9221CA8, point)
	return result:__tointeger() ~= 0
end
natives.graphics.is_tracked_point_visible = natives.GRAPHICS.IS_TRACKED_POINT_VISIBLE

function natives.GRAPHICS.DESTROY_TRACKED_POINT(--[[int]] point) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.DESTROY_TRACKED_POINT' due to disabled trusted mode")

	assert(type(point) == "number", "Arg #1 (point) must be a number.")

	local result = native_call(0xB25DC90BAD56CA42, point)
end
natives.graphics.destroy_tracked_point = natives.GRAPHICS.DESTROY_TRACKED_POINT

--[[
This function is hard-coded to always return 0.
]]
function natives.GRAPHICS.SET_GRASS_CULL_SPHERE(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_GRASS_CULL_SPHERE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0xBE197EAA669238F4, p0, p1, p2, p3)
	return result:__tointeger()
end
natives.graphics.set_grass_cull_sphere = natives.GRAPHICS.SET_GRASS_CULL_SPHERE

--[[
This native does absolutely nothing, just a nullsub
]]
function natives.GRAPHICS.REMOVE_GRASS_CULL_SPHERE(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.REMOVE_GRASS_CULL_SPHERE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x61F95E5BB3E0A8C6, p0)
end
natives.graphics.remove_grass_cull_sphere = natives.GRAPHICS.REMOVE_GRASS_CULL_SPHERE

function natives.GRAPHICS.PROCGRASS_ENABLE_CULLSPHERE(--[[Any]] p0, --[[float]] p1, --[[float]] p2, --[[float]] p3, --[[float]] p4) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.PROCGRASS_ENABLE_CULLSPHERE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")

	local result = native_call(0xAE51BC858F32BA66, p0, p1, p2, p3, p4)
end
natives.graphics.procgrass_enable_cullsphere = natives.GRAPHICS.PROCGRASS_ENABLE_CULLSPHERE

function natives.GRAPHICS.PROCGRASS_DISABLE_CULLSPHERE(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.PROCGRASS_DISABLE_CULLSPHERE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x649C97D52332341A, p0)
end
natives.graphics.procgrass_disable_cullsphere = natives.GRAPHICS.PROCGRASS_DISABLE_CULLSPHERE

function natives.GRAPHICS.PROCGRASS_IS_CULLSPHERE_ENABLED(--[[Any]] p0) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.PROCGRASS_IS_CULLSPHERE_ENABLED' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x2C42340F916C5930, p0)
	return result:__tointeger()
end
natives.graphics.procgrass_is_cullsphere_enabled = natives.GRAPHICS.PROCGRASS_IS_CULLSPHERE_ENABLED

function natives.GRAPHICS.PROCGRASS_ENABLE_AMBSCALESCAN() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.PROCGRASS_ENABLE_AMBSCALESCAN' due to disabled trusted mode")

	local result = native_call(0x14FC5833464340A8)
end
natives.graphics.procgrass_enable_ambscalescan = natives.GRAPHICS.PROCGRASS_ENABLE_AMBSCALESCAN

function natives.GRAPHICS.PROCGRASS_DISABLE_AMBSCALESCAN() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.PROCGRASS_DISABLE_AMBSCALESCAN' due to disabled trusted mode")

	local result = native_call(0x0218BA067D249DEA)
end
natives.graphics.procgrass_disable_ambscalescan = natives.GRAPHICS.PROCGRASS_DISABLE_AMBSCALESCAN

function natives.GRAPHICS.DISABLE_PROCOBJ_CREATION() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.DISABLE_PROCOBJ_CREATION' due to disabled trusted mode")

	local result = native_call(0x1612C45F9E3E0D44)
end
natives.graphics.disable_procobj_creation = natives.GRAPHICS.DISABLE_PROCOBJ_CREATION

function natives.GRAPHICS.ENABLE_PROCOBJ_CREATION() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.ENABLE_PROCOBJ_CREATION' due to disabled trusted mode")

	local result = native_call(0x5DEBD9C4DC995692)
end
natives.graphics.enable_procobj_creation = natives.GRAPHICS.ENABLE_PROCOBJ_CREATION

function natives.GRAPHICS.GRASSBATCH_ENABLE_FLATTENING_EXT_IN_SPHERE(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3, --[[Any]] p4, --[[Any]] p5, --[[Any]] p6, --[[Any]] p7) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.GRASSBATCH_ENABLE_FLATTENING_EXT_IN_SPHERE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")
	assert(type(p6) == "number", "Arg #7 (p6) must be a number.")
	assert(type(p7) == "number", "Arg #8 (p7) must be a number.")

	local result = native_call(0xAAE9BE70EC7C69AB, p0, p1, p2, p3, p4, p5, p6, p7)
end
natives.graphics.grassbatch_enable_flattening_ext_in_sphere = natives.GRAPHICS.GRASSBATCH_ENABLE_FLATTENING_EXT_IN_SPHERE

--[[
Wraps 0xAAE9BE70EC7C69AB with FLT_MAX as p7, Jenkins: 0x73E96210?
]]
function natives.GRAPHICS.GRASSBATCH_ENABLE_FLATTENING_IN_SPHERE(--[[float]] x, --[[float]] y, --[[float]] z, --[[float]] radius, --[[float]] p4, --[[float]] p5, --[[float]] p6) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.GRASSBATCH_ENABLE_FLATTENING_IN_SPHERE' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(radius) == "number", "Arg #4 (radius) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")
	assert(type(p6) == "number", "Arg #7 (p6) must be a number.")

	local result = native_call(0x6D955F6A9E0295B1, x, y, z, radius, p4, p5, p6)
end
natives.graphics.grassbatch_enable_flattening_in_sphere = natives.GRAPHICS.GRASSBATCH_ENABLE_FLATTENING_IN_SPHERE

function natives.GRAPHICS.GRASSBATCH_DISABLE_FLATTENING() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.GRASSBATCH_DISABLE_FLATTENING' due to disabled trusted mode")

	local result = native_call(0x302C91AB2D477F7E)
end
natives.graphics.grassbatch_disable_flattening = natives.GRAPHICS.GRASSBATCH_DISABLE_FLATTENING

function natives.GRAPHICS.CASCADE_SHADOWS_INIT_SESSION() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.CASCADE_SHADOWS_INIT_SESSION' due to disabled trusted mode")

	local result = native_call(0x03FC694AE06C5A20)
end
natives.graphics.cascade_shadows_init_session = natives.GRAPHICS.CASCADE_SHADOWS_INIT_SESSION

function natives.GRAPHICS.CASCADE_SHADOWS_SET_CASCADE_BOUNDS(--[[Any]] p0, --[[BOOL]] p1, --[[float]] p2, --[[float]] p3, --[[float]] p4, --[[float]] p5, --[[BOOL]] p6, --[[float]] p7) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.CASCADE_SHADOWS_SET_CASCADE_BOUNDS' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")
	assert(type(p6) == "boolean", "Arg #7 (p6) must be a boolean.")
	assert(type(p7) == "number", "Arg #8 (p7) must be a number.")

	local result = native_call(0xD2936CAB8B58FCBD, p0, p1, p2, p3, p4, p5, p6, p7)
end
natives.graphics.cascade_shadows_set_cascade_bounds = natives.GRAPHICS.CASCADE_SHADOWS_SET_CASCADE_BOUNDS

function natives.GRAPHICS.CASCADE_SHADOWS_SET_CASCADE_BOUNDS_SCALE(--[[float]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.CASCADE_SHADOWS_SET_CASCADE_BOUNDS_SCALE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x5F0F3F56635809EF, p0)
end
natives.graphics.cascade_shadows_set_cascade_bounds_scale = natives.GRAPHICS.CASCADE_SHADOWS_SET_CASCADE_BOUNDS_SCALE

function natives.GRAPHICS.CASCADE_SHADOWS_SET_ENTITY_TRACKER_SCALE(--[[float]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.CASCADE_SHADOWS_SET_ENTITY_TRACKER_SCALE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x5E9DAF5A20F15908, p0)
end
natives.graphics.cascade_shadows_set_entity_tracker_scale = natives.GRAPHICS.CASCADE_SHADOWS_SET_ENTITY_TRACKER_SCALE

function natives.GRAPHICS.CASCADE_SHADOWS_SET_SPLIT_Z_EXP_WEIGHT(--[[float]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.CASCADE_SHADOWS_SET_SPLIT_Z_EXP_WEIGHT' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x36F6626459D91457, p0)
end
natives.graphics.cascade_shadows_set_split_z_exp_weight = natives.GRAPHICS.CASCADE_SHADOWS_SET_SPLIT_Z_EXP_WEIGHT

function natives.GRAPHICS.CASCADE_SHADOWS_SET_BOUND_POSITION(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.CASCADE_SHADOWS_SET_BOUND_POSITION' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x259BA6D4E6F808F1, p0)
end
natives.graphics.cascade_shadows_set_bound_position = natives.GRAPHICS.CASCADE_SHADOWS_SET_BOUND_POSITION

--[[
When this is set to ON, shadows only draw as you get nearer.

When OFF, they draw from a further distance.
]]
function natives.GRAPHICS.CASCADE_SHADOWS_ENABLE_ENTITY_TRACKER(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.CASCADE_SHADOWS_ENABLE_ENTITY_TRACKER' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x80ECBC0C856D3B0B, toggle)
end
natives.graphics.cascade_shadows_enable_entity_tracker = natives.GRAPHICS.CASCADE_SHADOWS_ENABLE_ENTITY_TRACKER

function natives.GRAPHICS.CASCADE_SHADOWS_SET_SCREEN_SIZE_CHECK_ENABLED(--[[BOOL]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.CASCADE_SHADOWS_SET_SCREEN_SIZE_CHECK_ENABLED' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0x25FC3E33A31AD0C9, p0)
end
natives.graphics.cascade_shadows_set_screen_size_check_enabled = natives.GRAPHICS.CASCADE_SHADOWS_SET_SCREEN_SIZE_CHECK_ENABLED

--[[
Possible values:
"CSM_ST_POINT"
"CSM_ST_LINEAR"
"CSM_ST_TWOTAP"
"CSM_ST_BOX3x3"
"CSM_ST_BOX4x4"
"CSM_ST_DITHER2_LINEAR"
"CSM_ST_CUBIC"
"CSM_ST_DITHER4"
"CSM_ST_DITHER16"
"CSM_ST_SOFT16"
"CSM_ST_DITHER16_RPDB"
"CSM_ST_POISSON16_RPDB_GNORM"
"CSM_ST_HIGHRES_BOX4x4"
"CSM_ST_CLOUDS_SIMPLE"
"CSM_ST_CLOUDS_LINEAR"
"CSM_ST_CLOUDS_TWOTAP"
"CSM_ST_CLOUDS_BOX3x3"
"CSM_ST_CLOUDS_BOX4x4"
"CSM_ST_CLOUDS_DITHER2_LINEAR"
"CSM_ST_CLOUDS_SOFT16"
"CSM_ST_CLOUDS_DITHER16_RPDB"
"CSM_ST_CLOUDS_POISSON16_RPDB_GNORM"
]]
function natives.GRAPHICS.CASCADE_SHADOWS_SET_SHADOW_SAMPLE_TYPE(--[[const char*]] type) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.CASCADE_SHADOWS_SET_SHADOW_SAMPLE_TYPE' due to disabled trusted mode")

	assert(type(type) == "string", "Arg #1 (type) must be a string.")

	local result = native_call(0xB11D94BC55F41932, type)
end
natives.graphics.cascade_shadows_set_shadow_sample_type = natives.GRAPHICS.CASCADE_SHADOWS_SET_SHADOW_SAMPLE_TYPE

function natives.GRAPHICS.CASCADE_SHADOWS_CLEAR_SHADOW_SAMPLE_TYPE() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.CASCADE_SHADOWS_CLEAR_SHADOW_SAMPLE_TYPE' due to disabled trusted mode")

	local result = native_call(0x27CB772218215325)
end
natives.graphics.cascade_shadows_clear_shadow_sample_type = natives.GRAPHICS.CASCADE_SHADOWS_CLEAR_SHADOW_SAMPLE_TYPE

function natives.GRAPHICS.CASCADE_SHADOWS_SET_AIRCRAFT_MODE(--[[BOOL]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.CASCADE_SHADOWS_SET_AIRCRAFT_MODE' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0x6DDBF9DFFC4AC080, p0)
end
natives.graphics.cascade_shadows_set_aircraft_mode = natives.GRAPHICS.CASCADE_SHADOWS_SET_AIRCRAFT_MODE

function natives.GRAPHICS.CASCADE_SHADOWS_SET_DYNAMIC_DEPTH_MODE(--[[BOOL]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.CASCADE_SHADOWS_SET_DYNAMIC_DEPTH_MODE' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0xD39D13C9FEBF0511, p0)
end
natives.graphics.cascade_shadows_set_dynamic_depth_mode = natives.GRAPHICS.CASCADE_SHADOWS_SET_DYNAMIC_DEPTH_MODE

function natives.GRAPHICS.CASCADE_SHADOWS_SET_DYNAMIC_DEPTH_VALUE(--[[float]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.CASCADE_SHADOWS_SET_DYNAMIC_DEPTH_VALUE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x02AC28F3A01FA04A, p0)
end
natives.graphics.cascade_shadows_set_dynamic_depth_value = natives.GRAPHICS.CASCADE_SHADOWS_SET_DYNAMIC_DEPTH_VALUE

function natives.GRAPHICS.CASCADE_SHADOWS_ENABLE_FREEZER(--[[BOOL]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.CASCADE_SHADOWS_ENABLE_FREEZER' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0x0AE73D8DF3A762B2, p0)
end
natives.graphics.cascade_shadows_enable_freezer = natives.GRAPHICS.CASCADE_SHADOWS_ENABLE_FREEZER

function natives.GRAPHICS.WATER_REFLECTION_SET_SCRIPT_OBJECT_VISIBILITY(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.WATER_REFLECTION_SET_SCRIPT_OBJECT_VISIBILITY' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xCA465D9CC0D231BA, p0)
end
natives.graphics.water_reflection_set_script_object_visibility = natives.GRAPHICS.WATER_REFLECTION_SET_SCRIPT_OBJECT_VISIBILITY

function natives.GRAPHICS.GOLF_TRAIL_SET_ENABLED(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.GOLF_TRAIL_SET_ENABLED' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0xA51C4B86B71652AE, toggle)
end
natives.graphics.golf_trail_set_enabled = natives.GRAPHICS.GOLF_TRAIL_SET_ENABLED

--[[
p8 seems to always be false.
]]
function natives.GRAPHICS.GOLF_TRAIL_SET_PATH(--[[float]] p0, --[[float]] p1, --[[float]] p2, --[[float]] p3, --[[float]] p4, --[[float]] p5, --[[float]] p6, --[[float]] p7, --[[BOOL]] p8) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.GOLF_TRAIL_SET_PATH' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")
	assert(type(p6) == "number", "Arg #7 (p6) must be a number.")
	assert(type(p7) == "number", "Arg #8 (p7) must be a number.")
	assert(type(p8) == "boolean", "Arg #9 (p8) must be a boolean.")

	local result = native_call(0x312342E1A4874F3F, p0, p1, p2, p3, p4, p5, p6, p7, p8)
end
natives.graphics.golf_trail_set_path = natives.GRAPHICS.GOLF_TRAIL_SET_PATH

function natives.GRAPHICS.GOLF_TRAIL_SET_RADIUS(--[[float]] p0, --[[float]] p1, --[[float]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.GOLF_TRAIL_SET_RADIUS' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0x2485D34E50A22E84, p0, p1, p2)
end
natives.graphics.golf_trail_set_radius = natives.GRAPHICS.GOLF_TRAIL_SET_RADIUS

function natives.GRAPHICS.GOLF_TRAIL_SET_COLOUR(--[[int]] p0, --[[int]] p1, --[[int]] p2, --[[int]] p3, --[[int]] p4, --[[int]] p5, --[[int]] p6, --[[int]] p7, --[[int]] p8, --[[int]] p9, --[[int]] p10, --[[int]] p11) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.GOLF_TRAIL_SET_COLOUR' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")
	assert(type(p6) == "number", "Arg #7 (p6) must be a number.")
	assert(type(p7) == "number", "Arg #8 (p7) must be a number.")
	assert(type(p8) == "number", "Arg #9 (p8) must be a number.")
	assert(type(p9) == "number", "Arg #10 (p9) must be a number.")
	assert(type(p10) == "number", "Arg #11 (p10) must be a number.")
	assert(type(p11) == "number", "Arg #12 (p11) must be a number.")

	local result = native_call(0x12995F2E53FFA601, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11)
end
natives.graphics.golf_trail_set_colour = natives.GRAPHICS.GOLF_TRAIL_SET_COLOUR

function natives.GRAPHICS.GOLF_TRAIL_SET_TESSELLATION(--[[int]] p0, --[[int]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.GOLF_TRAIL_SET_TESSELLATION' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xDBAA5EC848BA2D46, p0, p1)
end
natives.graphics.golf_trail_set_tessellation = natives.GRAPHICS.GOLF_TRAIL_SET_TESSELLATION

function natives.GRAPHICS.GOLF_TRAIL_SET_FIXED_CONTROL_POINT_ENABLE(--[[BOOL]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.GOLF_TRAIL_SET_FIXED_CONTROL_POINT_ENABLE' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0xC0416B061F2B7E5E, p0)
end
natives.graphics.golf_trail_set_fixed_control_point_enable = natives.GRAPHICS.GOLF_TRAIL_SET_FIXED_CONTROL_POINT_ENABLE

--[[
12 matches across 4 scripts. All 4 scripts were job creators.

type ranged from 0 - 2.
p4 was always 0.2f. Likely scale.
assuming p5 - p8 is RGBA, the graphic is always yellow (255, 255, 0, 255).

Tested but noticed nothing.
]]
function natives.GRAPHICS.GOLF_TRAIL_SET_FIXED_CONTROL_POINT(--[[int]] type, --[[float]] xPos, --[[float]] yPos, --[[float]] zPos, --[[float]] p4, --[[int]] red, --[[int]] green, --[[int]] blue, --[[int]] alpha) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.GOLF_TRAIL_SET_FIXED_CONTROL_POINT' due to disabled trusted mode")

	assert(type(type) == "number", "Arg #1 (type) must be a number.")
	assert(type(xPos) == "number", "Arg #2 (xPos) must be a number.")
	assert(type(yPos) == "number", "Arg #3 (yPos) must be a number.")
	assert(type(zPos) == "number", "Arg #4 (zPos) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(red) == "number", "Arg #6 (red) must be a number.")
	assert(type(green) == "number", "Arg #7 (green) must be a number.")
	assert(type(blue) == "number", "Arg #8 (blue) must be a number.")
	assert(type(alpha) == "number", "Arg #9 (alpha) must be a number.")

	local result = native_call(0xB1BB03742917A5D6, type, xPos, yPos, zPos, p4, red, green, blue, alpha)
end
natives.graphics.golf_trail_set_fixed_control_point = natives.GRAPHICS.GOLF_TRAIL_SET_FIXED_CONTROL_POINT

--[[
Only appeared in Golf & Golf_mp. Parameters were all ptrs
]]
function natives.GRAPHICS.GOLF_TRAIL_SET_SHADER_PARAMS(--[[float]] p0, --[[float]] p1, --[[float]] p2, --[[float]] p3, --[[float]] p4) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.GOLF_TRAIL_SET_SHADER_PARAMS' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")

	local result = native_call(0x9CFDD90B2B844BF7, p0, p1, p2, p3, p4)
end
natives.graphics.golf_trail_set_shader_params = natives.GRAPHICS.GOLF_TRAIL_SET_SHADER_PARAMS

function natives.GRAPHICS.GOLF_TRAIL_SET_FACING(--[[BOOL]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.GOLF_TRAIL_SET_FACING' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0x06F761EA47C1D3ED, p0)
end
natives.graphics.golf_trail_set_facing = natives.GRAPHICS.GOLF_TRAIL_SET_FACING

function natives.GRAPHICS.GOLF_TRAIL_GET_MAX_HEIGHT() -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.GOLF_TRAIL_GET_MAX_HEIGHT' due to disabled trusted mode")

	local result = native_call(0xA4819F5E23E2FFAD)
	return result:__tonumber()
end
natives.graphics.golf_trail_get_max_height = natives.GRAPHICS.GOLF_TRAIL_GET_MAX_HEIGHT

function natives.GRAPHICS.GOLF_TRAIL_GET_VISUAL_CONTROL_POINT(--[[int]] p0) -- Returns Vector3
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.GOLF_TRAIL_GET_VISUAL_CONTROL_POINT' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xA4664972A9B8F8BA, p0)
	return result:__tov3()
end
natives.graphics.golf_trail_get_visual_control_point = natives.GRAPHICS.GOLF_TRAIL_GET_VISUAL_CONTROL_POINT

--[[
Toggles Heatvision on/off.
]]
function natives.GRAPHICS.SET_SEETHROUGH(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_SEETHROUGH' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x7E08924259E08CE0, toggle)
end
natives.graphics.set_seethrough = natives.GRAPHICS.SET_SEETHROUGH

function natives.GRAPHICS.GET_USINGSEETHROUGH() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.GET_USINGSEETHROUGH' due to disabled trusted mode")

	local result = native_call(0x44B80ABAB9D80BD3)
	return result:__tointeger() ~= 0
end
natives.graphics.get_usingseethrough = natives.GRAPHICS.GET_USINGSEETHROUGH

function natives.GRAPHICS.SEETHROUGH_RESET() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SEETHROUGH_RESET' due to disabled trusted mode")

	local result = native_call(0x70A64C0234EF522C)
end
natives.graphics.seethrough_reset = natives.GRAPHICS.SEETHROUGH_RESET

function natives.GRAPHICS.SEETHROUGH_SET_FADE_STARTDISTANCE(--[[float]] distance) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SEETHROUGH_SET_FADE_STARTDISTANCE' due to disabled trusted mode")

	assert(type(distance) == "number", "Arg #1 (distance) must be a number.")

	local result = native_call(0xA78DE25577300BA1, distance)
end
natives.graphics.seethrough_set_fade_startdistance = natives.GRAPHICS.SEETHROUGH_SET_FADE_STARTDISTANCE

function natives.GRAPHICS.SEETHROUGH_SET_FADE_ENDDISTANCE(--[[float]] distance) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SEETHROUGH_SET_FADE_ENDDISTANCE' due to disabled trusted mode")

	assert(type(distance) == "number", "Arg #1 (distance) must be a number.")

	local result = native_call(0x9D75795B9DC6EBBF, distance)
end
natives.graphics.seethrough_set_fade_enddistance = natives.GRAPHICS.SEETHROUGH_SET_FADE_ENDDISTANCE

function natives.GRAPHICS.SEETHROUGH_GET_MAX_THICKNESS() -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SEETHROUGH_GET_MAX_THICKNESS' due to disabled trusted mode")

	local result = native_call(0x43DBAE39626CE83F)
	return result:__tonumber()
end
natives.graphics.seethrough_get_max_thickness = natives.GRAPHICS.SEETHROUGH_GET_MAX_THICKNESS

--[[
0.0 = you will not be able to see people behind the walls. 50.0 and more = you will see everyone through the walls. More value is "better" view. See https://gfycat.com/FirmFlippantGourami
min: 1.0
max: 10000.0
]]
function natives.GRAPHICS.SEETHROUGH_SET_MAX_THICKNESS(--[[float]] thickness) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SEETHROUGH_SET_MAX_THICKNESS' due to disabled trusted mode")

	assert(type(thickness) == "number", "Arg #1 (thickness) must be a number.")

	local result = native_call(0x0C8FAC83902A62DF, thickness)
end
natives.graphics.seethrough_set_max_thickness = natives.GRAPHICS.SEETHROUGH_SET_MAX_THICKNESS

function natives.GRAPHICS.SEETHROUGH_SET_NOISE_MIN(--[[float]] amount) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SEETHROUGH_SET_NOISE_MIN' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")

	local result = native_call(0xFF5992E1C9E65D05, amount)
end
natives.graphics.seethrough_set_noise_min = natives.GRAPHICS.SEETHROUGH_SET_NOISE_MIN

function natives.GRAPHICS.SEETHROUGH_SET_NOISE_MAX(--[[float]] amount) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SEETHROUGH_SET_NOISE_MAX' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")

	local result = native_call(0xFEBFBFDFB66039DE, amount)
end
natives.graphics.seethrough_set_noise_max = natives.GRAPHICS.SEETHROUGH_SET_NOISE_MAX

function natives.GRAPHICS.SEETHROUGH_SET_HILIGHT_INTENSITY(--[[float]] intensity) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SEETHROUGH_SET_HILIGHT_INTENSITY' due to disabled trusted mode")

	assert(type(intensity) == "number", "Arg #1 (intensity) must be a number.")

	local result = native_call(0x19E50EB6E33E1D28, intensity)
end
natives.graphics.seethrough_set_hilight_intensity = natives.GRAPHICS.SEETHROUGH_SET_HILIGHT_INTENSITY

function natives.GRAPHICS.SEETHROUGH_SET_HIGHLIGHT_NOISE(--[[float]] noise) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SEETHROUGH_SET_HIGHLIGHT_NOISE' due to disabled trusted mode")

	assert(type(noise) == "number", "Arg #1 (noise) must be a number.")

	local result = native_call(0x1636D7FC127B10D2, noise)
end
natives.graphics.seethrough_set_highlight_noise = natives.GRAPHICS.SEETHROUGH_SET_HIGHLIGHT_NOISE

--[[
min: 0.0
max: 0.75
]]
function natives.GRAPHICS.SEETHROUGH_SET_HEATSCALE(--[[int]] index, --[[float]] heatScale) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SEETHROUGH_SET_HEATSCALE' due to disabled trusted mode")

	assert(type(index) == "number", "Arg #1 (index) must be a number.")
	assert(type(heatScale) == "number", "Arg #2 (heatScale) must be a number.")

	local result = native_call(0xD7D0B00177485411, index, heatScale)
end
natives.graphics.seethrough_set_heatscale = natives.GRAPHICS.SEETHROUGH_SET_HEATSCALE

function natives.GRAPHICS.SEETHROUGH_SET_COLOR_NEAR(--[[int]] red, --[[int]] green, --[[int]] blue) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SEETHROUGH_SET_COLOR_NEAR' due to disabled trusted mode")

	assert(type(red) == "number", "Arg #1 (red) must be a number.")
	assert(type(green) == "number", "Arg #2 (green) must be a number.")
	assert(type(blue) == "number", "Arg #3 (blue) must be a number.")

	local result = native_call(0x1086127B3A63505E, red, green, blue)
end
natives.graphics.seethrough_set_color_near = natives.GRAPHICS.SEETHROUGH_SET_COLOR_NEAR

--[[
Setter for GET_MOTIONBLUR_MAX_VEL_SCALER
]]
function natives.GRAPHICS.SET_MOTIONBLUR_MAX_VEL_SCALER(--[[float]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_MOTIONBLUR_MAX_VEL_SCALER' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xB3C641F3630BF6DA, p0)
end
natives.graphics.set_motionblur_max_vel_scaler = natives.GRAPHICS.SET_MOTIONBLUR_MAX_VEL_SCALER

--[[
Getter for SET_MOTIONBLUR_MAX_VEL_SCALER
]]
function natives.GRAPHICS.GET_MOTIONBLUR_MAX_VEL_SCALER() -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.GET_MOTIONBLUR_MAX_VEL_SCALER' due to disabled trusted mode")

	local result = native_call(0xE59343E9E96529E7)
	return result:__tonumber()
end
natives.graphics.get_motionblur_max_vel_scaler = natives.GRAPHICS.GET_MOTIONBLUR_MAX_VEL_SCALER

function natives.GRAPHICS.SET_FORCE_MOTIONBLUR(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_FORCE_MOTIONBLUR' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x6A51F78772175A51, toggle)
end
natives.graphics.set_force_motionblur = natives.GRAPHICS.SET_FORCE_MOTIONBLUR

function natives.GRAPHICS.TOGGLE_PLAYER_DAMAGE_OVERLAY(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.TOGGLE_PLAYER_DAMAGE_OVERLAY' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0xE63D7C6EECECB66B, toggle)
end
natives.graphics.toggle_player_damage_overlay = natives.GRAPHICS.TOGGLE_PLAYER_DAMAGE_OVERLAY

--[[
Sets an unknown value related to timecycles.
]]
function natives.GRAPHICS.RESET_ADAPTATION(--[[int]] unk) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.RESET_ADAPTATION' due to disabled trusted mode")

	assert(type(unk) == "number", "Arg #1 (unk) must be a number.")

	local result = native_call(0xE3E2C1B4C59DBC77, unk)
end
natives.graphics.reset_adaptation = natives.GRAPHICS.RESET_ADAPTATION

--[[
time in ms to transition to fully blurred screen
]]
function natives.GRAPHICS.TRIGGER_SCREENBLUR_FADE_IN(--[[float]] transitionTime) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.TRIGGER_SCREENBLUR_FADE_IN' due to disabled trusted mode")

	assert(type(transitionTime) == "number", "Arg #1 (transitionTime) must be a number.")

	local result = native_call(0xA328A24AAA6B7FDC, transitionTime)
	return result:__tointeger() ~= 0
end
natives.graphics.trigger_screenblur_fade_in = natives.GRAPHICS.TRIGGER_SCREENBLUR_FADE_IN

--[[
time in ms to transition from fully blurred to normal
]]
function natives.GRAPHICS.TRIGGER_SCREENBLUR_FADE_OUT(--[[float]] transitionTime) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.TRIGGER_SCREENBLUR_FADE_OUT' due to disabled trusted mode")

	assert(type(transitionTime) == "number", "Arg #1 (transitionTime) must be a number.")

	local result = native_call(0xEFACC8AEF94430D5, transitionTime)
	return result:__tointeger() ~= 0
end
natives.graphics.trigger_screenblur_fade_out = natives.GRAPHICS.TRIGGER_SCREENBLUR_FADE_OUT

function natives.GRAPHICS.DISABLE_SCREENBLUR_FADE() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.DISABLE_SCREENBLUR_FADE' due to disabled trusted mode")

	local result = native_call(0xDE81239437E8C5A8)
end
natives.graphics.disable_screenblur_fade = natives.GRAPHICS.DISABLE_SCREENBLUR_FADE

function natives.GRAPHICS.GET_SCREENBLUR_FADE_CURRENT_TIME() -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.GET_SCREENBLUR_FADE_CURRENT_TIME' due to disabled trusted mode")

	local result = native_call(0x5CCABFFCA31DDE33)
	return result:__tonumber()
end
natives.graphics.get_screenblur_fade_current_time = natives.GRAPHICS.GET_SCREENBLUR_FADE_CURRENT_TIME

--[[
Returns whether screen transition to blur/from blur is running.
]]
function natives.GRAPHICS.IS_SCREENBLUR_FADE_RUNNING() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.IS_SCREENBLUR_FADE_RUNNING' due to disabled trusted mode")

	local result = native_call(0x7B226C785A52A0A9)
	return result:__tointeger() ~= 0
end
natives.graphics.is_screenblur_fade_running = natives.GRAPHICS.IS_SCREENBLUR_FADE_RUNNING

function natives.GRAPHICS.TOGGLE_PAUSED_RENDERPHASES(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.TOGGLE_PAUSED_RENDERPHASES' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0xDFC252D8A3E15AB7, toggle)
end
natives.graphics.toggle_paused_renderphases = natives.GRAPHICS.TOGGLE_PAUSED_RENDERPHASES

function natives.GRAPHICS.GET_TOGGLE_PAUSED_RENDERPHASES_STATUS() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.GET_TOGGLE_PAUSED_RENDERPHASES_STATUS' due to disabled trusted mode")

	local result = native_call(0xEB3DAC2C86001E5E)
	return result:__tointeger() ~= 0
end
natives.graphics.get_toggle_paused_renderphases_status = natives.GRAPHICS.GET_TOGGLE_PAUSED_RENDERPHASES_STATUS

function natives.GRAPHICS.RESET_PAUSED_RENDERPHASES() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.RESET_PAUSED_RENDERPHASES' due to disabled trusted mode")

	local result = native_call(0xE1C8709406F2C41C)
end
natives.graphics.reset_paused_renderphases = natives.GRAPHICS.RESET_PAUSED_RENDERPHASES

function natives.GRAPHICS.GRAB_PAUSEMENU_OWNERSHIP() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.GRAB_PAUSEMENU_OWNERSHIP' due to disabled trusted mode")

	local result = native_call(0x851CD923176EBA7C)
end
natives.graphics.grab_pausemenu_ownership = natives.GRAPHICS.GRAB_PAUSEMENU_OWNERSHIP

--[[
Every p2 - p5 occurrence was 0f.
]]
function natives.GRAPHICS.SET_HIDOF_OVERRIDE(--[[BOOL]] p0, --[[BOOL]] p1, --[[float]] nearplaneOut, --[[float]] nearplaneIn, --[[float]] farplaneOut, --[[float]] farplaneIn) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_HIDOF_OVERRIDE' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(nearplaneOut) == "number", "Arg #3 (nearplaneOut) must be a number.")
	assert(type(nearplaneIn) == "number", "Arg #4 (nearplaneIn) must be a number.")
	assert(type(farplaneOut) == "number", "Arg #5 (farplaneOut) must be a number.")
	assert(type(farplaneIn) == "number", "Arg #6 (farplaneIn) must be a number.")

	local result = native_call(0xBA3D65906822BED5, p0, p1, nearplaneOut, nearplaneIn, farplaneOut, farplaneIn)
end
natives.graphics.set_hidof_override = natives.GRAPHICS.SET_HIDOF_OVERRIDE

function natives.GRAPHICS.SET_LOCK_ADAPTIVE_DOF_DISTANCE(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_LOCK_ADAPTIVE_DOF_DISTANCE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xB569F41F3E7E83A4, p0)
end
natives.graphics.set_lock_adaptive_dof_distance = natives.GRAPHICS.SET_LOCK_ADAPTIVE_DOF_DISTANCE

function natives.GRAPHICS.PHONEPHOTOEDITOR_TOGGLE(--[[BOOL]] p0) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.PHONEPHOTOEDITOR_TOGGLE' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0x7AC24EAB6D74118D, p0)
	return result:__tointeger() ~= 0
end
natives.graphics.phonephotoeditor_toggle = natives.GRAPHICS.PHONEPHOTOEDITOR_TOGGLE

function natives.GRAPHICS.PHONEPHOTOEDITOR_IS_ACTIVE() -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.PHONEPHOTOEDITOR_IS_ACTIVE' due to disabled trusted mode")

	local result = native_call(0xBCEDB009461DA156)
	return result:__tointeger()
end
natives.graphics.phonephotoeditor_is_active = natives.GRAPHICS.PHONEPHOTOEDITOR_IS_ACTIVE

function natives.GRAPHICS.PHONEPHOTOEDITOR_SET_FRAME_TXD(--[[const char*]] textureDict, --[[BOOL]] p1) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.PHONEPHOTOEDITOR_SET_FRAME_TXD' due to disabled trusted mode")

	assert(type(textureDict) == "string", "Arg #1 (textureDict) must be a string.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0x27FEB5254759CDE3, textureDict, p1)
	return result:__tointeger() ~= 0
end
natives.graphics.phonephotoeditor_set_frame_txd = natives.GRAPHICS.PHONEPHOTOEDITOR_SET_FRAME_TXD

--[[
GRAPHICS::START_PARTICLE_FX_NON_LOOPED_AT_COORD("scr_paleto_roof_impact", -140.8576f, 6420.789f, 41.1391f, 0f, 0f, 267.3957f, 0x3F800000, 0, 0, 0);

Axis - Invert Axis Flags

Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json


-------------------------------------------------------------------
C#

Function.Call<int>(Hash.START_PARTICLE_FX_NON_LOOPED_AT_COORD, = you are calling this function.

char *effectname = This is an in-game effect name, for e.g. "scr_fbi4_trucks_crash" is used to give the effects when truck crashes etc

float x, y, z pos = this one is Simple, you just have to declare, where do you want this effect to take place at, so declare the ordinates

float xrot, yrot, zrot = Again simple? just mention the value in case if you want the effect to rotate.

float scale = is declare the scale of the effect, this may vary as per the effects for e.g 1.0f

bool xaxis, yaxis, zaxis = To bool the axis values.

example:
Function.Call<int>(Hash.START_PARTICLE_FX_NON_LOOPED_AT_COORD, "scr_fbi4_trucks_crash", GTA.Game.Player.Character.Position.X, GTA.Game.Player.Character.Position.Y, GTA.Game.Player.Character.Position.Z + 4f, 0, 0, 0, 5.5f, 0, 0, 0);
]]
function natives.GRAPHICS.START_PARTICLE_FX_NON_LOOPED_AT_COORD(--[[const char*]] effectName, --[[float]] xPos, --[[float]] yPos, --[[float]] zPos, --[[float]] xRot, --[[float]] yRot, --[[float]] zRot, --[[float]] scale, --[[BOOL]] xAxis, --[[BOOL]] yAxis, --[[BOOL]] zAxis) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.START_PARTICLE_FX_NON_LOOPED_AT_COORD' due to disabled trusted mode")

	assert(type(effectName) == "string", "Arg #1 (effectName) must be a string.")
	assert(type(xPos) == "number", "Arg #2 (xPos) must be a number.")
	assert(type(yPos) == "number", "Arg #3 (yPos) must be a number.")
	assert(type(zPos) == "number", "Arg #4 (zPos) must be a number.")
	assert(type(xRot) == "number", "Arg #5 (xRot) must be a number.")
	assert(type(yRot) == "number", "Arg #6 (yRot) must be a number.")
	assert(type(zRot) == "number", "Arg #7 (zRot) must be a number.")
	assert(type(scale) == "number", "Arg #8 (scale) must be a number.")
	assert(type(xAxis) == "boolean", "Arg #9 (xAxis) must be a boolean.")
	assert(type(yAxis) == "boolean", "Arg #10 (yAxis) must be a boolean.")
	assert(type(zAxis) == "boolean", "Arg #11 (zAxis) must be a boolean.")

	local result = native_call(0x25129531F77B9ED3, effectName, xPos, yPos, zPos, xRot, yRot, zRot, scale, xAxis, yAxis, zAxis)
	return result:__tointeger()
end
natives.graphics.start_particle_fx_non_looped_at_coord = natives.GRAPHICS.START_PARTICLE_FX_NON_LOOPED_AT_COORD

--[[
Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
]]
function natives.GRAPHICS.START_NETWORKED_PARTICLE_FX_NON_LOOPED_AT_COORD(--[[const char*]] effectName, --[[float]] xPos, --[[float]] yPos, --[[float]] zPos, --[[float]] xRot, --[[float]] yRot, --[[float]] zRot, --[[float]] scale, --[[BOOL]] xAxis, --[[BOOL]] yAxis, --[[BOOL]] zAxis, --[[BOOL]] p11) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.START_NETWORKED_PARTICLE_FX_NON_LOOPED_AT_COORD' due to disabled trusted mode")

	assert(type(effectName) == "string", "Arg #1 (effectName) must be a string.")
	assert(type(xPos) == "number", "Arg #2 (xPos) must be a number.")
	assert(type(yPos) == "number", "Arg #3 (yPos) must be a number.")
	assert(type(zPos) == "number", "Arg #4 (zPos) must be a number.")
	assert(type(xRot) == "number", "Arg #5 (xRot) must be a number.")
	assert(type(yRot) == "number", "Arg #6 (yRot) must be a number.")
	assert(type(zRot) == "number", "Arg #7 (zRot) must be a number.")
	assert(type(scale) == "number", "Arg #8 (scale) must be a number.")
	assert(type(xAxis) == "boolean", "Arg #9 (xAxis) must be a boolean.")
	assert(type(yAxis) == "boolean", "Arg #10 (yAxis) must be a boolean.")
	assert(type(zAxis) == "boolean", "Arg #11 (zAxis) must be a boolean.")
	assert(type(p11) == "boolean", "Arg #12 (p11) must be a boolean.")

	local result = native_call(0xF56B8137DF10135D, effectName, xPos, yPos, zPos, xRot, yRot, zRot, scale, xAxis, yAxis, zAxis, p11)
	return result:__tointeger() ~= 0
end
natives.graphics.start_networked_particle_fx_non_looped_at_coord = natives.GRAPHICS.START_NETWORKED_PARTICLE_FX_NON_LOOPED_AT_COORD

--[[
GRAPHICS::START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE("scr_sh_bong_smoke", PLAYER::PLAYER_PED_ID(), -0.025f, 0.13f, 0f, 0f, 0f, 0f, 31086, 0x3F800000, 0, 0, 0);

Axis - Invert Axis Flags

Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
]]
function natives.GRAPHICS.START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE(--[[const char*]] effectName, --[[Ped]] ped, --[[float]] offsetX, --[[float]] offsetY, --[[float]] offsetZ, --[[float]] rotX, --[[float]] rotY, --[[float]] rotZ, --[[int]] boneIndex, --[[float]] scale, --[[BOOL]] axisX, --[[BOOL]] axisY, --[[BOOL]] axisZ) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE' due to disabled trusted mode")

	assert(type(effectName) == "string", "Arg #1 (effectName) must be a string.")
	assert(type(ped) == "number", "Arg #2 (ped) must be a number.")
	assert(type(offsetX) == "number", "Arg #3 (offsetX) must be a number.")
	assert(type(offsetY) == "number", "Arg #4 (offsetY) must be a number.")
	assert(type(offsetZ) == "number", "Arg #5 (offsetZ) must be a number.")
	assert(type(rotX) == "number", "Arg #6 (rotX) must be a number.")
	assert(type(rotY) == "number", "Arg #7 (rotY) must be a number.")
	assert(type(rotZ) == "number", "Arg #8 (rotZ) must be a number.")
	assert(type(boneIndex) == "number", "Arg #9 (boneIndex) must be a number.")
	assert(type(scale) == "number", "Arg #10 (scale) must be a number.")
	assert(type(axisX) == "boolean", "Arg #11 (axisX) must be a boolean.")
	assert(type(axisY) == "boolean", "Arg #12 (axisY) must be a boolean.")
	assert(type(axisZ) == "boolean", "Arg #13 (axisZ) must be a boolean.")

	local result = native_call(0x0E7E72961BA18619, effectName, ped, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, boneIndex, scale, axisX, axisY, axisZ)
	return result:__tointeger() ~= 0
end
natives.graphics.start_particle_fx_non_looped_on_ped_bone = natives.GRAPHICS.START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE

--[[
Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
]]
function natives.GRAPHICS.START_NETWORKED_PARTICLE_FX_NON_LOOPED_ON_PED_BONE(--[[const char*]] effectName, --[[Ped]] ped, --[[float]] offsetX, --[[float]] offsetY, --[[float]] offsetZ, --[[float]] rotX, --[[float]] rotY, --[[float]] rotZ, --[[int]] boneIndex, --[[float]] scale, --[[BOOL]] axisX, --[[BOOL]] axisY, --[[BOOL]] axisZ) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.START_NETWORKED_PARTICLE_FX_NON_LOOPED_ON_PED_BONE' due to disabled trusted mode")

	assert(type(effectName) == "string", "Arg #1 (effectName) must be a string.")
	assert(type(ped) == "number", "Arg #2 (ped) must be a number.")
	assert(type(offsetX) == "number", "Arg #3 (offsetX) must be a number.")
	assert(type(offsetY) == "number", "Arg #4 (offsetY) must be a number.")
	assert(type(offsetZ) == "number", "Arg #5 (offsetZ) must be a number.")
	assert(type(rotX) == "number", "Arg #6 (rotX) must be a number.")
	assert(type(rotY) == "number", "Arg #7 (rotY) must be a number.")
	assert(type(rotZ) == "number", "Arg #8 (rotZ) must be a number.")
	assert(type(boneIndex) == "number", "Arg #9 (boneIndex) must be a number.")
	assert(type(scale) == "number", "Arg #10 (scale) must be a number.")
	assert(type(axisX) == "boolean", "Arg #11 (axisX) must be a boolean.")
	assert(type(axisY) == "boolean", "Arg #12 (axisY) must be a boolean.")
	assert(type(axisZ) == "boolean", "Arg #13 (axisZ) must be a boolean.")

	local result = native_call(0xA41B6A43642AC2CF, effectName, ped, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, boneIndex, scale, axisX, axisY, axisZ)
	return result:__tointeger() ~= 0
end
natives.graphics.start_networked_particle_fx_non_looped_on_ped_bone = natives.GRAPHICS.START_NETWORKED_PARTICLE_FX_NON_LOOPED_ON_PED_BONE

--[[
Starts a particle effect on an entity for example your player.

Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json

Example:
C#:
Function.Call(Hash.REQUEST_NAMED_PTFX_ASSET, "scr_rcbarry2");                     Function.Call(Hash._SET_PTFX_ASSET_NEXT_CALL, "scr_rcbarry2");                             Function.Call(Hash.START_PARTICLE_FX_NON_LOOPED_ON_ENTITY, "scr_clown_appears", Game.Player.Character, 0.0, 0.0, -0.5, 0.0, 0.0, 0.0, 1.0, false, false, false);

Internally this calls the same function as GRAPHICS::START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE
however it uses -1 for the specified bone index, so it should be possible to start a non looped fx on an entity bone using that native

-can confirm START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE does NOT work on vehicle bones.
]]
function natives.GRAPHICS.START_PARTICLE_FX_NON_LOOPED_ON_ENTITY(--[[const char*]] effectName, --[[Entity]] entity, --[[float]] offsetX, --[[float]] offsetY, --[[float]] offsetZ, --[[float]] rotX, --[[float]] rotY, --[[float]] rotZ, --[[float]] scale, --[[BOOL]] axisX, --[[BOOL]] axisY, --[[BOOL]] axisZ) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.START_PARTICLE_FX_NON_LOOPED_ON_ENTITY' due to disabled trusted mode")

	assert(type(effectName) == "string", "Arg #1 (effectName) must be a string.")
	assert(type(entity) == "number", "Arg #2 (entity) must be a number.")
	assert(type(offsetX) == "number", "Arg #3 (offsetX) must be a number.")
	assert(type(offsetY) == "number", "Arg #4 (offsetY) must be a number.")
	assert(type(offsetZ) == "number", "Arg #5 (offsetZ) must be a number.")
	assert(type(rotX) == "number", "Arg #6 (rotX) must be a number.")
	assert(type(rotY) == "number", "Arg #7 (rotY) must be a number.")
	assert(type(rotZ) == "number", "Arg #8 (rotZ) must be a number.")
	assert(type(scale) == "number", "Arg #9 (scale) must be a number.")
	assert(type(axisX) == "boolean", "Arg #10 (axisX) must be a boolean.")
	assert(type(axisY) == "boolean", "Arg #11 (axisY) must be a boolean.")
	assert(type(axisZ) == "boolean", "Arg #12 (axisZ) must be a boolean.")

	local result = native_call(0x0D53A3B8DA0809D2, effectName, entity, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, scale, axisX, axisY, axisZ)
	return result:__tointeger() ~= 0
end
natives.graphics.start_particle_fx_non_looped_on_entity = natives.GRAPHICS.START_PARTICLE_FX_NON_LOOPED_ON_ENTITY

--[[
Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
]]
function natives.GRAPHICS.START_NETWORKED_PARTICLE_FX_NON_LOOPED_ON_ENTITY(--[[const char*]] effectName, --[[Entity]] entity, --[[float]] offsetX, --[[float]] offsetY, --[[float]] offsetZ, --[[float]] rotX, --[[float]] rotY, --[[float]] rotZ, --[[float]] scale, --[[BOOL]] axisX, --[[BOOL]] axisY, --[[BOOL]] axisZ) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.START_NETWORKED_PARTICLE_FX_NON_LOOPED_ON_ENTITY' due to disabled trusted mode")

	assert(type(effectName) == "string", "Arg #1 (effectName) must be a string.")
	assert(type(entity) == "number", "Arg #2 (entity) must be a number.")
	assert(type(offsetX) == "number", "Arg #3 (offsetX) must be a number.")
	assert(type(offsetY) == "number", "Arg #4 (offsetY) must be a number.")
	assert(type(offsetZ) == "number", "Arg #5 (offsetZ) must be a number.")
	assert(type(rotX) == "number", "Arg #6 (rotX) must be a number.")
	assert(type(rotY) == "number", "Arg #7 (rotY) must be a number.")
	assert(type(rotZ) == "number", "Arg #8 (rotZ) must be a number.")
	assert(type(scale) == "number", "Arg #9 (scale) must be a number.")
	assert(type(axisX) == "boolean", "Arg #10 (axisX) must be a boolean.")
	assert(type(axisY) == "boolean", "Arg #11 (axisY) must be a boolean.")
	assert(type(axisZ) == "boolean", "Arg #12 (axisZ) must be a boolean.")

	local result = native_call(0xC95EB1DB6E92113D, effectName, entity, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, scale, axisX, axisY, axisZ)
	return result:__tointeger() ~= 0
end
natives.graphics.start_networked_particle_fx_non_looped_on_entity = natives.GRAPHICS.START_NETWORKED_PARTICLE_FX_NON_LOOPED_ON_ENTITY

--[[
Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
]]
function natives.GRAPHICS.START_PARTICLE_FX_NON_LOOPED_ON_ENTITY_BONE(--[[const char*]] effectName, --[[Entity]] entity, --[[float]] offsetX, --[[float]] offsetY, --[[float]] offsetZ, --[[float]] rotX, --[[float]] rotY, --[[float]] rotZ, --[[int]] boneIndex, --[[float]] scale, --[[BOOL]] axisX, --[[BOOL]] axisY, --[[BOOL]] axisZ) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.START_PARTICLE_FX_NON_LOOPED_ON_ENTITY_BONE' due to disabled trusted mode")

	assert(type(effectName) == "string", "Arg #1 (effectName) must be a string.")
	assert(type(entity) == "number", "Arg #2 (entity) must be a number.")
	assert(type(offsetX) == "number", "Arg #3 (offsetX) must be a number.")
	assert(type(offsetY) == "number", "Arg #4 (offsetY) must be a number.")
	assert(type(offsetZ) == "number", "Arg #5 (offsetZ) must be a number.")
	assert(type(rotX) == "number", "Arg #6 (rotX) must be a number.")
	assert(type(rotY) == "number", "Arg #7 (rotY) must be a number.")
	assert(type(rotZ) == "number", "Arg #8 (rotZ) must be a number.")
	assert(type(boneIndex) == "number", "Arg #9 (boneIndex) must be a number.")
	assert(type(scale) == "number", "Arg #10 (scale) must be a number.")
	assert(type(axisX) == "boolean", "Arg #11 (axisX) must be a boolean.")
	assert(type(axisY) == "boolean", "Arg #12 (axisY) must be a boolean.")
	assert(type(axisZ) == "boolean", "Arg #13 (axisZ) must be a boolean.")

	local result = native_call(0x02B1F2A72E0F5325, effectName, entity, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, boneIndex, scale, axisX, axisY, axisZ)
	return result:__tointeger() ~= 0
end
natives.graphics.start_particle_fx_non_looped_on_entity_bone = natives.GRAPHICS.START_PARTICLE_FX_NON_LOOPED_ON_ENTITY_BONE

--[[
only works on some fx's, not networked
]]
function natives.GRAPHICS.SET_PARTICLE_FX_NON_LOOPED_COLOUR(--[[float]] r, --[[float]] g, --[[float]] b) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_PARTICLE_FX_NON_LOOPED_COLOUR' due to disabled trusted mode")

	assert(type(r) == "number", "Arg #1 (r) must be a number.")
	assert(type(g) == "number", "Arg #2 (g) must be a number.")
	assert(type(b) == "number", "Arg #3 (b) must be a number.")

	local result = native_call(0x26143A59EF48B262, r, g, b)
end
natives.graphics.set_particle_fx_non_looped_colour = natives.GRAPHICS.SET_PARTICLE_FX_NON_LOOPED_COLOUR

--[[
Usage example for C#:

Function.Call(Hash.SET_PARTICLE_FX_NON_LOOPED_ALPHA, new InputArgument[] { 0.1f });

Note: the argument alpha ranges from 0.0f-1.0f !
]]
function natives.GRAPHICS.SET_PARTICLE_FX_NON_LOOPED_ALPHA(--[[float]] alpha) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_PARTICLE_FX_NON_LOOPED_ALPHA' due to disabled trusted mode")

	assert(type(alpha) == "number", "Arg #1 (alpha) must be a number.")

	local result = native_call(0x77168D722C58B2FC, alpha)
end
natives.graphics.set_particle_fx_non_looped_alpha = natives.GRAPHICS.SET_PARTICLE_FX_NON_LOOPED_ALPHA

function natives.GRAPHICS.SET_PARTICLE_FX_NON_LOOPED_EMITTER_SIZE(--[[float]] p0, --[[float]] p1, --[[float]] scale) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_PARTICLE_FX_NON_LOOPED_EMITTER_SIZE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(scale) == "number", "Arg #3 (scale) must be a number.")

	local result = native_call(0x1E2E01C00837D26E, p0, p1, scale)
end
natives.graphics.set_particle_fx_non_looped_emitter_size = natives.GRAPHICS.SET_PARTICLE_FX_NON_LOOPED_EMITTER_SIZE

--[[
Used only once in the scripts (taxi_clowncar)
]]
function natives.GRAPHICS.SET_PARTICLE_FX_FORCE_VEHICLE_INTERIOR(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_PARTICLE_FX_FORCE_VEHICLE_INTERIOR' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x8CDE909A0370BB3A, toggle)
end
natives.graphics.set_particle_fx_force_vehicle_interior = natives.GRAPHICS.SET_PARTICLE_FX_FORCE_VEHICLE_INTERIOR

--[[
GRAPHICS::START_PARTICLE_FX_LOOPED_AT_COORD("scr_fbi_falling_debris", 93.7743f, -749.4572f, 70.86904f, 0f, 0f, 0f, 0x3F800000, 0, 0, 0, 0)


p11 seems to be always 0

Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
]]
function natives.GRAPHICS.START_PARTICLE_FX_LOOPED_AT_COORD(--[[const char*]] effectName, --[[float]] x, --[[float]] y, --[[float]] z, --[[float]] xRot, --[[float]] yRot, --[[float]] zRot, --[[float]] scale, --[[BOOL]] xAxis, --[[BOOL]] yAxis, --[[BOOL]] zAxis, --[[BOOL]] p11) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.START_PARTICLE_FX_LOOPED_AT_COORD' due to disabled trusted mode")

	assert(type(effectName) == "string", "Arg #1 (effectName) must be a string.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")
	assert(type(xRot) == "number", "Arg #5 (xRot) must be a number.")
	assert(type(yRot) == "number", "Arg #6 (yRot) must be a number.")
	assert(type(zRot) == "number", "Arg #7 (zRot) must be a number.")
	assert(type(scale) == "number", "Arg #8 (scale) must be a number.")
	assert(type(xAxis) == "boolean", "Arg #9 (xAxis) must be a boolean.")
	assert(type(yAxis) == "boolean", "Arg #10 (yAxis) must be a boolean.")
	assert(type(zAxis) == "boolean", "Arg #11 (zAxis) must be a boolean.")
	assert(type(p11) == "boolean", "Arg #12 (p11) must be a boolean.")

	local result = native_call(0xE184F4F0DC5910E7, effectName, x, y, z, xRot, yRot, zRot, scale, xAxis, yAxis, zAxis, p11)
	return result:__tointeger()
end
natives.graphics.start_particle_fx_looped_at_coord = natives.GRAPHICS.START_PARTICLE_FX_LOOPED_AT_COORD

--[[
Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
]]
function natives.GRAPHICS.START_PARTICLE_FX_LOOPED_ON_PED_BONE(--[[const char*]] effectName, --[[Ped]] ped, --[[float]] xOffset, --[[float]] yOffset, --[[float]] zOffset, --[[float]] xRot, --[[float]] yRot, --[[float]] zRot, --[[int]] boneIndex, --[[float]] scale, --[[BOOL]] xAxis, --[[BOOL]] yAxis, --[[BOOL]] zAxis) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.START_PARTICLE_FX_LOOPED_ON_PED_BONE' due to disabled trusted mode")

	assert(type(effectName) == "string", "Arg #1 (effectName) must be a string.")
	assert(type(ped) == "number", "Arg #2 (ped) must be a number.")
	assert(type(xOffset) == "number", "Arg #3 (xOffset) must be a number.")
	assert(type(yOffset) == "number", "Arg #4 (yOffset) must be a number.")
	assert(type(zOffset) == "number", "Arg #5 (zOffset) must be a number.")
	assert(type(xRot) == "number", "Arg #6 (xRot) must be a number.")
	assert(type(yRot) == "number", "Arg #7 (yRot) must be a number.")
	assert(type(zRot) == "number", "Arg #8 (zRot) must be a number.")
	assert(type(boneIndex) == "number", "Arg #9 (boneIndex) must be a number.")
	assert(type(scale) == "number", "Arg #10 (scale) must be a number.")
	assert(type(xAxis) == "boolean", "Arg #11 (xAxis) must be a boolean.")
	assert(type(yAxis) == "boolean", "Arg #12 (yAxis) must be a boolean.")
	assert(type(zAxis) == "boolean", "Arg #13 (zAxis) must be a boolean.")

	local result = native_call(0xF28DA9F38CD1787C, effectName, ped, xOffset, yOffset, zOffset, xRot, yRot, zRot, boneIndex, scale, xAxis, yAxis, zAxis)
	return result:__tointeger()
end
natives.graphics.start_particle_fx_looped_on_ped_bone = natives.GRAPHICS.START_PARTICLE_FX_LOOPED_ON_PED_BONE

--[[
Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
]]
function natives.GRAPHICS.START_PARTICLE_FX_LOOPED_ON_ENTITY(--[[const char*]] effectName, --[[Entity]] entity, --[[float]] xOffset, --[[float]] yOffset, --[[float]] zOffset, --[[float]] xRot, --[[float]] yRot, --[[float]] zRot, --[[float]] scale, --[[BOOL]] xAxis, --[[BOOL]] yAxis, --[[BOOL]] zAxis) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.START_PARTICLE_FX_LOOPED_ON_ENTITY' due to disabled trusted mode")

	assert(type(effectName) == "string", "Arg #1 (effectName) must be a string.")
	assert(type(entity) == "number", "Arg #2 (entity) must be a number.")
	assert(type(xOffset) == "number", "Arg #3 (xOffset) must be a number.")
	assert(type(yOffset) == "number", "Arg #4 (yOffset) must be a number.")
	assert(type(zOffset) == "number", "Arg #5 (zOffset) must be a number.")
	assert(type(xRot) == "number", "Arg #6 (xRot) must be a number.")
	assert(type(yRot) == "number", "Arg #7 (yRot) must be a number.")
	assert(type(zRot) == "number", "Arg #8 (zRot) must be a number.")
	assert(type(scale) == "number", "Arg #9 (scale) must be a number.")
	assert(type(xAxis) == "boolean", "Arg #10 (xAxis) must be a boolean.")
	assert(type(yAxis) == "boolean", "Arg #11 (yAxis) must be a boolean.")
	assert(type(zAxis) == "boolean", "Arg #12 (zAxis) must be a boolean.")

	local result = native_call(0x1AE42C1660FD6517, effectName, entity, xOffset, yOffset, zOffset, xRot, yRot, zRot, scale, xAxis, yAxis, zAxis)
	return result:__tointeger()
end
natives.graphics.start_particle_fx_looped_on_entity = natives.GRAPHICS.START_PARTICLE_FX_LOOPED_ON_ENTITY

--[[
Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
]]
function natives.GRAPHICS.START_PARTICLE_FX_LOOPED_ON_ENTITY_BONE(--[[const char*]] effectName, --[[Entity]] entity, --[[float]] xOffset, --[[float]] yOffset, --[[float]] zOffset, --[[float]] xRot, --[[float]] yRot, --[[float]] zRot, --[[int]] boneIndex, --[[float]] scale, --[[BOOL]] xAxis, --[[BOOL]] yAxis, --[[BOOL]] zAxis) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.START_PARTICLE_FX_LOOPED_ON_ENTITY_BONE' due to disabled trusted mode")

	assert(type(effectName) == "string", "Arg #1 (effectName) must be a string.")
	assert(type(entity) == "number", "Arg #2 (entity) must be a number.")
	assert(type(xOffset) == "number", "Arg #3 (xOffset) must be a number.")
	assert(type(yOffset) == "number", "Arg #4 (yOffset) must be a number.")
	assert(type(zOffset) == "number", "Arg #5 (zOffset) must be a number.")
	assert(type(xRot) == "number", "Arg #6 (xRot) must be a number.")
	assert(type(yRot) == "number", "Arg #7 (yRot) must be a number.")
	assert(type(zRot) == "number", "Arg #8 (zRot) must be a number.")
	assert(type(boneIndex) == "number", "Arg #9 (boneIndex) must be a number.")
	assert(type(scale) == "number", "Arg #10 (scale) must be a number.")
	assert(type(xAxis) == "boolean", "Arg #11 (xAxis) must be a boolean.")
	assert(type(yAxis) == "boolean", "Arg #12 (yAxis) must be a boolean.")
	assert(type(zAxis) == "boolean", "Arg #13 (zAxis) must be a boolean.")

	local result = native_call(0xC6EB449E33977F0B, effectName, entity, xOffset, yOffset, zOffset, xRot, yRot, zRot, boneIndex, scale, xAxis, yAxis, zAxis)
	return result:__tointeger()
end
natives.graphics.start_particle_fx_looped_on_entity_bone = natives.GRAPHICS.START_PARTICLE_FX_LOOPED_ON_ENTITY_BONE

--[[
Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
]]
function natives.GRAPHICS.START_NETWORKED_PARTICLE_FX_LOOPED_ON_ENTITY(--[[const char*]] effectName, --[[Entity]] entity, --[[float]] xOffset, --[[float]] yOffset, --[[float]] zOffset, --[[float]] xRot, --[[float]] yRot, --[[float]] zRot, --[[float]] scale, --[[BOOL]] xAxis, --[[BOOL]] yAxis, --[[BOOL]] zAxis, --[[Any]] p12, --[[Any]] p13, --[[Any]] p14, --[[Any]] p15) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.START_NETWORKED_PARTICLE_FX_LOOPED_ON_ENTITY' due to disabled trusted mode")

	assert(type(effectName) == "string", "Arg #1 (effectName) must be a string.")
	assert(type(entity) == "number", "Arg #2 (entity) must be a number.")
	assert(type(xOffset) == "number", "Arg #3 (xOffset) must be a number.")
	assert(type(yOffset) == "number", "Arg #4 (yOffset) must be a number.")
	assert(type(zOffset) == "number", "Arg #5 (zOffset) must be a number.")
	assert(type(xRot) == "number", "Arg #6 (xRot) must be a number.")
	assert(type(yRot) == "number", "Arg #7 (yRot) must be a number.")
	assert(type(zRot) == "number", "Arg #8 (zRot) must be a number.")
	assert(type(scale) == "number", "Arg #9 (scale) must be a number.")
	assert(type(xAxis) == "boolean", "Arg #10 (xAxis) must be a boolean.")
	assert(type(yAxis) == "boolean", "Arg #11 (yAxis) must be a boolean.")
	assert(type(zAxis) == "boolean", "Arg #12 (zAxis) must be a boolean.")
	assert(type(p12) == "number", "Arg #13 (p12) must be a number.")
	assert(type(p13) == "number", "Arg #14 (p13) must be a number.")
	assert(type(p14) == "number", "Arg #15 (p14) must be a number.")
	assert(type(p15) == "number", "Arg #16 (p15) must be a number.")

	local result = native_call(0x6F60E89A7B64EE1D, effectName, entity, xOffset, yOffset, zOffset, xRot, yRot, zRot, scale, xAxis, yAxis, zAxis, p12, p13, p14, p15)
	return result:__tointeger()
end
natives.graphics.start_networked_particle_fx_looped_on_entity = natives.GRAPHICS.START_NETWORKED_PARTICLE_FX_LOOPED_ON_ENTITY

--[[
Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
]]
function natives.GRAPHICS.START_NETWORKED_PARTICLE_FX_LOOPED_ON_ENTITY_BONE(--[[const char*]] effectName, --[[Entity]] entity, --[[float]] xOffset, --[[float]] yOffset, --[[float]] zOffset, --[[float]] xRot, --[[float]] yRot, --[[float]] zRot, --[[int]] boneIndex, --[[float]] scale, --[[BOOL]] xAxis, --[[BOOL]] yAxis, --[[BOOL]] zAxis, --[[Any]] p13, --[[Any]] p14, --[[Any]] p15, --[[Any]] p16) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.START_NETWORKED_PARTICLE_FX_LOOPED_ON_ENTITY_BONE' due to disabled trusted mode")

	assert(type(effectName) == "string", "Arg #1 (effectName) must be a string.")
	assert(type(entity) == "number", "Arg #2 (entity) must be a number.")
	assert(type(xOffset) == "number", "Arg #3 (xOffset) must be a number.")
	assert(type(yOffset) == "number", "Arg #4 (yOffset) must be a number.")
	assert(type(zOffset) == "number", "Arg #5 (zOffset) must be a number.")
	assert(type(xRot) == "number", "Arg #6 (xRot) must be a number.")
	assert(type(yRot) == "number", "Arg #7 (yRot) must be a number.")
	assert(type(zRot) == "number", "Arg #8 (zRot) must be a number.")
	assert(type(boneIndex) == "number", "Arg #9 (boneIndex) must be a number.")
	assert(type(scale) == "number", "Arg #10 (scale) must be a number.")
	assert(type(xAxis) == "boolean", "Arg #11 (xAxis) must be a boolean.")
	assert(type(yAxis) == "boolean", "Arg #12 (yAxis) must be a boolean.")
	assert(type(zAxis) == "boolean", "Arg #13 (zAxis) must be a boolean.")
	assert(type(p13) == "number", "Arg #14 (p13) must be a number.")
	assert(type(p14) == "number", "Arg #15 (p14) must be a number.")
	assert(type(p15) == "number", "Arg #16 (p15) must be a number.")
	assert(type(p16) == "number", "Arg #17 (p16) must be a number.")

	local result = native_call(0xDDE23F30CC5A0F03, effectName, entity, xOffset, yOffset, zOffset, xRot, yRot, zRot, boneIndex, scale, xAxis, yAxis, zAxis, p13, p14, p15, p16)
	return result:__tointeger()
end
natives.graphics.start_networked_particle_fx_looped_on_entity_bone = natives.GRAPHICS.START_NETWORKED_PARTICLE_FX_LOOPED_ON_ENTITY_BONE

--[[
p1 is always 0 in the native scripts
]]
function natives.GRAPHICS.STOP_PARTICLE_FX_LOOPED(--[[int]] ptfxHandle, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.STOP_PARTICLE_FX_LOOPED' due to disabled trusted mode")

	assert(type(ptfxHandle) == "number", "Arg #1 (ptfxHandle) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0x8F75998877616996, ptfxHandle, p1)
end
natives.graphics.stop_particle_fx_looped = natives.GRAPHICS.STOP_PARTICLE_FX_LOOPED

function natives.GRAPHICS.REMOVE_PARTICLE_FX(--[[int]] ptfxHandle, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.REMOVE_PARTICLE_FX' due to disabled trusted mode")

	assert(type(ptfxHandle) == "number", "Arg #1 (ptfxHandle) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0xC401503DFE8D53CF, ptfxHandle, p1)
end
natives.graphics.remove_particle_fx = natives.GRAPHICS.REMOVE_PARTICLE_FX

function natives.GRAPHICS.REMOVE_PARTICLE_FX_FROM_ENTITY(--[[Entity]] entity) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.REMOVE_PARTICLE_FX_FROM_ENTITY' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0xB8FEAEEBCC127425, entity)
end
natives.graphics.remove_particle_fx_from_entity = natives.GRAPHICS.REMOVE_PARTICLE_FX_FROM_ENTITY

function natives.GRAPHICS.REMOVE_PARTICLE_FX_IN_RANGE(--[[float]] X, --[[float]] Y, --[[float]] Z, --[[float]] radius) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.REMOVE_PARTICLE_FX_IN_RANGE' due to disabled trusted mode")

	assert(type(X) == "number", "Arg #1 (X) must be a number.")
	assert(type(Y) == "number", "Arg #2 (Y) must be a number.")
	assert(type(Z) == "number", "Arg #3 (Z) must be a number.")
	assert(type(radius) == "number", "Arg #4 (radius) must be a number.")

	local result = native_call(0xDD19FA1C6D657305, X, Y, Z, radius)
end
natives.graphics.remove_particle_fx_in_range = natives.GRAPHICS.REMOVE_PARTICLE_FX_IN_RANGE

function natives.GRAPHICS.FORCE_PARTICLE_FX_IN_VEHICLE_INTERIOR(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.FORCE_PARTICLE_FX_IN_VEHICLE_INTERIOR' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xBA0127DA25FD54C9, p0, p1)
end
natives.graphics.force_particle_fx_in_vehicle_interior = natives.GRAPHICS.FORCE_PARTICLE_FX_IN_VEHICLE_INTERIOR

function natives.GRAPHICS.DOES_PARTICLE_FX_LOOPED_EXIST(--[[int]] ptfxHandle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.DOES_PARTICLE_FX_LOOPED_EXIST' due to disabled trusted mode")

	assert(type(ptfxHandle) == "number", "Arg #1 (ptfxHandle) must be a number.")

	local result = native_call(0x74AFEF0D2E1E409B, ptfxHandle)
	return result:__tointeger() ~= 0
end
natives.graphics.does_particle_fx_looped_exist = natives.GRAPHICS.DOES_PARTICLE_FX_LOOPED_EXIST

function natives.GRAPHICS.SET_PARTICLE_FX_LOOPED_OFFSETS(--[[int]] ptfxHandle, --[[float]] x, --[[float]] y, --[[float]] z, --[[float]] rotX, --[[float]] rotY, --[[float]] rotZ) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_PARTICLE_FX_LOOPED_OFFSETS' due to disabled trusted mode")

	assert(type(ptfxHandle) == "number", "Arg #1 (ptfxHandle) must be a number.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")
	assert(type(rotX) == "number", "Arg #5 (rotX) must be a number.")
	assert(type(rotY) == "number", "Arg #6 (rotY) must be a number.")
	assert(type(rotZ) == "number", "Arg #7 (rotZ) must be a number.")

	local result = native_call(0xF7DDEBEC43483C43, ptfxHandle, x, y, z, rotX, rotY, rotZ)
end
natives.graphics.set_particle_fx_looped_offsets = natives.GRAPHICS.SET_PARTICLE_FX_LOOPED_OFFSETS

function natives.GRAPHICS.SET_PARTICLE_FX_LOOPED_EVOLUTION(--[[int]] ptfxHandle, --[[const char*]] propertyName, --[[float]] amount, --[[BOOL]] noNetwork) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_PARTICLE_FX_LOOPED_EVOLUTION' due to disabled trusted mode")

	assert(type(ptfxHandle) == "number", "Arg #1 (ptfxHandle) must be a number.")
	assert(type(propertyName) == "string", "Arg #2 (propertyName) must be a string.")
	assert(type(amount) == "number", "Arg #3 (amount) must be a number.")
	assert(type(noNetwork) == "boolean", "Arg #4 (noNetwork) must be a boolean.")

	local result = native_call(0x5F0C4B5B1C393BE2, ptfxHandle, propertyName, amount, noNetwork)
end
natives.graphics.set_particle_fx_looped_evolution = natives.GRAPHICS.SET_PARTICLE_FX_LOOPED_EVOLUTION

--[[
only works on some fx's

p4 = 0
]]
function natives.GRAPHICS.SET_PARTICLE_FX_LOOPED_COLOUR(--[[int]] ptfxHandle, --[[float]] r, --[[float]] g, --[[float]] b, --[[BOOL]] p4) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_PARTICLE_FX_LOOPED_COLOUR' due to disabled trusted mode")

	assert(type(ptfxHandle) == "number", "Arg #1 (ptfxHandle) must be a number.")
	assert(type(r) == "number", "Arg #2 (r) must be a number.")
	assert(type(g) == "number", "Arg #3 (g) must be a number.")
	assert(type(b) == "number", "Arg #4 (b) must be a number.")
	assert(type(p4) == "boolean", "Arg #5 (p4) must be a boolean.")

	local result = native_call(0x7F8F65877F88783B, ptfxHandle, r, g, b, p4)
end
natives.graphics.set_particle_fx_looped_colour = natives.GRAPHICS.SET_PARTICLE_FX_LOOPED_COLOUR

function natives.GRAPHICS.SET_PARTICLE_FX_LOOPED_ALPHA(--[[int]] ptfxHandle, --[[float]] alpha) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_PARTICLE_FX_LOOPED_ALPHA' due to disabled trusted mode")

	assert(type(ptfxHandle) == "number", "Arg #1 (ptfxHandle) must be a number.")
	assert(type(alpha) == "number", "Arg #2 (alpha) must be a number.")

	local result = native_call(0x726845132380142E, ptfxHandle, alpha)
end
natives.graphics.set_particle_fx_looped_alpha = natives.GRAPHICS.SET_PARTICLE_FX_LOOPED_ALPHA

function natives.GRAPHICS.SET_PARTICLE_FX_LOOPED_SCALE(--[[int]] ptfxHandle, --[[float]] scale) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_PARTICLE_FX_LOOPED_SCALE' due to disabled trusted mode")

	assert(type(ptfxHandle) == "number", "Arg #1 (ptfxHandle) must be a number.")
	assert(type(scale) == "number", "Arg #2 (scale) must be a number.")

	local result = native_call(0xB44250AAA456492D, ptfxHandle, scale)
end
natives.graphics.set_particle_fx_looped_scale = natives.GRAPHICS.SET_PARTICLE_FX_LOOPED_SCALE

function natives.GRAPHICS.SET_PARTICLE_FX_LOOPED_FAR_CLIP_DIST(--[[int]] ptfxHandle, --[[float]] range) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_PARTICLE_FX_LOOPED_FAR_CLIP_DIST' due to disabled trusted mode")

	assert(type(ptfxHandle) == "number", "Arg #1 (ptfxHandle) must be a number.")
	assert(type(range) == "number", "Arg #2 (range) must be a number.")

	local result = native_call(0xDCB194B85EF7B541, ptfxHandle, range)
end
natives.graphics.set_particle_fx_looped_far_clip_dist = natives.GRAPHICS.SET_PARTICLE_FX_LOOPED_FAR_CLIP_DIST

function natives.GRAPHICS.SET_PARTICLE_FX_CAM_INSIDE_VEHICLE(--[[BOOL]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_PARTICLE_FX_CAM_INSIDE_VEHICLE' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0xEEC4047028426510, p0)
end
natives.graphics.set_particle_fx_cam_inside_vehicle = natives.GRAPHICS.SET_PARTICLE_FX_CAM_INSIDE_VEHICLE

function natives.GRAPHICS.SET_PARTICLE_FX_CAM_INSIDE_NONPLAYER_VEHICLE(--[[Vehicle]] vehicle, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_PARTICLE_FX_CAM_INSIDE_NONPLAYER_VEHICLE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0xACEE6F360FC1F6B6, vehicle, p1)
end
natives.graphics.set_particle_fx_cam_inside_nonplayer_vehicle = natives.GRAPHICS.SET_PARTICLE_FX_CAM_INSIDE_NONPLAYER_VEHICLE

function natives.GRAPHICS.SET_PARTICLE_FX_SHOOTOUT_BOAT(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_PARTICLE_FX_SHOOTOUT_BOAT' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x96EF97DAEB89BEF5, p0)
end
natives.graphics.set_particle_fx_shootout_boat = natives.GRAPHICS.SET_PARTICLE_FX_SHOOTOUT_BOAT

function natives.GRAPHICS.CLEAR_PARTICLE_FX_SHOOTOUT_BOAT() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.CLEAR_PARTICLE_FX_SHOOTOUT_BOAT' due to disabled trusted mode")

	local result = native_call(0x2A251AA48B2B46DB)
end
natives.graphics.clear_particle_fx_shootout_boat = natives.GRAPHICS.CLEAR_PARTICLE_FX_SHOOTOUT_BOAT

function natives.GRAPHICS.SET_PARTICLE_FX_BLOOD_SCALE(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_PARTICLE_FX_BLOOD_SCALE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x908311265D42A820, p0)
end
natives.graphics.set_particle_fx_blood_scale = natives.GRAPHICS.SET_PARTICLE_FX_BLOOD_SCALE

function natives.GRAPHICS.DISABLE_IN_WATER_PTFX(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.DISABLE_IN_WATER_PTFX' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0xCFD16F0DB5A3535C, toggle)
end
natives.graphics.disable_in_water_ptfx = natives.GRAPHICS.DISABLE_IN_WATER_PTFX

function natives.GRAPHICS.DISABLE_DOWNWASH_PTFX(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.DISABLE_DOWNWASH_PTFX' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x5F6DF3D92271E8A1, toggle)
end
natives.graphics.disable_downwash_ptfx = natives.GRAPHICS.DISABLE_DOWNWASH_PTFX

function natives.GRAPHICS.SET_PARTICLE_FX_SLIPSTREAM_LODRANGE_SCALE(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_PARTICLE_FX_SLIPSTREAM_LODRANGE_SCALE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x2B40A97646381508, p0)
end
natives.graphics.set_particle_fx_slipstream_lodrange_scale = natives.GRAPHICS.SET_PARTICLE_FX_SLIPSTREAM_LODRANGE_SCALE

--[[
Creates cartoon effect when Michel smokes the weed
]]
function natives.GRAPHICS.ENABLE_CLOWN_BLOOD_VFX(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.ENABLE_CLOWN_BLOOD_VFX' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0xD821490579791273, toggle)
end
natives.graphics.enable_clown_blood_vfx = natives.GRAPHICS.ENABLE_CLOWN_BLOOD_VFX

--[[
Creates a motion-blur sort of effect, this native does not seem to work, however by using the `START_SCREEN_EFFECT` native with `DrugsMichaelAliensFight` as the effect parameter, you should be able to get the effect.
]]
function natives.GRAPHICS.ENABLE_ALIEN_BLOOD_VFX(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.ENABLE_ALIEN_BLOOD_VFX' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x9DCE1F0F78260875, toggle)
end
natives.graphics.enable_alien_blood_vfx = natives.GRAPHICS.ENABLE_ALIEN_BLOOD_VFX

function natives.GRAPHICS.SET_PARTICLE_FX_BULLET_IMPACT_SCALE(--[[float]] scale) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_PARTICLE_FX_BULLET_IMPACT_SCALE' due to disabled trusted mode")

	assert(type(scale) == "number", "Arg #1 (scale) must be a number.")

	local result = native_call(0x27E32866E9A5C416, scale)
end
natives.graphics.set_particle_fx_bullet_impact_scale = natives.GRAPHICS.SET_PARTICLE_FX_BULLET_IMPACT_SCALE

function natives.GRAPHICS.SET_PARTICLE_FX_BULLET_IMPACT_LODRANGE_SCALE(--[[float]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_PARTICLE_FX_BULLET_IMPACT_LODRANGE_SCALE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xBB90E12CAC1DAB25, p0)
end
natives.graphics.set_particle_fx_bullet_impact_lodrange_scale = natives.GRAPHICS.SET_PARTICLE_FX_BULLET_IMPACT_LODRANGE_SCALE

function natives.GRAPHICS.SET_PARTICLE_FX_BULLET_TRACE_NO_ANGLE_REJECT(--[[BOOL]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_PARTICLE_FX_BULLET_TRACE_NO_ANGLE_REJECT' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0xCA4AE345A153D573, p0)
end
natives.graphics.set_particle_fx_bullet_trace_no_angle_reject = natives.GRAPHICS.SET_PARTICLE_FX_BULLET_TRACE_NO_ANGLE_REJECT

function natives.GRAPHICS.SET_PARTICLE_FX_BANG_SCRAPE_LODRANGE_SCALE(--[[float]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_PARTICLE_FX_BANG_SCRAPE_LODRANGE_SCALE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x54E22EA2C1956A8D, p0)
end
natives.graphics.set_particle_fx_bang_scrape_lodrange_scale = natives.GRAPHICS.SET_PARTICLE_FX_BANG_SCRAPE_LODRANGE_SCALE

function natives.GRAPHICS.SET_PARTICLE_FX_FOOT_LODRANGE_SCALE(--[[float]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_PARTICLE_FX_FOOT_LODRANGE_SCALE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x949F397A288B28B3, p0)
end
natives.graphics.set_particle_fx_foot_lodrange_scale = natives.GRAPHICS.SET_PARTICLE_FX_FOOT_LODRANGE_SCALE

--[[
Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
]]
function natives.GRAPHICS.SET_PARTICLE_FX_FOOT_OVERRIDE_NAME(--[[const char*]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_PARTICLE_FX_FOOT_OVERRIDE_NAME' due to disabled trusted mode")

	assert(type(p0) == "string", "Arg #1 (p0) must be a string.")

	local result = native_call(0xBA3D194057C79A7B, p0)
end
natives.graphics.set_particle_fx_foot_override_name = natives.GRAPHICS.SET_PARTICLE_FX_FOOT_OVERRIDE_NAME

function natives.GRAPHICS.SET_SKIDMARK_RANGE_SCALE(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_SKIDMARK_RANGE_SCALE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x5DBF05DB5926D089, p0)
end
natives.graphics.set_skidmark_range_scale = natives.GRAPHICS.SET_SKIDMARK_RANGE_SCALE

function natives.GRAPHICS.SET_PTFX_FORCE_VEHICLE_INTERIOR_FLAG(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_PTFX_FORCE_VEHICLE_INTERIOR_FLAG' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xC6730E0D14E50703, p0)
end
natives.graphics.set_ptfx_force_vehicle_interior_flag = natives.GRAPHICS.SET_PTFX_FORCE_VEHICLE_INTERIOR_FLAG

function natives.GRAPHICS.FORCE_POSTFX_BULLET_IMPACTS_AFTER_HUD(--[[BOOL]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.FORCE_POSTFX_BULLET_IMPACTS_AFTER_HUD' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0x9B079E5221D984D3, p0)
end
natives.graphics.force_postfx_bullet_impacts_after_hud = natives.GRAPHICS.FORCE_POSTFX_BULLET_IMPACTS_AFTER_HUD

--[[
From the b678d decompiled scripts:

 GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL("FM_Mission_Controler");
 GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL("scr_apartment_mp");
 GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL("scr_indep_fireworks");
 GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL("scr_mp_cig_plane");
 GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL("scr_mp_creator");
 GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL("scr_ornate_heist");
 GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL("scr_prison_break_heist_station");

Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
]]
function natives.GRAPHICS.USE_PARTICLE_FX_ASSET(--[[const char*]] name) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.USE_PARTICLE_FX_ASSET' due to disabled trusted mode")

	assert(type(name) == "string", "Arg #1 (name) must be a string.")

	local result = native_call(0x6C38AF3693A69A91, name)
end
natives.graphics.use_particle_fx_asset = natives.GRAPHICS.USE_PARTICLE_FX_ASSET

--[[
Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
]]
function natives.GRAPHICS.SET_PARTICLE_FX_OVERRIDE(--[[const char*]] oldAsset, --[[const char*]] newAsset) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_PARTICLE_FX_OVERRIDE' due to disabled trusted mode")

	assert(type(oldAsset) == "string", "Arg #1 (oldAsset) must be a string.")
	assert(type(newAsset) == "string", "Arg #2 (newAsset) must be a string.")

	local result = native_call(0xEA1E2D93F6F75ED9, oldAsset, newAsset)
end
natives.graphics.set_particle_fx_override = natives.GRAPHICS.SET_PARTICLE_FX_OVERRIDE

--[[
Resets the effect of SET_PARTICLE_FX_OVERRIDE

Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
]]
function natives.GRAPHICS.RESET_PARTICLE_FX_OVERRIDE(--[[const char*]] name) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.RESET_PARTICLE_FX_OVERRIDE' due to disabled trusted mode")

	assert(type(name) == "string", "Arg #1 (name) must be a string.")

	local result = native_call(0x89C8553DD3274AAE, name)
end
natives.graphics.reset_particle_fx_override = natives.GRAPHICS.RESET_PARTICLE_FX_OVERRIDE

function natives.GRAPHICS.SET_WEATHER_PTFX_USE_OVERRIDE_SETTINGS(--[[BOOL]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_WEATHER_PTFX_USE_OVERRIDE_SETTINGS' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0xA46B73FAA3460AE1, p0)
end
natives.graphics.set_weather_ptfx_use_override_settings = natives.GRAPHICS.SET_WEATHER_PTFX_USE_OVERRIDE_SETTINGS

function natives.GRAPHICS.SET_WEATHER_PTFX_OVERRIDE_CURR_LEVEL(--[[float]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_WEATHER_PTFX_OVERRIDE_CURR_LEVEL' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xF78B803082D4386F, p0)
end
natives.graphics.set_weather_ptfx_override_curr_level = natives.GRAPHICS.SET_WEATHER_PTFX_OVERRIDE_CURR_LEVEL

function natives.GRAPHICS.WASH_DECALS_IN_RANGE(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3, --[[Any]] p4) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.WASH_DECALS_IN_RANGE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")

	local result = native_call(0x9C30613D50A6ADEF, p0, p1, p2, p3, p4)
end
natives.graphics.wash_decals_in_range = natives.GRAPHICS.WASH_DECALS_IN_RANGE

function natives.GRAPHICS.WASH_DECALS_FROM_VEHICLE(--[[Vehicle]] vehicle, --[[float]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.WASH_DECALS_FROM_VEHICLE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x5B712761429DBC14, vehicle, p1)
end
natives.graphics.wash_decals_from_vehicle = natives.GRAPHICS.WASH_DECALS_FROM_VEHICLE

--[[
Fades nearby decals within the range specified
]]
function natives.GRAPHICS.FADE_DECALS_IN_RANGE(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3, --[[Any]] p4) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.FADE_DECALS_IN_RANGE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")

	local result = native_call(0xD77EDADB0420E6E0, p0, p1, p2, p3, p4)
end
natives.graphics.fade_decals_in_range = natives.GRAPHICS.FADE_DECALS_IN_RANGE

--[[
Removes all decals in range from a position, it includes the bullet holes, blood pools, petrol...
]]
function natives.GRAPHICS.REMOVE_DECALS_IN_RANGE(--[[float]] x, --[[float]] y, --[[float]] z, --[[float]] range) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.REMOVE_DECALS_IN_RANGE' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(range) == "number", "Arg #4 (range) must be a number.")

	local result = native_call(0x5D6B2D4830A67C62, x, y, z, range)
end
natives.graphics.remove_decals_in_range = natives.GRAPHICS.REMOVE_DECALS_IN_RANGE

function natives.GRAPHICS.REMOVE_DECALS_FROM_OBJECT(--[[Object]] obj) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.REMOVE_DECALS_FROM_OBJECT' due to disabled trusted mode")

	assert(type(obj) == "number", "Arg #1 (obj) must be a number.")

	local result = native_call(0xCCF71CBDDF5B6CB9, obj)
end
natives.graphics.remove_decals_from_object = natives.GRAPHICS.REMOVE_DECALS_FROM_OBJECT

function natives.GRAPHICS.REMOVE_DECALS_FROM_OBJECT_FACING(--[[Object]] obj, --[[float]] x, --[[float]] y, --[[float]] z) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.REMOVE_DECALS_FROM_OBJECT_FACING' due to disabled trusted mode")

	assert(type(obj) == "number", "Arg #1 (obj) must be a number.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")

	local result = native_call(0xA6F6F70FDC6D144C, obj, x, y, z)
end
natives.graphics.remove_decals_from_object_facing = natives.GRAPHICS.REMOVE_DECALS_FROM_OBJECT_FACING

function natives.GRAPHICS.REMOVE_DECALS_FROM_VEHICLE(--[[Vehicle]] vehicle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.REMOVE_DECALS_FROM_VEHICLE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0xE91F1B65F2B48D57, vehicle)
end
natives.graphics.remove_decals_from_vehicle = natives.GRAPHICS.REMOVE_DECALS_FROM_VEHICLE

--[[
decal types:

public enum DecalTypes
{
    splatters_blood = 1010,
    splatters_blood_dir = 1015,
    splatters_blood_mist = 1017,
    splatters_mud = 1020,
    splatters_paint = 1030,
    splatters_water = 1040,
    splatters_water_hydrant = 1050,
    splatters_blood2 = 1110,
    weapImpact_metal = 4010,
    weapImpact_concrete = 4020,
    weapImpact_mattress = 4030,
    weapImpact_mud = 4032,
    weapImpact_wood = 4050,
    weapImpact_sand = 4053,
    weapImpact_cardboard = 4040,
    weapImpact_melee_glass = 4100,
    weapImpact_glass_blood = 4102,
    weapImpact_glass_blood2 = 4104,
    weapImpact_shotgun_paper = 4200,
    weapImpact_shotgun_mattress,
    weapImpact_shotgun_metal,
    weapImpact_shotgun_wood,
    weapImpact_shotgun_dirt,
    weapImpact_shotgun_tvscreen,
    weapImpact_shotgun_tvscreen2,
    weapImpact_shotgun_tvscreen3,
    weapImpact_melee_concrete = 4310,
    weapImpact_melee_wood = 4312,
    weapImpact_melee_metal = 4314,
    burn1 = 4421,
    burn2,
    burn3,
    burn4,
    burn5,
    bang_concrete_bang = 5000,
    bang_concrete_bang2,
    bang_bullet_bang,
    bang_bullet_bang2 = 5004,
    bang_glass = 5031,
    bang_glass2,
    solidPool_water = 9000,
    solidPool_blood,
    solidPool_oil,
    solidPool_petrol,
    solidPool_mud,
    porousPool_water,
    porousPool_blood,
    porousPool_oil,
    porousPool_petrol,
    porousPool_mud,
    porousPool_water_ped_drip,
    liquidTrail_water = 9050
}
]]
function natives.GRAPHICS.ADD_DECAL(--[[int]] decalType, --[[float]] posX, --[[float]] posY, --[[float]] posZ, --[[float]] p4, --[[float]] p5, --[[float]] p6, --[[float]] p7, --[[float]] p8, --[[float]] p9, --[[float]] width, --[[float]] height, --[[float]] rCoef, --[[float]] gCoef, --[[float]] bCoef, --[[float]] opacity, --[[float]] timeout, --[[BOOL]] p17, --[[BOOL]] p18, --[[BOOL]] p19) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.ADD_DECAL' due to disabled trusted mode")

	assert(type(decalType) == "number", "Arg #1 (decalType) must be a number.")
	assert(type(posX) == "number", "Arg #2 (posX) must be a number.")
	assert(type(posY) == "number", "Arg #3 (posY) must be a number.")
	assert(type(posZ) == "number", "Arg #4 (posZ) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")
	assert(type(p6) == "number", "Arg #7 (p6) must be a number.")
	assert(type(p7) == "number", "Arg #8 (p7) must be a number.")
	assert(type(p8) == "number", "Arg #9 (p8) must be a number.")
	assert(type(p9) == "number", "Arg #10 (p9) must be a number.")
	assert(type(width) == "number", "Arg #11 (width) must be a number.")
	assert(type(height) == "number", "Arg #12 (height) must be a number.")
	assert(type(rCoef) == "number", "Arg #13 (rCoef) must be a number.")
	assert(type(gCoef) == "number", "Arg #14 (gCoef) must be a number.")
	assert(type(bCoef) == "number", "Arg #15 (bCoef) must be a number.")
	assert(type(opacity) == "number", "Arg #16 (opacity) must be a number.")
	assert(type(timeout) == "number", "Arg #17 (timeout) must be a number.")
	assert(type(p17) == "boolean", "Arg #18 (p17) must be a boolean.")
	assert(type(p18) == "boolean", "Arg #19 (p18) must be a boolean.")
	assert(type(p19) == "boolean", "Arg #20 (p19) must be a boolean.")

	local result = native_call(0xB302244A1839BDAD, decalType, posX, posY, posZ, p4, p5, p6, p7, p8, p9, width, height, rCoef, gCoef, bCoef, opacity, timeout, p17, p18, p19)
	return result:__tointeger()
end
natives.graphics.add_decal = natives.GRAPHICS.ADD_DECAL

function natives.GRAPHICS.ADD_PETROL_DECAL(--[[float]] x, --[[float]] y, --[[float]] z, --[[float]] groundLvl, --[[float]] width, --[[float]] transparency) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.ADD_PETROL_DECAL' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(groundLvl) == "number", "Arg #4 (groundLvl) must be a number.")
	assert(type(width) == "number", "Arg #5 (width) must be a number.")
	assert(type(transparency) == "number", "Arg #6 (transparency) must be a number.")

	local result = native_call(0x4F5212C7AD880DF8, x, y, z, groundLvl, width, transparency)
	return result:__tointeger()
end
natives.graphics.add_petrol_decal = natives.GRAPHICS.ADD_PETROL_DECAL

function natives.GRAPHICS.ADD_OIL_DECAL(--[[float]] x, --[[float]] y, --[[float]] z, --[[float]] groundLvl, --[[float]] width, --[[float]] transparency) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.ADD_OIL_DECAL' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(groundLvl) == "number", "Arg #4 (groundLvl) must be a number.")
	assert(type(width) == "number", "Arg #5 (width) must be a number.")
	assert(type(transparency) == "number", "Arg #6 (transparency) must be a number.")

	local result = native_call(0x126D7F89FE859A5E, x, y, z, groundLvl, width, transparency)
	return result:__tointeger()
end
natives.graphics.add_oil_decal = natives.GRAPHICS.ADD_OIL_DECAL

function natives.GRAPHICS.START_PETROL_TRAIL_DECALS(--[[float]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.START_PETROL_TRAIL_DECALS' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x99AC7F0D8B9C893D, p0)
end
natives.graphics.start_petrol_trail_decals = natives.GRAPHICS.START_PETROL_TRAIL_DECALS

function natives.GRAPHICS.ADD_PETROL_TRAIL_DECAL_INFO(--[[float]] x, --[[float]] y, --[[float]] z, --[[float]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.ADD_PETROL_TRAIL_DECAL_INFO' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x967278682CB6967A, x, y, z, p3)
end
natives.graphics.add_petrol_trail_decal_info = natives.GRAPHICS.ADD_PETROL_TRAIL_DECAL_INFO

function natives.GRAPHICS.END_PETROL_TRAIL_DECALS() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.END_PETROL_TRAIL_DECALS' due to disabled trusted mode")

	local result = native_call(0x0A123435A26C36CD)
end
natives.graphics.end_petrol_trail_decals = natives.GRAPHICS.END_PETROL_TRAIL_DECALS

function natives.GRAPHICS.REMOVE_DECAL(--[[int]] decal) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.REMOVE_DECAL' due to disabled trusted mode")

	assert(type(decal) == "number", "Arg #1 (decal) must be a number.")

	local result = native_call(0xED3F346429CCD659, decal)
end
natives.graphics.remove_decal = natives.GRAPHICS.REMOVE_DECAL

function natives.GRAPHICS.IS_DECAL_ALIVE(--[[int]] decal) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.IS_DECAL_ALIVE' due to disabled trusted mode")

	assert(type(decal) == "number", "Arg #1 (decal) must be a number.")

	local result = native_call(0xC694D74949CAFD0C, decal)
	return result:__tointeger() ~= 0
end
natives.graphics.is_decal_alive = natives.GRAPHICS.IS_DECAL_ALIVE

function natives.GRAPHICS.GET_DECAL_WASH_LEVEL(--[[int]] decal) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.GET_DECAL_WASH_LEVEL' due to disabled trusted mode")

	assert(type(decal) == "number", "Arg #1 (decal) must be a number.")

	local result = native_call(0x323F647679A09103, decal)
	return result:__tonumber()
end
natives.graphics.get_decal_wash_level = natives.GRAPHICS.GET_DECAL_WASH_LEVEL

function natives.GRAPHICS.SET_DISABLE_PETROL_DECALS_IGNITING_THIS_FRAME() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_DISABLE_PETROL_DECALS_IGNITING_THIS_FRAME' due to disabled trusted mode")

	local result = native_call(0xD9454B5752C857DC)
end
natives.graphics.set_disable_petrol_decals_igniting_this_frame = natives.GRAPHICS.SET_DISABLE_PETROL_DECALS_IGNITING_THIS_FRAME

function natives.GRAPHICS.SET_DISABLE_PETROL_DECALS_RECYCLING_THIS_FRAME() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_DISABLE_PETROL_DECALS_RECYCLING_THIS_FRAME' due to disabled trusted mode")

	local result = native_call(0x27CFB1B1E078CB2D)
end
natives.graphics.set_disable_petrol_decals_recycling_this_frame = natives.GRAPHICS.SET_DISABLE_PETROL_DECALS_RECYCLING_THIS_FRAME

function natives.GRAPHICS.SET_DISABLE_DECAL_RENDERING_THIS_FRAME() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_DISABLE_DECAL_RENDERING_THIS_FRAME' due to disabled trusted mode")

	local result = native_call(0x4B5CFC83122DF602)
end
natives.graphics.set_disable_decal_rendering_this_frame = natives.GRAPHICS.SET_DISABLE_DECAL_RENDERING_THIS_FRAME

function natives.GRAPHICS.GET_IS_PETROL_DECAL_IN_RANGE(--[[float]] xCoord, --[[float]] yCoord, --[[float]] zCoord, --[[float]] radius) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.GET_IS_PETROL_DECAL_IN_RANGE' due to disabled trusted mode")

	assert(type(xCoord) == "number", "Arg #1 (xCoord) must be a number.")
	assert(type(yCoord) == "number", "Arg #2 (yCoord) must be a number.")
	assert(type(zCoord) == "number", "Arg #3 (zCoord) must be a number.")
	assert(type(radius) == "number", "Arg #4 (radius) must be a number.")

	local result = native_call(0x2F09F7976C512404, xCoord, yCoord, zCoord, radius)
	return result:__tointeger() ~= 0
end
natives.graphics.get_is_petrol_decal_in_range = natives.GRAPHICS.GET_IS_PETROL_DECAL_IN_RANGE

function natives.GRAPHICS.PATCH_DECAL_DIFFUSE_MAP(--[[int]] decalType, --[[const char*]] textureDict, --[[const char*]] textureName) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.PATCH_DECAL_DIFFUSE_MAP' due to disabled trusted mode")

	assert(type(decalType) == "number", "Arg #1 (decalType) must be a number.")
	assert(type(textureDict) == "string", "Arg #2 (textureDict) must be a string.")
	assert(type(textureName) == "string", "Arg #3 (textureName) must be a string.")

	local result = native_call(0x8A35C742130C6080, decalType, textureDict, textureName)
end
natives.graphics.patch_decal_diffuse_map = natives.GRAPHICS.PATCH_DECAL_DIFFUSE_MAP

function natives.GRAPHICS.UNPATCH_DECAL_DIFFUSE_MAP(--[[int]] decalType) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.UNPATCH_DECAL_DIFFUSE_MAP' due to disabled trusted mode")

	assert(type(decalType) == "number", "Arg #1 (decalType) must be a number.")

	local result = native_call(0xB7ED70C49521A61D, decalType)
end
natives.graphics.unpatch_decal_diffuse_map = natives.GRAPHICS.UNPATCH_DECAL_DIFFUSE_MAP

function natives.GRAPHICS.MOVE_VEHICLE_DECALS(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.MOVE_VEHICLE_DECALS' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x84C8D7C2D30D3280, p0, p1)
end
natives.graphics.move_vehicle_decals = natives.GRAPHICS.MOVE_VEHICLE_DECALS

--[[
boneIndex is always chassis_dummy in the scripts. The x/y/z params are location relative to the chassis bone.
]]
function natives.GRAPHICS.ADD_VEHICLE_CREW_EMBLEM(--[[Vehicle]] vehicle, --[[Ped]] ped, --[[int]] boneIndex, --[[float]] x1, --[[float]] x2, --[[float]] x3, --[[float]] y1, --[[float]] y2, --[[float]] y3, --[[float]] z1, --[[float]] z2, --[[float]] z3, --[[float]] scale, --[[Any]] p13, --[[int]] alpha) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.ADD_VEHICLE_CREW_EMBLEM' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(ped) == "number", "Arg #2 (ped) must be a number.")
	assert(type(boneIndex) == "number", "Arg #3 (boneIndex) must be a number.")
	assert(type(x1) == "number", "Arg #4 (x1) must be a number.")
	assert(type(x2) == "number", "Arg #5 (x2) must be a number.")
	assert(type(x3) == "number", "Arg #6 (x3) must be a number.")
	assert(type(y1) == "number", "Arg #7 (y1) must be a number.")
	assert(type(y2) == "number", "Arg #8 (y2) must be a number.")
	assert(type(y3) == "number", "Arg #9 (y3) must be a number.")
	assert(type(z1) == "number", "Arg #10 (z1) must be a number.")
	assert(type(z2) == "number", "Arg #11 (z2) must be a number.")
	assert(type(z3) == "number", "Arg #12 (z3) must be a number.")
	assert(type(scale) == "number", "Arg #13 (scale) must be a number.")
	assert(type(p13) == "number", "Arg #14 (p13) must be a number.")
	assert(type(alpha) == "number", "Arg #15 (alpha) must be a number.")

	local result = native_call(0x428BDCB9DA58DA53, vehicle, ped, boneIndex, x1, x2, x3, y1, y2, y3, z1, z2, z3, scale, p13, alpha)
	return result:__tointeger() ~= 0
end
natives.graphics.add_vehicle_crew_emblem = natives.GRAPHICS.ADD_VEHICLE_CREW_EMBLEM

function natives.GRAPHICS.ABORT_VEHICLE_CREW_EMBLEM_REQUEST(--[[Any]] p0) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.ABORT_VEHICLE_CREW_EMBLEM_REQUEST' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x82ACC484FFA3B05F, p0)
	return result:__tointeger()
end
natives.graphics.abort_vehicle_crew_emblem_request = natives.GRAPHICS.ABORT_VEHICLE_CREW_EMBLEM_REQUEST

function natives.GRAPHICS.REMOVE_VEHICLE_CREW_EMBLEM(--[[Vehicle]] vehicle, --[[int]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.REMOVE_VEHICLE_CREW_EMBLEM' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xD2300034310557E4, vehicle, p1)
end
natives.graphics.remove_vehicle_crew_emblem = natives.GRAPHICS.REMOVE_VEHICLE_CREW_EMBLEM

function natives.GRAPHICS.GET_VEHICLE_CREW_EMBLEM_REQUEST_STATE(--[[Vehicle]] vehicle, --[[int]] p1) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.GET_VEHICLE_CREW_EMBLEM_REQUEST_STATE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xFE26117A5841B2FF, vehicle, p1)
	return result:__tointeger()
end
natives.graphics.get_vehicle_crew_emblem_request_state = natives.GRAPHICS.GET_VEHICLE_CREW_EMBLEM_REQUEST_STATE

function natives.GRAPHICS.DOES_VEHICLE_HAVE_CREW_EMBLEM(--[[Vehicle]] vehicle, --[[int]] p1) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.DOES_VEHICLE_HAVE_CREW_EMBLEM' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x060D935D3981A275, vehicle, p1)
	return result:__tointeger() ~= 0
end
natives.graphics.does_vehicle_have_crew_emblem = natives.GRAPHICS.DOES_VEHICLE_HAVE_CREW_EMBLEM

function natives.GRAPHICS.DISABLE_COMPOSITE_SHOTGUN_DECALS(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.DISABLE_COMPOSITE_SHOTGUN_DECALS' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x0E4299C549F0D1F1, toggle)
end
natives.graphics.disable_composite_shotgun_decals = natives.GRAPHICS.DISABLE_COMPOSITE_SHOTGUN_DECALS

function natives.GRAPHICS.DISABLE_SCUFF_DECALS(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.DISABLE_SCUFF_DECALS' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x02369D5C8A51FDCF, toggle)
end
natives.graphics.disable_scuff_decals = natives.GRAPHICS.DISABLE_SCUFF_DECALS

function natives.GRAPHICS.SET_DECAL_BULLET_IMPACT_RANGE_SCALE(--[[float]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_DECAL_BULLET_IMPACT_RANGE_SCALE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x46D1A61A21F566FC, p0)
end
natives.graphics.set_decal_bullet_impact_range_scale = natives.GRAPHICS.SET_DECAL_BULLET_IMPACT_RANGE_SCALE

function natives.GRAPHICS.OVERRIDE_INTERIOR_SMOKE_NAME(--[[const char*]] name) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.OVERRIDE_INTERIOR_SMOKE_NAME' due to disabled trusted mode")

	assert(type(name) == "string", "Arg #1 (name) must be a string.")

	local result = native_call(0x2A2A52824DB96700, name)
end
natives.graphics.override_interior_smoke_name = natives.GRAPHICS.OVERRIDE_INTERIOR_SMOKE_NAME

function natives.GRAPHICS.OVERRIDE_INTERIOR_SMOKE_LEVEL(--[[float]] level) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.OVERRIDE_INTERIOR_SMOKE_LEVEL' due to disabled trusted mode")

	assert(type(level) == "number", "Arg #1 (level) must be a number.")

	local result = native_call(0x1600FD8CF72EBC12, level)
end
natives.graphics.override_interior_smoke_level = natives.GRAPHICS.OVERRIDE_INTERIOR_SMOKE_LEVEL

function natives.GRAPHICS.OVERRIDE_INTERIOR_SMOKE_END() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.OVERRIDE_INTERIOR_SMOKE_END' due to disabled trusted mode")

	local result = native_call(0xEFB55E7C25D3B3BE)
end
natives.graphics.override_interior_smoke_end = natives.GRAPHICS.OVERRIDE_INTERIOR_SMOKE_END

--[[
Used with 'NG_filmnoir_BW{01,02}' timecycles and the "NOIR_FILTER_SOUNDS" audioref.
]]
function natives.GRAPHICS.REGISTER_NOIR_LENS_EFFECT() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.REGISTER_NOIR_LENS_EFFECT' due to disabled trusted mode")

	local result = native_call(0xA44FF770DFBC5DAE)
end
natives.graphics.register_noir_lens_effect = natives.GRAPHICS.REGISTER_NOIR_LENS_EFFECT

function natives.GRAPHICS.DISABLE_VEHICLE_DISTANTLIGHTS(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.DISABLE_VEHICLE_DISTANTLIGHTS' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0xC9F98AC1884E73A2, toggle)
end
natives.graphics.disable_vehicle_distantlights = natives.GRAPHICS.DISABLE_VEHICLE_DISTANTLIGHTS

function natives.GRAPHICS.RENDER_SHADOWED_LIGHTS_WITH_NO_SHADOWS(--[[BOOL]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.RENDER_SHADOWED_LIGHTS_WITH_NO_SHADOWS' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0x03300B57FCAC6DDB, p0)
end
natives.graphics.render_shadowed_lights_with_no_shadows = natives.GRAPHICS.RENDER_SHADOWED_LIGHTS_WITH_NO_SHADOWS

function natives.GRAPHICS.REQUEST_EARLY_LIGHT_CHECK() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.REQUEST_EARLY_LIGHT_CHECK' due to disabled trusted mode")

	local result = native_call(0x98EDF76A7271E4F2)
end
natives.graphics.request_early_light_check = natives.GRAPHICS.REQUEST_EARLY_LIGHT_CHECK

--[[
Forces footstep tracks on all surfaces.
]]
function natives.GRAPHICS.USE_SNOW_FOOT_VFX_WHEN_UNSHELTERED(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.USE_SNOW_FOOT_VFX_WHEN_UNSHELTERED' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0xAEEDAD1420C65CC0, toggle)
end
natives.graphics.use_snow_foot_vfx_when_unsheltered = natives.GRAPHICS.USE_SNOW_FOOT_VFX_WHEN_UNSHELTERED

--[[
Forces vehicle trails on all surfaces.
]]
function natives.GRAPHICS.USE_SNOW_WHEEL_VFX_WHEN_UNSHELTERED(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.USE_SNOW_WHEEL_VFX_WHEN_UNSHELTERED' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x4CC7F0FEA5283FE0, toggle)
end
natives.graphics.use_snow_wheel_vfx_when_unsheltered = natives.GRAPHICS.USE_SNOW_WHEEL_VFX_WHEN_UNSHELTERED

function natives.GRAPHICS.DISABLE_REGION_VFX(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.DISABLE_REGION_VFX' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xEFD97FF47B745B8D, p0)
end
natives.graphics.disable_region_vfx = natives.GRAPHICS.DISABLE_REGION_VFX

--[[
Only one match in the scripts:

GRAPHICS::PRESET_INTERIOR_AMBIENT_CACHE("int_carrier_hanger");
]]
function natives.GRAPHICS.PRESET_INTERIOR_AMBIENT_CACHE(--[[const char*]] timecycleModifierName) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.PRESET_INTERIOR_AMBIENT_CACHE' due to disabled trusted mode")

	assert(type(timecycleModifierName) == "string", "Arg #1 (timecycleModifierName) must be a string.")

	local result = native_call(0xD7021272EB0A451E, timecycleModifierName)
end
natives.graphics.preset_interior_ambient_cache = natives.GRAPHICS.PRESET_INTERIOR_AMBIENT_CACHE

--[[
Loads the specified timecycle modifier. Modifiers are defined separately in another file (e.g. "timecycle_mods_1.xml")

Parameters:
modifierName - The modifier to load (e.g. "V_FIB_IT3", "scanline_cam", etc.)

Full list of timecycle modifiers by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/timecycleModifiers.json
]]
function natives.GRAPHICS.SET_TIMECYCLE_MODIFIER(--[[const char*]] modifierName) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_TIMECYCLE_MODIFIER' due to disabled trusted mode")

	assert(type(modifierName) == "string", "Arg #1 (modifierName) must be a string.")

	local result = native_call(0x2C933ABF17A1DF41, modifierName)
end
natives.graphics.set_timecycle_modifier = natives.GRAPHICS.SET_TIMECYCLE_MODIFIER

function natives.GRAPHICS.SET_TIMECYCLE_MODIFIER_STRENGTH(--[[float]] strength) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_TIMECYCLE_MODIFIER_STRENGTH' due to disabled trusted mode")

	assert(type(strength) == "number", "Arg #1 (strength) must be a number.")

	local result = native_call(0x82E7FFCD5B2326B3, strength)
end
natives.graphics.set_timecycle_modifier_strength = natives.GRAPHICS.SET_TIMECYCLE_MODIFIER_STRENGTH

--[[
Full list of timecycle modifiers by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/timecycleModifiers.json
]]
function natives.GRAPHICS.SET_TRANSITION_TIMECYCLE_MODIFIER(--[[const char*]] modifierName, --[[float]] transition) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_TRANSITION_TIMECYCLE_MODIFIER' due to disabled trusted mode")

	assert(type(modifierName) == "string", "Arg #1 (modifierName) must be a string.")
	assert(type(transition) == "number", "Arg #2 (transition) must be a number.")

	local result = native_call(0x3BCF567485E1971C, modifierName, transition)
end
natives.graphics.set_transition_timecycle_modifier = natives.GRAPHICS.SET_TRANSITION_TIMECYCLE_MODIFIER

function natives.GRAPHICS.SET_TRANSITION_OUT_OF_TIMECYCLE_MODIFIER(--[[float]] strength) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_TRANSITION_OUT_OF_TIMECYCLE_MODIFIER' due to disabled trusted mode")

	assert(type(strength) == "number", "Arg #1 (strength) must be a number.")

	local result = native_call(0x1CBA05AE7BD7EE05, strength)
end
natives.graphics.set_transition_out_of_timecycle_modifier = natives.GRAPHICS.SET_TRANSITION_OUT_OF_TIMECYCLE_MODIFIER

function natives.GRAPHICS.CLEAR_TIMECYCLE_MODIFIER() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.CLEAR_TIMECYCLE_MODIFIER' due to disabled trusted mode")

	local result = native_call(0x0F07E7745A236711)
end
natives.graphics.clear_timecycle_modifier = natives.GRAPHICS.CLEAR_TIMECYCLE_MODIFIER

--[[
Only use for this in the PC scripts is:

if (GRAPHICS::GET_TIMECYCLE_MODIFIER_INDEX() != -1)

For a full list, see here: pastebin.com/cnk7FTF2
]]
function natives.GRAPHICS.GET_TIMECYCLE_MODIFIER_INDEX() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.GET_TIMECYCLE_MODIFIER_INDEX' due to disabled trusted mode")

	local result = native_call(0xFDF3D97C674AFB66)
	return result:__tointeger()
end
natives.graphics.get_timecycle_modifier_index = natives.GRAPHICS.GET_TIMECYCLE_MODIFIER_INDEX

function natives.GRAPHICS.GET_TIMECYCLE_TRANSITION_MODIFIER_INDEX() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.GET_TIMECYCLE_TRANSITION_MODIFIER_INDEX' due to disabled trusted mode")

	local result = native_call(0x459FD2C8D0AB78BC)
	return result:__tointeger()
end
natives.graphics.get_timecycle_transition_modifier_index = natives.GRAPHICS.GET_TIMECYCLE_TRANSITION_MODIFIER_INDEX

function natives.GRAPHICS.GET_IS_TIMECYCLE_TRANSITIONING_OUT() -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.GET_IS_TIMECYCLE_TRANSITIONING_OUT' due to disabled trusted mode")

	local result = native_call(0x98D18905BF723B99)
	return result:__tointeger()
end
natives.graphics.get_is_timecycle_transitioning_out = natives.GRAPHICS.GET_IS_TIMECYCLE_TRANSITIONING_OUT

function natives.GRAPHICS.PUSH_TIMECYCLE_MODIFIER() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.PUSH_TIMECYCLE_MODIFIER' due to disabled trusted mode")

	local result = native_call(0x58F735290861E6B4)
end
natives.graphics.push_timecycle_modifier = natives.GRAPHICS.PUSH_TIMECYCLE_MODIFIER

function natives.GRAPHICS.POP_TIMECYCLE_MODIFIER() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.POP_TIMECYCLE_MODIFIER' due to disabled trusted mode")

	local result = native_call(0x3C8938D7D872211E)
end
natives.graphics.pop_timecycle_modifier = natives.GRAPHICS.POP_TIMECYCLE_MODIFIER

function natives.GRAPHICS.SET_CURRENT_PLAYER_TCMODIFIER(--[[const char*]] modifierName) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_CURRENT_PLAYER_TCMODIFIER' due to disabled trusted mode")

	assert(type(modifierName) == "string", "Arg #1 (modifierName) must be a string.")

	local result = native_call(0xBBF327DED94E4DEB, modifierName)
end
natives.graphics.set_current_player_tcmodifier = natives.GRAPHICS.SET_CURRENT_PLAYER_TCMODIFIER

function natives.GRAPHICS.SET_PLAYER_TCMODIFIER_TRANSITION(--[[float]] value) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_PLAYER_TCMODIFIER_TRANSITION' due to disabled trusted mode")

	assert(type(value) == "number", "Arg #1 (value) must be a number.")

	local result = native_call(0xBDEB86F4D5809204, value)
end
natives.graphics.set_player_tcmodifier_transition = natives.GRAPHICS.SET_PLAYER_TCMODIFIER_TRANSITION

function natives.GRAPHICS.SET_NEXT_PLAYER_TCMODIFIER(--[[const char*]] modifierName) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_NEXT_PLAYER_TCMODIFIER' due to disabled trusted mode")

	assert(type(modifierName) == "string", "Arg #1 (modifierName) must be a string.")

	local result = native_call(0xBF59707B3E5ED531, modifierName)
end
natives.graphics.set_next_player_tcmodifier = natives.GRAPHICS.SET_NEXT_PLAYER_TCMODIFIER

function natives.GRAPHICS.ADD_TCMODIFIER_OVERRIDE(--[[const char*]] modifierName1, --[[const char*]] modifierName2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.ADD_TCMODIFIER_OVERRIDE' due to disabled trusted mode")

	assert(type(modifierName1) == "string", "Arg #1 (modifierName1) must be a string.")
	assert(type(modifierName2) == "string", "Arg #2 (modifierName2) must be a string.")

	local result = native_call(0x1A8E2C8B9CF4549C, modifierName1, modifierName2)
end
natives.graphics.add_tcmodifier_override = natives.GRAPHICS.ADD_TCMODIFIER_OVERRIDE

function natives.GRAPHICS.CLEAR_ALL_TCMODIFIER_OVERRIDES(--[[const char*]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.CLEAR_ALL_TCMODIFIER_OVERRIDES' due to disabled trusted mode")

	assert(type(p0) == "string", "Arg #1 (p0) must be a string.")

	local result = native_call(0x15E33297C3E8DC60, p0)
end
natives.graphics.clear_all_tcmodifier_overrides = natives.GRAPHICS.CLEAR_ALL_TCMODIFIER_OVERRIDES

--[[
Full list of timecycle modifiers by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/timecycleModifiers.json
]]
function natives.GRAPHICS.SET_EXTRA_TCMODIFIER(--[[const char*]] modifierName) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_EXTRA_TCMODIFIER' due to disabled trusted mode")

	assert(type(modifierName) == "string", "Arg #1 (modifierName) must be a string.")

	local result = native_call(0x5096FD9CCB49056D, modifierName)
end
natives.graphics.set_extra_tcmodifier = natives.GRAPHICS.SET_EXTRA_TCMODIFIER

--[[
Clears the secondary timecycle modifier usually set with _SET_EXTRA_TIMECYCLE_MODIFIER
]]
function natives.GRAPHICS.CLEAR_EXTRA_TCMODIFIER() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.CLEAR_EXTRA_TCMODIFIER' due to disabled trusted mode")

	local result = native_call(0x92CCC17A7A2285DA)
end
natives.graphics.clear_extra_tcmodifier = natives.GRAPHICS.CLEAR_EXTRA_TCMODIFIER

--[[
See _0xFDF3D97C674AFB66 for use, works the same just for the secondary timecycle modifier.
Returns an integer representing the Timecycle modifier
]]
function natives.GRAPHICS.GET_EXTRA_TCMODIFIER() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.GET_EXTRA_TCMODIFIER' due to disabled trusted mode")

	local result = native_call(0xBB0527EC6341496D)
	return result:__tointeger()
end
natives.graphics.get_extra_tcmodifier = natives.GRAPHICS.GET_EXTRA_TCMODIFIER

--[[
The same as SET_TIMECYCLE_MODIFIER_STRENGTH but for the secondary timecycle modifier.
]]
function natives.GRAPHICS.ENABLE_MOON_CYCLE_OVERRIDE(--[[float]] strength) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.ENABLE_MOON_CYCLE_OVERRIDE' due to disabled trusted mode")

	assert(type(strength) == "number", "Arg #1 (strength) must be a number.")

	local result = native_call(0x2C328AF17210F009, strength)
end
natives.graphics.enable_moon_cycle_override = natives.GRAPHICS.ENABLE_MOON_CYCLE_OVERRIDE

--[[
Resets the extra timecycle modifier strength normally set with 0x2C328AF17210F009
]]
function natives.GRAPHICS.DISABLE_MOON_CYCLE_OVERRIDE() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.DISABLE_MOON_CYCLE_OVERRIDE' due to disabled trusted mode")

	local result = native_call(0x2BF72AD5B41AA739)
end
natives.graphics.disable_moon_cycle_override = natives.GRAPHICS.DISABLE_MOON_CYCLE_OVERRIDE

function natives.GRAPHICS.REQUEST_SCALEFORM_MOVIE(--[[const char*]] scaleformName) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.REQUEST_SCALEFORM_MOVIE' due to disabled trusted mode")

	assert(type(scaleformName) == "string", "Arg #1 (scaleformName) must be a string.")

	local result = native_call(0x11FE353CF9733E6F, scaleformName)
	return result:__tointeger()
end
natives.graphics.request_scaleform_movie = natives.GRAPHICS.REQUEST_SCALEFORM_MOVIE

--[[
Another REQUEST_SCALEFORM_MOVIE equivalent.
]]
function natives.GRAPHICS.REQUEST_SCALEFORM_MOVIE_WITH_IGNORE_SUPER_WIDESCREEN(--[[const char*]] scaleformName) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.REQUEST_SCALEFORM_MOVIE_WITH_IGNORE_SUPER_WIDESCREEN' due to disabled trusted mode")

	assert(type(scaleformName) == "string", "Arg #1 (scaleformName) must be a string.")

	local result = native_call(0x65E7E78842E74CDB, scaleformName)
	return result:__tointeger()
end
natives.graphics.request_scaleform_movie_with_ignore_super_widescreen = natives.GRAPHICS.REQUEST_SCALEFORM_MOVIE_WITH_IGNORE_SUPER_WIDESCREEN

function natives.GRAPHICS.REQUEST_SCALEFORM_MOVIE_INSTANCE(--[[const char*]] scaleformName) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.REQUEST_SCALEFORM_MOVIE_INSTANCE' due to disabled trusted mode")

	assert(type(scaleformName) == "string", "Arg #1 (scaleformName) must be a string.")

	local result = native_call(0xC514489CFB8AF806, scaleformName)
	return result:__tointeger()
end
natives.graphics.request_scaleform_movie_instance = natives.GRAPHICS.REQUEST_SCALEFORM_MOVIE_INSTANCE

--[[
Similar to REQUEST_SCALEFORM_MOVIE, but seems to be some kind of "interactive" scaleform movie?

These seem to be the only scaleforms ever requested by this native:
"breaking_news"
"desktop_pc"
"ECG_MONITOR"
"Hacking_PC"
"TEETH_PULLING"

Note: Unless this hash is out-of-order, this native is next-gen only.

]]
function natives.GRAPHICS.REQUEST_SCALEFORM_MOVIE_SKIP_RENDER_WHILE_PAUSED(--[[const char*]] scaleformName) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.REQUEST_SCALEFORM_MOVIE_SKIP_RENDER_WHILE_PAUSED' due to disabled trusted mode")

	assert(type(scaleformName) == "string", "Arg #1 (scaleformName) must be a string.")

	local result = native_call(0xBD06C611BB9048C2, scaleformName)
	return result:__tointeger()
end
natives.graphics.request_scaleform_movie_skip_render_while_paused = natives.GRAPHICS.REQUEST_SCALEFORM_MOVIE_SKIP_RENDER_WHILE_PAUSED

function natives.GRAPHICS.HAS_SCALEFORM_MOVIE_LOADED(--[[int]] scaleformHandle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.HAS_SCALEFORM_MOVIE_LOADED' due to disabled trusted mode")

	assert(type(scaleformHandle) == "number", "Arg #1 (scaleformHandle) must be a number.")

	local result = native_call(0x85F01B8D5B90570E, scaleformHandle)
	return result:__tointeger() ~= 0
end
natives.graphics.has_scaleform_movie_loaded = natives.GRAPHICS.HAS_SCALEFORM_MOVIE_LOADED

--[[
val is 1-20 (0 will return false)
]]
function natives.GRAPHICS.IS_ACTIVE_SCALEFORM_MOVIE_DELETING(--[[int]] val) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.IS_ACTIVE_SCALEFORM_MOVIE_DELETING' due to disabled trusted mode")

	assert(type(val) == "number", "Arg #1 (val) must be a number.")

	local result = native_call(0x2FCB133CA50A49EB, val)
	return result:__tointeger() ~= 0
end
natives.graphics.is_active_scaleform_movie_deleting = natives.GRAPHICS.IS_ACTIVE_SCALEFORM_MOVIE_DELETING

--[[
val is 1-20. Return is related to INSTRUCTIONAL_BUTTONS, COLOUR_SWITCHER_02, etc?
]]
function natives.GRAPHICS.IS_SCALEFORM_MOVIE_DELETING(--[[int]] val) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.IS_SCALEFORM_MOVIE_DELETING' due to disabled trusted mode")

	assert(type(val) == "number", "Arg #1 (val) must be a number.")

	local result = native_call(0x86255B1FC929E33E, val)
	return result:__tointeger() ~= 0
end
natives.graphics.is_scaleform_movie_deleting = natives.GRAPHICS.IS_SCALEFORM_MOVIE_DELETING

--[[
Only values used in the scripts are:

"heist_mp"
"heistmap_mp"
"instructional_buttons"
"heist_pre"
]]
function natives.GRAPHICS.HAS_SCALEFORM_MOVIE_FILENAME_LOADED(--[[const char*]] scaleformName) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.HAS_SCALEFORM_MOVIE_FILENAME_LOADED' due to disabled trusted mode")

	assert(type(scaleformName) == "string", "Arg #1 (scaleformName) must be a string.")

	local result = native_call(0x0C1C5D756FB5F337, scaleformName)
	return result:__tointeger() ~= 0
end
natives.graphics.has_scaleform_movie_filename_loaded = natives.GRAPHICS.HAS_SCALEFORM_MOVIE_FILENAME_LOADED

function natives.GRAPHICS.HAS_SCALEFORM_CONTAINER_MOVIE_LOADED_INTO_PARENT(--[[int]] scaleformHandle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.HAS_SCALEFORM_CONTAINER_MOVIE_LOADED_INTO_PARENT' due to disabled trusted mode")

	assert(type(scaleformHandle) == "number", "Arg #1 (scaleformHandle) must be a number.")

	local result = native_call(0x8217150E1217EBFD, scaleformHandle)
	return result:__tointeger() ~= 0
end
natives.graphics.has_scaleform_container_movie_loaded_into_parent = natives.GRAPHICS.HAS_SCALEFORM_CONTAINER_MOVIE_LOADED_INTO_PARENT

function natives.GRAPHICS.SET_SCALEFORM_MOVIE_AS_NO_LONGER_NEEDED(--[[int*]] scaleformHandle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_SCALEFORM_MOVIE_AS_NO_LONGER_NEEDED' due to disabled trusted mode")

	assert(type(scaleformHandle) == "userdata", "Arg #1 (scaleformHandle) must be a userdata.")

	local result = native_call(0x1D132D614DD86811, scaleformHandle)
end
natives.graphics.set_scaleform_movie_as_no_longer_needed = natives.GRAPHICS.SET_SCALEFORM_MOVIE_AS_NO_LONGER_NEEDED

function natives.GRAPHICS.SET_SCALEFORM_MOVIE_TO_USE_SYSTEM_TIME(--[[int]] scaleform, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_SCALEFORM_MOVIE_TO_USE_SYSTEM_TIME' due to disabled trusted mode")

	assert(type(scaleform) == "number", "Arg #1 (scaleform) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x6D8EB211944DCE08, scaleform, toggle)
end
natives.graphics.set_scaleform_movie_to_use_system_time = natives.GRAPHICS.SET_SCALEFORM_MOVIE_TO_USE_SYSTEM_TIME

function natives.GRAPHICS.SET_SCALEFORM_MOVIE_TO_USE_LARGE_RT(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_SCALEFORM_MOVIE_TO_USE_LARGE_RT' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x32F34FF7F617643B, p0, p1)
end
natives.graphics.set_scaleform_movie_to_use_large_rt = natives.GRAPHICS.SET_SCALEFORM_MOVIE_TO_USE_LARGE_RT

--[[
This native is used in some casino scripts to fit the scaleform in the rendertarget.
]]
function natives.GRAPHICS.SET_SCALEFORM_MOVIE_TO_USE_SUPER_LARGE_RT(--[[int]] scaleformHandle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_SCALEFORM_MOVIE_TO_USE_SUPER_LARGE_RT' due to disabled trusted mode")

	assert(type(scaleformHandle) == "number", "Arg #1 (scaleformHandle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xE6A9F00D4240B519, scaleformHandle, toggle)
end
natives.graphics.set_scaleform_movie_to_use_super_large_rt = natives.GRAPHICS.SET_SCALEFORM_MOVIE_TO_USE_SUPER_LARGE_RT

function natives.GRAPHICS.DRAW_SCALEFORM_MOVIE(--[[int]] scaleformHandle, --[[float]] x, --[[float]] y, --[[float]] width, --[[float]] height, --[[int]] red, --[[int]] green, --[[int]] blue, --[[int]] alpha, --[[int]] unk) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.DRAW_SCALEFORM_MOVIE' due to disabled trusted mode")

	assert(type(scaleformHandle) == "number", "Arg #1 (scaleformHandle) must be a number.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(width) == "number", "Arg #4 (width) must be a number.")
	assert(type(height) == "number", "Arg #5 (height) must be a number.")
	assert(type(red) == "number", "Arg #6 (red) must be a number.")
	assert(type(green) == "number", "Arg #7 (green) must be a number.")
	assert(type(blue) == "number", "Arg #8 (blue) must be a number.")
	assert(type(alpha) == "number", "Arg #9 (alpha) must be a number.")
	assert(type(unk) == "number", "Arg #10 (unk) must be a number.")

	local result = native_call(0x54972ADAF0294A93, scaleformHandle, x, y, width, height, red, green, blue, alpha, unk)
end
natives.graphics.draw_scaleform_movie = natives.GRAPHICS.DRAW_SCALEFORM_MOVIE

--[[
unk is not used so no need
]]
function natives.GRAPHICS.DRAW_SCALEFORM_MOVIE_FULLSCREEN(--[[int]] scaleform, --[[int]] red, --[[int]] green, --[[int]] blue, --[[int]] alpha, --[[int]] unk) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.DRAW_SCALEFORM_MOVIE_FULLSCREEN' due to disabled trusted mode")

	assert(type(scaleform) == "number", "Arg #1 (scaleform) must be a number.")
	assert(type(red) == "number", "Arg #2 (red) must be a number.")
	assert(type(green) == "number", "Arg #3 (green) must be a number.")
	assert(type(blue) == "number", "Arg #4 (blue) must be a number.")
	assert(type(alpha) == "number", "Arg #5 (alpha) must be a number.")
	assert(type(unk) == "number", "Arg #6 (unk) must be a number.")

	local result = native_call(0x0DF606929C105BE1, scaleform, red, green, blue, alpha, unk)
end
natives.graphics.draw_scaleform_movie_fullscreen = natives.GRAPHICS.DRAW_SCALEFORM_MOVIE_FULLSCREEN

function natives.GRAPHICS.DRAW_SCALEFORM_MOVIE_FULLSCREEN_MASKED(--[[int]] scaleform1, --[[int]] scaleform2, --[[int]] red, --[[int]] green, --[[int]] blue, --[[int]] alpha) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.DRAW_SCALEFORM_MOVIE_FULLSCREEN_MASKED' due to disabled trusted mode")

	assert(type(scaleform1) == "number", "Arg #1 (scaleform1) must be a number.")
	assert(type(scaleform2) == "number", "Arg #2 (scaleform2) must be a number.")
	assert(type(red) == "number", "Arg #3 (red) must be a number.")
	assert(type(green) == "number", "Arg #4 (green) must be a number.")
	assert(type(blue) == "number", "Arg #5 (blue) must be a number.")
	assert(type(alpha) == "number", "Arg #6 (alpha) must be a number.")

	local result = native_call(0xCF537FDE4FBD4CE5, scaleform1, scaleform2, red, green, blue, alpha)
end
natives.graphics.draw_scaleform_movie_fullscreen_masked = natives.GRAPHICS.DRAW_SCALEFORM_MOVIE_FULLSCREEN_MASKED

function natives.GRAPHICS.DRAW_SCALEFORM_MOVIE_3D(--[[int]] scaleform, --[[float]] posX, --[[float]] posY, --[[float]] posZ, --[[float]] rotX, --[[float]] rotY, --[[float]] rotZ, --[[float]] p7, --[[float]] p8, --[[float]] p9, --[[float]] scaleX, --[[float]] scaleY, --[[float]] scaleZ, --[[int]] rotationOrder) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.DRAW_SCALEFORM_MOVIE_3D' due to disabled trusted mode")

	assert(type(scaleform) == "number", "Arg #1 (scaleform) must be a number.")
	assert(type(posX) == "number", "Arg #2 (posX) must be a number.")
	assert(type(posY) == "number", "Arg #3 (posY) must be a number.")
	assert(type(posZ) == "number", "Arg #4 (posZ) must be a number.")
	assert(type(rotX) == "number", "Arg #5 (rotX) must be a number.")
	assert(type(rotY) == "number", "Arg #6 (rotY) must be a number.")
	assert(type(rotZ) == "number", "Arg #7 (rotZ) must be a number.")
	assert(type(p7) == "number", "Arg #8 (p7) must be a number.")
	assert(type(p8) == "number", "Arg #9 (p8) must be a number.")
	assert(type(p9) == "number", "Arg #10 (p9) must be a number.")
	assert(type(scaleX) == "number", "Arg #11 (scaleX) must be a number.")
	assert(type(scaleY) == "number", "Arg #12 (scaleY) must be a number.")
	assert(type(scaleZ) == "number", "Arg #13 (scaleZ) must be a number.")
	assert(type(rotationOrder) == "number", "Arg #14 (rotationOrder) must be a number.")

	local result = native_call(0x87D51D72255D4E78, scaleform, posX, posY, posZ, rotX, rotY, rotZ, p7, p8, p9, scaleX, scaleY, scaleZ, rotationOrder)
end
natives.graphics.draw_scaleform_movie_3d = natives.GRAPHICS.DRAW_SCALEFORM_MOVIE_3D

function natives.GRAPHICS.DRAW_SCALEFORM_MOVIE_3D_SOLID(--[[int]] scaleform, --[[float]] posX, --[[float]] posY, --[[float]] posZ, --[[float]] rotX, --[[float]] rotY, --[[float]] rotZ, --[[float]] p7, --[[float]] p8, --[[float]] p9, --[[float]] scaleX, --[[float]] scaleY, --[[float]] scaleZ, --[[int]] rotationOrder) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.DRAW_SCALEFORM_MOVIE_3D_SOLID' due to disabled trusted mode")

	assert(type(scaleform) == "number", "Arg #1 (scaleform) must be a number.")
	assert(type(posX) == "number", "Arg #2 (posX) must be a number.")
	assert(type(posY) == "number", "Arg #3 (posY) must be a number.")
	assert(type(posZ) == "number", "Arg #4 (posZ) must be a number.")
	assert(type(rotX) == "number", "Arg #5 (rotX) must be a number.")
	assert(type(rotY) == "number", "Arg #6 (rotY) must be a number.")
	assert(type(rotZ) == "number", "Arg #7 (rotZ) must be a number.")
	assert(type(p7) == "number", "Arg #8 (p7) must be a number.")
	assert(type(p8) == "number", "Arg #9 (p8) must be a number.")
	assert(type(p9) == "number", "Arg #10 (p9) must be a number.")
	assert(type(scaleX) == "number", "Arg #11 (scaleX) must be a number.")
	assert(type(scaleY) == "number", "Arg #12 (scaleY) must be a number.")
	assert(type(scaleZ) == "number", "Arg #13 (scaleZ) must be a number.")
	assert(type(rotationOrder) == "number", "Arg #14 (rotationOrder) must be a number.")

	local result = native_call(0x1CE592FDC749D6F5, scaleform, posX, posY, posZ, rotX, rotY, rotZ, p7, p8, p9, scaleX, scaleY, scaleZ, rotationOrder)
end
natives.graphics.draw_scaleform_movie_3d_solid = natives.GRAPHICS.DRAW_SCALEFORM_MOVIE_3D_SOLID

--[[
Calls the Scaleform function.
]]
function natives.GRAPHICS.CALL_SCALEFORM_MOVIE_METHOD(--[[int]] scaleform, --[[const char*]] method) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.CALL_SCALEFORM_MOVIE_METHOD' due to disabled trusted mode")

	assert(type(scaleform) == "number", "Arg #1 (scaleform) must be a number.")
	assert(type(method) == "string", "Arg #2 (method) must be a string.")

	local result = native_call(0xFBD96D87AC96D533, scaleform, method)
end
natives.graphics.call_scaleform_movie_method = natives.GRAPHICS.CALL_SCALEFORM_MOVIE_METHOD

--[[
Calls the Scaleform function and passes the parameters as floats.

The number of parameters passed to the function varies, so the end of the parameter list is represented by -1.0.
]]
function natives.GRAPHICS.CALL_SCALEFORM_MOVIE_METHOD_WITH_NUMBER(--[[int]] scaleform, --[[const char*]] methodName, --[[float]] param1, --[[float]] param2, --[[float]] param3, --[[float]] param4, --[[float]] param5) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.CALL_SCALEFORM_MOVIE_METHOD_WITH_NUMBER' due to disabled trusted mode")

	assert(type(scaleform) == "number", "Arg #1 (scaleform) must be a number.")
	assert(type(methodName) == "string", "Arg #2 (methodName) must be a string.")
	assert(type(param1) == "number", "Arg #3 (param1) must be a number.")
	assert(type(param2) == "number", "Arg #4 (param2) must be a number.")
	assert(type(param3) == "number", "Arg #5 (param3) must be a number.")
	assert(type(param4) == "number", "Arg #6 (param4) must be a number.")
	assert(type(param5) == "number", "Arg #7 (param5) must be a number.")

	local result = native_call(0xD0837058AE2E4BEE, scaleform, methodName, param1, param2, param3, param4, param5)
end
natives.graphics.call_scaleform_movie_method_with_number = natives.GRAPHICS.CALL_SCALEFORM_MOVIE_METHOD_WITH_NUMBER

--[[
Calls the Scaleform function and passes the parameters as strings.

The number of parameters passed to the function varies, so the end of the parameter list is represented by 0 (NULL).
]]
function natives.GRAPHICS.CALL_SCALEFORM_MOVIE_METHOD_WITH_STRING(--[[int]] scaleform, --[[const char*]] methodName, --[[const char*]] param1, --[[const char*]] param2, --[[const char*]] param3, --[[const char*]] param4, --[[const char*]] param5) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.CALL_SCALEFORM_MOVIE_METHOD_WITH_STRING' due to disabled trusted mode")

	assert(type(scaleform) == "number", "Arg #1 (scaleform) must be a number.")
	assert(type(methodName) == "string", "Arg #2 (methodName) must be a string.")
	assert(type(param1) == "string", "Arg #3 (param1) must be a string.")
	assert(type(param2) == "string", "Arg #4 (param2) must be a string.")
	assert(type(param3) == "string", "Arg #5 (param3) must be a string.")
	assert(type(param4) == "string", "Arg #6 (param4) must be a string.")
	assert(type(param5) == "string", "Arg #7 (param5) must be a string.")

	local result = native_call(0x51BC1ED3CC44E8F7, scaleform, methodName, param1, param2, param3, param4, param5)
end
natives.graphics.call_scaleform_movie_method_with_string = natives.GRAPHICS.CALL_SCALEFORM_MOVIE_METHOD_WITH_STRING

--[[
Calls the Scaleform function and passes both float and string parameters (in their respective order).

The number of parameters passed to the function varies, so the end of the float parameters is represented by -1.0, and the end of the string parameters is represented by 0 (NULL).

NOTE: The order of parameters in the function prototype is important! All float parameters must come first, followed by the string parameters.

Examples:
// function MY_FUNCTION(floatParam1, floatParam2, stringParam)
GRAPHICS::_CALL_SCALEFORM_MOVIE_FUNCTION_MIXED_PARAMS(scaleform, "MY_FUNCTION", 10.0, 20.0, -1.0, -1.0, -1.0, "String param", 0, 0, 0, 0);

// function MY_FUNCTION_2(floatParam, stringParam1, stringParam2)
GRAPHICS::_CALL_SCALEFORM_MOVIE_FUNCTION_MIXED_PARAMS(scaleform, "MY_FUNCTION_2", 10.0, -1.0, -1.0, -1.0, -1.0, "String param #1", "String param #2", 0, 0, 0);
]]
function natives.GRAPHICS.CALL_SCALEFORM_MOVIE_METHOD_WITH_NUMBER_AND_STRING(--[[int]] scaleform, --[[const char*]] methodName, --[[float]] floatParam1, --[[float]] floatParam2, --[[float]] floatParam3, --[[float]] floatParam4, --[[float]] floatParam5, --[[const char*]] stringParam1, --[[const char*]] stringParam2, --[[const char*]] stringParam3, --[[const char*]] stringParam4, --[[const char*]] stringParam5) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.CALL_SCALEFORM_MOVIE_METHOD_WITH_NUMBER_AND_STRING' due to disabled trusted mode")

	assert(type(scaleform) == "number", "Arg #1 (scaleform) must be a number.")
	assert(type(methodName) == "string", "Arg #2 (methodName) must be a string.")
	assert(type(floatParam1) == "number", "Arg #3 (floatParam1) must be a number.")
	assert(type(floatParam2) == "number", "Arg #4 (floatParam2) must be a number.")
	assert(type(floatParam3) == "number", "Arg #5 (floatParam3) must be a number.")
	assert(type(floatParam4) == "number", "Arg #6 (floatParam4) must be a number.")
	assert(type(floatParam5) == "number", "Arg #7 (floatParam5) must be a number.")
	assert(type(stringParam1) == "string", "Arg #8 (stringParam1) must be a string.")
	assert(type(stringParam2) == "string", "Arg #9 (stringParam2) must be a string.")
	assert(type(stringParam3) == "string", "Arg #10 (stringParam3) must be a string.")
	assert(type(stringParam4) == "string", "Arg #11 (stringParam4) must be a string.")
	assert(type(stringParam5) == "string", "Arg #12 (stringParam5) must be a string.")

	local result = native_call(0xEF662D8D57E290B1, scaleform, methodName, floatParam1, floatParam2, floatParam3, floatParam4, floatParam5, stringParam1, stringParam2, stringParam3, stringParam4, stringParam5)
end
natives.graphics.call_scaleform_movie_method_with_number_and_string = natives.GRAPHICS.CALL_SCALEFORM_MOVIE_METHOD_WITH_NUMBER_AND_STRING

--[[
Pushes a function from the Hud component Scaleform onto the stack. Same behavior as GRAPHICS::BEGIN_SCALEFORM_MOVIE_METHOD, just a hud component id instead of a Scaleform.

Known components:
19 - MP_RANK_BAR
20 - HUD_DIRECTOR_MODE

This native requires more research - all information can be found inside of 'hud.gfx'. Using a decompiler, the different components are located under "scripts\__Packages\com\rockstargames\gtav\hud\hudComponents" and "scripts\__Packages\com\rockstargames\gtav\Multiplayer".
]]
function natives.GRAPHICS.BEGIN_SCALEFORM_SCRIPT_HUD_MOVIE_METHOD(--[[int]] hudComponent, --[[const char*]] methodName) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.BEGIN_SCALEFORM_SCRIPT_HUD_MOVIE_METHOD' due to disabled trusted mode")

	assert(type(hudComponent) == "number", "Arg #1 (hudComponent) must be a number.")
	assert(type(methodName) == "string", "Arg #2 (methodName) must be a string.")

	local result = native_call(0x98C494FD5BDFBFD5, hudComponent, methodName)
	return result:__tointeger() ~= 0
end
natives.graphics.begin_scaleform_script_hud_movie_method = natives.GRAPHICS.BEGIN_SCALEFORM_SCRIPT_HUD_MOVIE_METHOD

--[[
Push a function from the Scaleform onto the stack

]]
function natives.GRAPHICS.BEGIN_SCALEFORM_MOVIE_METHOD(--[[int]] scaleform, --[[const char*]] methodName) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.BEGIN_SCALEFORM_MOVIE_METHOD' due to disabled trusted mode")

	assert(type(scaleform) == "number", "Arg #1 (scaleform) must be a number.")
	assert(type(methodName) == "string", "Arg #2 (methodName) must be a string.")

	local result = native_call(0xF6E48914C7A8694E, scaleform, methodName)
	return result:__tointeger() ~= 0
end
natives.graphics.begin_scaleform_movie_method = natives.GRAPHICS.BEGIN_SCALEFORM_MOVIE_METHOD

--[[
Starts frontend (pause menu) scaleform movie methods.
This can be used when you want to make custom frontend menus, and customize things like images or text in the menus etc.
Use `BEGIN_SCALEFORM_MOVIE_METHOD_ON_FRONTEND_HEADER` for header scaleform functions.
]]
function natives.GRAPHICS.BEGIN_SCALEFORM_MOVIE_METHOD_ON_FRONTEND(--[[const char*]] methodName) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.BEGIN_SCALEFORM_MOVIE_METHOD_ON_FRONTEND' due to disabled trusted mode")

	assert(type(methodName) == "string", "Arg #1 (methodName) must be a string.")

	local result = native_call(0xAB58C27C2E6123C6, methodName)
	return result:__tointeger() ~= 0
end
natives.graphics.begin_scaleform_movie_method_on_frontend = natives.GRAPHICS.BEGIN_SCALEFORM_MOVIE_METHOD_ON_FRONTEND

--[[
Starts frontend (pause menu) scaleform movie methods for header options.
Use `BEGIN_SCALEFORM_MOVIE_METHOD_ON_FRONTEND` to customize the content inside the frontend menus.
]]
function natives.GRAPHICS.BEGIN_SCALEFORM_MOVIE_METHOD_ON_FRONTEND_HEADER(--[[const char*]] methodName) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.BEGIN_SCALEFORM_MOVIE_METHOD_ON_FRONTEND_HEADER' due to disabled trusted mode")

	assert(type(methodName) == "string", "Arg #1 (methodName) must be a string.")

	local result = native_call(0xB9449845F73F5E9C, methodName)
	return result:__tointeger() ~= 0
end
natives.graphics.begin_scaleform_movie_method_on_frontend_header = natives.GRAPHICS.BEGIN_SCALEFORM_MOVIE_METHOD_ON_FRONTEND_HEADER

--[[
Pops and calls the Scaleform function on the stack
]]
function natives.GRAPHICS.END_SCALEFORM_MOVIE_METHOD() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.END_SCALEFORM_MOVIE_METHOD' due to disabled trusted mode")

	local result = native_call(0xC6796A8FFA375E53)
end
natives.graphics.end_scaleform_movie_method = natives.GRAPHICS.END_SCALEFORM_MOVIE_METHOD

function natives.GRAPHICS.END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE() -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE' due to disabled trusted mode")

	local result = native_call(0xC50AA39A577AF886)
	return result:__tointeger()
end
natives.graphics.end_scaleform_movie_method_return_value = natives.GRAPHICS.END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE

--[[
methodReturn: The return value of this native: END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE
Returns true if the return value of a scaleform function is ready to be collected (using GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_STRING or GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_INT).
]]
function natives.GRAPHICS.IS_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_READY(--[[int]] methodReturn) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.IS_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_READY' due to disabled trusted mode")

	assert(type(methodReturn) == "number", "Arg #1 (methodReturn) must be a number.")

	local result = native_call(0x768FF8961BA904D6, methodReturn)
	return result:__tointeger() ~= 0
end
natives.graphics.is_scaleform_movie_method_return_value_ready = natives.GRAPHICS.IS_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_READY

--[[
methodReturn: The return value of this native: END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE
Used to get a return value from a scaleform function. Returns an int in the same way GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_STRING returns a string.
]]
function natives.GRAPHICS.GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_INT(--[[int]] methodReturn) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_INT' due to disabled trusted mode")

	assert(type(methodReturn) == "number", "Arg #1 (methodReturn) must be a number.")

	local result = native_call(0x2DE7EFA66B906036, methodReturn)
	return result:__tointeger()
end
natives.graphics.get_scaleform_movie_method_return_value_int = natives.GRAPHICS.GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_INT

--[[
methodReturn: The return value of this native: END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE
]]
function natives.GRAPHICS.GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_BOOL(--[[int]] methodReturn) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_BOOL' due to disabled trusted mode")

	assert(type(methodReturn) == "number", "Arg #1 (methodReturn) must be a number.")

	local result = native_call(0xD80A80346A45D761, methodReturn)
	return result:__tointeger() ~= 0
end
natives.graphics.get_scaleform_movie_method_return_value_bool = natives.GRAPHICS.GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_BOOL

--[[
methodReturn: The return value of this native: END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE
Used to get a return value from a scaleform function. Returns a string in the same way GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_INT returns an int.
]]
function natives.GRAPHICS.GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_STRING(--[[int]] methodReturn) -- Returns const char*
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_STRING' due to disabled trusted mode")

	assert(type(methodReturn) == "number", "Arg #1 (methodReturn) must be a number.")

	local result = native_call(0xE1E258829A885245, methodReturn)
	return result:__tostring(true)
end
natives.graphics.get_scaleform_movie_method_return_value_string = natives.GRAPHICS.GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_STRING

--[[
Pushes an integer for the Scaleform function onto the stack.
]]
function natives.GRAPHICS.SCALEFORM_MOVIE_METHOD_ADD_PARAM_INT(--[[int]] value) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SCALEFORM_MOVIE_METHOD_ADD_PARAM_INT' due to disabled trusted mode")

	assert(type(value) == "number", "Arg #1 (value) must be a number.")

	local result = native_call(0xC3D0841A0CC546A6, value)
end
natives.graphics.scaleform_movie_method_add_param_int = natives.GRAPHICS.SCALEFORM_MOVIE_METHOD_ADD_PARAM_INT

--[[
Pushes a float for the Scaleform function onto the stack.
]]
function natives.GRAPHICS.SCALEFORM_MOVIE_METHOD_ADD_PARAM_FLOAT(--[[float]] value) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SCALEFORM_MOVIE_METHOD_ADD_PARAM_FLOAT' due to disabled trusted mode")

	assert(type(value) == "number", "Arg #1 (value) must be a number.")

	local result = native_call(0xD69736AAE04DB51A, value)
end
natives.graphics.scaleform_movie_method_add_param_float = natives.GRAPHICS.SCALEFORM_MOVIE_METHOD_ADD_PARAM_FLOAT

--[[
Pushes a boolean for the Scaleform function onto the stack.
]]
function natives.GRAPHICS.SCALEFORM_MOVIE_METHOD_ADD_PARAM_BOOL(--[[BOOL]] value) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SCALEFORM_MOVIE_METHOD_ADD_PARAM_BOOL' due to disabled trusted mode")

	assert(type(value) == "boolean", "Arg #1 (value) must be a boolean.")

	local result = native_call(0xC58424BA936EB458, value)
end
natives.graphics.scaleform_movie_method_add_param_bool = natives.GRAPHICS.SCALEFORM_MOVIE_METHOD_ADD_PARAM_BOOL

--[[
Called prior to adding a text component to the UI. After doing so, GRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING is called.

Examples:
GRAPHICS::BEGIN_TEXT_COMMAND_SCALEFORM_STRING("NUMBER");
HUD::ADD_TEXT_COMPONENT_INTEGER(MISC::ABSI(a_1));
GRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING();

GRAPHICS::BEGIN_TEXT_COMMAND_SCALEFORM_STRING("STRING");
HUD::_ADD_TEXT_COMPONENT_STRING(a_2);
GRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING();

GRAPHICS::BEGIN_TEXT_COMMAND_SCALEFORM_STRING("STRTNM2");
HUD::_0x17299B63C7683A2B(v_3);
HUD::_0x17299B63C7683A2B(v_4);
GRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING();

GRAPHICS::BEGIN_TEXT_COMMAND_SCALEFORM_STRING("STRTNM1");
HUD::_0x17299B63C7683A2B(v_3);
GRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING();
]]
function natives.GRAPHICS.BEGIN_TEXT_COMMAND_SCALEFORM_STRING(--[[const char*]] componentType) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.BEGIN_TEXT_COMMAND_SCALEFORM_STRING' due to disabled trusted mode")

	assert(type(componentType) == "string", "Arg #1 (componentType) must be a string.")

	local result = native_call(0x80338406F3475E55, componentType)
end
natives.graphics.begin_text_command_scaleform_string = natives.GRAPHICS.BEGIN_TEXT_COMMAND_SCALEFORM_STRING

function natives.GRAPHICS.END_TEXT_COMMAND_SCALEFORM_STRING() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.END_TEXT_COMMAND_SCALEFORM_STRING' due to disabled trusted mode")

	local result = native_call(0x362E2D3FE93A9959)
end
natives.graphics.end_text_command_scaleform_string = natives.GRAPHICS.END_TEXT_COMMAND_SCALEFORM_STRING

--[[
Same as END_TEXT_COMMAND_SCALEFORM_STRING but does not perform HTML conversion for text tokens.

END_TEXT_COMMAND_VIA_SPECIAL_MODIFIABLE_STRING?
]]
function natives.GRAPHICS.END_TEXT_COMMAND_UNPARSED_SCALEFORM_STRING() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.END_TEXT_COMMAND_UNPARSED_SCALEFORM_STRING' due to disabled trusted mode")

	local result = native_call(0xAE4E8157D9ECF087)
end
natives.graphics.end_text_command_unparsed_scaleform_string = natives.GRAPHICS.END_TEXT_COMMAND_UNPARSED_SCALEFORM_STRING

--[[
Same as SCALEFORM_MOVIE_METHOD_ADD_PARAM_TEXTURE_NAME_STRING
Both SCALEFORM_MOVIE_METHOD_ADD_PARAM_TEXTURE_NAME_STRING / _SCALEFORM_MOVIE_METHOD_ADD_PARAM_TEXTURE_NAME_STRING_2 works, but _SCALEFORM_MOVIE_METHOD_ADD_PARAM_TEXTURE_NAME_STRING_2 is usually used for "name" (organisation, players..).
]]
function natives.GRAPHICS.SCALEFORM_MOVIE_METHOD_ADD_PARAM_LITERAL_STRING(--[[const char*]] string) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SCALEFORM_MOVIE_METHOD_ADD_PARAM_LITERAL_STRING' due to disabled trusted mode")

	assert(type(string) == "string", "Arg #1 (string) must be a string.")

	local result = native_call(0x77FE3402004CD1B0, string)
end
natives.graphics.scaleform_movie_method_add_param_literal_string = natives.GRAPHICS.SCALEFORM_MOVIE_METHOD_ADD_PARAM_LITERAL_STRING

function natives.GRAPHICS.SCALEFORM_MOVIE_METHOD_ADD_PARAM_TEXTURE_NAME_STRING(--[[const char*]] string) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SCALEFORM_MOVIE_METHOD_ADD_PARAM_TEXTURE_NAME_STRING' due to disabled trusted mode")

	assert(type(string) == "string", "Arg #1 (string) must be a string.")

	local result = native_call(0xBA7148484BD90365, string)
end
natives.graphics.scaleform_movie_method_add_param_texture_name_string = natives.GRAPHICS.SCALEFORM_MOVIE_METHOD_ADD_PARAM_TEXTURE_NAME_STRING

function natives.GRAPHICS.SCALEFORM_MOVIE_METHOD_ADD_PARAM_PLAYER_NAME_STRING(--[[const char*]] string) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SCALEFORM_MOVIE_METHOD_ADD_PARAM_PLAYER_NAME_STRING' due to disabled trusted mode")

	assert(type(string) == "string", "Arg #1 (string) must be a string.")

	local result = native_call(0xE83A3E3557A56640, string)
end
natives.graphics.scaleform_movie_method_add_param_player_name_string = natives.GRAPHICS.SCALEFORM_MOVIE_METHOD_ADD_PARAM_PLAYER_NAME_STRING

function natives.GRAPHICS.DOES_LATEST_BRIEF_STRING_EXIST(--[[int]] p0) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.DOES_LATEST_BRIEF_STRING_EXIST' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x5E657EF1099EDD65, p0)
	return result:__tointeger() ~= 0
end
natives.graphics.does_latest_brief_string_exist = natives.GRAPHICS.DOES_LATEST_BRIEF_STRING_EXIST

function natives.GRAPHICS.SCALEFORM_MOVIE_METHOD_ADD_PARAM_LATEST_BRIEF_STRING(--[[int]] value) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SCALEFORM_MOVIE_METHOD_ADD_PARAM_LATEST_BRIEF_STRING' due to disabled trusted mode")

	assert(type(value) == "number", "Arg #1 (value) must be a number.")

	local result = native_call(0xEC52C631A1831C03, value)
end
natives.graphics.scaleform_movie_method_add_param_latest_brief_string = natives.GRAPHICS.SCALEFORM_MOVIE_METHOD_ADD_PARAM_LATEST_BRIEF_STRING

function natives.GRAPHICS.REQUEST_SCALEFORM_SCRIPT_HUD_MOVIE(--[[int]] hudComponent) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.REQUEST_SCALEFORM_SCRIPT_HUD_MOVIE' due to disabled trusted mode")

	assert(type(hudComponent) == "number", "Arg #1 (hudComponent) must be a number.")

	local result = native_call(0x9304881D6F6537EA, hudComponent)
end
natives.graphics.request_scaleform_script_hud_movie = natives.GRAPHICS.REQUEST_SCALEFORM_SCRIPT_HUD_MOVIE

function natives.GRAPHICS.HAS_SCALEFORM_SCRIPT_HUD_MOVIE_LOADED(--[[int]] hudComponent) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.HAS_SCALEFORM_SCRIPT_HUD_MOVIE_LOADED' due to disabled trusted mode")

	assert(type(hudComponent) == "number", "Arg #1 (hudComponent) must be a number.")

	local result = native_call(0xDF6E5987D2B4D140, hudComponent)
	return result:__tointeger() ~= 0
end
natives.graphics.has_scaleform_script_hud_movie_loaded = natives.GRAPHICS.HAS_SCALEFORM_SCRIPT_HUD_MOVIE_LOADED

function natives.GRAPHICS.REMOVE_SCALEFORM_SCRIPT_HUD_MOVIE(--[[int]] hudComponent) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.REMOVE_SCALEFORM_SCRIPT_HUD_MOVIE' due to disabled trusted mode")

	assert(type(hudComponent) == "number", "Arg #1 (hudComponent) must be a number.")

	local result = native_call(0xF44A5456AC3F4F97, hudComponent)
end
natives.graphics.remove_scaleform_script_hud_movie = natives.GRAPHICS.REMOVE_SCALEFORM_SCRIPT_HUD_MOVIE

function natives.GRAPHICS.PASS_KEYBOARD_INPUT_TO_SCALEFORM(--[[int]] scaleformHandle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.PASS_KEYBOARD_INPUT_TO_SCALEFORM' due to disabled trusted mode")

	assert(type(scaleformHandle) == "number", "Arg #1 (scaleformHandle) must be a number.")

	local result = native_call(0xD1C7CB175E012964, scaleformHandle)
	return result:__tointeger() ~= 0
end
natives.graphics.pass_keyboard_input_to_scaleform = natives.GRAPHICS.PASS_KEYBOARD_INPUT_TO_SCALEFORM

function natives.GRAPHICS.SET_TV_CHANNEL(--[[int]] channel) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_TV_CHANNEL' due to disabled trusted mode")

	assert(type(channel) == "number", "Arg #1 (channel) must be a number.")

	local result = native_call(0xBAABBB23EB6E484E, channel)
end
natives.graphics.set_tv_channel = natives.GRAPHICS.SET_TV_CHANNEL

function natives.GRAPHICS.GET_TV_CHANNEL() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.GET_TV_CHANNEL' due to disabled trusted mode")

	local result = native_call(0xFC1E275A90D39995)
	return result:__tointeger()
end
natives.graphics.get_tv_channel = natives.GRAPHICS.GET_TV_CHANNEL

function natives.GRAPHICS.SET_TV_VOLUME(--[[float]] volume) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_TV_VOLUME' due to disabled trusted mode")

	assert(type(volume) == "number", "Arg #1 (volume) must be a number.")

	local result = native_call(0x2982BF73F66E9DDC, volume)
end
natives.graphics.set_tv_volume = natives.GRAPHICS.SET_TV_VOLUME

function natives.GRAPHICS.GET_TV_VOLUME() -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.GET_TV_VOLUME' due to disabled trusted mode")

	local result = native_call(0x2170813D3DD8661B)
	return result:__tonumber()
end
natives.graphics.get_tv_volume = natives.GRAPHICS.GET_TV_VOLUME

--[[
All calls to this native are preceded by calls to GRAPHICS::_0x61BB1D9B3A95D802 and GRAPHICS::_0xC6372ECD45D73BCD, respectively.

"act_cinema.ysc", line 1483:
HUD::SET_HUD_COMPONENT_POSITION(15, 0.0, -0.0375);
HUD::SET_TEXT_RENDER_ID(l_AE);
GRAPHICS::_0x61BB1D9B3A95D802(4);
GRAPHICS::_0xC6372ECD45D73BCD(1);
if (GRAPHICS::_0x0AD973CA1E077B60(${movie_arthouse})) {
    GRAPHICS::DRAW_TV_CHANNEL(0.5, 0.5, 0.7375, 1.0, 0.0, 255, 255, 255, 255);
} else { 
    GRAPHICS::DRAW_TV_CHANNEL(0.5, 0.5, 1.0, 1.0, 0.0, 255, 255, 255, 255);
}

"am_mp_property_int.ysc", line 102545:
if (ENTITY::DOES_ENTITY_EXIST(a_2._f3)) {
    if (HUD::IS_NAMED_RENDERTARGET_LINKED(ENTITY::GET_ENTITY_MODEL(a_2._f3))) {
        HUD::SET_TEXT_RENDER_ID(a_2._f1);
        GRAPHICS::_0x61BB1D9B3A95D802(4);
        GRAPHICS::_0xC6372ECD45D73BCD(1);
        GRAPHICS::DRAW_TV_CHANNEL(0.5, 0.5, 1.0, 1.0, 0.0, 255, 255, 255, 255);
        if (GRAPHICS::GET_TV_CHANNEL() == -1) {
            sub_a8fa5(a_2, 1);
        } else { 
            sub_a8fa5(a_2, 1);
            GRAPHICS::ATTACH_TV_AUDIO_TO_ENTITY(a_2._f3);
        }
        HUD::SET_TEXT_RENDER_ID(HUD::GET_DEFAULT_SCRIPT_RENDERTARGET_RENDER_ID());
    }
}

]]
function natives.GRAPHICS.DRAW_TV_CHANNEL(--[[float]] xPos, --[[float]] yPos, --[[float]] xScale, --[[float]] yScale, --[[float]] rotation, --[[int]] red, --[[int]] green, --[[int]] blue, --[[int]] alpha) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.DRAW_TV_CHANNEL' due to disabled trusted mode")

	assert(type(xPos) == "number", "Arg #1 (xPos) must be a number.")
	assert(type(yPos) == "number", "Arg #2 (yPos) must be a number.")
	assert(type(xScale) == "number", "Arg #3 (xScale) must be a number.")
	assert(type(yScale) == "number", "Arg #4 (yScale) must be a number.")
	assert(type(rotation) == "number", "Arg #5 (rotation) must be a number.")
	assert(type(red) == "number", "Arg #6 (red) must be a number.")
	assert(type(green) == "number", "Arg #7 (green) must be a number.")
	assert(type(blue) == "number", "Arg #8 (blue) must be a number.")
	assert(type(alpha) == "number", "Arg #9 (alpha) must be a number.")

	local result = native_call(0xFDDC2B4ED3C69DF0, xPos, yPos, xScale, yScale, rotation, red, green, blue, alpha)
end
natives.graphics.draw_tv_channel = natives.GRAPHICS.DRAW_TV_CHANNEL

--[[
Loads specified video sequence into the TV Channel
TV_Channel ranges from 0-2
VideoSequence can be any of the following:
"PL_STD_CNT" CNT Standard Channel
"PL_STD_WZL" Weazel Standard Channel
"PL_LO_CNT"
"PL_LO_WZL"
"PL_SP_WORKOUT"
"PL_SP_INV" - Jay Norris Assassination Mission Fail
"PL_SP_INV_EXP" - Jay Norris Assassination Mission Success
"PL_LO_RS" - Righteous Slaughter Ad
"PL_LO_RS_CUTSCENE" - Righteous Slaughter Cut-scene
"PL_SP_PLSH1_INTRO"
"PL_LES1_FAME_OR_SHAME"
"PL_STD_WZL_FOS_EP2"
"PL_MP_WEAZEL" - Weazel Logo on loop
"PL_MP_CCTV" - Generic CCTV loop

Restart:
0=video sequence continues as normal
1=sequence restarts from beginning every time that channel is selected


The above playlists work as intended, and are commonly used, but there are many more playlists, as seen in `tvplaylists.xml`. A pastebin below outlines all playlists, they will be surronded by the name tag I.E. (<Name>PL_STD_CNT</Name> = PL_STD_CNT).
https://pastebin.com/zUzGB6h7
]]
function natives.GRAPHICS.SET_TV_CHANNEL_PLAYLIST(--[[int]] tvChannel, --[[const char*]] playlistName, --[[BOOL]] restart) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_TV_CHANNEL_PLAYLIST' due to disabled trusted mode")

	assert(type(tvChannel) == "number", "Arg #1 (tvChannel) must be a number.")
	assert(type(playlistName) == "string", "Arg #2 (playlistName) must be a string.")
	assert(type(restart) == "boolean", "Arg #3 (restart) must be a boolean.")

	local result = native_call(0xF7B38B8305F1FE8B, tvChannel, playlistName, restart)
end
natives.graphics.set_tv_channel_playlist = natives.GRAPHICS.SET_TV_CHANNEL_PLAYLIST

function natives.GRAPHICS.SET_TV_CHANNEL_PLAYLIST_AT_HOUR(--[[int]] tvChannel, --[[const char*]] playlistName, --[[int]] hour) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_TV_CHANNEL_PLAYLIST_AT_HOUR' due to disabled trusted mode")

	assert(type(tvChannel) == "number", "Arg #1 (tvChannel) must be a number.")
	assert(type(playlistName) == "string", "Arg #2 (playlistName) must be a string.")
	assert(type(hour) == "number", "Arg #3 (hour) must be a number.")

	local result = native_call(0x2201C576FACAEBE8, tvChannel, playlistName, hour)
end
natives.graphics.set_tv_channel_playlist_at_hour = natives.GRAPHICS.SET_TV_CHANNEL_PLAYLIST_AT_HOUR

function natives.GRAPHICS.CLEAR_TV_CHANNEL_PLAYLIST(--[[int]] tvChannel) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.CLEAR_TV_CHANNEL_PLAYLIST' due to disabled trusted mode")

	assert(type(tvChannel) == "number", "Arg #1 (tvChannel) must be a number.")

	local result = native_call(0xBEB3D46BB7F043C0, tvChannel)
end
natives.graphics.clear_tv_channel_playlist = natives.GRAPHICS.CLEAR_TV_CHANNEL_PLAYLIST

function natives.GRAPHICS.IS_PLAYLIST_ON_CHANNEL(--[[int]] tvChannel, --[[Any]] p1) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.IS_PLAYLIST_ON_CHANNEL' due to disabled trusted mode")

	assert(type(tvChannel) == "number", "Arg #1 (tvChannel) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x1F710BFF7DAE6261, tvChannel, p1)
	return result:__tointeger() ~= 0
end
natives.graphics.is_playlist_on_channel = natives.GRAPHICS.IS_PLAYLIST_ON_CHANNEL

function natives.GRAPHICS.IS_TVSHOW_CURRENTLY_PLAYING(--[[Hash]] videoCliphash) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.IS_TVSHOW_CURRENTLY_PLAYING' due to disabled trusted mode")

	assert(type(videoCliphash) == "number", "Arg #1 (videoCliphash) must be a number.")

	local result = native_call(0x0AD973CA1E077B60, videoCliphash)
	return result:__tointeger() ~= 0
end
natives.graphics.is_tvshow_currently_playing = natives.GRAPHICS.IS_TVSHOW_CURRENTLY_PLAYING

function natives.GRAPHICS.ENABLE_MOVIE_KEYFRAME_WAIT(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.ENABLE_MOVIE_KEYFRAME_WAIT' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x74C180030FDE4B69, toggle)
end
natives.graphics.enable_movie_keyframe_wait = natives.GRAPHICS.ENABLE_MOVIE_KEYFRAME_WAIT

function natives.GRAPHICS.SET_TV_PLAYER_WATCHING_THIS_FRAME(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.SET_TV_PLAYER_WATCHING_THIS_FRAME' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xD1C55B110E4DF534, p0)
end
natives.graphics.set_tv_player_watching_this_frame = natives.GRAPHICS.SET_TV_PLAYER_WATCHING_THIS_FRAME

function natives.GRAPHICS.GET_CURRENT_TV_CLIP_NAMEHASH() -- Returns Hash
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.GET_CURRENT_TV_CLIP_NAMEHASH' due to disabled trusted mode")

	local result = native_call(0x30432A0118736E00)
	return result:__tointeger()
end
natives.graphics.get_current_tv_clip_namehash = natives.GRAPHICS.GET_CURRENT_TV_CLIP_NAMEHASH

function natives.GRAPHICS.ENABLE_MOVIE_SUBTITLES(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.ENABLE_MOVIE_SUBTITLES' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x873FA65C778AD970, toggle)
end
natives.graphics.enable_movie_subtitles = natives.GRAPHICS.ENABLE_MOVIE_SUBTITLES

function natives.GRAPHICS.UI3DSCENE_IS_AVAILABLE() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.UI3DSCENE_IS_AVAILABLE' due to disabled trusted mode")

	local result = native_call(0xD3A10FC7FD8D98CD)
	return result:__tointeger() ~= 0
end
natives.graphics.ui3dscene_is_available = natives.GRAPHICS.UI3DSCENE_IS_AVAILABLE

--[[
All presets can be found in common\data\ui\uiscenes.meta
]]
function natives.GRAPHICS.UI3DSCENE_PUSH_PRESET(--[[const char*]] presetName) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.UI3DSCENE_PUSH_PRESET' due to disabled trusted mode")

	assert(type(presetName) == "string", "Arg #1 (presetName) must be a string.")

	local result = native_call(0xF1CEA8A4198D8E9A, presetName)
	return result:__tointeger() ~= 0
end
natives.graphics.ui3dscene_push_preset = natives.GRAPHICS.UI3DSCENE_PUSH_PRESET

--[[
It's called after UI3DSCENE_IS_AVAILABLE and UI3DSCENE_PUSH_PRESET

presetName was always "CELEBRATION_WINNER"
All presets can be found in common\data\ui\uiscenes.meta
]]
function natives.GRAPHICS.UI3DSCENE_ASSIGN_PED_TO_SLOT(--[[const char*]] presetName, --[[Ped]] ped, --[[int]] p2, --[[float]] posX, --[[float]] posY, --[[float]] posZ) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.UI3DSCENE_ASSIGN_PED_TO_SLOT' due to disabled trusted mode")

	assert(type(presetName) == "string", "Arg #1 (presetName) must be a string.")
	assert(type(ped) == "number", "Arg #2 (ped) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(posX) == "number", "Arg #4 (posX) must be a number.")
	assert(type(posY) == "number", "Arg #5 (posY) must be a number.")
	assert(type(posZ) == "number", "Arg #6 (posZ) must be a number.")

	local result = native_call(0x98C4FE6EC34154CA, presetName, ped, p2, posX, posY, posZ)
	return result:__tointeger() ~= 0
end
natives.graphics.ui3dscene_assign_ped_to_slot = natives.GRAPHICS.UI3DSCENE_ASSIGN_PED_TO_SLOT

function natives.GRAPHICS.UI3DSCENE_CLEAR_PATCHED_DATA() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.UI3DSCENE_CLEAR_PATCHED_DATA' due to disabled trusted mode")

	local result = native_call(0x7A42B2E236E71415)
end
natives.graphics.ui3dscene_clear_patched_data = natives.GRAPHICS.UI3DSCENE_CLEAR_PATCHED_DATA

function natives.GRAPHICS.UI3DSCENE_MAKE_PUSHED_PRESET_PERSISTENT(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.UI3DSCENE_MAKE_PUSHED_PRESET_PERSISTENT' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x108BE26959A9D9BB, toggle)
end
natives.graphics.ui3dscene_make_pushed_preset_persistent = natives.GRAPHICS.UI3DSCENE_MAKE_PUSHED_PRESET_PERSISTENT

--[[
This native enables/disables the gold putting grid display (https://i.imgur.com/TC6cku6.png).
This requires these two natives to be called as well to configure the grid: `0x1c4fc5752bcd8e48` and `0x5ce62918f8d703c7`.
]]
function natives.GRAPHICS.TERRAINGRID_ACTIVATE(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.TERRAINGRID_ACTIVATE' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0xA356990E161C9E65, toggle)
end
natives.graphics.terraingrid_activate = natives.GRAPHICS.TERRAINGRID_ACTIVATE

--[[
This native is used along with these two natives: `0xa356990e161c9e65` and `0x5ce62918f8d703c7`.
This native configures the location, size, rotation, normal height, and the difference ratio between min, normal and max.

All those natives combined they will output something like this: https://i.imgur.com/TC6cku6.png

This native renders a box at the given position, with a special shader that renders a grid on world geometry behind it. This box does not have backface culling.
The forward args here are a direction vector, something similar to what's returned by GET_ENTITY_FORWARD_VECTOR.
normalHeight and heightDiff are used for positioning the color gradient of the grid, colors specified via TERRAINGRID_SET_COLOURS.

Example with box superimposed on the image to demonstrate: https://i.imgur.com/wdqskxd.jpg
]]
function natives.GRAPHICS.TERRAINGRID_SET_PARAMS(--[[float]] x, --[[float]] y, --[[float]] z, --[[float]] forwardX, --[[float]] forwardY, --[[float]] forwardZ, --[[float]] sizeX, --[[float]] sizeY, --[[float]] sizeZ, --[[float]] gridScale, --[[float]] glowIntensity, --[[float]] normalHeight, --[[float]] heightDiff) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.TERRAINGRID_SET_PARAMS' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(forwardX) == "number", "Arg #4 (forwardX) must be a number.")
	assert(type(forwardY) == "number", "Arg #5 (forwardY) must be a number.")
	assert(type(forwardZ) == "number", "Arg #6 (forwardZ) must be a number.")
	assert(type(sizeX) == "number", "Arg #7 (sizeX) must be a number.")
	assert(type(sizeY) == "number", "Arg #8 (sizeY) must be a number.")
	assert(type(sizeZ) == "number", "Arg #9 (sizeZ) must be a number.")
	assert(type(gridScale) == "number", "Arg #10 (gridScale) must be a number.")
	assert(type(glowIntensity) == "number", "Arg #11 (glowIntensity) must be a number.")
	assert(type(normalHeight) == "number", "Arg #12 (normalHeight) must be a number.")
	assert(type(heightDiff) == "number", "Arg #13 (heightDiff) must be a number.")

	local result = native_call(0x1C4FC5752BCD8E48, x, y, z, forwardX, forwardY, forwardZ, sizeX, sizeY, sizeZ, gridScale, glowIntensity, normalHeight, heightDiff)
end
natives.graphics.terraingrid_set_params = natives.GRAPHICS.TERRAINGRID_SET_PARAMS

--[[
This native is used along with these two natives: `0xa356990e161c9e65` and `0x1c4fc5752bcd8e48`.
This native sets the colors for the golf putting grid. the 'min...' values are for the lower areas that the grid covers, the 'max...' values are for the higher areas that the grid covers, all remaining values are for the 'normal' ground height.
All those natives combined they will output something like this: https://i.imgur.com/TC6cku6.png
]]
function natives.GRAPHICS.TERRAINGRID_SET_COLOURS(--[[int]] lowR, --[[int]] lowG, --[[int]] lowB, --[[int]] lowAlpha, --[[int]] r, --[[int]] g, --[[int]] b, --[[int]] alpha, --[[int]] highR, --[[int]] highG, --[[int]] highB, --[[int]] highAlpha) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.TERRAINGRID_SET_COLOURS' due to disabled trusted mode")

	assert(type(lowR) == "number", "Arg #1 (lowR) must be a number.")
	assert(type(lowG) == "number", "Arg #2 (lowG) must be a number.")
	assert(type(lowB) == "number", "Arg #3 (lowB) must be a number.")
	assert(type(lowAlpha) == "number", "Arg #4 (lowAlpha) must be a number.")
	assert(type(r) == "number", "Arg #5 (r) must be a number.")
	assert(type(g) == "number", "Arg #6 (g) must be a number.")
	assert(type(b) == "number", "Arg #7 (b) must be a number.")
	assert(type(alpha) == "number", "Arg #8 (alpha) must be a number.")
	assert(type(highR) == "number", "Arg #9 (highR) must be a number.")
	assert(type(highG) == "number", "Arg #10 (highG) must be a number.")
	assert(type(highB) == "number", "Arg #11 (highB) must be a number.")
	assert(type(highAlpha) == "number", "Arg #12 (highAlpha) must be a number.")

	local result = native_call(0x5CE62918F8D703C7, lowR, lowG, lowB, lowAlpha, r, g, b, alpha, highR, highG, highB, highAlpha)
end
natives.graphics.terraingrid_set_colours = natives.GRAPHICS.TERRAINGRID_SET_COLOURS

--[[
duration - is how long to play the effect for in milliseconds. If 0, it plays the default length
if loop is true, the effect won't stop until you call ANIMPOSTFX_STOP on it. (only loopable effects)

Full list of animpostFX / screen effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animPostFxNamesCompact.json
]]
function natives.GRAPHICS.ANIMPOSTFX_PLAY(--[[const char*]] effectName, --[[int]] duration, --[[BOOL]] looped) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.ANIMPOSTFX_PLAY' due to disabled trusted mode")

	assert(type(effectName) == "string", "Arg #1 (effectName) must be a string.")
	assert(type(duration) == "number", "Arg #2 (duration) must be a number.")
	assert(type(looped) == "boolean", "Arg #3 (looped) must be a boolean.")

	local result = native_call(0x2206BF9A37B7F724, effectName, duration, looped)
end
natives.graphics.animpostfx_play = natives.GRAPHICS.ANIMPOSTFX_PLAY

--[[
See ANIMPOSTFX_PLAY

Full list of animpostFX / screen effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animPostFxNamesCompact.json
]]
function natives.GRAPHICS.ANIMPOSTFX_STOP(--[[const char*]] effectName) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.ANIMPOSTFX_STOP' due to disabled trusted mode")

	assert(type(effectName) == "string", "Arg #1 (effectName) must be a string.")

	local result = native_call(0x068E835A1D0DC0E3, effectName)
end
natives.graphics.animpostfx_stop = natives.GRAPHICS.ANIMPOSTFX_STOP

--[[
See ANIMPOSTFX_PLAY

Full list of animpostFX / screen effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animPostFxNamesCompact.json
]]
function natives.GRAPHICS.ANIMPOSTFX_GET_CURRENT_TIME(--[[const char*]] effectName) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.ANIMPOSTFX_GET_CURRENT_TIME' due to disabled trusted mode")

	assert(type(effectName) == "string", "Arg #1 (effectName) must be a string.")

	local result = native_call(0xE35B38A27E8E7179, effectName)
	return result:__tonumber()
end
natives.graphics.animpostfx_get_current_time = natives.GRAPHICS.ANIMPOSTFX_GET_CURRENT_TIME

--[[
Returns whether the specified effect is active.
See ANIMPOSTFX_PLAY

Full list of animpostFX / screen effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animPostFxNamesCompact.json
]]
function natives.GRAPHICS.ANIMPOSTFX_IS_RUNNING(--[[const char*]] effectName) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.ANIMPOSTFX_IS_RUNNING' due to disabled trusted mode")

	assert(type(effectName) == "string", "Arg #1 (effectName) must be a string.")

	local result = native_call(0x36AD3E690DA5ACEB, effectName)
	return result:__tointeger() ~= 0
end
natives.graphics.animpostfx_is_running = natives.GRAPHICS.ANIMPOSTFX_IS_RUNNING

--[[
Stops ALL currently playing effects.
]]
function natives.GRAPHICS.ANIMPOSTFX_STOP_ALL() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.ANIMPOSTFX_STOP_ALL' due to disabled trusted mode")

	local result = native_call(0xB4EDDC19532BFB85)
end
natives.graphics.animpostfx_stop_all = natives.GRAPHICS.ANIMPOSTFX_STOP_ALL

--[[
Stops the effect and sets a value (bool) in its data (+0x199) to false.
See ANIMPOSTFX_PLAY

Full list of animpostFX / screen effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animPostFxNamesCompact.json
]]
function natives.GRAPHICS.ANIMPOSTFX_STOP_AND_FLUSH_REQUESTS(--[[const char*]] effectName) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'GRAPHICS.ANIMPOSTFX_STOP_AND_FLUSH_REQUESTS' due to disabled trusted mode")

	assert(type(effectName) == "string", "Arg #1 (effectName) must be a string.")

	local result = native_call(0xD2209BE128B5418C, effectName)
end
natives.graphics.animpostfx_stop_and_flush_requests = natives.GRAPHICS.ANIMPOSTFX_STOP_AND_FLUSH_REQUESTS


natives.HUD = {}
natives.hud = {}

--[[
Initializes the text entry for the the text next to a loading prompt. All natives for building UI texts can be used here


e.g
void StartLoadingMessage(char *text, int spinnerType = 3)
  {
     _SET_LOADING_PROMPT_TEXT_ENTRY("STRING");
       ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
       _SHOW_LOADING_PROMPT(spinnerType);
    }
/*OR*/
 void ShowLoadingMessage(char *text, int spinnerType = 3, int timeMs = 10000)
  {
     _SET_LOADING_PROMPT_TEXT_ENTRY("STRING");
       ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
       _SHOW_LOADING_PROMPT(spinnerType);
        WAIT(timeMs);
     _REMOVE_LOADING_PROMPT();
 }


These are some localized strings used in the loading spinner.
"PM_WAIT"                   = Please Wait
"CELEB_WPLYRS"              = Waiting For Players.
"CELL_SPINNER2"             = Scanning storage.
"ERROR_CHECKYACHTNAME" = Registering your yacht's name. Please wait.
"ERROR_CHECKPROFANITY"   = Checking your text for profanity. Please wait.
"FM_COR_AUTOD"                        = Just spinner no text
"FM_IHELP_WAT2"                        = Waiting for other players
"FM_JIP_WAITO"                            = Game options are being set
"FMMC_DOWNLOAD"                    = Downloading
"FMMC_PLYLOAD"                         = Loading
"FMMC_STARTTRAN"                    = Launching session
"HUD_QUITTING"                           =  Quiting session
"KILL_STRIP_IDM"                         = Waiting for to accept
"MP_SPINLOADING"                      = Loading
]]
function natives.HUD.BEGIN_TEXT_COMMAND_BUSYSPINNER_ON(--[[const char*]] string) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.BEGIN_TEXT_COMMAND_BUSYSPINNER_ON' due to disabled trusted mode")

	assert(type(string) == "string", "Arg #1 (string) must be a string.")

	local result = native_call(0xABA17D7CE615ADBF, string)
end
natives.hud.begin_text_command_busyspinner_on = natives.HUD.BEGIN_TEXT_COMMAND_BUSYSPINNER_ON

--[[
enum eBusySpinnerType
{
	BUSY_SPINNER_LEFT,
	BUSY_SPINNER_LEFT_2,
	BUSY_SPINNER_LEFT_3,
	BUSY_SPINNER_SAVE,
	BUSY_SPINNER_RIGHT,
};
]]
function natives.HUD.END_TEXT_COMMAND_BUSYSPINNER_ON(--[[int]] busySpinnerType) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.END_TEXT_COMMAND_BUSYSPINNER_ON' due to disabled trusted mode")

	assert(type(busySpinnerType) == "number", "Arg #1 (busySpinnerType) must be a number.")

	local result = native_call(0xBD12F8228410D9B4, busySpinnerType)
end
natives.hud.end_text_command_busyspinner_on = natives.HUD.END_TEXT_COMMAND_BUSYSPINNER_ON

--[[
Removes the loading prompt at the bottom right of the screen.
]]
function natives.HUD.BUSYSPINNER_OFF() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.BUSYSPINNER_OFF' due to disabled trusted mode")

	local result = native_call(0x10D373323E5B9C0D)
end
natives.hud.busyspinner_off = natives.HUD.BUSYSPINNER_OFF

function natives.HUD.PRELOAD_BUSYSPINNER() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.PRELOAD_BUSYSPINNER' due to disabled trusted mode")

	local result = native_call(0xC65AB383CD91DF98)
end
natives.hud.preload_busyspinner = natives.HUD.PRELOAD_BUSYSPINNER

function natives.HUD.BUSYSPINNER_IS_ON() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.BUSYSPINNER_IS_ON' due to disabled trusted mode")

	local result = native_call(0xD422FCC5F239A915)
	return result:__tointeger() ~= 0
end
natives.hud.busyspinner_is_on = natives.HUD.BUSYSPINNER_IS_ON

function natives.HUD.BUSYSPINNER_IS_DISPLAYING() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.BUSYSPINNER_IS_DISPLAYING' due to disabled trusted mode")

	local result = native_call(0xB2A592B04648A9CB)
	return result:__tointeger() ~= 0
end
natives.hud.busyspinner_is_displaying = natives.HUD.BUSYSPINNER_IS_DISPLAYING

function natives.HUD.DISABLE_PAUSEMENU_SPINNER(--[[BOOL]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.DISABLE_PAUSEMENU_SPINNER' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0x9245E81072704B8A, p0)
end
natives.hud.disable_pausemenu_spinner = natives.HUD.DISABLE_PAUSEMENU_SPINNER

--[[
Shows the cursor on screen for one frame.
]]
function natives.HUD.SET_MOUSE_CURSOR_THIS_FRAME() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_MOUSE_CURSOR_THIS_FRAME' due to disabled trusted mode")

	local result = native_call(0xAAE7CE1D63167423)
end
natives.hud.set_mouse_cursor_this_frame = natives.HUD.SET_MOUSE_CURSOR_THIS_FRAME

--[[
Changes the mouse cursor's sprite. 
1 = Normal
6 = Left Arrow
7 = Right Arrow
]]
function natives.HUD.SET_MOUSE_CURSOR_STYLE(--[[int]] spriteId) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_MOUSE_CURSOR_STYLE' due to disabled trusted mode")

	assert(type(spriteId) == "number", "Arg #1 (spriteId) must be a number.")

	local result = native_call(0x8DB8CFFD58B62552, spriteId)
end
natives.hud.set_mouse_cursor_style = natives.HUD.SET_MOUSE_CURSOR_STYLE

--[[
Shows/hides the frontend cursor on the pause menu or similar menus.
Clicking off and then on the game window will show it again.
]]
function natives.HUD.SET_MOUSE_CURSOR_VISIBLE(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_MOUSE_CURSOR_VISIBLE' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x98215325A695E78A, toggle)
end
natives.hud.set_mouse_cursor_visible = natives.HUD.SET_MOUSE_CURSOR_VISIBLE

--[[
Returns TRUE if mouse is hovering above instructional buttons. Works with all buttons gfx, such as popup_warning, pause_menu_instructional_buttons, instructional_buttons, etc. Note: You have to call TOGGLE_MOUSE_BUTTONS on the scaleform if you want this native to work.
]]
function natives.HUD.IS_MOUSE_ROLLED_OVER_INSTRUCTIONAL_BUTTONS() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.IS_MOUSE_ROLLED_OVER_INSTRUCTIONAL_BUTTONS' due to disabled trusted mode")

	local result = native_call(0x3D9ACB1EB139E702)
	return result:__tointeger() ~= 0
end
natives.hud.is_mouse_rolled_over_instructional_buttons = natives.HUD.IS_MOUSE_ROLLED_OVER_INSTRUCTIONAL_BUTTONS

function natives.HUD.GET_MOUSE_EVENT(--[[int]] scaleformHandle, --[[Any*]] p1, --[[Any*]] p2, --[[Any*]] p3) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.GET_MOUSE_EVENT' due to disabled trusted mode")

	assert(type(scaleformHandle) == "number", "Arg #1 (scaleformHandle) must be a number.")
	assert(type(p1) == "userdata", "Arg #2 (p1) must be a userdata.")
	assert(type(p2) == "userdata", "Arg #3 (p2) must be a userdata.")
	assert(type(p3) == "userdata", "Arg #4 (p3) must be a userdata.")

	local result = native_call(0x632B2940C67F4EA9, scaleformHandle, p1, p2, p3)
	return result:__tointeger() ~= 0
end
natives.hud.get_mouse_event = natives.HUD.GET_MOUSE_EVENT

function natives.HUD.THEFEED_ONLY_SHOW_TOOLTIPS(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.THEFEED_ONLY_SHOW_TOOLTIPS' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x6F1554B0CC2089FA, toggle)
end
natives.hud.thefeed_only_show_tooltips = natives.HUD.THEFEED_ONLY_SHOW_TOOLTIPS

function natives.HUD.THEFEED_SET_SCRIPTED_MENU_HEIGHT(--[[float]] pos) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.THEFEED_SET_SCRIPTED_MENU_HEIGHT' due to disabled trusted mode")

	assert(type(pos) == "number", "Arg #1 (pos) must be a number.")

	local result = native_call(0x55598D21339CB998, pos)
end
natives.hud.thefeed_set_scripted_menu_height = natives.HUD.THEFEED_SET_SCRIPTED_MENU_HEIGHT

--[[
Stops loading screen tips shown by invoking either `0x488043841BBE156F` or `0x15CFA549788D35EF`
]]
function natives.HUD.THEFEED_HIDE() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.THEFEED_HIDE' due to disabled trusted mode")

	local result = native_call(0x32888337579A5970)
end
natives.hud.thefeed_hide = natives.HUD.THEFEED_HIDE

--[[
Once called each frame hides all above radar notifications.
]]
function natives.HUD.THEFEED_HIDE_THIS_FRAME() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.THEFEED_HIDE_THIS_FRAME' due to disabled trusted mode")

	local result = native_call(0x25F87B30C382FCA7)
end
natives.hud.thefeed_hide_this_frame = natives.HUD.THEFEED_HIDE_THIS_FRAME

--[[
Displays loading screen tips, requires `0x56C8B608CFD49854` to be called beforehand.
]]
function natives.HUD.THEFEED_SHOW() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.THEFEED_SHOW' due to disabled trusted mode")

	local result = native_call(0x15CFA549788D35EF)
end
natives.hud.thefeed_show = natives.HUD.THEFEED_SHOW

function natives.HUD.THEFEED_FLUSH_QUEUE() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.THEFEED_FLUSH_QUEUE' due to disabled trusted mode")

	local result = native_call(0xA8FDB297A8D25FBA)
end
natives.hud.thefeed_flush_queue = natives.HUD.THEFEED_FLUSH_QUEUE

--[[
Removes a notification instantly instead of waiting for it to disappear
]]
function natives.HUD.THEFEED_REMOVE_ITEM(--[[int]] notificationId) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.THEFEED_REMOVE_ITEM' due to disabled trusted mode")

	assert(type(notificationId) == "number", "Arg #1 (notificationId) must be a number.")

	local result = native_call(0xBE4390CB40B3E627, notificationId)
end
natives.hud.thefeed_remove_item = natives.HUD.THEFEED_REMOVE_ITEM

function natives.HUD.THEFEED_FORCE_RENDER_ON() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.THEFEED_FORCE_RENDER_ON' due to disabled trusted mode")

	local result = native_call(0xA13C11E1B5C06BFC)
end
natives.hud.thefeed_force_render_on = natives.HUD.THEFEED_FORCE_RENDER_ON

--[[
Enables loading screen tips to be be shown (`_0x15CFA549788D35EF` and `_0x488043841BBE156F`), blocks other kinds of notifications from being displayed (at least from current script). Call `0xADED7F5748ACAFE6` to display those again.
]]
function natives.HUD.THEFEED_FORCE_RENDER_OFF() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.THEFEED_FORCE_RENDER_OFF' due to disabled trusted mode")

	local result = native_call(0x583049884A2EEE3C)
end
natives.hud.thefeed_force_render_off = natives.HUD.THEFEED_FORCE_RENDER_OFF

function natives.HUD.THEFEED_PAUSE() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.THEFEED_PAUSE' due to disabled trusted mode")

	local result = native_call(0xFDB423997FA30340)
end
natives.hud.thefeed_pause = natives.HUD.THEFEED_PAUSE

function natives.HUD.THEFEED_RESUME() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.THEFEED_RESUME' due to disabled trusted mode")

	local result = native_call(0xE1CD1E48E025E661)
end
natives.hud.thefeed_resume = natives.HUD.THEFEED_RESUME

function natives.HUD.THEFEED_IS_PAUSED() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.THEFEED_IS_PAUSED' due to disabled trusted mode")

	local result = native_call(0xA9CBFD40B3FA3010)
	return result:__tointeger() ~= 0
end
natives.hud.thefeed_is_paused = natives.HUD.THEFEED_IS_PAUSED

function natives.HUD.THEFEED_REPORT_LOGO_ON() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.THEFEED_REPORT_LOGO_ON' due to disabled trusted mode")

	local result = native_call(0xD4438C0564490E63)
end
natives.hud.thefeed_report_logo_on = natives.HUD.THEFEED_REPORT_LOGO_ON

function natives.HUD.THEFEED_REPORT_LOGO_OFF() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.THEFEED_REPORT_LOGO_OFF' due to disabled trusted mode")

	local result = native_call(0xB695E2CD0A2DA9EE)
end
natives.hud.thefeed_report_logo_off = natives.HUD.THEFEED_REPORT_LOGO_OFF

--[[
Returns the handle for the notification currently displayed on the screen. Name may be a hash collision, but describes the function accurately.
]]
function natives.HUD.THEFEED_GET_LAST_SHOWN_PHONE_ACTIVATABLE_FEED_ID() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.THEFEED_GET_LAST_SHOWN_PHONE_ACTIVATABLE_FEED_ID' due to disabled trusted mode")

	local result = native_call(0x82352748437638CA)
	return result:__tointeger()
end
natives.hud.thefeed_get_last_shown_phone_activatable_feed_id = natives.HUD.THEFEED_GET_LAST_SHOWN_PHONE_ACTIVATABLE_FEED_ID

--[[
Enables loading screen tips to be be shown (`_0x15CFA549788D35EF` and `_0x488043841BBE156F`), blocks other kinds of notifications from being displayed (at least from current script). Call `0xADED7F5748ACAFE6` to display those again.
]]
function natives.HUD.THEFEED_AUTO_POST_GAMETIPS_ON() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.THEFEED_AUTO_POST_GAMETIPS_ON' due to disabled trusted mode")

	local result = native_call(0x56C8B608CFD49854)
end
natives.hud.thefeed_auto_post_gametips_on = natives.HUD.THEFEED_AUTO_POST_GAMETIPS_ON

--[[
Displays "normal" notifications again after calling `_0x56C8B608CFD49854` (those that were drawn before calling this native too), though those will have a weird offset and stay on screen forever (tested with notifications created from same script).
]]
function natives.HUD.THEFEED_AUTO_POST_GAMETIPS_OFF() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.THEFEED_AUTO_POST_GAMETIPS_OFF' due to disabled trusted mode")

	local result = native_call(0xADED7F5748ACAFE6)
end
natives.hud.thefeed_auto_post_gametips_off = natives.HUD.THEFEED_AUTO_POST_GAMETIPS_OFF

--[[
From the decompiled scripts:
HUD::_92F0DA1E27DB96DC(6);
HUD::_92F0DA1E27DB96DC(184);
HUD::_92F0DA1E27DB96DC(190);

sets background color for the next notification
6 = red
184 = green
190 = yellow

Here is a list of some colors that can be used: gyazo.com/68bd384455fceb0a85a8729e48216e15
]]
function natives.HUD.THEFEED_SET_BACKGROUND_COLOR_FOR_NEXT_POST(--[[int]] hudColorIndex) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.THEFEED_SET_BACKGROUND_COLOR_FOR_NEXT_POST' due to disabled trusted mode")

	assert(type(hudColorIndex) == "number", "Arg #1 (hudColorIndex) must be a number.")

	local result = native_call(0x92F0DA1E27DB96DC, hudColorIndex)
end
natives.hud.thefeed_set_background_color_for_next_post = natives.HUD.THEFEED_SET_BACKGROUND_COLOR_FOR_NEXT_POST

function natives.HUD.THEFEED_SET_RGBA_PARAMETER_FOR_NEXT_MESSAGE(--[[int]] red, --[[int]] green, --[[int]] blue, --[[int]] alpha) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.THEFEED_SET_RGBA_PARAMETER_FOR_NEXT_MESSAGE' due to disabled trusted mode")

	assert(type(red) == "number", "Arg #1 (red) must be a number.")
	assert(type(green) == "number", "Arg #2 (green) must be a number.")
	assert(type(blue) == "number", "Arg #3 (blue) must be a number.")
	assert(type(alpha) == "number", "Arg #4 (alpha) must be a number.")

	local result = native_call(0x17430B918701C342, red, green, blue, alpha)
end
natives.hud.thefeed_set_rgba_parameter_for_next_message = natives.HUD.THEFEED_SET_RGBA_PARAMETER_FOR_NEXT_MESSAGE

--[[
Related to notification color flashing, setting p0 to 0 invalidates a `_SET_NOTIFICATION_FLASH_COLOR` call for the target notification.
]]
function natives.HUD.THEFEED_SET_FLASH_DURATION_PARAMETER_FOR_NEXT_MESSAGE(--[[int]] count) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.THEFEED_SET_FLASH_DURATION_PARAMETER_FOR_NEXT_MESSAGE' due to disabled trusted mode")

	assert(type(count) == "number", "Arg #1 (count) must be a number.")

	local result = native_call(0x17AD8C9706BDD88A, count)
end
natives.hud.thefeed_set_flash_duration_parameter_for_next_message = natives.HUD.THEFEED_SET_FLASH_DURATION_PARAMETER_FOR_NEXT_MESSAGE

function natives.HUD.THEFEED_SET_VIBRATE_PARAMETER_FOR_NEXT_MESSAGE(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.THEFEED_SET_VIBRATE_PARAMETER_FOR_NEXT_MESSAGE' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x4A0C7C9BB10ABB36, toggle)
end
natives.hud.thefeed_set_vibrate_parameter_for_next_message = natives.HUD.THEFEED_SET_VIBRATE_PARAMETER_FOR_NEXT_MESSAGE

function natives.HUD.THEFEED_RESET_ALL_PARAMETERS() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.THEFEED_RESET_ALL_PARAMETERS' due to disabled trusted mode")

	local result = native_call(0xFDD85225B2DEA55E)
end
natives.hud.thefeed_reset_all_parameters = natives.HUD.THEFEED_RESET_ALL_PARAMETERS

--[[
Requires manual management of game stream handles (i.e., 0xBE4390CB40B3E627).
]]
function natives.HUD.THEFEED_FREEZE_NEXT_POST() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.THEFEED_FREEZE_NEXT_POST' due to disabled trusted mode")

	local result = native_call(0xFDEC055AB549E328)
end
natives.hud.thefeed_freeze_next_post = natives.HUD.THEFEED_FREEZE_NEXT_POST

function natives.HUD.THEFEED_CLEAR_FROZEN_POST() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.THEFEED_CLEAR_FROZEN_POST' due to disabled trusted mode")

	local result = native_call(0x80FE4F3AB4E1B62A)
end
natives.hud.thefeed_clear_frozen_post = natives.HUD.THEFEED_CLEAR_FROZEN_POST

function natives.HUD.THEFEED_SET_SNAP_FEED_ITEM_POSITIONS(--[[BOOL]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.THEFEED_SET_SNAP_FEED_ITEM_POSITIONS' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0xBAE4F9B97CD43B30, p0)
end
natives.hud.thefeed_set_snap_feed_item_positions = natives.HUD.THEFEED_SET_SNAP_FEED_ITEM_POSITIONS

--[[
Used in the native scripts to reference "GET_PEDHEADSHOT_TXD_STRING" and "CHAR_DEFAULT".
]]
function natives.HUD.THEFEED_UPDATE_ITEM_TEXTURE(--[[const char*]] txdString1, --[[const char*]] txnString1, --[[const char*]] txdString2, --[[const char*]] txnString2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.THEFEED_UPDATE_ITEM_TEXTURE' due to disabled trusted mode")

	assert(type(txdString1) == "string", "Arg #1 (txdString1) must be a string.")
	assert(type(txnString1) == "string", "Arg #2 (txnString1) must be a string.")
	assert(type(txdString2) == "string", "Arg #3 (txdString2) must be a string.")
	assert(type(txnString2) == "string", "Arg #4 (txnString2) must be a string.")

	local result = native_call(0x317EBA71D7543F52, txdString1, txnString1, txdString2, txnString2)
end
natives.hud.thefeed_update_item_texture = natives.HUD.THEFEED_UPDATE_ITEM_TEXTURE

--[[
Declares the entry type of a notification, for example "STRING".

int ShowNotification(char *text)
{
	BEGIN_TEXT_COMMAND_THEFEED_POST("STRING");
	ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
	return _DRAW_NOTIFICATION(1, 1);
}
]]
function natives.HUD.BEGIN_TEXT_COMMAND_THEFEED_POST(--[[const char*]] text) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.BEGIN_TEXT_COMMAND_THEFEED_POST' due to disabled trusted mode")

	assert(type(text) == "string", "Arg #1 (text) must be a string.")

	local result = native_call(0x202709F4C58A0424, text)
end
natives.hud.begin_text_command_thefeed_post = natives.HUD.BEGIN_TEXT_COMMAND_THEFEED_POST

--[[
List of picture names: https://pastebin.com/XdpJVbHz
Example result: https://i.imgur.com/SdEZ22m.png
]]
function natives.HUD.END_TEXT_COMMAND_THEFEED_POST_STATS(--[[const char*]] statTitle, --[[int]] iconEnum, --[[BOOL]] stepVal, --[[int]] barValue, --[[BOOL]] isImportant, --[[const char*]] pictureTextureDict, --[[const char*]] pictureTextureName) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.END_TEXT_COMMAND_THEFEED_POST_STATS' due to disabled trusted mode")

	assert(type(statTitle) == "string", "Arg #1 (statTitle) must be a string.")
	assert(type(iconEnum) == "number", "Arg #2 (iconEnum) must be a number.")
	assert(type(stepVal) == "boolean", "Arg #3 (stepVal) must be a boolean.")
	assert(type(barValue) == "number", "Arg #4 (barValue) must be a number.")
	assert(type(isImportant) == "boolean", "Arg #5 (isImportant) must be a boolean.")
	assert(type(pictureTextureDict) == "string", "Arg #6 (pictureTextureDict) must be a string.")
	assert(type(pictureTextureName) == "string", "Arg #7 (pictureTextureName) must be a string.")

	local result = native_call(0x2B7E9A4EAAA93C89, statTitle, iconEnum, stepVal, barValue, isImportant, pictureTextureDict, pictureTextureName)
	return result:__tointeger()
end
natives.hud.end_text_command_thefeed_post_stats = natives.HUD.END_TEXT_COMMAND_THEFEED_POST_STATS

--[[
This function can show pictures of every texture that can be requested by REQUEST_STREAMED_TEXTURE_DICT.

List of picNames: pastebin.com/XdpJVbHz


flash is a bool for fading in.
iconTypes:
1 : Chat Box
2 : Email
3 : Add Friend Request
4 : Nothing
5 : Nothing
6 : Nothing
7 : Right Jumping Arrow
8 : RP Icon
9 : $ Icon

"sender" is the very top header. This can be any old string.
"subject" is the header under the sender.
]]
function natives.HUD.END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT(--[[const char*]] txdName, --[[const char*]] textureName, --[[BOOL]] flash, --[[int]] iconType, --[[const char*]] sender, --[[const char*]] subject) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT' due to disabled trusted mode")

	assert(type(txdName) == "string", "Arg #1 (txdName) must be a string.")
	assert(type(textureName) == "string", "Arg #2 (textureName) must be a string.")
	assert(type(flash) == "boolean", "Arg #3 (flash) must be a boolean.")
	assert(type(iconType) == "number", "Arg #4 (iconType) must be a number.")
	assert(type(sender) == "string", "Arg #5 (sender) must be a string.")
	assert(type(subject) == "string", "Arg #6 (subject) must be a string.")

	local result = native_call(0x1CCD9A37359072CF, txdName, textureName, flash, iconType, sender, subject)
	return result:__tointeger()
end
natives.hud.end_text_command_thefeed_post_messagetext = natives.HUD.END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT

--[[
This function can show pictures of every texture that can be requested by REQUEST_STREAMED_TEXTURE_DICT.

Needs more research.

Only one type of usage in the scripts:

HUD::_C6F580E4C94926AC("CHAR_ACTING_UP", "CHAR_ACTING_UP", 0, 0, "DI_FEED_CHAR", a_0);
]]
function natives.HUD.END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_SUBTITLE_LABEL(--[[const char*]] txdName, --[[const char*]] textureName, --[[BOOL]] flash, --[[int]] iconType, --[[const char*]] sender, --[[const char*]] subject) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_SUBTITLE_LABEL' due to disabled trusted mode")

	assert(type(txdName) == "string", "Arg #1 (txdName) must be a string.")
	assert(type(textureName) == "string", "Arg #2 (textureName) must be a string.")
	assert(type(flash) == "boolean", "Arg #3 (flash) must be a boolean.")
	assert(type(iconType) == "number", "Arg #4 (iconType) must be a number.")
	assert(type(sender) == "string", "Arg #5 (sender) must be a string.")
	assert(type(subject) == "string", "Arg #6 (subject) must be a string.")

	local result = native_call(0xC6F580E4C94926AC, txdName, textureName, flash, iconType, sender, subject)
	return result:__tointeger()
end
natives.hud.end_text_command_thefeed_post_messagetext_subtitle_label = natives.HUD.END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_SUBTITLE_LABEL

--[[
This function can show pictures of every texture that can be requested by REQUEST_STREAMED_TEXTURE_DICT.

NOTE: 'duration' is a multiplier, so 1.0 is normal, 2.0 is twice as long (very slow), and 0.5 is half as long.

Example, only occurrence in the scripts:
v_8 = HUD::_1E6611149DB3DB6B("CHAR_SOCIAL_CLUB", "CHAR_SOCIAL_CLUB", 0, 0, &v_9, "", a_5);
]]
function natives.HUD.END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_TU(--[[const char*]] txdName, --[[const char*]] textureName, --[[BOOL]] flash, --[[int]] iconType, --[[const char*]] sender, --[[const char*]] subject, --[[float]] duration) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_TU' due to disabled trusted mode")

	assert(type(txdName) == "string", "Arg #1 (txdName) must be a string.")
	assert(type(textureName) == "string", "Arg #2 (textureName) must be a string.")
	assert(type(flash) == "boolean", "Arg #3 (flash) must be a boolean.")
	assert(type(iconType) == "number", "Arg #4 (iconType) must be a number.")
	assert(type(sender) == "string", "Arg #5 (sender) must be a string.")
	assert(type(subject) == "string", "Arg #6 (subject) must be a string.")
	assert(type(duration) == "number", "Arg #7 (duration) must be a number.")

	local result = native_call(0x1E6611149DB3DB6B, txdName, textureName, flash, iconType, sender, subject, duration)
	return result:__tointeger()
end
natives.hud.end_text_command_thefeed_post_messagetext_tu = natives.HUD.END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_TU

--[[
This function can show pictures of every texture that can be requested by REQUEST_STREAMED_TEXTURE_DICT.

List of picNames pastebin.com/XdpJVbHz

flash is a bool for fading in.
iconTypes:
1 : Chat Box
2 : Email
3 : Add Friend Request
4 : Nothing
5 : Nothing
6 : Nothing
7 : Right Jumping Arrow
8 : RP Icon
9 : $ Icon

"sender" is the very top header. This can be any old string.
"subject" is the header under the sender.
"duration" is a multiplier, so 1.0 is normal, 2.0 is twice as long (very slow), and 0.5 is half as long.
"clanTag" shows a crew tag in the "sender" header, after the text. You need to use 3 underscores as padding. Maximum length of this field seems to be 7. (e.g. "MK" becomes "___MK", "ACE" becomes "___ACE", etc.)
]]
function natives.HUD.END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_WITH_CREW_TAG(--[[const char*]] txdName, --[[const char*]] textureName, --[[BOOL]] flash, --[[int]] iconType, --[[const char*]] sender, --[[const char*]] subject, --[[float]] duration, --[[const char*]] clanTag) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_WITH_CREW_TAG' due to disabled trusted mode")

	assert(type(txdName) == "string", "Arg #1 (txdName) must be a string.")
	assert(type(textureName) == "string", "Arg #2 (textureName) must be a string.")
	assert(type(flash) == "boolean", "Arg #3 (flash) must be a boolean.")
	assert(type(iconType) == "number", "Arg #4 (iconType) must be a number.")
	assert(type(sender) == "string", "Arg #5 (sender) must be a string.")
	assert(type(subject) == "string", "Arg #6 (subject) must be a string.")
	assert(type(duration) == "number", "Arg #7 (duration) must be a number.")
	assert(type(clanTag) == "string", "Arg #8 (clanTag) must be a string.")

	local result = native_call(0x5CBF7BADE20DB93E, txdName, textureName, flash, iconType, sender, subject, duration, clanTag)
	return result:__tointeger()
end
natives.hud.end_text_command_thefeed_post_messagetext_with_crew_tag = natives.HUD.END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_WITH_CREW_TAG

--[[
This function can show pictures of every texture that can be requested by REQUEST_STREAMED_TEXTURE_DICT.

List of picNames: pastebin.com/XdpJVbHz

flash is a bool for fading in.
iconTypes:
1 : Chat Box
2 : Email
3 : Add Friend Request
4 : Nothing
5 : Nothing
6 : Nothing
7 : Right Jumping Arrow
8 : RP Icon
9 : $ Icon

"sender" is the very top header. This can be any old string.
"subject" is the header under the sender.
"duration" is a multiplier, so 1.0 is normal, 2.0 is twice as long (very slow), and 0.5 is half as long.
"clanTag" shows a crew tag in the "sender" header, after the text. You need to use 3 underscores as padding. Maximum length of this field seems to be 7. (e.g. "MK" becomes "___MK", "ACE" becomes "___ACE", etc.)
iconType2 is a mirror of iconType. It shows in the "subject" line, right under the original iconType.


int IconNotification(char *text, char *text2, char *Subject)
{
    _SET_NOTIFICATION_TEXT_ENTRY("STRING");
 ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
   _SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_SOCIAL_CLUB", "CHAR_SOCIAL_CLUB", 1, 7, text2, Subject, 1.0f, "__EXAMPLE", 7);
   return _DRAW_NOTIFICATION(1, 1);
}
]]
function natives.HUD.END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_WITH_CREW_TAG_AND_ADDITIONAL_ICON(--[[const char*]] txdName, --[[const char*]] textureName, --[[BOOL]] flash, --[[int]] iconType1, --[[const char*]] sender, --[[const char*]] subject, --[[float]] duration, --[[const char*]] clanTag, --[[int]] iconType2, --[[int]] p9) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_WITH_CREW_TAG_AND_ADDITIONAL_ICON' due to disabled trusted mode")

	assert(type(txdName) == "string", "Arg #1 (txdName) must be a string.")
	assert(type(textureName) == "string", "Arg #2 (textureName) must be a string.")
	assert(type(flash) == "boolean", "Arg #3 (flash) must be a boolean.")
	assert(type(iconType1) == "number", "Arg #4 (iconType1) must be a number.")
	assert(type(sender) == "string", "Arg #5 (sender) must be a string.")
	assert(type(subject) == "string", "Arg #6 (subject) must be a string.")
	assert(type(duration) == "number", "Arg #7 (duration) must be a number.")
	assert(type(clanTag) == "string", "Arg #8 (clanTag) must be a string.")
	assert(type(iconType2) == "number", "Arg #9 (iconType2) must be a number.")
	assert(type(p9) == "number", "Arg #10 (p9) must be a number.")

	local result = native_call(0x531B84E7DA981FB6, txdName, textureName, flash, iconType1, sender, subject, duration, clanTag, iconType2, p9)
	return result:__tointeger()
end
natives.hud.end_text_command_thefeed_post_messagetext_with_crew_tag_and_additional_icon = natives.HUD.END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_WITH_CREW_TAG_AND_ADDITIONAL_ICON

function natives.HUD.END_TEXT_COMMAND_THEFEED_POST_TICKER(--[[BOOL]] blink, --[[BOOL]] p1) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.END_TEXT_COMMAND_THEFEED_POST_TICKER' due to disabled trusted mode")

	assert(type(blink) == "boolean", "Arg #1 (blink) must be a boolean.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0x2ED7843F8F801023, blink, p1)
	return result:__tointeger()
end
natives.hud.end_text_command_thefeed_post_ticker = natives.HUD.END_TEXT_COMMAND_THEFEED_POST_TICKER

function natives.HUD.END_TEXT_COMMAND_THEFEED_POST_TICKER_FORCED(--[[BOOL]] blink, --[[BOOL]] p1) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.END_TEXT_COMMAND_THEFEED_POST_TICKER_FORCED' due to disabled trusted mode")

	assert(type(blink) == "boolean", "Arg #1 (blink) must be a boolean.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0x44FA03975424A0EE, blink, p1)
	return result:__tointeger()
end
natives.hud.end_text_command_thefeed_post_ticker_forced = natives.HUD.END_TEXT_COMMAND_THEFEED_POST_TICKER_FORCED

function natives.HUD.END_TEXT_COMMAND_THEFEED_POST_TICKER_WITH_TOKENS(--[[BOOL]] blink, --[[BOOL]] p1) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.END_TEXT_COMMAND_THEFEED_POST_TICKER_WITH_TOKENS' due to disabled trusted mode")

	assert(type(blink) == "boolean", "Arg #1 (blink) must be a boolean.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0x378E809BF61EC840, blink, p1)
	return result:__tointeger()
end
natives.hud.end_text_command_thefeed_post_ticker_with_tokens = natives.HUD.END_TEXT_COMMAND_THEFEED_POST_TICKER_WITH_TOKENS

--[[
Shows an "award" notification above the minimap, example: https://i.imgur.com/e2DNaKX.png
Example:

HUD::_SET_NOTIFICATION_TEXT_ENTRY("HUNT");
HUD::_0xAA295B6F28BD587D("Hunting", "Hunting_Gold_128", 0, 109, "HUD_MED_UNLKED");
]]
function natives.HUD.END_TEXT_COMMAND_THEFEED_POST_AWARD(--[[const char*]] textureDict, --[[const char*]] textureName, --[[int]] rpBonus, --[[int]] colorOverlay, --[[const char*]] titleLabel) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.END_TEXT_COMMAND_THEFEED_POST_AWARD' due to disabled trusted mode")

	assert(type(textureDict) == "string", "Arg #1 (textureDict) must be a string.")
	assert(type(textureName) == "string", "Arg #2 (textureName) must be a string.")
	assert(type(rpBonus) == "number", "Arg #3 (rpBonus) must be a number.")
	assert(type(colorOverlay) == "number", "Arg #4 (colorOverlay) must be a number.")
	assert(type(titleLabel) == "string", "Arg #5 (titleLabel) must be a string.")

	local result = native_call(0xAA295B6F28BD587D, textureDict, textureName, rpBonus, colorOverlay, titleLabel)
	return result:__tointeger()
end
natives.hud.end_text_command_thefeed_post_award = natives.HUD.END_TEXT_COMMAND_THEFEED_POST_AWARD

function natives.HUD.END_TEXT_COMMAND_THEFEED_POST_CREWTAG(--[[BOOL]] p0, --[[BOOL]] p1, --[[int*]] p2, --[[int]] p3, --[[BOOL]] isLeader, --[[BOOL]] unk0, --[[int]] clanDesc, --[[int]] R, --[[int]] G, --[[int]] B) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.END_TEXT_COMMAND_THEFEED_POST_CREWTAG' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "userdata", "Arg #3 (p2) must be a userdata.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(isLeader) == "boolean", "Arg #5 (isLeader) must be a boolean.")
	assert(type(unk0) == "boolean", "Arg #6 (unk0) must be a boolean.")
	assert(type(clanDesc) == "number", "Arg #7 (clanDesc) must be a number.")
	assert(type(R) == "number", "Arg #8 (R) must be a number.")
	assert(type(G) == "number", "Arg #9 (G) must be a number.")
	assert(type(B) == "number", "Arg #10 (B) must be a number.")

	local result = native_call(0x97C9E4E7024A8F2C, p0, p1, p2, p3, isLeader, unk0, clanDesc, R, G, B)
	return result:__tointeger()
end
natives.hud.end_text_command_thefeed_post_crewtag = natives.HUD.END_TEXT_COMMAND_THEFEED_POST_CREWTAG

function natives.HUD.END_TEXT_COMMAND_THEFEED_POST_CREWTAG_WITH_GAME_NAME(--[[BOOL]] p0, --[[BOOL]] p1, --[[int*]] p2, --[[int]] p3, --[[BOOL]] isLeader, --[[BOOL]] unk0, --[[int]] clanDesc, --[[const char*]] playerName, --[[int]] R, --[[int]] G, --[[int]] B) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.END_TEXT_COMMAND_THEFEED_POST_CREWTAG_WITH_GAME_NAME' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "userdata", "Arg #3 (p2) must be a userdata.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(isLeader) == "boolean", "Arg #5 (isLeader) must be a boolean.")
	assert(type(unk0) == "boolean", "Arg #6 (unk0) must be a boolean.")
	assert(type(clanDesc) == "number", "Arg #7 (clanDesc) must be a number.")
	assert(type(playerName) == "string", "Arg #8 (playerName) must be a string.")
	assert(type(R) == "number", "Arg #9 (R) must be a number.")
	assert(type(G) == "number", "Arg #10 (G) must be a number.")
	assert(type(B) == "number", "Arg #11 (B) must be a number.")

	local result = native_call(0x137BC35589E34E1E, p0, p1, p2, p3, isLeader, unk0, clanDesc, playerName, R, G, B)
	return result:__tointeger()
end
natives.hud.end_text_command_thefeed_post_crewtag_with_game_name = natives.HUD.END_TEXT_COMMAND_THEFEED_POST_CREWTAG_WITH_GAME_NAME

function natives.HUD.END_TEXT_COMMAND_THEFEED_POST_UNLOCK(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.END_TEXT_COMMAND_THEFEED_POST_UNLOCK' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0x33EE12743CCD6343, p0, p1, p2)
	return result:__tointeger()
end
natives.hud.end_text_command_thefeed_post_unlock = natives.HUD.END_TEXT_COMMAND_THEFEED_POST_UNLOCK

function natives.HUD.END_TEXT_COMMAND_THEFEED_POST_UNLOCK_TU(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.END_TEXT_COMMAND_THEFEED_POST_UNLOCK_TU' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0xC8F3AAF93D0600BF, p0, p1, p2, p3)
	return result:__tointeger()
end
natives.hud.end_text_command_thefeed_post_unlock_tu = natives.HUD.END_TEXT_COMMAND_THEFEED_POST_UNLOCK_TU

function natives.HUD.END_TEXT_COMMAND_THEFEED_POST_UNLOCK_TU_WITH_COLOR(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3, --[[Any]] p4, --[[Any]] p5) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.END_TEXT_COMMAND_THEFEED_POST_UNLOCK_TU_WITH_COLOR' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")

	local result = native_call(0x7AE0589093A2E088, p0, p1, p2, p3, p4, p5)
	return result:__tointeger()
end
natives.hud.end_text_command_thefeed_post_unlock_tu_with_color = natives.HUD.END_TEXT_COMMAND_THEFEED_POST_UNLOCK_TU_WITH_COLOR

function natives.HUD.END_TEXT_COMMAND_THEFEED_POST_MPTICKER(--[[BOOL]] blink, --[[BOOL]] p1) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.END_TEXT_COMMAND_THEFEED_POST_MPTICKER' due to disabled trusted mode")

	assert(type(blink) == "boolean", "Arg #1 (blink) must be a boolean.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0xF020C96915705B3A, blink, p1)
	return result:__tointeger()
end
natives.hud.end_text_command_thefeed_post_mpticker = natives.HUD.END_TEXT_COMMAND_THEFEED_POST_MPTICKER

function natives.HUD.END_TEXT_COMMAND_THEFEED_POST_CREW_RANKUP_WITH_LITERAL_FLAG(--[[const char*]] p0, --[[const char*]] p1, --[[const char*]] p2, --[[BOOL]] p3, --[[BOOL]] p4) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.END_TEXT_COMMAND_THEFEED_POST_CREW_RANKUP_WITH_LITERAL_FLAG' due to disabled trusted mode")

	assert(type(p0) == "string", "Arg #1 (p0) must be a string.")
	assert(type(p1) == "string", "Arg #2 (p1) must be a string.")
	assert(type(p2) == "string", "Arg #3 (p2) must be a string.")
	assert(type(p3) == "boolean", "Arg #4 (p3) must be a boolean.")
	assert(type(p4) == "boolean", "Arg #5 (p4) must be a boolean.")

	local result = native_call(0x8EFCCF6EC66D85E4, p0, p1, p2, p3, p4)
	return result:__tointeger()
end
natives.hud.end_text_command_thefeed_post_crew_rankup_with_literal_flag = natives.HUD.END_TEXT_COMMAND_THEFEED_POST_CREW_RANKUP_WITH_LITERAL_FLAG

--[[
This function can show pictures of every texture that can be requested by REQUEST_STREAMED_TEXTURE_DICT.

List of picNames: pastebin.com/XdpJVbHz
HUD colors and their values: pastebin.com/d9aHPbXN

Shows a deathmatch score above the minimap, example: https://i.imgur.com/YmoMklG.png
]]
function natives.HUD.END_TEXT_COMMAND_THEFEED_POST_VERSUS_TU(--[[const char*]] txdName1, --[[const char*]] textureName1, --[[int]] count1, --[[const char*]] txdName2, --[[const char*]] textureName2, --[[int]] count2, --[[int]] hudColor1, --[[int]] hudColor2) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.END_TEXT_COMMAND_THEFEED_POST_VERSUS_TU' due to disabled trusted mode")

	assert(type(txdName1) == "string", "Arg #1 (txdName1) must be a string.")
	assert(type(textureName1) == "string", "Arg #2 (textureName1) must be a string.")
	assert(type(count1) == "number", "Arg #3 (count1) must be a number.")
	assert(type(txdName2) == "string", "Arg #4 (txdName2) must be a string.")
	assert(type(textureName2) == "string", "Arg #5 (textureName2) must be a string.")
	assert(type(count2) == "number", "Arg #6 (count2) must be a number.")
	assert(type(hudColor1) == "number", "Arg #7 (hudColor1) must be a number.")
	assert(type(hudColor2) == "number", "Arg #8 (hudColor2) must be a number.")

	local result = native_call(0xB6871B0555B02996, txdName1, textureName1, count1, txdName2, textureName2, count2, hudColor1, hudColor2)
	return result:__tointeger()
end
natives.hud.end_text_command_thefeed_post_versus_tu = natives.HUD.END_TEXT_COMMAND_THEFEED_POST_VERSUS_TU

--[[
returns a notification handle, prints out a notification like below:
type range: 0 - 2
if you set type to 1, image goes from 0 - 39 - Xbox you can add text to

example: 
HUD::_0xD202B92CBF1D816F(1, 20, "Who you trynna get crazy with, ese? Don't you know I'm LOCO?!");
- imgur.com/lGBPCz3
]]
function natives.HUD.END_TEXT_COMMAND_THEFEED_POST_REPLAY(--[[int]] type, --[[int]] image, --[[const char*]] text) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.END_TEXT_COMMAND_THEFEED_POST_REPLAY' due to disabled trusted mode")

	assert(type(type) == "number", "Arg #1 (type) must be a number.")
	assert(type(image) == "number", "Arg #2 (image) must be a number.")
	assert(type(text) == "string", "Arg #3 (text) must be a string.")

	local result = native_call(0xD202B92CBF1D816F, type, image, text)
	return result:__tointeger()
end
natives.hud.end_text_command_thefeed_post_replay = natives.HUD.END_TEXT_COMMAND_THEFEED_POST_REPLAY

--[[
returns a notification handle, prints out a notification like below:
type range: 0 - 2
if you set type to 1, button accepts "~INPUT_SOMETHING~"

example:
HUD::_0xDD6CB2CCE7C2735C(1, "~INPUT_TALK~", "Who you trynna get crazy with, ese? Don't you know I'm LOCO?!");
- imgur.com/UPy0Ial


Examples from the scripts:
l_D1[1/*1*/]=HUD::_DD6CB2CCE7C2735C(1,"~INPUT_REPLAY_START_STOP_RECORDING~","");
l_D1[2/*1*/]=HUD::_DD6CB2CCE7C2735C(1,"~INPUT_SAVE_REPLAY_CLIP~","");
l_D1[1/*1*/]=HUD::_DD6CB2CCE7C2735C(1,"~INPUT_REPLAY_START_STOP_RECORDING~","");
l_D1[2/*1*/]=HUD::_DD6CB2CCE7C2735C(1,"~INPUT_REPLAY_START_STOP_RECORDING_SECONDARY~","");

]]
function natives.HUD.END_TEXT_COMMAND_THEFEED_POST_REPLAY_INPUT(--[[int]] type, --[[const char*]] button, --[[const char*]] text) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.END_TEXT_COMMAND_THEFEED_POST_REPLAY_INPUT' due to disabled trusted mode")

	assert(type(type) == "number", "Arg #1 (type) must be a number.")
	assert(type(button) == "string", "Arg #2 (button) must be a string.")
	assert(type(text) == "string", "Arg #3 (text) must be a string.")

	local result = native_call(0xDD6CB2CCE7C2735C, type, button, text)
	return result:__tointeger()
end
natives.hud.end_text_command_thefeed_post_replay_input = natives.HUD.END_TEXT_COMMAND_THEFEED_POST_REPLAY_INPUT

--[[
Used to be known as _SET_TEXT_ENTRY_2

void ShowSubtitle(char *text)
{
  BEGIN_TEXT_COMMAND_PRINT("STRING");
 ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
   END_TEXT_COMMAND_PRINT(2000, 1);
}
]]
function natives.HUD.BEGIN_TEXT_COMMAND_PRINT(--[[const char*]] GxtEntry) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.BEGIN_TEXT_COMMAND_PRINT' due to disabled trusted mode")

	assert(type(GxtEntry) == "string", "Arg #1 (GxtEntry) must be a string.")

	local result = native_call(0xB87A37EEB7FAA67D, GxtEntry)
end
natives.hud.begin_text_command_print = natives.HUD.BEGIN_TEXT_COMMAND_PRINT

--[[
Draws the subtitle at middle center of the screen.

int duration = time in milliseconds to show text on screen before disappearing

drawImmediately = If true, the text will be drawn immediately, if false, the text will be drawn after the previous subtitle has finished

Used to be known as _DRAW_SUBTITLE_TIMED
]]
function natives.HUD.END_TEXT_COMMAND_PRINT(--[[int]] duration, --[[BOOL]] drawImmediately) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.END_TEXT_COMMAND_PRINT' due to disabled trusted mode")

	assert(type(duration) == "number", "Arg #1 (duration) must be a number.")
	assert(type(drawImmediately) == "boolean", "Arg #2 (drawImmediately) must be a boolean.")

	local result = native_call(0x9D77056A530643F6, duration, drawImmediately)
end
natives.hud.end_text_command_print = natives.HUD.END_TEXT_COMMAND_PRINT

--[[
nothin doin. 

BOOL Message(const char* text)
   {
     BEGIN_TEXT_COMMAND_IS_MESSAGE_DISPLAYED("STRING");
      ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
       return END_TEXT_COMMAND_IS_MESSAGE_DISPLAYED();
   }
]]
function natives.HUD.BEGIN_TEXT_COMMAND_IS_MESSAGE_DISPLAYED(--[[const char*]] text) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.BEGIN_TEXT_COMMAND_IS_MESSAGE_DISPLAYED' due to disabled trusted mode")

	assert(type(text) == "string", "Arg #1 (text) must be a string.")

	local result = native_call(0x853648FD1063A213, text)
end
natives.hud.begin_text_command_is_message_displayed = natives.HUD.BEGIN_TEXT_COMMAND_IS_MESSAGE_DISPLAYED

function natives.HUD.END_TEXT_COMMAND_IS_MESSAGE_DISPLAYED() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.END_TEXT_COMMAND_IS_MESSAGE_DISPLAYED' due to disabled trusted mode")

	local result = native_call(0x8A9BA1AB3E237613)
	return result:__tointeger() ~= 0
end
natives.hud.end_text_command_is_message_displayed = natives.HUD.END_TEXT_COMMAND_IS_MESSAGE_DISPLAYED

--[[
The following were found in the decompiled script files:
STRING, TWOSTRINGS, NUMBER, PERCENTAGE, FO_TWO_NUM, ESMINDOLLA, ESDOLLA, MTPHPER_XPNO, AHD_DIST, CMOD_STAT_0, CMOD_STAT_1, CMOD_STAT_2, CMOD_STAT_3, DFLT_MNU_OPT, F3A_TRAFDEST, ES_HELP_SOC3

ESDOLLA - cash
ESMINDOLLA - cash (negative)

Used to be known as _SET_TEXT_ENTRY
]]
function natives.HUD.BEGIN_TEXT_COMMAND_DISPLAY_TEXT(--[[const char*]] text) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.BEGIN_TEXT_COMMAND_DISPLAY_TEXT' due to disabled trusted mode")

	assert(type(text) == "string", "Arg #1 (text) must be a string.")

	local result = native_call(0x25FBB336DF1804CB, text)
end
natives.hud.begin_text_command_display_text = natives.HUD.BEGIN_TEXT_COMMAND_DISPLAY_TEXT

--[[
After applying the properties to the text (See HUD::SET_TEXT_), this will draw the text in the applied position. Also 0.0f < x, y < 1.0f, percentage of the axis.

Used to be known as _DRAW_TEXT
]]
function natives.HUD.END_TEXT_COMMAND_DISPLAY_TEXT(--[[float]] x, --[[float]] y, --[[int]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.END_TEXT_COMMAND_DISPLAY_TEXT' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0xCD015E5BB0D96A57, x, y, p2)
end
natives.hud.end_text_command_display_text = natives.HUD.END_TEXT_COMMAND_DISPLAY_TEXT

function natives.HUD.BEGIN_TEXT_COMMAND_GET_SCREEN_WIDTH_OF_DISPLAY_TEXT(--[[const char*]] text) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.BEGIN_TEXT_COMMAND_GET_SCREEN_WIDTH_OF_DISPLAY_TEXT' due to disabled trusted mode")

	assert(type(text) == "string", "Arg #1 (text) must be a string.")

	local result = native_call(0x54CE8AC98E120CAB, text)
end
natives.hud.begin_text_command_get_screen_width_of_display_text = natives.HUD.BEGIN_TEXT_COMMAND_GET_SCREEN_WIDTH_OF_DISPLAY_TEXT

function natives.HUD.END_TEXT_COMMAND_GET_SCREEN_WIDTH_OF_DISPLAY_TEXT(--[[BOOL]] p0) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.END_TEXT_COMMAND_GET_SCREEN_WIDTH_OF_DISPLAY_TEXT' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0x85F061DA64ED2F67, p0)
	return result:__tonumber()
end
natives.hud.end_text_command_get_screen_width_of_display_text = natives.HUD.END_TEXT_COMMAND_GET_SCREEN_WIDTH_OF_DISPLAY_TEXT

--[[
int GetLineCount(char *text, float x, float y)
    {
     _BEGIN_TEXT_COMMAND_LINE_COUNT("STRING");
                ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
      return _END_TEXT_COMMAND_GET_LINE_COUNT(x, y);
    }
]]
function natives.HUD.BEGIN_TEXT_COMMAND_GET_NUMBER_OF_LINES_FOR_STRING(--[[const char*]] entry) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.BEGIN_TEXT_COMMAND_GET_NUMBER_OF_LINES_FOR_STRING' due to disabled trusted mode")

	assert(type(entry) == "string", "Arg #1 (entry) must be a string.")

	local result = native_call(0x521FB041D93DD0E4, entry)
end
natives.hud.begin_text_command_get_number_of_lines_for_string = natives.HUD.BEGIN_TEXT_COMMAND_GET_NUMBER_OF_LINES_FOR_STRING

--[[
Determines how many lines the text string will use when drawn on screen. 
Must use 0x521FB041D93DD0E4 for setting up
]]
function natives.HUD.END_TEXT_COMMAND_GET_NUMBER_OF_LINES_FOR_STRING(--[[float]] x, --[[float]] y) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.END_TEXT_COMMAND_GET_NUMBER_OF_LINES_FOR_STRING' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")

	local result = native_call(0x9040DFB09BE75706, x, y)
	return result:__tointeger()
end
natives.hud.end_text_command_get_number_of_lines_for_string = natives.HUD.END_TEXT_COMMAND_GET_NUMBER_OF_LINES_FOR_STRING

--[[
Used to be known as _SET_TEXT_COMPONENT_FORMAT
]]
function natives.HUD.BEGIN_TEXT_COMMAND_DISPLAY_HELP(--[[const char*]] inputType) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.BEGIN_TEXT_COMMAND_DISPLAY_HELP' due to disabled trusted mode")

	assert(type(inputType) == "string", "Arg #1 (inputType) must be a string.")

	local result = native_call(0x8509B634FBE7DA11, inputType)
end
natives.hud.begin_text_command_display_help = natives.HUD.BEGIN_TEXT_COMMAND_DISPLAY_HELP

--[[
shape goes from -1 to 50 (may be more).
p0 is always 0.

Example:
void FloatingHelpText(const char* text)
{
    BEGIN_TEXT_COMMAND_DISPLAY_HELP("STRING");
  ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
   END_TEXT_COMMAND_DISPLAY_HELP (0, 0, 1, -1);
}

Image:
- imgbin.org/images/26209.jpg

more inputs/icons:
- pastebin.com/nqNYWMSB

Used to be known as _DISPLAY_HELP_TEXT_FROM_STRING_LABEL
]]
function natives.HUD.END_TEXT_COMMAND_DISPLAY_HELP(--[[int]] p0, --[[BOOL]] loop, --[[BOOL]] beep, --[[int]] shape) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.END_TEXT_COMMAND_DISPLAY_HELP' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(loop) == "boolean", "Arg #2 (loop) must be a boolean.")
	assert(type(beep) == "boolean", "Arg #3 (beep) must be a boolean.")
	assert(type(shape) == "number", "Arg #4 (shape) must be a number.")

	local result = native_call(0x238FFE5C7B0498A6, p0, loop, beep, shape)
end
natives.hud.end_text_command_display_help = natives.HUD.END_TEXT_COMMAND_DISPLAY_HELP

--[[
BOOL IsContextActive(char *ctx)
    {
     BEGIN_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(ctx);
     return END_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(0);
  }
]]
function natives.HUD.BEGIN_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(--[[const char*]] labelName) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.BEGIN_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED' due to disabled trusted mode")

	assert(type(labelName) == "string", "Arg #1 (labelName) must be a string.")

	local result = native_call(0x0A24DA3A41B718F5, labelName)
end
natives.hud.begin_text_command_is_this_help_message_being_displayed = natives.HUD.BEGIN_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED

function natives.HUD.END_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(--[[int]] p0) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.END_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x10BDDBFC529428DD, p0)
	return result:__tointeger() ~= 0
end
natives.hud.end_text_command_is_this_help_message_being_displayed = natives.HUD.END_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED

--[[
Starts a text command to change the name of a blip displayed in the pause menu.
This should be paired with `END_TEXT_COMMAND_SET_BLIP_NAME`, once adding all required text components.
Example:

HUD::BEGIN_TEXT_COMMAND_SET_BLIP_NAME("STRING");
HUD::_ADD_TEXT_COMPONENT_STRING("Name");
HUD::END_TEXT_COMMAND_SET_BLIP_NAME(blip);
]]
function natives.HUD.BEGIN_TEXT_COMMAND_SET_BLIP_NAME(--[[const char*]] textLabel) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.BEGIN_TEXT_COMMAND_SET_BLIP_NAME' due to disabled trusted mode")

	assert(type(textLabel) == "string", "Arg #1 (textLabel) must be a string.")

	local result = native_call(0xF9113A30DE5C6670, textLabel)
end
natives.hud.begin_text_command_set_blip_name = natives.HUD.BEGIN_TEXT_COMMAND_SET_BLIP_NAME

--[[
Finalizes a text command started with BEGIN_TEXT_COMMAND_SET_BLIP_NAME, setting the name of the specified blip.
]]
function natives.HUD.END_TEXT_COMMAND_SET_BLIP_NAME(--[[Blip]] blip) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.END_TEXT_COMMAND_SET_BLIP_NAME' due to disabled trusted mode")

	assert(type(blip) == "number", "Arg #1 (blip) must be a number.")

	local result = native_call(0xBC38B49BCB83BC9B, blip)
end
natives.hud.end_text_command_set_blip_name = natives.HUD.END_TEXT_COMMAND_SET_BLIP_NAME

function natives.HUD.BEGIN_TEXT_COMMAND_ADD_DIRECTLY_TO_PREVIOUS_BRIEFS(--[[const char*]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.BEGIN_TEXT_COMMAND_ADD_DIRECTLY_TO_PREVIOUS_BRIEFS' due to disabled trusted mode")

	assert(type(p0) == "string", "Arg #1 (p0) must be a string.")

	local result = native_call(0x23D69E0465570028, p0)
end
natives.hud.begin_text_command_add_directly_to_previous_briefs = natives.HUD.BEGIN_TEXT_COMMAND_ADD_DIRECTLY_TO_PREVIOUS_BRIEFS

function natives.HUD.END_TEXT_COMMAND_ADD_DIRECTLY_TO_PREVIOUS_BRIEFS(--[[BOOL]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.END_TEXT_COMMAND_ADD_DIRECTLY_TO_PREVIOUS_BRIEFS' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0xCFDBDF5AE59BA0F4, p0)
end
natives.hud.end_text_command_add_directly_to_previous_briefs = natives.HUD.END_TEXT_COMMAND_ADD_DIRECTLY_TO_PREVIOUS_BRIEFS

--[[
clears a print text command with this text
]]
function natives.HUD.BEGIN_TEXT_COMMAND_CLEAR_PRINT(--[[const char*]] text) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.BEGIN_TEXT_COMMAND_CLEAR_PRINT' due to disabled trusted mode")

	assert(type(text) == "string", "Arg #1 (text) must be a string.")

	local result = native_call(0xE124FA80A759019C, text)
end
natives.hud.begin_text_command_clear_print = natives.HUD.BEGIN_TEXT_COMMAND_CLEAR_PRINT

function natives.HUD.END_TEXT_COMMAND_CLEAR_PRINT() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.END_TEXT_COMMAND_CLEAR_PRINT' due to disabled trusted mode")

	local result = native_call(0xFCC75460ABA29378)
end
natives.hud.end_text_command_clear_print = natives.HUD.END_TEXT_COMMAND_CLEAR_PRINT

function natives.HUD.BEGIN_TEXT_COMMAND_OVERRIDE_BUTTON_TEXT(--[[const char*]] gxtEntry) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.BEGIN_TEXT_COMMAND_OVERRIDE_BUTTON_TEXT' due to disabled trusted mode")

	assert(type(gxtEntry) == "string", "Arg #1 (gxtEntry) must be a string.")

	local result = native_call(0x8F9EE5687F8EECCD, gxtEntry)
end
natives.hud.begin_text_command_override_button_text = natives.HUD.BEGIN_TEXT_COMMAND_OVERRIDE_BUTTON_TEXT

function natives.HUD.END_TEXT_COMMAND_OVERRIDE_BUTTON_TEXT(--[[int]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.END_TEXT_COMMAND_OVERRIDE_BUTTON_TEXT' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xA86911979638106F, p0)
end
natives.hud.end_text_command_override_button_text = natives.HUD.END_TEXT_COMMAND_OVERRIDE_BUTTON_TEXT

function natives.HUD.ADD_TEXT_COMPONENT_INTEGER(--[[int]] value) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.ADD_TEXT_COMPONENT_INTEGER' due to disabled trusted mode")

	assert(type(value) == "number", "Arg #1 (value) must be a number.")

	local result = native_call(0x03B504CF259931BC, value)
end
natives.hud.add_text_component_integer = natives.HUD.ADD_TEXT_COMPONENT_INTEGER

function natives.HUD.ADD_TEXT_COMPONENT_FLOAT(--[[float]] value, --[[int]] decimalPlaces) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.ADD_TEXT_COMPONENT_FLOAT' due to disabled trusted mode")

	assert(type(value) == "number", "Arg #1 (value) must be a number.")
	assert(type(decimalPlaces) == "number", "Arg #2 (decimalPlaces) must be a number.")

	local result = native_call(0xE7DCB5B874BCD96E, value, decimalPlaces)
end
natives.hud.add_text_component_float = natives.HUD.ADD_TEXT_COMPONENT_FLOAT

function natives.HUD.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL(--[[const char*]] labelName) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL' due to disabled trusted mode")

	assert(type(labelName) == "string", "Arg #1 (labelName) must be a string.")

	local result = native_call(0xC63CD5D2920ACBE7, labelName)
end
natives.hud.add_text_component_substring_text_label = natives.HUD.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL

--[[
It adds the localized text of the specified GXT entry name. Eg. if the argument is GET_HASH_KEY("ES_HELP"), adds "Continue". Just uses a text labels hash key
]]
function natives.HUD.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL_HASH_KEY(--[[Hash]] gxtEntryHash) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL_HASH_KEY' due to disabled trusted mode")

	assert(type(gxtEntryHash) == "number", "Arg #1 (gxtEntryHash) must be a number.")

	local result = native_call(0x17299B63C7683A2B, gxtEntryHash)
end
natives.hud.add_text_component_substring_text_label_hash_key = natives.HUD.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL_HASH_KEY

function natives.HUD.ADD_TEXT_COMPONENT_SUBSTRING_BLIP_NAME(--[[Blip]] blip) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.ADD_TEXT_COMPONENT_SUBSTRING_BLIP_NAME' due to disabled trusted mode")

	assert(type(blip) == "number", "Arg #1 (blip) must be a number.")

	local result = native_call(0x80EAD8E2E1D5D52E, blip)
end
natives.hud.add_text_component_substring_blip_name = natives.HUD.ADD_TEXT_COMPONENT_SUBSTRING_BLIP_NAME

function natives.HUD.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(--[[const char*]] text) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME' due to disabled trusted mode")

	assert(type(text) == "string", "Arg #1 (text) must be a string.")

	local result = native_call(0x6C188BE134E074AA, text)
end
natives.hud.add_text_component_substring_player_name = natives.HUD.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME

--[[
Adds a timer (e.g. "00:00:00:000"). The appearance of the timer depends on the flags, which needs more research.
]]
function natives.HUD.ADD_TEXT_COMPONENT_SUBSTRING_TIME(--[[int]] timestamp, --[[int]] flags) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.ADD_TEXT_COMPONENT_SUBSTRING_TIME' due to disabled trusted mode")

	assert(type(timestamp) == "number", "Arg #1 (timestamp) must be a number.")
	assert(type(flags) == "number", "Arg #2 (flags) must be a number.")

	local result = native_call(0x1115F16B8AB9E8BF, timestamp, flags)
end
natives.hud.add_text_component_substring_time = natives.HUD.ADD_TEXT_COMPONENT_SUBSTRING_TIME

function natives.HUD.ADD_TEXT_COMPONENT_FORMATTED_INTEGER(--[[int]] value, --[[BOOL]] commaSeparated) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.ADD_TEXT_COMPONENT_FORMATTED_INTEGER' due to disabled trusted mode")

	assert(type(value) == "number", "Arg #1 (value) must be a number.")
	assert(type(commaSeparated) == "boolean", "Arg #2 (commaSeparated) must be a boolean.")

	local result = native_call(0x0E4C749FF9DE9CC4, value, commaSeparated)
end
natives.hud.add_text_component_formatted_integer = natives.HUD.ADD_TEXT_COMPONENT_FORMATTED_INTEGER

--[[
p1 was always -1
]]
function natives.HUD.ADD_TEXT_COMPONENT_SUBSTRING_PHONE_NUMBER(--[[const char*]] p0, --[[int]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.ADD_TEXT_COMPONENT_SUBSTRING_PHONE_NUMBER' due to disabled trusted mode")

	assert(type(p0) == "string", "Arg #1 (p0) must be a string.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x761B77454205A61D, p0, p1)
end
natives.hud.add_text_component_substring_phone_number = natives.HUD.ADD_TEXT_COMPONENT_SUBSTRING_PHONE_NUMBER

--[[
This native (along with 0x5F68520888E69014 and 0x6C188BE134E074AA) do not actually filter anything. They simply add the provided text (as of 944)
]]
function natives.HUD.ADD_TEXT_COMPONENT_SUBSTRING_WEBSITE(--[[const char*]] website) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.ADD_TEXT_COMPONENT_SUBSTRING_WEBSITE' due to disabled trusted mode")

	assert(type(website) == "string", "Arg #1 (website) must be a string.")

	local result = native_call(0x94CF4AC034C9C986, website)
end
natives.hud.add_text_component_substring_website = natives.HUD.ADD_TEXT_COMPONENT_SUBSTRING_WEBSITE

function natives.HUD.ADD_TEXT_COMPONENT_SUBSTRING_KEYBOARD_DISPLAY(--[[const char*]] string) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.ADD_TEXT_COMPONENT_SUBSTRING_KEYBOARD_DISPLAY' due to disabled trusted mode")

	assert(type(string) == "string", "Arg #1 (string) must be a string.")

	local result = native_call(0x5F68520888E69014, string)
end
natives.hud.add_text_component_substring_keyboard_display = natives.HUD.ADD_TEXT_COMPONENT_SUBSTRING_KEYBOARD_DISPLAY

function natives.HUD.SET_COLOUR_OF_NEXT_TEXT_COMPONENT(--[[int]] hudColor) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_COLOUR_OF_NEXT_TEXT_COMPONENT' due to disabled trusted mode")

	assert(type(hudColor) == "number", "Arg #1 (hudColor) must be a number.")

	local result = native_call(0x39BBF623FC803EAC, hudColor)
end
natives.hud.set_colour_of_next_text_component = natives.HUD.SET_COLOUR_OF_NEXT_TEXT_COMPONENT

--[[
Returns a substring of a specified length starting at a specified position.

Example:
// Get "STRING" text from "MY_STRING"
subStr = HUD::_GET_TEXT_SUBSTRING("MY_STRING", 3, 6);
]]
function natives.HUD.GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME(--[[const char*]] text, --[[int]] position, --[[int]] length) -- Returns const char*
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME' due to disabled trusted mode")

	assert(type(text) == "string", "Arg #1 (text) must be a string.")
	assert(type(position) == "number", "Arg #2 (position) must be a number.")
	assert(type(length) == "number", "Arg #3 (length) must be a number.")

	local result = native_call(0x169BD9382084C8C0, text, position, length)
	return result:__tostring(true)
end
natives.hud.get_character_from_audio_conversation_filename = natives.HUD.GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME

--[[
Returns a substring of a specified length starting at a specified position. The result is guaranteed not to exceed the specified max length.

NOTE: The 'maxLength' parameter might actually be the size of the buffer that is returned. More research is needed. -CL69

Example:
// Condensed example of how Rockstar uses this function
strLen = HUD::GET_LENGTH_OF_LITERAL_STRING(MISC::GET_ONSCREEN_KEYBOARD_RESULT());
subStr = HUD::_GET_TEXT_SUBSTRING_SAFE(MISC::GET_ONSCREEN_KEYBOARD_RESULT(), 0, strLen, 63);

--

"fm_race_creator.ysc", line 85115:
// parameters modified for clarity
BOOL sub_8e5aa(char *text, int length) {
    for (i = 0; i <= (length - 2); i += 1) {
        if (!MISC::ARE_STRINGS_EQUAL(HUD::_GET_TEXT_SUBSTRING_SAFE(text, i, i + 1, 1), " ")) {
            return FALSE;
        }
    }
    return TRUE;
}
]]
function natives.HUD.GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME_WITH_BYTE_LIMIT(--[[const char*]] text, --[[int]] position, --[[int]] length, --[[int]] maxLength) -- Returns const char*
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME_WITH_BYTE_LIMIT' due to disabled trusted mode")

	assert(type(text) == "string", "Arg #1 (text) must be a string.")
	assert(type(position) == "number", "Arg #2 (position) must be a number.")
	assert(type(length) == "number", "Arg #3 (length) must be a number.")
	assert(type(maxLength) == "number", "Arg #4 (maxLength) must be a number.")

	local result = native_call(0xB2798643312205C5, text, position, length, maxLength)
	return result:__tostring(true)
end
natives.hud.get_character_from_audio_conversation_filename_with_byte_limit = natives.HUD.GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME_WITH_BYTE_LIMIT

--[[
Returns a substring that is between two specified positions. The length of the string will be calculated using (endPosition - startPosition).

Example:
// Get "STRING" text from "MY_STRING"
subStr = HUD::_GET_TEXT_SUBSTRING_SLICE("MY_STRING", 3, 9);
// Overflows are possibly replaced with underscores (needs verification)
subStr = HUD::_GET_TEXT_SUBSTRING_SLICE("MY_STRING", 3, 10); // "STRING_"?
]]
function natives.HUD.GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME_BYTES(--[[const char*]] text, --[[int]] startPosition, --[[int]] endPosition) -- Returns const char*
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME_BYTES' due to disabled trusted mode")

	assert(type(text) == "string", "Arg #1 (text) must be a string.")
	assert(type(startPosition) == "number", "Arg #2 (startPosition) must be a number.")
	assert(type(endPosition) == "number", "Arg #3 (endPosition) must be a number.")

	local result = native_call(0xCE94AEBA5D82908A, text, startPosition, endPosition)
	return result:__tostring(true)
end
natives.hud.get_character_from_audio_conversation_filename_bytes = natives.HUD.GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME_BYTES

--[[
Gets a string literal from a label name.
]]
function natives.HUD.GET_FILENAME_FOR_AUDIO_CONVERSATION(--[[const char*]] labelName) -- Returns const char*
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.GET_FILENAME_FOR_AUDIO_CONVERSATION' due to disabled trusted mode")

	assert(type(labelName) == "string", "Arg #1 (labelName) must be a string.")

	local result = native_call(0x7B5280EBA9840C72, labelName)
	return result:__tostring(true)
end
natives.hud.get_filename_for_audio_conversation = natives.HUD.GET_FILENAME_FOR_AUDIO_CONVERSATION

function natives.HUD.CLEAR_PRINTS() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.CLEAR_PRINTS' due to disabled trusted mode")

	local result = native_call(0xCC33FA791322B9D9)
end
natives.hud.clear_prints = natives.HUD.CLEAR_PRINTS

function natives.HUD.CLEAR_BRIEF() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.CLEAR_BRIEF' due to disabled trusted mode")

	local result = native_call(0x9D292F73ADBD9313)
end
natives.hud.clear_brief = natives.HUD.CLEAR_BRIEF

function natives.HUD.CLEAR_ALL_HELP_MESSAGES() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.CLEAR_ALL_HELP_MESSAGES' due to disabled trusted mode")

	local result = native_call(0x6178F68A87A4D3A0)
end
natives.hud.clear_all_help_messages = natives.HUD.CLEAR_ALL_HELP_MESSAGES

--[[
p0: found arguments in the b617d scripts: pastebin.com/X5akCN7z
]]
function natives.HUD.CLEAR_THIS_PRINT(--[[const char*]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.CLEAR_THIS_PRINT' due to disabled trusted mode")

	assert(type(p0) == "string", "Arg #1 (p0) must be a string.")

	local result = native_call(0xCF708001E1E536DD, p0)
end
natives.hud.clear_this_print = natives.HUD.CLEAR_THIS_PRINT

function natives.HUD.CLEAR_SMALL_PRINTS() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.CLEAR_SMALL_PRINTS' due to disabled trusted mode")

	local result = native_call(0x2CEA2839313C09AC)
end
natives.hud.clear_small_prints = natives.HUD.CLEAR_SMALL_PRINTS

function natives.HUD.DOES_TEXT_BLOCK_EXIST(--[[const char*]] gxt) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.DOES_TEXT_BLOCK_EXIST' due to disabled trusted mode")

	assert(type(gxt) == "string", "Arg #1 (gxt) must be a string.")

	local result = native_call(0x1C7302E725259789, gxt)
	return result:__tointeger() ~= 0
end
natives.hud.does_text_block_exist = natives.HUD.DOES_TEXT_BLOCK_EXIST

--[[
Request a gxt into the passed slot.
]]
function natives.HUD.REQUEST_ADDITIONAL_TEXT(--[[const char*]] gxt, --[[int]] slot) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.REQUEST_ADDITIONAL_TEXT' due to disabled trusted mode")

	assert(type(gxt) == "string", "Arg #1 (gxt) must be a string.")
	assert(type(slot) == "number", "Arg #2 (slot) must be a number.")

	local result = native_call(0x71A78003C8E71424, gxt, slot)
end
natives.hud.request_additional_text = natives.HUD.REQUEST_ADDITIONAL_TEXT

function natives.HUD.REQUEST_ADDITIONAL_TEXT_FOR_DLC(--[[const char*]] gxt, --[[int]] slot) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.REQUEST_ADDITIONAL_TEXT_FOR_DLC' due to disabled trusted mode")

	assert(type(gxt) == "string", "Arg #1 (gxt) must be a string.")
	assert(type(slot) == "number", "Arg #2 (slot) must be a number.")

	local result = native_call(0x6009F9F1AE90D8A6, gxt, slot)
end
natives.hud.request_additional_text_for_dlc = natives.HUD.REQUEST_ADDITIONAL_TEXT_FOR_DLC

function natives.HUD.HAS_ADDITIONAL_TEXT_LOADED(--[[int]] slot) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.HAS_ADDITIONAL_TEXT_LOADED' due to disabled trusted mode")

	assert(type(slot) == "number", "Arg #1 (slot) must be a number.")

	local result = native_call(0x02245FE4BED318B8, slot)
	return result:__tointeger() ~= 0
end
natives.hud.has_additional_text_loaded = natives.HUD.HAS_ADDITIONAL_TEXT_LOADED

function natives.HUD.CLEAR_ADDITIONAL_TEXT(--[[int]] p0, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.CLEAR_ADDITIONAL_TEXT' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0x2A179DF17CCF04CD, p0, p1)
end
natives.hud.clear_additional_text = natives.HUD.CLEAR_ADDITIONAL_TEXT

function natives.HUD.IS_STREAMING_ADDITIONAL_TEXT(--[[int]] p0) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.IS_STREAMING_ADDITIONAL_TEXT' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x8B6817B71B85EBF0, p0)
	return result:__tointeger() ~= 0
end
natives.hud.is_streaming_additional_text = natives.HUD.IS_STREAMING_ADDITIONAL_TEXT

--[[
Checks if the specified gxt has loaded into the passed slot.
]]
function natives.HUD.HAS_THIS_ADDITIONAL_TEXT_LOADED(--[[const char*]] gxt, --[[int]] slot) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.HAS_THIS_ADDITIONAL_TEXT_LOADED' due to disabled trusted mode")

	assert(type(gxt) == "string", "Arg #1 (gxt) must be a string.")
	assert(type(slot) == "number", "Arg #2 (slot) must be a number.")

	local result = native_call(0xADBF060E2B30C5BC, gxt, slot)
	return result:__tointeger() ~= 0
end
natives.hud.has_this_additional_text_loaded = natives.HUD.HAS_THIS_ADDITIONAL_TEXT_LOADED

function natives.HUD.IS_MESSAGE_BEING_DISPLAYED() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.IS_MESSAGE_BEING_DISPLAYED' due to disabled trusted mode")

	local result = native_call(0x7984C03AA5CC2F41)
	return result:__tointeger() ~= 0
end
natives.hud.is_message_being_displayed = natives.HUD.IS_MESSAGE_BEING_DISPLAYED

--[[
Checks if the passed gxt name exists in the game files.
]]
function natives.HUD.DOES_TEXT_LABEL_EXIST(--[[const char*]] gxt) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.DOES_TEXT_LABEL_EXIST' due to disabled trusted mode")

	assert(type(gxt) == "string", "Arg #1 (gxt) must be a string.")

	local result = native_call(0xAC09CA973C564252, gxt)
	return result:__tointeger() ~= 0
end
natives.hud.does_text_label_exist = natives.HUD.DOES_TEXT_LABEL_EXIST

function natives.HUD.GET_FIRST_N_CHARACTERS_OF_LITERAL_STRING(--[[const char*]] string, --[[int]] length) -- Returns const char*
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.GET_FIRST_N_CHARACTERS_OF_LITERAL_STRING' due to disabled trusted mode")

	assert(type(string) == "string", "Arg #1 (string) must be a string.")
	assert(type(length) == "number", "Arg #2 (length) must be a number.")

	local result = native_call(0x98C3CF913D895111, string, length)
	return result:__tostring(true)
end
natives.hud.get_first_n_characters_of_literal_string = natives.HUD.GET_FIRST_N_CHARACTERS_OF_LITERAL_STRING

--[[
Returns the string length of the string from the gxt string .
]]
function natives.HUD.GET_LENGTH_OF_STRING_WITH_THIS_TEXT_LABEL(--[[const char*]] gxt) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.GET_LENGTH_OF_STRING_WITH_THIS_TEXT_LABEL' due to disabled trusted mode")

	assert(type(gxt) == "string", "Arg #1 (gxt) must be a string.")

	local result = native_call(0x801BD273D3A23F74, gxt)
	return result:__tointeger()
end
natives.hud.get_length_of_string_with_this_text_label = natives.HUD.GET_LENGTH_OF_STRING_WITH_THIS_TEXT_LABEL

--[[
Returns the length of the string passed (much like strlen).
]]
function natives.HUD.GET_LENGTH_OF_LITERAL_STRING(--[[const char*]] string) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.GET_LENGTH_OF_LITERAL_STRING' due to disabled trusted mode")

	assert(type(string) == "string", "Arg #1 (string) must be a string.")

	local result = native_call(0xF030907CCBB8A9FD, string)
	return result:__tointeger()
end
natives.hud.get_length_of_literal_string = natives.HUD.GET_LENGTH_OF_LITERAL_STRING

function natives.HUD.GET_LENGTH_OF_LITERAL_STRING_IN_BYTES(--[[const char*]] string) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.GET_LENGTH_OF_LITERAL_STRING_IN_BYTES' due to disabled trusted mode")

	assert(type(string) == "string", "Arg #1 (string) must be a string.")

	local result = native_call(0x43E4111189E54F0E, string)
	return result:__tointeger()
end
natives.hud.get_length_of_literal_string_in_bytes = natives.HUD.GET_LENGTH_OF_LITERAL_STRING_IN_BYTES

--[[
This functions converts the hash of a street name into a readable string.

For how to get the hashes, see PATHFIND::GET_STREET_NAME_AT_COORD.
]]
function natives.HUD.GET_STREET_NAME_FROM_HASH_KEY(--[[Hash]] hash) -- Returns const char*
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.GET_STREET_NAME_FROM_HASH_KEY' due to disabled trusted mode")

	assert(type(hash) == "number", "Arg #1 (hash) must be a number.")

	local result = native_call(0xD0EF8A959B8A4CB9, hash)
	return result:__tostring(true)
end
natives.hud.get_street_name_from_hash_key = natives.HUD.GET_STREET_NAME_FROM_HASH_KEY

function natives.HUD.IS_HUD_PREFERENCE_SWITCHED_ON() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.IS_HUD_PREFERENCE_SWITCHED_ON' due to disabled trusted mode")

	local result = native_call(0x1930DFA731813EC4)
	return result:__tointeger() ~= 0
end
natives.hud.is_hud_preference_switched_on = natives.HUD.IS_HUD_PREFERENCE_SWITCHED_ON

function natives.HUD.IS_RADAR_PREFERENCE_SWITCHED_ON() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.IS_RADAR_PREFERENCE_SWITCHED_ON' due to disabled trusted mode")

	local result = native_call(0x9EB6522EA68F22FE)
	return result:__tointeger() ~= 0
end
natives.hud.is_radar_preference_switched_on = natives.HUD.IS_RADAR_PREFERENCE_SWITCHED_ON

function natives.HUD.IS_SUBTITLE_PREFERENCE_SWITCHED_ON() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.IS_SUBTITLE_PREFERENCE_SWITCHED_ON' due to disabled trusted mode")

	local result = native_call(0xAD6DACA4BA53E0A4)
	return result:__tointeger() ~= 0
end
natives.hud.is_subtitle_preference_switched_on = natives.HUD.IS_SUBTITLE_PREFERENCE_SWITCHED_ON

--[[
If Hud should be displayed
]]
function natives.HUD.DISPLAY_HUD(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.DISPLAY_HUD' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0xA6294919E56FF02A, toggle)
end
natives.hud.display_hud = natives.HUD.DISPLAY_HUD

--[[
Enables drawing some hud components, such as help labels, this frame, when the player is dead.
]]
function natives.HUD.DISPLAY_HUD_WHEN_NOT_IN_STATE_OF_PLAY_THIS_FRAME() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.DISPLAY_HUD_WHEN_NOT_IN_STATE_OF_PLAY_THIS_FRAME' due to disabled trusted mode")

	local result = native_call(0x7669F9E39DC17063)
end
natives.hud.display_hud_when_not_in_state_of_play_this_frame = natives.HUD.DISPLAY_HUD_WHEN_NOT_IN_STATE_OF_PLAY_THIS_FRAME

function natives.HUD.DISPLAY_HUD_WHEN_PAUSED_THIS_FRAME() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.DISPLAY_HUD_WHEN_PAUSED_THIS_FRAME' due to disabled trusted mode")

	local result = native_call(0x402F9ED62087E898)
end
natives.hud.display_hud_when_paused_this_frame = natives.HUD.DISPLAY_HUD_WHEN_PAUSED_THIS_FRAME

--[[
If Minimap / Radar should be displayed.
]]
function natives.HUD.DISPLAY_RADAR(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.DISPLAY_RADAR' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0xA0EBB943C300E693, toggle)
end
natives.hud.display_radar = natives.HUD.DISPLAY_RADAR

--[[
Setter for GET_FAKE_SPECTATOR_MODE
]]
function natives.HUD.SET_FAKE_SPECTATOR_MODE(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_FAKE_SPECTATOR_MODE' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0xCD74233600C4EA6B, toggle)
end
natives.hud.set_fake_spectator_mode = natives.HUD.SET_FAKE_SPECTATOR_MODE

--[[
Getter for SET_FAKE_SPECTATOR_MODE
]]
function natives.HUD.GET_FAKE_SPECTATOR_MODE() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.GET_FAKE_SPECTATOR_MODE' due to disabled trusted mode")

	local result = native_call(0xC2D2AD9EAAE265B8)
	return result:__tointeger() ~= 0
end
natives.hud.get_fake_spectator_mode = natives.HUD.GET_FAKE_SPECTATOR_MODE

function natives.HUD.IS_HUD_HIDDEN() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.IS_HUD_HIDDEN' due to disabled trusted mode")

	local result = native_call(0xA86478C6958735C5)
	return result:__tointeger() ~= 0
end
natives.hud.is_hud_hidden = natives.HUD.IS_HUD_HIDDEN

function natives.HUD.IS_RADAR_HIDDEN() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.IS_RADAR_HIDDEN' due to disabled trusted mode")

	local result = native_call(0x157F93B036700462)
	return result:__tointeger() ~= 0
end
natives.hud.is_radar_hidden = natives.HUD.IS_RADAR_HIDDEN

function natives.HUD.IS_MINIMAP_RENDERING() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.IS_MINIMAP_RENDERING' due to disabled trusted mode")

	local result = native_call(0xAF754F20EB5CD51A)
	return result:__tointeger() ~= 0
end
natives.hud.is_minimap_rendering = natives.HUD.IS_MINIMAP_RENDERING

function natives.HUD.USE_VEHICLE_TARGETING_RETICULE(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.USE_VEHICLE_TARGETING_RETICULE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x0C698D8F099174C7, p0)
end
natives.hud.use_vehicle_targeting_reticule = natives.HUD.USE_VEHICLE_TARGETING_RETICULE

function natives.HUD.ADD_VALID_VEHICLE_HIT_HASH(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.ADD_VALID_VEHICLE_HIT_HASH' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xE4C3B169876D33D7, p0)
end
natives.hud.add_valid_vehicle_hit_hash = natives.HUD.ADD_VALID_VEHICLE_HIT_HASH

function natives.HUD.CLEAR_VALID_VEHICLE_HIT_HASHES() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.CLEAR_VALID_VEHICLE_HIT_HASHES' due to disabled trusted mode")

	local result = native_call(0xEB81A3DADD503187)
end
natives.hud.clear_valid_vehicle_hit_hashes = natives.HUD.CLEAR_VALID_VEHICLE_HIT_HASHES

--[[
Enable / disable showing route for the Blip-object.
]]
function natives.HUD.SET_BLIP_ROUTE(--[[Blip]] blip, --[[BOOL]] enabled) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_BLIP_ROUTE' due to disabled trusted mode")

	assert(type(blip) == "number", "Arg #1 (blip) must be a number.")
	assert(type(enabled) == "boolean", "Arg #2 (enabled) must be a boolean.")

	local result = native_call(0x4F7D8A9BFB0B43E9, blip, enabled)
end
natives.hud.set_blip_route = natives.HUD.SET_BLIP_ROUTE

function natives.HUD.CLEAR_ALL_BLIP_ROUTES() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.CLEAR_ALL_BLIP_ROUTES' due to disabled trusted mode")

	local result = native_call(0xD12882D3FF82BF11)
end
natives.hud.clear_all_blip_routes = natives.HUD.CLEAR_ALL_BLIP_ROUTES

function natives.HUD.SET_BLIP_ROUTE_COLOUR(--[[Blip]] blip, --[[int]] colour) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_BLIP_ROUTE_COLOUR' due to disabled trusted mode")

	assert(type(blip) == "number", "Arg #1 (blip) must be a number.")
	assert(type(colour) == "number", "Arg #2 (colour) must be a number.")

	local result = native_call(0x837155CD2F63DA09, blip, colour)
end
natives.hud.set_blip_route_colour = natives.HUD.SET_BLIP_ROUTE_COLOUR

function natives.HUD.SET_FORCE_SHOW_GPS(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_FORCE_SHOW_GPS' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x2790F4B17D098E26, toggle)
end
natives.hud.set_force_show_gps = natives.HUD.SET_FORCE_SHOW_GPS

function natives.HUD.SET_USE_SET_DESTINATION_IN_PAUSE_MAP(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_USE_SET_DESTINATION_IN_PAUSE_MAP' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x6CDD58146A436083, toggle)
end
natives.hud.set_use_set_destination_in_pause_map = natives.HUD.SET_USE_SET_DESTINATION_IN_PAUSE_MAP

function natives.HUD.SET_BLOCK_WANTED_FLASH(--[[BOOL]] disabled) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_BLOCK_WANTED_FLASH' due to disabled trusted mode")

	assert(type(disabled) == "boolean", "Arg #1 (disabled) must be a boolean.")

	local result = native_call(0xD1942374085C8469, disabled)
end
natives.hud.set_block_wanted_flash = natives.HUD.SET_BLOCK_WANTED_FLASH

function natives.HUD.ADD_NEXT_MESSAGE_TO_PREVIOUS_BRIEFS(--[[BOOL]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.ADD_NEXT_MESSAGE_TO_PREVIOUS_BRIEFS' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0x60296AF4BA14ABC5, p0)
end
natives.hud.add_next_message_to_previous_briefs = natives.HUD.ADD_NEXT_MESSAGE_TO_PREVIOUS_BRIEFS

function natives.HUD.FORCE_NEXT_MESSAGE_TO_PREVIOUS_BRIEFS_LIST(--[[int]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.FORCE_NEXT_MESSAGE_TO_PREVIOUS_BRIEFS_LIST' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x57D760D55F54E071, p0)
end
natives.hud.force_next_message_to_previous_briefs_list = natives.HUD.FORCE_NEXT_MESSAGE_TO_PREVIOUS_BRIEFS_LIST

--[[
zoom ranges from 0 to 90f in R* Scripts
]]
function natives.HUD.SET_RADAR_ZOOM_PRECISE(--[[float]] zoom) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_RADAR_ZOOM_PRECISE' due to disabled trusted mode")

	assert(type(zoom) == "number", "Arg #1 (zoom) must be a number.")

	local result = native_call(0xBD12C5EEE184C337, zoom)
end
natives.hud.set_radar_zoom_precise = natives.HUD.SET_RADAR_ZOOM_PRECISE

--[[
zoomLevel ranges from 0 to 1400 in R* Scripts
]]
function natives.HUD.SET_RADAR_ZOOM(--[[int]] zoomLevel) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_RADAR_ZOOM' due to disabled trusted mode")

	assert(type(zoomLevel) == "number", "Arg #1 (zoomLevel) must be a number.")

	local result = native_call(0x096EF57A0C999BBA, zoomLevel)
end
natives.hud.set_radar_zoom = natives.HUD.SET_RADAR_ZOOM

function natives.HUD.SET_RADAR_ZOOM_TO_BLIP(--[[Blip]] blip, --[[float]] zoom) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_RADAR_ZOOM_TO_BLIP' due to disabled trusted mode")

	assert(type(blip) == "number", "Arg #1 (blip) must be a number.")
	assert(type(zoom) == "number", "Arg #2 (zoom) must be a number.")

	local result = native_call(0xF98E4B3E56AFC7B1, blip, zoom)
end
natives.hud.set_radar_zoom_to_blip = natives.HUD.SET_RADAR_ZOOM_TO_BLIP

function natives.HUD.SET_RADAR_ZOOM_TO_DISTANCE(--[[float]] zoom) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_RADAR_ZOOM_TO_DISTANCE' due to disabled trusted mode")

	assert(type(zoom) == "number", "Arg #1 (zoom) must be a number.")

	local result = native_call(0xCB7CC0D58405AD41, zoom)
end
natives.hud.set_radar_zoom_to_distance = natives.HUD.SET_RADAR_ZOOM_TO_DISTANCE

--[[
Does nothing (it's a nullsub).
]]
function natives.HUD.UPDATE_RADAR_ZOOM_TO_BLIP() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.UPDATE_RADAR_ZOOM_TO_BLIP' due to disabled trusted mode")

	local result = native_call(0xD2049635DEB9C375)
end
natives.hud.update_radar_zoom_to_blip = natives.HUD.UPDATE_RADAR_ZOOM_TO_BLIP

--[[
HUD colors and their values: pastebin.com/d9aHPbXN
]]
function natives.HUD.GET_HUD_COLOUR(--[[int]] hudColorIndex, --[[int*]] r, --[[int*]] g, --[[int*]] b, --[[int*]] a) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.GET_HUD_COLOUR' due to disabled trusted mode")

	assert(type(hudColorIndex) == "number", "Arg #1 (hudColorIndex) must be a number.")
	assert(type(r) == "userdata", "Arg #2 (r) must be a userdata.")
	assert(type(g) == "userdata", "Arg #3 (g) must be a userdata.")
	assert(type(b) == "userdata", "Arg #4 (b) must be a userdata.")
	assert(type(a) == "userdata", "Arg #5 (a) must be a userdata.")

	local result = native_call(0x7C9C91AB74A0360F, hudColorIndex, r, g, b, a)
end
natives.hud.get_hud_colour = natives.HUD.GET_HUD_COLOUR

--[[
Sets the color of HUD_COLOUR_SCRIPT_VARIABLE
]]
function natives.HUD.SET_SCRIPT_VARIABLE_HUD_COLOUR(--[[int]] r, --[[int]] g, --[[int]] b, --[[int]] a) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_SCRIPT_VARIABLE_HUD_COLOUR' due to disabled trusted mode")

	assert(type(r) == "number", "Arg #1 (r) must be a number.")
	assert(type(g) == "number", "Arg #2 (g) must be a number.")
	assert(type(b) == "number", "Arg #3 (b) must be a number.")
	assert(type(a) == "number", "Arg #4 (a) must be a number.")

	local result = native_call(0xD68A5FF8A3A89874, r, g, b, a)
end
natives.hud.set_script_variable_hud_colour = natives.HUD.SET_SCRIPT_VARIABLE_HUD_COLOUR

--[[
Sets the color of HUD_COLOUR_SCRIPT_VARIABLE_2
]]
function natives.HUD.SET_SECOND_SCRIPT_VARIABLE_HUD_COLOUR(--[[int]] r, --[[int]] g, --[[int]] b, --[[int]] a) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_SECOND_SCRIPT_VARIABLE_HUD_COLOUR' due to disabled trusted mode")

	assert(type(r) == "number", "Arg #1 (r) must be a number.")
	assert(type(g) == "number", "Arg #2 (g) must be a number.")
	assert(type(b) == "number", "Arg #3 (b) must be a number.")
	assert(type(a) == "number", "Arg #4 (a) must be a number.")

	local result = native_call(0x16A304E6CB2BFAB9, r, g, b, a)
end
natives.hud.set_second_script_variable_hud_colour = natives.HUD.SET_SECOND_SCRIPT_VARIABLE_HUD_COLOUR

--[[
HUD colors and their values: pastebin.com/d9aHPbXN
--------------------------------------------------
makes hudColorIndex2 color into hudColorIndex color
]]
function natives.HUD.REPLACE_HUD_COLOUR(--[[int]] hudColorIndex, --[[int]] hudColorIndex2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.REPLACE_HUD_COLOUR' due to disabled trusted mode")

	assert(type(hudColorIndex) == "number", "Arg #1 (hudColorIndex) must be a number.")
	assert(type(hudColorIndex2) == "number", "Arg #2 (hudColorIndex2) must be a number.")

	local result = native_call(0x1CCC708F0F850613, hudColorIndex, hudColorIndex2)
end
natives.hud.replace_hud_colour = natives.HUD.REPLACE_HUD_COLOUR

--[[
HUD colors and their values: pastebin.com/d9aHPbXN
]]
function natives.HUD.REPLACE_HUD_COLOUR_WITH_RGBA(--[[int]] hudColorIndex, --[[int]] r, --[[int]] g, --[[int]] b, --[[int]] a) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.REPLACE_HUD_COLOUR_WITH_RGBA' due to disabled trusted mode")

	assert(type(hudColorIndex) == "number", "Arg #1 (hudColorIndex) must be a number.")
	assert(type(r) == "number", "Arg #2 (r) must be a number.")
	assert(type(g) == "number", "Arg #3 (g) must be a number.")
	assert(type(b) == "number", "Arg #4 (b) must be a number.")
	assert(type(a) == "number", "Arg #5 (a) must be a number.")

	local result = native_call(0xF314CF4F0211894E, hudColorIndex, r, g, b, a)
end
natives.hud.replace_hud_colour_with_rgba = natives.HUD.REPLACE_HUD_COLOUR_WITH_RGBA

function natives.HUD.SET_ABILITY_BAR_VISIBILITY(--[[BOOL]] visible) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_ABILITY_BAR_VISIBILITY' due to disabled trusted mode")

	assert(type(visible) == "boolean", "Arg #1 (visible) must be a boolean.")

	local result = native_call(0x1DFEDD15019315A9, visible)
end
natives.hud.set_ability_bar_visibility = natives.HUD.SET_ABILITY_BAR_VISIBILITY

function natives.HUD.SET_ALLOW_ABILITY_BAR(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_ALLOW_ABILITY_BAR' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x889329C80FE5963C, toggle)
end
natives.hud.set_allow_ability_bar = natives.HUD.SET_ALLOW_ABILITY_BAR

function natives.HUD.FLASH_ABILITY_BAR(--[[int]] millisecondsToFlash) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.FLASH_ABILITY_BAR' due to disabled trusted mode")

	assert(type(millisecondsToFlash) == "number", "Arg #1 (millisecondsToFlash) must be a number.")

	local result = native_call(0x02CFBA0C9E9275CE, millisecondsToFlash)
end
natives.hud.flash_ability_bar = natives.HUD.FLASH_ABILITY_BAR

function natives.HUD.SET_ABILITY_BAR_VALUE(--[[float]] p0, --[[float]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_ABILITY_BAR_VALUE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x9969599CCFF5D85E, p0, p1)
end
natives.hud.set_ability_bar_value = natives.HUD.SET_ABILITY_BAR_VALUE

function natives.HUD.FLASH_WANTED_DISPLAY(--[[BOOL]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.FLASH_WANTED_DISPLAY' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0xA18AFB39081B6A1F, p0)
end
natives.hud.flash_wanted_display = natives.HUD.FLASH_WANTED_DISPLAY

function natives.HUD.FORCE_OFF_WANTED_STAR_FLASH(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.FORCE_OFF_WANTED_STAR_FLASH' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0xBA8D65C1C65702E5, toggle)
end
natives.hud.force_off_wanted_star_flash = natives.HUD.FORCE_OFF_WANTED_STAR_FLASH

function natives.HUD.SET_CUSTOM_MP_HUD_COLOR(--[[int]] hudColorId) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_CUSTOM_MP_HUD_COLOR' due to disabled trusted mode")

	assert(type(hudColorId) == "number", "Arg #1 (hudColorId) must be a number.")

	local result = native_call(0x2ACCB195F3CCD9DE, hudColorId)
end
natives.hud.set_custom_mp_hud_color = natives.HUD.SET_CUSTOM_MP_HUD_COLOR

--[[
This gets the height of the FONT and not the total text. You need to get the number of lines your text uses, and get the height of a newline (I'm using a smaller value) to get the total text height.
]]
function natives.HUD.GET_RENDERED_CHARACTER_HEIGHT(--[[float]] size, --[[int]] font) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.GET_RENDERED_CHARACTER_HEIGHT' due to disabled trusted mode")

	assert(type(size) == "number", "Arg #1 (size) must be a number.")
	assert(type(font) == "number", "Arg #2 (font) must be a number.")

	local result = native_call(0xDB88A37483346780, size, font)
	return result:__tonumber()
end
natives.hud.get_rendered_character_height = natives.HUD.GET_RENDERED_CHARACTER_HEIGHT

--[[
Size range : 0F to 1.0F
p0 is unknown and doesn't seem to have an effect, yet in the game scripts it changes to 1.0F sometimes.
]]
function natives.HUD.SET_TEXT_SCALE(--[[float]] scale, --[[float]] size) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_TEXT_SCALE' due to disabled trusted mode")

	assert(type(scale) == "number", "Arg #1 (scale) must be a number.")
	assert(type(size) == "number", "Arg #2 (size) must be a number.")

	local result = native_call(0x07C837F9A01C34C9, scale, size)
end
natives.hud.set_text_scale = natives.HUD.SET_TEXT_SCALE

--[[
colors you input not same as you think?
A: for some reason its R B G A
]]
function natives.HUD.SET_TEXT_COLOUR(--[[int]] red, --[[int]] green, --[[int]] blue, --[[int]] alpha) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_TEXT_COLOUR' due to disabled trusted mode")

	assert(type(red) == "number", "Arg #1 (red) must be a number.")
	assert(type(green) == "number", "Arg #2 (green) must be a number.")
	assert(type(blue) == "number", "Arg #3 (blue) must be a number.")
	assert(type(alpha) == "number", "Arg #4 (alpha) must be a number.")

	local result = native_call(0xBE6B23FFA53FB442, red, green, blue, alpha)
end
natives.hud.set_text_colour = natives.HUD.SET_TEXT_COLOUR

function natives.HUD.SET_TEXT_CENTRE(--[[BOOL]] align) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_TEXT_CENTRE' due to disabled trusted mode")

	assert(type(align) == "boolean", "Arg #1 (align) must be a boolean.")

	local result = native_call(0xC02F4DBFB51D988B, align)
end
natives.hud.set_text_centre = natives.HUD.SET_TEXT_CENTRE

function natives.HUD.SET_TEXT_RIGHT_JUSTIFY(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_TEXT_RIGHT_JUSTIFY' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x6B3C4650BC8BEE47, toggle)
end
natives.hud.set_text_right_justify = natives.HUD.SET_TEXT_RIGHT_JUSTIFY

--[[
Types -
0: Center-Justify
1: Left-Justify
2: Right-Justify

Right-Justify requires SET_TEXT_WRAP, otherwise it will draw to the far right of the screen
]]
function natives.HUD.SET_TEXT_JUSTIFICATION(--[[int]] justifyType) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_TEXT_JUSTIFICATION' due to disabled trusted mode")

	assert(type(justifyType) == "number", "Arg #1 (justifyType) must be a number.")

	local result = native_call(0x4E096588B13FFECA, justifyType)
end
natives.hud.set_text_justification = natives.HUD.SET_TEXT_JUSTIFICATION

--[[
It sets the text in a specified box and wraps the text if it exceeds the boundries. Both values are for X axis. Useful when positioning text set to center or aligned to the right.

start - left boundry on screen position (0.0 - 1.0)
end - right boundry on screen position (0.0 - 1.0)
]]
function natives.HUD.SET_TEXT_WRAP(--[[float]] start, --[[float]] endParam) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_TEXT_WRAP' due to disabled trusted mode")

	assert(type(start) == "number", "Arg #1 (start) must be a number.")
	assert(type(endParam) == "number", "Arg #2 (endParam) must be a number.")

	local result = native_call(0x63145D9C883A1A70, start, endParam)
end
natives.hud.set_text_wrap = natives.HUD.SET_TEXT_WRAP

function natives.HUD.SET_TEXT_LEADING(--[[int]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_TEXT_LEADING' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xA50ABC31E3CDFAFF, p0)
end
natives.hud.set_text_leading = natives.HUD.SET_TEXT_LEADING

--[[
This native does absolutely nothing, just a nullsub
]]
function natives.HUD.SET_TEXT_PROPORTIONAL(--[[BOOL]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_TEXT_PROPORTIONAL' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0x038C1F517D7FDCF8, p0)
end
natives.hud.set_text_proportional = natives.HUD.SET_TEXT_PROPORTIONAL

--[[
fonts that mess up your text where made for number values/misc stuff
]]
function natives.HUD.SET_TEXT_FONT(--[[int]] fontType) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_TEXT_FONT' due to disabled trusted mode")

	assert(type(fontType) == "number", "Arg #1 (fontType) must be a number.")

	local result = native_call(0x66E0276CC5F6B9DA, fontType)
end
natives.hud.set_text_font = natives.HUD.SET_TEXT_FONT

function natives.HUD.SET_TEXT_DROP_SHADOW() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_TEXT_DROP_SHADOW' due to disabled trusted mode")

	local result = native_call(0x1CA3E9EAC9D93E5E)
end
natives.hud.set_text_drop_shadow = natives.HUD.SET_TEXT_DROP_SHADOW

--[[
distance - shadow distance in pixels, both horizontal and vertical
r, g, b, a - color
]]
function natives.HUD.SET_TEXT_DROPSHADOW(--[[int]] distance, --[[int]] r, --[[int]] g, --[[int]] b, --[[int]] a) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_TEXT_DROPSHADOW' due to disabled trusted mode")

	assert(type(distance) == "number", "Arg #1 (distance) must be a number.")
	assert(type(r) == "number", "Arg #2 (r) must be a number.")
	assert(type(g) == "number", "Arg #3 (g) must be a number.")
	assert(type(b) == "number", "Arg #4 (b) must be a number.")
	assert(type(a) == "number", "Arg #5 (a) must be a number.")

	local result = native_call(0x465C84BC39F1C351, distance, r, g, b, a)
end
natives.hud.set_text_dropshadow = natives.HUD.SET_TEXT_DROPSHADOW

function natives.HUD.SET_TEXT_OUTLINE() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_TEXT_OUTLINE' due to disabled trusted mode")

	local result = native_call(0x2513DFB0FB8400FE)
end
natives.hud.set_text_outline = natives.HUD.SET_TEXT_OUTLINE

--[[
This native does absolutely nothing, just a nullsub
]]
function natives.HUD.SET_TEXT_EDGE(--[[int]] p0, --[[int]] r, --[[int]] g, --[[int]] b, --[[int]] a) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_TEXT_EDGE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(r) == "number", "Arg #2 (r) must be a number.")
	assert(type(g) == "number", "Arg #3 (g) must be a number.")
	assert(type(b) == "number", "Arg #4 (b) must be a number.")
	assert(type(a) == "number", "Arg #5 (a) must be a number.")

	local result = native_call(0x441603240D202FA6, p0, r, g, b, a)
end
natives.hud.set_text_edge = natives.HUD.SET_TEXT_EDGE

function natives.HUD.SET_TEXT_RENDER_ID(--[[int]] renderId) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_TEXT_RENDER_ID' due to disabled trusted mode")

	assert(type(renderId) == "number", "Arg #1 (renderId) must be a number.")

	local result = native_call(0x5F15302936E07111, renderId)
end
natives.hud.set_text_render_id = natives.HUD.SET_TEXT_RENDER_ID

--[[
This function is hard-coded to always return 1.
]]
function natives.HUD.GET_DEFAULT_SCRIPT_RENDERTARGET_RENDER_ID() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.GET_DEFAULT_SCRIPT_RENDERTARGET_RENDER_ID' due to disabled trusted mode")

	local result = native_call(0x52F0982D7FD156B6)
	return result:__tointeger()
end
natives.hud.get_default_script_rendertarget_render_id = natives.HUD.GET_DEFAULT_SCRIPT_RENDERTARGET_RENDER_ID

function natives.HUD.REGISTER_NAMED_RENDERTARGET(--[[const char*]] name, --[[BOOL]] p1) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.REGISTER_NAMED_RENDERTARGET' due to disabled trusted mode")

	assert(type(name) == "string", "Arg #1 (name) must be a string.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0x57D9C12635E25CE3, name, p1)
	return result:__tointeger() ~= 0
end
natives.hud.register_named_rendertarget = natives.HUD.REGISTER_NAMED_RENDERTARGET

function natives.HUD.IS_NAMED_RENDERTARGET_REGISTERED(--[[const char*]] name) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.IS_NAMED_RENDERTARGET_REGISTERED' due to disabled trusted mode")

	assert(type(name) == "string", "Arg #1 (name) must be a string.")

	local result = native_call(0x78DCDC15C9F116B4, name)
	return result:__tointeger() ~= 0
end
natives.hud.is_named_rendertarget_registered = natives.HUD.IS_NAMED_RENDERTARGET_REGISTERED

function natives.HUD.RELEASE_NAMED_RENDERTARGET(--[[const char*]] name) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.RELEASE_NAMED_RENDERTARGET' due to disabled trusted mode")

	assert(type(name) == "string", "Arg #1 (name) must be a string.")

	local result = native_call(0xE9F6FFE837354DD4, name)
	return result:__tointeger() ~= 0
end
natives.hud.release_named_rendertarget = natives.HUD.RELEASE_NAMED_RENDERTARGET

function natives.HUD.LINK_NAMED_RENDERTARGET(--[[Hash]] modelHash) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.LINK_NAMED_RENDERTARGET' due to disabled trusted mode")

	assert(type(modelHash) == "number", "Arg #1 (modelHash) must be a number.")

	local result = native_call(0xF6C09E276AEB3F2D, modelHash)
end
natives.hud.link_named_rendertarget = natives.HUD.LINK_NAMED_RENDERTARGET

function natives.HUD.GET_NAMED_RENDERTARGET_RENDER_ID(--[[const char*]] name) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.GET_NAMED_RENDERTARGET_RENDER_ID' due to disabled trusted mode")

	assert(type(name) == "string", "Arg #1 (name) must be a string.")

	local result = native_call(0x1A6478B61C6BDC3B, name)
	return result:__tointeger()
end
natives.hud.get_named_rendertarget_render_id = natives.HUD.GET_NAMED_RENDERTARGET_RENDER_ID

function natives.HUD.IS_NAMED_RENDERTARGET_LINKED(--[[Hash]] modelHash) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.IS_NAMED_RENDERTARGET_LINKED' due to disabled trusted mode")

	assert(type(modelHash) == "number", "Arg #1 (modelHash) must be a number.")

	local result = native_call(0x113750538FA31298, modelHash)
	return result:__tointeger() ~= 0
end
natives.hud.is_named_rendertarget_linked = natives.HUD.IS_NAMED_RENDERTARGET_LINKED

function natives.HUD.CLEAR_HELP(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.CLEAR_HELP' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x8DFCED7A656F8802, toggle)
end
natives.hud.clear_help = natives.HUD.CLEAR_HELP

function natives.HUD.IS_HELP_MESSAGE_ON_SCREEN() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.IS_HELP_MESSAGE_ON_SCREEN' due to disabled trusted mode")

	local result = native_call(0xDAD37F45428801AE)
	return result:__tointeger() ~= 0
end
natives.hud.is_help_message_on_screen = natives.HUD.IS_HELP_MESSAGE_ON_SCREEN

function natives.HUD.HAS_SCRIPT_HIDDEN_HELP_THIS_FRAME() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.HAS_SCRIPT_HIDDEN_HELP_THIS_FRAME' due to disabled trusted mode")

	local result = native_call(0x214CD562A939246A)
	return result:__tointeger() ~= 0
end
natives.hud.has_script_hidden_help_this_frame = natives.HUD.HAS_SCRIPT_HIDDEN_HELP_THIS_FRAME

function natives.HUD.IS_HELP_MESSAGE_BEING_DISPLAYED() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.IS_HELP_MESSAGE_BEING_DISPLAYED' due to disabled trusted mode")

	local result = native_call(0x4D79439A6B55AC67)
	return result:__tointeger() ~= 0
end
natives.hud.is_help_message_being_displayed = natives.HUD.IS_HELP_MESSAGE_BEING_DISPLAYED

function natives.HUD.IS_HELP_MESSAGE_FADING_OUT() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.IS_HELP_MESSAGE_FADING_OUT' due to disabled trusted mode")

	local result = native_call(0x327EDEEEAC55C369)
	return result:__tointeger() ~= 0
end
natives.hud.is_help_message_fading_out = natives.HUD.IS_HELP_MESSAGE_FADING_OUT

function natives.HUD.SET_HELP_MESSAGE_STYLE(--[[int]] style, --[[int]] hudColor, --[[int]] alpha, --[[int]] p3, --[[int]] p4) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_HELP_MESSAGE_STYLE' due to disabled trusted mode")

	assert(type(style) == "number", "Arg #1 (style) must be a number.")
	assert(type(hudColor) == "number", "Arg #2 (hudColor) must be a number.")
	assert(type(alpha) == "number", "Arg #3 (alpha) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")

	local result = native_call(0xB9C362BABECDDC7A, style, hudColor, alpha, p3, p4)
end
natives.hud.set_help_message_style = natives.HUD.SET_HELP_MESSAGE_STYLE

function natives.HUD.GET_STANDARD_BLIP_ENUM_ID() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.GET_STANDARD_BLIP_ENUM_ID' due to disabled trusted mode")

	local result = native_call(0x4A9923385BDB9DAD)
	return result:__tointeger()
end
natives.hud.get_standard_blip_enum_id = natives.HUD.GET_STANDARD_BLIP_ENUM_ID

function natives.HUD.GET_WAYPOINT_BLIP_ENUM_ID() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.GET_WAYPOINT_BLIP_ENUM_ID' due to disabled trusted mode")

	local result = native_call(0x186E5D252FA50E7D)
	return result:__tointeger()
end
natives.hud.get_waypoint_blip_enum_id = natives.HUD.GET_WAYPOINT_BLIP_ENUM_ID

function natives.HUD.GET_NUMBER_OF_ACTIVE_BLIPS() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.GET_NUMBER_OF_ACTIVE_BLIPS' due to disabled trusted mode")

	local result = native_call(0x9A3FF3DE163034E8)
	return result:__tointeger()
end
natives.hud.get_number_of_active_blips = natives.HUD.GET_NUMBER_OF_ACTIVE_BLIPS

function natives.HUD.GET_NEXT_BLIP_INFO_ID(--[[int]] blipSprite) -- Returns Blip
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.GET_NEXT_BLIP_INFO_ID' due to disabled trusted mode")

	assert(type(blipSprite) == "number", "Arg #1 (blipSprite) must be a number.")

	local result = native_call(0x14F96AA50D6FBEA7, blipSprite)
	return result:__tointeger()
end
natives.hud.get_next_blip_info_id = natives.HUD.GET_NEXT_BLIP_INFO_ID

function natives.HUD.GET_FIRST_BLIP_INFO_ID(--[[int]] blipSprite) -- Returns Blip
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.GET_FIRST_BLIP_INFO_ID' due to disabled trusted mode")

	assert(type(blipSprite) == "number", "Arg #1 (blipSprite) must be a number.")

	local result = native_call(0x1BEDE233E6CD2A1F, blipSprite)
	return result:__tointeger()
end
natives.hud.get_first_blip_info_id = natives.HUD.GET_FIRST_BLIP_INFO_ID

function natives.HUD.GET_CLOSEST_BLIP_INFO_ID(--[[int]] blipSprite) -- Returns Blip
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.GET_CLOSEST_BLIP_INFO_ID' due to disabled trusted mode")

	assert(type(blipSprite) == "number", "Arg #1 (blipSprite) must be a number.")

	local result = native_call(0xD484BF71050CA1EE, blipSprite)
	return result:__tointeger()
end
natives.hud.get_closest_blip_info_id = natives.HUD.GET_CLOSEST_BLIP_INFO_ID

function natives.HUD.GET_BLIP_INFO_ID_COORD(--[[Blip]] blip) -- Returns Vector3
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.GET_BLIP_INFO_ID_COORD' due to disabled trusted mode")

	assert(type(blip) == "number", "Arg #1 (blip) must be a number.")

	local result = native_call(0xFA7C7F0AADF25D09, blip)
	return result:__tov3()
end
natives.hud.get_blip_info_id_coord = natives.HUD.GET_BLIP_INFO_ID_COORD

function natives.HUD.GET_BLIP_INFO_ID_DISPLAY(--[[Blip]] blip) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.GET_BLIP_INFO_ID_DISPLAY' due to disabled trusted mode")

	assert(type(blip) == "number", "Arg #1 (blip) must be a number.")

	local result = native_call(0x1E314167F701DC3B, blip)
	return result:__tointeger()
end
natives.hud.get_blip_info_id_display = natives.HUD.GET_BLIP_INFO_ID_DISPLAY

--[[
Returns a value based on what the blip is attached to
1 - Vehicle
2 - Ped
3 - Object
4 - Coord
5 - unk
6 - Pickup
7 - Radius
]]
function natives.HUD.GET_BLIP_INFO_ID_TYPE(--[[Blip]] blip) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.GET_BLIP_INFO_ID_TYPE' due to disabled trusted mode")

	assert(type(blip) == "number", "Arg #1 (blip) must be a number.")

	local result = native_call(0xBE9B0959FFD0779B, blip)
	return result:__tointeger()
end
natives.hud.get_blip_info_id_type = natives.HUD.GET_BLIP_INFO_ID_TYPE

function natives.HUD.GET_BLIP_INFO_ID_ENTITY_INDEX(--[[Blip]] blip) -- Returns Entity
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.GET_BLIP_INFO_ID_ENTITY_INDEX' due to disabled trusted mode")

	assert(type(blip) == "number", "Arg #1 (blip) must be a number.")

	local result = native_call(0x4BA4E2553AFEDC2C, blip)
	return result:__tointeger()
end
natives.hud.get_blip_info_id_entity_index = natives.HUD.GET_BLIP_INFO_ID_ENTITY_INDEX

--[[
This function is hard-coded to always return 0.
]]
function natives.HUD.GET_BLIP_INFO_ID_PICKUP_INDEX(--[[Blip]] blip) -- Returns Pickup
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.GET_BLIP_INFO_ID_PICKUP_INDEX' due to disabled trusted mode")

	assert(type(blip) == "number", "Arg #1 (blip) must be a number.")

	local result = native_call(0x9B6786E4C03DD382, blip)
	return result:__tointeger()
end
natives.hud.get_blip_info_id_pickup_index = natives.HUD.GET_BLIP_INFO_ID_PICKUP_INDEX

--[[
Returns the Blip handle of given Entity.
]]
function natives.HUD.GET_BLIP_FROM_ENTITY(--[[Entity]] entity) -- Returns Blip
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.GET_BLIP_FROM_ENTITY' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0xBC8DBDCA2436F7E8, entity)
	return result:__tointeger()
end
natives.hud.get_blip_from_entity = natives.HUD.GET_BLIP_FROM_ENTITY

function natives.HUD.ADD_BLIP_FOR_RADIUS(--[[float]] posX, --[[float]] posY, --[[float]] posZ, --[[float]] radius) -- Returns Blip
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.ADD_BLIP_FOR_RADIUS' due to disabled trusted mode")

	assert(type(posX) == "number", "Arg #1 (posX) must be a number.")
	assert(type(posY) == "number", "Arg #2 (posY) must be a number.")
	assert(type(posZ) == "number", "Arg #3 (posZ) must be a number.")
	assert(type(radius) == "number", "Arg #4 (radius) must be a number.")

	local result = native_call(0x46818D79B1F7499A, posX, posY, posZ, radius)
	return result:__tointeger()
end
natives.hud.add_blip_for_radius = natives.HUD.ADD_BLIP_FOR_RADIUS

--[[
Adds a rectangular blip for the specified coordinates/area.

It is recommended to use SET_BLIP_ROTATION and SET_BLIP_COLOUR to make the blip not rotate along with the camera.

By default, the blip will show as a _regular_ blip with the specified color/sprite if it is outside of the minimap view.

Example image:
minimap https://w.wew.wtf/pdcjig.png
big map https://w.wew.wtf/zgcjcm.png

(Native name is _likely_ to actually be ADD_BLIP_FOR_AREA, but due to the usual reasons this can't be confirmed)
]]
function natives.HUD.ADD_BLIP_FOR_AREA(--[[float]] x, --[[float]] y, --[[float]] z, --[[float]] width, --[[float]] height) -- Returns Blip
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.ADD_BLIP_FOR_AREA' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(width) == "number", "Arg #4 (width) must be a number.")
	assert(type(height) == "number", "Arg #5 (height) must be a number.")

	local result = native_call(0xCE5D0E5E315DB238, x, y, z, width, height)
	return result:__tointeger()
end
natives.hud.add_blip_for_area = natives.HUD.ADD_BLIP_FOR_AREA

--[[
Returns red ( default ) blip attached to entity.

Example:
Blip blip; //Put this outside your case or option
blip = HUD::ADD_BLIP_FOR_ENTITY(YourPedOrBodyguardName);
HUD::SET_BLIP_AS_FRIENDLY(blip, true);
]]
function natives.HUD.ADD_BLIP_FOR_ENTITY(--[[Entity]] entity) -- Returns Blip
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.ADD_BLIP_FOR_ENTITY' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0x5CDE92C702A8FCE7, entity)
	return result:__tointeger()
end
natives.hud.add_blip_for_entity = natives.HUD.ADD_BLIP_FOR_ENTITY

function natives.HUD.ADD_BLIP_FOR_PICKUP(--[[Pickup]] pickup) -- Returns Blip
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.ADD_BLIP_FOR_PICKUP' due to disabled trusted mode")

	assert(type(pickup) == "number", "Arg #1 (pickup) must be a number.")

	local result = native_call(0xBE339365C863BD36, pickup)
	return result:__tointeger()
end
natives.hud.add_blip_for_pickup = natives.HUD.ADD_BLIP_FOR_PICKUP

--[[
Creates an orange ( default ) Blip-object. Returns a Blip-object which can then be modified.
]]
function natives.HUD.ADD_BLIP_FOR_COORD(--[[float]] x, --[[float]] y, --[[float]] z) -- Returns Blip
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.ADD_BLIP_FOR_COORD' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")

	local result = native_call(0x5A039BB0BCA604B6, x, y, z)
	return result:__tointeger()
end
natives.hud.add_blip_for_coord = natives.HUD.ADD_BLIP_FOR_COORD

function natives.HUD.TRIGGER_SONAR_BLIP(--[[float]] posX, --[[float]] posY, --[[float]] posZ, --[[float]] radius, --[[int]] p4) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.TRIGGER_SONAR_BLIP' due to disabled trusted mode")

	assert(type(posX) == "number", "Arg #1 (posX) must be a number.")
	assert(type(posY) == "number", "Arg #2 (posY) must be a number.")
	assert(type(posZ) == "number", "Arg #3 (posZ) must be a number.")
	assert(type(radius) == "number", "Arg #4 (radius) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")

	local result = native_call(0x72DD432F3CDFC0EE, posX, posY, posZ, radius, p4)
end
natives.hud.trigger_sonar_blip = natives.HUD.TRIGGER_SONAR_BLIP

function natives.HUD.ALLOW_SONAR_BLIPS(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.ALLOW_SONAR_BLIPS' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x60734CC207C9833C, toggle)
end
natives.hud.allow_sonar_blips = natives.HUD.ALLOW_SONAR_BLIPS

function natives.HUD.SET_BLIP_COORDS(--[[Blip]] blip, --[[float]] posX, --[[float]] posY, --[[float]] posZ) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_BLIP_COORDS' due to disabled trusted mode")

	assert(type(blip) == "number", "Arg #1 (blip) must be a number.")
	assert(type(posX) == "number", "Arg #2 (posX) must be a number.")
	assert(type(posY) == "number", "Arg #3 (posY) must be a number.")
	assert(type(posZ) == "number", "Arg #4 (posZ) must be a number.")

	local result = native_call(0xAE2AF67E9D9AF65D, blip, posX, posY, posZ)
end
natives.hud.set_blip_coords = natives.HUD.SET_BLIP_COORDS

function natives.HUD.GET_BLIP_COORDS(--[[Blip]] blip) -- Returns Vector3
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.GET_BLIP_COORDS' due to disabled trusted mode")

	assert(type(blip) == "number", "Arg #1 (blip) must be a number.")

	local result = native_call(0x586AFE3FF72D996E, blip)
	return result:__tov3()
end
natives.hud.get_blip_coords = natives.HUD.GET_BLIP_COORDS

--[[
Sets the displayed sprite for a specific blip..

You may have your own list, but since dev-c didn't show it I was bored and started looking through scripts and functions to get a presumable almost positive list of a majority of blip IDs
h t t p://pastebin.com/Bpj9Sfft

Blips Images + IDs:
gtaxscripting.blogspot.com/2016/05/gta-v-blips-id-and-image.html
]]
function natives.HUD.SET_BLIP_SPRITE(--[[Blip]] blip, --[[int]] spriteId) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_BLIP_SPRITE' due to disabled trusted mode")

	assert(type(blip) == "number", "Arg #1 (blip) must be a number.")
	assert(type(spriteId) == "number", "Arg #2 (spriteId) must be a number.")

	local result = native_call(0xDF735600A4696DAF, blip, spriteId)
end
natives.hud.set_blip_sprite = natives.HUD.SET_BLIP_SPRITE

--[[
Blips Images + IDs:
gtaxscripting.blogspot.com/2016/05/gta-v-blips-id-and-image.html
]]
function natives.HUD.GET_BLIP_SPRITE(--[[Blip]] blip) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.GET_BLIP_SPRITE' due to disabled trusted mode")

	assert(type(blip) == "number", "Arg #1 (blip) must be a number.")

	local result = native_call(0x1FC877464A04FC4F, blip)
	return result:__tointeger()
end
natives.hud.get_blip_sprite = natives.HUD.GET_BLIP_SPRITE

function natives.HUD.SET_COP_BLIP_SPRITE(--[[int]] p0, --[[float]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_COP_BLIP_SPRITE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x9FCB3CBFB3EAD69A, p0, p1)
end
natives.hud.set_cop_blip_sprite = natives.HUD.SET_COP_BLIP_SPRITE

function natives.HUD.SET_COP_BLIP_SPRITE_AS_STANDARD() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_COP_BLIP_SPRITE_AS_STANDARD' due to disabled trusted mode")

	local result = native_call(0xB7B873520C84C118)
end
natives.hud.set_cop_blip_sprite_as_standard = natives.HUD.SET_COP_BLIP_SPRITE_AS_STANDARD

--[[
Doesn't work if the label text of gxtEntry is >= 80.
]]
function natives.HUD.SET_BLIP_NAME_FROM_TEXT_FILE(--[[Blip]] blip, --[[const char*]] gxtEntry) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_BLIP_NAME_FROM_TEXT_FILE' due to disabled trusted mode")

	assert(type(blip) == "number", "Arg #1 (blip) must be a number.")
	assert(type(gxtEntry) == "string", "Arg #2 (gxtEntry) must be a string.")

	local result = native_call(0xEAA0FFE120D92784, blip, gxtEntry)
end
natives.hud.set_blip_name_from_text_file = natives.HUD.SET_BLIP_NAME_FROM_TEXT_FILE

function natives.HUD.SET_BLIP_NAME_TO_PLAYER_NAME(--[[Blip]] blip, --[[Player]] player) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_BLIP_NAME_TO_PLAYER_NAME' due to disabled trusted mode")

	assert(type(blip) == "number", "Arg #1 (blip) must be a number.")
	assert(type(player) == "number", "Arg #2 (player) must be a number.")

	local result = native_call(0x127DE7B20C60A6A3, blip, player)
end
natives.hud.set_blip_name_to_player_name = natives.HUD.SET_BLIP_NAME_TO_PLAYER_NAME

--[[
Sets alpha-channel for blip color.

Example:

Blip blip = HUD::ADD_BLIP_FOR_ENTITY(entity);
HUD::SET_BLIP_COLOUR(blip , 3);
HUD::SET_BLIP_ALPHA(blip , 64);

]]
function natives.HUD.SET_BLIP_ALPHA(--[[Blip]] blip, --[[int]] alpha) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_BLIP_ALPHA' due to disabled trusted mode")

	assert(type(blip) == "number", "Arg #1 (blip) must be a number.")
	assert(type(alpha) == "number", "Arg #2 (alpha) must be a number.")

	local result = native_call(0x45FF974EEE1C8734, blip, alpha)
end
natives.hud.set_blip_alpha = natives.HUD.SET_BLIP_ALPHA

function natives.HUD.GET_BLIP_ALPHA(--[[Blip]] blip) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.GET_BLIP_ALPHA' due to disabled trusted mode")

	assert(type(blip) == "number", "Arg #1 (blip) must be a number.")

	local result = native_call(0x970F608F0EE6C885, blip)
	return result:__tointeger()
end
natives.hud.get_blip_alpha = natives.HUD.GET_BLIP_ALPHA

function natives.HUD.SET_BLIP_FADE(--[[Blip]] blip, --[[int]] opacity, --[[int]] duration) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_BLIP_FADE' due to disabled trusted mode")

	assert(type(blip) == "number", "Arg #1 (blip) must be a number.")
	assert(type(opacity) == "number", "Arg #2 (opacity) must be a number.")
	assert(type(duration) == "number", "Arg #3 (duration) must be a number.")

	local result = native_call(0x2AEE8F8390D2298C, blip, opacity, duration)
end
natives.hud.set_blip_fade = natives.HUD.SET_BLIP_FADE

--[[
Returns -1, 0, +1, depending on if the blip is fading out, doing nothing, or fading in respectively.
]]
function natives.HUD.GET_BLIP_FADE_DIRECTION(--[[Blip]] blip) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.GET_BLIP_FADE_DIRECTION' due to disabled trusted mode")

	assert(type(blip) == "number", "Arg #1 (blip) must be a number.")

	local result = native_call(0x2C173AE2BDB9385E, blip)
	return result:__tointeger()
end
natives.hud.get_blip_fade_direction = natives.HUD.GET_BLIP_FADE_DIRECTION

--[[
After some testing, looks like you need to use CEIL() on the rotation (vehicle/ped heading) before using it there.
]]
function natives.HUD.SET_BLIP_ROTATION(--[[Blip]] blip, --[[int]] rotation) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_BLIP_ROTATION' due to disabled trusted mode")

	assert(type(blip) == "number", "Arg #1 (blip) must be a number.")
	assert(type(rotation) == "number", "Arg #2 (rotation) must be a number.")

	local result = native_call(0xF87683CDF73C3F6E, blip, rotation)
end
natives.hud.set_blip_rotation = natives.HUD.SET_BLIP_ROTATION

--[[
Does not require whole number/integer rotations.
]]
function natives.HUD.SET_BLIP_ROTATION_WITH_FLOAT(--[[Blip]] blip, --[[float]] heading) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_BLIP_ROTATION_WITH_FLOAT' due to disabled trusted mode")

	assert(type(blip) == "number", "Arg #1 (blip) must be a number.")
	assert(type(heading) == "number", "Arg #2 (heading) must be a number.")

	local result = native_call(0xA8B6AFDAC320AC87, blip, heading)
end
natives.hud.set_blip_rotation_with_float = natives.HUD.SET_BLIP_ROTATION_WITH_FLOAT

function natives.HUD.GET_BLIP_ROTATION(--[[Blip]] blip) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.GET_BLIP_ROTATION' due to disabled trusted mode")

	assert(type(blip) == "number", "Arg #1 (blip) must be a number.")

	local result = native_call(0x003E92BA477F9D7F, blip)
	return result:__tointeger()
end
natives.hud.get_blip_rotation = natives.HUD.GET_BLIP_ROTATION

--[[
Adds up after viewing multiple R* scripts. I believe that the duration is in miliseconds.
]]
function natives.HUD.SET_BLIP_FLASH_TIMER(--[[Blip]] blip, --[[int]] duration) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_BLIP_FLASH_TIMER' due to disabled trusted mode")

	assert(type(blip) == "number", "Arg #1 (blip) must be a number.")
	assert(type(duration) == "number", "Arg #2 (duration) must be a number.")

	local result = native_call(0xD3CD6FD297AE87CC, blip, duration)
end
natives.hud.set_blip_flash_timer = natives.HUD.SET_BLIP_FLASH_TIMER

function natives.HUD.SET_BLIP_FLASH_INTERVAL(--[[Blip]] blip, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_BLIP_FLASH_INTERVAL' due to disabled trusted mode")

	assert(type(blip) == "number", "Arg #1 (blip) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xAA51DB313C010A7E, blip, p1)
end
natives.hud.set_blip_flash_interval = natives.HUD.SET_BLIP_FLASH_INTERVAL

--[[
https://gtaforums.com/topic/864881-all-blip-color-ids-pictured/
]]
function natives.HUD.SET_BLIP_COLOUR(--[[Blip]] blip, --[[int]] color) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_BLIP_COLOUR' due to disabled trusted mode")

	assert(type(blip) == "number", "Arg #1 (blip) must be a number.")
	assert(type(color) == "number", "Arg #2 (color) must be a number.")

	local result = native_call(0x03D7FB09E75D6B7E, blip, color)
end
natives.hud.set_blip_colour = natives.HUD.SET_BLIP_COLOUR

function natives.HUD.SET_BLIP_SECONDARY_COLOUR(--[[Blip]] blip, --[[int]] r, --[[int]] g, --[[int]] b) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_BLIP_SECONDARY_COLOUR' due to disabled trusted mode")

	assert(type(blip) == "number", "Arg #1 (blip) must be a number.")
	assert(type(r) == "number", "Arg #2 (r) must be a number.")
	assert(type(g) == "number", "Arg #3 (g) must be a number.")
	assert(type(b) == "number", "Arg #4 (b) must be a number.")

	local result = native_call(0x14892474891E09EB, blip, r, g, b)
end
natives.hud.set_blip_secondary_colour = natives.HUD.SET_BLIP_SECONDARY_COLOUR

function natives.HUD.GET_BLIP_COLOUR(--[[Blip]] blip) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.GET_BLIP_COLOUR' due to disabled trusted mode")

	assert(type(blip) == "number", "Arg #1 (blip) must be a number.")

	local result = native_call(0xDF729E8D20CF7327, blip)
	return result:__tointeger()
end
natives.hud.get_blip_colour = natives.HUD.GET_BLIP_COLOUR

function natives.HUD.GET_BLIP_HUD_COLOUR(--[[Blip]] blip) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.GET_BLIP_HUD_COLOUR' due to disabled trusted mode")

	assert(type(blip) == "number", "Arg #1 (blip) must be a number.")

	local result = native_call(0x729B5F1EFBC0AAEE, blip)
	return result:__tointeger()
end
natives.hud.get_blip_hud_colour = natives.HUD.GET_BLIP_HUD_COLOUR

function natives.HUD.IS_BLIP_SHORT_RANGE(--[[Blip]] blip) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.IS_BLIP_SHORT_RANGE' due to disabled trusted mode")

	assert(type(blip) == "number", "Arg #1 (blip) must be a number.")

	local result = native_call(0xDA5F8727EB75B926, blip)
	return result:__tointeger() ~= 0
end
natives.hud.is_blip_short_range = natives.HUD.IS_BLIP_SHORT_RANGE

function natives.HUD.IS_BLIP_ON_MINIMAP(--[[Blip]] blip) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.IS_BLIP_ON_MINIMAP' due to disabled trusted mode")

	assert(type(blip) == "number", "Arg #1 (blip) must be a number.")

	local result = native_call(0xE41CA53051197A27, blip)
	return result:__tointeger() ~= 0
end
natives.hud.is_blip_on_minimap = natives.HUD.IS_BLIP_ON_MINIMAP

function natives.HUD.DOES_BLIP_HAVE_GPS_ROUTE(--[[Blip]] blip) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.DOES_BLIP_HAVE_GPS_ROUTE' due to disabled trusted mode")

	assert(type(blip) == "number", "Arg #1 (blip) must be a number.")

	local result = native_call(0xDD2238F57B977751, blip)
	return result:__tointeger() ~= 0
end
natives.hud.does_blip_have_gps_route = natives.HUD.DOES_BLIP_HAVE_GPS_ROUTE

function natives.HUD.SET_BLIP_HIDDEN_ON_LEGEND(--[[Blip]] blip, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_BLIP_HIDDEN_ON_LEGEND' due to disabled trusted mode")

	assert(type(blip) == "number", "Arg #1 (blip) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x54318C915D27E4CE, blip, toggle)
end
natives.hud.set_blip_hidden_on_legend = natives.HUD.SET_BLIP_HIDDEN_ON_LEGEND

function natives.HUD.SET_BLIP_HIGH_DETAIL(--[[Blip]] blip, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_BLIP_HIGH_DETAIL' due to disabled trusted mode")

	assert(type(blip) == "number", "Arg #1 (blip) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xE2590BC29220CEBB, blip, toggle)
end
natives.hud.set_blip_high_detail = natives.HUD.SET_BLIP_HIGH_DETAIL

function natives.HUD.SET_BLIP_AS_MISSION_CREATOR_BLIP(--[[Blip]] blip, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_BLIP_AS_MISSION_CREATOR_BLIP' due to disabled trusted mode")

	assert(type(blip) == "number", "Arg #1 (blip) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x24AC0137444F9FD5, blip, toggle)
end
natives.hud.set_blip_as_mission_creator_blip = natives.HUD.SET_BLIP_AS_MISSION_CREATOR_BLIP

function natives.HUD.IS_MISSION_CREATOR_BLIP(--[[Blip]] blip) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.IS_MISSION_CREATOR_BLIP' due to disabled trusted mode")

	assert(type(blip) == "number", "Arg #1 (blip) must be a number.")

	local result = native_call(0x26F49BF3381D933D, blip)
	return result:__tointeger() ~= 0
end
natives.hud.is_mission_creator_blip = natives.HUD.IS_MISSION_CREATOR_BLIP

function natives.HUD.GET_NEW_SELECTED_MISSION_CREATOR_BLIP() -- Returns Blip
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.GET_NEW_SELECTED_MISSION_CREATOR_BLIP' due to disabled trusted mode")

	local result = native_call(0x5C90988E7C8E1AF4)
	return result:__tointeger()
end
natives.hud.get_new_selected_mission_creator_blip = natives.HUD.GET_NEW_SELECTED_MISSION_CREATOR_BLIP

function natives.HUD.IS_HOVERING_OVER_MISSION_CREATOR_BLIP() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.IS_HOVERING_OVER_MISSION_CREATOR_BLIP' due to disabled trusted mode")

	local result = native_call(0x4167EFE0527D706E)
	return result:__tointeger() ~= 0
end
natives.hud.is_hovering_over_mission_creator_blip = natives.HUD.IS_HOVERING_OVER_MISSION_CREATOR_BLIP

function natives.HUD.SHOW_START_MISSION_INSTRUCTIONAL_BUTTON(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SHOW_START_MISSION_INSTRUCTIONAL_BUTTON' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0xF1A6C18B35BCADE6, toggle)
end
natives.hud.show_start_mission_instructional_button = natives.HUD.SHOW_START_MISSION_INSTRUCTIONAL_BUTTON

function natives.HUD.SHOW_CONTACT_INSTRUCTIONAL_BUTTON(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SHOW_CONTACT_INSTRUCTIONAL_BUTTON' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0xC772A904CDE1186F, toggle)
end
natives.hud.show_contact_instructional_button = natives.HUD.SHOW_CONTACT_INSTRUCTIONAL_BUTTON

function natives.HUD.RELOAD_MAP_MENU() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.RELOAD_MAP_MENU' due to disabled trusted mode")

	local result = native_call(0x2916A928514C9827)
end
natives.hud.reload_map_menu = natives.HUD.RELOAD_MAP_MENU

function natives.HUD.SET_BLIP_MARKER_LONG_DISTANCE(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_BLIP_MARKER_LONG_DISTANCE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xB552929B85FC27EC, p0, p1)
end
natives.hud.set_blip_marker_long_distance = natives.HUD.SET_BLIP_MARKER_LONG_DISTANCE

function natives.HUD.SET_BLIP_FLASHES(--[[Blip]] blip, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_BLIP_FLASHES' due to disabled trusted mode")

	assert(type(blip) == "number", "Arg #1 (blip) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xB14552383D39CE3E, blip, toggle)
end
natives.hud.set_blip_flashes = natives.HUD.SET_BLIP_FLASHES

function natives.HUD.SET_BLIP_FLASHES_ALTERNATE(--[[Blip]] blip, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_BLIP_FLASHES_ALTERNATE' due to disabled trusted mode")

	assert(type(blip) == "number", "Arg #1 (blip) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x2E8D9498C56DD0D1, blip, toggle)
end
natives.hud.set_blip_flashes_alternate = natives.HUD.SET_BLIP_FLASHES_ALTERNATE

function natives.HUD.IS_BLIP_FLASHING(--[[Blip]] blip) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.IS_BLIP_FLASHING' due to disabled trusted mode")

	assert(type(blip) == "number", "Arg #1 (blip) must be a number.")

	local result = native_call(0xA5E41FD83AD6CEF0, blip)
	return result:__tointeger() ~= 0
end
natives.hud.is_blip_flashing = natives.HUD.IS_BLIP_FLASHING

--[[
Sets whether or not the specified blip should only be displayed when nearby, or on the minimap.
]]
function natives.HUD.SET_BLIP_AS_SHORT_RANGE(--[[Blip]] blip, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_BLIP_AS_SHORT_RANGE' due to disabled trusted mode")

	assert(type(blip) == "number", "Arg #1 (blip) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xBE8BE4FE60E27B72, blip, toggle)
end
natives.hud.set_blip_as_short_range = natives.HUD.SET_BLIP_AS_SHORT_RANGE

function natives.HUD.SET_BLIP_SCALE(--[[Blip]] blip, --[[float]] scale) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_BLIP_SCALE' due to disabled trusted mode")

	assert(type(blip) == "number", "Arg #1 (blip) must be a number.")
	assert(type(scale) == "number", "Arg #2 (scale) must be a number.")

	local result = native_call(0xD38744167B2FA257, blip, scale)
end
natives.hud.set_blip_scale = natives.HUD.SET_BLIP_SCALE

--[[
See https://imgur.com/a/lLkEsMN
]]
function natives.HUD.SET_BLIP_SCALE_2D(--[[Blip]] blip, --[[float]] xScale, --[[float]] yScale) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_BLIP_SCALE_2D' due to disabled trusted mode")

	assert(type(blip) == "number", "Arg #1 (blip) must be a number.")
	assert(type(xScale) == "number", "Arg #2 (xScale) must be a number.")
	assert(type(yScale) == "number", "Arg #3 (yScale) must be a number.")

	local result = native_call(0xCD6524439909C979, blip, xScale, yScale)
end
natives.hud.set_blip_scale_2d = natives.HUD.SET_BLIP_SCALE_2D

--[[
See this topic for more details : gtaforums.com/topic/717612-v-scriptnative-documentation-and-research/page-35?p=1069477935
]]
function natives.HUD.SET_BLIP_PRIORITY(--[[Blip]] blip, --[[int]] priority) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_BLIP_PRIORITY' due to disabled trusted mode")

	assert(type(blip) == "number", "Arg #1 (blip) must be a number.")
	assert(type(priority) == "number", "Arg #2 (priority) must be a number.")

	local result = native_call(0xAE9FC9EF6A9FAC79, blip, priority)
end
natives.hud.set_blip_priority = natives.HUD.SET_BLIP_PRIORITY

--[[
Display Id behaviours:
0 = Doesn't show up, ever, anywhere.
1 = Doesn't show up, ever, anywhere.
2 = Shows on both main map and minimap. (Selectable on map)
3 = Shows on main map only. (Selectable on map)
4 = Shows on main map only. (Selectable on map)
5 = Shows on minimap only.
6 = Shows on both main map and minimap. (Selectable on map)
7 = Doesn't show up, ever, anywhere.
8 = Shows on both main map and minimap. (Not selectable on map)
9 = Shows on minimap only.
10 = Shows on both main map and minimap. (Not selectable on map)

Anything higher than 10 seems to be exactly the same as 10.
]]
function natives.HUD.SET_BLIP_DISPLAY(--[[Blip]] blip, --[[int]] displayId) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_BLIP_DISPLAY' due to disabled trusted mode")

	assert(type(blip) == "number", "Arg #1 (blip) must be a number.")
	assert(type(displayId) == "number", "Arg #2 (displayId) must be a number.")

	local result = native_call(0x9029B2F3DA924928, blip, displayId)
end
natives.hud.set_blip_display = natives.HUD.SET_BLIP_DISPLAY

--[[
Example: https://i.imgur.com/skY6vAJ.png

Index:
1 = No distance shown in legend
2 = Distance shown in legend
7 = "Other Players" category, also shows distance in legend
10 = "Property" category
11 = "Owned Property" category

Any other value behaves like index = 1, index wraps around after 255
Blips with categories 7, 10 or 11 will all show under the specific categories listing in the map legend, regardless of sprite or name.
Legend entries:
7 = Other Players (BLIP_OTHPLYR)
10 = Property (BLIP_PROPCAT)
11 = Owned Property (BLIP_APARTCAT)

Category needs to be `7` in order for blip names to show on the expanded minimap when using DISPLAY_PLAYER_NAME_TAGS_ON_BLIPS.
]]
function natives.HUD.SET_BLIP_CATEGORY(--[[Blip]] blip, --[[int]] index) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_BLIP_CATEGORY' due to disabled trusted mode")

	assert(type(blip) == "number", "Arg #1 (blip) must be a number.")
	assert(type(index) == "number", "Arg #2 (index) must be a number.")

	local result = native_call(0x234CDD44D996FD9A, blip, index)
end
natives.hud.set_blip_category = natives.HUD.SET_BLIP_CATEGORY

--[[
In the C++ SDK, this seems not to work-- the blip isn't removed immediately. I use it for saving cars.

E.g.:

Ped pped = PLAYER::PLAYER_PED_ID();
Vehicle v = PED::GET_VEHICLE_PED_IS_USING(pped);
Blip b = HUD::ADD_BLIP_FOR_ENTITY(v);

works fine.
But later attempting to delete it with:

Blip b = HUD::GET_BLIP_FROM_ENTITY(v);
if (HUD::DOES_BLIP_EXIST(b)) HUD::REMOVE_BLIP(&b);

doesn't work. And yes, doesn't work without the DOES_BLIP_EXIST check either. Also, if you attach multiple blips to the same thing (say, a vehicle), and that thing disappears, the blips randomly attach to other things (in my case, a vehicle).

Thus for me, HUD::REMOVE_BLIP(&b) only works if there's one blip, (in my case) the vehicle is marked as no longer needed, you drive away from it and it eventually despawns, AND there is only one blip attached to it. I never intentionally attach multiple blips but if the user saves the car, this adds a blip. Then if they delete it, it is supposed to remove the blip, but it doesn't. Then they can immediately save it again, causing another blip to re-appear.
-------------

Passing the address of the variable instead of the value works for me.
e.g.
int blip = HUD::ADD_BLIP_FOR_ENTITY(ped);
HUD::REMOVE_BLIP(&blip);


Remove blip will currently crash your game, just artificially remove the blip by setting the sprite to a id that is 'invisible'.

--
It crashes my game.
]]
function natives.HUD.REMOVE_BLIP(--[[Blip*]] blip) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.REMOVE_BLIP' due to disabled trusted mode")

	assert(type(blip) == "userdata", "Arg #1 (blip) must be a userdata.")

	local result = native_call(0x86A652570E5F25DD, blip)
end
natives.hud.remove_blip = natives.HUD.REMOVE_BLIP

--[[
false for enemy
true for friendly
]]
function natives.HUD.SET_BLIP_AS_FRIENDLY(--[[Blip]] blip, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_BLIP_AS_FRIENDLY' due to disabled trusted mode")

	assert(type(blip) == "number", "Arg #1 (blip) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x6F6F290102C02AB4, blip, toggle)
end
natives.hud.set_blip_as_friendly = natives.HUD.SET_BLIP_AS_FRIENDLY

function natives.HUD.PULSE_BLIP(--[[Blip]] blip) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.PULSE_BLIP' due to disabled trusted mode")

	assert(type(blip) == "number", "Arg #1 (blip) must be a number.")

	local result = native_call(0x742D6FD43115AF73, blip)
end
natives.hud.pulse_blip = natives.HUD.PULSE_BLIP

function natives.HUD.SHOW_NUMBER_ON_BLIP(--[[Blip]] blip, --[[int]] number) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SHOW_NUMBER_ON_BLIP' due to disabled trusted mode")

	assert(type(blip) == "number", "Arg #1 (blip) must be a number.")
	assert(type(number) == "number", "Arg #2 (number) must be a number.")

	local result = native_call(0xA3C0B359DCB848B6, blip, number)
end
natives.hud.show_number_on_blip = natives.HUD.SHOW_NUMBER_ON_BLIP

function natives.HUD.HIDE_NUMBER_ON_BLIP(--[[Blip]] blip) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.HIDE_NUMBER_ON_BLIP' due to disabled trusted mode")

	assert(type(blip) == "number", "Arg #1 (blip) must be a number.")

	local result = native_call(0x532CFF637EF80148, blip)
end
natives.hud.hide_number_on_blip = natives.HUD.HIDE_NUMBER_ON_BLIP

function natives.HUD.SHOW_HEIGHT_ON_BLIP(--[[Blip]] blip, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SHOW_HEIGHT_ON_BLIP' due to disabled trusted mode")

	assert(type(blip) == "number", "Arg #1 (blip) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x75A16C3DA34F1245, blip, toggle)
end
natives.hud.show_height_on_blip = natives.HUD.SHOW_HEIGHT_ON_BLIP

--[[
Adds a green checkmark on top of a blip.
]]
function natives.HUD.SHOW_TICK_ON_BLIP(--[[Blip]] blip, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SHOW_TICK_ON_BLIP' due to disabled trusted mode")

	assert(type(blip) == "number", "Arg #1 (blip) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x74513EA3E505181E, blip, toggle)
end
natives.hud.show_tick_on_blip = natives.HUD.SHOW_TICK_ON_BLIP

--[[
Adds a orange checkmark on top of a given blip handle: https://imgur.com/a/aw5OTMF
_SHOW_FRIEND_INDICATOR_ON_BLIP* - _SHOW_HEADING_INDICATOR_ON_BLIP*
]]
function natives.HUD.SHOW_GOLD_TICK_ON_BLIP(--[[Blip]] blip, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SHOW_GOLD_TICK_ON_BLIP' due to disabled trusted mode")

	assert(type(blip) == "number", "Arg #1 (blip) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xCAC2031EBF79B1A8, blip, toggle)
end
natives.hud.show_gold_tick_on_blip = natives.HUD.SHOW_GOLD_TICK_ON_BLIP

--[[
Adds the GTA: Online player heading indicator to a blip.
]]
function natives.HUD.SHOW_HEADING_INDICATOR_ON_BLIP(--[[Blip]] blip, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SHOW_HEADING_INDICATOR_ON_BLIP' due to disabled trusted mode")

	assert(type(blip) == "number", "Arg #1 (blip) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x5FBCA48327B914DF, blip, toggle)
end
natives.hud.show_heading_indicator_on_blip = natives.HUD.SHOW_HEADING_INDICATOR_ON_BLIP

--[[
Highlights a blip by a cyan color circle.

Color can be changed with SET_BLIP_SECONDARY_COLOUR
]]
function natives.HUD.SHOW_OUTLINE_INDICATOR_ON_BLIP(--[[Blip]] blip, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SHOW_OUTLINE_INDICATOR_ON_BLIP' due to disabled trusted mode")

	assert(type(blip) == "number", "Arg #1 (blip) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xB81656BC81FE24D1, blip, toggle)
end
natives.hud.show_outline_indicator_on_blip = natives.HUD.SHOW_OUTLINE_INDICATOR_ON_BLIP

--[[
Highlights a blip by a half cyan circle on the right side of the blip. https://i.imgur.com/FrV9M4e.png
.Indicating that that player is a friend (in GTA:O). This color can not be changed.
To toggle the left side (crew member indicator) of the half circle around the blip, use: `SHOW_CREW_INDICATOR_ON_BLIP`
]]
function natives.HUD.SHOW_FRIEND_INDICATOR_ON_BLIP(--[[Blip]] blip, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SHOW_FRIEND_INDICATOR_ON_BLIP' due to disabled trusted mode")

	assert(type(blip) == "number", "Arg #1 (blip) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x23C3EB807312F01A, blip, toggle)
end
natives.hud.show_friend_indicator_on_blip = natives.HUD.SHOW_FRIEND_INDICATOR_ON_BLIP

--[[
Enables or disables the blue half circle https://i.imgur.com/iZes9Ec.png around the specified blip on the left side of the blip. This is used to indicate that the player is in your crew in GTA:O. Color is changeable by using `SET_BLIP_SECONDARY_COLOUR`.
]]
function natives.HUD.SHOW_CREW_INDICATOR_ON_BLIP(--[[Blip]] blip, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SHOW_CREW_INDICATOR_ON_BLIP' due to disabled trusted mode")

	assert(type(blip) == "number", "Arg #1 (blip) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xDCFB5D4DB8BF367E, blip, toggle)
end
natives.hud.show_crew_indicator_on_blip = natives.HUD.SHOW_CREW_INDICATOR_ON_BLIP

--[[
Must be toggled before being queued for animation
]]
function natives.HUD.SET_BLIP_EXTENDED_HEIGHT_THRESHOLD(--[[Blip]] blip, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_BLIP_EXTENDED_HEIGHT_THRESHOLD' due to disabled trusted mode")

	assert(type(blip) == "number", "Arg #1 (blip) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xC4278F70131BAA6D, blip, toggle)
end
natives.hud.set_blip_extended_height_threshold = natives.HUD.SET_BLIP_EXTENDED_HEIGHT_THRESHOLD

function natives.HUD.SET_BLIP_SHORT_HEIGHT_THRESHOLD(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_BLIP_SHORT_HEIGHT_THRESHOLD' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x4B5B620C9B59ED34, p0, p1)
end
natives.hud.set_blip_short_height_threshold = natives.HUD.SET_BLIP_SHORT_HEIGHT_THRESHOLD

function natives.HUD.SET_BLIP_USE_HEIGHT_INDICATOR_ON_EDGE(--[[Blip]] blip, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_BLIP_USE_HEIGHT_INDICATOR_ON_EDGE' due to disabled trusted mode")

	assert(type(blip) == "number", "Arg #1 (blip) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x2C9F302398E13141, blip, p1)
end
natives.hud.set_blip_use_height_indicator_on_edge = natives.HUD.SET_BLIP_USE_HEIGHT_INDICATOR_ON_EDGE

--[[
Makes a blip go small when off the minimap.
]]
function natives.HUD.SET_BLIP_AS_MINIMAL_ON_EDGE(--[[Blip]] blip, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_BLIP_AS_MINIMAL_ON_EDGE' due to disabled trusted mode")

	assert(type(blip) == "number", "Arg #1 (blip) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x2B6D467DAB714E8D, blip, toggle)
end
natives.hud.set_blip_as_minimal_on_edge = natives.HUD.SET_BLIP_AS_MINIMAL_ON_EDGE

--[[
Enabling this on a radius blip will make it outline only. See https://cdn.discordapp.com/attachments/553235301632573459/575132227935928330/unknown.png
]]
function natives.HUD.SET_RADIUS_BLIP_EDGE(--[[Blip]] blip, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_RADIUS_BLIP_EDGE' due to disabled trusted mode")

	assert(type(blip) == "number", "Arg #1 (blip) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x25615540D894B814, blip, toggle)
end
natives.hud.set_radius_blip_edge = natives.HUD.SET_RADIUS_BLIP_EDGE

function natives.HUD.DOES_BLIP_EXIST(--[[Blip]] blip) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.DOES_BLIP_EXIST' due to disabled trusted mode")

	assert(type(blip) == "number", "Arg #1 (blip) must be a number.")

	local result = native_call(0xA6DB27D19ECBB7DA, blip)
	return result:__tointeger() ~= 0
end
natives.hud.does_blip_exist = natives.HUD.DOES_BLIP_EXIST

--[[
This native removes the current waypoint from the map.

Example:
C#:
Function.Call(Hash.SET_WAYPOINT_OFF);

C++:
HUD::SET_WAYPOINT_OFF();
]]
function natives.HUD.SET_WAYPOINT_OFF() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_WAYPOINT_OFF' due to disabled trusted mode")

	local result = native_call(0xA7E4E2D361C2627F)
end
natives.hud.set_waypoint_off = natives.HUD.SET_WAYPOINT_OFF

function natives.HUD.DELETE_WAYPOINTS_FROM_THIS_PLAYER() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.DELETE_WAYPOINTS_FROM_THIS_PLAYER' due to disabled trusted mode")

	local result = native_call(0xD8E694757BCEA8E9)
end
natives.hud.delete_waypoints_from_this_player = natives.HUD.DELETE_WAYPOINTS_FROM_THIS_PLAYER

function natives.HUD.REFRESH_WAYPOINT() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.REFRESH_WAYPOINT' due to disabled trusted mode")

	local result = native_call(0x81FA173F170560D1)
end
natives.hud.refresh_waypoint = natives.HUD.REFRESH_WAYPOINT

function natives.HUD.IS_WAYPOINT_ACTIVE() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.IS_WAYPOINT_ACTIVE' due to disabled trusted mode")

	local result = native_call(0x1DD1F58F493F1DA5)
	return result:__tointeger() ~= 0
end
natives.hud.is_waypoint_active = natives.HUD.IS_WAYPOINT_ACTIVE

function natives.HUD.SET_NEW_WAYPOINT(--[[float]] x, --[[float]] y) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_NEW_WAYPOINT' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")

	local result = native_call(0xFE43368D2AA4F2FC, x, y)
end
natives.hud.set_new_waypoint = natives.HUD.SET_NEW_WAYPOINT

function natives.HUD.SET_BLIP_BRIGHT(--[[Blip]] blip, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_BLIP_BRIGHT' due to disabled trusted mode")

	assert(type(blip) == "number", "Arg #1 (blip) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xB203913733F27884, blip, toggle)
end
natives.hud.set_blip_bright = natives.HUD.SET_BLIP_BRIGHT

--[[
As of b2189, the third parameter sets the color of the cone (before b2189 it was ignored). Note that it uses HUD colors, not blip colors.
]]
function natives.HUD.SET_BLIP_SHOW_CONE(--[[Blip]] blip, --[[BOOL]] toggle, --[[int]] hudColorIndex) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_BLIP_SHOW_CONE' due to disabled trusted mode")

	assert(type(blip) == "number", "Arg #1 (blip) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")
	assert(type(hudColorIndex) == "number", "Arg #3 (hudColorIndex) must be a number.")

	local result = native_call(0x13127EC3665E8EE1, blip, toggle, hudColorIndex)
end
natives.hud.set_blip_show_cone = natives.HUD.SET_BLIP_SHOW_CONE

--[[
Interesting fact: A hash collision for this is RESET_JETPACK_MODEL_SETTINGS
]]
function natives.HUD.REMOVE_COP_BLIP_FROM_PED(--[[Ped]] ped) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.REMOVE_COP_BLIP_FROM_PED' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0xC594B315EDF2D4AF, ped)
end
natives.hud.remove_cop_blip_from_ped = natives.HUD.REMOVE_COP_BLIP_FROM_PED

function natives.HUD.SETUP_FAKE_CONE_DATA(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3, --[[Any]] p4, --[[Any]] p5, --[[Any]] p6, --[[Any]] p7, --[[Any]] p8) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SETUP_FAKE_CONE_DATA' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")
	assert(type(p6) == "number", "Arg #7 (p6) must be a number.")
	assert(type(p7) == "number", "Arg #8 (p7) must be a number.")
	assert(type(p8) == "number", "Arg #9 (p8) must be a number.")

	local result = native_call(0xF83D0FEBE75E62C9, p0, p1, p2, p3, p4, p5, p6, p7, p8)
end
natives.hud.setup_fake_cone_data = natives.HUD.SETUP_FAKE_CONE_DATA

function natives.HUD.REMOVE_FAKE_CONE_DATA(--[[Blip]] blip) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.REMOVE_FAKE_CONE_DATA' due to disabled trusted mode")

	assert(type(blip) == "number", "Arg #1 (blip) must be a number.")

	local result = native_call(0x35A3CD97B2C0A6D2, blip)
end
natives.hud.remove_fake_cone_data = natives.HUD.REMOVE_FAKE_CONE_DATA

function natives.HUD.CLEAR_FAKE_CONE_ARRAY() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.CLEAR_FAKE_CONE_ARRAY' due to disabled trusted mode")

	local result = native_call(0x8410C5E0CD847B9D)
end
natives.hud.clear_fake_cone_array = natives.HUD.CLEAR_FAKE_CONE_ARRAY

--[[
This native is used to colorize certain map components like the army base at the top of the map.
p2 appears to be always -1. If p2 is -1 then native wouldn't change the color. See https://gfycat.com/SkinnyPinkChupacabra
]]
function natives.HUD.SET_MINIMAP_COMPONENT(--[[int]] componentId, --[[BOOL]] toggle, --[[int]] overrideColor) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_MINIMAP_COMPONENT' due to disabled trusted mode")

	assert(type(componentId) == "number", "Arg #1 (componentId) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")
	assert(type(overrideColor) == "number", "Arg #3 (overrideColor) must be a number.")

	local result = native_call(0x75A9A10948D1DEA6, componentId, toggle, overrideColor)
	return result:__tointeger()
end
natives.hud.set_minimap_component = natives.HUD.SET_MINIMAP_COMPONENT

function natives.HUD.SET_MINIMAP_SONAR_SWEEP(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_MINIMAP_SONAR_SWEEP' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x6B50FC8749632EC1, toggle)
end
natives.hud.set_minimap_sonar_sweep = natives.HUD.SET_MINIMAP_SONAR_SWEEP

function natives.HUD.SHOW_ACCOUNT_PICKER() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SHOW_ACCOUNT_PICKER' due to disabled trusted mode")

	local result = native_call(0x60E892BA4F5BDCA4)
end
natives.hud.show_account_picker = natives.HUD.SHOW_ACCOUNT_PICKER

function natives.HUD.GET_MAIN_PLAYER_BLIP_ID() -- Returns Blip
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.GET_MAIN_PLAYER_BLIP_ID' due to disabled trusted mode")

	local result = native_call(0xDCD4EC3F419D02FA)
	return result:__tointeger()
end
natives.hud.get_main_player_blip_id = natives.HUD.GET_MAIN_PLAYER_BLIP_ID

function natives.HUD.SET_PM_WARNINGSCREEN_ACTIVE(--[[BOOL]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_PM_WARNINGSCREEN_ACTIVE' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0x41350B4FC28E3941, p0)
end
natives.hud.set_pm_warningscreen_active = natives.HUD.SET_PM_WARNINGSCREEN_ACTIVE

function natives.HUD.HIDE_LOADING_ON_FADE_THIS_FRAME() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.HIDE_LOADING_ON_FADE_THIS_FRAME' due to disabled trusted mode")

	local result = native_call(0x4B0311D3CDC4648F)
end
natives.hud.hide_loading_on_fade_this_frame = natives.HUD.HIDE_LOADING_ON_FADE_THIS_FRAME

--[[
List of interior hashes: pastebin.com/1FUyXNqY
Not for every interior zoom > 0 available.
]]
function natives.HUD.SET_RADAR_AS_INTERIOR_THIS_FRAME(--[[Hash]] interior, --[[float]] x, --[[float]] y, --[[int]] z, --[[int]] zoom) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_RADAR_AS_INTERIOR_THIS_FRAME' due to disabled trusted mode")

	assert(type(interior) == "number", "Arg #1 (interior) must be a number.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")
	assert(type(zoom) == "number", "Arg #5 (zoom) must be a number.")

	local result = native_call(0x59E727A1C9D3E31A, interior, x, y, z, zoom)
end
natives.hud.set_radar_as_interior_this_frame = natives.HUD.SET_RADAR_AS_INTERIOR_THIS_FRAME

function natives.HUD.SET_INSIDE_VERY_SMALL_INTERIOR(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_INSIDE_VERY_SMALL_INTERIOR' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x504DFE62A1692296, toggle)
end
natives.hud.set_inside_very_small_interior = natives.HUD.SET_INSIDE_VERY_SMALL_INTERIOR

function natives.HUD.SET_INSIDE_VERY_LARGE_INTERIOR(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_INSIDE_VERY_LARGE_INTERIOR' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x7EC8ABA5E74B3D7A, toggle)
end
natives.hud.set_inside_very_large_interior = natives.HUD.SET_INSIDE_VERY_LARGE_INTERIOR

function natives.HUD.SET_RADAR_AS_EXTERIOR_THIS_FRAME() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_RADAR_AS_EXTERIOR_THIS_FRAME' due to disabled trusted mode")

	local result = native_call(0xE81B7D2A3DAB2D81)
end
natives.hud.set_radar_as_exterior_this_frame = natives.HUD.SET_RADAR_AS_EXTERIOR_THIS_FRAME

--[[
Sets the position of the arrow icon representing the player on both the minimap and world map.

Too bad this wouldn't work over the network (obviously not). Could spoof where we would be.
]]
function natives.HUD.SET_FAKE_PAUSEMAP_PLAYER_POSITION_THIS_FRAME(--[[float]] x, --[[float]] y) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_FAKE_PAUSEMAP_PLAYER_POSITION_THIS_FRAME' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")

	local result = native_call(0x77E2DD177910E1CF, x, y)
end
natives.hud.set_fake_pausemap_player_position_this_frame = natives.HUD.SET_FAKE_PAUSEMAP_PLAYER_POSITION_THIS_FRAME

function natives.HUD.SET_FAKE_GPS_PLAYER_POSITION_THIS_FRAME(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_FAKE_GPS_PLAYER_POSITION_THIS_FRAME' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0xA17784FCA9548D15, p0, p1, p2)
end
natives.hud.set_fake_gps_player_position_this_frame = natives.HUD.SET_FAKE_GPS_PLAYER_POSITION_THIS_FRAME

function natives.HUD.IS_PAUSEMAP_IN_INTERIOR_MODE() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.IS_PAUSEMAP_IN_INTERIOR_MODE' due to disabled trusted mode")

	local result = native_call(0x9049FE339D5F6F6F)
	return result:__tointeger() ~= 0
end
natives.hud.is_pausemap_in_interior_mode = natives.HUD.IS_PAUSEMAP_IN_INTERIOR_MODE

function natives.HUD.HIDE_MINIMAP_EXTERIOR_MAP_THIS_FRAME() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.HIDE_MINIMAP_EXTERIOR_MAP_THIS_FRAME' due to disabled trusted mode")

	local result = native_call(0x5FBAE526203990C9)
end
natives.hud.hide_minimap_exterior_map_this_frame = natives.HUD.HIDE_MINIMAP_EXTERIOR_MAP_THIS_FRAME

function natives.HUD.HIDE_MINIMAP_INTERIOR_MAP_THIS_FRAME() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.HIDE_MINIMAP_INTERIOR_MAP_THIS_FRAME' due to disabled trusted mode")

	local result = native_call(0x20FE7FDFEEAD38C0)
end
natives.hud.hide_minimap_interior_map_this_frame = natives.HUD.HIDE_MINIMAP_INTERIOR_MAP_THIS_FRAME

--[[
Toggles the Cayo Perico map.
]]
function natives.HUD.SET_USE_ISLAND_MAP(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_USE_ISLAND_MAP' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x5E1460624D194A38, toggle)
end
natives.hud.set_use_island_map = natives.HUD.SET_USE_ISLAND_MAP

--[[
When calling this, the current frame will have the players "arrow icon" be focused on the dead center of the radar.
]]
function natives.HUD.DONT_TILT_MINIMAP_THIS_FRAME() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.DONT_TILT_MINIMAP_THIS_FRAME' due to disabled trusted mode")

	local result = native_call(0x6D14BFDC33B34F55)
end
natives.hud.dont_tilt_minimap_this_frame = natives.HUD.DONT_TILT_MINIMAP_THIS_FRAME

function natives.HUD.DONT_ZOOM_MINIMAP_WHEN_SNIPING_THIS_FRAME() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.DONT_ZOOM_MINIMAP_WHEN_SNIPING_THIS_FRAME' due to disabled trusted mode")

	local result = native_call(0x55F5A5F07134DE60)
end
natives.hud.dont_zoom_minimap_when_sniping_this_frame = natives.HUD.DONT_ZOOM_MINIMAP_WHEN_SNIPING_THIS_FRAME

function natives.HUD.SET_WIDESCREEN_FORMAT(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_WIDESCREEN_FORMAT' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xC3B07BA00A83B0F1, p0)
end
natives.hud.set_widescreen_format = natives.HUD.SET_WIDESCREEN_FORMAT

function natives.HUD.DISPLAY_AREA_NAME(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.DISPLAY_AREA_NAME' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x276B6CE369C33678, toggle)
end
natives.hud.display_area_name = natives.HUD.DISPLAY_AREA_NAME

--[[
"DISPLAY_CASH(false);" makes the cash amount render on the screen when appropriate
"DISPLAY_CASH(true);" disables cash amount rendering
]]
function natives.HUD.DISPLAY_CASH(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.DISPLAY_CASH' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x96DEC8D5430208B7, toggle)
end
natives.hud.display_cash = natives.HUD.DISPLAY_CASH

--[[
Related to displaying cash on the HUD
Always called before HUD::_SET_SINGLEPLAYER_HUD_CASH in decompiled scripts
]]
function natives.HUD.USE_FAKE_MP_CASH(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.USE_FAKE_MP_CASH' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x170F541E1CADD1DE, toggle)
end
natives.hud.use_fake_mp_cash = natives.HUD.USE_FAKE_MP_CASH

--[[
Displays cash change notifications on HUD.
]]
function natives.HUD.CHANGE_FAKE_MP_CASH(--[[int]] cash, --[[int]] bank) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.CHANGE_FAKE_MP_CASH' due to disabled trusted mode")

	assert(type(cash) == "number", "Arg #1 (cash) must be a number.")
	assert(type(bank) == "number", "Arg #2 (bank) must be a number.")

	local result = native_call(0x0772DF77852C2E30, cash, bank)
end
natives.hud.change_fake_mp_cash = natives.HUD.CHANGE_FAKE_MP_CASH

function natives.HUD.DISPLAY_AMMO_THIS_FRAME(--[[BOOL]] display) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.DISPLAY_AMMO_THIS_FRAME' due to disabled trusted mode")

	assert(type(display) == "boolean", "Arg #1 (display) must be a boolean.")

	local result = native_call(0xA5E78BA2B1331C55, display)
end
natives.hud.display_ammo_this_frame = natives.HUD.DISPLAY_AMMO_THIS_FRAME

--[[
Displays the crosshair for this frame.
]]
function natives.HUD.DISPLAY_SNIPER_SCOPE_THIS_FRAME() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.DISPLAY_SNIPER_SCOPE_THIS_FRAME' due to disabled trusted mode")

	local result = native_call(0x73115226F4814E62)
end
natives.hud.display_sniper_scope_this_frame = natives.HUD.DISPLAY_SNIPER_SCOPE_THIS_FRAME

--[[
I think this works, but seems to prohibit switching to other weapons (or accessing the weapon wheel)
]]
function natives.HUD.HIDE_HUD_AND_RADAR_THIS_FRAME() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.HIDE_HUD_AND_RADAR_THIS_FRAME' due to disabled trusted mode")

	local result = native_call(0x719FF505F097FD20)
end
natives.hud.hide_hud_and_radar_this_frame = natives.HUD.HIDE_HUD_AND_RADAR_THIS_FRAME

--[[
Controls whether to display 'Cash'/'Bank' next to the money balance HUD in Multiplayer (https://i.imgur.com/MiYUtNl.png) 
Real name is somewhere between ADD_TO* and ALLOW_MISSION* alphabetically.
]]
function natives.HUD.ALLOW_DISPLAY_OF_MULTIPLAYER_CASH_TEXT(--[[BOOL]] allow) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.ALLOW_DISPLAY_OF_MULTIPLAYER_CASH_TEXT' due to disabled trusted mode")

	assert(type(allow) == "boolean", "Arg #1 (allow) must be a boolean.")

	local result = native_call(0xE67C6DFD386EA5E7, allow)
end
natives.hud.allow_display_of_multiplayer_cash_text = natives.HUD.ALLOW_DISPLAY_OF_MULTIPLAYER_CASH_TEXT

function natives.HUD.SET_MULTIPLAYER_WALLET_CASH() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_MULTIPLAYER_WALLET_CASH' due to disabled trusted mode")

	local result = native_call(0xC2D15BEF167E27BC)
end
natives.hud.set_multiplayer_wallet_cash = natives.HUD.SET_MULTIPLAYER_WALLET_CASH

function natives.HUD.REMOVE_MULTIPLAYER_WALLET_CASH() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.REMOVE_MULTIPLAYER_WALLET_CASH' due to disabled trusted mode")

	local result = native_call(0x95CF81BD06EE1887)
end
natives.hud.remove_multiplayer_wallet_cash = natives.HUD.REMOVE_MULTIPLAYER_WALLET_CASH

function natives.HUD.SET_MULTIPLAYER_BANK_CASH() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_MULTIPLAYER_BANK_CASH' due to disabled trusted mode")

	local result = native_call(0xDD21B55DF695CD0A)
end
natives.hud.set_multiplayer_bank_cash = natives.HUD.SET_MULTIPLAYER_BANK_CASH

function natives.HUD.REMOVE_MULTIPLAYER_BANK_CASH() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.REMOVE_MULTIPLAYER_BANK_CASH' due to disabled trusted mode")

	local result = native_call(0xC7C6789AA1CFEDD0)
end
natives.hud.remove_multiplayer_bank_cash = natives.HUD.REMOVE_MULTIPLAYER_BANK_CASH

--[[
This native does absolutely nothing, just a nullsub
]]
function natives.HUD.SET_MULTIPLAYER_HUD_CASH(--[[int]] p0, --[[int]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_MULTIPLAYER_HUD_CASH' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xFD1D220394BCB824, p0, p1)
end
natives.hud.set_multiplayer_hud_cash = natives.HUD.SET_MULTIPLAYER_HUD_CASH

--[[
Removes multiplayer cash hud each frame
]]
function natives.HUD.REMOVE_MULTIPLAYER_HUD_CASH() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.REMOVE_MULTIPLAYER_HUD_CASH' due to disabled trusted mode")

	local result = native_call(0x968F270E39141ECA)
end
natives.hud.remove_multiplayer_hud_cash = natives.HUD.REMOVE_MULTIPLAYER_HUD_CASH

function natives.HUD.HIDE_HELP_TEXT_THIS_FRAME() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.HIDE_HELP_TEXT_THIS_FRAME' due to disabled trusted mode")

	local result = native_call(0xD46923FC481CA285)
end
natives.hud.hide_help_text_this_frame = natives.HUD.HIDE_HELP_TEXT_THIS_FRAME

function natives.HUD.IS_IME_IN_PROGRESS() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.IS_IME_IN_PROGRESS' due to disabled trusted mode")

	local result = native_call(0x801879A9B4F4B2FB)
	return result:__tointeger() ~= 0
end
natives.hud.is_ime_in_progress = natives.HUD.IS_IME_IN_PROGRESS

--[[
The messages are localized strings.
Examples:
"No_bus_money"
"Enter_bus"
"Tour_help"
"LETTERS_HELP2"
"Dummy"

**The bool appears to always be false (if it even is a bool, as it's represented by a zero)**
--------
p1 doesn't seem to make a difference, regardless of the state it's in. 


picture of where on the screen this is displayed? 
]]
function natives.HUD.DISPLAY_HELP_TEXT_THIS_FRAME(--[[const char*]] message, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.DISPLAY_HELP_TEXT_THIS_FRAME' due to disabled trusted mode")

	assert(type(message) == "string", "Arg #1 (message) must be a string.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0x960C9FF8F616E41C, message, p1)
end
natives.hud.display_help_text_this_frame = natives.HUD.DISPLAY_HELP_TEXT_THIS_FRAME

--[[
Forces the weapon wheel to show/hide.
]]
function natives.HUD.HUD_FORCE_WEAPON_WHEEL(--[[BOOL]] show) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.HUD_FORCE_WEAPON_WHEEL' due to disabled trusted mode")

	assert(type(show) == "boolean", "Arg #1 (show) must be a boolean.")

	local result = native_call(0xEB354E5376BC81A7, show)
end
natives.hud.hud_force_weapon_wheel = natives.HUD.HUD_FORCE_WEAPON_WHEEL

--[[
Displays loading screen tips, requires `_0x56C8B608CFD49854` to be called beforehand.
]]
function natives.HUD.HUD_FORCE_SPECIAL_VEHICLE_WEAPON_WHEEL() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.HUD_FORCE_SPECIAL_VEHICLE_WEAPON_WHEEL' due to disabled trusted mode")

	local result = native_call(0x488043841BBE156F)
end
natives.hud.hud_force_special_vehicle_weapon_wheel = natives.HUD.HUD_FORCE_SPECIAL_VEHICLE_WEAPON_WHEEL

--[[
Calling this each frame, stops the player from receiving a weapon via the weapon wheel.
]]
function natives.HUD.HUD_SUPPRESS_WEAPON_WHEEL_RESULTS_THIS_FRAME() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.HUD_SUPPRESS_WEAPON_WHEEL_RESULTS_THIS_FRAME' due to disabled trusted mode")

	local result = native_call(0x0AFC4AF510774B47)
end
natives.hud.hud_suppress_weapon_wheel_results_this_frame = natives.HUD.HUD_SUPPRESS_WEAPON_WHEEL_RESULTS_THIS_FRAME

--[[
Returns the weapon hash to the selected/highlighted weapon in the wheel
]]
function natives.HUD.HUD_GET_WEAPON_WHEEL_CURRENTLY_HIGHLIGHTED() -- Returns Hash
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.HUD_GET_WEAPON_WHEEL_CURRENTLY_HIGHLIGHTED' due to disabled trusted mode")

	local result = native_call(0xA48931185F0536FE)
	return result:__tointeger()
end
natives.hud.hud_get_weapon_wheel_currently_highlighted = natives.HUD.HUD_GET_WEAPON_WHEEL_CURRENTLY_HIGHLIGHTED

--[[
Set the active slotIndex in the wheel weapon to the slot associated with the provided Weapon hash
]]
function natives.HUD.HUD_SET_WEAPON_WHEEL_TOP_SLOT(--[[Hash]] weaponHash) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.HUD_SET_WEAPON_WHEEL_TOP_SLOT' due to disabled trusted mode")

	assert(type(weaponHash) == "number", "Arg #1 (weaponHash) must be a number.")

	local result = native_call(0x72C1056D678BB7D8, weaponHash)
end
natives.hud.hud_set_weapon_wheel_top_slot = natives.HUD.HUD_SET_WEAPON_WHEEL_TOP_SLOT

--[[
Returns the weapon hash active in a specific weapon wheel slotList
]]
function natives.HUD.HUD_GET_WEAPON_WHEEL_TOP_SLOT(--[[int]] weaponTypeIndex) -- Returns Hash
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.HUD_GET_WEAPON_WHEEL_TOP_SLOT' due to disabled trusted mode")

	assert(type(weaponTypeIndex) == "number", "Arg #1 (weaponTypeIndex) must be a number.")

	local result = native_call(0xA13E93403F26C812, weaponTypeIndex)
	return result:__tointeger()
end
natives.hud.hud_get_weapon_wheel_top_slot = natives.HUD.HUD_GET_WEAPON_WHEEL_TOP_SLOT

--[[
Sets a global that disables many weapon input tasks (shooting, aiming, etc.). Does not work with vehicle weapons, only used in selector.ysc
]]
function natives.HUD.HUD_SHOWING_CHARACTER_SWITCH_SELECTION(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.HUD_SHOWING_CHARACTER_SWITCH_SELECTION' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x14C9FDCC41F81F63, toggle)
end
natives.hud.hud_showing_character_switch_selection = natives.HUD.HUD_SHOWING_CHARACTER_SWITCH_SELECTION

--[[
Only the script that originally called SET_GPS_FLAGS can set them again. Another script cannot set the flags, until the first script that called it has called CLEAR_GPS_FLAGS.

Doesn't seem like the flags are actually read by the game at all.
]]
function natives.HUD.SET_GPS_FLAGS(--[[int]] p0, --[[float]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_GPS_FLAGS' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x5B440763A4C8D15B, p0, p1)
end
natives.hud.set_gps_flags = natives.HUD.SET_GPS_FLAGS

--[[
Clears the GPS flags. Only the script that originally called SET_GPS_FLAGS can clear them.

Doesn't seem like the flags are actually read by the game at all.
]]
function natives.HUD.CLEAR_GPS_FLAGS() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.CLEAR_GPS_FLAGS' due to disabled trusted mode")

	local result = native_call(0x21986729D6A3A830)
end
natives.hud.clear_gps_flags = natives.HUD.CLEAR_GPS_FLAGS

function natives.HUD.SET_RACE_TRACK_RENDER(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_RACE_TRACK_RENDER' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x1EAC5F91BCBC5073, toggle)
end
natives.hud.set_race_track_render = natives.HUD.SET_RACE_TRACK_RENDER

--[[
Does the same as SET_RACE_TRACK_RENDER(false);
]]
function natives.HUD.CLEAR_GPS_RACE_TRACK() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.CLEAR_GPS_RACE_TRACK' due to disabled trusted mode")

	local result = native_call(0x7AA5B4CE533C858B)
end
natives.hud.clear_gps_race_track = natives.HUD.CLEAR_GPS_RACE_TRACK

--[[
Starts a new GPS custom-route, allowing you to plot lines on the map.
Lines are drawn directly between points.
The GPS custom route works like the GPS multi route, except it does not follow roads.
Example result: https://i.imgur.com/BDm5pzt.png
hudColor: The HUD color of the GPS path.
displayOnFoot: Draws the path regardless if the player is in a vehicle or not.
followPlayer: Draw the path partially between the previous and next point based on the players position between them. When false, the GPS appears to not disappear after the last leg is completed.
]]
function natives.HUD.START_GPS_CUSTOM_ROUTE(--[[int]] hudColor, --[[BOOL]] displayOnFoot, --[[BOOL]] followPlayer) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.START_GPS_CUSTOM_ROUTE' due to disabled trusted mode")

	assert(type(hudColor) == "number", "Arg #1 (hudColor) must be a number.")
	assert(type(displayOnFoot) == "boolean", "Arg #2 (displayOnFoot) must be a boolean.")
	assert(type(followPlayer) == "boolean", "Arg #3 (followPlayer) must be a boolean.")

	local result = native_call(0xDB34E8D56FC13B08, hudColor, displayOnFoot, followPlayer)
end
natives.hud.start_gps_custom_route = natives.HUD.START_GPS_CUSTOM_ROUTE

function natives.HUD.ADD_POINT_TO_GPS_CUSTOM_ROUTE(--[[float]] x, --[[float]] y, --[[float]] z) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.ADD_POINT_TO_GPS_CUSTOM_ROUTE' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")

	local result = native_call(0x311438A071DD9B1A, x, y, z)
end
natives.hud.add_point_to_gps_custom_route = natives.HUD.ADD_POINT_TO_GPS_CUSTOM_ROUTE

--[[
radarThickness: The width of the GPS route on the radar
mapThickness: The width of the GPS route on the map
]]
function natives.HUD.SET_GPS_CUSTOM_ROUTE_RENDER(--[[BOOL]] toggle, --[[int]] radarThickness, --[[int]] mapThickness) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_GPS_CUSTOM_ROUTE_RENDER' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")
	assert(type(radarThickness) == "number", "Arg #2 (radarThickness) must be a number.")
	assert(type(mapThickness) == "number", "Arg #3 (mapThickness) must be a number.")

	local result = native_call(0x900086F371220B6F, toggle, radarThickness, mapThickness)
end
natives.hud.set_gps_custom_route_render = natives.HUD.SET_GPS_CUSTOM_ROUTE_RENDER

function natives.HUD.CLEAR_GPS_CUSTOM_ROUTE() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.CLEAR_GPS_CUSTOM_ROUTE' due to disabled trusted mode")

	local result = native_call(0xE6DE0561D9232A64)
end
natives.hud.clear_gps_custom_route = natives.HUD.CLEAR_GPS_CUSTOM_ROUTE

--[[
Starts a new GPS multi-route, allowing you to create custom GPS paths.
GPS functions like the waypoint, except it can contain multiple points it's forced to go through.
Once the player has passed a point, the GPS will no longer force its path through it.

Works independently from the player-placed waypoint and blip routes.
Example result: https://i.imgur.com/ZZHQatX.png
hudColor: The HUD color of the GPS path.
routeFromPlayer: Makes the GPS draw a path from the player to the next point, rather than the original path from the previous point.
displayOnFoot: Draws the GPS path regardless if the player is in a vehicle or not.
]]
function natives.HUD.START_GPS_MULTI_ROUTE(--[[int]] hudColor, --[[BOOL]] routeFromPlayer, --[[BOOL]] displayOnFoot) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.START_GPS_MULTI_ROUTE' due to disabled trusted mode")

	assert(type(hudColor) == "number", "Arg #1 (hudColor) must be a number.")
	assert(type(routeFromPlayer) == "boolean", "Arg #2 (routeFromPlayer) must be a boolean.")
	assert(type(displayOnFoot) == "boolean", "Arg #3 (displayOnFoot) must be a boolean.")

	local result = native_call(0x3D3D15AF7BCAAF83, hudColor, routeFromPlayer, displayOnFoot)
end
natives.hud.start_gps_multi_route = natives.HUD.START_GPS_MULTI_ROUTE

function natives.HUD.ADD_POINT_TO_GPS_MULTI_ROUTE(--[[float]] x, --[[float]] y, --[[float]] z) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.ADD_POINT_TO_GPS_MULTI_ROUTE' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")

	local result = native_call(0xA905192A6781C41B, x, y, z)
end
natives.hud.add_point_to_gps_multi_route = natives.HUD.ADD_POINT_TO_GPS_MULTI_ROUTE

function natives.HUD.SET_GPS_MULTI_ROUTE_RENDER(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_GPS_MULTI_ROUTE_RENDER' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x3DDA37128DD1ACA8, toggle)
end
natives.hud.set_gps_multi_route_render = natives.HUD.SET_GPS_MULTI_ROUTE_RENDER

--[[
Does the same as SET_GPS_MULTI_ROUTE_RENDER(false);
]]
function natives.HUD.CLEAR_GPS_MULTI_ROUTE() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.CLEAR_GPS_MULTI_ROUTE' due to disabled trusted mode")

	local result = native_call(0x67EEDEA1B9BAFD94)
end
natives.hud.clear_gps_multi_route = natives.HUD.CLEAR_GPS_MULTI_ROUTE

function natives.HUD.CLEAR_GPS_PLAYER_WAYPOINT() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.CLEAR_GPS_PLAYER_WAYPOINT' due to disabled trusted mode")

	local result = native_call(0xFF4FB7C8CDFA3DA7)
end
natives.hud.clear_gps_player_waypoint = natives.HUD.CLEAR_GPS_PLAYER_WAYPOINT

function natives.HUD.SET_GPS_FLASHES(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_GPS_FLASHES' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x320D0E0D936A0E9B, toggle)
end
natives.hud.set_gps_flashes = natives.HUD.SET_GPS_FLASHES

function natives.HUD.SET_PLAYER_ICON_COLOUR(--[[int]] color) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_PLAYER_ICON_COLOUR' due to disabled trusted mode")

	assert(type(color) == "number", "Arg #1 (color) must be a number.")

	local result = native_call(0x7B21E0BB01E8224A, color)
end
natives.hud.set_player_icon_colour = natives.HUD.SET_PLAYER_ICON_COLOUR

--[[
adds a short flash to the Radar/Minimap
Usage: UI.FLASH_MINIMAP_DISPLAY
]]
function natives.HUD.FLASH_MINIMAP_DISPLAY() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.FLASH_MINIMAP_DISPLAY' due to disabled trusted mode")

	local result = native_call(0xF2DD778C22B15BDA)
end
natives.hud.flash_minimap_display = natives.HUD.FLASH_MINIMAP_DISPLAY

function natives.HUD.FLASH_MINIMAP_DISPLAY_WITH_COLOR(--[[int]] hudColorIndex) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.FLASH_MINIMAP_DISPLAY_WITH_COLOR' due to disabled trusted mode")

	assert(type(hudColorIndex) == "number", "Arg #1 (hudColorIndex) must be a number.")

	local result = native_call(0x6B1DE27EE78E6A19, hudColorIndex)
end
natives.hud.flash_minimap_display_with_color = natives.HUD.FLASH_MINIMAP_DISPLAY_WITH_COLOR

function natives.HUD.TOGGLE_STEALTH_RADAR(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.TOGGLE_STEALTH_RADAR' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x6AFDFB93754950C7, toggle)
end
natives.hud.toggle_stealth_radar = natives.HUD.TOGGLE_STEALTH_RADAR

function natives.HUD.SET_MINIMAP_IN_SPECTATOR_MODE(--[[BOOL]] toggle, --[[Ped]] ped) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_MINIMAP_IN_SPECTATOR_MODE' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")
	assert(type(ped) == "number", "Arg #2 (ped) must be a number.")

	local result = native_call(0x1A5CD7752DD28CD3, toggle, ped)
end
natives.hud.set_minimap_in_spectator_mode = natives.HUD.SET_MINIMAP_IN_SPECTATOR_MODE

function natives.HUD.SET_MISSION_NAME(--[[BOOL]] p0, --[[const char*]] name) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_MISSION_NAME' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")
	assert(type(name) == "string", "Arg #2 (name) must be a string.")

	local result = native_call(0x5F28ECF5FC84772F, p0, name)
end
natives.hud.set_mission_name = natives.HUD.SET_MISSION_NAME

function natives.HUD.SET_MISSION_NAME_FOR_UGC_MISSION(--[[BOOL]] p0, --[[const char*]] name) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_MISSION_NAME_FOR_UGC_MISSION' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")
	assert(type(name) == "string", "Arg #2 (name) must be a string.")

	local result = native_call(0xE45087D85F468BC2, p0, name)
end
natives.hud.set_mission_name_for_ugc_mission = natives.HUD.SET_MISSION_NAME_FOR_UGC_MISSION

--[[
HUD::_817B86108EB94E51(1, &g_189F36._f10CD1[0/*16*/], &g_189F36._f10CD1[1/*16*/], &g_189F36._f10CD1[2/*16*/], &g_189F36._f10CD1[3/*16*/], &g_189F36._f10CD1[4/*16*/], &g_189F36._f10CD1[5/*16*/], &g_189F36._f10CD1[6/*16*/], &g_189F36._f10CD1[7/*16*/]);
]]
function natives.HUD.SET_DESCRIPTION_FOR_UGC_MISSION_EIGHT_STRINGS(--[[BOOL]] p0, --[[Any*]] p1, --[[Any*]] p2, --[[Any*]] p3, --[[Any*]] p4, --[[Any*]] p5, --[[Any*]] p6, --[[Any*]] p7, --[[Any*]] p8) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_DESCRIPTION_FOR_UGC_MISSION_EIGHT_STRINGS' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")
	assert(type(p1) == "userdata", "Arg #2 (p1) must be a userdata.")
	assert(type(p2) == "userdata", "Arg #3 (p2) must be a userdata.")
	assert(type(p3) == "userdata", "Arg #4 (p3) must be a userdata.")
	assert(type(p4) == "userdata", "Arg #5 (p4) must be a userdata.")
	assert(type(p5) == "userdata", "Arg #6 (p5) must be a userdata.")
	assert(type(p6) == "userdata", "Arg #7 (p6) must be a userdata.")
	assert(type(p7) == "userdata", "Arg #8 (p7) must be a userdata.")
	assert(type(p8) == "userdata", "Arg #9 (p8) must be a userdata.")

	local result = native_call(0x817B86108EB94E51, p0, p1, p2, p3, p4, p5, p6, p7, p8)
end
natives.hud.set_description_for_ugc_mission_eight_strings = natives.HUD.SET_DESCRIPTION_FOR_UGC_MISSION_EIGHT_STRINGS

function natives.HUD.SET_MINIMAP_BLOCK_WAYPOINT(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_MINIMAP_BLOCK_WAYPOINT' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x58FADDED207897DC, toggle)
end
natives.hud.set_minimap_block_waypoint = natives.HUD.SET_MINIMAP_BLOCK_WAYPOINT

--[[
Toggles the North Yankton map
]]
function natives.HUD.SET_MINIMAP_IN_PROLOGUE(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_MINIMAP_IN_PROLOGUE' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x9133955F1A2DA957, toggle)
end
natives.hud.set_minimap_in_prologue = natives.HUD.SET_MINIMAP_IN_PROLOGUE

--[[
If true, the entire map will be revealed.

FOW = Fog of War
]]
function natives.HUD.SET_MINIMAP_HIDE_FOW(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_MINIMAP_HIDE_FOW' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0xF8DEE0A5600CBB93, toggle)
end
natives.hud.set_minimap_hide_fow = natives.HUD.SET_MINIMAP_HIDE_FOW

function natives.HUD.GET_MINIMAP_FOW_DISCOVERY_RATIO() -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.GET_MINIMAP_FOW_DISCOVERY_RATIO' due to disabled trusted mode")

	local result = native_call(0xE0130B41D3CF4574)
	return result:__tonumber()
end
natives.hud.get_minimap_fow_discovery_ratio = natives.HUD.GET_MINIMAP_FOW_DISCOVERY_RATIO

function natives.HUD.GET_MINIMAP_FOW_COORDINATE_IS_REVEALED(--[[float]] x, --[[float]] y, --[[float]] z) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.GET_MINIMAP_FOW_COORDINATE_IS_REVEALED' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")

	local result = native_call(0x6E31B91145873922, x, y, z)
	return result:__tointeger() ~= 0
end
natives.hud.get_minimap_fow_coordinate_is_revealed = natives.HUD.GET_MINIMAP_FOW_COORDINATE_IS_REVEALED

function natives.HUD.SET_MINIMAP_FOW_DO_NOT_UPDATE(--[[BOOL]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_MINIMAP_FOW_DO_NOT_UPDATE' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0x62E849B7EB28E770, p0)
end
natives.hud.set_minimap_fow_do_not_update = natives.HUD.SET_MINIMAP_FOW_DO_NOT_UPDATE

--[[
Up to eight coordinates may be revealed per frame
]]
function natives.HUD.SET_MINIMAP_FOW_REVEAL_COORDINATE(--[[float]] x, --[[float]] y, --[[float]] z) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_MINIMAP_FOW_REVEAL_COORDINATE' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")

	local result = native_call(0x0923DBF87DFF735E, x, y, z)
end
natives.hud.set_minimap_fow_reveal_coordinate = natives.HUD.SET_MINIMAP_FOW_REVEAL_COORDINATE

--[[
Not much is known so far on what it does _exactly_.
All I know for sure is that it draws the specified hole ID on the pause menu map as well as on the mini-map/radar. This native also seems to change some other things related to the pause menu map's behaviour, for example: you can no longer set waypoints, the pause menu map starts up in a 'zoomed in' state. This native does not need to be executed every tick.
You need to center the minimap manually as well as change/lock it's zoom and angle in order for it to appear correctly on the minimap.
You'll also need to use the `GOLF` scaleform in order to get the correct minmap border to show up.
Use `0x35edd5b2e3ff01c0` to reset the map when you no longer want to display any golf holes (you still need to unlock zoom, position and angle of the radar manually after calling this).
]]
function natives.HUD.SET_MINIMAP_GOLF_COURSE(--[[int]] hole) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_MINIMAP_GOLF_COURSE' due to disabled trusted mode")

	assert(type(hole) == "number", "Arg #1 (hole) must be a number.")

	local result = native_call(0x71BDB63DBAF8DA59, hole)
end
natives.hud.set_minimap_golf_course = natives.HUD.SET_MINIMAP_GOLF_COURSE

function natives.HUD.SET_MINIMAP_GOLF_COURSE_OFF() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_MINIMAP_GOLF_COURSE_OFF' due to disabled trusted mode")

	local result = native_call(0x35EDD5B2E3FF01C0)
end
natives.hud.set_minimap_golf_course_off = natives.HUD.SET_MINIMAP_GOLF_COURSE_OFF

--[[
Locks the minimap to the specified angle in integer degrees.

angle: The angle in whole degrees. If less than 0 or greater than 360, unlocks the angle.
]]
function natives.HUD.LOCK_MINIMAP_ANGLE(--[[int]] angle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.LOCK_MINIMAP_ANGLE' due to disabled trusted mode")

	assert(type(angle) == "number", "Arg #1 (angle) must be a number.")

	local result = native_call(0x299FAEBB108AE05B, angle)
end
natives.hud.lock_minimap_angle = natives.HUD.LOCK_MINIMAP_ANGLE

function natives.HUD.UNLOCK_MINIMAP_ANGLE() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.UNLOCK_MINIMAP_ANGLE' due to disabled trusted mode")

	local result = native_call(0x8183455E16C42E3A)
end
natives.hud.unlock_minimap_angle = natives.HUD.UNLOCK_MINIMAP_ANGLE

--[[
Locks the minimap to the specified world position.
]]
function natives.HUD.LOCK_MINIMAP_POSITION(--[[float]] x, --[[float]] y) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.LOCK_MINIMAP_POSITION' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")

	local result = native_call(0x1279E861A329E73F, x, y)
end
natives.hud.lock_minimap_position = natives.HUD.LOCK_MINIMAP_POSITION

function natives.HUD.UNLOCK_MINIMAP_POSITION() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.UNLOCK_MINIMAP_POSITION' due to disabled trusted mode")

	local result = native_call(0x3E93E06DB8EF1F30)
end
natives.hud.unlock_minimap_position = natives.HUD.UNLOCK_MINIMAP_POSITION

--[[
Argument must be 0.0f or above 38.0f, or it will be ignored.
]]
function natives.HUD.SET_FAKE_MINIMAP_MAX_ALTIMETER_HEIGHT(--[[float]] altitude, --[[BOOL]] p1, --[[Any]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_FAKE_MINIMAP_MAX_ALTIMETER_HEIGHT' due to disabled trusted mode")

	assert(type(altitude) == "number", "Arg #1 (altitude) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0xD201F3FF917A506D, altitude, p1, p2)
end
natives.hud.set_fake_minimap_max_altimeter_height = natives.HUD.SET_FAKE_MINIMAP_MAX_ALTIMETER_HEIGHT

function natives.HUD.SET_HEALTH_HUD_DISPLAY_VALUES(--[[int]] health, --[[int]] capacity, --[[BOOL]] wasAdded) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_HEALTH_HUD_DISPLAY_VALUES' due to disabled trusted mode")

	assert(type(health) == "number", "Arg #1 (health) must be a number.")
	assert(type(capacity) == "number", "Arg #2 (capacity) must be a number.")
	assert(type(wasAdded) == "boolean", "Arg #3 (wasAdded) must be a boolean.")

	local result = native_call(0x3F5CC444DCAAA8F2, health, capacity, wasAdded)
end
natives.hud.set_health_hud_display_values = natives.HUD.SET_HEALTH_HUD_DISPLAY_VALUES

function natives.HUD.SET_MAX_HEALTH_HUD_DISPLAY(--[[int]] maximumValue) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_MAX_HEALTH_HUD_DISPLAY' due to disabled trusted mode")

	assert(type(maximumValue) == "number", "Arg #1 (maximumValue) must be a number.")

	local result = native_call(0x975D66A0BC17064C, maximumValue)
end
natives.hud.set_max_health_hud_display = natives.HUD.SET_MAX_HEALTH_HUD_DISPLAY

function natives.HUD.SET_MAX_ARMOUR_HUD_DISPLAY(--[[int]] maximumValue) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_MAX_ARMOUR_HUD_DISPLAY' due to disabled trusted mode")

	assert(type(maximumValue) == "number", "Arg #1 (maximumValue) must be a number.")

	local result = native_call(0x06A320535F5F0248, maximumValue)
end
natives.hud.set_max_armour_hud_display = natives.HUD.SET_MAX_ARMOUR_HUD_DISPLAY

--[[
Toggles the big minimap state like in GTA:Online.
]]
function natives.HUD.SET_BIGMAP_ACTIVE(--[[BOOL]] toggleBigMap, --[[BOOL]] showFullMap) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_BIGMAP_ACTIVE' due to disabled trusted mode")

	assert(type(toggleBigMap) == "boolean", "Arg #1 (toggleBigMap) must be a boolean.")
	assert(type(showFullMap) == "boolean", "Arg #2 (showFullMap) must be a boolean.")

	local result = native_call(0x231C8F89D0539D8F, toggleBigMap, showFullMap)
end
natives.hud.set_bigmap_active = natives.HUD.SET_BIGMAP_ACTIVE

--[[
Full list of components below

HUD = 0;
HUD_WANTED_STARS = 1;
HUD_WEAPON_ICON = 2;
HUD_CASH = 3;
HUD_MP_CASH = 4;
HUD_MP_MESSAGE = 5;
HUD_VEHICLE_NAME = 6;
HUD_AREA_NAME = 7;
HUD_VEHICLE_CLASS = 8;
HUD_STREET_NAME = 9;
HUD_HELP_TEXT = 10;
HUD_FLOATING_HELP_TEXT_1 = 11;
HUD_FLOATING_HELP_TEXT_2 = 12;
HUD_CASH_CHANGE = 13;
HUD_RETICLE = 14;
HUD_SUBTITLE_TEXT = 15;
HUD_RADIO_STATIONS = 16;
HUD_SAVING_GAME = 17;
HUD_GAME_STREAM = 18;
HUD_WEAPON_WHEEL = 19;
HUD_WEAPON_WHEEL_STATS = 20;
MAX_HUD_COMPONENTS = 21;
MAX_HUD_WEAPONS = 22;
MAX_SCRIPTED_HUD_COMPONENTS = 141;
]]
function natives.HUD.IS_HUD_COMPONENT_ACTIVE(--[[int]] id) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.IS_HUD_COMPONENT_ACTIVE' due to disabled trusted mode")

	assert(type(id) == "number", "Arg #1 (id) must be a number.")

	local result = native_call(0xBC4C9EA5391ECC0D, id)
	return result:__tointeger() ~= 0
end
natives.hud.is_hud_component_active = natives.HUD.IS_HUD_COMPONENT_ACTIVE

function natives.HUD.IS_SCRIPTED_HUD_COMPONENT_ACTIVE(--[[int]] id) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.IS_SCRIPTED_HUD_COMPONENT_ACTIVE' due to disabled trusted mode")

	assert(type(id) == "number", "Arg #1 (id) must be a number.")

	local result = native_call(0xDD100EB17A94FF65, id)
	return result:__tointeger() ~= 0
end
natives.hud.is_scripted_hud_component_active = natives.HUD.IS_SCRIPTED_HUD_COMPONENT_ACTIVE

function natives.HUD.HIDE_SCRIPTED_HUD_COMPONENT_THIS_FRAME(--[[int]] id) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.HIDE_SCRIPTED_HUD_COMPONENT_THIS_FRAME' due to disabled trusted mode")

	assert(type(id) == "number", "Arg #1 (id) must be a number.")

	local result = native_call(0xE374C498D8BADC14, id)
end
natives.hud.hide_scripted_hud_component_this_frame = natives.HUD.HIDE_SCRIPTED_HUD_COMPONENT_THIS_FRAME

function natives.HUD.SHOW_SCRIPTED_HUD_COMPONENT_THIS_FRAME(--[[int]] id) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SHOW_SCRIPTED_HUD_COMPONENT_THIS_FRAME' due to disabled trusted mode")

	assert(type(id) == "number", "Arg #1 (id) must be a number.")

	local result = native_call(0x4F38DCA127DAAEA2, id)
end
natives.hud.show_scripted_hud_component_this_frame = natives.HUD.SHOW_SCRIPTED_HUD_COMPONENT_THIS_FRAME

function natives.HUD.IS_SCRIPTED_HUD_COMPONENT_HIDDEN_THIS_FRAME(--[[int]] id) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.IS_SCRIPTED_HUD_COMPONENT_HIDDEN_THIS_FRAME' due to disabled trusted mode")

	assert(type(id) == "number", "Arg #1 (id) must be a number.")

	local result = native_call(0x09C0403ED9A751C2, id)
	return result:__tointeger() ~= 0
end
natives.hud.is_scripted_hud_component_hidden_this_frame = natives.HUD.IS_SCRIPTED_HUD_COMPONENT_HIDDEN_THIS_FRAME

--[[
This function hides various HUD (Heads-up Display) components.
Listed below are the integers and the corresponding HUD component.
- 1 : WANTED_STARS
- 2 : WEAPON_ICON
- 3 : CASH
- 4 : MP_CASH
- 5 : MP_MESSAGE
- 6 : VEHICLE_NAME
- 7 : AREA_NAME
- 8 : VEHICLE_CLASS
- 9 : STREET_NAME
- 10 : HELP_TEXT
- 11 : FLOATING_HELP_TEXT_1
- 12 : FLOATING_HELP_TEXT_2
- 13 : CASH_CHANGE
- 14 : RETICLE
- 15 : SUBTITLE_TEXT
- 16 : RADIO_STATIONS
- 17 : SAVING_GAME
- 18 : GAME_STREAM
- 19 : WEAPON_WHEEL
- 20 : WEAPON_WHEEL_STATS
- 21 : HUD_COMPONENTS
- 22 : HUD_WEAPONS

These integers also work for the `SHOW_HUD_COMPONENT_THIS_FRAME` native, but instead shows the HUD Component.
]]
function natives.HUD.HIDE_HUD_COMPONENT_THIS_FRAME(--[[int]] id) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.HIDE_HUD_COMPONENT_THIS_FRAME' due to disabled trusted mode")

	assert(type(id) == "number", "Arg #1 (id) must be a number.")

	local result = native_call(0x6806C51AD12B83B8, id)
end
natives.hud.hide_hud_component_this_frame = natives.HUD.HIDE_HUD_COMPONENT_THIS_FRAME

--[[
This function hides various HUD (Heads-up Display) components.
Listed below are the integers and the corresponding HUD component.
- 1 : WANTED_STARS
- 2 : WEAPON_ICON
- 3 : CASH
- 4 : MP_CASH
- 5 : MP_MESSAGE
- 6 : VEHICLE_NAME
- 7 : AREA_NAME
- 8 : VEHICLE_CLASS
- 9 : STREET_NAME
- 10 : HELP_TEXT
- 11 : FLOATING_HELP_TEXT_1
- 12 : FLOATING_HELP_TEXT_2
- 13 : CASH_CHANGE
- 14 : RETICLE
- 15 : SUBTITLE_TEXT
- 16 : RADIO_STATIONS
- 17 : SAVING_GAME
- 18 : GAME_STREAM
- 19 : WEAPON_WHEEL
- 20 : WEAPON_WHEEL_STATS
- 21 : HUD_COMPONENTS
- 22 : HUD_WEAPONS

These integers also work for the `HIDE_HUD_COMPONENT_THIS_FRAME` native, but instead hides the HUD Component.
]]
function natives.HUD.SHOW_HUD_COMPONENT_THIS_FRAME(--[[int]] id) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SHOW_HUD_COMPONENT_THIS_FRAME' due to disabled trusted mode")

	assert(type(id) == "number", "Arg #1 (id) must be a number.")

	local result = native_call(0x0B4DF1FA60C0E664, id)
end
natives.hud.show_hud_component_this_frame = natives.HUD.SHOW_HUD_COMPONENT_THIS_FRAME

--[[
Hides area and vehicle name HUD components for one frame.
]]
function natives.HUD.HIDE_STREET_AND_CAR_NAMES_THIS_FRAME() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.HIDE_STREET_AND_CAR_NAMES_THIS_FRAME' due to disabled trusted mode")

	local result = native_call(0xA4DEDE28B1814289)
end
natives.hud.hide_street_and_car_names_this_frame = natives.HUD.HIDE_STREET_AND_CAR_NAMES_THIS_FRAME

function natives.HUD.RESET_RETICULE_VALUES() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.RESET_RETICULE_VALUES' due to disabled trusted mode")

	local result = native_call(0x12782CE0A636E9F0)
end
natives.hud.reset_reticule_values = natives.HUD.RESET_RETICULE_VALUES

function natives.HUD.RESET_HUD_COMPONENT_VALUES(--[[int]] id) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.RESET_HUD_COMPONENT_VALUES' due to disabled trusted mode")

	assert(type(id) == "number", "Arg #1 (id) must be a number.")

	local result = native_call(0x450930E616475D0D, id)
end
natives.hud.reset_hud_component_values = natives.HUD.RESET_HUD_COMPONENT_VALUES

function natives.HUD.SET_HUD_COMPONENT_POSITION(--[[int]] id, --[[float]] x, --[[float]] y) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_HUD_COMPONENT_POSITION' due to disabled trusted mode")

	assert(type(id) == "number", "Arg #1 (id) must be a number.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")

	local result = native_call(0xAABB1F56E2A17CED, id, x, y)
end
natives.hud.set_hud_component_position = natives.HUD.SET_HUD_COMPONENT_POSITION

function natives.HUD.GET_HUD_COMPONENT_POSITION(--[[int]] id) -- Returns Vector3
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.GET_HUD_COMPONENT_POSITION' due to disabled trusted mode")

	assert(type(id) == "number", "Arg #1 (id) must be a number.")

	local result = native_call(0x223CA69A8C4417FD, id)
	return result:__tov3()
end
natives.hud.get_hud_component_position = natives.HUD.GET_HUD_COMPONENT_POSITION

--[[
This native does absolutely nothing, just a nullsub
]]
function natives.HUD.CLEAR_REMINDER_MESSAGE() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.CLEAR_REMINDER_MESSAGE' due to disabled trusted mode")

	local result = native_call(0xB57D8DD645CFA2CF)
end
natives.hud.clear_reminder_message = natives.HUD.CLEAR_REMINDER_MESSAGE

--[[
World to relative screen coords, this world to screen will keep the text on screen. Was named _GET_SCREEN_COORD_FROM_WORLD_COORD, but this conflicts with 0x34E82F05DF2974F5. As that hash actually matches GET_SCREEN_COORD_FROM_WORLD_COORD that one supercedes and this one was renamed to _GET_2D_COORD_FROM_3D_COORD
]]
function natives.HUD.GET_HUD_SCREEN_POSITION_FROM_WORLD_POSITION(--[[float]] worldX, --[[float]] worldY, --[[float]] worldZ, --[[float*]] screenX, --[[float*]] screenY) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.GET_HUD_SCREEN_POSITION_FROM_WORLD_POSITION' due to disabled trusted mode")

	assert(type(worldX) == "number", "Arg #1 (worldX) must be a number.")
	assert(type(worldY) == "number", "Arg #2 (worldY) must be a number.")
	assert(type(worldZ) == "number", "Arg #3 (worldZ) must be a number.")
	assert(type(screenX) == "userdata", "Arg #4 (screenX) must be a userdata.")
	assert(type(screenY) == "userdata", "Arg #5 (screenY) must be a userdata.")

	local result = native_call(0xF9904D11F1ACBEC3, worldX, worldY, worldZ, screenX, screenY)
	return result:__tointeger() ~= 0
end
natives.hud.get_hud_screen_position_from_world_position = natives.HUD.GET_HUD_SCREEN_POSITION_FROM_WORLD_POSITION

--[[
Shows a menu for reporting UGC content.
]]
function natives.HUD.OPEN_REPORTUGC_MENU() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.OPEN_REPORTUGC_MENU' due to disabled trusted mode")

	local result = native_call(0x523A590C1A3CC0D3)
end
natives.hud.open_reportugc_menu = natives.HUD.OPEN_REPORTUGC_MENU

function natives.HUD.FORCE_CLOSE_REPORTUGC_MENU() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.FORCE_CLOSE_REPORTUGC_MENU' due to disabled trusted mode")

	local result = native_call(0xEE4C0E6DBC6F2C6F)
end
natives.hud.force_close_reportugc_menu = natives.HUD.FORCE_CLOSE_REPORTUGC_MENU

function natives.HUD.IS_REPORTUGC_MENU_OPEN() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.IS_REPORTUGC_MENU_OPEN' due to disabled trusted mode")

	local result = native_call(0x9135584D09A3437E)
	return result:__tointeger() ~= 0
end
natives.hud.is_reportugc_menu_open = natives.HUD.IS_REPORTUGC_MENU_OPEN

function natives.HUD.IS_FLOATING_HELP_TEXT_ON_SCREEN(--[[int]] hudIndex) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.IS_FLOATING_HELP_TEXT_ON_SCREEN' due to disabled trusted mode")

	assert(type(hudIndex) == "number", "Arg #1 (hudIndex) must be a number.")

	local result = native_call(0x2432784ACA090DA4, hudIndex)
	return result:__tointeger() ~= 0
end
natives.hud.is_floating_help_text_on_screen = natives.HUD.IS_FLOATING_HELP_TEXT_ON_SCREEN

function natives.HUD.SET_FLOATING_HELP_TEXT_SCREEN_POSITION(--[[int]] hudIndex, --[[float]] x, --[[float]] y) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_FLOATING_HELP_TEXT_SCREEN_POSITION' due to disabled trusted mode")

	assert(type(hudIndex) == "number", "Arg #1 (hudIndex) must be a number.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")

	local result = native_call(0x7679CC1BCEBE3D4C, hudIndex, x, y)
end
natives.hud.set_floating_help_text_screen_position = natives.HUD.SET_FLOATING_HELP_TEXT_SCREEN_POSITION

function natives.HUD.SET_FLOATING_HELP_TEXT_WORLD_POSITION(--[[int]] hudIndex, --[[float]] x, --[[float]] y, --[[float]] z) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_FLOATING_HELP_TEXT_WORLD_POSITION' due to disabled trusted mode")

	assert(type(hudIndex) == "number", "Arg #1 (hudIndex) must be a number.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")

	local result = native_call(0x784BA7E0ECEB4178, hudIndex, x, y, z)
end
natives.hud.set_floating_help_text_world_position = natives.HUD.SET_FLOATING_HELP_TEXT_WORLD_POSITION

function natives.HUD.SET_FLOATING_HELP_TEXT_TO_ENTITY(--[[int]] hudIndex, --[[Entity]] entity, --[[float]] offsetX, --[[float]] offsetY) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_FLOATING_HELP_TEXT_TO_ENTITY' due to disabled trusted mode")

	assert(type(hudIndex) == "number", "Arg #1 (hudIndex) must be a number.")
	assert(type(entity) == "number", "Arg #2 (entity) must be a number.")
	assert(type(offsetX) == "number", "Arg #3 (offsetX) must be a number.")
	assert(type(offsetY) == "number", "Arg #4 (offsetY) must be a number.")

	local result = native_call(0xB094BC1DB4018240, hudIndex, entity, offsetX, offsetY)
end
natives.hud.set_floating_help_text_to_entity = natives.HUD.SET_FLOATING_HELP_TEXT_TO_ENTITY

function natives.HUD.SET_FLOATING_HELP_TEXT_STYLE(--[[int]] hudIndex, --[[int]] p1, --[[int]] p2, --[[int]] p3, --[[int]] p4, --[[int]] p5) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_FLOATING_HELP_TEXT_STYLE' due to disabled trusted mode")

	assert(type(hudIndex) == "number", "Arg #1 (hudIndex) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")

	local result = native_call(0x788E7FD431BD67F1, hudIndex, p1, p2, p3, p4, p5)
end
natives.hud.set_floating_help_text_style = natives.HUD.SET_FLOATING_HELP_TEXT_STYLE

function natives.HUD.CLEAR_FLOATING_HELP(--[[int]] hudIndex, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.CLEAR_FLOATING_HELP' due to disabled trusted mode")

	assert(type(hudIndex) == "number", "Arg #1 (hudIndex) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0x50085246ABD3FEFA, hudIndex, p1)
end
natives.hud.clear_floating_help = natives.HUD.CLEAR_FLOATING_HELP

--[[
clanFlag: takes a number 0-5
]]
function natives.HUD.CREATE_MP_GAMER_TAG_WITH_CREW_COLOR(--[[Player]] player, --[[const char*]] username, --[[BOOL]] pointedClanTag, --[[BOOL]] isRockstarClan, --[[const char*]] clanTag, --[[int]] clanFlag, --[[int]] r, --[[int]] g, --[[int]] b) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.CREATE_MP_GAMER_TAG_WITH_CREW_COLOR' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(username) == "string", "Arg #2 (username) must be a string.")
	assert(type(pointedClanTag) == "boolean", "Arg #3 (pointedClanTag) must be a boolean.")
	assert(type(isRockstarClan) == "boolean", "Arg #4 (isRockstarClan) must be a boolean.")
	assert(type(clanTag) == "string", "Arg #5 (clanTag) must be a string.")
	assert(type(clanFlag) == "number", "Arg #6 (clanFlag) must be a number.")
	assert(type(r) == "number", "Arg #7 (r) must be a number.")
	assert(type(g) == "number", "Arg #8 (g) must be a number.")
	assert(type(b) == "number", "Arg #9 (b) must be a number.")

	local result = native_call(0x6DD05E9D83EFA4C9, player, username, pointedClanTag, isRockstarClan, clanTag, clanFlag, r, g, b)
end
natives.hud.create_mp_gamer_tag_with_crew_color = natives.HUD.CREATE_MP_GAMER_TAG_WITH_CREW_COLOR

function natives.HUD.IS_MP_GAMER_TAG_MOVIE_ACTIVE() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.IS_MP_GAMER_TAG_MOVIE_ACTIVE' due to disabled trusted mode")

	local result = native_call(0x6E0EB3EB47C8D7AA)
	return result:__tointeger() ~= 0
end
natives.hud.is_mp_gamer_tag_movie_active = natives.HUD.IS_MP_GAMER_TAG_MOVIE_ACTIVE

--[[
clanFlag: takes a number 0-5
]]
function natives.HUD.CREATE_FAKE_MP_GAMER_TAG(--[[Ped]] ped, --[[const char*]] username, --[[BOOL]] pointedClanTag, --[[BOOL]] isRockstarClan, --[[const char*]] clanTag, --[[int]] clanFlag) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.CREATE_FAKE_MP_GAMER_TAG' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(username) == "string", "Arg #2 (username) must be a string.")
	assert(type(pointedClanTag) == "boolean", "Arg #3 (pointedClanTag) must be a boolean.")
	assert(type(isRockstarClan) == "boolean", "Arg #4 (isRockstarClan) must be a boolean.")
	assert(type(clanTag) == "string", "Arg #5 (clanTag) must be a string.")
	assert(type(clanFlag) == "number", "Arg #6 (clanFlag) must be a number.")

	local result = native_call(0xBFEFE3321A3F5015, ped, username, pointedClanTag, isRockstarClan, clanTag, clanFlag)
	return result:__tointeger()
end
natives.hud.create_fake_mp_gamer_tag = natives.HUD.CREATE_FAKE_MP_GAMER_TAG

function natives.HUD.REMOVE_MP_GAMER_TAG(--[[int]] gamerTagId) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.REMOVE_MP_GAMER_TAG' due to disabled trusted mode")

	assert(type(gamerTagId) == "number", "Arg #1 (gamerTagId) must be a number.")

	local result = native_call(0x31698AA80E0223F8, gamerTagId)
end
natives.hud.remove_mp_gamer_tag = natives.HUD.REMOVE_MP_GAMER_TAG

function natives.HUD.IS_MP_GAMER_TAG_ACTIVE(--[[int]] gamerTagId) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.IS_MP_GAMER_TAG_ACTIVE' due to disabled trusted mode")

	assert(type(gamerTagId) == "number", "Arg #1 (gamerTagId) must be a number.")

	local result = native_call(0x4E929E7A5796FD26, gamerTagId)
	return result:__tointeger() ~= 0
end
natives.hud.is_mp_gamer_tag_active = natives.HUD.IS_MP_GAMER_TAG_ACTIVE

function natives.HUD.IS_MP_GAMER_TAG_FREE(--[[int]] gamerTagId) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.IS_MP_GAMER_TAG_FREE' due to disabled trusted mode")

	assert(type(gamerTagId) == "number", "Arg #1 (gamerTagId) must be a number.")

	local result = native_call(0x595B5178E412E199, gamerTagId)
	return result:__tointeger() ~= 0
end
natives.hud.is_mp_gamer_tag_free = natives.HUD.IS_MP_GAMER_TAG_FREE

--[[
enum eMpGamerTagComponent
{
	MP_TAG_GAMER_NAME,
	MP_TAG_CREW_TAG,
	MP_TAG_HEALTH_ARMOUR,
	MP_TAG_BIG_TEXT,
	MP_TAG_AUDIO_ICON,
	MP_TAG_USING_MENU,
	MP_TAG_PASSIVE_MODE,
	MP_TAG_WANTED_STARS,
	MP_TAG_DRIVER,
	MP_TAG_CO_DRIVER,
	MP_TAG_TAGGED,
	MP_TAG_GAMER_NAME_NEARBY,
	MP_TAG_ARROW,
	MP_TAG_PACKAGES,
	MP_TAG_INV_IF_PED_FOLLOWING,
	MP_TAG_RANK_TEXT,
	MP_TAG_TYPING,
	MP_TAG_BAG_LARGE,
	MP_TAG_ARROW,
	MP_TAG_GANG_CEO,
	MP_TAG_GANG_BIKER,
	MP_TAG_BIKER_ARROW,
	MP_TAG_MC_ROLE_PRESIDENT,
	MP_TAG_MC_ROLE_VICE_PRESIDENT,
	MP_TAG_MC_ROLE_ROAD_CAPTAIN,
	MP_TAG_MC_ROLE_SARGEANT,
	MP_TAG_MC_ROLE_ENFORCER,
	MP_TAG_MC_ROLE_PROSPECT,
	MP_TAG_TRANSMITTER,
	MP_TAG_BOMB
};
]]
function natives.HUD.SET_MP_GAMER_TAG_VISIBILITY(--[[int]] gamerTagId, --[[int]] component, --[[BOOL]] toggle, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_MP_GAMER_TAG_VISIBILITY' due to disabled trusted mode")

	assert(type(gamerTagId) == "number", "Arg #1 (gamerTagId) must be a number.")
	assert(type(component) == "number", "Arg #2 (component) must be a number.")
	assert(type(toggle) == "boolean", "Arg #3 (toggle) must be a boolean.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x63BB75ABEDC1F6A0, gamerTagId, component, toggle, p3)
end
natives.hud.set_mp_gamer_tag_visibility = natives.HUD.SET_MP_GAMER_TAG_VISIBILITY

function natives.HUD.SET_ALL_MP_GAMER_TAGS_VISIBILITY(--[[int]] gamerTagId, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_ALL_MP_GAMER_TAGS_VISIBILITY' due to disabled trusted mode")

	assert(type(gamerTagId) == "number", "Arg #1 (gamerTagId) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xEE76FF7E6A0166B0, gamerTagId, toggle)
end
natives.hud.set_all_mp_gamer_tags_visibility = natives.HUD.SET_ALL_MP_GAMER_TAGS_VISIBILITY

--[[
Displays a bunch of icons above the players name, and level, and their name twice
]]
function natives.HUD.SET_MP_GAMER_TAGS_SHOULD_USE_VEHICLE_HEALTH(--[[int]] gamerTagId, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_MP_GAMER_TAGS_SHOULD_USE_VEHICLE_HEALTH' due to disabled trusted mode")

	assert(type(gamerTagId) == "number", "Arg #1 (gamerTagId) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xA67F9C46D612B6F1, gamerTagId, toggle)
end
natives.hud.set_mp_gamer_tags_should_use_vehicle_health = natives.HUD.SET_MP_GAMER_TAGS_SHOULD_USE_VEHICLE_HEALTH

function natives.HUD.SET_MP_GAMER_TAGS_SHOULD_USE_POINTS_HEALTH(--[[int]] gamerTagId, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_MP_GAMER_TAGS_SHOULD_USE_POINTS_HEALTH' due to disabled trusted mode")

	assert(type(gamerTagId) == "number", "Arg #1 (gamerTagId) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xD29EC58C2F6B5014, gamerTagId, toggle)
end
natives.hud.set_mp_gamer_tags_should_use_points_health = natives.HUD.SET_MP_GAMER_TAGS_SHOULD_USE_POINTS_HEALTH

function natives.HUD.SET_MP_GAMER_TAGS_POINT_HEALTH(--[[int]] gamerTagId, --[[int]] value, --[[int]] maximumValue) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_MP_GAMER_TAGS_POINT_HEALTH' due to disabled trusted mode")

	assert(type(gamerTagId) == "number", "Arg #1 (gamerTagId) must be a number.")
	assert(type(value) == "number", "Arg #2 (value) must be a number.")
	assert(type(maximumValue) == "number", "Arg #3 (maximumValue) must be a number.")

	local result = native_call(0x1563FE35E9928E67, gamerTagId, value, maximumValue)
end
natives.hud.set_mp_gamer_tags_point_health = natives.HUD.SET_MP_GAMER_TAGS_POINT_HEALTH

--[[
Sets a gamer tag's component colour

gamerTagId is obtained using for example CREATE_FAKE_MP_GAMER_TAG
Ranges from 0 to 255. 0 is grey health bar, ~50 yellow, 200 purple.
]]
function natives.HUD.SET_MP_GAMER_TAG_COLOUR(--[[int]] gamerTagId, --[[int]] component, --[[int]] hudColorIndex) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_MP_GAMER_TAG_COLOUR' due to disabled trusted mode")

	assert(type(gamerTagId) == "number", "Arg #1 (gamerTagId) must be a number.")
	assert(type(component) == "number", "Arg #2 (component) must be a number.")
	assert(type(hudColorIndex) == "number", "Arg #3 (hudColorIndex) must be a number.")

	local result = native_call(0x613ED644950626AE, gamerTagId, component, hudColorIndex)
end
natives.hud.set_mp_gamer_tag_colour = natives.HUD.SET_MP_GAMER_TAG_COLOUR

--[[
Ranges from 0 to 255. 0 is grey health bar, ~50 yellow, 200 purple.
Should be enabled as flag (2). Has 0 opacity by default.

- This was _SET_MP_GAMER_TAG_HEALTH_BAR_COLOR,
-> Rockstar use the EU spelling of 'color' so I hashed the same name with COLOUR and it came back as the correct hash, so it has been corrected above.
]]
function natives.HUD.SET_MP_GAMER_TAG_HEALTH_BAR_COLOUR(--[[int]] gamerTagId, --[[int]] hudColorIndex) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_MP_GAMER_TAG_HEALTH_BAR_COLOUR' due to disabled trusted mode")

	assert(type(gamerTagId) == "number", "Arg #1 (gamerTagId) must be a number.")
	assert(type(hudColorIndex) == "number", "Arg #2 (hudColorIndex) must be a number.")

	local result = native_call(0x3158C77A7E888AB4, gamerTagId, hudColorIndex)
end
natives.hud.set_mp_gamer_tag_health_bar_colour = natives.HUD.SET_MP_GAMER_TAG_HEALTH_BAR_COLOUR

--[[
Sets flag's sprite transparency. 0-255.
]]
function natives.HUD.SET_MP_GAMER_TAG_ALPHA(--[[int]] gamerTagId, --[[int]] component, --[[int]] alpha) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_MP_GAMER_TAG_ALPHA' due to disabled trusted mode")

	assert(type(gamerTagId) == "number", "Arg #1 (gamerTagId) must be a number.")
	assert(type(component) == "number", "Arg #2 (component) must be a number.")
	assert(type(alpha) == "number", "Arg #3 (alpha) must be a number.")

	local result = native_call(0xD48FE545CD46F857, gamerTagId, component, alpha)
end
natives.hud.set_mp_gamer_tag_alpha = natives.HUD.SET_MP_GAMER_TAG_ALPHA

--[[
displays wanted star above head
]]
function natives.HUD.SET_MP_GAMER_TAG_WANTED_LEVEL(--[[int]] gamerTagId, --[[int]] wantedlvl) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_MP_GAMER_TAG_WANTED_LEVEL' due to disabled trusted mode")

	assert(type(gamerTagId) == "number", "Arg #1 (gamerTagId) must be a number.")
	assert(type(wantedlvl) == "number", "Arg #2 (wantedlvl) must be a number.")

	local result = native_call(0xCF228E2AA03099C3, gamerTagId, wantedlvl)
end
natives.hud.set_mp_gamer_tag_wanted_level = natives.HUD.SET_MP_GAMER_TAG_WANTED_LEVEL

function natives.HUD.SET_MP_GAMER_TAG_NUM_PACKAGES(--[[int]] gamerTagId, --[[int]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_MP_GAMER_TAG_NUM_PACKAGES' due to disabled trusted mode")

	assert(type(gamerTagId) == "number", "Arg #1 (gamerTagId) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x9C16459B2324B2CF, gamerTagId, p1)
end
natives.hud.set_mp_gamer_tag_num_packages = natives.HUD.SET_MP_GAMER_TAG_NUM_PACKAGES

function natives.HUD.SET_MP_GAMER_TAG_NAME(--[[int]] gamerTagId, --[[const char*]] string) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_MP_GAMER_TAG_NAME' due to disabled trusted mode")

	assert(type(gamerTagId) == "number", "Arg #1 (gamerTagId) must be a number.")
	assert(type(string) == "string", "Arg #2 (string) must be a string.")

	local result = native_call(0xDEA2B8283BAA3944, gamerTagId, string)
end
natives.hud.set_mp_gamer_tag_name = natives.HUD.SET_MP_GAMER_TAG_NAME

function natives.HUD.IS_UPDATING_MP_GAMER_TAG_NAME_AND_CREW_DETAILS(--[[int]] gamerTagId) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.IS_UPDATING_MP_GAMER_TAG_NAME_AND_CREW_DETAILS' due to disabled trusted mode")

	assert(type(gamerTagId) == "number", "Arg #1 (gamerTagId) must be a number.")

	local result = native_call(0xEB709A36958ABE0D, gamerTagId)
	return result:__tointeger() ~= 0
end
natives.hud.is_updating_mp_gamer_tag_name_and_crew_details = natives.HUD.IS_UPDATING_MP_GAMER_TAG_NAME_AND_CREW_DETAILS

function natives.HUD.SET_MP_GAMER_TAG_BIG_TEXT(--[[int]] gamerTagId, --[[const char*]] string) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_MP_GAMER_TAG_BIG_TEXT' due to disabled trusted mode")

	assert(type(gamerTagId) == "number", "Arg #1 (gamerTagId) must be a number.")
	assert(type(string) == "string", "Arg #2 (string) must be a string.")

	local result = native_call(0x7B7723747CCB55B6, gamerTagId, string)
end
natives.hud.set_mp_gamer_tag_big_text = natives.HUD.SET_MP_GAMER_TAG_BIG_TEXT

function natives.HUD.GET_CURRENT_WEBPAGE_ID() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.GET_CURRENT_WEBPAGE_ID' due to disabled trusted mode")

	local result = native_call(0x01A358D9128B7A86)
	return result:__tointeger()
end
natives.hud.get_current_webpage_id = natives.HUD.GET_CURRENT_WEBPAGE_ID

function natives.HUD.GET_CURRENT_WEBSITE_ID() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.GET_CURRENT_WEBSITE_ID' due to disabled trusted mode")

	local result = native_call(0x97D47996FC48CBAD)
	return result:__tointeger()
end
natives.hud.get_current_website_id = natives.HUD.GET_CURRENT_WEBSITE_ID

--[[
Returns the ActionScript flagValue.
ActionScript flags are global flags that scaleforms use
Flags found during testing
0: Returns 1 if the web_browser keyboard is open, otherwise 0
1: Returns 1 if the player has clicked back twice on the opening page, otherwise 0 (web_browser)
2: Returns how many links the player has clicked in the web_browser scaleform, returns 0 when the browser gets closed
9: Returns the current selection on the mobile phone scaleform

There are 20 flags in total.
]]
function natives.HUD.GET_GLOBAL_ACTIONSCRIPT_FLAG(--[[int]] flagIndex) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.GET_GLOBAL_ACTIONSCRIPT_FLAG' due to disabled trusted mode")

	assert(type(flagIndex) == "number", "Arg #1 (flagIndex) must be a number.")

	local result = native_call(0xE3B05614DCE1D014, flagIndex)
	return result:__tointeger()
end
natives.hud.get_global_actionscript_flag = natives.HUD.GET_GLOBAL_ACTIONSCRIPT_FLAG

function natives.HUD.RESET_GLOBAL_ACTIONSCRIPT_FLAG(--[[int]] flagIndex) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.RESET_GLOBAL_ACTIONSCRIPT_FLAG' due to disabled trusted mode")

	assert(type(flagIndex) == "number", "Arg #1 (flagIndex) must be a number.")

	local result = native_call(0xB99C4E4D9499DF29, flagIndex)
end
natives.hud.reset_global_actionscript_flag = natives.HUD.RESET_GLOBAL_ACTIONSCRIPT_FLAG

function natives.HUD.IS_WARNING_MESSAGE_READY_FOR_CONTROL() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.IS_WARNING_MESSAGE_READY_FOR_CONTROL' due to disabled trusted mode")

	local result = native_call(0xAF42195A42C63BBA)
	return result:__tointeger() ~= 0
end
natives.hud.is_warning_message_ready_for_control = natives.HUD.IS_WARNING_MESSAGE_READY_FOR_CONTROL

--[[
You can only use text entries. No custom text.

Example: SET_WARNING_MESSAGE("t20", 3, "adder", false, -1, 0, 0, true);
errorCode: shows an error code at the bottom left if nonzero
]]
function natives.HUD.SET_WARNING_MESSAGE(--[[const char*]] titleMsg, --[[int]] flags, --[[const char*]] promptMsg, --[[BOOL]] p3, --[[int]] p4, --[[const char*]] p5, --[[const char*]] p6, --[[BOOL]] showBackground, --[[int]] errorCode) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_WARNING_MESSAGE' due to disabled trusted mode")

	assert(type(titleMsg) == "string", "Arg #1 (titleMsg) must be a string.")
	assert(type(flags) == "number", "Arg #2 (flags) must be a number.")
	assert(type(promptMsg) == "string", "Arg #3 (promptMsg) must be a string.")
	assert(type(p3) == "boolean", "Arg #4 (p3) must be a boolean.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "string", "Arg #6 (p5) must be a string.")
	assert(type(p6) == "string", "Arg #7 (p6) must be a string.")
	assert(type(showBackground) == "boolean", "Arg #8 (showBackground) must be a boolean.")
	assert(type(errorCode) == "number", "Arg #9 (errorCode) must be a number.")

	local result = native_call(0x7B1776B3B53F8D74, titleMsg, flags, promptMsg, p3, p4, p5, p6, showBackground, errorCode)
end
natives.hud.set_warning_message = natives.HUD.SET_WARNING_MESSAGE

--[[
Shows a warning message on screen with a header.
Note: You can only use text entries. No custom text. You can recreate this easily with scaleforms.
Example: https://i.imgur.com/ITJt8bJ.png
]]
function natives.HUD.SET_WARNING_MESSAGE_WITH_HEADER(--[[const char*]] entryHeader, --[[const char*]] entryLine1, --[[int]] instructionalKey, --[[const char*]] entryLine2, --[[BOOL]] p4, --[[Any]] p5, --[[Any*]] showBackground, --[[Any*]] p7, --[[BOOL]] p8, --[[Any]] p9) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_WARNING_MESSAGE_WITH_HEADER' due to disabled trusted mode")

	assert(type(entryHeader) == "string", "Arg #1 (entryHeader) must be a string.")
	assert(type(entryLine1) == "string", "Arg #2 (entryLine1) must be a string.")
	assert(type(instructionalKey) == "number", "Arg #3 (instructionalKey) must be a number.")
	assert(type(entryLine2) == "string", "Arg #4 (entryLine2) must be a string.")
	assert(type(p4) == "boolean", "Arg #5 (p4) must be a boolean.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")
	assert(type(showBackground) == "userdata", "Arg #7 (showBackground) must be a userdata.")
	assert(type(p7) == "userdata", "Arg #8 (p7) must be a userdata.")
	assert(type(p8) == "boolean", "Arg #9 (p8) must be a boolean.")
	assert(type(p9) == "number", "Arg #10 (p9) must be a number.")

	local result = native_call(0xDC38CC1E35B6A5D7, entryHeader, entryLine1, instructionalKey, entryLine2, p4, p5, showBackground, p7, p8, p9)
end
natives.hud.set_warning_message_with_header = natives.HUD.SET_WARNING_MESSAGE_WITH_HEADER

--[[
You can use this native for custom input, without having to use any scaleform-related natives.
The native must be called on tick.
The entryHeader must be a valid label.
For Single lines use JL_INVITE_N as entryLine1, JL_INVITE_ND for multiple.
Notes:
- additionalIntInfo: replaces first occurrence of ~1~ in provided label with an integer
- additionalTextInfoLine1: replaces first occurrence of ~a~ in provided label, with your custom text
- additionalTextInfoLine2: replaces second occurrence of ~a~ in provided label, with your custom text
- showBackground: shows black background of the warning screen
- errorCode: shows an error code at the bottom left if nonzero
Example of usage:
SET_WARNING_MESSAGE_WITH_HEADER_AND_SUBSTRING_FLAGS("ALERT", "JL_INVITE_ND", 66, "", true, -1, -1, "Testing line 1", "Testing line 2", true, 0);
Screenshot:
https://imgur.com/a/IYA7vJ8
]]
function natives.HUD.SET_WARNING_MESSAGE_WITH_HEADER_AND_SUBSTRING_FLAGS(--[[const char*]] entryHeader, --[[const char*]] entryLine1, --[[int]] instructionalKey, --[[const char*]] entryLine2, --[[BOOL]] p4, --[[Any]] p5, --[[Any]] additionalIntInfo, --[[const char*]] additionalTextInfoLine1, --[[const char*]] additionalTextInfoLine2, --[[BOOL]] showBackground, --[[int]] errorCode) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_WARNING_MESSAGE_WITH_HEADER_AND_SUBSTRING_FLAGS' due to disabled trusted mode")

	assert(type(entryHeader) == "string", "Arg #1 (entryHeader) must be a string.")
	assert(type(entryLine1) == "string", "Arg #2 (entryLine1) must be a string.")
	assert(type(instructionalKey) == "number", "Arg #3 (instructionalKey) must be a number.")
	assert(type(entryLine2) == "string", "Arg #4 (entryLine2) must be a string.")
	assert(type(p4) == "boolean", "Arg #5 (p4) must be a boolean.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")
	assert(type(additionalIntInfo) == "number", "Arg #7 (additionalIntInfo) must be a number.")
	assert(type(additionalTextInfoLine1) == "string", "Arg #8 (additionalTextInfoLine1) must be a string.")
	assert(type(additionalTextInfoLine2) == "string", "Arg #9 (additionalTextInfoLine2) must be a string.")
	assert(type(showBackground) == "boolean", "Arg #10 (showBackground) must be a boolean.")
	assert(type(errorCode) == "number", "Arg #11 (errorCode) must be a number.")

	local result = native_call(0x701919482C74B5AB, entryHeader, entryLine1, instructionalKey, entryLine2, p4, p5, additionalIntInfo, additionalTextInfoLine1, additionalTextInfoLine2, showBackground, errorCode)
end
natives.hud.set_warning_message_with_header_and_substring_flags = natives.HUD.SET_WARNING_MESSAGE_WITH_HEADER_AND_SUBSTRING_FLAGS

function natives.HUD.SET_WARNING_MESSAGE_WITH_HEADER_EXTENDED(--[[const char*]] entryHeader, --[[const char*]] entryLine1, --[[int]] flags, --[[const char*]] entryLine2, --[[BOOL]] p4, --[[Any]] p5, --[[Any*]] p6, --[[Any*]] p7, --[[BOOL]] showBg, --[[Any]] p9, --[[Any]] p10) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_WARNING_MESSAGE_WITH_HEADER_EXTENDED' due to disabled trusted mode")

	assert(type(entryHeader) == "string", "Arg #1 (entryHeader) must be a string.")
	assert(type(entryLine1) == "string", "Arg #2 (entryLine1) must be a string.")
	assert(type(flags) == "number", "Arg #3 (flags) must be a number.")
	assert(type(entryLine2) == "string", "Arg #4 (entryLine2) must be a string.")
	assert(type(p4) == "boolean", "Arg #5 (p4) must be a boolean.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")
	assert(type(p6) == "userdata", "Arg #7 (p6) must be a userdata.")
	assert(type(p7) == "userdata", "Arg #8 (p7) must be a userdata.")
	assert(type(showBg) == "boolean", "Arg #9 (showBg) must be a boolean.")
	assert(type(p9) == "number", "Arg #10 (p9) must be a number.")
	assert(type(p10) == "number", "Arg #11 (p10) must be a number.")

	local result = native_call(0x38B55259C2E078ED, entryHeader, entryLine1, flags, entryLine2, p4, p5, p6, p7, showBg, p9, p10)
end
natives.hud.set_warning_message_with_header_extended = natives.HUD.SET_WARNING_MESSAGE_WITH_HEADER_EXTENDED

--[[
labelTitle: Label of the alert's title.
labelMsg: Label of the alert's message.
p2: This is an enum, check the description for a list.
p3: This is an enum, check the description for a list.
labelMsg2: Label of another message line
p5: usually 0
p6: usually -1
p7: usually 0
p8: unknown label
p9: unknown label
background: Set to anything other than 0 or false (even any string) and it will draw a background. Setting it to 0 or false will draw no background.
errorCode: Error code, shown at the bottom left if set to value other than 0.

instructionalKey enum list:
Buttons = {
      Empty = 0,
      Select = 1, -- (RETURN)
      Ok = 2, -- (RETURN)
      Yes = 4, -- (RETURN)
      Back = 8, -- (ESC)
      Cancel = 16, -- (ESC)
      No = 32, -- (ESC)
      RetrySpace = 64, -- (SPACE)
      Restart = 128, -- (SPACE)
      Skip = 256, -- (SPACE)
      Quit = 512, -- (ESC)
      Adjust = 1024, -- (ARROWS)
      SpaceKey = 2048, -- (SPACE)
      Share = 4096, -- (SPACE)
      SignIn = 8192, -- (SPACE)
      Continue = 16384, -- (RETURN)
      AdjustLeftRight = 32768, -- (SCROLL L/R)
      AdjustUpDown = 65536, -- (SCROLL U/D)
      Overwrite = 131072, -- (SPACE)
      SocialClubSignup = 262144, -- (RETURN)
      Confirm = 524288, -- (RETURN)
      Queue = 1048576, -- (RETURN)
      RetryReturn = 2097152, -- (RETURN)
      BackEsc = 4194304, -- (ESC)
      SocialClub = 8388608, -- (RETURN)
      Spectate = 16777216, -- (SPACE)
      OkEsc = 33554432, -- (ESC)
      CancelTransfer = 67108864, -- (ESC)
      LoadingSpinner = 134217728,
      NoReturnToGTA = 268435456, -- (ESC)
      CancelEsc = 536870912, -- (ESC)
}

Alt = {
      Empty = 0,
      No = 1, -- (SPACE)
      Host = 2, -- (ESC)
      SearchForJob = 4, -- (RETURN)
      ReturnKey = 8, -- (TURN)
      Freemode = 16, -- (ESC)
}

Example: https://i.imgur.com/TvmNF4k.png
]]
function natives.HUD.SET_WARNING_MESSAGE_WITH_HEADER_AND_SUBSTRING_FLAGS_EXTENDED(--[[const char*]] labelTitle, --[[const char*]] labelMessage, --[[int]] p2, --[[int]] p3, --[[const char*]] labelMessage2, --[[BOOL]] p5, --[[int]] p6, --[[int]] p7, --[[const char*]] p8, --[[const char*]] p9, --[[BOOL]] background, --[[int]] errorCode) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_WARNING_MESSAGE_WITH_HEADER_AND_SUBSTRING_FLAGS_EXTENDED' due to disabled trusted mode")

	assert(type(labelTitle) == "string", "Arg #1 (labelTitle) must be a string.")
	assert(type(labelMessage) == "string", "Arg #2 (labelMessage) must be a string.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(labelMessage2) == "string", "Arg #5 (labelMessage2) must be a string.")
	assert(type(p5) == "boolean", "Arg #6 (p5) must be a boolean.")
	assert(type(p6) == "number", "Arg #7 (p6) must be a number.")
	assert(type(p7) == "number", "Arg #8 (p7) must be a number.")
	assert(type(p8) == "string", "Arg #9 (p8) must be a string.")
	assert(type(p9) == "string", "Arg #10 (p9) must be a string.")
	assert(type(background) == "boolean", "Arg #11 (background) must be a boolean.")
	assert(type(errorCode) == "number", "Arg #12 (errorCode) must be a number.")

	local result = native_call(0x15803FEC3B9A872B, labelTitle, labelMessage, p2, p3, labelMessage2, p5, p6, p7, p8, p9, background, errorCode)
end
natives.hud.set_warning_message_with_header_and_substring_flags_extended = natives.HUD.SET_WARNING_MESSAGE_WITH_HEADER_AND_SUBSTRING_FLAGS_EXTENDED

--[[
Has to do with the confirmation overlay (E.g. confirm exit)
]]
function natives.HUD.GET_WARNING_SCREEN_MESSAGE_HASH() -- Returns Hash
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.GET_WARNING_SCREEN_MESSAGE_HASH' due to disabled trusted mode")

	local result = native_call(0x81DF9ABA6C83DFF9)
	return result:__tointeger()
end
natives.hud.get_warning_screen_message_hash = natives.HUD.GET_WARNING_SCREEN_MESSAGE_HASH

--[[
Some sort of list displayed in a warning message. Yet unknown how to prevent repeating.
Param names copied from the corresponding scaleform function "SET_LIST_ROW".
Example: https://i.imgur.com/arKvOYx.png
]]
function natives.HUD.SET_WARNING_MESSAGE_OPTION_ITEMS(--[[int]] index, --[[const char*]] name, --[[int]] cash, --[[int]] rp, --[[int]] lvl, --[[int]] colour) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_WARNING_MESSAGE_OPTION_ITEMS' due to disabled trusted mode")

	assert(type(index) == "number", "Arg #1 (index) must be a number.")
	assert(type(name) == "string", "Arg #2 (name) must be a string.")
	assert(type(cash) == "number", "Arg #3 (cash) must be a number.")
	assert(type(rp) == "number", "Arg #4 (rp) must be a number.")
	assert(type(lvl) == "number", "Arg #5 (lvl) must be a number.")
	assert(type(colour) == "number", "Arg #6 (colour) must be a number.")

	local result = native_call(0x0C5A80A9E096D529, index, name, cash, rp, lvl, colour)
	return result:__tointeger() ~= 0
end
natives.hud.set_warning_message_option_items = natives.HUD.SET_WARNING_MESSAGE_OPTION_ITEMS

function natives.HUD.SET_WARNING_MESSAGE_OPTION_HIGHLIGHT(--[[Any]] p0) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_WARNING_MESSAGE_OPTION_HIGHLIGHT' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xDAF87174BE7454FF, p0)
	return result:__tointeger() ~= 0
end
natives.hud.set_warning_message_option_highlight = natives.HUD.SET_WARNING_MESSAGE_OPTION_HIGHLIGHT

function natives.HUD.REMOVE_WARNING_MESSAGE_OPTION_ITEMS() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.REMOVE_WARNING_MESSAGE_OPTION_ITEMS' due to disabled trusted mode")

	local result = native_call(0x6EF54AB721DC6242)
end
natives.hud.remove_warning_message_option_items = natives.HUD.REMOVE_WARNING_MESSAGE_OPTION_ITEMS

function natives.HUD.IS_WARNING_MESSAGE_ACTIVE() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.IS_WARNING_MESSAGE_ACTIVE' due to disabled trusted mode")

	local result = native_call(0xE18B138FABC53103)
	return result:__tointeger() ~= 0
end
natives.hud.is_warning_message_active = natives.HUD.IS_WARNING_MESSAGE_ACTIVE

function natives.HUD.CLEAR_DYNAMIC_PAUSE_MENU_ERROR_MESSAGE() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.CLEAR_DYNAMIC_PAUSE_MENU_ERROR_MESSAGE' due to disabled trusted mode")

	local result = native_call(0x7792424AA0EAC32E)
end
natives.hud.clear_dynamic_pause_menu_error_message = natives.HUD.CLEAR_DYNAMIC_PAUSE_MENU_ERROR_MESSAGE

--[[
If toggle is true, the map is shown in full screen
If toggle is false, the map is shown in normal mode
]]
function natives.HUD.CUSTOM_MINIMAP_SET_ACTIVE(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.CUSTOM_MINIMAP_SET_ACTIVE' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x5354C5BA2EA868A4, toggle)
end
natives.hud.custom_minimap_set_active = natives.HUD.CUSTOM_MINIMAP_SET_ACTIVE

--[[
Sets the sprite of the next BLIP_GALLERY blip, values used in the native scripts: 143 (ObjectiveBlue), 144 (ObjectiveGreen), 145 (ObjectiveRed), 146 (ObjectiveYellow).
]]
function natives.HUD.CUSTOM_MINIMAP_SET_BLIP_OBJECT(--[[int]] spriteId) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.CUSTOM_MINIMAP_SET_BLIP_OBJECT' due to disabled trusted mode")

	assert(type(spriteId) == "number", "Arg #1 (spriteId) must be a number.")

	local result = native_call(0x1EAE6DD17B7A5EFA, spriteId)
end
natives.hud.custom_minimap_set_blip_object = natives.HUD.CUSTOM_MINIMAP_SET_BLIP_OBJECT

--[[
Add a BLIP_GALLERY at the specific coordinate. Used in fm_maintain_transition_players to display race track points.
]]
function natives.HUD.CUSTOM_MINIMAP_CREATE_BLIP(--[[float]] x, --[[float]] y, --[[float]] z) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.CUSTOM_MINIMAP_CREATE_BLIP' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")

	local result = native_call(0x551DF99658DB6EE8, x, y, z)
	return result:__tointeger()
end
natives.hud.custom_minimap_create_blip = natives.HUD.CUSTOM_MINIMAP_CREATE_BLIP

function natives.HUD.CUSTOM_MINIMAP_CLEAR_BLIPS() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.CUSTOM_MINIMAP_CLEAR_BLIPS' due to disabled trusted mode")

	local result = native_call(0x2708FC083123F9FF)
end
natives.hud.custom_minimap_clear_blips = natives.HUD.CUSTOM_MINIMAP_CLEAR_BLIPS

--[[
Doesn't actually return anything.
]]
function natives.HUD.FORCE_SONAR_BLIPS_THIS_FRAME() -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.FORCE_SONAR_BLIPS_THIS_FRAME' due to disabled trusted mode")

	local result = native_call(0x1121BFA1A1A522A8)
	return result:__tointeger()
end
natives.hud.force_sonar_blips_this_frame = natives.HUD.FORCE_SONAR_BLIPS_THIS_FRAME

function natives.HUD.GET_NORTH_BLID_INDEX() -- Returns Blip
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.GET_NORTH_BLID_INDEX' due to disabled trusted mode")

	local result = native_call(0x3F0CF9CB7E589B88)
	return result:__tointeger()
end
natives.hud.get_north_blid_index = natives.HUD.GET_NORTH_BLID_INDEX

--[[
Toggles whether or not name labels are shown on the expanded minimap next to player blips, like in GTA:O.
Doesn't need to be called every frame.
Preview: https://i.imgur.com/DfqKWfJ.png

Make sure to call SET_BLIP_CATEGORY with index 7 for this to work on the desired blip.
]]
function natives.HUD.DISPLAY_PLAYER_NAME_TAGS_ON_BLIPS(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.DISPLAY_PLAYER_NAME_TAGS_ON_BLIPS' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x82CEDC33687E1F50, toggle)
end
natives.hud.display_player_name_tags_on_blips = natives.HUD.DISPLAY_PLAYER_NAME_TAGS_ON_BLIPS

--[[
This native does absolutely nothing, just a nullsub
]]
function natives.HUD.DRAW_FRONTEND_BACKGROUND_THIS_FRAME() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.DRAW_FRONTEND_BACKGROUND_THIS_FRAME' due to disabled trusted mode")

	local result = native_call(0x211C4EF450086857)
end
natives.hud.draw_frontend_background_this_frame = natives.HUD.DRAW_FRONTEND_BACKGROUND_THIS_FRAME

function natives.HUD.DRAW_HUD_OVER_FADE_THIS_FRAME() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.DRAW_HUD_OVER_FADE_THIS_FRAME' due to disabled trusted mode")

	local result = native_call(0xBF4F34A85CA2970C)
end
natives.hud.draw_hud_over_fade_this_frame = natives.HUD.DRAW_HUD_OVER_FADE_THIS_FRAME

--[[
Does stuff like this:
gyazo.com/7fcb78ea3520e3dbc5b2c0c0f3712617

Example:
int GetHash = GET_HASH_KEY("fe_menu_version_corona_lobby");
ACTIVATE_FRONTEND_MENU(GetHash, 0, -1);

BOOL p1 is a toggle to define the game in pause.
int p2 is unknown but -1 always works, not sure why though.

[30/03/2017] ins1de :

the int p2 is actually a component variable. When the pause menu is visible, it opens the tab related to it.

Example : Function.Call(Hash.ACTIVATE_FRONTEND_MENU,-1171018317, 0, 42);
Result : Opens the "Online" tab without pausing the menu, with -1 it opens the map.Below is a list of all known Frontend Menu Hashes.
- FE_MENU_VERSION_SP_PAUSE
- FE_MENU_VERSION_MP_PAUSE
- FE_MENU_VERSION_CREATOR_PAUSE
- FE_MENU_VERSION_CUTSCENE_PAUSE
- FE_MENU_VERSION_SAVEGAME
- FE_MENU_VERSION_PRE_LOBBY
- FE_MENU_VERSION_LOBBY
- FE_MENU_VERSION_MP_CHARACTER_SELECT
- FE_MENU_VERSION_MP_CHARACTER_CREATION
- FE_MENU_VERSION_EMPTY
- FE_MENU_VERSION_EMPTY_NO_BACKGROUND
- FE_MENU_VERSION_TEXT_SELECTION
- FE_MENU_VERSION_CORONA
- FE_MENU_VERSION_CORONA_LOBBY
- FE_MENU_VERSION_CORONA_JOINED_PLAYERS
- FE_MENU_VERSION_CORONA_INVITE_PLAYERS
- FE_MENU_VERSION_CORONA_INVITE_FRIENDS
- FE_MENU_VERSION_CORONA_INVITE_CREWS
- FE_MENU_VERSION_CORONA_INVITE_MATCHED_PLAYERS
- FE_MENU_VERSION_CORONA_INVITE_LAST_JOB_PLAYERS
- FE_MENU_VERSION_CORONA_RACE
- FE_MENU_VERSION_CORONA_BETTING
- FE_MENU_VERSION_JOINING_SCREEN
- FE_MENU_VERSION_LANDING_MENU
- FE_MENU_VERSION_LANDING_KEYMAPPING_MENU
]]
function natives.HUD.ACTIVATE_FRONTEND_MENU(--[[Hash]] menuhash, --[[BOOL]] togglePause, --[[int]] component) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.ACTIVATE_FRONTEND_MENU' due to disabled trusted mode")

	assert(type(menuhash) == "number", "Arg #1 (menuhash) must be a number.")
	assert(type(togglePause) == "boolean", "Arg #2 (togglePause) must be a boolean.")
	assert(type(component) == "number", "Arg #3 (component) must be a number.")

	local result = native_call(0xEF01D36B9C9D0C7B, menuhash, togglePause, component)
end
natives.hud.activate_frontend_menu = natives.HUD.ACTIVATE_FRONTEND_MENU

--[[
Before using this native click the native above and look at the decription.

Example:
int GetHash = Function.Call<int>(Hash.GET_HASH_KEY, "fe_menu_version_corona_lobby");
Function.Call(Hash.ACTIVATE_FRONTEND_MENU, GetHash, 0, -1);
Function.Call(Hash.RESTART_FRONTEND_MENU(GetHash, -1);

This native refreshes the frontend menu.

p1 = Hash of Menu
p2 = Unknown but always works with -1.
]]
function natives.HUD.RESTART_FRONTEND_MENU(--[[Hash]] menuHash, --[[int]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.RESTART_FRONTEND_MENU' due to disabled trusted mode")

	assert(type(menuHash) == "number", "Arg #1 (menuHash) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x10706DC6AD2D49C0, menuHash, p1)
end
natives.hud.restart_frontend_menu = natives.HUD.RESTART_FRONTEND_MENU

--[[
if (HUD::GET_CURRENT_FRONTEND_MENU_VERSION() == joaat("fe_menu_version_empty_no_background"))
]]
function natives.HUD.GET_CURRENT_FRONTEND_MENU_VERSION() -- Returns Hash
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.GET_CURRENT_FRONTEND_MENU_VERSION' due to disabled trusted mode")

	local result = native_call(0x2309595AD6145265)
	return result:__tointeger()
end
natives.hud.get_current_frontend_menu_version = natives.HUD.GET_CURRENT_FRONTEND_MENU_VERSION

function natives.HUD.SET_PAUSE_MENU_ACTIVE(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_PAUSE_MENU_ACTIVE' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0xDF47FC56C71569CF, toggle)
end
natives.hud.set_pause_menu_active = natives.HUD.SET_PAUSE_MENU_ACTIVE

function natives.HUD.DISABLE_FRONTEND_THIS_FRAME() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.DISABLE_FRONTEND_THIS_FRAME' due to disabled trusted mode")

	local result = native_call(0x6D3465A73092F0E6)
end
natives.hud.disable_frontend_this_frame = natives.HUD.DISABLE_FRONTEND_THIS_FRAME

function natives.HUD.SUPPRESS_FRONTEND_RENDERING_THIS_FRAME() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SUPPRESS_FRONTEND_RENDERING_THIS_FRAME' due to disabled trusted mode")

	local result = native_call(0xBA751764F0821256)
end
natives.hud.suppress_frontend_rendering_this_frame = natives.HUD.SUPPRESS_FRONTEND_RENDERING_THIS_FRAME

--[[
Allows opening the pause menu this frame, when the player is dead.
]]
function natives.HUD.ALLOW_PAUSE_WHEN_NOT_IN_STATE_OF_PLAY_THIS_FRAME() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.ALLOW_PAUSE_WHEN_NOT_IN_STATE_OF_PLAY_THIS_FRAME' due to disabled trusted mode")

	local result = native_call(0xCC3FDDED67BCFC63)
end
natives.hud.allow_pause_when_not_in_state_of_play_this_frame = natives.HUD.ALLOW_PAUSE_WHEN_NOT_IN_STATE_OF_PLAY_THIS_FRAME

function natives.HUD.SET_FRONTEND_ACTIVE(--[[BOOL]] active) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_FRONTEND_ACTIVE' due to disabled trusted mode")

	assert(type(active) == "boolean", "Arg #1 (active) must be a boolean.")

	local result = native_call(0x745711A75AB09277, active)
end
natives.hud.set_frontend_active = natives.HUD.SET_FRONTEND_ACTIVE

function natives.HUD.IS_PAUSE_MENU_ACTIVE() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.IS_PAUSE_MENU_ACTIVE' due to disabled trusted mode")

	local result = native_call(0xB0034A223497FFCB)
	return result:__tointeger() ~= 0
end
natives.hud.is_pause_menu_active = natives.HUD.IS_PAUSE_MENU_ACTIVE

function natives.HUD.IS_STORE_PENDING_NETWORK_SHUTDOWN_TO_OPEN() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.IS_STORE_PENDING_NETWORK_SHUTDOWN_TO_OPEN' due to disabled trusted mode")

	local result = native_call(0x2F057596F2BD0061)
	return result:__tointeger() ~= 0
end
natives.hud.is_store_pending_network_shutdown_to_open = natives.HUD.IS_STORE_PENDING_NETWORK_SHUTDOWN_TO_OPEN

--[[
Returns:

0
5
10
15
20
25
30
35

]]
function natives.HUD.GET_PAUSE_MENU_STATE() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.GET_PAUSE_MENU_STATE' due to disabled trusted mode")

	local result = native_call(0x272ACD84970869C5)
	return result:__tointeger()
end
natives.hud.get_pause_menu_state = natives.HUD.GET_PAUSE_MENU_STATE

function natives.HUD.GET_PAUSE_MENU_POSITION() -- Returns Vector3
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.GET_PAUSE_MENU_POSITION' due to disabled trusted mode")

	local result = native_call(0x5BFF36D6ED83E0AE)
	return result:__tov3()
end
natives.hud.get_pause_menu_position = natives.HUD.GET_PAUSE_MENU_POSITION

function natives.HUD.IS_PAUSE_MENU_RESTARTING() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.IS_PAUSE_MENU_RESTARTING' due to disabled trusted mode")

	local result = native_call(0x1C491717107431C7)
	return result:__tointeger() ~= 0
end
natives.hud.is_pause_menu_restarting = natives.HUD.IS_PAUSE_MENU_RESTARTING

--[[
Not present in retail version of the game, actual definiton seems to be
_LOG_DEBUG_INFO(const char* category, const char* debugText);
]]
function natives.HUD.FORCE_SCRIPTED_GFX_WHEN_FRONTEND_ACTIVE(--[[const char*]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.FORCE_SCRIPTED_GFX_WHEN_FRONTEND_ACTIVE' due to disabled trusted mode")

	assert(type(p0) == "string", "Arg #1 (p0) must be a string.")

	local result = native_call(0x2162C446DFDF38FD, p0)
end
natives.hud.force_scripted_gfx_when_frontend_active = natives.HUD.FORCE_SCRIPTED_GFX_WHEN_FRONTEND_ACTIVE

function natives.HUD.PAUSE_MENUCEPTION_GO_DEEPER(--[[int]] page) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.PAUSE_MENUCEPTION_GO_DEEPER' due to disabled trusted mode")

	assert(type(page) == "number", "Arg #1 (page) must be a number.")

	local result = native_call(0x77F16B447824DA6C, page)
end
natives.hud.pause_menuception_go_deeper = natives.HUD.PAUSE_MENUCEPTION_GO_DEEPER

function natives.HUD.PAUSE_MENUCEPTION_THE_KICK() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.PAUSE_MENUCEPTION_THE_KICK' due to disabled trusted mode")

	local result = native_call(0xCDCA26E80FAECB8F)
end
natives.hud.pause_menuception_the_kick = natives.HUD.PAUSE_MENUCEPTION_THE_KICK

function natives.HUD.PAUSE_TOGGLE_FULLSCREEN_MAP(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.PAUSE_TOGGLE_FULLSCREEN_MAP' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x2DE6C5E2E996F178, p0)
end
natives.hud.pause_toggle_fullscreen_map = natives.HUD.PAUSE_TOGGLE_FULLSCREEN_MAP

--[[
Activates the specified frontend menu context.
pausemenu.xml defines some specific menu options using 'context'. Context is basically a 'condition'. 
The `*ALL*` part of the context means that whatever is being defined, will be active when any or all of those conditions after `*ALL*` are met.
The `*NONE*` part of the context section means that whatever is being defined, will NOT be active if any or all of the conditions after `*NONE*` are met.
This basically allows you to hide certain menu sections, or things like instructional buttons.
]]
function natives.HUD.PAUSE_MENU_ACTIVATE_CONTEXT(--[[Hash]] contextHash) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.PAUSE_MENU_ACTIVATE_CONTEXT' due to disabled trusted mode")

	assert(type(contextHash) == "number", "Arg #1 (contextHash) must be a number.")

	local result = native_call(0xDD564BDD0472C936, contextHash)
end
natives.hud.pause_menu_activate_context = natives.HUD.PAUSE_MENU_ACTIVATE_CONTEXT

function natives.HUD.PAUSE_MENU_DEACTIVATE_CONTEXT(--[[Hash]] contextHash) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.PAUSE_MENU_DEACTIVATE_CONTEXT' due to disabled trusted mode")

	assert(type(contextHash) == "number", "Arg #1 (contextHash) must be a number.")

	local result = native_call(0x444D8CF241EC25C5, contextHash)
end
natives.hud.pause_menu_deactivate_context = natives.HUD.PAUSE_MENU_DEACTIVATE_CONTEXT

function natives.HUD.PAUSE_MENU_IS_CONTEXT_ACTIVE(--[[Hash]] contextHash) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.PAUSE_MENU_IS_CONTEXT_ACTIVE' due to disabled trusted mode")

	assert(type(contextHash) == "number", "Arg #1 (contextHash) must be a number.")

	local result = native_call(0x84698AB38D0C6636, contextHash)
	return result:__tointeger() ~= 0
end
natives.hud.pause_menu_is_context_active = natives.HUD.PAUSE_MENU_IS_CONTEXT_ACTIVE

function natives.HUD.PAUSE_MENU_IS_CONTEXT_MENU_ACTIVE() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.PAUSE_MENU_IS_CONTEXT_MENU_ACTIVE' due to disabled trusted mode")

	local result = native_call(0x2A25ADC48F87841F)
	return result:__tointeger() ~= 0
end
natives.hud.pause_menu_is_context_menu_active = natives.HUD.PAUSE_MENU_IS_CONTEXT_MENU_ACTIVE

function natives.HUD.PAUSE_MENU_GET_HAIR_COLOUR_INDEX() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.PAUSE_MENU_GET_HAIR_COLOUR_INDEX' due to disabled trusted mode")

	local result = native_call(0xDE03620F8703A9DF)
	return result:__tointeger()
end
natives.hud.pause_menu_get_hair_colour_index = natives.HUD.PAUSE_MENU_GET_HAIR_COLOUR_INDEX

function natives.HUD.PAUSE_MENU_GET_MOUSE_HOVER_INDEX() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.PAUSE_MENU_GET_MOUSE_HOVER_INDEX' due to disabled trusted mode")

	local result = native_call(0x359AF31A4B52F5ED)
	return result:__tointeger()
end
natives.hud.pause_menu_get_mouse_hover_index = natives.HUD.PAUSE_MENU_GET_MOUSE_HOVER_INDEX

function natives.HUD.PAUSE_MENU_GET_MOUSE_HOVER_UNIQUE_ID() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.PAUSE_MENU_GET_MOUSE_HOVER_UNIQUE_ID' due to disabled trusted mode")

	local result = native_call(0x13C4B962653A5280)
	return result:__tointeger()
end
natives.hud.pause_menu_get_mouse_hover_unique_id = natives.HUD.PAUSE_MENU_GET_MOUSE_HOVER_UNIQUE_ID

function natives.HUD.PAUSE_MENU_GET_MOUSE_CLICK_EVENT(--[[Any*]] p0, --[[Any*]] p1, --[[Any*]] p2) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.PAUSE_MENU_GET_MOUSE_CLICK_EVENT' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")
	assert(type(p1) == "userdata", "Arg #2 (p1) must be a userdata.")
	assert(type(p2) == "userdata", "Arg #3 (p2) must be a userdata.")

	local result = native_call(0xC8E1071177A23BE5, p0, p1, p2)
	return result:__tointeger() ~= 0
end
natives.hud.pause_menu_get_mouse_click_event = natives.HUD.PAUSE_MENU_GET_MOUSE_CLICK_EVENT

function natives.HUD.PAUSE_MENU_REDRAW_INSTRUCTIONAL_BUTTONS(--[[int]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.PAUSE_MENU_REDRAW_INSTRUCTIONAL_BUTTONS' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x4895BDEA16E7C080, p0)
end
natives.hud.pause_menu_redraw_instructional_buttons = natives.HUD.PAUSE_MENU_REDRAW_INSTRUCTIONAL_BUTTONS

function natives.HUD.PAUSE_MENU_SET_BUSY_SPINNER(--[[BOOL]] p0, --[[int]] position, --[[int]] spinnerIndex) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.PAUSE_MENU_SET_BUSY_SPINNER' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")
	assert(type(position) == "number", "Arg #2 (position) must be a number.")
	assert(type(spinnerIndex) == "number", "Arg #3 (spinnerIndex) must be a number.")

	local result = native_call(0xC78E239AC5B2DDB9, p0, position, spinnerIndex)
end
natives.hud.pause_menu_set_busy_spinner = natives.HUD.PAUSE_MENU_SET_BUSY_SPINNER

function natives.HUD.PAUSE_MENU_SET_WARN_ON_TAB_CHANGE(--[[BOOL]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.PAUSE_MENU_SET_WARN_ON_TAB_CHANGE' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0xF06EBB91A81E09E3, p0)
end
natives.hud.pause_menu_set_warn_on_tab_change = natives.HUD.PAUSE_MENU_SET_WARN_ON_TAB_CHANGE

function natives.HUD.IS_FRONTEND_READY_FOR_CONTROL() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.IS_FRONTEND_READY_FOR_CONTROL' due to disabled trusted mode")

	local result = native_call(0x3BAB9A4E4F2FF5C7)
	return result:__tointeger() ~= 0
end
natives.hud.is_frontend_ready_for_control = natives.HUD.IS_FRONTEND_READY_FOR_CONTROL

--[[
Disables frontend (works in custom frontends, not sure about regular pause menu) navigation keys on keyboard. Not sure about controller. Does not disable mouse controls. No need to call this every tick.

To enable the keys again, use `0x14621BB1DF14E2B2`.
]]
function natives.HUD.TAKE_CONTROL_OF_FRONTEND() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.TAKE_CONTROL_OF_FRONTEND' due to disabled trusted mode")

	local result = native_call(0xEC9264727EEC0F28)
end
natives.hud.take_control_of_frontend = natives.HUD.TAKE_CONTROL_OF_FRONTEND

--[[
Enables frontend (works in custom frontends, not sure about regular pause menu) navigation keys on keyboard if they were disabled using the native below.
To disable the keys, use `0xEC9264727EEC0F28`
]]
function natives.HUD.RELEASE_CONTROL_OF_FRONTEND() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.RELEASE_CONTROL_OF_FRONTEND' due to disabled trusted mode")

	local result = native_call(0x14621BB1DF14E2B2)
end
natives.hud.release_control_of_frontend = natives.HUD.RELEASE_CONTROL_OF_FRONTEND

function natives.HUD.CODE_WANTS_SCRIPT_TO_TAKE_CONTROL() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.CODE_WANTS_SCRIPT_TO_TAKE_CONTROL' due to disabled trusted mode")

	local result = native_call(0x66E7CB63C97B7D20)
	return result:__tointeger() ~= 0
end
natives.hud.code_wants_script_to_take_control = natives.HUD.CODE_WANTS_SCRIPT_TO_TAKE_CONTROL

function natives.HUD.GET_SCREEN_CODE_WANTS_SCRIPT_TO_CONTROL() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.GET_SCREEN_CODE_WANTS_SCRIPT_TO_CONTROL' due to disabled trusted mode")

	local result = native_call(0x593FEAE1F73392D4)
	return result:__tointeger()
end
natives.hud.get_screen_code_wants_script_to_control = natives.HUD.GET_SCREEN_CODE_WANTS_SCRIPT_TO_CONTROL

function natives.HUD.IS_NAVIGATING_MENU_CONTENT() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.IS_NAVIGATING_MENU_CONTENT' due to disabled trusted mode")

	local result = native_call(0x4E3CD0EF8A489541)
	return result:__tointeger() ~= 0
end
natives.hud.is_navigating_menu_content = natives.HUD.IS_NAVIGATING_MENU_CONTENT

function natives.HUD.HAS_MENU_TRIGGER_EVENT_OCCURRED() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.HAS_MENU_TRIGGER_EVENT_OCCURRED' due to disabled trusted mode")

	local result = native_call(0xF284AC67940C6812)
	return result:__tointeger() ~= 0
end
natives.hud.has_menu_trigger_event_occurred = natives.HUD.HAS_MENU_TRIGGER_EVENT_OCCURRED

function natives.HUD.HAS_MENU_LAYOUT_CHANGED_EVENT_OCCURRED() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.HAS_MENU_LAYOUT_CHANGED_EVENT_OCCURRED' due to disabled trusted mode")

	local result = native_call(0x2E22FEFA0100275E)
	return result:__tointeger() ~= 0
end
natives.hud.has_menu_layout_changed_event_occurred = natives.HUD.HAS_MENU_LAYOUT_CHANGED_EVENT_OCCURRED

function natives.HUD.SET_SAVEGAME_LIST_UNIQUE_ID(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_SAVEGAME_LIST_UNIQUE_ID' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x0CF54F20DE43879C, p0)
end
natives.hud.set_savegame_list_unique_id = natives.HUD.SET_SAVEGAME_LIST_UNIQUE_ID

function natives.HUD.GET_MENU_TRIGGER_EVENT_DETAILS(--[[int*]] lastItemMenuId, --[[int*]] selectedItemUniqueId) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.GET_MENU_TRIGGER_EVENT_DETAILS' due to disabled trusted mode")

	assert(type(lastItemMenuId) == "userdata", "Arg #1 (lastItemMenuId) must be a userdata.")
	assert(type(selectedItemUniqueId) == "userdata", "Arg #2 (selectedItemUniqueId) must be a userdata.")

	local result = native_call(0x36C1451A88A09630, lastItemMenuId, selectedItemUniqueId)
end
natives.hud.get_menu_trigger_event_details = natives.HUD.GET_MENU_TRIGGER_EVENT_DETAILS

--[[
lastItemMenuId: this is the menuID of the last selected item minus 1000 (lastItem.menuID - 1000)
selectedItemMenuId: same as lastItemMenuId except for the currently selected menu item
selectedItemUniqueId: this is uniqueID of the currently selected menu item

when the pausemenu is closed:
lastItemMenuId = -1
selectedItemMenuId = -1
selectedItemUniqueId = 0

when the header gains focus:
lastItemMenuId updates as normal or 0 if the pausemenu was just opened
selectedItemMenuId becomes a unique id for the pausemenu page that focus was taken from (?) or 0 if the pausemenu was just opened
selectedItemUniqueId = -1

when focus is moved from the header to a pausemenu page:
lastItemMenuId becomes a unique id for the pausemenu page that focus was moved to (?)
selectedItemMenuId = -1
selectedItemUniqueId updates as normal
]]
function natives.HUD.GET_MENU_LAYOUT_CHANGED_EVENT_DETAILS(--[[int*]] lastItemMenuId, --[[int*]] selectedItemMenuId, --[[int*]] selectedItemUniqueId) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.GET_MENU_LAYOUT_CHANGED_EVENT_DETAILS' due to disabled trusted mode")

	assert(type(lastItemMenuId) == "userdata", "Arg #1 (lastItemMenuId) must be a userdata.")
	assert(type(selectedItemMenuId) == "userdata", "Arg #2 (selectedItemMenuId) must be a userdata.")
	assert(type(selectedItemUniqueId) == "userdata", "Arg #3 (selectedItemUniqueId) must be a userdata.")

	local result = native_call(0x7E17BE53E1AAABAF, lastItemMenuId, selectedItemMenuId, selectedItemUniqueId)
end
natives.hud.get_menu_layout_changed_event_details = natives.HUD.GET_MENU_LAYOUT_CHANGED_EVENT_DETAILS

function natives.HUD.GET_PM_PLAYER_CREW_COLOR(--[[int*]] r, --[[int*]] g, --[[int*]] b) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.GET_PM_PLAYER_CREW_COLOR' due to disabled trusted mode")

	assert(type(r) == "userdata", "Arg #1 (r) must be a userdata.")
	assert(type(g) == "userdata", "Arg #2 (g) must be a userdata.")
	assert(type(b) == "userdata", "Arg #3 (b) must be a userdata.")

	local result = native_call(0xA238192F33110615, r, g, b)
	return result:__tointeger() ~= 0
end
natives.hud.get_pm_player_crew_color = natives.HUD.GET_PM_PLAYER_CREW_COLOR

function natives.HUD.GET_MENU_PED_INT_STAT(--[[Any]] p0, --[[Any*]] p1) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.GET_MENU_PED_INT_STAT' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "userdata", "Arg #2 (p1) must be a userdata.")

	local result = native_call(0xEF4CED81CEBEDC6D, p0, p1)
	return result:__tointeger() ~= 0
end
natives.hud.get_menu_ped_int_stat = natives.HUD.GET_MENU_PED_INT_STAT

function natives.HUD.GET_CHARACTER_MENU_PED_INT_STAT(--[[Any]] p0, --[[Any*]] p1, --[[Any]] p2) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.GET_CHARACTER_MENU_PED_INT_STAT' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "userdata", "Arg #2 (p1) must be a userdata.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0xCA6B2F7CE32AB653, p0, p1, p2)
	return result:__tointeger() ~= 0
end
natives.hud.get_character_menu_ped_int_stat = natives.HUD.GET_CHARACTER_MENU_PED_INT_STAT

function natives.HUD.GET_MENU_PED_MASKED_INT_STAT(--[[Hash]] p0, --[[Any*]] p1, --[[Any]] p2, --[[int]] p3) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.GET_MENU_PED_MASKED_INT_STAT' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "userdata", "Arg #2 (p1) must be a userdata.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x90A6526CF0381030, p0, p1, p2, p3)
	return result:__tointeger() ~= 0
end
natives.hud.get_menu_ped_masked_int_stat = natives.HUD.GET_MENU_PED_MASKED_INT_STAT

function natives.HUD.GET_CHARACTER_MENU_PED_MASKED_INT_STAT(--[[Any]] p0, --[[Any*]] p1, --[[Any]] p2, --[[Any]] p3, --[[Any]] p4) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.GET_CHARACTER_MENU_PED_MASKED_INT_STAT' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "userdata", "Arg #2 (p1) must be a userdata.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")

	local result = native_call(0x24A49BEAF468DC90, p0, p1, p2, p3, p4)
	return result:__tointeger() ~= 0
end
natives.hud.get_character_menu_ped_masked_int_stat = natives.HUD.GET_CHARACTER_MENU_PED_MASKED_INT_STAT

function natives.HUD.GET_MENU_PED_FLOAT_STAT(--[[Any]] p0, --[[float*]] p1) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.GET_MENU_PED_FLOAT_STAT' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "userdata", "Arg #2 (p1) must be a userdata.")

	local result = native_call(0x5FBD7095FE7AE57F, p0, p1)
	return result:__tointeger() ~= 0
end
natives.hud.get_menu_ped_float_stat = natives.HUD.GET_MENU_PED_FLOAT_STAT

function natives.HUD.GET_CHARACTER_MENU_PED_FLOAT_STAT(--[[Any]] p0, --[[Any*]] p1, --[[Any]] p2) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.GET_CHARACTER_MENU_PED_FLOAT_STAT' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "userdata", "Arg #2 (p1) must be a userdata.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0x8F08017F9D7C47BD, p0, p1, p2)
	return result:__tointeger() ~= 0
end
natives.hud.get_character_menu_ped_float_stat = natives.HUD.GET_CHARACTER_MENU_PED_FLOAT_STAT

--[[
p0 was always 0xAE2602A3.
]]
function natives.HUD.GET_MENU_PED_BOOL_STAT(--[[Hash]] p0, --[[Any*]] p1) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.GET_MENU_PED_BOOL_STAT' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "userdata", "Arg #2 (p1) must be a userdata.")

	local result = native_call(0x052991E59076E4E4, p0, p1)
	return result:__tointeger() ~= 0
end
natives.hud.get_menu_ped_bool_stat = natives.HUD.GET_MENU_PED_BOOL_STAT

function natives.HUD.CLEAR_PED_IN_PAUSE_MENU() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.CLEAR_PED_IN_PAUSE_MENU' due to disabled trusted mode")

	local result = native_call(0x5E62BE5DC58E9E06)
end
natives.hud.clear_ped_in_pause_menu = natives.HUD.CLEAR_PED_IN_PAUSE_MENU

--[[
p1 is either 1 or 2 in the PC scripts.
]]
function natives.HUD.GIVE_PED_TO_PAUSE_MENU(--[[Ped]] ped, --[[int]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.GIVE_PED_TO_PAUSE_MENU' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xAC0BFBDC3BE00E14, ped, p1)
end
natives.hud.give_ped_to_pause_menu = natives.HUD.GIVE_PED_TO_PAUSE_MENU

--[[
Toggles the light state for the pause menu ped in frontend menus.

This is used by R* in combination with `SET_PAUSE_MENU_PED_SLEEP_STATE` to toggle the "offline" or "online" state in the "friends" tab of the pause menu in GTA Online.


Example:
Lights On: https://vespura.com/hi/i/2019-04-01_16-09_540ee_1015.png
Lights Off: https://vespura.com/hi/i/2019-04-01_16-10_8b5e7_1016.png
]]
function natives.HUD.SET_PAUSE_MENU_PED_LIGHTING(--[[BOOL]] state) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_PAUSE_MENU_PED_LIGHTING' due to disabled trusted mode")

	assert(type(state) == "boolean", "Arg #1 (state) must be a boolean.")

	local result = native_call(0x3CA6050692BC61B0, state)
end
natives.hud.set_pause_menu_ped_lighting = natives.HUD.SET_PAUSE_MENU_PED_LIGHTING

--[[
Toggles the pause menu ped sleep state for frontend menus.

Example: https://vespura.com/hi/i/2019-04-01_15-51_8ed38_1014.gif

`state` 0 will make the ped slowly fall asleep, 1 will slowly wake the ped up.
]]
function natives.HUD.SET_PAUSE_MENU_PED_SLEEP_STATE(--[[BOOL]] state) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_PAUSE_MENU_PED_SLEEP_STATE' due to disabled trusted mode")

	assert(type(state) == "boolean", "Arg #1 (state) must be a boolean.")

	local result = native_call(0xECF128344E9FF9F1, state)
end
natives.hud.set_pause_menu_ped_sleep_state = natives.HUD.SET_PAUSE_MENU_PED_SLEEP_STATE

function natives.HUD.OPEN_ONLINE_POLICIES_MENU() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.OPEN_ONLINE_POLICIES_MENU' due to disabled trusted mode")

	local result = native_call(0x805D7CBB36FD6C4C)
end
natives.hud.open_online_policies_menu = natives.HUD.OPEN_ONLINE_POLICIES_MENU

function natives.HUD.ARE_ONLINE_POLICIES_UP_TO_DATE() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.ARE_ONLINE_POLICIES_UP_TO_DATE' due to disabled trusted mode")

	local result = native_call(0xF13FE2A80C05C561)
	return result:__tointeger() ~= 0
end
natives.hud.are_online_policies_up_to_date = natives.HUD.ARE_ONLINE_POLICIES_UP_TO_DATE

--[[
Returns the same as IS_SOCIAL_CLUB_ACTIVE
]]
function natives.HUD.IS_ONLINE_POLICIES_MENU_ACTIVE() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.IS_ONLINE_POLICIES_MENU_ACTIVE' due to disabled trusted mode")

	local result = native_call(0x6F72CD94F7B5B68C)
	return result:__tointeger() ~= 0
end
natives.hud.is_online_policies_menu_active = natives.HUD.IS_ONLINE_POLICIES_MENU_ACTIVE

--[[
Uses the `SOCIAL_CLUB2` scaleform.
]]
function natives.HUD.OPEN_SOCIAL_CLUB_MENU() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.OPEN_SOCIAL_CLUB_MENU' due to disabled trusted mode")

	local result = native_call(0x75D3691713C3B05A)
end
natives.hud.open_social_club_menu = natives.HUD.OPEN_SOCIAL_CLUB_MENU

function natives.HUD.CLOSE_SOCIAL_CLUB_MENU() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.CLOSE_SOCIAL_CLUB_MENU' due to disabled trusted mode")

	local result = native_call(0xD2B32BE3FC1626C6)
end
natives.hud.close_social_club_menu = natives.HUD.CLOSE_SOCIAL_CLUB_MENU

--[[
HUD::SET_SOCIAL_CLUB_TOUR("Gallery");
HUD::SET_SOCIAL_CLUB_TOUR("Missions");
HUD::SET_SOCIAL_CLUB_TOUR("General");
HUD::SET_SOCIAL_CLUB_TOUR("Playlists");
]]
function natives.HUD.SET_SOCIAL_CLUB_TOUR(--[[const char*]] name) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_SOCIAL_CLUB_TOUR' due to disabled trusted mode")

	assert(type(name) == "string", "Arg #1 (name) must be a string.")

	local result = native_call(0x9E778248D6685FE0, name)
end
natives.hud.set_social_club_tour = natives.HUD.SET_SOCIAL_CLUB_TOUR

function natives.HUD.IS_SOCIAL_CLUB_ACTIVE() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.IS_SOCIAL_CLUB_ACTIVE' due to disabled trusted mode")

	local result = native_call(0xC406BE343FC4B9AF)
	return result:__tointeger() ~= 0
end
natives.hud.is_social_club_active = natives.HUD.IS_SOCIAL_CLUB_ACTIVE

function natives.HUD.SET_TEXT_INPUT_BOX_ENABLED(--[[BOOL]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_TEXT_INPUT_BOX_ENABLED' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0x1185A8087587322C, p0)
end
natives.hud.set_text_input_box_enabled = natives.HUD.SET_TEXT_INPUT_BOX_ENABLED

function natives.HUD.FORCE_CLOSE_TEXT_INPUT_BOX() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.FORCE_CLOSE_TEXT_INPUT_BOX' due to disabled trusted mode")

	local result = native_call(0x8817605C2BA76200)
end
natives.hud.force_close_text_input_box = natives.HUD.FORCE_CLOSE_TEXT_INPUT_BOX

function natives.HUD.SET_ALLOW_COMMA_ON_TEXT_INPUT(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_ALLOW_COMMA_ON_TEXT_INPUT' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x577599CCED639CA2, p0)
end
natives.hud.set_allow_comma_on_text_input = natives.HUD.SET_ALLOW_COMMA_ON_TEXT_INPUT

function natives.HUD.OVERRIDE_MP_TEXT_CHAT_TEAM_STRING(--[[Hash]] gxtEntryHash) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.OVERRIDE_MP_TEXT_CHAT_TEAM_STRING' due to disabled trusted mode")

	assert(type(gxtEntryHash) == "number", "Arg #1 (gxtEntryHash) must be a number.")

	local result = native_call(0x6A1738B4323FE2D9, gxtEntryHash)
end
natives.hud.override_mp_text_chat_team_string = natives.HUD.OVERRIDE_MP_TEXT_CHAT_TEAM_STRING

--[[
Returns whether or not the text chat (MULTIPLAYER_CHAT Scaleform component) is active.
]]
function natives.HUD.IS_MP_TEXT_CHAT_TYPING() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.IS_MP_TEXT_CHAT_TYPING' due to disabled trusted mode")

	local result = native_call(0xB118AF58B5F332A1)
	return result:__tointeger() ~= 0
end
natives.hud.is_mp_text_chat_typing = natives.HUD.IS_MP_TEXT_CHAT_TYPING

function natives.HUD.CLOSE_MP_TEXT_CHAT() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.CLOSE_MP_TEXT_CHAT' due to disabled trusted mode")

	local result = native_call(0x1AC8F4AD40E22127)
end
natives.hud.close_mp_text_chat = natives.HUD.CLOSE_MP_TEXT_CHAT

function natives.HUD.MP_TEXT_CHAT_IS_TEAM_JOB(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.MP_TEXT_CHAT_IS_TEAM_JOB' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x7C226D5346D4D10A, p0)
end
natives.hud.mp_text_chat_is_team_job = natives.HUD.MP_TEXT_CHAT_IS_TEAM_JOB

function natives.HUD.OVERRIDE_MP_TEXT_CHAT_COLOR(--[[int]] p0, --[[int]] hudColor) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.OVERRIDE_MP_TEXT_CHAT_COLOR' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(hudColor) == "number", "Arg #2 (hudColor) must be a number.")

	local result = native_call(0xF47E567B3630DD12, p0, hudColor)
end
natives.hud.override_mp_text_chat_color = natives.HUD.OVERRIDE_MP_TEXT_CHAT_COLOR

--[[
Hides the chat history, closes the input box and makes it unable to be opened unless called again with FALSE.
]]
function natives.HUD.MP_TEXT_CHAT_DISABLE(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.MP_TEXT_CHAT_DISABLE' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x1DB21A44B09E8BA3, toggle)
end
natives.hud.mp_text_chat_disable = natives.HUD.MP_TEXT_CHAT_DISABLE

function natives.HUD.FLAG_PLAYER_CONTEXT_IN_TOURNAMENT(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.FLAG_PLAYER_CONTEXT_IN_TOURNAMENT' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0xCEF214315D276FD1, toggle)
end
natives.hud.flag_player_context_in_tournament = natives.HUD.FLAG_PLAYER_CONTEXT_IN_TOURNAMENT

--[[
This native turns on the AI blip on the specified ped. It also disappears automatically when the ped is too far or if the ped is dead. You don't need to control it with other natives.

See gtaforums.com/topic/884370-native-research-ai-blips for further information.
]]
function natives.HUD.SET_PED_HAS_AI_BLIP(--[[Ped]] ped, --[[BOOL]] hasCone) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_PED_HAS_AI_BLIP' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(hasCone) == "boolean", "Arg #2 (hasCone) must be a boolean.")

	local result = native_call(0xD30C50DF888D58B5, ped, hasCone)
end
natives.hud.set_ped_has_ai_blip = natives.HUD.SET_PED_HAS_AI_BLIP

--[[
color: see SET_BLIP_COLOUR
]]
function natives.HUD.SET_PED_HAS_AI_BLIP_WITH_COLOUR(--[[Ped]] ped, --[[BOOL]] hasCone, --[[int]] color) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_PED_HAS_AI_BLIP_WITH_COLOUR' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(hasCone) == "boolean", "Arg #2 (hasCone) must be a boolean.")
	assert(type(color) == "number", "Arg #3 (color) must be a number.")

	local result = native_call(0xB13DCB4C6FAAD238, ped, hasCone, color)
end
natives.hud.set_ped_has_ai_blip_with_colour = natives.HUD.SET_PED_HAS_AI_BLIP_WITH_COLOUR

function natives.HUD.DOES_PED_HAVE_AI_BLIP(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.DOES_PED_HAVE_AI_BLIP' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x15B8ECF844EE67ED, ped)
	return result:__tointeger() ~= 0
end
natives.hud.does_ped_have_ai_blip = natives.HUD.DOES_PED_HAVE_AI_BLIP

function natives.HUD.SET_PED_AI_BLIP_GANG_ID(--[[Ped]] ped, --[[int]] gangId) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_PED_AI_BLIP_GANG_ID' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(gangId) == "number", "Arg #2 (gangId) must be a number.")

	local result = native_call(0xE52B8E7F85D39A08, ped, gangId)
end
natives.hud.set_ped_ai_blip_gang_id = natives.HUD.SET_PED_AI_BLIP_GANG_ID

function natives.HUD.SET_PED_AI_BLIP_HAS_CONE(--[[Ped]] ped, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_PED_AI_BLIP_HAS_CONE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x3EED80DFF7325CAA, ped, toggle)
end
natives.hud.set_ped_ai_blip_has_cone = natives.HUD.SET_PED_AI_BLIP_HAS_CONE

function natives.HUD.SET_PED_AI_BLIP_FORCED_ON(--[[Ped]] ped, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_PED_AI_BLIP_FORCED_ON' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x0C4BBF625CA98C4E, ped, toggle)
end
natives.hud.set_ped_ai_blip_forced_on = natives.HUD.SET_PED_AI_BLIP_FORCED_ON

function natives.HUD.SET_PED_AI_BLIP_NOTICE_RANGE(--[[Ped]] ped, --[[float]] range) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_PED_AI_BLIP_NOTICE_RANGE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(range) == "number", "Arg #2 (range) must be a number.")

	local result = native_call(0x97C65887D4B37FA9, ped, range)
end
natives.hud.set_ped_ai_blip_notice_range = natives.HUD.SET_PED_AI_BLIP_NOTICE_RANGE

function natives.HUD.SET_PED_AI_BLIP_SPRITE(--[[Ped]] ped, --[[int]] spriteId) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_PED_AI_BLIP_SPRITE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(spriteId) == "number", "Arg #2 (spriteId) must be a number.")

	local result = native_call(0xFCFACD0DB9D7A57D, ped, spriteId)
end
natives.hud.set_ped_ai_blip_sprite = natives.HUD.SET_PED_AI_BLIP_SPRITE

function natives.HUD.GET_AI_PED_PED_BLIP_INDEX(--[[Ped]] ped) -- Returns Blip
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.GET_AI_PED_PED_BLIP_INDEX' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x7CD934010E115C2C, ped)
	return result:__tointeger()
end
natives.hud.get_ai_ped_ped_blip_index = natives.HUD.GET_AI_PED_PED_BLIP_INDEX

--[[
Returns the current AI BLIP for the specified ped
]]
function natives.HUD.GET_AI_PED_VEHICLE_BLIP_INDEX(--[[Ped]] ped) -- Returns Blip
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.GET_AI_PED_VEHICLE_BLIP_INDEX' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x56176892826A4FE8, ped)
	return result:__tointeger()
end
natives.hud.get_ai_ped_vehicle_blip_index = natives.HUD.GET_AI_PED_VEHICLE_BLIP_INDEX

function natives.HUD.HAS_DIRECTOR_MODE_BEEN_LAUNCHED_BY_CODE() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.HAS_DIRECTOR_MODE_BEEN_LAUNCHED_BY_CODE' due to disabled trusted mode")

	local result = native_call(0xA277800A9EAE340E)
	return result:__tointeger() ~= 0
end
natives.hud.has_director_mode_been_launched_by_code = natives.HUD.HAS_DIRECTOR_MODE_BEEN_LAUNCHED_BY_CODE

function natives.HUD.SET_DIRECTOR_MODE_LAUNCHED_BY_SCRIPT() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_DIRECTOR_MODE_LAUNCHED_BY_SCRIPT' due to disabled trusted mode")

	local result = native_call(0x2632482FD6B9AB87)
end
natives.hud.set_director_mode_launched_by_script = natives.HUD.SET_DIRECTOR_MODE_LAUNCHED_BY_SCRIPT

--[[
If toggle is true, hides special ability bar / character name in the pause menu
If toggle is false, shows special ability bar / character name in the pause menu
]]
function natives.HUD.SET_PLAYER_IS_IN_DIRECTOR_MODE(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_PLAYER_IS_IN_DIRECTOR_MODE' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x808519373FD336A3, toggle)
end
natives.hud.set_player_is_in_director_mode = natives.HUD.SET_PLAYER_IS_IN_DIRECTOR_MODE

function natives.HUD.SET_DIRECTOR_MODE_AVAILABLE(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.SET_DIRECTOR_MODE_AVAILABLE' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x04655F9D075D0AE5, toggle)
end
natives.hud.set_director_mode_available = natives.HUD.SET_DIRECTOR_MODE_AVAILABLE

function natives.HUD.HIDE_HUDMARKERS_THIS_FRAME() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'HUD.HIDE_HUDMARKERS_THIS_FRAME' due to disabled trusted mode")

	local result = native_call(0x243296A510B562B6)
end
natives.hud.hide_hudmarkers_this_frame = natives.HUD.HIDE_HUDMARKERS_THIS_FRAME


natives.INTERIOR = {}
natives.interior = {}

function natives.INTERIOR.GET_INTERIOR_HEADING(--[[Interior]] interior) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'INTERIOR.GET_INTERIOR_HEADING' due to disabled trusted mode")

	assert(type(interior) == "number", "Arg #1 (interior) must be a number.")

	local result = native_call(0xF49B58631D9E22D9, interior)
	return result:__tonumber()
end
natives.interior.get_interior_heading = natives.INTERIOR.GET_INTERIOR_HEADING

function natives.INTERIOR.GET_INTERIOR_LOCATION_AND_NAMEHASH(--[[Interior]] interior, --[[Vector3*]] position, --[[Hash*]] nameHash) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'INTERIOR.GET_INTERIOR_LOCATION_AND_NAMEHASH' due to disabled trusted mode")

	assert(type(interior) == "number", "Arg #1 (interior) must be a number.")
	assert(type(position) == "userdata", "Arg #2 (position) must be a userdata.")
	assert(type(nameHash) == "userdata", "Arg #3 (nameHash) must be a userdata.")

	local result = native_call(0x252BDC06B73FA6EA, interior, position, nameHash)
end
natives.interior.get_interior_location_and_namehash = natives.INTERIOR.GET_INTERIOR_LOCATION_AND_NAMEHASH

--[[
Returns the group ID of the specified interior. For example, regular interiors have group 0, subway interiors have group 1. There are a few other groups too.
]]
function natives.INTERIOR.GET_INTERIOR_GROUP_ID(--[[Interior]] interior) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'INTERIOR.GET_INTERIOR_GROUP_ID' due to disabled trusted mode")

	assert(type(interior) == "number", "Arg #1 (interior) must be a number.")

	local result = native_call(0xE4A84ABF135EF91A, interior)
	return result:__tointeger()
end
natives.interior.get_interior_group_id = natives.INTERIOR.GET_INTERIOR_GROUP_ID

function natives.INTERIOR.GET_OFFSET_FROM_INTERIOR_IN_WORLD_COORDS(--[[Interior]] interior, --[[float]] x, --[[float]] y, --[[float]] z) -- Returns Vector3
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'INTERIOR.GET_OFFSET_FROM_INTERIOR_IN_WORLD_COORDS' due to disabled trusted mode")

	assert(type(interior) == "number", "Arg #1 (interior) must be a number.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")

	local result = native_call(0x9E3B3E6D66F6E22F, interior, x, y, z)
	return result:__tov3()
end
natives.interior.get_offset_from_interior_in_world_coords = natives.INTERIOR.GET_OFFSET_FROM_INTERIOR_IN_WORLD_COORDS

function natives.INTERIOR.IS_INTERIOR_SCENE() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'INTERIOR.IS_INTERIOR_SCENE' due to disabled trusted mode")

	local result = native_call(0xBC72B5D7A1CBD54D)
	return result:__tointeger() ~= 0
end
natives.interior.is_interior_scene = natives.INTERIOR.IS_INTERIOR_SCENE

function natives.INTERIOR.IS_VALID_INTERIOR(--[[Interior]] interior) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'INTERIOR.IS_VALID_INTERIOR' due to disabled trusted mode")

	assert(type(interior) == "number", "Arg #1 (interior) must be a number.")

	local result = native_call(0x26B0E73D7EAAF4D3, interior)
	return result:__tointeger() ~= 0
end
natives.interior.is_valid_interior = natives.INTERIOR.IS_VALID_INTERIOR

function natives.INTERIOR.CLEAR_ROOM_FOR_ENTITY(--[[Entity]] entity) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'INTERIOR.CLEAR_ROOM_FOR_ENTITY' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0xB365FC0C4E27FFA7, entity)
end
natives.interior.clear_room_for_entity = natives.INTERIOR.CLEAR_ROOM_FOR_ENTITY

function natives.INTERIOR.FORCE_ROOM_FOR_ENTITY(--[[Entity]] entity, --[[Interior]] interior, --[[Hash]] roomHashKey) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'INTERIOR.FORCE_ROOM_FOR_ENTITY' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(interior) == "number", "Arg #2 (interior) must be a number.")
	assert(type(roomHashKey) == "number", "Arg #3 (roomHashKey) must be a number.")

	local result = native_call(0x52923C4710DD9907, entity, interior, roomHashKey)
end
natives.interior.force_room_for_entity = natives.INTERIOR.FORCE_ROOM_FOR_ENTITY

--[[
Gets the room hash key from the room that the specified entity is in. Each room in every interior has a unique key. Returns 0 if the entity is outside.
]]
function natives.INTERIOR.GET_ROOM_KEY_FROM_ENTITY(--[[Entity]] entity) -- Returns Hash
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'INTERIOR.GET_ROOM_KEY_FROM_ENTITY' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0x47C2A06D4F5F424B, entity)
	return result:__tointeger()
end
natives.interior.get_room_key_from_entity = natives.INTERIOR.GET_ROOM_KEY_FROM_ENTITY

--[[
Seems to do the exact same as INTERIOR::GET_ROOM_KEY_FROM_ENTITY
]]
function natives.INTERIOR.GET_KEY_FOR_ENTITY_IN_ROOM(--[[Entity]] entity) -- Returns Hash
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'INTERIOR.GET_KEY_FOR_ENTITY_IN_ROOM' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0x399685DB942336BC, entity)
	return result:__tointeger()
end
natives.interior.get_key_for_entity_in_room = natives.INTERIOR.GET_KEY_FOR_ENTITY_IN_ROOM

--[[
Returns the handle of the interior that the entity is in. Returns 0 if outside.
]]
function natives.INTERIOR.GET_INTERIOR_FROM_ENTITY(--[[Entity]] entity) -- Returns Interior
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'INTERIOR.GET_INTERIOR_FROM_ENTITY' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0x2107BA504071A6BB, entity)
	return result:__tointeger()
end
natives.interior.get_interior_from_entity = natives.INTERIOR.GET_INTERIOR_FROM_ENTITY

function natives.INTERIOR.RETAIN_ENTITY_IN_INTERIOR(--[[Entity]] entity, --[[Interior]] interior) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'INTERIOR.RETAIN_ENTITY_IN_INTERIOR' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(interior) == "number", "Arg #2 (interior) must be a number.")

	local result = native_call(0x82EBB79E258FA2B7, entity, interior)
end
natives.interior.retain_entity_in_interior = natives.INTERIOR.RETAIN_ENTITY_IN_INTERIOR

--[[
Immediately removes entity from an interior. Like sets entity to `limbo` room.
]]
function natives.INTERIOR.CLEAR_INTERIOR_STATE_OF_ENTITY(--[[Entity]] entity) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'INTERIOR.CLEAR_INTERIOR_STATE_OF_ENTITY' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0x85D5422B2039A70D, entity)
end
natives.interior.clear_interior_state_of_entity = natives.INTERIOR.CLEAR_INTERIOR_STATE_OF_ENTITY

function natives.INTERIOR.FORCE_ACTIVATING_TRACKING_ON_ENTITY(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'INTERIOR.FORCE_ACTIVATING_TRACKING_ON_ENTITY' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x38C1CB1CB119A016, p0, p1)
end
natives.interior.force_activating_tracking_on_entity = natives.INTERIOR.FORCE_ACTIVATING_TRACKING_ON_ENTITY

function natives.INTERIOR.FORCE_ROOM_FOR_GAME_VIEWPORT(--[[int]] interiorID, --[[Hash]] roomHashKey) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'INTERIOR.FORCE_ROOM_FOR_GAME_VIEWPORT' due to disabled trusted mode")

	assert(type(interiorID) == "number", "Arg #1 (interiorID) must be a number.")
	assert(type(roomHashKey) == "number", "Arg #2 (roomHashKey) must be a number.")

	local result = native_call(0x920D853F3E17F1DA, interiorID, roomHashKey)
end
natives.interior.force_room_for_game_viewport = natives.INTERIOR.FORCE_ROOM_FOR_GAME_VIEWPORT

--[[
Exemple of use(carmod_shop.c4)
 INTERIOR::_AF348AFCB575A441("V_CarModRoom");
]]
function natives.INTERIOR.SET_ROOM_FOR_GAME_VIEWPORT_BY_NAME(--[[const char*]] roomName) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'INTERIOR.SET_ROOM_FOR_GAME_VIEWPORT_BY_NAME' due to disabled trusted mode")

	assert(type(roomName) == "string", "Arg #1 (roomName) must be a string.")

	local result = native_call(0xAF348AFCB575A441, roomName)
end
natives.interior.set_room_for_game_viewport_by_name = natives.INTERIOR.SET_ROOM_FOR_GAME_VIEWPORT_BY_NAME

--[[
Usage: INTERIOR::_0x405DC2AEF6AF95B9(INTERIOR::GET_KEY_FOR_ENTITY_IN_ROOM(PLAYER::PLAYER_PED_ID()));
]]
function natives.INTERIOR.SET_ROOM_FOR_GAME_VIEWPORT_BY_KEY(--[[Hash]] roomHashKey) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'INTERIOR.SET_ROOM_FOR_GAME_VIEWPORT_BY_KEY' due to disabled trusted mode")

	assert(type(roomHashKey) == "number", "Arg #1 (roomHashKey) must be a number.")

	local result = native_call(0x405DC2AEF6AF95B9, roomHashKey)
end
natives.interior.set_room_for_game_viewport_by_key = natives.INTERIOR.SET_ROOM_FOR_GAME_VIEWPORT_BY_KEY

function natives.INTERIOR.GET_ROOM_KEY_FOR_GAME_VIEWPORT() -- Returns Hash
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'INTERIOR.GET_ROOM_KEY_FOR_GAME_VIEWPORT' due to disabled trusted mode")

	local result = native_call(0xA6575914D2A0B450)
	return result:__tointeger()
end
natives.interior.get_room_key_for_game_viewport = natives.INTERIOR.GET_ROOM_KEY_FOR_GAME_VIEWPORT

function natives.INTERIOR.CLEAR_ROOM_FOR_GAME_VIEWPORT() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'INTERIOR.CLEAR_ROOM_FOR_GAME_VIEWPORT' due to disabled trusted mode")

	local result = native_call(0x23B59D8912F94246)
end
natives.interior.clear_room_for_game_viewport = natives.INTERIOR.CLEAR_ROOM_FOR_GAME_VIEWPORT

--[[
Returns the current interior id from gameplay camera
]]
function natives.INTERIOR.GET_INTERIOR_FROM_PRIMARY_VIEW() -- Returns Interior
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'INTERIOR.GET_INTERIOR_FROM_PRIMARY_VIEW' due to disabled trusted mode")

	local result = native_call(0xE7D267EC6CA966C3)
	return result:__tointeger()
end
natives.interior.get_interior_from_primary_view = natives.INTERIOR.GET_INTERIOR_FROM_PRIMARY_VIEW

--[[
Returns interior ID from specified coordinates. If coordinates are outside, then it returns 0.

Example for VB.NET
Dim interiorID As Integer = Native.Function.Call(Of Integer)(Hash.GET_INTERIOR_AT_COORDS, X, Y, Z)
]]
function natives.INTERIOR.GET_INTERIOR_AT_COORDS(--[[float]] x, --[[float]] y, --[[float]] z) -- Returns Interior
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'INTERIOR.GET_INTERIOR_AT_COORDS' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")

	local result = native_call(0xB0F7F8663821D9C3, x, y, z)
	return result:__tointeger()
end
natives.interior.get_interior_at_coords = natives.INTERIOR.GET_INTERIOR_AT_COORDS

function natives.INTERIOR.ADD_PICKUP_TO_INTERIOR_ROOM_BY_NAME(--[[Pickup]] pickup, --[[const char*]] roomName) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'INTERIOR.ADD_PICKUP_TO_INTERIOR_ROOM_BY_NAME' due to disabled trusted mode")

	assert(type(pickup) == "number", "Arg #1 (pickup) must be a number.")
	assert(type(roomName) == "string", "Arg #2 (roomName) must be a string.")

	local result = native_call(0x3F6167F351168730, pickup, roomName)
end
natives.interior.add_pickup_to_interior_room_by_name = natives.INTERIOR.ADD_PICKUP_TO_INTERIOR_ROOM_BY_NAME

function natives.INTERIOR.PIN_INTERIOR_IN_MEMORY(--[[Interior]] interior) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'INTERIOR.PIN_INTERIOR_IN_MEMORY' due to disabled trusted mode")

	assert(type(interior) == "number", "Arg #1 (interior) must be a number.")

	local result = native_call(0x2CA429C029CCF247, interior)
end
natives.interior.pin_interior_in_memory = natives.INTERIOR.PIN_INTERIOR_IN_MEMORY

--[[
Does something similar to INTERIOR::DISABLE_INTERIOR.

You don't fall through the floor but everything is invisible inside and looks the same as when INTERIOR::DISABLE_INTERIOR is used. Peds behaves normally inside. 
]]
function natives.INTERIOR.UNPIN_INTERIOR(--[[Interior]] interior) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'INTERIOR.UNPIN_INTERIOR' due to disabled trusted mode")

	assert(type(interior) == "number", "Arg #1 (interior) must be a number.")

	local result = native_call(0x261CCE7EED010641, interior)
end
natives.interior.unpin_interior = natives.INTERIOR.UNPIN_INTERIOR

function natives.INTERIOR.IS_INTERIOR_READY(--[[Interior]] interior) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'INTERIOR.IS_INTERIOR_READY' due to disabled trusted mode")

	assert(type(interior) == "number", "Arg #1 (interior) must be a number.")

	local result = native_call(0x6726BDCCC1932F0E, interior)
	return result:__tointeger() ~= 0
end
natives.interior.is_interior_ready = natives.INTERIOR.IS_INTERIOR_READY

--[[
Only used once in the entire game scripts.
Does not actually return anything.
]]
function natives.INTERIOR.SET_INTERIOR_IN_USE(--[[Interior]] interior) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'INTERIOR.SET_INTERIOR_IN_USE' due to disabled trusted mode")

	assert(type(interior) == "number", "Arg #1 (interior) must be a number.")

	local result = native_call(0x4C2330E61D3DEB56, interior)
	return result:__tointeger()
end
natives.interior.set_interior_in_use = natives.INTERIOR.SET_INTERIOR_IN_USE

--[[
Returns the interior ID representing the requested interior at that location (if found?). The supplied interior string is not the same as the one used to load the interior.

Use: INTERIOR::UNPIN_INTERIOR(INTERIOR::GET_INTERIOR_AT_COORDS_WITH_TYPE(x, y, z, interior))

Interior types include: "V_Michael", "V_Franklins", "V_Franklinshouse", etc.. you can find them in the scripts.

Not a very useful native as you could just use GET_INTERIOR_AT_COORDS instead and get the same result, without even having to specify the interior type.
]]
function natives.INTERIOR.GET_INTERIOR_AT_COORDS_WITH_TYPE(--[[float]] x, --[[float]] y, --[[float]] z, --[[const char*]] interiorType) -- Returns Interior
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'INTERIOR.GET_INTERIOR_AT_COORDS_WITH_TYPE' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(interiorType) == "string", "Arg #4 (interiorType) must be a string.")

	local result = native_call(0x05B7A89BD78797FC, x, y, z, interiorType)
	return result:__tointeger()
end
natives.interior.get_interior_at_coords_with_type = natives.INTERIOR.GET_INTERIOR_AT_COORDS_WITH_TYPE

--[[
Hashed version of GET_INTERIOR_AT_COORDS_WITH_TYPE
]]
function natives.INTERIOR.GET_INTERIOR_AT_COORDS_WITH_TYPEHASH(--[[float]] x, --[[float]] y, --[[float]] z, --[[Hash]] typeHash) -- Returns Interior
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'INTERIOR.GET_INTERIOR_AT_COORDS_WITH_TYPEHASH' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(typeHash) == "number", "Arg #4 (typeHash) must be a number.")

	local result = native_call(0xF0F77ADB9F67E79D, x, y, z, typeHash)
	return result:__tointeger()
end
natives.interior.get_interior_at_coords_with_typehash = natives.INTERIOR.GET_INTERIOR_AT_COORDS_WITH_TYPEHASH

function natives.INTERIOR.ACTIVATE_INTERIOR_GROUPS_USING_CAMERA() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'INTERIOR.ACTIVATE_INTERIOR_GROUPS_USING_CAMERA' due to disabled trusted mode")

	local result = native_call(0x483ACA1176CA93F1)
end
natives.interior.activate_interior_groups_using_camera = natives.INTERIOR.ACTIVATE_INTERIOR_GROUPS_USING_CAMERA

--[[
Returns true if the collision at the specified coords is marked as being outside (false if there's an interior)
]]
function natives.INTERIOR.IS_COLLISION_MARKED_OUTSIDE(--[[float]] x, --[[float]] y, --[[float]] z) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'INTERIOR.IS_COLLISION_MARKED_OUTSIDE' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")

	local result = native_call(0xEEA5AC2EDA7C33E8, x, y, z)
	return result:__tointeger() ~= 0
end
natives.interior.is_collision_marked_outside = natives.INTERIOR.IS_COLLISION_MARKED_OUTSIDE

function natives.INTERIOR.GET_INTERIOR_FROM_COLLISION(--[[float]] x, --[[float]] y, --[[float]] z) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'INTERIOR.GET_INTERIOR_FROM_COLLISION' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")

	local result = native_call(0xEC4CF9FCB29A4424, x, y, z)
	return result:__tointeger()
end
natives.interior.get_interior_from_collision = natives.INTERIOR.GET_INTERIOR_FROM_COLLISION

function natives.INTERIOR.ENABLE_STADIUM_PROBES_THIS_FRAME(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'INTERIOR.ENABLE_STADIUM_PROBES_THIS_FRAME' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x7ECDF98587E92DEC, p0)
end
natives.interior.enable_stadium_probes_this_frame = natives.INTERIOR.ENABLE_STADIUM_PROBES_THIS_FRAME

--[[
More info: http://gtaforums.com/topic/836367-adding-props-to-interiors/

Full list of IPLs and interior entity sets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ipls.json
]]
function natives.INTERIOR.ACTIVATE_INTERIOR_ENTITY_SET(--[[Interior]] interior, --[[const char*]] entitySetName) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'INTERIOR.ACTIVATE_INTERIOR_ENTITY_SET' due to disabled trusted mode")

	assert(type(interior) == "number", "Arg #1 (interior) must be a number.")
	assert(type(entitySetName) == "string", "Arg #2 (entitySetName) must be a string.")

	local result = native_call(0x55E86AF2712B36A1, interior, entitySetName)
end
natives.interior.activate_interior_entity_set = natives.INTERIOR.ACTIVATE_INTERIOR_ENTITY_SET

--[[
Full list of IPLs and interior entity sets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ipls.json
]]
function natives.INTERIOR.DEACTIVATE_INTERIOR_ENTITY_SET(--[[Interior]] interior, --[[const char*]] entitySetName) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'INTERIOR.DEACTIVATE_INTERIOR_ENTITY_SET' due to disabled trusted mode")

	assert(type(interior) == "number", "Arg #1 (interior) must be a number.")
	assert(type(entitySetName) == "string", "Arg #2 (entitySetName) must be a string.")

	local result = native_call(0x420BD37289EEE162, interior, entitySetName)
end
natives.interior.deactivate_interior_entity_set = natives.INTERIOR.DEACTIVATE_INTERIOR_ENTITY_SET

--[[
Full list of IPLs and interior entity sets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ipls.json
]]
function natives.INTERIOR.IS_INTERIOR_ENTITY_SET_ACTIVE(--[[Interior]] interior, --[[const char*]] entitySetName) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'INTERIOR.IS_INTERIOR_ENTITY_SET_ACTIVE' due to disabled trusted mode")

	assert(type(interior) == "number", "Arg #1 (interior) must be a number.")
	assert(type(entitySetName) == "string", "Arg #2 (entitySetName) must be a string.")

	local result = native_call(0x35F7DD45E8C0A16D, interior, entitySetName)
	return result:__tointeger() ~= 0
end
natives.interior.is_interior_entity_set_active = natives.INTERIOR.IS_INTERIOR_ENTITY_SET_ACTIVE

--[[
Full list of IPLs and interior entity sets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ipls.json
]]
function natives.INTERIOR.SET_INTERIOR_ENTITY_SET_TINT_INDEX(--[[Interior]] interior, --[[const char*]] entitySetName, --[[int]] color) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'INTERIOR.SET_INTERIOR_ENTITY_SET_TINT_INDEX' due to disabled trusted mode")

	assert(type(interior) == "number", "Arg #1 (interior) must be a number.")
	assert(type(entitySetName) == "string", "Arg #2 (entitySetName) must be a string.")
	assert(type(color) == "number", "Arg #3 (color) must be a number.")

	local result = native_call(0xC1F1920BAF281317, interior, entitySetName, color)
end
natives.interior.set_interior_entity_set_tint_index = natives.INTERIOR.SET_INTERIOR_ENTITY_SET_TINT_INDEX

function natives.INTERIOR.REFRESH_INTERIOR(--[[Interior]] interior) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'INTERIOR.REFRESH_INTERIOR' due to disabled trusted mode")

	assert(type(interior) == "number", "Arg #1 (interior) must be a number.")

	local result = native_call(0x41F37C3427C75AE0, interior)
end
natives.interior.refresh_interior = natives.INTERIOR.REFRESH_INTERIOR

--[[
This is the native that is used to hide the exterior of GTA Online apartment buildings when you are inside an apartment.

More info: http://gtaforums.com/topic/836301-hiding-gta-online-apartment-exteriors/
]]
function natives.INTERIOR.ENABLE_EXTERIOR_CULL_MODEL_THIS_FRAME(--[[Hash]] mapObjectHash) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'INTERIOR.ENABLE_EXTERIOR_CULL_MODEL_THIS_FRAME' due to disabled trusted mode")

	assert(type(mapObjectHash) == "number", "Arg #1 (mapObjectHash) must be a number.")

	local result = native_call(0xA97F257D0151A6AB, mapObjectHash)
end
natives.interior.enable_exterior_cull_model_this_frame = natives.INTERIOR.ENABLE_EXTERIOR_CULL_MODEL_THIS_FRAME

function natives.INTERIOR.ENABLE_SHADOW_CULL_MODEL_THIS_FRAME(--[[Hash]] mapObjectHash) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'INTERIOR.ENABLE_SHADOW_CULL_MODEL_THIS_FRAME' due to disabled trusted mode")

	assert(type(mapObjectHash) == "number", "Arg #1 (mapObjectHash) must be a number.")

	local result = native_call(0x50C375537449F369, mapObjectHash)
end
natives.interior.enable_shadow_cull_model_this_frame = natives.INTERIOR.ENABLE_SHADOW_CULL_MODEL_THIS_FRAME

--[[
Example: 
This removes the interior from the strip club and when trying to walk inside the player just falls:

INTERIOR::DISABLE_INTERIOR(118018, true);
]]
function natives.INTERIOR.DISABLE_INTERIOR(--[[Interior]] interior, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'INTERIOR.DISABLE_INTERIOR' due to disabled trusted mode")

	assert(type(interior) == "number", "Arg #1 (interior) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x6170941419D7D8EC, interior, toggle)
end
natives.interior.disable_interior = natives.INTERIOR.DISABLE_INTERIOR

function natives.INTERIOR.IS_INTERIOR_DISABLED(--[[Interior]] interior) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'INTERIOR.IS_INTERIOR_DISABLED' due to disabled trusted mode")

	assert(type(interior) == "number", "Arg #1 (interior) must be a number.")

	local result = native_call(0xBC5115A5A939DD15, interior)
	return result:__tointeger() ~= 0
end
natives.interior.is_interior_disabled = natives.INTERIOR.IS_INTERIOR_DISABLED

--[[
Does something similar to INTERIOR::DISABLE_INTERIOR
]]
function natives.INTERIOR.CAP_INTERIOR(--[[Interior]] interior, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'INTERIOR.CAP_INTERIOR' due to disabled trusted mode")

	assert(type(interior) == "number", "Arg #1 (interior) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xD9175F941610DB54, interior, toggle)
end
natives.interior.cap_interior = natives.INTERIOR.CAP_INTERIOR

function natives.INTERIOR.IS_INTERIOR_CAPPED(--[[Interior]] interior) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'INTERIOR.IS_INTERIOR_CAPPED' due to disabled trusted mode")

	assert(type(interior) == "number", "Arg #1 (interior) must be a number.")

	local result = native_call(0x92BAC8ACF88CEC26, interior)
	return result:__tointeger() ~= 0
end
natives.interior.is_interior_capped = natives.INTERIOR.IS_INTERIOR_CAPPED

function natives.INTERIOR.DISABLE_METRO_SYSTEM(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'INTERIOR.DISABLE_METRO_SYSTEM' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x9E6542F0CE8E70A3, toggle)
end
natives.interior.disable_metro_system = natives.INTERIOR.DISABLE_METRO_SYSTEM

--[[
Jenkins hash _might_ be 0xFC227584.
]]
function natives.INTERIOR.SET_IS_EXTERIOR_ONLY(--[[Entity]] entity, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'INTERIOR.SET_IS_EXTERIOR_ONLY' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x7241CCB7D020DB69, entity, toggle)
end
natives.interior.set_is_exterior_only = natives.INTERIOR.SET_IS_EXTERIOR_ONLY


natives.ITEMSET = {}
natives.itemset = {}

function natives.ITEMSET.CREATE_ITEMSET(--[[BOOL]] p0) -- Returns ScrHandle
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ITEMSET.CREATE_ITEMSET' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0x35AD299F50D91B24, p0)
	return result:__tointeger()
end
natives.itemset.create_itemset = natives.ITEMSET.CREATE_ITEMSET

function natives.ITEMSET.DESTROY_ITEMSET(--[[ScrHandle]] itemset) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ITEMSET.DESTROY_ITEMSET' due to disabled trusted mode")

	assert(type(itemset) == "number", "Arg #1 (itemset) must be a number.")

	local result = native_call(0xDE18220B1C183EDA, itemset)
end
natives.itemset.destroy_itemset = natives.ITEMSET.DESTROY_ITEMSET

function natives.ITEMSET.IS_ITEMSET_VALID(--[[ScrHandle]] itemset) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ITEMSET.IS_ITEMSET_VALID' due to disabled trusted mode")

	assert(type(itemset) == "number", "Arg #1 (itemset) must be a number.")

	local result = native_call(0xB1B1EA596344DFAB, itemset)
	return result:__tointeger() ~= 0
end
natives.itemset.is_itemset_valid = natives.ITEMSET.IS_ITEMSET_VALID

function natives.ITEMSET.ADD_TO_ITEMSET(--[[ScrHandle]] item, --[[ScrHandle]] itemset) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ITEMSET.ADD_TO_ITEMSET' due to disabled trusted mode")

	assert(type(item) == "number", "Arg #1 (item) must be a number.")
	assert(type(itemset) == "number", "Arg #2 (itemset) must be a number.")

	local result = native_call(0xE3945201F14637DD, item, itemset)
	return result:__tointeger() ~= 0
end
natives.itemset.add_to_itemset = natives.ITEMSET.ADD_TO_ITEMSET

function natives.ITEMSET.REMOVE_FROM_ITEMSET(--[[ScrHandle]] item, --[[ScrHandle]] itemset) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ITEMSET.REMOVE_FROM_ITEMSET' due to disabled trusted mode")

	assert(type(item) == "number", "Arg #1 (item) must be a number.")
	assert(type(itemset) == "number", "Arg #2 (itemset) must be a number.")

	local result = native_call(0x25E68244B0177686, item, itemset)
end
natives.itemset.remove_from_itemset = natives.ITEMSET.REMOVE_FROM_ITEMSET

function natives.ITEMSET.GET_ITEMSET_SIZE(--[[ScrHandle]] itemset) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ITEMSET.GET_ITEMSET_SIZE' due to disabled trusted mode")

	assert(type(itemset) == "number", "Arg #1 (itemset) must be a number.")

	local result = native_call(0xD9127E83ABF7C631, itemset)
	return result:__tointeger()
end
natives.itemset.get_itemset_size = natives.ITEMSET.GET_ITEMSET_SIZE

function natives.ITEMSET.GET_INDEXED_ITEM_IN_ITEMSET(--[[int]] index, --[[ScrHandle]] itemset) -- Returns ScrHandle
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ITEMSET.GET_INDEXED_ITEM_IN_ITEMSET' due to disabled trusted mode")

	assert(type(index) == "number", "Arg #1 (index) must be a number.")
	assert(type(itemset) == "number", "Arg #2 (itemset) must be a number.")

	local result = native_call(0x7A197E2521EE2BAB, index, itemset)
	return result:__tointeger()
end
natives.itemset.get_indexed_item_in_itemset = natives.ITEMSET.GET_INDEXED_ITEM_IN_ITEMSET

function natives.ITEMSET.IS_IN_ITEMSET(--[[ScrHandle]] item, --[[ScrHandle]] itemset) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ITEMSET.IS_IN_ITEMSET' due to disabled trusted mode")

	assert(type(item) == "number", "Arg #1 (item) must be a number.")
	assert(type(itemset) == "number", "Arg #2 (itemset) must be a number.")

	local result = native_call(0x2D0FC594D1E9C107, item, itemset)
	return result:__tointeger() ~= 0
end
natives.itemset.is_in_itemset = natives.ITEMSET.IS_IN_ITEMSET

function natives.ITEMSET.CLEAN_ITEMSET(--[[ScrHandle]] itemset) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ITEMSET.CLEAN_ITEMSET' due to disabled trusted mode")

	assert(type(itemset) == "number", "Arg #1 (itemset) must be a number.")

	local result = native_call(0x41BC0D722FC04221, itemset)
end
natives.itemset.clean_itemset = natives.ITEMSET.CLEAN_ITEMSET


natives.LOADINGSCREEN = {}
natives.loadingscreen = {}

--[[
MulleDK19: This function is hard-coded to always return 0.
]]
function natives.LOADINGSCREEN.LOBBY_AUTO_MULTIPLAYER_MENU() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'LOADINGSCREEN.LOBBY_AUTO_MULTIPLAYER_MENU' due to disabled trusted mode")

	local result = native_call(0xF2CA003F167E21D2)
	return result:__tointeger()
end
natives.loadingscreen.lobby_auto_multiplayer_menu = natives.LOADINGSCREEN.LOBBY_AUTO_MULTIPLAYER_MENU

function natives.LOADINGSCREEN.LOBBY_AUTO_MULTIPLAYER_FREEMODE() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'LOADINGSCREEN.LOBBY_AUTO_MULTIPLAYER_FREEMODE' due to disabled trusted mode")

	local result = native_call(0xEF7D17BC6C85264C)
	return result:__tointeger() ~= 0
end
natives.loadingscreen.lobby_auto_multiplayer_freemode = natives.LOADINGSCREEN.LOBBY_AUTO_MULTIPLAYER_FREEMODE

function natives.LOADINGSCREEN.LOBBY_SET_AUTO_MULTIPLAYER(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'LOADINGSCREEN.LOBBY_SET_AUTO_MULTIPLAYER' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0xB0C56BD3D808D863, toggle)
end
natives.loadingscreen.lobby_set_auto_multiplayer = natives.LOADINGSCREEN.LOBBY_SET_AUTO_MULTIPLAYER

function natives.LOADINGSCREEN.LOBBY_AUTO_MULTIPLAYER_EVENT() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'LOADINGSCREEN.LOBBY_AUTO_MULTIPLAYER_EVENT' due to disabled trusted mode")

	local result = native_call(0x8AA464D4E0F6ACCD)
	return result:__tointeger() ~= 0
end
natives.loadingscreen.lobby_auto_multiplayer_event = natives.LOADINGSCREEN.LOBBY_AUTO_MULTIPLAYER_EVENT

function natives.LOADINGSCREEN.LOBBY_SET_AUTO_MULTIPLAYER_EVENT(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'LOADINGSCREEN.LOBBY_SET_AUTO_MULTIPLAYER_EVENT' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0xFC309E94546FCDB5, toggle)
end
natives.loadingscreen.lobby_set_auto_multiplayer_event = natives.LOADINGSCREEN.LOBBY_SET_AUTO_MULTIPLAYER_EVENT

function natives.LOADINGSCREEN.LOBBY_AUTO_MULTIPLAYER_RANDOM_JOB() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'LOADINGSCREEN.LOBBY_AUTO_MULTIPLAYER_RANDOM_JOB' due to disabled trusted mode")

	local result = native_call(0xC6DC823253FBB366)
	return result:__tointeger() ~= 0
end
natives.loadingscreen.lobby_auto_multiplayer_random_job = natives.LOADINGSCREEN.LOBBY_AUTO_MULTIPLAYER_RANDOM_JOB

function natives.LOADINGSCREEN.LOBBY_SET_AUTO_MP_RANDOM_JOB(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'LOADINGSCREEN.LOBBY_SET_AUTO_MP_RANDOM_JOB' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0xC7E7181C09F33B69, toggle)
end
natives.loadingscreen.lobby_set_auto_mp_random_job = natives.LOADINGSCREEN.LOBBY_SET_AUTO_MP_RANDOM_JOB

function natives.LOADINGSCREEN.SHUTDOWN_SESSION_CLEARS_AUTO_MULTIPLAYER(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'LOADINGSCREEN.SHUTDOWN_SESSION_CLEARS_AUTO_MULTIPLAYER' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0xFA1E0E893D915215, toggle)
end
natives.loadingscreen.shutdown_session_clears_auto_multiplayer = natives.LOADINGSCREEN.SHUTDOWN_SESSION_CLEARS_AUTO_MULTIPLAYER


natives.LOCALIZATION = {}
natives.localization = {}

--[[
Same return values as GET_CURRENT_LANGUAGE
]]
function natives.LOCALIZATION.LOCALIZATION_GET_SYSTEM_LANGUAGE() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'LOCALIZATION.LOCALIZATION_GET_SYSTEM_LANGUAGE' due to disabled trusted mode")

	local result = native_call(0x497420E022796B3F)
	return result:__tointeger()
end
natives.localization.localization_get_system_language = natives.LOCALIZATION.LOCALIZATION_GET_SYSTEM_LANGUAGE

--[[
0 = american (en-US)
1 = french (fr-FR)
2 = german (de-DE)
3 = italian (it-IT)
4 = spanish (es-ES)
5 = brazilian (pt-BR)
6 = polish (pl-PL)
7 = russian (ru-RU)
8 = korean (ko-KR)
9 = chinesetrad (zh-TW)
10 = japanese (ja-JP)
11 = mexican (es-MX)
12 = chinesesimp (zh-CN)
]]
function natives.LOCALIZATION.GET_CURRENT_LANGUAGE() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'LOCALIZATION.GET_CURRENT_LANGUAGE' due to disabled trusted mode")

	local result = native_call(0x2BDD44CC428A7EAE)
	return result:__tointeger()
end
natives.localization.get_current_language = natives.LOCALIZATION.GET_CURRENT_LANGUAGE

--[[
Possible return values: 0, 1, 2
]]
function natives.LOCALIZATION.LOCALIZATION_GET_SYSTEM_DATE_TYPE() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'LOCALIZATION.LOCALIZATION_GET_SYSTEM_DATE_TYPE' due to disabled trusted mode")

	local result = native_call(0xA8AE43AEC1A61314)
	return result:__tointeger()
end
natives.localization.localization_get_system_date_type = natives.LOCALIZATION.LOCALIZATION_GET_SYSTEM_DATE_TYPE


natives.MISC = {}
natives.misc = {}

function natives.MISC.GET_ALLOCATED_STACK_SIZE() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.GET_ALLOCATED_STACK_SIZE' due to disabled trusted mode")

	local result = native_call(0x8B3CA62B1EF19B62)
	return result:__tointeger()
end
natives.misc.get_allocated_stack_size = natives.MISC.GET_ALLOCATED_STACK_SIZE

function natives.MISC.GET_NUMBER_OF_FREE_STACKS_OF_THIS_SIZE(--[[int]] stackSize) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.GET_NUMBER_OF_FREE_STACKS_OF_THIS_SIZE' due to disabled trusted mode")

	assert(type(stackSize) == "number", "Arg #1 (stackSize) must be a number.")

	local result = native_call(0xFEAD16FC8F9DFC0F, stackSize)
	return result:__tointeger()
end
natives.misc.get_number_of_free_stacks_of_this_size = natives.MISC.GET_NUMBER_OF_FREE_STACKS_OF_THIS_SIZE

function natives.MISC.SET_RANDOM_SEED(--[[int]] seed) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.SET_RANDOM_SEED' due to disabled trusted mode")

	assert(type(seed) == "number", "Arg #1 (seed) must be a number.")

	local result = native_call(0x444D98F98C11F3EC, seed)
end
natives.misc.set_random_seed = natives.MISC.SET_RANDOM_SEED

--[[
Maximum value is 1.
At a value of 0 the game will still run at a minimum time scale.

Slow Motion 1: 0.6
Slow Motion 2: 0.4
Slow Motion 3: 0.2
]]
function natives.MISC.SET_TIME_SCALE(--[[float]] timeScale) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.SET_TIME_SCALE' due to disabled trusted mode")

	assert(type(timeScale) == "number", "Arg #1 (timeScale) must be a number.")

	local result = native_call(0x1D408577D440E81E, timeScale)
end
natives.misc.set_time_scale = natives.MISC.SET_TIME_SCALE

--[[
If true, the player can't save the game. 


If the parameter is true, sets the mission flag to true, if the parameter is false, the function does nothing at all.

^ also, if the mission flag is already set, the function does nothing at all
]]
function natives.MISC.SET_MISSION_FLAG(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.SET_MISSION_FLAG' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0xC4301E5121A0ED73, toggle)
end
natives.misc.set_mission_flag = natives.MISC.SET_MISSION_FLAG

function natives.MISC.GET_MISSION_FLAG() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.GET_MISSION_FLAG' due to disabled trusted mode")

	local result = native_call(0xA33CDCCDA663159E)
	return result:__tointeger() ~= 0
end
natives.misc.get_mission_flag = natives.MISC.GET_MISSION_FLAG

--[[
If the parameter is true, sets the random event flag to true, if the parameter is false, the function does nothing at all.
Does nothing if the mission flag is set.
]]
function natives.MISC.SET_RANDOM_EVENT_FLAG(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.SET_RANDOM_EVENT_FLAG' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x971927086CFD2158, toggle)
end
natives.misc.set_random_event_flag = natives.MISC.SET_RANDOM_EVENT_FLAG

function natives.MISC.GET_RANDOM_EVENT_FLAG() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.GET_RANDOM_EVENT_FLAG' due to disabled trusted mode")

	local result = native_call(0xD2D57F1D764117B1)
	return result:__tointeger() ~= 0
end
natives.misc.get_random_event_flag = natives.MISC.GET_RANDOM_EVENT_FLAG

--[[
Returns pointer to an empty string.
]]
function natives.MISC.GET_CONTENT_TO_LOAD() -- Returns const char*
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.GET_CONTENT_TO_LOAD' due to disabled trusted mode")

	local result = native_call(0x24DA7D7667FD7B09)
	return result:__tostring(true)
end
natives.misc.get_content_to_load = natives.MISC.GET_CONTENT_TO_LOAD

--[[
Does nothing (it's a nullsub). Seems to be PS4 specific.
]]
function natives.MISC.ACTIVITY_FEED_CREATE(--[[const char*]] p0, --[[const char*]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.ACTIVITY_FEED_CREATE' due to disabled trusted mode")

	assert(type(p0) == "string", "Arg #1 (p0) must be a string.")
	assert(type(p1) == "string", "Arg #2 (p1) must be a string.")

	local result = native_call(0x4DCDF92BF64236CD, p0, p1)
end
natives.misc.activity_feed_create = natives.MISC.ACTIVITY_FEED_CREATE

--[[
Does nothing (it's a nullsub). Seems to be PS4 specific.
]]
function natives.MISC.ACTIVITY_FEED_ADD_SUBSTRING_TO_CAPTION(--[[const char*]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.ACTIVITY_FEED_ADD_SUBSTRING_TO_CAPTION' due to disabled trusted mode")

	assert(type(p0) == "string", "Arg #1 (p0) must be a string.")

	local result = native_call(0x31125FD509D9043F, p0)
end
natives.misc.activity_feed_add_substring_to_caption = natives.MISC.ACTIVITY_FEED_ADD_SUBSTRING_TO_CAPTION

--[[
Does nothing (it's a nullsub). Seems to be PS4 specific.
]]
function natives.MISC.ACTIVITY_FEED_ADD_LITERAL_SUBSTRING_TO_CAPTION(--[[const char*]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.ACTIVITY_FEED_ADD_LITERAL_SUBSTRING_TO_CAPTION' due to disabled trusted mode")

	assert(type(p0) == "string", "Arg #1 (p0) must be a string.")

	local result = native_call(0xEBD3205A207939ED, p0)
end
natives.misc.activity_feed_add_literal_substring_to_caption = natives.MISC.ACTIVITY_FEED_ADD_LITERAL_SUBSTRING_TO_CAPTION

--[[
Does nothing (it's a nullsub). Seems to be PS4 specific.
]]
function natives.MISC.ACTIVITY_FEED_ADD_INT_TO_CAPTION(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.ACTIVITY_FEED_ADD_INT_TO_CAPTION' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x97E7E2C04245115B, p0)
end
natives.misc.activity_feed_add_int_to_caption = natives.MISC.ACTIVITY_FEED_ADD_INT_TO_CAPTION

--[[
Does nothing (it's a nullsub). Seems to be PS4 specific.
]]
function natives.MISC.ACTIVITY_FEED_LARGE_IMAGE_URL(--[[const char*]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.ACTIVITY_FEED_LARGE_IMAGE_URL' due to disabled trusted mode")

	assert(type(p0) == "string", "Arg #1 (p0) must be a string.")

	local result = native_call(0x916CA67D26FD1E37, p0)
end
natives.misc.activity_feed_large_image_url = natives.MISC.ACTIVITY_FEED_LARGE_IMAGE_URL

--[[
Does nothing (it's a nullsub). Seems to be PS4 specific.
]]
function natives.MISC.ACTIVITY_FEED_ACTION_START_WITH_COMMAND_LINE(--[[const char*]] p0, --[[const char*]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.ACTIVITY_FEED_ACTION_START_WITH_COMMAND_LINE' due to disabled trusted mode")

	assert(type(p0) == "string", "Arg #1 (p0) must be a string.")
	assert(type(p1) == "string", "Arg #2 (p1) must be a string.")

	local result = native_call(0xEB078CA2B5E82ADD, p0, p1)
end
natives.misc.activity_feed_action_start_with_command_line = natives.MISC.ACTIVITY_FEED_ACTION_START_WITH_COMMAND_LINE

--[[
Does nothing (it's a nullsub). Seems to be PS4 specific.
]]
function natives.MISC.ACTIVITY_FEED_ACTION_START_WITH_COMMAND_LINE_ADD(--[[const char*]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.ACTIVITY_FEED_ACTION_START_WITH_COMMAND_LINE_ADD' due to disabled trusted mode")

	assert(type(p0) == "string", "Arg #1 (p0) must be a string.")

	local result = native_call(0x703CC7F60CBB2B57, p0)
end
natives.misc.activity_feed_action_start_with_command_line_add = natives.MISC.ACTIVITY_FEED_ACTION_START_WITH_COMMAND_LINE_ADD

--[[
Does nothing (it's a nullsub). Seems to be PS4 specific.
]]
function natives.MISC.ACTIVITY_FEED_POST() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.ACTIVITY_FEED_POST' due to disabled trusted mode")

	local result = native_call(0x8951EB9C6906D3C8)
end
natives.misc.activity_feed_post = natives.MISC.ACTIVITY_FEED_POST

--[[
Does nothing (it's a nullsub). Seems to be PS4 specific.

Used only once in the scripts (ingamehud) with p0 = "AF_GAMEMODE"
]]
function natives.MISC.ACTIVITY_FEED_ONLINE_PLAYED_WITH_POST(--[[const char*]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.ACTIVITY_FEED_ONLINE_PLAYED_WITH_POST' due to disabled trusted mode")

	assert(type(p0) == "string", "Arg #1 (p0) must be a string.")

	local result = native_call(0xBA4B8D83BDC75551, p0)
end
natives.misc.activity_feed_online_played_with_post = natives.MISC.ACTIVITY_FEED_ONLINE_PLAYED_WITH_POST

--[[
Hardcoded to return false.
]]
function natives.MISC.HAS_RESUMED_FROM_SUSPEND() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.HAS_RESUMED_FROM_SUSPEND' due to disabled trusted mode")

	local result = native_call(0xE8B9C0EC9E183F35)
	return result:__tointeger() ~= 0
end
natives.misc.has_resumed_from_suspend = natives.MISC.HAS_RESUMED_FROM_SUSPEND

--[[
Sets GtaThread+0x14A
]]
function natives.MISC.SET_SCRIPT_HIGH_PRIO(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.SET_SCRIPT_HIGH_PRIO' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x65D2EBB47E1CEC21, toggle)
end
natives.misc.set_script_high_prio = natives.MISC.SET_SCRIPT_HIGH_PRIO

--[[
Sets bit 3 in GtaThread+0x150
]]
function natives.MISC.SET_THIS_IS_A_TRIGGER_SCRIPT(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.SET_THIS_IS_A_TRIGGER_SCRIPT' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x6F2135B6129620C1, toggle)
end
natives.misc.set_this_is_a_trigger_script = natives.MISC.SET_THIS_IS_A_TRIGGER_SCRIPT

function natives.MISC.INFORM_CODE_OF_CONTENT_ID_OF_CURRENT_UGC_MISSION(--[[const char*]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.INFORM_CODE_OF_CONTENT_ID_OF_CURRENT_UGC_MISSION' due to disabled trusted mode")

	assert(type(p0) == "string", "Arg #1 (p0) must be a string.")

	local result = native_call(0x8D74E26F54B4E5C3, p0)
end
natives.misc.inform_code_of_content_id_of_current_ugc_mission = natives.MISC.INFORM_CODE_OF_CONTENT_ID_OF_CURRENT_UGC_MISSION

function natives.MISC.GET_BASE_ELEMENT_LOCATION_FROM_METADATA_BLOCK(--[[Any*]] p0, --[[Any*]] p1, --[[Any]] p2, --[[BOOL]] p3) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.GET_BASE_ELEMENT_LOCATION_FROM_METADATA_BLOCK' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")
	assert(type(p1) == "userdata", "Arg #2 (p1) must be a userdata.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "boolean", "Arg #4 (p3) must be a boolean.")

	local result = native_call(0xB335F761606DB47C, p0, p1, p2, p3)
	return result:__tointeger() ~= 0
end
natives.misc.get_base_element_location_from_metadata_block = natives.MISC.GET_BASE_ELEMENT_LOCATION_FROM_METADATA_BLOCK

--[[
Returns current weather name hash
]]
function natives.MISC.GET_PREV_WEATHER_TYPE_HASH_NAME() -- Returns Hash
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.GET_PREV_WEATHER_TYPE_HASH_NAME' due to disabled trusted mode")

	local result = native_call(0x564B884A05EC45A3)
	return result:__tointeger()
end
natives.misc.get_prev_weather_type_hash_name = natives.MISC.GET_PREV_WEATHER_TYPE_HASH_NAME

--[[
Returns weather name hash
]]
function natives.MISC.GET_NEXT_WEATHER_TYPE_HASH_NAME() -- Returns Hash
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.GET_NEXT_WEATHER_TYPE_HASH_NAME' due to disabled trusted mode")

	local result = native_call(0x711327CD09C8F162)
	return result:__tointeger()
end
natives.misc.get_next_weather_type_hash_name = natives.MISC.GET_NEXT_WEATHER_TYPE_HASH_NAME

function natives.MISC.IS_PREV_WEATHER_TYPE(--[[const char*]] weatherType) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.IS_PREV_WEATHER_TYPE' due to disabled trusted mode")

	assert(type(weatherType) == "string", "Arg #1 (weatherType) must be a string.")

	local result = native_call(0x44F28F86433B10A9, weatherType)
	return result:__tointeger() ~= 0
end
natives.misc.is_prev_weather_type = natives.MISC.IS_PREV_WEATHER_TYPE

function natives.MISC.IS_NEXT_WEATHER_TYPE(--[[const char*]] weatherType) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.IS_NEXT_WEATHER_TYPE' due to disabled trusted mode")

	assert(type(weatherType) == "string", "Arg #1 (weatherType) must be a string.")

	local result = native_call(0x2FAA3A30BEC0F25D, weatherType)
	return result:__tointeger() ~= 0
end
natives.misc.is_next_weather_type = natives.MISC.IS_NEXT_WEATHER_TYPE

--[[
The following weatherTypes are used in the scripts:
"CLEAR"
"EXTRASUNNY"
"CLOUDS"
"OVERCAST"
"RAIN"
"CLEARING"
"THUNDER"
"SMOG"
"FOGGY"
"XMAS"
"SNOW"
"SNOWLIGHT"
"BLIZZARD"
"HALLOWEEN"
"NEUTRAL"
]]
function natives.MISC.SET_WEATHER_TYPE_PERSIST(--[[const char*]] weatherType) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.SET_WEATHER_TYPE_PERSIST' due to disabled trusted mode")

	assert(type(weatherType) == "string", "Arg #1 (weatherType) must be a string.")

	local result = native_call(0x704983DF373B198F, weatherType)
end
natives.misc.set_weather_type_persist = natives.MISC.SET_WEATHER_TYPE_PERSIST

--[[
The following weatherTypes are used in the scripts:
"CLEAR"
"EXTRASUNNY"
"CLOUDS"
"OVERCAST"
"RAIN"
"CLEARING"
"THUNDER"
"SMOG"
"FOGGY"
"XMAS"
"SNOW"
"SNOWLIGHT"
"BLIZZARD"
"HALLOWEEN"
"NEUTRAL"
]]
function natives.MISC.SET_WEATHER_TYPE_NOW_PERSIST(--[[const char*]] weatherType) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.SET_WEATHER_TYPE_NOW_PERSIST' due to disabled trusted mode")

	assert(type(weatherType) == "string", "Arg #1 (weatherType) must be a string.")

	local result = native_call(0xED712CA327900C8A, weatherType)
end
natives.misc.set_weather_type_now_persist = natives.MISC.SET_WEATHER_TYPE_NOW_PERSIST

--[[
The following weatherTypes are used in the scripts:
"CLEAR"
"EXTRASUNNY"
"CLOUDS"
"OVERCAST"
"RAIN"
"CLEARING"
"THUNDER"
"SMOG"
"FOGGY"
"XMAS"
"SNOW"
"SNOWLIGHT"
"BLIZZARD"
"HALLOWEEN"
"NEUTRAL"
]]
function natives.MISC.SET_WEATHER_TYPE_NOW(--[[const char*]] weatherType) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.SET_WEATHER_TYPE_NOW' due to disabled trusted mode")

	assert(type(weatherType) == "string", "Arg #1 (weatherType) must be a string.")

	local result = native_call(0x29B487C359E19889, weatherType)
end
natives.misc.set_weather_type_now = natives.MISC.SET_WEATHER_TYPE_NOW

function natives.MISC.SET_WEATHER_TYPE_OVERTIME_PERSIST(--[[const char*]] weatherType, --[[float]] time) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.SET_WEATHER_TYPE_OVERTIME_PERSIST' due to disabled trusted mode")

	assert(type(weatherType) == "string", "Arg #1 (weatherType) must be a string.")
	assert(type(time) == "number", "Arg #2 (time) must be a number.")

	local result = native_call(0xFB5045B7C42B75BF, weatherType, time)
end
natives.misc.set_weather_type_overtime_persist = natives.MISC.SET_WEATHER_TYPE_OVERTIME_PERSIST

function natives.MISC.SET_RANDOM_WEATHER_TYPE() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.SET_RANDOM_WEATHER_TYPE' due to disabled trusted mode")

	local result = native_call(0x8B05F884CF7E8020)
end
natives.misc.set_random_weather_type = natives.MISC.SET_RANDOM_WEATHER_TYPE

function natives.MISC.CLEAR_WEATHER_TYPE_PERSIST() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.CLEAR_WEATHER_TYPE_PERSIST' due to disabled trusted mode")

	local result = native_call(0xCCC39339BEF76CF5)
end
natives.misc.clear_weather_type_persist = natives.MISC.CLEAR_WEATHER_TYPE_PERSIST

function natives.MISC.CLEAR_WEATHER_TYPE_NOW_PERSIST_NETWORK(--[[int]] milliseconds) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.CLEAR_WEATHER_TYPE_NOW_PERSIST_NETWORK' due to disabled trusted mode")

	assert(type(milliseconds) == "number", "Arg #1 (milliseconds) must be a number.")

	local result = native_call(0x0CF97F497FE7D048, milliseconds)
end
natives.misc.clear_weather_type_now_persist_network = natives.MISC.CLEAR_WEATHER_TYPE_NOW_PERSIST_NETWORK

function natives.MISC.GET_CURR_WEATHER_STATE(--[[Hash*]] weatherType1, --[[Hash*]] weatherType2, --[[float*]] percentWeather2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.GET_CURR_WEATHER_STATE' due to disabled trusted mode")

	assert(type(weatherType1) == "userdata", "Arg #1 (weatherType1) must be a userdata.")
	assert(type(weatherType2) == "userdata", "Arg #2 (weatherType2) must be a userdata.")
	assert(type(percentWeather2) == "userdata", "Arg #3 (percentWeather2) must be a userdata.")

	local result = native_call(0xF3BBE884A14BB413, weatherType1, weatherType2, percentWeather2)
end
natives.misc.get_curr_weather_state = natives.MISC.GET_CURR_WEATHER_STATE

--[[
Mixes two weather types. If percentWeather2 is set to 0.0f, then the weather will be entirely of weatherType1, if it is set to 1.0f it will be entirely of weatherType2. If it's set somewhere in between, there will be a mixture of weather behaviors. To test, try this in the RPH console, and change the float to different values between 0 and 1:

execute "NativeFunction.Natives.x578C752848ECFA0C(Game.GetHashKey(""RAIN""), Game.GetHashKey(""SMOG""), 0.50f);

Note that unlike most of the other weather natives, this native takes the hash of the weather name, not the plain string. These are the weather names and their hashes:

CLEAR  0x36A83D84
EXTRASUNNY  0x97AA0A79
CLOUDS  0x30FDAF5C
OVERCAST    0xBB898D2D
RAIN    0x54A69840
CLEARING    0x6DB1A50D
THUNDER 0xB677829F
SMOG    0x10DCF4B5
FOGGY   0xAE737644
XMAS    0xAAC9C895
SNOWLIGHT   0x23FB812B
BLIZZARD    0x27EA2814





/* OLD INVALID INFO BELOW */
Not tested. Based purely on disassembly. Instantly sets the weather to sourceWeather, then transitions to targetWeather over the specified transitionTime in seconds.

If an invalid hash is specified for sourceWeather, the current weather type will be used.
If an invalid hash is specified for targetWeather, the next weather type will be used.
If an invalid hash is specified for both sourceWeather and targetWeather, the function just changes the transition time of the current transition.
]]
function natives.MISC.SET_CURR_WEATHER_STATE(--[[Hash]] weatherType1, --[[Hash]] weatherType2, --[[float]] percentWeather2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.SET_CURR_WEATHER_STATE' due to disabled trusted mode")

	assert(type(weatherType1) == "number", "Arg #1 (weatherType1) must be a number.")
	assert(type(weatherType2) == "number", "Arg #2 (weatherType2) must be a number.")
	assert(type(percentWeather2) == "number", "Arg #3 (percentWeather2) must be a number.")

	local result = native_call(0x578C752848ECFA0C, weatherType1, weatherType2, percentWeather2)
end
natives.misc.set_curr_weather_state = natives.MISC.SET_CURR_WEATHER_STATE

--[[
Appears to have an optional bool parameter that is unused in the scripts.

If you pass true, something will be set to zero.
]]
function natives.MISC.SET_OVERRIDE_WEATHER(--[[const char*]] weatherType) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.SET_OVERRIDE_WEATHER' due to disabled trusted mode")

	assert(type(weatherType) == "string", "Arg #1 (weatherType) must be a string.")

	local result = native_call(0xA43D5C6FE51ADBEF, weatherType)
end
natives.misc.set_override_weather = natives.MISC.SET_OVERRIDE_WEATHER

--[[
Identical to SET_OVERRIDE_WEATHER but has an additional BOOL param that sets some weather var to 0 if true
]]
function natives.MISC.SET_OVERRIDE_WEATHEREX(--[[const char*]] weatherType, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.SET_OVERRIDE_WEATHEREX' due to disabled trusted mode")

	assert(type(weatherType) == "string", "Arg #1 (weatherType) must be a string.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0x1178E104409FE58C, weatherType, p1)
end
natives.misc.set_override_weatherex = natives.MISC.SET_OVERRIDE_WEATHEREX

function natives.MISC.CLEAR_OVERRIDE_WEATHER() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.CLEAR_OVERRIDE_WEATHER' due to disabled trusted mode")

	local result = native_call(0x338D2E3477711050)
end
natives.misc.clear_override_weather = natives.MISC.CLEAR_OVERRIDE_WEATHER

function natives.MISC.WATER_OVERRIDE_SET_SHOREWAVEAMPLITUDE(--[[float]] amplitude) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.WATER_OVERRIDE_SET_SHOREWAVEAMPLITUDE' due to disabled trusted mode")

	assert(type(amplitude) == "number", "Arg #1 (amplitude) must be a number.")

	local result = native_call(0xB8F87EAD7533B176, amplitude)
end
natives.misc.water_override_set_shorewaveamplitude = natives.MISC.WATER_OVERRIDE_SET_SHOREWAVEAMPLITUDE

function natives.MISC.WATER_OVERRIDE_SET_SHOREWAVEMINAMPLITUDE(--[[float]] minAmplitude) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.WATER_OVERRIDE_SET_SHOREWAVEMINAMPLITUDE' due to disabled trusted mode")

	assert(type(minAmplitude) == "number", "Arg #1 (minAmplitude) must be a number.")

	local result = native_call(0xC3EAD29AB273ECE8, minAmplitude)
end
natives.misc.water_override_set_shorewaveminamplitude = natives.MISC.WATER_OVERRIDE_SET_SHOREWAVEMINAMPLITUDE

function natives.MISC.WATER_OVERRIDE_SET_SHOREWAVEMAXAMPLITUDE(--[[float]] maxAmplitude) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.WATER_OVERRIDE_SET_SHOREWAVEMAXAMPLITUDE' due to disabled trusted mode")

	assert(type(maxAmplitude) == "number", "Arg #1 (maxAmplitude) must be a number.")

	local result = native_call(0xA7A1127490312C36, maxAmplitude)
end
natives.misc.water_override_set_shorewavemaxamplitude = natives.MISC.WATER_OVERRIDE_SET_SHOREWAVEMAXAMPLITUDE

function natives.MISC.WATER_OVERRIDE_SET_OCEANNOISEMINAMPLITUDE(--[[float]] minAmplitude) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.WATER_OVERRIDE_SET_OCEANNOISEMINAMPLITUDE' due to disabled trusted mode")

	assert(type(minAmplitude) == "number", "Arg #1 (minAmplitude) must be a number.")

	local result = native_call(0x31727907B2C43C55, minAmplitude)
end
natives.misc.water_override_set_oceannoiseminamplitude = natives.MISC.WATER_OVERRIDE_SET_OCEANNOISEMINAMPLITUDE

function natives.MISC.WATER_OVERRIDE_SET_OCEANWAVEAMPLITUDE(--[[float]] amplitude) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.WATER_OVERRIDE_SET_OCEANWAVEAMPLITUDE' due to disabled trusted mode")

	assert(type(amplitude) == "number", "Arg #1 (amplitude) must be a number.")

	local result = native_call(0x405591EC8FD9096D, amplitude)
end
natives.misc.water_override_set_oceanwaveamplitude = natives.MISC.WATER_OVERRIDE_SET_OCEANWAVEAMPLITUDE

function natives.MISC.WATER_OVERRIDE_SET_OCEANWAVEMINAMPLITUDE(--[[float]] minAmplitude) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.WATER_OVERRIDE_SET_OCEANWAVEMINAMPLITUDE' due to disabled trusted mode")

	assert(type(minAmplitude) == "number", "Arg #1 (minAmplitude) must be a number.")

	local result = native_call(0xF751B16FB32ABC1D, minAmplitude)
end
natives.misc.water_override_set_oceanwaveminamplitude = natives.MISC.WATER_OVERRIDE_SET_OCEANWAVEMINAMPLITUDE

function natives.MISC.WATER_OVERRIDE_SET_OCEANWAVEMAXAMPLITUDE(--[[float]] maxAmplitude) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.WATER_OVERRIDE_SET_OCEANWAVEMAXAMPLITUDE' due to disabled trusted mode")

	assert(type(maxAmplitude) == "number", "Arg #1 (maxAmplitude) must be a number.")

	local result = native_call(0xB3E6360DDE733E82, maxAmplitude)
end
natives.misc.water_override_set_oceanwavemaxamplitude = natives.MISC.WATER_OVERRIDE_SET_OCEANWAVEMAXAMPLITUDE

function natives.MISC.WATER_OVERRIDE_SET_RIPPLEBUMPINESS(--[[float]] bumpiness) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.WATER_OVERRIDE_SET_RIPPLEBUMPINESS' due to disabled trusted mode")

	assert(type(bumpiness) == "number", "Arg #1 (bumpiness) must be a number.")

	local result = native_call(0x7C9C0B1EEB1F9072, bumpiness)
end
natives.misc.water_override_set_ripplebumpiness = natives.MISC.WATER_OVERRIDE_SET_RIPPLEBUMPINESS

function natives.MISC.WATER_OVERRIDE_SET_RIPPLEMINBUMPINESS(--[[float]] minBumpiness) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.WATER_OVERRIDE_SET_RIPPLEMINBUMPINESS' due to disabled trusted mode")

	assert(type(minBumpiness) == "number", "Arg #1 (minBumpiness) must be a number.")

	local result = native_call(0x6216B116083A7CB4, minBumpiness)
end
natives.misc.water_override_set_rippleminbumpiness = natives.MISC.WATER_OVERRIDE_SET_RIPPLEMINBUMPINESS

function natives.MISC.WATER_OVERRIDE_SET_RIPPLEMAXBUMPINESS(--[[float]] maxBumpiness) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.WATER_OVERRIDE_SET_RIPPLEMAXBUMPINESS' due to disabled trusted mode")

	assert(type(maxBumpiness) == "number", "Arg #1 (maxBumpiness) must be a number.")

	local result = native_call(0x9F5E6BB6B34540DA, maxBumpiness)
end
natives.misc.water_override_set_ripplemaxbumpiness = natives.MISC.WATER_OVERRIDE_SET_RIPPLEMAXBUMPINESS

function natives.MISC.WATER_OVERRIDE_SET_RIPPLEDISTURB(--[[float]] disturb) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.WATER_OVERRIDE_SET_RIPPLEDISTURB' due to disabled trusted mode")

	assert(type(disturb) == "number", "Arg #1 (disturb) must be a number.")

	local result = native_call(0xB9854DFDE0D833D6, disturb)
end
natives.misc.water_override_set_rippledisturb = natives.MISC.WATER_OVERRIDE_SET_RIPPLEDISTURB

--[[
This seems to edit the water wave, intensity around your current location.

0.0f = Normal
1.0f = So Calm and Smooth, a boat will stay still.
3.0f = Really Intense.
]]
function natives.MISC.WATER_OVERRIDE_SET_STRENGTH(--[[float]] strength) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.WATER_OVERRIDE_SET_STRENGTH' due to disabled trusted mode")

	assert(type(strength) == "number", "Arg #1 (strength) must be a number.")

	local result = native_call(0xC54A08C85AE4D410, strength)
end
natives.misc.water_override_set_strength = natives.MISC.WATER_OVERRIDE_SET_STRENGTH

function natives.MISC.WATER_OVERRIDE_FADE_IN(--[[float]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.WATER_OVERRIDE_FADE_IN' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xA8434F1DFF41D6E7, p0)
end
natives.misc.water_override_fade_in = natives.MISC.WATER_OVERRIDE_FADE_IN

function natives.MISC.WATER_OVERRIDE_FADE_OUT(--[[float]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.WATER_OVERRIDE_FADE_OUT' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xC3C221ADDDE31A11, p0)
end
natives.misc.water_override_fade_out = natives.MISC.WATER_OVERRIDE_FADE_OUT

--[[
Sets the the normalized wind speed value. The wind speed clamps always at 12.0, SET_WIND sets the wind in a percentage, 0.0 is 0 and 1.0 is 12.0. Setting this value to a negative number resumes the random wind speed changes provided by the game.
]]
function natives.MISC.SET_WIND(--[[float]] speed) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.SET_WIND' due to disabled trusted mode")

	assert(type(speed) == "number", "Arg #1 (speed) must be a number.")

	local result = native_call(0xAC3A74E8384A9919, speed)
end
natives.misc.set_wind = natives.MISC.SET_WIND

--[[
Using this native will set the absolute wind speed value. The wind speed clamps to a range of 0.0- 12.0. Setting this value to a negative number resumes the random wind speed changes provided by the game.
]]
function natives.MISC.SET_WIND_SPEED(--[[float]] speed) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.SET_WIND_SPEED' due to disabled trusted mode")

	assert(type(speed) == "number", "Arg #1 (speed) must be a number.")

	local result = native_call(0xEE09ECEDBABE47FC, speed)
end
natives.misc.set_wind_speed = natives.MISC.SET_WIND_SPEED

function natives.MISC.GET_WIND_SPEED() -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.GET_WIND_SPEED' due to disabled trusted mode")

	local result = native_call(0xA8CF1CC0AFCD3F12)
	return result:__tonumber()
end
natives.misc.get_wind_speed = natives.MISC.GET_WIND_SPEED

--[[
The wind direction in radians
180 degrees (PI), wind will blow from the south. Setting this value to a negative number resumes the random wind direction changes provided by the game.
]]
function natives.MISC.SET_WIND_DIRECTION(--[[float]] direction) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.SET_WIND_DIRECTION' due to disabled trusted mode")

	assert(type(direction) == "number", "Arg #1 (direction) must be a number.")

	local result = native_call(0xEB0F4468467B4528, direction)
end
natives.misc.set_wind_direction = natives.MISC.SET_WIND_DIRECTION

function natives.MISC.GET_WIND_DIRECTION() -- Returns Vector3
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.GET_WIND_DIRECTION' due to disabled trusted mode")

	local result = native_call(0x1F400FEF721170DA)
	return result:__tov3()
end
natives.misc.get_wind_direction = natives.MISC.GET_WIND_DIRECTION

--[[
With an `intensity` higher than `0.5f`, only the creation of puddles gets faster, rain and rain sound won't increase after that.
With an `intensity` of `0.0f` rain and rain sounds are disabled and there won't be any new puddles.
To use the rain intensity of the current weather, call this native with `-1f` as `intensity`.
]]
function natives.MISC.SET_RAIN(--[[float]] intensity) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.SET_RAIN' due to disabled trusted mode")

	assert(type(intensity) == "number", "Arg #1 (intensity) must be a number.")

	local result = native_call(0x643E26EA6E024D92, intensity)
end
natives.misc.set_rain = natives.MISC.SET_RAIN

function natives.MISC.GET_RAIN_LEVEL() -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.GET_RAIN_LEVEL' due to disabled trusted mode")

	local result = native_call(0x96695E368AD855F3)
	return result:__tonumber()
end
natives.misc.get_rain_level = natives.MISC.GET_RAIN_LEVEL

function natives.MISC.SET_SNOW(--[[float]] level) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.SET_SNOW' due to disabled trusted mode")

	assert(type(level) == "number", "Arg #1 (level) must be a number.")

	local result = native_call(0x7F06937B0CDCBC1A, level)
end
natives.misc.set_snow = natives.MISC.SET_SNOW

function natives.MISC.GET_SNOW_LEVEL() -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.GET_SNOW_LEVEL' due to disabled trusted mode")

	local result = native_call(0xC5868A966E5BE3AE)
	return result:__tonumber()
end
natives.misc.get_snow_level = natives.MISC.GET_SNOW_LEVEL

--[[
creates single lightning+thunder at random position
]]
function natives.MISC.FORCE_LIGHTNING_FLASH() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.FORCE_LIGHTNING_FLASH' due to disabled trusted mode")

	local result = native_call(0xF6062E089251C898)
end
natives.misc.force_lightning_flash = natives.MISC.FORCE_LIGHTNING_FLASH

--[[
Found in the scripts:

MISC::_02DEAAC8F8EA7FE7("");
]]
function natives.MISC.SET_CLOUD_SETTINGS_OVERRIDE(--[[const char*]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.SET_CLOUD_SETTINGS_OVERRIDE' due to disabled trusted mode")

	assert(type(p0) == "string", "Arg #1 (p0) must be a string.")

	local result = native_call(0x02DEAAC8F8EA7FE7, p0)
end
natives.misc.set_cloud_settings_override = natives.MISC.SET_CLOUD_SETTINGS_OVERRIDE

--[[
Found in the scripts:

MISC::_11B56FBBF7224868("CONTRAILS");
]]
function natives.MISC.PRELOAD_CLOUD_HAT(--[[const char*]] name) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.PRELOAD_CLOUD_HAT' due to disabled trusted mode")

	assert(type(name) == "string", "Arg #1 (name) must be a string.")

	local result = native_call(0x11B56FBBF7224868, name)
end
natives.misc.preload_cloud_hat = natives.MISC.PRELOAD_CLOUD_HAT

--[[
The following cloudhats are useable:
altostratus
Cirrus
cirrocumulus
Clear 01
Cloudy 01
Contrails
Horizon
horizonband1
horizonband2
horizonband3
horsey
Nimbus
Puffs
RAIN
Snowy 01
Stormy 01
stratoscumulus
Stripey
shower
Wispy

]]
function natives.MISC.LOAD_CLOUD_HAT(--[[const char*]] name, --[[float]] transitionTime) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.LOAD_CLOUD_HAT' due to disabled trusted mode")

	assert(type(name) == "string", "Arg #1 (name) must be a string.")
	assert(type(transitionTime) == "number", "Arg #2 (transitionTime) must be a number.")

	local result = native_call(0xFC4842A34657BFCB, name, transitionTime)
end
natives.misc.load_cloud_hat = natives.MISC.LOAD_CLOUD_HAT

--[[
Called 4 times in the b617d scripts:
MISC::_A74802FB8D0B7814("CONTRAILS", 0);
]]
function natives.MISC.UNLOAD_CLOUD_HAT(--[[const char*]] name, --[[float]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.UNLOAD_CLOUD_HAT' due to disabled trusted mode")

	assert(type(name) == "string", "Arg #1 (name) must be a string.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xA74802FB8D0B7814, name, p1)
end
natives.misc.unload_cloud_hat = natives.MISC.UNLOAD_CLOUD_HAT

function natives.MISC.UNLOAD_ALL_CLOUD_HATS() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.UNLOAD_ALL_CLOUD_HATS' due to disabled trusted mode")

	local result = native_call(0x957E790EA1727B64)
end
natives.misc.unload_all_cloud_hats = natives.MISC.UNLOAD_ALL_CLOUD_HATS

function natives.MISC.SET_CLOUDS_ALPHA(--[[float]] opacity) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.SET_CLOUDS_ALPHA' due to disabled trusted mode")

	assert(type(opacity) == "number", "Arg #1 (opacity) must be a number.")

	local result = native_call(0xF36199225D6D8C86, opacity)
end
natives.misc.set_clouds_alpha = natives.MISC.SET_CLOUDS_ALPHA

function natives.MISC.GET_CLOUDS_ALPHA() -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.GET_CLOUDS_ALPHA' due to disabled trusted mode")

	local result = native_call(0x20AC25E781AE4A84)
	return result:__tonumber()
end
natives.misc.get_clouds_alpha = natives.MISC.GET_CLOUDS_ALPHA

function natives.MISC.GET_GAME_TIMER() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.GET_GAME_TIMER' due to disabled trusted mode")

	local result = native_call(0x9CD27B0045628463)
	return result:__tointeger()
end
natives.misc.get_game_timer = natives.MISC.GET_GAME_TIMER

function natives.MISC.GET_FRAME_TIME() -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.GET_FRAME_TIME' due to disabled trusted mode")

	local result = native_call(0x15C40837039FFAF7)
	return result:__tonumber()
end
natives.misc.get_frame_time = natives.MISC.GET_FRAME_TIME

function natives.MISC.GET_SYSTEM_TIME_STEP() -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.GET_SYSTEM_TIME_STEP' due to disabled trusted mode")

	local result = native_call(0xE599A503B3837E1B)
	return result:__tonumber()
end
natives.misc.get_system_time_step = natives.MISC.GET_SYSTEM_TIME_STEP

function natives.MISC.GET_FRAME_COUNT() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.GET_FRAME_COUNT' due to disabled trusted mode")

	local result = native_call(0xFC8202EFC642E6F2)
	return result:__tointeger()
end
natives.misc.get_frame_count = natives.MISC.GET_FRAME_COUNT

function natives.MISC.GET_RANDOM_FLOAT_IN_RANGE(--[[float]] startRange, --[[float]] endRange) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.GET_RANDOM_FLOAT_IN_RANGE' due to disabled trusted mode")

	assert(type(startRange) == "number", "Arg #1 (startRange) must be a number.")
	assert(type(endRange) == "number", "Arg #2 (endRange) must be a number.")

	local result = native_call(0x313CE5879CEB6FCD, startRange, endRange)
	return result:__tonumber()
end
natives.misc.get_random_float_in_range = natives.MISC.GET_RANDOM_FLOAT_IN_RANGE

function natives.MISC.GET_RANDOM_INT_IN_RANGE(--[[int]] startRange, --[[int]] endRange) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.GET_RANDOM_INT_IN_RANGE' due to disabled trusted mode")

	assert(type(startRange) == "number", "Arg #1 (startRange) must be a number.")
	assert(type(endRange) == "number", "Arg #2 (endRange) must be a number.")

	local result = native_call(0xD53343AA4FB7DD28, startRange, endRange)
	return result:__tointeger()
end
natives.misc.get_random_int_in_range = natives.MISC.GET_RANDOM_INT_IN_RANGE

function natives.MISC.GET_RANDOM_MWC_INT_IN_RANGE(--[[int]] startRange, --[[int]] endRange) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.GET_RANDOM_MWC_INT_IN_RANGE' due to disabled trusted mode")

	assert(type(startRange) == "number", "Arg #1 (startRange) must be a number.")
	assert(type(endRange) == "number", "Arg #2 (endRange) must be a number.")

	local result = native_call(0xF2D49816A804D134, startRange, endRange)
	return result:__tointeger()
end
natives.misc.get_random_mwc_int_in_range = natives.MISC.GET_RANDOM_MWC_INT_IN_RANGE

--[[
Gets the ground elevation at the specified position. Note that if the specified position is below ground level, the function will output zero!

x: Position on the X-axis to get ground elevation at.
y: Position on the Y-axis to get ground elevation at.
z: Position on the Z-axis to get ground elevation at.
groundZ: The ground elevation at the specified position.
ignoreWater: Nearly always 0, very rarely 1 in the scripts: https://gfycat.com/NiftyTatteredCricket

Bear in mind this native can only calculate the elevation when the coordinates are within the client's render distance.
]]
function natives.MISC.GET_GROUND_Z_FOR_3D_COORD(--[[float]] x, --[[float]] y, --[[float]] z, --[[float*]] groundZ, --[[BOOL]] ignoreWater, --[[BOOL]] p5) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.GET_GROUND_Z_FOR_3D_COORD' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(groundZ) == "userdata", "Arg #4 (groundZ) must be a userdata.")
	assert(type(ignoreWater) == "boolean", "Arg #5 (ignoreWater) must be a boolean.")
	assert(type(p5) == "boolean", "Arg #6 (p5) must be a boolean.")

	local result = native_call(0xC906A7DAB05C8D2B, x, y, z, groundZ, ignoreWater, p5)
	return result:__tointeger() ~= 0
end
natives.misc.get_ground_z_for_3d_coord = natives.MISC.GET_GROUND_Z_FOR_3D_COORD

function natives.MISC.GET_GROUND_Z_AND_NORMAL_FOR_3D_COORD(--[[float]] x, --[[float]] y, --[[float]] z, --[[float*]] groundZ, --[[Vector3*]] normal) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.GET_GROUND_Z_AND_NORMAL_FOR_3D_COORD' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(groundZ) == "userdata", "Arg #4 (groundZ) must be a userdata.")
	assert(type(normal) == "userdata", "Arg #5 (normal) must be a userdata.")

	local result = native_call(0x8BDC7BFC57A81E76, x, y, z, groundZ, normal)
	return result:__tointeger() ~= 0
end
natives.misc.get_ground_z_and_normal_for_3d_coord = natives.MISC.GET_GROUND_Z_AND_NORMAL_FOR_3D_COORD

function natives.MISC.GET_GROUND_Z_EXCLUDING_OBJECTS_FOR_3D_COORD(--[[float]] x, --[[float]] y, --[[float]] z, --[[float*]] groundZ, --[[BOOL]] p4, --[[BOOL]] p5) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.GET_GROUND_Z_EXCLUDING_OBJECTS_FOR_3D_COORD' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(groundZ) == "userdata", "Arg #4 (groundZ) must be a userdata.")
	assert(type(p4) == "boolean", "Arg #5 (p4) must be a boolean.")
	assert(type(p5) == "boolean", "Arg #6 (p5) must be a boolean.")

	local result = native_call(0x9E82F0F362881B29, x, y, z, groundZ, p4, p5)
	return result:__tointeger() ~= 0
end
natives.misc.get_ground_z_excluding_objects_for_3d_coord = natives.MISC.GET_GROUND_Z_EXCLUDING_OBJECTS_FOR_3D_COORD

function natives.MISC.ASIN(--[[float]] p0) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.ASIN' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xC843060B5765DCE7, p0)
	return result:__tonumber()
end
natives.misc.asin = natives.MISC.ASIN

function natives.MISC.ACOS(--[[float]] p0) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.ACOS' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x1D08B970013C34B6, p0)
	return result:__tonumber()
end
natives.misc.acos = natives.MISC.ACOS

function natives.MISC.TAN(--[[float]] p0) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.TAN' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x632106CC96E82E91, p0)
	return result:__tonumber()
end
natives.misc.tan = natives.MISC.TAN

function natives.MISC.ATAN(--[[float]] p0) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.ATAN' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xA9D1795CD5043663, p0)
	return result:__tonumber()
end
natives.misc.atan = natives.MISC.ATAN

function natives.MISC.ATAN2(--[[float]] p0, --[[float]] p1) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.ATAN2' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x8927CBF9D22261A4, p0, p1)
	return result:__tonumber()
end
natives.misc.atan2 = natives.MISC.ATAN2

--[[
Returns the distance between two three-dimensional points, optionally ignoring the Z values.
If useZ is false, only the 2D plane (X-Y) will be considered for calculating the distance.

Consider using this faster native instead: SYSTEM::VDIST - DVIST always takes in consideration the 3D coordinates.
]]
function natives.MISC.GET_DISTANCE_BETWEEN_COORDS(--[[float]] x1, --[[float]] y1, --[[float]] z1, --[[float]] x2, --[[float]] y2, --[[float]] z2, --[[BOOL]] useZ) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.GET_DISTANCE_BETWEEN_COORDS' due to disabled trusted mode")

	assert(type(x1) == "number", "Arg #1 (x1) must be a number.")
	assert(type(y1) == "number", "Arg #2 (y1) must be a number.")
	assert(type(z1) == "number", "Arg #3 (z1) must be a number.")
	assert(type(x2) == "number", "Arg #4 (x2) must be a number.")
	assert(type(y2) == "number", "Arg #5 (y2) must be a number.")
	assert(type(z2) == "number", "Arg #6 (z2) must be a number.")
	assert(type(useZ) == "boolean", "Arg #7 (useZ) must be a boolean.")

	local result = native_call(0xF1B760881820C952, x1, y1, z1, x2, y2, z2, useZ)
	return result:__tonumber()
end
natives.misc.get_distance_between_coords = natives.MISC.GET_DISTANCE_BETWEEN_COORDS

function natives.MISC.GET_ANGLE_BETWEEN_2D_VECTORS(--[[float]] x1, --[[float]] y1, --[[float]] x2, --[[float]] y2) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.GET_ANGLE_BETWEEN_2D_VECTORS' due to disabled trusted mode")

	assert(type(x1) == "number", "Arg #1 (x1) must be a number.")
	assert(type(y1) == "number", "Arg #2 (y1) must be a number.")
	assert(type(x2) == "number", "Arg #3 (x2) must be a number.")
	assert(type(y2) == "number", "Arg #4 (y2) must be a number.")

	local result = native_call(0x186FC4BE848E1C92, x1, y1, x2, y2)
	return result:__tonumber()
end
natives.misc.get_angle_between_2d_vectors = natives.MISC.GET_ANGLE_BETWEEN_2D_VECTORS

--[[
dx = x1 - x2
dy = y1 - y2
]]
function natives.MISC.GET_HEADING_FROM_VECTOR_2D(--[[float]] dx, --[[float]] dy) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.GET_HEADING_FROM_VECTOR_2D' due to disabled trusted mode")

	assert(type(dx) == "number", "Arg #1 (dx) must be a number.")
	assert(type(dy) == "number", "Arg #2 (dy) must be a number.")

	local result = native_call(0x2FFB6B224F4B2926, dx, dy)
	return result:__tonumber()
end
natives.misc.get_heading_from_vector_2d = natives.MISC.GET_HEADING_FROM_VECTOR_2D

--[[
returns a float between 0.0 and 1.0, clamp: sets whether the product should be clamped between the given coordinates
]]
function natives.MISC.GET_RATIO_OF_CLOSEST_POINT_ON_LINE(--[[float]] x1, --[[float]] y1, --[[float]] z1, --[[float]] x2, --[[float]] y2, --[[float]] z2, --[[float]] x3, --[[float]] y3, --[[float]] z3, --[[BOOL]] clamp) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.GET_RATIO_OF_CLOSEST_POINT_ON_LINE' due to disabled trusted mode")

	assert(type(x1) == "number", "Arg #1 (x1) must be a number.")
	assert(type(y1) == "number", "Arg #2 (y1) must be a number.")
	assert(type(z1) == "number", "Arg #3 (z1) must be a number.")
	assert(type(x2) == "number", "Arg #4 (x2) must be a number.")
	assert(type(y2) == "number", "Arg #5 (y2) must be a number.")
	assert(type(z2) == "number", "Arg #6 (z2) must be a number.")
	assert(type(x3) == "number", "Arg #7 (x3) must be a number.")
	assert(type(y3) == "number", "Arg #8 (y3) must be a number.")
	assert(type(z3) == "number", "Arg #9 (z3) must be a number.")
	assert(type(clamp) == "boolean", "Arg #10 (clamp) must be a boolean.")

	local result = native_call(0x7F8F6405F4777AF6, x1, y1, z1, x2, y2, z2, x3, y3, z3, clamp)
	return result:__tonumber()
end
natives.misc.get_ratio_of_closest_point_on_line = natives.MISC.GET_RATIO_OF_CLOSEST_POINT_ON_LINE

--[[
clamp: sets whether the product should be clamped between the given coordinates
]]
function natives.MISC.GET_CLOSEST_POINT_ON_LINE(--[[float]] x1, --[[float]] y1, --[[float]] z1, --[[float]] x2, --[[float]] y2, --[[float]] z2, --[[float]] x3, --[[float]] y3, --[[float]] z3, --[[BOOL]] clamp) -- Returns Vector3
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.GET_CLOSEST_POINT_ON_LINE' due to disabled trusted mode")

	assert(type(x1) == "number", "Arg #1 (x1) must be a number.")
	assert(type(y1) == "number", "Arg #2 (y1) must be a number.")
	assert(type(z1) == "number", "Arg #3 (z1) must be a number.")
	assert(type(x2) == "number", "Arg #4 (x2) must be a number.")
	assert(type(y2) == "number", "Arg #5 (y2) must be a number.")
	assert(type(z2) == "number", "Arg #6 (z2) must be a number.")
	assert(type(x3) == "number", "Arg #7 (x3) must be a number.")
	assert(type(y3) == "number", "Arg #8 (y3) must be a number.")
	assert(type(z3) == "number", "Arg #9 (z3) must be a number.")
	assert(type(clamp) == "boolean", "Arg #10 (clamp) must be a boolean.")

	local result = native_call(0x21C235BC64831E5A, x1, y1, z1, x2, y2, z2, x3, y3, z3, clamp)
	return result:__tov3()
end
natives.misc.get_closest_point_on_line = natives.MISC.GET_CLOSEST_POINT_ON_LINE

function natives.MISC.GET_LINE_PLANE_INTERSECTION(--[[float]] p0, --[[float]] p1, --[[float]] p2, --[[float]] p3, --[[float]] p4, --[[float]] p5, --[[float]] p6, --[[float]] p7, --[[float]] p8, --[[float]] p9, --[[float]] p10, --[[float]] p11, --[[float*]] p12) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.GET_LINE_PLANE_INTERSECTION' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")
	assert(type(p6) == "number", "Arg #7 (p6) must be a number.")
	assert(type(p7) == "number", "Arg #8 (p7) must be a number.")
	assert(type(p8) == "number", "Arg #9 (p8) must be a number.")
	assert(type(p9) == "number", "Arg #10 (p9) must be a number.")
	assert(type(p10) == "number", "Arg #11 (p10) must be a number.")
	assert(type(p11) == "number", "Arg #12 (p11) must be a number.")
	assert(type(p12) == "userdata", "Arg #13 (p12) must be a userdata.")

	local result = native_call(0xF56DFB7B61BE7276, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12)
	return result:__tointeger() ~= 0
end
natives.misc.get_line_plane_intersection = natives.MISC.GET_LINE_PLANE_INTERSECTION

function natives.MISC.GET_POINT_AREA_OVERLAP(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3, --[[Any]] p4, --[[Any]] p5, --[[Any]] p6, --[[Any]] p7, --[[Any]] p8, --[[Any]] p9, --[[Any]] p10, --[[Any]] p11, --[[Any]] p12, --[[Any]] p13) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.GET_POINT_AREA_OVERLAP' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")
	assert(type(p6) == "number", "Arg #7 (p6) must be a number.")
	assert(type(p7) == "number", "Arg #8 (p7) must be a number.")
	assert(type(p8) == "number", "Arg #9 (p8) must be a number.")
	assert(type(p9) == "number", "Arg #10 (p9) must be a number.")
	assert(type(p10) == "number", "Arg #11 (p10) must be a number.")
	assert(type(p11) == "number", "Arg #12 (p11) must be a number.")
	assert(type(p12) == "number", "Arg #13 (p12) must be a number.")
	assert(type(p13) == "number", "Arg #14 (p13) must be a number.")

	local result = native_call(0xA0AD167E4B39D9A2, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13)
	return result:__tointeger()
end
natives.misc.get_point_area_overlap = natives.MISC.GET_POINT_AREA_OVERLAP

--[[
This sets bit [offset] of [address] to on.

The offsets used are different bits to be toggled on and off, typically there is only one address used in a script.

Example:
MISC::SET_BIT(&bitAddress, 1);

To check if this bit has been enabled:
MISC::IS_BIT_SET(bitAddress, 1); // will return 1 afterwards

Please note, this method may assign a value to [address] when used.
]]
function natives.MISC.SET_BIT(--[[int*]] address, --[[int]] offset) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.SET_BIT' due to disabled trusted mode")

	assert(type(address) == "userdata", "Arg #1 (address) must be a userdata.")
	assert(type(offset) == "number", "Arg #2 (offset) must be a number.")

	local result = native_call(0x933D6A9EEC1BACD0, address, offset)
end
natives.misc.set_bit = natives.MISC.SET_BIT

--[[
This sets bit [offset] of [address] to off.

Example:
MISC::CLEAR_BIT(&bitAddress, 1);

To check if this bit has been enabled:
MISC::IS_BIT_SET(bitAddress, 1); // will return 0 afterwards
]]
function natives.MISC.CLEAR_BIT(--[[int*]] address, --[[int]] offset) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.CLEAR_BIT' due to disabled trusted mode")

	assert(type(address) == "userdata", "Arg #1 (address) must be a userdata.")
	assert(type(offset) == "number", "Arg #2 (offset) must be a number.")

	local result = native_call(0xE80492A9AC099A93, address, offset)
end
natives.misc.clear_bit = natives.MISC.CLEAR_BIT

--[[
This native converts its past string to hash. It is hashed using jenkins one at a time method.
]]
function natives.MISC.GET_HASH_KEY(--[[const char*]] string) -- Returns Hash
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.GET_HASH_KEY' due to disabled trusted mode")

	assert(type(string) == "string", "Arg #1 (string) must be a string.")

	local result = native_call(0xD24D37CC275948CC, string)
	return result:__tointeger()
end
natives.misc.get_hash_key = natives.MISC.GET_HASH_KEY

--[[
This native always come right before SET_ENTITY_QUATERNION where its final 4 parameters are SLERP_NEAR_QUATERNION p9 to p12
]]
function natives.MISC.SLERP_NEAR_QUATERNION(--[[float]] t, --[[float]] x, --[[float]] y, --[[float]] z, --[[float]] w, --[[float]] x1, --[[float]] y1, --[[float]] z1, --[[float]] w1, --[[float*]] outX, --[[float*]] outY, --[[float*]] outZ, --[[float*]] outW) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.SLERP_NEAR_QUATERNION' due to disabled trusted mode")

	assert(type(t) == "number", "Arg #1 (t) must be a number.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")
	assert(type(w) == "number", "Arg #5 (w) must be a number.")
	assert(type(x1) == "number", "Arg #6 (x1) must be a number.")
	assert(type(y1) == "number", "Arg #7 (y1) must be a number.")
	assert(type(z1) == "number", "Arg #8 (z1) must be a number.")
	assert(type(w1) == "number", "Arg #9 (w1) must be a number.")
	assert(type(outX) == "userdata", "Arg #10 (outX) must be a userdata.")
	assert(type(outY) == "userdata", "Arg #11 (outY) must be a userdata.")
	assert(type(outZ) == "userdata", "Arg #12 (outZ) must be a userdata.")
	assert(type(outW) == "userdata", "Arg #13 (outW) must be a userdata.")

	local result = native_call(0xF2F6A2FA49278625, t, x, y, z, w, x1, y1, z1, w1, outX, outY, outZ, outW)
end
natives.misc.slerp_near_quaternion = natives.MISC.SLERP_NEAR_QUATERNION

function natives.MISC.IS_AREA_OCCUPIED(--[[float]] p0, --[[float]] p1, --[[float]] p2, --[[float]] p3, --[[float]] p4, --[[float]] p5, --[[BOOL]] p6, --[[BOOL]] p7, --[[BOOL]] p8, --[[BOOL]] p9, --[[BOOL]] p10, --[[Any]] p11, --[[BOOL]] p12) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.IS_AREA_OCCUPIED' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")
	assert(type(p6) == "boolean", "Arg #7 (p6) must be a boolean.")
	assert(type(p7) == "boolean", "Arg #8 (p7) must be a boolean.")
	assert(type(p8) == "boolean", "Arg #9 (p8) must be a boolean.")
	assert(type(p9) == "boolean", "Arg #10 (p9) must be a boolean.")
	assert(type(p10) == "boolean", "Arg #11 (p10) must be a boolean.")
	assert(type(p11) == "number", "Arg #12 (p11) must be a number.")
	assert(type(p12) == "boolean", "Arg #13 (p12) must be a boolean.")

	local result = native_call(0xA61B4DF533DCB56E, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12)
	return result:__tointeger() ~= 0
end
natives.misc.is_area_occupied = natives.MISC.IS_AREA_OCCUPIED

function natives.MISC.IS_AREA_OCCUPIED_SLOW(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3, --[[Any]] p4, --[[Any]] p5, --[[Any]] p6, --[[Any]] p7, --[[Any]] p8, --[[Any]] p9, --[[Any]] p10, --[[Any]] p11, --[[Any]] p12) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.IS_AREA_OCCUPIED_SLOW' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")
	assert(type(p6) == "number", "Arg #7 (p6) must be a number.")
	assert(type(p7) == "number", "Arg #8 (p7) must be a number.")
	assert(type(p8) == "number", "Arg #9 (p8) must be a number.")
	assert(type(p9) == "number", "Arg #10 (p9) must be a number.")
	assert(type(p10) == "number", "Arg #11 (p10) must be a number.")
	assert(type(p11) == "number", "Arg #12 (p11) must be a number.")
	assert(type(p12) == "number", "Arg #13 (p12) must be a number.")

	local result = native_call(0x39455BF4F4F55186, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12)
	return result:__tointeger()
end
natives.misc.is_area_occupied_slow = natives.MISC.IS_AREA_OCCUPIED_SLOW

--[[
`range`: The range, seems to not be very accurate during testing.
`p4`: Unknown, when set to true it seems to always return true no matter what I try.
`checkVehicle`: Check for any vehicles in that area.
`checkPeds`: Check for any peds in that area.
`ignoreEntity`: This entity will be ignored if it's in the area. Set to 0 if you don't want to exclude any entities.
The BOOL parameters that are documented have not been confirmed. They are just documented from what I've found during testing. They may not work as expected in all cases.

Returns true if there is anything in that location matching the provided parameters.
]]
function natives.MISC.IS_POSITION_OCCUPIED(--[[float]] x, --[[float]] y, --[[float]] z, --[[float]] range, --[[BOOL]] p4, --[[BOOL]] checkVehicles, --[[BOOL]] checkPeds, --[[BOOL]] p7, --[[BOOL]] p8, --[[Entity]] ignoreEntity, --[[BOOL]] p10) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.IS_POSITION_OCCUPIED' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(range) == "number", "Arg #4 (range) must be a number.")
	assert(type(p4) == "boolean", "Arg #5 (p4) must be a boolean.")
	assert(type(checkVehicles) == "boolean", "Arg #6 (checkVehicles) must be a boolean.")
	assert(type(checkPeds) == "boolean", "Arg #7 (checkPeds) must be a boolean.")
	assert(type(p7) == "boolean", "Arg #8 (p7) must be a boolean.")
	assert(type(p8) == "boolean", "Arg #9 (p8) must be a boolean.")
	assert(type(ignoreEntity) == "number", "Arg #10 (ignoreEntity) must be a number.")
	assert(type(p10) == "boolean", "Arg #11 (p10) must be a boolean.")

	local result = native_call(0xADCDE75E1C60F32D, x, y, z, range, p4, checkVehicles, checkPeds, p7, p8, ignoreEntity, p10)
	return result:__tointeger() ~= 0
end
natives.misc.is_position_occupied = natives.MISC.IS_POSITION_OCCUPIED

function natives.MISC.IS_POINT_OBSCURED_BY_A_MISSION_ENTITY(--[[float]] p0, --[[float]] p1, --[[float]] p2, --[[float]] p3, --[[float]] p4, --[[float]] p5, --[[Any]] p6) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.IS_POINT_OBSCURED_BY_A_MISSION_ENTITY' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")
	assert(type(p6) == "number", "Arg #7 (p6) must be a number.")

	local result = native_call(0xE54E209C35FFA18D, p0, p1, p2, p3, p4, p5, p6)
	return result:__tointeger() ~= 0
end
natives.misc.is_point_obscured_by_a_mission_entity = natives.MISC.IS_POINT_OBSCURED_BY_A_MISSION_ENTITY

--[[
Example: CLEAR_AREA(0, 0, 0, 30, true, false, false, false);
]]
function natives.MISC.CLEAR_AREA(--[[float]] X, --[[float]] Y, --[[float]] Z, --[[float]] radius, --[[BOOL]] p4, --[[BOOL]] ignoreCopCars, --[[BOOL]] ignoreObjects, --[[BOOL]] p7) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.CLEAR_AREA' due to disabled trusted mode")

	assert(type(X) == "number", "Arg #1 (X) must be a number.")
	assert(type(Y) == "number", "Arg #2 (Y) must be a number.")
	assert(type(Z) == "number", "Arg #3 (Z) must be a number.")
	assert(type(radius) == "number", "Arg #4 (radius) must be a number.")
	assert(type(p4) == "boolean", "Arg #5 (p4) must be a boolean.")
	assert(type(ignoreCopCars) == "boolean", "Arg #6 (ignoreCopCars) must be a boolean.")
	assert(type(ignoreObjects) == "boolean", "Arg #7 (ignoreObjects) must be a boolean.")
	assert(type(p7) == "boolean", "Arg #8 (p7) must be a boolean.")

	local result = native_call(0xA56F01F3765B93A0, X, Y, Z, radius, p4, ignoreCopCars, ignoreObjects, p7)
end
natives.misc.clear_area = natives.MISC.CLEAR_AREA

--[[
MISC::_0x957838AAF91BD12D(x, y, z, radius, false, false, false, false); seem to make all objects go away, peds, vehicles etc. All booleans set to true doesn't seem to change anything. 
]]
function natives.MISC.CLEAR_AREA_LEAVE_VEHICLE_HEALTH(--[[float]] x, --[[float]] y, --[[float]] z, --[[float]] radius, --[[BOOL]] p4, --[[BOOL]] p5, --[[BOOL]] p6, --[[BOOL]] p7) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.CLEAR_AREA_LEAVE_VEHICLE_HEALTH' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(radius) == "number", "Arg #4 (radius) must be a number.")
	assert(type(p4) == "boolean", "Arg #5 (p4) must be a boolean.")
	assert(type(p5) == "boolean", "Arg #6 (p5) must be a boolean.")
	assert(type(p6) == "boolean", "Arg #7 (p6) must be a boolean.")
	assert(type(p7) == "boolean", "Arg #8 (p7) must be a boolean.")

	local result = native_call(0x957838AAF91BD12D, x, y, z, radius, p4, p5, p6, p7)
end
natives.misc.clear_area_leave_vehicle_health = natives.MISC.CLEAR_AREA_LEAVE_VEHICLE_HEALTH

--[[
Example:
CLEAR_AREA_OF_VEHICLES(0.0f, 0.0f, 0.0f, 10000.0f, false, false, false, false, false, false);
]]
function natives.MISC.CLEAR_AREA_OF_VEHICLES(--[[float]] x, --[[float]] y, --[[float]] z, --[[float]] radius, --[[BOOL]] p4, --[[BOOL]] p5, --[[BOOL]] p6, --[[BOOL]] p7, --[[BOOL]] p8, --[[BOOL]] p9, --[[Any]] p10) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.CLEAR_AREA_OF_VEHICLES' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(radius) == "number", "Arg #4 (radius) must be a number.")
	assert(type(p4) == "boolean", "Arg #5 (p4) must be a boolean.")
	assert(type(p5) == "boolean", "Arg #6 (p5) must be a boolean.")
	assert(type(p6) == "boolean", "Arg #7 (p6) must be a boolean.")
	assert(type(p7) == "boolean", "Arg #8 (p7) must be a boolean.")
	assert(type(p8) == "boolean", "Arg #9 (p8) must be a boolean.")
	assert(type(p9) == "boolean", "Arg #10 (p9) must be a boolean.")
	assert(type(p10) == "number", "Arg #11 (p10) must be a number.")

	local result = native_call(0x01C7B9B38428AEB6, x, y, z, radius, p4, p5, p6, p7, p8, p9, p10)
end
natives.misc.clear_area_of_vehicles = natives.MISC.CLEAR_AREA_OF_VEHICLES

function natives.MISC.CLEAR_ANGLED_AREA_OF_VEHICLES(--[[float]] x1, --[[float]] y1, --[[float]] z1, --[[float]] x2, --[[float]] y2, --[[float]] z2, --[[float]] width, --[[BOOL]] p7, --[[BOOL]] p8, --[[BOOL]] p9, --[[BOOL]] p10, --[[BOOL]] p11, --[[Any]] p12, --[[Any]] p13) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.CLEAR_ANGLED_AREA_OF_VEHICLES' due to disabled trusted mode")

	assert(type(x1) == "number", "Arg #1 (x1) must be a number.")
	assert(type(y1) == "number", "Arg #2 (y1) must be a number.")
	assert(type(z1) == "number", "Arg #3 (z1) must be a number.")
	assert(type(x2) == "number", "Arg #4 (x2) must be a number.")
	assert(type(y2) == "number", "Arg #5 (y2) must be a number.")
	assert(type(z2) == "number", "Arg #6 (z2) must be a number.")
	assert(type(width) == "number", "Arg #7 (width) must be a number.")
	assert(type(p7) == "boolean", "Arg #8 (p7) must be a boolean.")
	assert(type(p8) == "boolean", "Arg #9 (p8) must be a boolean.")
	assert(type(p9) == "boolean", "Arg #10 (p9) must be a boolean.")
	assert(type(p10) == "boolean", "Arg #11 (p10) must be a boolean.")
	assert(type(p11) == "boolean", "Arg #12 (p11) must be a boolean.")
	assert(type(p12) == "number", "Arg #13 (p12) must be a number.")
	assert(type(p13) == "number", "Arg #14 (p13) must be a number.")

	local result = native_call(0x11DB3500F042A8AA, x1, y1, z1, x2, y2, z2, width, p7, p8, p9, p10, p11, p12, p13)
end
natives.misc.clear_angled_area_of_vehicles = natives.MISC.CLEAR_ANGLED_AREA_OF_VEHICLES

--[[
I looked through the PC scripts that this site provides you with a link to find. It shows the last param mainly uses, (0, 2, 6, 16, and 17) so I am going to assume it is a type of flag. 
]]
function natives.MISC.CLEAR_AREA_OF_OBJECTS(--[[float]] x, --[[float]] y, --[[float]] z, --[[float]] radius, --[[int]] flags) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.CLEAR_AREA_OF_OBJECTS' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(radius) == "number", "Arg #4 (radius) must be a number.")
	assert(type(flags) == "number", "Arg #5 (flags) must be a number.")

	local result = native_call(0xDD9B9B385AAC7F5B, x, y, z, radius, flags)
end
natives.misc.clear_area_of_objects = natives.MISC.CLEAR_AREA_OF_OBJECTS

--[[
Example:       CLEAR_AREA_OF_PEDS(0, 0, 0, 10000, 1);
]]
function natives.MISC.CLEAR_AREA_OF_PEDS(--[[float]] x, --[[float]] y, --[[float]] z, --[[float]] radius, --[[int]] flags) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.CLEAR_AREA_OF_PEDS' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(radius) == "number", "Arg #4 (radius) must be a number.")
	assert(type(flags) == "number", "Arg #5 (flags) must be a number.")

	local result = native_call(0xBE31FD6CE464AC59, x, y, z, radius, flags)
end
natives.misc.clear_area_of_peds = natives.MISC.CLEAR_AREA_OF_PEDS

--[[
flags appears to always be 0
]]
function natives.MISC.CLEAR_AREA_OF_COPS(--[[float]] x, --[[float]] y, --[[float]] z, --[[float]] radius, --[[int]] flags) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.CLEAR_AREA_OF_COPS' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(radius) == "number", "Arg #4 (radius) must be a number.")
	assert(type(flags) == "number", "Arg #5 (flags) must be a number.")

	local result = native_call(0x04F8FC8FCF58F88D, x, y, z, radius, flags)
end
natives.misc.clear_area_of_cops = natives.MISC.CLEAR_AREA_OF_COPS

--[[
flags is usually 0 in the scripts.
]]
function natives.MISC.CLEAR_AREA_OF_PROJECTILES(--[[float]] x, --[[float]] y, --[[float]] z, --[[float]] radius, --[[int]] flags) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.CLEAR_AREA_OF_PROJECTILES' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(radius) == "number", "Arg #4 (radius) must be a number.")
	assert(type(flags) == "number", "Arg #5 (flags) must be a number.")

	local result = native_call(0x0A1CB9094635D1A6, x, y, z, radius, flags)
end
natives.misc.clear_area_of_projectiles = natives.MISC.CLEAR_AREA_OF_PROJECTILES

--[[
Possibly used to clear scenario points.
]]
function natives.MISC.CLEAR_SCENARIO_SPAWN_HISTORY() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.CLEAR_SCENARIO_SPAWN_HISTORY' due to disabled trusted mode")

	local result = native_call(0x7EC6F9A478A6A512)
end
natives.misc.clear_scenario_spawn_history = natives.MISC.CLEAR_SCENARIO_SPAWN_HISTORY

--[[
ignoreVehicle - bypasses vehicle check of the local player (it will not open if you are in a vehicle and this is set to false)
]]
function natives.MISC.SET_SAVE_MENU_ACTIVE(--[[BOOL]] ignoreVehicle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.SET_SAVE_MENU_ACTIVE' due to disabled trusted mode")

	assert(type(ignoreVehicle) == "boolean", "Arg #1 (ignoreVehicle) must be a boolean.")

	local result = native_call(0xC9BF75D28165FF77, ignoreVehicle)
end
natives.misc.set_save_menu_active = natives.MISC.SET_SAVE_MENU_ACTIVE

function natives.MISC.GET_STATUS_OF_MANUAL_SAVE() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.GET_STATUS_OF_MANUAL_SAVE' due to disabled trusted mode")

	local result = native_call(0x397BAA01068BAA96)
	return result:__tointeger()
end
natives.misc.get_status_of_manual_save = natives.MISC.GET_STATUS_OF_MANUAL_SAVE

function natives.MISC.SET_CREDITS_ACTIVE(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.SET_CREDITS_ACTIVE' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0xB938B7E6D3C0620C, toggle)
end
natives.misc.set_credits_active = natives.MISC.SET_CREDITS_ACTIVE

function natives.MISC.SET_CREDITS_FADE_OUT_WITH_SCREEN(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.SET_CREDITS_FADE_OUT_WITH_SCREEN' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0xB51B9AB9EF81868C, toggle)
end
natives.misc.set_credits_fade_out_with_screen = natives.MISC.SET_CREDITS_FADE_OUT_WITH_SCREEN

function natives.MISC.HAVE_CREDITS_REACHED_END() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.HAVE_CREDITS_REACHED_END' due to disabled trusted mode")

	local result = native_call(0x075F1D57402C93BA)
	return result:__tointeger() ~= 0
end
natives.misc.have_credits_reached_end = natives.MISC.HAVE_CREDITS_REACHED_END

--[[
For a full list, see here: pastebin.com/yLNWicUi
]]
function natives.MISC.TERMINATE_ALL_SCRIPTS_WITH_THIS_NAME(--[[const char*]] scriptName) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.TERMINATE_ALL_SCRIPTS_WITH_THIS_NAME' due to disabled trusted mode")

	assert(type(scriptName) == "string", "Arg #1 (scriptName) must be a string.")

	local result = native_call(0x9DC711BC69C548DF, scriptName)
end
natives.misc.terminate_all_scripts_with_this_name = natives.MISC.TERMINATE_ALL_SCRIPTS_WITH_THIS_NAME

function natives.MISC.NETWORK_SET_SCRIPT_IS_SAFE_FOR_NETWORK_GAME() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.NETWORK_SET_SCRIPT_IS_SAFE_FOR_NETWORK_GAME' due to disabled trusted mode")

	local result = native_call(0x9243BAC96D64C050)
end
natives.misc.network_set_script_is_safe_for_network_game = natives.MISC.NETWORK_SET_SCRIPT_IS_SAFE_FOR_NETWORK_GAME

--[[
Returns the index of the newly created hospital spawn point.

p3 might be radius?
]]
function natives.MISC.ADD_HOSPITAL_RESTART(--[[float]] x, --[[float]] y, --[[float]] z, --[[float]] p3, --[[Any]] p4) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.ADD_HOSPITAL_RESTART' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")

	local result = native_call(0x1F464EF988465A81, x, y, z, p3, p4)
	return result:__tointeger()
end
natives.misc.add_hospital_restart = natives.MISC.ADD_HOSPITAL_RESTART

--[[
The game by default has 5 hospital respawn points. Disabling them all will cause the player to respawn at the last position they were.
]]
function natives.MISC.DISABLE_HOSPITAL_RESTART(--[[int]] hospitalIndex, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.DISABLE_HOSPITAL_RESTART' due to disabled trusted mode")

	assert(type(hospitalIndex) == "number", "Arg #1 (hospitalIndex) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xC8535819C450EBA8, hospitalIndex, toggle)
end
natives.misc.disable_hospital_restart = natives.MISC.DISABLE_HOSPITAL_RESTART

function natives.MISC.ADD_POLICE_RESTART(--[[float]] p0, --[[float]] p1, --[[float]] p2, --[[float]] p3, --[[Any]] p4) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.ADD_POLICE_RESTART' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")

	local result = native_call(0x452736765B31FC4B, p0, p1, p2, p3, p4)
	return result:__tointeger()
end
natives.misc.add_police_restart = natives.MISC.ADD_POLICE_RESTART

--[[
Disables the spawn point at the police house on the specified index.

policeIndex: The police house index.
toggle: true to enable the spawn point, false to disable.

- Nacorpio
]]
function natives.MISC.DISABLE_POLICE_RESTART(--[[int]] policeIndex, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.DISABLE_POLICE_RESTART' due to disabled trusted mode")

	assert(type(policeIndex) == "number", "Arg #1 (policeIndex) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x23285DED6EBD7EA3, policeIndex, toggle)
end
natives.misc.disable_police_restart = natives.MISC.DISABLE_POLICE_RESTART

function natives.MISC.SET_RESTART_COORD_OVERRIDE(--[[float]] x, --[[float]] y, --[[float]] z, --[[float]] heading) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.SET_RESTART_COORD_OVERRIDE' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(heading) == "number", "Arg #4 (heading) must be a number.")

	local result = native_call(0x706B5EDCAA7FA663, x, y, z, heading)
end
natives.misc.set_restart_coord_override = natives.MISC.SET_RESTART_COORD_OVERRIDE

function natives.MISC.CLEAR_RESTART_COORD_OVERRIDE() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.CLEAR_RESTART_COORD_OVERRIDE' due to disabled trusted mode")

	local result = native_call(0xA2716D40842EAF79)
end
natives.misc.clear_restart_coord_override = natives.MISC.CLEAR_RESTART_COORD_OVERRIDE

function natives.MISC.PAUSE_DEATH_ARREST_RESTART(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.PAUSE_DEATH_ARREST_RESTART' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x2C2B3493FBF51C71, toggle)
end
natives.misc.pause_death_arrest_restart = natives.MISC.PAUSE_DEATH_ARREST_RESTART

function natives.MISC.IGNORE_NEXT_RESTART(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.IGNORE_NEXT_RESTART' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x21FFB63D8C615361, toggle)
end
natives.misc.ignore_next_restart = natives.MISC.IGNORE_NEXT_RESTART

--[[
Sets whether the game should fade out after the player dies.
]]
function natives.MISC.SET_FADE_OUT_AFTER_DEATH(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.SET_FADE_OUT_AFTER_DEATH' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x4A18E01DF2C87B86, toggle)
end
natives.misc.set_fade_out_after_death = natives.MISC.SET_FADE_OUT_AFTER_DEATH

--[[
Sets whether the game should fade out after the player is arrested.
]]
function natives.MISC.SET_FADE_OUT_AFTER_ARREST(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.SET_FADE_OUT_AFTER_ARREST' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x1E0B4DC0D990A4E7, toggle)
end
natives.misc.set_fade_out_after_arrest = natives.MISC.SET_FADE_OUT_AFTER_ARREST

--[[
Sets whether the game should fade in after the player dies or is arrested.
]]
function natives.MISC.SET_FADE_IN_AFTER_DEATH_ARREST(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.SET_FADE_IN_AFTER_DEATH_ARREST' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0xDA66D2796BA33F12, toggle)
end
natives.misc.set_fade_in_after_death_arrest = natives.MISC.SET_FADE_IN_AFTER_DEATH_ARREST

function natives.MISC.SET_FADE_IN_AFTER_LOAD(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.SET_FADE_IN_AFTER_LOAD' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0xF3D78F59DFE18D79, toggle)
end
natives.misc.set_fade_in_after_load = natives.MISC.SET_FADE_IN_AFTER_LOAD

function natives.MISC.REGISTER_SAVE_HOUSE(--[[float]] p0, --[[float]] p1, --[[float]] p2, --[[float]] p3, --[[Any*]] p4, --[[Any]] p5, --[[Any]] p6) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.REGISTER_SAVE_HOUSE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "userdata", "Arg #5 (p4) must be a userdata.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")
	assert(type(p6) == "number", "Arg #7 (p6) must be a number.")

	local result = native_call(0xC0714D0A7EEECA54, p0, p1, p2, p3, p4, p5, p6)
	return result:__tointeger()
end
natives.misc.register_save_house = natives.MISC.REGISTER_SAVE_HOUSE

function natives.MISC.SET_SAVE_HOUSE(--[[Any]] p0, --[[BOOL]] p1, --[[BOOL]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.SET_SAVE_HOUSE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")

	local result = native_call(0x4F548CABEAE553BC, p0, p1, p2)
end
natives.misc.set_save_house = natives.MISC.SET_SAVE_HOUSE

function natives.MISC.OVERRIDE_SAVE_HOUSE(--[[BOOL]] p0, --[[float]] p1, --[[float]] p2, --[[float]] p3, --[[float]] p4, --[[BOOL]] p5, --[[float]] p6, --[[float]] p7) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.OVERRIDE_SAVE_HOUSE' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "boolean", "Arg #6 (p5) must be a boolean.")
	assert(type(p6) == "number", "Arg #7 (p6) must be a number.")
	assert(type(p7) == "number", "Arg #8 (p7) must be a number.")

	local result = native_call(0x1162EA8AE9D24EEA, p0, p1, p2, p3, p4, p5, p6, p7)
	return result:__tointeger() ~= 0
end
natives.misc.override_save_house = natives.MISC.OVERRIDE_SAVE_HOUSE

function natives.MISC.GET_SAVE_HOUSE_DETAILS_AFTER_SUCCESSFUL_LOAD(--[[Vector3*]] p0, --[[float*]] p1, --[[BOOL*]] fadeInAfterLoad, --[[BOOL*]] p3) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.GET_SAVE_HOUSE_DETAILS_AFTER_SUCCESSFUL_LOAD' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")
	assert(type(p1) == "userdata", "Arg #2 (p1) must be a userdata.")
	assert(type(fadeInAfterLoad) == "userdata", "Arg #3 (fadeInAfterLoad) must be a userdata.")
	assert(type(p3) == "userdata", "Arg #4 (p3) must be a userdata.")

	local result = native_call(0xA4A0065E39C9F25C, p0, p1, fadeInAfterLoad, p3)
	return result:__tointeger() ~= 0
end
natives.misc.get_save_house_details_after_successful_load = natives.MISC.GET_SAVE_HOUSE_DETAILS_AFTER_SUCCESSFUL_LOAD

function natives.MISC.DO_AUTO_SAVE() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.DO_AUTO_SAVE' due to disabled trusted mode")

	local result = native_call(0x50EEAAD86232EE55)
end
natives.misc.do_auto_save = natives.MISC.DO_AUTO_SAVE

--[[
Returns true if profile setting 208 is equal to 0.
]]
function natives.MISC.GET_IS_AUTO_SAVE_OFF() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.GET_IS_AUTO_SAVE_OFF' due to disabled trusted mode")

	local result = native_call(0x6E04F06094C87047)
	return result:__tointeger() ~= 0
end
natives.misc.get_is_auto_save_off = natives.MISC.GET_IS_AUTO_SAVE_OFF

function natives.MISC.IS_AUTO_SAVE_IN_PROGRESS() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.IS_AUTO_SAVE_IN_PROGRESS' due to disabled trusted mode")

	local result = native_call(0x69240733738C19A0)
	return result:__tointeger() ~= 0
end
natives.misc.is_auto_save_in_progress = natives.MISC.IS_AUTO_SAVE_IN_PROGRESS

function natives.MISC.HAS_CODE_REQUESTED_AUTOSAVE() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.HAS_CODE_REQUESTED_AUTOSAVE' due to disabled trusted mode")

	local result = native_call(0x2107A3773771186D)
	return result:__tointeger() ~= 0
end
natives.misc.has_code_requested_autosave = natives.MISC.HAS_CODE_REQUESTED_AUTOSAVE

function natives.MISC.CLEAR_CODE_REQUESTED_AUTOSAVE() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.CLEAR_CODE_REQUESTED_AUTOSAVE' due to disabled trusted mode")

	local result = native_call(0x06462A961E94B67C)
end
natives.misc.clear_code_requested_autosave = natives.MISC.CLEAR_CODE_REQUESTED_AUTOSAVE

function natives.MISC.BEGIN_REPLAY_STATS(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.BEGIN_REPLAY_STATS' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xE0E500246FF73D66, p0, p1)
end
natives.misc.begin_replay_stats = natives.MISC.BEGIN_REPLAY_STATS

function natives.MISC.ADD_REPLAY_STAT_VALUE(--[[Any]] value) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.ADD_REPLAY_STAT_VALUE' due to disabled trusted mode")

	assert(type(value) == "number", "Arg #1 (value) must be a number.")

	local result = native_call(0x69FE6DC87BD2A5E9, value)
end
natives.misc.add_replay_stat_value = natives.MISC.ADD_REPLAY_STAT_VALUE

function natives.MISC.END_REPLAY_STATS() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.END_REPLAY_STATS' due to disabled trusted mode")

	local result = native_call(0xA23E821FBDF8A5F2)
end
natives.misc.end_replay_stats = natives.MISC.END_REPLAY_STATS

function natives.MISC.HAVE_REPLAY_STATS_BEEN_STORED() -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.HAVE_REPLAY_STATS_BEEN_STORED' due to disabled trusted mode")

	local result = native_call(0xD642319C54AADEB6)
	return result:__tointeger()
end
natives.misc.have_replay_stats_been_stored = natives.MISC.HAVE_REPLAY_STATS_BEEN_STORED

function natives.MISC.GET_REPLAY_STAT_MISSION_ID() -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.GET_REPLAY_STAT_MISSION_ID' due to disabled trusted mode")

	local result = native_call(0x5B1F2E327B6B6FE1)
	return result:__tointeger()
end
natives.misc.get_replay_stat_mission_id = natives.MISC.GET_REPLAY_STAT_MISSION_ID

function natives.MISC.GET_REPLAY_STAT_MISSION_TYPE() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.GET_REPLAY_STAT_MISSION_TYPE' due to disabled trusted mode")

	local result = native_call(0x2B626A0150E4D449)
	return result:__tointeger()
end
natives.misc.get_replay_stat_mission_type = natives.MISC.GET_REPLAY_STAT_MISSION_TYPE

function natives.MISC.GET_REPLAY_STAT_COUNT() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.GET_REPLAY_STAT_COUNT' due to disabled trusted mode")

	local result = native_call(0xDC9274A7EF6B2867)
	return result:__tointeger()
end
natives.misc.get_replay_stat_count = natives.MISC.GET_REPLAY_STAT_COUNT

function natives.MISC.GET_REPLAY_STAT_AT_INDEX(--[[int]] index) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.GET_REPLAY_STAT_AT_INDEX' due to disabled trusted mode")

	assert(type(index) == "number", "Arg #1 (index) must be a number.")

	local result = native_call(0x8098C8D6597AAE18, index)
	return result:__tointeger()
end
natives.misc.get_replay_stat_at_index = natives.MISC.GET_REPLAY_STAT_AT_INDEX

function natives.MISC.CLEAR_REPLAY_STATS() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.CLEAR_REPLAY_STATS' due to disabled trusted mode")

	local result = native_call(0x1B1AB132A16FDA55)
end
natives.misc.clear_replay_stats = natives.MISC.CLEAR_REPLAY_STATS

function natives.MISC.QUEUE_MISSION_REPEAT_LOAD() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.QUEUE_MISSION_REPEAT_LOAD' due to disabled trusted mode")

	local result = native_call(0x72DE52178C291CB5)
	return result:__tointeger() ~= 0
end
natives.misc.queue_mission_repeat_load = natives.MISC.QUEUE_MISSION_REPEAT_LOAD

--[[
Shows the screen which is visible before you redo a mission? The game will make a restoration point where you will cameback when the mission is over.
Returns 1 if the message isn't currently on screen
]]
function natives.MISC.QUEUE_MISSION_REPEAT_SAVE() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.QUEUE_MISSION_REPEAT_SAVE' due to disabled trusted mode")

	local result = native_call(0x44A0BDC559B35F6E)
	return result:__tointeger() ~= 0
end
natives.misc.queue_mission_repeat_save = natives.MISC.QUEUE_MISSION_REPEAT_SAVE

function natives.MISC.QUEUE_MISSION_REPEAT_SAVE_FOR_BENCHMARK_TEST() -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.QUEUE_MISSION_REPEAT_SAVE_FOR_BENCHMARK_TEST' due to disabled trusted mode")

	local result = native_call(0xEB2104E905C6F2E9)
	return result:__tointeger()
end
natives.misc.queue_mission_repeat_save_for_benchmark_test = natives.MISC.QUEUE_MISSION_REPEAT_SAVE_FOR_BENCHMARK_TEST

function natives.MISC.GET_STATUS_OF_MISSION_REPEAT_SAVE() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.GET_STATUS_OF_MISSION_REPEAT_SAVE' due to disabled trusted mode")

	local result = native_call(0x2B5E102E4A42F2BF)
	return result:__tointeger()
end
natives.misc.get_status_of_mission_repeat_save = natives.MISC.GET_STATUS_OF_MISSION_REPEAT_SAVE

function natives.MISC.IS_MEMORY_CARD_IN_USE() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.IS_MEMORY_CARD_IN_USE' due to disabled trusted mode")

	local result = native_call(0x8A75CE2956274ADD)
	return result:__tointeger() ~= 0
end
natives.misc.is_memory_card_in_use = natives.MISC.IS_MEMORY_CARD_IN_USE

function natives.MISC.SHOOT_SINGLE_BULLET_BETWEEN_COORDS(--[[float]] x1, --[[float]] y1, --[[float]] z1, --[[float]] x2, --[[float]] y2, --[[float]] z2, --[[int]] damage, --[[BOOL]] p7, --[[Hash]] weaponHash, --[[Ped]] ownerPed, --[[BOOL]] isAudible, --[[BOOL]] isInvisible, --[[float]] speed) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.SHOOT_SINGLE_BULLET_BETWEEN_COORDS' due to disabled trusted mode")

	assert(type(x1) == "number", "Arg #1 (x1) must be a number.")
	assert(type(y1) == "number", "Arg #2 (y1) must be a number.")
	assert(type(z1) == "number", "Arg #3 (z1) must be a number.")
	assert(type(x2) == "number", "Arg #4 (x2) must be a number.")
	assert(type(y2) == "number", "Arg #5 (y2) must be a number.")
	assert(type(z2) == "number", "Arg #6 (z2) must be a number.")
	assert(type(damage) == "number", "Arg #7 (damage) must be a number.")
	assert(type(p7) == "boolean", "Arg #8 (p7) must be a boolean.")
	assert(type(weaponHash) == "number", "Arg #9 (weaponHash) must be a number.")
	assert(type(ownerPed) == "number", "Arg #10 (ownerPed) must be a number.")
	assert(type(isAudible) == "boolean", "Arg #11 (isAudible) must be a boolean.")
	assert(type(isInvisible) == "boolean", "Arg #12 (isInvisible) must be a boolean.")
	assert(type(speed) == "number", "Arg #13 (speed) must be a number.")

	local result = native_call(0x867654CBC7606F2C, x1, y1, z1, x2, y2, z2, damage, p7, weaponHash, ownerPed, isAudible, isInvisible, speed)
end
natives.misc.shoot_single_bullet_between_coords = natives.MISC.SHOOT_SINGLE_BULLET_BETWEEN_COORDS

--[[
entity - entity to ignore
]]
function natives.MISC.SHOOT_SINGLE_BULLET_BETWEEN_COORDS_IGNORE_ENTITY(--[[float]] x1, --[[float]] y1, --[[float]] z1, --[[float]] x2, --[[float]] y2, --[[float]] z2, --[[int]] damage, --[[BOOL]] p7, --[[Hash]] weaponHash, --[[Ped]] ownerPed, --[[BOOL]] isAudible, --[[BOOL]] isInvisible, --[[float]] speed, --[[Entity]] entity, --[[Any]] p14) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.SHOOT_SINGLE_BULLET_BETWEEN_COORDS_IGNORE_ENTITY' due to disabled trusted mode")

	assert(type(x1) == "number", "Arg #1 (x1) must be a number.")
	assert(type(y1) == "number", "Arg #2 (y1) must be a number.")
	assert(type(z1) == "number", "Arg #3 (z1) must be a number.")
	assert(type(x2) == "number", "Arg #4 (x2) must be a number.")
	assert(type(y2) == "number", "Arg #5 (y2) must be a number.")
	assert(type(z2) == "number", "Arg #6 (z2) must be a number.")
	assert(type(damage) == "number", "Arg #7 (damage) must be a number.")
	assert(type(p7) == "boolean", "Arg #8 (p7) must be a boolean.")
	assert(type(weaponHash) == "number", "Arg #9 (weaponHash) must be a number.")
	assert(type(ownerPed) == "number", "Arg #10 (ownerPed) must be a number.")
	assert(type(isAudible) == "boolean", "Arg #11 (isAudible) must be a boolean.")
	assert(type(isInvisible) == "boolean", "Arg #12 (isInvisible) must be a boolean.")
	assert(type(speed) == "number", "Arg #13 (speed) must be a number.")
	assert(type(entity) == "number", "Arg #14 (entity) must be a number.")
	assert(type(p14) == "number", "Arg #15 (p14) must be a number.")

	local result = native_call(0xE3A7742E0B7A2F8B, x1, y1, z1, x2, y2, z2, damage, p7, weaponHash, ownerPed, isAudible, isInvisible, speed, entity, p14)
end
natives.misc.shoot_single_bullet_between_coords_ignore_entity = natives.MISC.SHOOT_SINGLE_BULLET_BETWEEN_COORDS_IGNORE_ENTITY

--[[
entity - entity to ignore
targetEntity - entity to home in on, if the weapon hash provided supports homing
]]
function natives.MISC.SHOOT_SINGLE_BULLET_BETWEEN_COORDS_IGNORE_ENTITY_NEW(--[[float]] x1, --[[float]] y1, --[[float]] z1, --[[float]] x2, --[[float]] y2, --[[float]] z2, --[[int]] damage, --[[BOOL]] p7, --[[Hash]] weaponHash, --[[Ped]] ownerPed, --[[BOOL]] isAudible, --[[BOOL]] isInvisible, --[[float]] speed, --[[Entity]] entity, --[[BOOL]] p14, --[[BOOL]] p15, --[[Entity]] targetEntity, --[[BOOL]] p17, --[[Any]] p18, --[[Any]] p19, --[[Any]] p20) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.SHOOT_SINGLE_BULLET_BETWEEN_COORDS_IGNORE_ENTITY_NEW' due to disabled trusted mode")

	assert(type(x1) == "number", "Arg #1 (x1) must be a number.")
	assert(type(y1) == "number", "Arg #2 (y1) must be a number.")
	assert(type(z1) == "number", "Arg #3 (z1) must be a number.")
	assert(type(x2) == "number", "Arg #4 (x2) must be a number.")
	assert(type(y2) == "number", "Arg #5 (y2) must be a number.")
	assert(type(z2) == "number", "Arg #6 (z2) must be a number.")
	assert(type(damage) == "number", "Arg #7 (damage) must be a number.")
	assert(type(p7) == "boolean", "Arg #8 (p7) must be a boolean.")
	assert(type(weaponHash) == "number", "Arg #9 (weaponHash) must be a number.")
	assert(type(ownerPed) == "number", "Arg #10 (ownerPed) must be a number.")
	assert(type(isAudible) == "boolean", "Arg #11 (isAudible) must be a boolean.")
	assert(type(isInvisible) == "boolean", "Arg #12 (isInvisible) must be a boolean.")
	assert(type(speed) == "number", "Arg #13 (speed) must be a number.")
	assert(type(entity) == "number", "Arg #14 (entity) must be a number.")
	assert(type(p14) == "boolean", "Arg #15 (p14) must be a boolean.")
	assert(type(p15) == "boolean", "Arg #16 (p15) must be a boolean.")
	assert(type(targetEntity) == "number", "Arg #17 (targetEntity) must be a number.")
	assert(type(p17) == "boolean", "Arg #18 (p17) must be a boolean.")
	assert(type(p18) == "number", "Arg #19 (p18) must be a number.")
	assert(type(p19) == "number", "Arg #20 (p19) must be a number.")
	assert(type(p20) == "number", "Arg #21 (p20) must be a number.")

	local result = native_call(0xBFE5756E7407064A, x1, y1, z1, x2, y2, z2, damage, p7, weaponHash, ownerPed, isAudible, isInvisible, speed, entity, p14, p15, targetEntity, p17, p18, p19, p20)
end
natives.misc.shoot_single_bullet_between_coords_ignore_entity_new = natives.MISC.SHOOT_SINGLE_BULLET_BETWEEN_COORDS_IGNORE_ENTITY_NEW

--[[
Gets the dimensions of a model.

Calculate (maximum - minimum) to get the size, in which case, Y will be how long the model is.

Example from the scripts: MISC::GET_MODEL_DIMENSIONS(ENTITY::GET_ENTITY_MODEL(PLAYER::PLAYER_PED_ID()), &v_1A, &v_17);
]]
function natives.MISC.GET_MODEL_DIMENSIONS(--[[Hash]] modelHash, --[[Vector3*]] minimum, --[[Vector3*]] maximum) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.GET_MODEL_DIMENSIONS' due to disabled trusted mode")

	assert(type(modelHash) == "number", "Arg #1 (modelHash) must be a number.")
	assert(type(minimum) == "userdata", "Arg #2 (minimum) must be a userdata.")
	assert(type(maximum) == "userdata", "Arg #3 (maximum) must be a userdata.")

	local result = native_call(0x03E8D3D5F549087A, modelHash, minimum, maximum)
end
natives.misc.get_model_dimensions = natives.MISC.GET_MODEL_DIMENSIONS

--[[
Sets a visually fake wanted level on the user interface. Used by Rockstar's scripts to "override" regular wanted levels and make custom ones while the real wanted level and multipliers are still in effect.

Max is 6, anything above this makes it just 6. Also the mini-map gets the red & blue flashing effect.
]]
function natives.MISC.SET_FAKE_WANTED_LEVEL(--[[int]] fakeWantedLevel) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.SET_FAKE_WANTED_LEVEL' due to disabled trusted mode")

	assert(type(fakeWantedLevel) == "number", "Arg #1 (fakeWantedLevel) must be a number.")

	local result = native_call(0x1454F2448DE30163, fakeWantedLevel)
end
natives.misc.set_fake_wanted_level = natives.MISC.SET_FAKE_WANTED_LEVEL

function natives.MISC.GET_FAKE_WANTED_LEVEL() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.GET_FAKE_WANTED_LEVEL' due to disabled trusted mode")

	local result = native_call(0x4C9296CBCD1B971E)
	return result:__tointeger()
end
natives.misc.get_fake_wanted_level = natives.MISC.GET_FAKE_WANTED_LEVEL

function natives.MISC.USING_MISSION_CREATOR(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.USING_MISSION_CREATOR' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0xF14878FC50BEC6EE, toggle)
end
natives.misc.using_mission_creator = natives.MISC.USING_MISSION_CREATOR

function natives.MISC.ALLOW_MISSION_CREATOR_WARP(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.ALLOW_MISSION_CREATOR_WARP' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0xDEA36202FC3382DF, toggle)
end
natives.misc.allow_mission_creator_warp = natives.MISC.ALLOW_MISSION_CREATOR_WARP

function natives.MISC.SET_MINIGAME_IN_PROGRESS(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.SET_MINIGAME_IN_PROGRESS' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x19E00D7322C6F85B, toggle)
end
natives.misc.set_minigame_in_progress = natives.MISC.SET_MINIGAME_IN_PROGRESS

function natives.MISC.IS_MINIGAME_IN_PROGRESS() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.IS_MINIGAME_IN_PROGRESS' due to disabled trusted mode")

	local result = native_call(0x2B4A15E44DE0F478)
	return result:__tointeger() ~= 0
end
natives.misc.is_minigame_in_progress = natives.MISC.IS_MINIGAME_IN_PROGRESS

function natives.MISC.IS_THIS_A_MINIGAME_SCRIPT() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.IS_THIS_A_MINIGAME_SCRIPT' due to disabled trusted mode")

	local result = native_call(0x7B30F65D7B710098)
	return result:__tointeger() ~= 0
end
natives.misc.is_this_a_minigame_script = natives.MISC.IS_THIS_A_MINIGAME_SCRIPT

--[[
This function is hard-coded to always return 0.
]]
function natives.MISC.IS_SNIPER_INVERTED() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.IS_SNIPER_INVERTED' due to disabled trusted mode")

	local result = native_call(0x61A23B7EDA9BDA24)
	return result:__tointeger() ~= 0
end
natives.misc.is_sniper_inverted = natives.MISC.IS_SNIPER_INVERTED

--[[
Returns true if the game is using the metric measurement system (profile setting 227), false if imperial is used.
]]
function natives.MISC.SHOULD_USE_METRIC_MEASUREMENTS() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.SHOULD_USE_METRIC_MEASUREMENTS' due to disabled trusted mode")

	local result = native_call(0xD3D15555431AB793)
	return result:__tointeger() ~= 0
end
natives.misc.should_use_metric_measurements = natives.MISC.SHOULD_USE_METRIC_MEASUREMENTS

function natives.MISC.GET_PROFILE_SETTING(--[[int]] profileSetting) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.GET_PROFILE_SETTING' due to disabled trusted mode")

	assert(type(profileSetting) == "number", "Arg #1 (profileSetting) must be a number.")

	local result = native_call(0xC488FF2356EA7791, profileSetting)
	return result:__tointeger()
end
natives.misc.get_profile_setting = natives.MISC.GET_PROFILE_SETTING

function natives.MISC.ARE_STRINGS_EQUAL(--[[const char*]] string1, --[[const char*]] string2) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.ARE_STRINGS_EQUAL' due to disabled trusted mode")

	assert(type(string1) == "string", "Arg #1 (string1) must be a string.")
	assert(type(string2) == "string", "Arg #2 (string2) must be a string.")

	local result = native_call(0x0C515FAB3FF9EA92, string1, string2)
	return result:__tointeger() ~= 0
end
natives.misc.are_strings_equal = natives.MISC.ARE_STRINGS_EQUAL

--[[
Compares two strings up to a specified number of characters.

Parameters:
str1 - String to be compared.
str2 - String to be compared.
matchCase - Comparison will be case-sensitive.
maxLength - Maximum number of characters to compare. A value of -1 indicates an infinite length.

Returns:
A value indicating the relationship between the strings:
<0 - The first non-matching character in 'str1' is less than the one in 'str2'. (e.g. 'A' < 'B', so result = -1)
0 - The contents of both strings are equal.
>0 - The first non-matching character in 'str1' is less than the one in 'str2'. (e.g. 'B' > 'A', so result = 1)

Examples:
MISC::COMPARE_STRINGS("STRING", "string", false, -1); // 0; equal
MISC::COMPARE_STRINGS("TESTING", "test", false, 4); // 0; equal
MISC::COMPARE_STRINGS("R2D2", "R2xx", false, 2); // 0; equal
MISC::COMPARE_STRINGS("foo", "bar", false, -1); // 4; 'f' > 'b'
MISC::COMPARE_STRINGS("A", "A", true, 1); // 0; equal

When comparing case-sensitive strings, lower-case characters are greater than upper-case characters:
MISC::COMPARE_STRINGS("A", "a", true, 1); // -1; 'A' < 'a'
MISC::COMPARE_STRINGS("a", "A", true, 1); // 1; 'a' > 'A'
]]
function natives.MISC.COMPARE_STRINGS(--[[const char*]] str1, --[[const char*]] str2, --[[BOOL]] matchCase, --[[int]] maxLength) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.COMPARE_STRINGS' due to disabled trusted mode")

	assert(type(str1) == "string", "Arg #1 (str1) must be a string.")
	assert(type(str2) == "string", "Arg #2 (str2) must be a string.")
	assert(type(matchCase) == "boolean", "Arg #3 (matchCase) must be a boolean.")
	assert(type(maxLength) == "number", "Arg #4 (maxLength) must be a number.")

	local result = native_call(0x1E34710ECD4AB0EB, str1, str2, matchCase, maxLength)
	return result:__tointeger()
end
natives.misc.compare_strings = natives.MISC.COMPARE_STRINGS

function natives.MISC.ABSI(--[[int]] value) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.ABSI' due to disabled trusted mode")

	assert(type(value) == "number", "Arg #1 (value) must be a number.")

	local result = native_call(0xF0D31AD191A74F87, value)
	return result:__tointeger()
end
natives.misc.absi = natives.MISC.ABSI

function natives.MISC.ABSF(--[[float]] value) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.ABSF' due to disabled trusted mode")

	assert(type(value) == "number", "Arg #1 (value) must be a number.")

	local result = native_call(0x73D57CFFDD12C355, value)
	return result:__tonumber()
end
natives.misc.absf = natives.MISC.ABSF

--[[
Determines whether there is a sniper bullet within the specified coordinates. The coordinates form an axis-aligned bounding box.
]]
function natives.MISC.IS_SNIPER_BULLET_IN_AREA(--[[float]] x1, --[[float]] y1, --[[float]] z1, --[[float]] x2, --[[float]] y2, --[[float]] z2) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.IS_SNIPER_BULLET_IN_AREA' due to disabled trusted mode")

	assert(type(x1) == "number", "Arg #1 (x1) must be a number.")
	assert(type(y1) == "number", "Arg #2 (y1) must be a number.")
	assert(type(z1) == "number", "Arg #3 (z1) must be a number.")
	assert(type(x2) == "number", "Arg #4 (x2) must be a number.")
	assert(type(y2) == "number", "Arg #5 (y2) must be a number.")
	assert(type(z2) == "number", "Arg #6 (z2) must be a number.")

	local result = native_call(0xFEFCF11B01287125, x1, y1, z1, x2, y2, z2)
	return result:__tointeger() ~= 0
end
natives.misc.is_sniper_bullet_in_area = natives.MISC.IS_SNIPER_BULLET_IN_AREA

--[[
Determines whether there is a projectile within the specified coordinates. The coordinates form a rectangle.

- Nacorpio


ownedByPlayer = only projectiles fired by the player will be detected.
]]
function natives.MISC.IS_PROJECTILE_IN_AREA(--[[float]] x1, --[[float]] y1, --[[float]] z1, --[[float]] x2, --[[float]] y2, --[[float]] z2, --[[BOOL]] ownedByPlayer) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.IS_PROJECTILE_IN_AREA' due to disabled trusted mode")

	assert(type(x1) == "number", "Arg #1 (x1) must be a number.")
	assert(type(y1) == "number", "Arg #2 (y1) must be a number.")
	assert(type(z1) == "number", "Arg #3 (z1) must be a number.")
	assert(type(x2) == "number", "Arg #4 (x2) must be a number.")
	assert(type(y2) == "number", "Arg #5 (y2) must be a number.")
	assert(type(z2) == "number", "Arg #6 (z2) must be a number.")
	assert(type(ownedByPlayer) == "boolean", "Arg #7 (ownedByPlayer) must be a boolean.")

	local result = native_call(0x5270A8FBC098C3F8, x1, y1, z1, x2, y2, z2, ownedByPlayer)
	return result:__tointeger() ~= 0
end
natives.misc.is_projectile_in_area = natives.MISC.IS_PROJECTILE_IN_AREA

--[[
Determines whether there is a projectile of a specific type within the specified coordinates. The coordinates form a axis-aligned bounding box.
]]
function natives.MISC.IS_PROJECTILE_TYPE_IN_AREA(--[[float]] x1, --[[float]] y1, --[[float]] z1, --[[float]] x2, --[[float]] y2, --[[float]] z2, --[[int]] type, --[[BOOL]] ownedByPlayer) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.IS_PROJECTILE_TYPE_IN_AREA' due to disabled trusted mode")

	assert(type(x1) == "number", "Arg #1 (x1) must be a number.")
	assert(type(y1) == "number", "Arg #2 (y1) must be a number.")
	assert(type(z1) == "number", "Arg #3 (z1) must be a number.")
	assert(type(x2) == "number", "Arg #4 (x2) must be a number.")
	assert(type(y2) == "number", "Arg #5 (y2) must be a number.")
	assert(type(z2) == "number", "Arg #6 (z2) must be a number.")
	assert(type(type) == "number", "Arg #7 (type) must be a number.")
	assert(type(ownedByPlayer) == "boolean", "Arg #8 (ownedByPlayer) must be a boolean.")

	local result = native_call(0x2E0DC353342C4A6D, x1, y1, z1, x2, y2, z2, type, ownedByPlayer)
	return result:__tointeger() ~= 0
end
natives.misc.is_projectile_type_in_area = natives.MISC.IS_PROJECTILE_TYPE_IN_AREA

--[[
See IS_POINT_IN_ANGLED_AREA for the definition of an angled area.
]]
function natives.MISC.IS_PROJECTILE_TYPE_IN_ANGLED_AREA(--[[float]] x1, --[[float]] y1, --[[float]] z1, --[[float]] x2, --[[float]] y2, --[[float]] z2, --[[float]] width, --[[Any]] p7, --[[BOOL]] ownedByPlayer) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.IS_PROJECTILE_TYPE_IN_ANGLED_AREA' due to disabled trusted mode")

	assert(type(x1) == "number", "Arg #1 (x1) must be a number.")
	assert(type(y1) == "number", "Arg #2 (y1) must be a number.")
	assert(type(z1) == "number", "Arg #3 (z1) must be a number.")
	assert(type(x2) == "number", "Arg #4 (x2) must be a number.")
	assert(type(y2) == "number", "Arg #5 (y2) must be a number.")
	assert(type(z2) == "number", "Arg #6 (z2) must be a number.")
	assert(type(width) == "number", "Arg #7 (width) must be a number.")
	assert(type(p7) == "number", "Arg #8 (p7) must be a number.")
	assert(type(ownedByPlayer) == "boolean", "Arg #9 (ownedByPlayer) must be a boolean.")

	local result = native_call(0xF0BC12401061DEA0, x1, y1, z1, x2, y2, z2, width, p7, ownedByPlayer)
	return result:__tointeger() ~= 0
end
natives.misc.is_projectile_type_in_angled_area = natives.MISC.IS_PROJECTILE_TYPE_IN_ANGLED_AREA

function natives.MISC.IS_PROJECTILE_TYPE_WITHIN_DISTANCE(--[[float]] x, --[[float]] y, --[[float]] z, --[[Hash]] projectileHash, --[[float]] radius, --[[BOOL]] ownedByPlayer) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.IS_PROJECTILE_TYPE_WITHIN_DISTANCE' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(projectileHash) == "number", "Arg #4 (projectileHash) must be a number.")
	assert(type(radius) == "number", "Arg #5 (radius) must be a number.")
	assert(type(ownedByPlayer) == "boolean", "Arg #6 (ownedByPlayer) must be a boolean.")

	local result = native_call(0x34318593248C8FB2, x, y, z, projectileHash, radius, ownedByPlayer)
	return result:__tointeger() ~= 0
end
natives.misc.is_projectile_type_within_distance = natives.MISC.IS_PROJECTILE_TYPE_WITHIN_DISTANCE

function natives.MISC.GET_COORDS_OF_PROJECTILE_TYPE_IN_AREA(--[[float]] x1, --[[float]] y1, --[[float]] z1, --[[float]] x2, --[[float]] y2, --[[float]] z2, --[[Hash]] projectileHash, --[[Vector3*]] projectilePos, --[[BOOL]] ownedByPlayer) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.GET_COORDS_OF_PROJECTILE_TYPE_IN_AREA' due to disabled trusted mode")

	assert(type(x1) == "number", "Arg #1 (x1) must be a number.")
	assert(type(y1) == "number", "Arg #2 (y1) must be a number.")
	assert(type(z1) == "number", "Arg #3 (z1) must be a number.")
	assert(type(x2) == "number", "Arg #4 (x2) must be a number.")
	assert(type(y2) == "number", "Arg #5 (y2) must be a number.")
	assert(type(z2) == "number", "Arg #6 (z2) must be a number.")
	assert(type(projectileHash) == "number", "Arg #7 (projectileHash) must be a number.")
	assert(type(projectilePos) == "userdata", "Arg #8 (projectilePos) must be a userdata.")
	assert(type(ownedByPlayer) == "boolean", "Arg #9 (ownedByPlayer) must be a boolean.")

	local result = native_call(0x8D7A43EC6A5FEA45, x1, y1, z1, x2, y2, z2, projectileHash, projectilePos, ownedByPlayer)
	return result:__tointeger() ~= 0
end
natives.misc.get_coords_of_projectile_type_in_area = natives.MISC.GET_COORDS_OF_PROJECTILE_TYPE_IN_AREA

function natives.MISC.GET_COORDS_OF_PROJECTILE_TYPE_WITHIN_DISTANCE(--[[Ped]] ped, --[[Hash]] weaponHash, --[[float]] distance, --[[Vector3*]] outCoords, --[[BOOL]] p4) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.GET_COORDS_OF_PROJECTILE_TYPE_WITHIN_DISTANCE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(weaponHash) == "number", "Arg #2 (weaponHash) must be a number.")
	assert(type(distance) == "number", "Arg #3 (distance) must be a number.")
	assert(type(outCoords) == "userdata", "Arg #4 (outCoords) must be a userdata.")
	assert(type(p4) == "boolean", "Arg #5 (p4) must be a boolean.")

	local result = native_call(0xDFB4138EEFED7B81, ped, weaponHash, distance, outCoords, p4)
	return result:__tointeger() ~= 0
end
natives.misc.get_coords_of_projectile_type_within_distance = natives.MISC.GET_COORDS_OF_PROJECTILE_TYPE_WITHIN_DISTANCE

function natives.MISC.GET_PROJECTILE_OF_PROJECTILE_TYPE_WITHIN_DISTANCE(--[[Ped]] ped, --[[Hash]] weaponHash, --[[float]] distance, --[[Vector3*]] outCoords, --[[Object*]] outProjectile, --[[BOOL]] p5) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.GET_PROJECTILE_OF_PROJECTILE_TYPE_WITHIN_DISTANCE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(weaponHash) == "number", "Arg #2 (weaponHash) must be a number.")
	assert(type(distance) == "number", "Arg #3 (distance) must be a number.")
	assert(type(outCoords) == "userdata", "Arg #4 (outCoords) must be a userdata.")
	assert(type(outProjectile) == "userdata", "Arg #5 (outProjectile) must be a userdata.")
	assert(type(p5) == "boolean", "Arg #6 (p5) must be a boolean.")

	local result = native_call(0x82FDE6A57EE4EE44, ped, weaponHash, distance, outCoords, outProjectile, p5)
	return result:__tointeger() ~= 0
end
natives.misc.get_projectile_of_projectile_type_within_distance = natives.MISC.GET_PROJECTILE_OF_PROJECTILE_TYPE_WITHIN_DISTANCE

--[[
For projectiles, see: IS_PROJECTILE_TYPE_IN_ANGLED_AREA
See IS_POINT_IN_ANGLED_AREA for the definition of an angled area.
Returns True if a bullet, as maintained by a pool within CWeaponManager, has been fired into the defined angled area.
]]
function natives.MISC.IS_BULLET_IN_ANGLED_AREA(--[[float]] x1, --[[float]] y1, --[[float]] z1, --[[float]] x2, --[[float]] y2, --[[float]] z2, --[[float]] width, --[[BOOL]] ownedByPlayer) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.IS_BULLET_IN_ANGLED_AREA' due to disabled trusted mode")

	assert(type(x1) == "number", "Arg #1 (x1) must be a number.")
	assert(type(y1) == "number", "Arg #2 (y1) must be a number.")
	assert(type(z1) == "number", "Arg #3 (z1) must be a number.")
	assert(type(x2) == "number", "Arg #4 (x2) must be a number.")
	assert(type(y2) == "number", "Arg #5 (y2) must be a number.")
	assert(type(z2) == "number", "Arg #6 (z2) must be a number.")
	assert(type(width) == "number", "Arg #7 (width) must be a number.")
	assert(type(ownedByPlayer) == "boolean", "Arg #8 (ownedByPlayer) must be a boolean.")

	local result = native_call(0x1A8B5F3C01E2B477, x1, y1, z1, x2, y2, z2, width, ownedByPlayer)
	return result:__tointeger() ~= 0
end
natives.misc.is_bullet_in_angled_area = natives.MISC.IS_BULLET_IN_ANGLED_AREA

function natives.MISC.IS_BULLET_IN_AREA(--[[float]] x, --[[float]] y, --[[float]] z, --[[float]] radius, --[[BOOL]] ownedByPlayer) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.IS_BULLET_IN_AREA' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(radius) == "number", "Arg #4 (radius) must be a number.")
	assert(type(ownedByPlayer) == "boolean", "Arg #5 (ownedByPlayer) must be a boolean.")

	local result = native_call(0x3F2023999AD51C1F, x, y, z, radius, ownedByPlayer)
	return result:__tointeger() ~= 0
end
natives.misc.is_bullet_in_area = natives.MISC.IS_BULLET_IN_AREA

function natives.MISC.IS_BULLET_IN_BOX(--[[float]] x1, --[[float]] y1, --[[float]] z1, --[[float]] x2, --[[float]] y2, --[[float]] z2, --[[BOOL]] ownedByPlayer) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.IS_BULLET_IN_BOX' due to disabled trusted mode")

	assert(type(x1) == "number", "Arg #1 (x1) must be a number.")
	assert(type(y1) == "number", "Arg #2 (y1) must be a number.")
	assert(type(z1) == "number", "Arg #3 (z1) must be a number.")
	assert(type(x2) == "number", "Arg #4 (x2) must be a number.")
	assert(type(y2) == "number", "Arg #5 (y2) must be a number.")
	assert(type(z2) == "number", "Arg #6 (z2) must be a number.")
	assert(type(ownedByPlayer) == "boolean", "Arg #7 (ownedByPlayer) must be a boolean.")

	local result = native_call(0xDE0F6D7450D37351, x1, y1, z1, x2, y2, z2, ownedByPlayer)
	return result:__tointeger() ~= 0
end
natives.misc.is_bullet_in_box = natives.MISC.IS_BULLET_IN_BOX

--[[
p3 - possibly radius?
]]
function natives.MISC.HAS_BULLET_IMPACTED_IN_AREA(--[[float]] x, --[[float]] y, --[[float]] z, --[[float]] p3, --[[BOOL]] p4, --[[BOOL]] p5) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.HAS_BULLET_IMPACTED_IN_AREA' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "boolean", "Arg #5 (p4) must be a boolean.")
	assert(type(p5) == "boolean", "Arg #6 (p5) must be a boolean.")

	local result = native_call(0x9870ACFB89A90995, x, y, z, p3, p4, p5)
	return result:__tointeger() ~= 0
end
natives.misc.has_bullet_impacted_in_area = natives.MISC.HAS_BULLET_IMPACTED_IN_AREA

function natives.MISC.HAS_BULLET_IMPACTED_IN_BOX(--[[float]] p0, --[[float]] p1, --[[float]] p2, --[[float]] p3, --[[float]] p4, --[[float]] p5, --[[BOOL]] p6, --[[BOOL]] p7) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.HAS_BULLET_IMPACTED_IN_BOX' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")
	assert(type(p6) == "boolean", "Arg #7 (p6) must be a boolean.")
	assert(type(p7) == "boolean", "Arg #8 (p7) must be a boolean.")

	local result = native_call(0xDC8C5D7CFEAB8394, p0, p1, p2, p3, p4, p5, p6, p7)
	return result:__tointeger() ~= 0
end
natives.misc.has_bullet_impacted_in_box = natives.MISC.HAS_BULLET_IMPACTED_IN_BOX

--[[
PS4
]]
function natives.MISC.IS_ORBIS_VERSION() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.IS_ORBIS_VERSION' due to disabled trusted mode")

	local result = native_call(0xA72BC0B675B1519E)
	return result:__tointeger() ~= 0
end
natives.misc.is_orbis_version = natives.MISC.IS_ORBIS_VERSION

--[[
XBOX ONE
]]
function natives.MISC.IS_DURANGO_VERSION() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.IS_DURANGO_VERSION' due to disabled trusted mode")

	local result = native_call(0x4D982ADB1978442D)
	return result:__tointeger() ~= 0
end
natives.misc.is_durango_version = natives.MISC.IS_DURANGO_VERSION

function natives.MISC.IS_XBOX360_VERSION() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.IS_XBOX360_VERSION' due to disabled trusted mode")

	local result = native_call(0xF6201B4DAF662A9D)
	return result:__tointeger() ~= 0
end
natives.misc.is_xbox360_version = natives.MISC.IS_XBOX360_VERSION

function natives.MISC.IS_PS3_VERSION() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.IS_PS3_VERSION' due to disabled trusted mode")

	local result = native_call(0xCCA1072C29D096C2)
	return result:__tointeger() ~= 0
end
natives.misc.is_ps3_version = natives.MISC.IS_PS3_VERSION

function natives.MISC.IS_PC_VERSION() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.IS_PC_VERSION' due to disabled trusted mode")

	local result = native_call(0x48AF36444B965238)
	return result:__tointeger() ~= 0
end
natives.misc.is_pc_version = natives.MISC.IS_PC_VERSION

function natives.MISC.IS_STEAM_VERSION() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.IS_STEAM_VERSION' due to disabled trusted mode")

	local result = native_call(0x0A27B2B6282F7169)
	return result:__tointeger() ~= 0
end
natives.misc.is_steam_version = natives.MISC.IS_STEAM_VERSION

--[[
Used to block some of the prostitute stuff due to laws in Australia.
]]
function natives.MISC.IS_AUSSIE_VERSION() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.IS_AUSSIE_VERSION' due to disabled trusted mode")

	local result = native_call(0x9F1935CA1F724008)
	return result:__tointeger() ~= 0
end
natives.misc.is_aussie_version = natives.MISC.IS_AUSSIE_VERSION

function natives.MISC.IS_JAPANESE_VERSION() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.IS_JAPANESE_VERSION' due to disabled trusted mode")

	local result = native_call(0xB8C0BB75D8A77DB3)
	return result:__tointeger() ~= 0
end
natives.misc.is_japanese_version = natives.MISC.IS_JAPANESE_VERSION

function natives.MISC.IS_XBOX_PLATFORM() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.IS_XBOX_PLATFORM' due to disabled trusted mode")

	local result = native_call(0x138679CA01E21F53)
	return result:__tointeger() ~= 0
end
natives.misc.is_xbox_platform = natives.MISC.IS_XBOX_PLATFORM

--[[
Xbox Series (Scarlett) version...
]]
function natives.MISC.IS_SCARLETT_VERSION() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.IS_SCARLETT_VERSION' due to disabled trusted mode")

	local result = native_call(0xC545AB1CF97ABB34)
	return result:__tointeger() ~= 0
end
natives.misc.is_scarlett_version = natives.MISC.IS_SCARLETT_VERSION

function natives.MISC.IS_SCE_PLATFORM() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.IS_SCE_PLATFORM' due to disabled trusted mode")

	local result = native_call(0xF911E695C1EB8518)
	return result:__tointeger() ~= 0
end
natives.misc.is_sce_platform = natives.MISC.IS_SCE_PLATFORM

--[[
PS5 (Prospero) version...
]]
function natives.MISC.IS_PROSPERO_VERSION() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.IS_PROSPERO_VERSION' due to disabled trusted mode")

	local result = native_call(0x807ABE1AB65C24D2)
	return result:__tointeger() ~= 0
end
natives.misc.is_prospero_version = natives.MISC.IS_PROSPERO_VERSION

function natives.MISC.IS_STRING_NULL(--[[const char*]] string) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.IS_STRING_NULL' due to disabled trusted mode")

	assert(type(string) == "string", "Arg #1 (string) must be a string.")

	local result = native_call(0xF22B6C47C6EAB066, string)
	return result:__tointeger() ~= 0
end
natives.misc.is_string_null = natives.MISC.IS_STRING_NULL

function natives.MISC.IS_STRING_NULL_OR_EMPTY(--[[const char*]] string) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.IS_STRING_NULL_OR_EMPTY' due to disabled trusted mode")

	assert(type(string) == "string", "Arg #1 (string) must be a string.")

	local result = native_call(0xCA042B6957743895, string)
	return result:__tointeger() ~= 0
end
natives.misc.is_string_null_or_empty = natives.MISC.IS_STRING_NULL_OR_EMPTY

--[[
Returns false if it's a null or empty string or if the string is too long. outInteger will be set to -999 in that case.

If all checks have passed successfully, the return value will be set to whatever strtol(string, 0i64, 10); returns.
]]
function natives.MISC.STRING_TO_INT(--[[const char*]] string, --[[int*]] outInteger) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.STRING_TO_INT' due to disabled trusted mode")

	assert(type(string) == "string", "Arg #1 (string) must be a string.")
	assert(type(outInteger) == "userdata", "Arg #2 (outInteger) must be a userdata.")

	local result = native_call(0x5A5F40FE637EB584, string, outInteger)
	return result:__tointeger() ~= 0
end
natives.misc.string_to_int = natives.MISC.STRING_TO_INT

function natives.MISC.SET_BITS_IN_RANGE(--[[int*]] var, --[[int]] rangeStart, --[[int]] rangeEnd, --[[int]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.SET_BITS_IN_RANGE' due to disabled trusted mode")

	assert(type(var) == "userdata", "Arg #1 (var) must be a userdata.")
	assert(type(rangeStart) == "number", "Arg #2 (rangeStart) must be a number.")
	assert(type(rangeEnd) == "number", "Arg #3 (rangeEnd) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x8EF07E15701D61ED, var, rangeStart, rangeEnd, p3)
end
natives.misc.set_bits_in_range = natives.MISC.SET_BITS_IN_RANGE

function natives.MISC.GET_BITS_IN_RANGE(--[[int]] var, --[[int]] rangeStart, --[[int]] rangeEnd) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.GET_BITS_IN_RANGE' due to disabled trusted mode")

	assert(type(var) == "number", "Arg #1 (var) must be a number.")
	assert(type(rangeStart) == "number", "Arg #2 (rangeStart) must be a number.")
	assert(type(rangeEnd) == "number", "Arg #3 (rangeEnd) must be a number.")

	local result = native_call(0x53158863FCC0893A, var, rangeStart, rangeEnd)
	return result:__tointeger()
end
natives.misc.get_bits_in_range = natives.MISC.GET_BITS_IN_RANGE

--[[
See description of `ADD_STUNT_JUMP_ANGLED` for detailed info. The only difference really is this one does not have the radius (or angle, not sure) floats parameters for entry and landing zones.
]]
function natives.MISC.ADD_STUNT_JUMP(--[[float]] x1, --[[float]] y1, --[[float]] z1, --[[float]] x2, --[[float]] y2, --[[float]] z2, --[[float]] x3, --[[float]] y3, --[[float]] z3, --[[float]] x4, --[[float]] y4, --[[float]] z4, --[[float]] camX, --[[float]] camY, --[[float]] camZ, --[[int]] p15, --[[int]] p16, --[[int]] p17) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.ADD_STUNT_JUMP' due to disabled trusted mode")

	assert(type(x1) == "number", "Arg #1 (x1) must be a number.")
	assert(type(y1) == "number", "Arg #2 (y1) must be a number.")
	assert(type(z1) == "number", "Arg #3 (z1) must be a number.")
	assert(type(x2) == "number", "Arg #4 (x2) must be a number.")
	assert(type(y2) == "number", "Arg #5 (y2) must be a number.")
	assert(type(z2) == "number", "Arg #6 (z2) must be a number.")
	assert(type(x3) == "number", "Arg #7 (x3) must be a number.")
	assert(type(y3) == "number", "Arg #8 (y3) must be a number.")
	assert(type(z3) == "number", "Arg #9 (z3) must be a number.")
	assert(type(x4) == "number", "Arg #10 (x4) must be a number.")
	assert(type(y4) == "number", "Arg #11 (y4) must be a number.")
	assert(type(z4) == "number", "Arg #12 (z4) must be a number.")
	assert(type(camX) == "number", "Arg #13 (camX) must be a number.")
	assert(type(camY) == "number", "Arg #14 (camY) must be a number.")
	assert(type(camZ) == "number", "Arg #15 (camZ) must be a number.")
	assert(type(p15) == "number", "Arg #16 (p15) must be a number.")
	assert(type(p16) == "number", "Arg #17 (p16) must be a number.")
	assert(type(p17) == "number", "Arg #18 (p17) must be a number.")

	local result = native_call(0x1A992DA297A4630C, x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4, camX, camY, camZ, p15, p16, p17)
	return result:__tointeger()
end
natives.misc.add_stunt_jump = natives.MISC.ADD_STUNT_JUMP

--[[
Creates a new stunt jump.

The radius1 and radius2 might actually not be a radius at all, but that's what it seems to me testing them in-game. But they may be 'angle' floats instead, considering this native is named ADD_STUNT_JUMP_**ANGLED**.

Info about the specific 'parameter sections':


**x1, y1, z1, x2, y2, z2 and radius1:**

First coordinates are for the jump entry area, and the radius that will be checked around that area. So if you're not exactly within the coordinates, but you are within the outter radius limit then it will still register as entering the stunt jump. Note as mentioned above, the radius is just a guess, I'm not really sure about it's exact purpose.


**x3, y3, z3, x4, y4, z4 and radius2:**

Next part is the landing area, again starting with the left bottom (nearest to the stunt jump entry zone) coordinate, and the second one being the top right furthest away part of the landing area. Followed by another (most likely) radius float, this is usually slightly larger than the entry zone 'radius' float value, just because you have quite a lot of places where you can land (I'm guessing).


**camX, camY and camZ:**

The final coordinate in this native is the Camera position. Rotation and zoom/FOV is managed by the game itself, you just need to provide the camera location.


**unk1, unk2 and unk3:**

Not sure what these are for, but they're always `150, 0, 0` in decompiled scripts.

Visualized example in-game: https://d.fivem.dev/2019-03-15_18-24_c7802_846.png

Here is a list of almost all of the stunt jumps from GTA V (taken from decompiled scripts): https://pastebin.com/EW1jBPkY
]]
function natives.MISC.ADD_STUNT_JUMP_ANGLED(--[[float]] x1, --[[float]] y1, --[[float]] z1, --[[float]] x2, --[[float]] y2, --[[float]] z2, --[[float]] radius1, --[[float]] x3, --[[float]] y3, --[[float]] z3, --[[float]] x4, --[[float]] y4, --[[float]] z4, --[[float]] radius2, --[[float]] camX, --[[float]] camY, --[[float]] camZ, --[[int]] p17, --[[int]] p18, --[[int]] p19) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.ADD_STUNT_JUMP_ANGLED' due to disabled trusted mode")

	assert(type(x1) == "number", "Arg #1 (x1) must be a number.")
	assert(type(y1) == "number", "Arg #2 (y1) must be a number.")
	assert(type(z1) == "number", "Arg #3 (z1) must be a number.")
	assert(type(x2) == "number", "Arg #4 (x2) must be a number.")
	assert(type(y2) == "number", "Arg #5 (y2) must be a number.")
	assert(type(z2) == "number", "Arg #6 (z2) must be a number.")
	assert(type(radius1) == "number", "Arg #7 (radius1) must be a number.")
	assert(type(x3) == "number", "Arg #8 (x3) must be a number.")
	assert(type(y3) == "number", "Arg #9 (y3) must be a number.")
	assert(type(z3) == "number", "Arg #10 (z3) must be a number.")
	assert(type(x4) == "number", "Arg #11 (x4) must be a number.")
	assert(type(y4) == "number", "Arg #12 (y4) must be a number.")
	assert(type(z4) == "number", "Arg #13 (z4) must be a number.")
	assert(type(radius2) == "number", "Arg #14 (radius2) must be a number.")
	assert(type(camX) == "number", "Arg #15 (camX) must be a number.")
	assert(type(camY) == "number", "Arg #16 (camY) must be a number.")
	assert(type(camZ) == "number", "Arg #17 (camZ) must be a number.")
	assert(type(p17) == "number", "Arg #18 (p17) must be a number.")
	assert(type(p18) == "number", "Arg #19 (p18) must be a number.")
	assert(type(p19) == "number", "Arg #20 (p19) must be a number.")

	local result = native_call(0xBBE5D803A5360CBF, x1, y1, z1, x2, y2, z2, radius1, x3, y3, z3, x4, y4, z4, radius2, camX, camY, camZ, p17, p18, p19)
	return result:__tointeger()
end
natives.misc.add_stunt_jump_angled = natives.MISC.ADD_STUNT_JUMP_ANGLED

--[[
Toggles some stunt jump stuff.
]]
function natives.MISC.TOGGLE_SHOW_OPTIONAL_STUNT_JUMP_CAMERA(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.TOGGLE_SHOW_OPTIONAL_STUNT_JUMP_CAMERA' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0xFB80AB299D2EE1BD, toggle)
end
natives.misc.toggle_show_optional_stunt_jump_camera = natives.MISC.TOGGLE_SHOW_OPTIONAL_STUNT_JUMP_CAMERA

function natives.MISC.DELETE_STUNT_JUMP(--[[int]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.DELETE_STUNT_JUMP' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xDC518000E39DAE1F, p0)
end
natives.misc.delete_stunt_jump = natives.MISC.DELETE_STUNT_JUMP

function natives.MISC.ENABLE_STUNT_JUMP_SET(--[[int]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.ENABLE_STUNT_JUMP_SET' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xE369A5783B866016, p0)
end
natives.misc.enable_stunt_jump_set = natives.MISC.ENABLE_STUNT_JUMP_SET

function natives.MISC.DISABLE_STUNT_JUMP_SET(--[[int]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.DISABLE_STUNT_JUMP_SET' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xA5272EBEDD4747F6, p0)
end
natives.misc.disable_stunt_jump_set = natives.MISC.DISABLE_STUNT_JUMP_SET

function natives.MISC.SET_STUNT_JUMPS_CAN_TRIGGER(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.SET_STUNT_JUMPS_CAN_TRIGGER' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0xD79185689F8FD5DF, toggle)
end
natives.misc.set_stunt_jumps_can_trigger = natives.MISC.SET_STUNT_JUMPS_CAN_TRIGGER

function natives.MISC.IS_STUNT_JUMP_IN_PROGRESS() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.IS_STUNT_JUMP_IN_PROGRESS' due to disabled trusted mode")

	local result = native_call(0x7A3F19700A4D0525)
	return result:__tointeger() ~= 0
end
natives.misc.is_stunt_jump_in_progress = natives.MISC.IS_STUNT_JUMP_IN_PROGRESS

function natives.MISC.IS_STUNT_JUMP_MESSAGE_SHOWING() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.IS_STUNT_JUMP_MESSAGE_SHOWING' due to disabled trusted mode")

	local result = native_call(0x2272B0A1343129F4)
	return result:__tointeger() ~= 0
end
natives.misc.is_stunt_jump_message_showing = natives.MISC.IS_STUNT_JUMP_MESSAGE_SHOWING

function natives.MISC.GET_NUM_SUCCESSFUL_STUNT_JUMPS() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.GET_NUM_SUCCESSFUL_STUNT_JUMPS' due to disabled trusted mode")

	local result = native_call(0x996DD1E1E02F1008)
	return result:__tointeger()
end
natives.misc.get_num_successful_stunt_jumps = natives.MISC.GET_NUM_SUCCESSFUL_STUNT_JUMPS

function natives.MISC.GET_TOTAL_SUCCESSFUL_STUNT_JUMPS() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.GET_TOTAL_SUCCESSFUL_STUNT_JUMPS' due to disabled trusted mode")

	local result = native_call(0x6856EC3D35C81EA4)
	return result:__tointeger()
end
natives.misc.get_total_successful_stunt_jumps = natives.MISC.GET_TOTAL_SUCCESSFUL_STUNT_JUMPS

function natives.MISC.CANCEL_STUNT_JUMP() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.CANCEL_STUNT_JUMP' due to disabled trusted mode")

	local result = native_call(0xE6B7B0ACD4E4B75E)
end
natives.misc.cancel_stunt_jump = natives.MISC.CANCEL_STUNT_JUMP

--[[
Make sure to call this from the correct thread if you're using multiple threads because all other threads except the one which is calling SET_GAME_PAUSED will be paused which means you will lose control and the game remains in paused mode until you exit GTA5.exe
]]
function natives.MISC.SET_GAME_PAUSED(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.SET_GAME_PAUSED' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x577D1284D6873711, toggle)
end
natives.misc.set_game_paused = natives.MISC.SET_GAME_PAUSED

function natives.MISC.SET_THIS_SCRIPT_CAN_BE_PAUSED(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.SET_THIS_SCRIPT_CAN_BE_PAUSED' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0xAA391C728106F7AF, toggle)
end
natives.misc.set_this_script_can_be_paused = natives.MISC.SET_THIS_SCRIPT_CAN_BE_PAUSED

function natives.MISC.SET_THIS_SCRIPT_CAN_REMOVE_BLIPS_CREATED_BY_ANY_SCRIPT(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.SET_THIS_SCRIPT_CAN_REMOVE_BLIPS_CREATED_BY_ANY_SCRIPT' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0xB98236CAAECEF897, toggle)
end
natives.misc.set_this_script_can_remove_blips_created_by_any_script = natives.MISC.SET_THIS_SCRIPT_CAN_REMOVE_BLIPS_CREATED_BY_ANY_SCRIPT

--[[
This native appears on the cheat_controller script and tracks a combination of buttons, which may be used to toggle cheats in-game. Credits to ThreeSocks for the info. The hash contains the combination, while the "amount" represents the amount of buttons used in a combination. The following page can be used to make a button combination: gta5offset.com/ts/hash/

INT_SCORES_SCORTED was a hash collision
]]
function natives.MISC.HAS_CHEAT_WITH_HASH_BEEN_ACTIVATED(--[[Hash]] hash, --[[int]] amount) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.HAS_CHEAT_WITH_HASH_BEEN_ACTIVATED' due to disabled trusted mode")

	assert(type(hash) == "number", "Arg #1 (hash) must be a number.")
	assert(type(amount) == "number", "Arg #2 (amount) must be a number.")

	local result = native_call(0x071E2A839DE82D90, hash, amount)
	return result:__tointeger() ~= 0
end
natives.misc.has_cheat_with_hash_been_activated = natives.MISC.HAS_CHEAT_WITH_HASH_BEEN_ACTIVATED

--[[
Get inputted "Cheat code", for example:

while (TRUE)
{
    if (MISC::_557E43C447E700A8(${fugitive}))
    {
       // Do something.
    }
    SYSTEM::WAIT(0);
}

Calling this will also set the last saved string hash to zero.

]]
function natives.MISC.HAS_PC_CHEAT_WITH_HASH_BEEN_ACTIVATED(--[[Hash]] hash) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.HAS_PC_CHEAT_WITH_HASH_BEEN_ACTIVATED' due to disabled trusted mode")

	assert(type(hash) == "number", "Arg #1 (hash) must be a number.")

	local result = native_call(0x557E43C447E700A8, hash)
	return result:__tointeger() ~= 0
end
natives.misc.has_pc_cheat_with_hash_been_activated = natives.MISC.HAS_PC_CHEAT_WITH_HASH_BEEN_ACTIVATED

function natives.MISC.OVERRIDE_FREEZE_FLAGS(--[[BOOL]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.OVERRIDE_FREEZE_FLAGS' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0xFA3FFB0EEBC288A3, p0)
end
natives.misc.override_freeze_flags = natives.MISC.OVERRIDE_FREEZE_FLAGS

--[[
Formerly known as _LOWER_MAP_PROP_DENSITY and wrongly due to idiots as _ENABLE_MP_DLC_MAPS.
Sets the maximum prop density and changes a loading screen flag from 'loading story mode' to 'loading GTA Online'. Does not touch DLC map data at all.

In fact, I doubt this changes the flag whatsoever, that's the OTHER native idiots use together with this that does so, this one only causes a loading screen to show as it reloads map data.
]]
function natives.MISC.SET_INSTANCE_PRIORITY_MODE(--[[int]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.SET_INSTANCE_PRIORITY_MODE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x9BAE5AD2508DF078, p0)
end
natives.misc.set_instance_priority_mode = natives.MISC.SET_INSTANCE_PRIORITY_MODE

--[[
Sets an unknown flag used by CScene in determining which entities from CMapData scene nodes to draw, similar to SET_INSTANCE_PRIORITY_MODE.
]]
function natives.MISC.SET_INSTANCE_PRIORITY_HINT(--[[int]] flag) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.SET_INSTANCE_PRIORITY_HINT' due to disabled trusted mode")

	assert(type(flag) == "number", "Arg #1 (flag) must be a number.")

	local result = native_call(0xC5F0A8EBD3F361CE, flag)
end
natives.misc.set_instance_priority_hint = natives.MISC.SET_INSTANCE_PRIORITY_HINT

--[[
This function is hard-coded to always return 0.
]]
function natives.MISC.IS_FRONTEND_FADING() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.IS_FRONTEND_FADING' due to disabled trusted mode")

	local result = native_call(0x7EA2B6AF97ECA6ED)
	return result:__tointeger() ~= 0
end
natives.misc.is_frontend_fading = natives.MISC.IS_FRONTEND_FADING

--[[
spawns a few distant/out-of-sight peds, vehicles, animals etc each time it is called
]]
function natives.MISC.POPULATE_NOW() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.POPULATE_NOW' due to disabled trusted mode")

	local result = native_call(0x7472BB270D7B4F3E)
end
natives.misc.populate_now = natives.MISC.POPULATE_NOW

function natives.MISC.GET_INDEX_OF_CURRENT_LEVEL() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.GET_INDEX_OF_CURRENT_LEVEL' due to disabled trusted mode")

	local result = native_call(0xCBAD6729F7B1F4FC)
	return result:__tointeger()
end
natives.misc.get_index_of_current_level = natives.MISC.GET_INDEX_OF_CURRENT_LEVEL

--[[
level can be from 0 to 3
0: 9.8 - normal
1: 2.4 - low
2: 0.1 - very low
3: 0.0 - off

//SuckMyCoke
]]
function natives.MISC.SET_GRAVITY_LEVEL(--[[int]] level) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.SET_GRAVITY_LEVEL' due to disabled trusted mode")

	assert(type(level) == "number", "Arg #1 (level) must be a number.")

	local result = native_call(0x740E14FAD5842351, level)
end
natives.misc.set_gravity_level = natives.MISC.SET_GRAVITY_LEVEL

function natives.MISC.START_SAVE_DATA(--[[Any*]] p0, --[[Any]] p1, --[[BOOL]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.START_SAVE_DATA' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")

	local result = native_call(0xA9575F812C6A7997, p0, p1, p2)
end
natives.misc.start_save_data = natives.MISC.START_SAVE_DATA

function natives.MISC.STOP_SAVE_DATA() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.STOP_SAVE_DATA' due to disabled trusted mode")

	local result = native_call(0x74E20C9145FB66FD)
end
natives.misc.stop_save_data = natives.MISC.STOP_SAVE_DATA

function natives.MISC.GET_SIZE_OF_SAVE_DATA(--[[BOOL]] p0) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.GET_SIZE_OF_SAVE_DATA' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0xA09F896CE912481F, p0)
	return result:__tointeger()
end
natives.misc.get_size_of_save_data = natives.MISC.GET_SIZE_OF_SAVE_DATA

function natives.MISC.REGISTER_INT_TO_SAVE(--[[Any*]] p0, --[[const char*]] name) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.REGISTER_INT_TO_SAVE' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")
	assert(type(name) == "string", "Arg #2 (name) must be a string.")

	local result = native_call(0x34C9EE5986258415, p0, name)
end
natives.misc.register_int_to_save = natives.MISC.REGISTER_INT_TO_SAVE

function natives.MISC.REGISTER_INT64_TO_SAVE(--[[Any*]] p0, --[[const char*]] name) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.REGISTER_INT64_TO_SAVE' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")
	assert(type(name) == "string", "Arg #2 (name) must be a string.")

	local result = native_call(0xA735353C77334EA0, p0, name)
end
natives.misc.register_int64_to_save = natives.MISC.REGISTER_INT64_TO_SAVE

function natives.MISC.REGISTER_ENUM_TO_SAVE(--[[Any*]] p0, --[[const char*]] name) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.REGISTER_ENUM_TO_SAVE' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")
	assert(type(name) == "string", "Arg #2 (name) must be a string.")

	local result = native_call(0x10C2FA78D0E128A1, p0, name)
end
natives.misc.register_enum_to_save = natives.MISC.REGISTER_ENUM_TO_SAVE

function natives.MISC.REGISTER_FLOAT_TO_SAVE(--[[Any*]] p0, --[[const char*]] name) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.REGISTER_FLOAT_TO_SAVE' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")
	assert(type(name) == "string", "Arg #2 (name) must be a string.")

	local result = native_call(0x7CAEC29ECB5DFEBB, p0, name)
end
natives.misc.register_float_to_save = natives.MISC.REGISTER_FLOAT_TO_SAVE

function natives.MISC.REGISTER_BOOL_TO_SAVE(--[[Any*]] p0, --[[const char*]] name) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.REGISTER_BOOL_TO_SAVE' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")
	assert(type(name) == "string", "Arg #2 (name) must be a string.")

	local result = native_call(0xC8F4131414C835A1, p0, name)
end
natives.misc.register_bool_to_save = natives.MISC.REGISTER_BOOL_TO_SAVE

function natives.MISC.REGISTER_TEXT_LABEL_TO_SAVE(--[[Any*]] p0, --[[const char*]] name) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.REGISTER_TEXT_LABEL_TO_SAVE' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")
	assert(type(name) == "string", "Arg #2 (name) must be a string.")

	local result = native_call(0xEDB1232C5BEAE62F, p0, name)
end
natives.misc.register_text_label_to_save = natives.MISC.REGISTER_TEXT_LABEL_TO_SAVE

--[[
Seems to have the same functionality as REGISTER_TEXT_LABEL_TO_SAVE?

MISC::_6F7794F28C6B2535(&a_0._f1, "tlPlateText");
MISC::_6F7794F28C6B2535(&a_0._f1C, "tlPlateText_pending");
MISC::_6F7794F28C6B2535(&a_0._f10B, "tlCarAppPlateText");

"tl" prefix sounds like "Text Label"
]]
function natives.MISC.REGISTER_TEXT_LABEL_15_TO_SAVE(--[[Any*]] p0, --[[const char*]] name) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.REGISTER_TEXT_LABEL_15_TO_SAVE' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")
	assert(type(name) == "string", "Arg #2 (name) must be a string.")

	local result = native_call(0x6F7794F28C6B2535, p0, name)
end
natives.misc.register_text_label_15_to_save = natives.MISC.REGISTER_TEXT_LABEL_15_TO_SAVE

--[[
Only found 3 times in decompiled scripts. Not a whole lot to go off of.

MISC::_48F069265A0E4BEC(a_0, "Movie_Name_For_This_Player");
MISC::_48F069265A0E4BEC(&a_0._fB, "Ringtone_For_This_Player");
MISC::_48F069265A0E4BEC(&a_0._f1EC4._f12[v_A/*6*/], &v_13); // where v_13 is "MPATMLOGSCRS0" thru "MPATMLOGSCRS15"
]]
function natives.MISC.REGISTER_TEXT_LABEL_23_TO_SAVE(--[[Any*]] p0, --[[const char*]] name) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.REGISTER_TEXT_LABEL_23_TO_SAVE' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")
	assert(type(name) == "string", "Arg #2 (name) must be a string.")

	local result = native_call(0x48F069265A0E4BEC, p0, name)
end
natives.misc.register_text_label_23_to_save = natives.MISC.REGISTER_TEXT_LABEL_23_TO_SAVE

--[[
Only found 2 times in decompiled scripts. Not a whole lot to go off of.

MISC::_8269816F6CFD40F8(&a_0._f1F5A._f6[0/*8*/], "TEMPSTAT_LABEL"); // gets saved in a struct called "g_SaveData_STRING_ScriptSaves"
MISC::_8269816F6CFD40F8(&a_0._f4B4[v_1A/*8*/], &v_5); // where v_5 is "Name0" thru "Name9", gets saved in a struct called "OUTFIT_Name"
]]
function natives.MISC.REGISTER_TEXT_LABEL_31_TO_SAVE(--[[Any*]] p0, --[[const char*]] name) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.REGISTER_TEXT_LABEL_31_TO_SAVE' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")
	assert(type(name) == "string", "Arg #2 (name) must be a string.")

	local result = native_call(0x8269816F6CFD40F8, p0, name)
end
natives.misc.register_text_label_31_to_save = natives.MISC.REGISTER_TEXT_LABEL_31_TO_SAVE

--[[
Another unknown label type...

MISC::_FAA457EF263E8763(a_0, "Thumb_label");
MISC::_FAA457EF263E8763(&a_0._f10, "Photo_label");
MISC::_FAA457EF263E8763(a_0, "GXTlabel");
MISC::_FAA457EF263E8763(&a_0._f21, "StringComp");
MISC::_FAA457EF263E8763(&a_0._f43, "SecondStringComp");
MISC::_FAA457EF263E8763(&a_0._f53, "ThirdStringComp");
MISC::_FAA457EF263E8763(&a_0._f32, "SenderStringComp");
MISC::_FAA457EF263E8763(&a_0._f726[v_1A/*16*/], &v_20); // where v_20 is "LastJobTL_0_1" thru "LastJobTL_2_1", gets saved in a struct called "LAST_JobGamer_TL"
MISC::_FAA457EF263E8763(&a_0._f4B, "PAID_PLAYER");
MISC::_FAA457EF263E8763(&a_0._f5B, "RADIO_STATION");
]]
function natives.MISC.REGISTER_TEXT_LABEL_63_TO_SAVE(--[[Any*]] p0, --[[const char*]] name) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.REGISTER_TEXT_LABEL_63_TO_SAVE' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")
	assert(type(name) == "string", "Arg #2 (name) must be a string.")

	local result = native_call(0xFAA457EF263E8763, p0, name)
end
natives.misc.register_text_label_63_to_save = natives.MISC.REGISTER_TEXT_LABEL_63_TO_SAVE

function natives.MISC.START_SAVE_STRUCT_WITH_SIZE(--[[Any*]] p0, --[[int]] size, --[[const char*]] structName) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.START_SAVE_STRUCT_WITH_SIZE' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")
	assert(type(size) == "number", "Arg #2 (size) must be a number.")
	assert(type(structName) == "string", "Arg #3 (structName) must be a string.")

	local result = native_call(0xBF737600CDDBEADD, p0, size, structName)
end
natives.misc.start_save_struct_with_size = natives.MISC.START_SAVE_STRUCT_WITH_SIZE

function natives.MISC.STOP_SAVE_STRUCT() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.STOP_SAVE_STRUCT' due to disabled trusted mode")

	local result = native_call(0xEB1774DF12BB9F12)
end
natives.misc.stop_save_struct = natives.MISC.STOP_SAVE_STRUCT

function natives.MISC.START_SAVE_ARRAY_WITH_SIZE(--[[Any*]] p0, --[[int]] size, --[[const char*]] arrayName) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.START_SAVE_ARRAY_WITH_SIZE' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")
	assert(type(size) == "number", "Arg #2 (size) must be a number.")
	assert(type(arrayName) == "string", "Arg #3 (arrayName) must be a string.")

	local result = native_call(0x60FE567DF1B1AF9D, p0, size, arrayName)
end
natives.misc.start_save_array_with_size = natives.MISC.START_SAVE_ARRAY_WITH_SIZE

function natives.MISC.STOP_SAVE_ARRAY() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.STOP_SAVE_ARRAY' due to disabled trusted mode")

	local result = native_call(0x04456F95153C6BE4)
end
natives.misc.stop_save_array = natives.MISC.STOP_SAVE_ARRAY

function natives.MISC.COPY_SCRIPT_STRUCT(--[[Any*]] dst, --[[Any*]] src, --[[int]] size) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.COPY_SCRIPT_STRUCT' due to disabled trusted mode")

	assert(type(dst) == "userdata", "Arg #1 (dst) must be a userdata.")
	assert(type(src) == "userdata", "Arg #2 (src) must be a userdata.")
	assert(type(size) == "number", "Arg #3 (size) must be a number.")

	local result = native_call(0x213AEB2B90CBA7AC, dst, src, size)
end
natives.misc.copy_script_struct = natives.MISC.COPY_SCRIPT_STRUCT

--[[
https://alloc8or.re/gta5/doc/enums/DispatchType.txt
]]
function natives.MISC.ENABLE_DISPATCH_SERVICE(--[[int]] dispatchService, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.ENABLE_DISPATCH_SERVICE' due to disabled trusted mode")

	assert(type(dispatchService) == "number", "Arg #1 (dispatchService) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xDC0F817884CDD856, dispatchService, toggle)
end
natives.misc.enable_dispatch_service = natives.MISC.ENABLE_DISPATCH_SERVICE

function natives.MISC.BLOCK_DISPATCH_SERVICE_RESOURCE_CREATION(--[[int]] dispatchService, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.BLOCK_DISPATCH_SERVICE_RESOURCE_CREATION' due to disabled trusted mode")

	assert(type(dispatchService) == "number", "Arg #1 (dispatchService) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x9B2BD3773123EA2F, dispatchService, toggle)
end
natives.misc.block_dispatch_service_resource_creation = natives.MISC.BLOCK_DISPATCH_SERVICE_RESOURCE_CREATION

function natives.MISC.GET_NUMBER_RESOURCES_ALLOCATED_TO_WANTED_LEVEL(--[[int]] dispatchService) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.GET_NUMBER_RESOURCES_ALLOCATED_TO_WANTED_LEVEL' due to disabled trusted mode")

	assert(type(dispatchService) == "number", "Arg #1 (dispatchService) must be a number.")

	local result = native_call(0xEB4A0C2D56441717, dispatchService)
	return result:__tointeger()
end
natives.misc.get_number_resources_allocated_to_wanted_level = natives.MISC.GET_NUMBER_RESOURCES_ALLOCATED_TO_WANTED_LEVEL

--[[
As for the 'police' incident, it will call police cars to you, but unlike PedsInCavalcades & Merryweather they won't start shooting at you unless you shoot first or shoot at them. The top 2 however seem to cancel theirselves if there is noone dead around you or a fire. I only figured them out as I found out the 3rd param is definately the amountOfPeople and they called incident 3 in scripts with 4 people (which the firetruck has) and incident 5 with 2 people (which the ambulence has). The 4 param I cant say is radius, but for the pedsInCavalcades and Merryweather R* uses 0.0f and for the top 3 (Emergency Services) they use 3.0f. 

Side Note: It seems calling the pedsInCavalcades or Merryweather then removing it seems to break you from calling the EmergencyEvents and I also believe pedsInCavalcades. (The V cavalcades of course not IV).

Side Note 2: I say it breaks as if you call this proper,
if(CREATE_INCIDENT) etc it will return false if you do as I said above.
=====================================================
]]
function natives.MISC.CREATE_INCIDENT(--[[int]] dispatchService, --[[float]] x, --[[float]] y, --[[float]] z, --[[int]] numUnits, --[[float]] radius, --[[int*]] outIncidentID, --[[Any]] p7, --[[Any]] p8) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.CREATE_INCIDENT' due to disabled trusted mode")

	assert(type(dispatchService) == "number", "Arg #1 (dispatchService) must be a number.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")
	assert(type(numUnits) == "number", "Arg #5 (numUnits) must be a number.")
	assert(type(radius) == "number", "Arg #6 (radius) must be a number.")
	assert(type(outIncidentID) == "userdata", "Arg #7 (outIncidentID) must be a userdata.")
	assert(type(p7) == "number", "Arg #8 (p7) must be a number.")
	assert(type(p8) == "number", "Arg #9 (p8) must be a number.")

	local result = native_call(0x3F892CAF67444AE7, dispatchService, x, y, z, numUnits, radius, outIncidentID, p7, p8)
	return result:__tointeger() ~= 0
end
natives.misc.create_incident = natives.MISC.CREATE_INCIDENT

--[[
As for the 'police' incident, it will call police cars to you, but unlike PedsInCavalcades & Merryweather they won't start shooting at you unless you shoot first or shoot at them. The top 2 however seem to cancel theirselves if there is noone dead around you or a fire. I only figured them out as I found out the 3rd param is definately the amountOfPeople and they called incident 3 in scripts with 4 people (which the firetruck has) and incident 5 with 2 people (which the ambulence has). The 4 param I cant say is radius, but for the pedsInCavalcades and Merryweather R* uses 0.0f and for the top 3 (Emergency Services) they use 3.0f. 

Side Note: It seems calling the pedsInCavalcades or Merryweather then removing it seems to break you from calling the EmergencyEvents and I also believe pedsInCavalcades. (The V cavalcades of course not IV).

Side Note 2: I say it breaks as if you call this proper,
if(CREATE_INCIDENT) etc it will return false if you do as I said above.
=====================================================
]]
function natives.MISC.CREATE_INCIDENT_WITH_ENTITY(--[[int]] dispatchService, --[[Ped]] ped, --[[int]] numUnits, --[[float]] radius, --[[int*]] outIncidentID, --[[Any]] p5, --[[Any]] p6) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.CREATE_INCIDENT_WITH_ENTITY' due to disabled trusted mode")

	assert(type(dispatchService) == "number", "Arg #1 (dispatchService) must be a number.")
	assert(type(ped) == "number", "Arg #2 (ped) must be a number.")
	assert(type(numUnits) == "number", "Arg #3 (numUnits) must be a number.")
	assert(type(radius) == "number", "Arg #4 (radius) must be a number.")
	assert(type(outIncidentID) == "userdata", "Arg #5 (outIncidentID) must be a userdata.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")
	assert(type(p6) == "number", "Arg #7 (p6) must be a number.")

	local result = native_call(0x05983472F0494E60, dispatchService, ped, numUnits, radius, outIncidentID, p5, p6)
	return result:__tointeger() ~= 0
end
natives.misc.create_incident_with_entity = natives.MISC.CREATE_INCIDENT_WITH_ENTITY

--[[
Delete an incident with a given id.

=======================================================
Correction, I have change this to int, instead of int*
as it doesn't use a pointer to the createdIncident.
If you try it you will crash (or) freeze.
=======================================================
]]
function natives.MISC.DELETE_INCIDENT(--[[int]] incidentId) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.DELETE_INCIDENT' due to disabled trusted mode")

	assert(type(incidentId) == "number", "Arg #1 (incidentId) must be a number.")

	local result = native_call(0x556C1AA270D5A207, incidentId)
end
natives.misc.delete_incident = natives.MISC.DELETE_INCIDENT

--[[
=======================================================
Correction, I have change this to int, instead of int*
as it doesn't use a pointer to the createdIncident.
If you try it you will crash (or) freeze.
=======================================================
]]
function natives.MISC.IS_INCIDENT_VALID(--[[int]] incidentId) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.IS_INCIDENT_VALID' due to disabled trusted mode")

	assert(type(incidentId) == "number", "Arg #1 (incidentId) must be a number.")

	local result = native_call(0xC8BC6461E629BEAA, incidentId)
	return result:__tointeger() ~= 0
end
natives.misc.is_incident_valid = natives.MISC.IS_INCIDENT_VALID

function natives.MISC.SET_INCIDENT_REQUESTED_UNITS(--[[int]] incidentId, --[[int]] dispatchService, --[[int]] numUnits) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.SET_INCIDENT_REQUESTED_UNITS' due to disabled trusted mode")

	assert(type(incidentId) == "number", "Arg #1 (incidentId) must be a number.")
	assert(type(dispatchService) == "number", "Arg #2 (dispatchService) must be a number.")
	assert(type(numUnits) == "number", "Arg #3 (numUnits) must be a number.")

	local result = native_call(0xB08B85D860E7BA3C, incidentId, dispatchService, numUnits)
end
natives.misc.set_incident_requested_units = natives.MISC.SET_INCIDENT_REQUESTED_UNITS

function natives.MISC.SET_IDEAL_SPAWN_DISTANCE_FOR_INCIDENT(--[[int]] incidentId, --[[float]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.SET_IDEAL_SPAWN_DISTANCE_FOR_INCIDENT' due to disabled trusted mode")

	assert(type(incidentId) == "number", "Arg #1 (incidentId) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xD261BA3E7E998072, incidentId, p1)
end
natives.misc.set_ideal_spawn_distance_for_incident = natives.MISC.SET_IDEAL_SPAWN_DISTANCE_FOR_INCIDENT

--[[
Finds a position ahead of the player by predicting the players next actions.
The positions match path finding node positions.
When roads diverge, the position may rapidly change between two or more positions. This is due to the engine not being certain of which path the player will take.
]]
function natives.MISC.FIND_SPAWN_POINT_IN_DIRECTION(--[[float]] posX, --[[float]] posY, --[[float]] posZ, --[[float]] fwdVecX, --[[float]] fwdVecY, --[[float]] fwdVecZ, --[[float]] distance, --[[Vector3*]] spawnPoint) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.FIND_SPAWN_POINT_IN_DIRECTION' due to disabled trusted mode")

	assert(type(posX) == "number", "Arg #1 (posX) must be a number.")
	assert(type(posY) == "number", "Arg #2 (posY) must be a number.")
	assert(type(posZ) == "number", "Arg #3 (posZ) must be a number.")
	assert(type(fwdVecX) == "number", "Arg #4 (fwdVecX) must be a number.")
	assert(type(fwdVecY) == "number", "Arg #5 (fwdVecY) must be a number.")
	assert(type(fwdVecZ) == "number", "Arg #6 (fwdVecZ) must be a number.")
	assert(type(distance) == "number", "Arg #7 (distance) must be a number.")
	assert(type(spawnPoint) == "userdata", "Arg #8 (spawnPoint) must be a userdata.")

	local result = native_call(0x6874E2190B0C1972, posX, posY, posZ, fwdVecX, fwdVecY, fwdVecZ, distance, spawnPoint)
	return result:__tointeger() ~= 0
end
natives.misc.find_spawn_point_in_direction = natives.MISC.FIND_SPAWN_POINT_IN_DIRECTION

function natives.MISC.ADD_POP_MULTIPLIER_AREA(--[[float]] x1, --[[float]] y1, --[[float]] z1, --[[float]] x2, --[[float]] y2, --[[float]] z2, --[[float]] p6, --[[float]] p7, --[[BOOL]] p8, --[[BOOL]] p9) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.ADD_POP_MULTIPLIER_AREA' due to disabled trusted mode")

	assert(type(x1) == "number", "Arg #1 (x1) must be a number.")
	assert(type(y1) == "number", "Arg #2 (y1) must be a number.")
	assert(type(z1) == "number", "Arg #3 (z1) must be a number.")
	assert(type(x2) == "number", "Arg #4 (x2) must be a number.")
	assert(type(y2) == "number", "Arg #5 (y2) must be a number.")
	assert(type(z2) == "number", "Arg #6 (z2) must be a number.")
	assert(type(p6) == "number", "Arg #7 (p6) must be a number.")
	assert(type(p7) == "number", "Arg #8 (p7) must be a number.")
	assert(type(p8) == "boolean", "Arg #9 (p8) must be a boolean.")
	assert(type(p9) == "boolean", "Arg #10 (p9) must be a boolean.")

	local result = native_call(0x67F6413D3220E18D, x1, y1, z1, x2, y2, z2, p6, p7, p8, p9)
	return result:__tointeger()
end
natives.misc.add_pop_multiplier_area = natives.MISC.ADD_POP_MULTIPLIER_AREA

function natives.MISC.DOES_POP_MULTIPLIER_AREA_EXIST(--[[int]] id) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.DOES_POP_MULTIPLIER_AREA_EXIST' due to disabled trusted mode")

	assert(type(id) == "number", "Arg #1 (id) must be a number.")

	local result = native_call(0x1327E2FE9746BAEE, id)
	return result:__tointeger() ~= 0
end
natives.misc.does_pop_multiplier_area_exist = natives.MISC.DOES_POP_MULTIPLIER_AREA_EXIST

function natives.MISC.REMOVE_POP_MULTIPLIER_AREA(--[[int]] id, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.REMOVE_POP_MULTIPLIER_AREA' due to disabled trusted mode")

	assert(type(id) == "number", "Arg #1 (id) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0xB129E447A2EDA4BF, id, p1)
end
natives.misc.remove_pop_multiplier_area = natives.MISC.REMOVE_POP_MULTIPLIER_AREA

function natives.MISC.IS_POP_MULTIPLIER_AREA_NETWORKED(--[[int]] id) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.IS_POP_MULTIPLIER_AREA_NETWORKED' due to disabled trusted mode")

	assert(type(id) == "number", "Arg #1 (id) must be a number.")

	local result = native_call(0x1312F4B242609CE3, id)
	return result:__tointeger() ~= 0
end
natives.misc.is_pop_multiplier_area_networked = natives.MISC.IS_POP_MULTIPLIER_AREA_NETWORKED

--[[
This native is adding a zone, where you can change density settings. For example, you can add a zone on 0.0, 0.0, 0.0 with radius 900.0 and vehicleMultiplier 0.0, and you will not see any new population vehicle spawned in a radius of 900.0 from 0.0, 0.0, 0.0. Returns the id. You can have only 15 zones at the same time. You can remove zone using REMOVE_POP_MULTIPLIER_SPHERE
]]
function natives.MISC.ADD_POP_MULTIPLIER_SPHERE(--[[float]] x, --[[float]] y, --[[float]] z, --[[float]] radius, --[[float]] pedMultiplier, --[[float]] vehicleMultiplier, --[[BOOL]] p6, --[[BOOL]] p7) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.ADD_POP_MULTIPLIER_SPHERE' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(radius) == "number", "Arg #4 (radius) must be a number.")
	assert(type(pedMultiplier) == "number", "Arg #5 (pedMultiplier) must be a number.")
	assert(type(vehicleMultiplier) == "number", "Arg #6 (vehicleMultiplier) must be a number.")
	assert(type(p6) == "boolean", "Arg #7 (p6) must be a boolean.")
	assert(type(p7) == "boolean", "Arg #8 (p7) must be a boolean.")

	local result = native_call(0x32C7A7E8C43A1F80, x, y, z, radius, pedMultiplier, vehicleMultiplier, p6, p7)
	return result:__tointeger()
end
natives.misc.add_pop_multiplier_sphere = natives.MISC.ADD_POP_MULTIPLIER_SPHERE

function natives.MISC.DOES_POP_MULTIPLIER_SPHERE_EXIST(--[[int]] id) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.DOES_POP_MULTIPLIER_SPHERE_EXIST' due to disabled trusted mode")

	assert(type(id) == "number", "Arg #1 (id) must be a number.")

	local result = native_call(0x171BAFB3C60389F4, id)
	return result:__tointeger() ~= 0
end
natives.misc.does_pop_multiplier_sphere_exist = natives.MISC.DOES_POP_MULTIPLIER_SPHERE_EXIST

--[[
Removes population multiplier sphere
]]
function natives.MISC.REMOVE_POP_MULTIPLIER_SPHERE(--[[int]] id, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.REMOVE_POP_MULTIPLIER_SPHERE' due to disabled trusted mode")

	assert(type(id) == "number", "Arg #1 (id) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0xE6869BECDD8F2403, id, p1)
end
natives.misc.remove_pop_multiplier_sphere = natives.MISC.REMOVE_POP_MULTIPLIER_SPHERE

--[[
Makes the ped jump around like they're in a tennis match
]]
function natives.MISC.ENABLE_TENNIS_MODE(--[[Ped]] ped, --[[BOOL]] toggle, --[[BOOL]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.ENABLE_TENNIS_MODE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")

	local result = native_call(0x28A04B411933F8A6, ped, toggle, p2)
end
natives.misc.enable_tennis_mode = natives.MISC.ENABLE_TENNIS_MODE

function natives.MISC.IS_TENNIS_MODE(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.IS_TENNIS_MODE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x5D5479D115290C3F, ped)
	return result:__tointeger() ~= 0
end
natives.misc.is_tennis_mode = natives.MISC.IS_TENNIS_MODE

--[[
Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
]]
function natives.MISC.PLAY_TENNIS_SWING_ANIM(--[[Ped]] ped, --[[const char*]] animDict, --[[const char*]] animName, --[[float]] p3, --[[float]] p4, --[[BOOL]] p5) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.PLAY_TENNIS_SWING_ANIM' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(animDict) == "string", "Arg #2 (animDict) must be a string.")
	assert(type(animName) == "string", "Arg #3 (animName) must be a string.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "boolean", "Arg #6 (p5) must be a boolean.")

	local result = native_call(0xE266ED23311F24D4, ped, animDict, animName, p3, p4, p5)
end
natives.misc.play_tennis_swing_anim = natives.MISC.PLAY_TENNIS_SWING_ANIM

function natives.MISC.GET_TENNIS_SWING_ANIM_COMPLETE(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.GET_TENNIS_SWING_ANIM_COMPLETE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x17DF68D720AA77F8, ped)
	return result:__tointeger() ~= 0
end
natives.misc.get_tennis_swing_anim_complete = natives.MISC.GET_TENNIS_SWING_ANIM_COMPLETE

function natives.MISC.GET_TENNIS_SWING_ANIM_CAN_BE_INTERRUPTED(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.GET_TENNIS_SWING_ANIM_CAN_BE_INTERRUPTED' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x19BFED045C647C49, ped)
	return result:__tointeger() ~= 0
end
natives.misc.get_tennis_swing_anim_can_be_interrupted = natives.MISC.GET_TENNIS_SWING_ANIM_CAN_BE_INTERRUPTED

function natives.MISC.GET_TENNIS_SWING_ANIM_SWUNG(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.GET_TENNIS_SWING_ANIM_SWUNG' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0xE95B0C7D5BA3B96B, ped)
	return result:__tointeger() ~= 0
end
natives.misc.get_tennis_swing_anim_swung = natives.MISC.GET_TENNIS_SWING_ANIM_SWUNG

function natives.MISC.PLAY_TENNIS_DIVE_ANIM(--[[Ped]] ped, --[[int]] p1, --[[float]] p2, --[[float]] p3, --[[float]] p4, --[[BOOL]] p5) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.PLAY_TENNIS_DIVE_ANIM' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "boolean", "Arg #6 (p5) must be a boolean.")

	local result = native_call(0x8FA9C42FC5D7C64B, ped, p1, p2, p3, p4, p5)
end
natives.misc.play_tennis_dive_anim = natives.MISC.PLAY_TENNIS_DIVE_ANIM

--[[
From the scripts:

MISC::_54F157E0336A3822(sub_aa49(a_0), "ForcedStopDirection", v_E);

Related to tennis mode.
]]
function natives.MISC.SET_TENNIS_MOVE_NETWORK_SIGNAL_FLOAT(--[[Ped]] ped, --[[const char*]] p1, --[[float]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.SET_TENNIS_MOVE_NETWORK_SIGNAL_FLOAT' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(p1) == "string", "Arg #2 (p1) must be a string.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0x54F157E0336A3822, ped, p1, p2)
end
natives.misc.set_tennis_move_network_signal_float = natives.MISC.SET_TENNIS_MOVE_NETWORK_SIGNAL_FLOAT

function natives.MISC.RESET_DISPATCH_SPAWN_LOCATION() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.RESET_DISPATCH_SPAWN_LOCATION' due to disabled trusted mode")

	local result = native_call(0x5896F2BD5683A4E1)
end
natives.misc.reset_dispatch_spawn_location = natives.MISC.RESET_DISPATCH_SPAWN_LOCATION

function natives.MISC.SET_DISPATCH_SPAWN_LOCATION(--[[float]] x, --[[float]] y, --[[float]] z) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.SET_DISPATCH_SPAWN_LOCATION' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")

	local result = native_call(0xD10F442036302D50, x, y, z)
end
natives.misc.set_dispatch_spawn_location = natives.MISC.SET_DISPATCH_SPAWN_LOCATION

function natives.MISC.RESET_DISPATCH_IDEAL_SPAWN_DISTANCE() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.RESET_DISPATCH_IDEAL_SPAWN_DISTANCE' due to disabled trusted mode")

	local result = native_call(0x77A84429DD9F0A15)
end
natives.misc.reset_dispatch_ideal_spawn_distance = natives.MISC.RESET_DISPATCH_IDEAL_SPAWN_DISTANCE

function natives.MISC.SET_DISPATCH_IDEAL_SPAWN_DISTANCE(--[[float]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.SET_DISPATCH_IDEAL_SPAWN_DISTANCE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x6FE601A64180D423, p0)
end
natives.misc.set_dispatch_ideal_spawn_distance = natives.MISC.SET_DISPATCH_IDEAL_SPAWN_DISTANCE

function natives.MISC.RESET_DISPATCH_TIME_BETWEEN_SPAWN_ATTEMPTS(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.RESET_DISPATCH_TIME_BETWEEN_SPAWN_ATTEMPTS' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xEB2DB0CAD13154B3, p0)
end
natives.misc.reset_dispatch_time_between_spawn_attempts = natives.MISC.RESET_DISPATCH_TIME_BETWEEN_SPAWN_ATTEMPTS

function natives.MISC.SET_DISPATCH_TIME_BETWEEN_SPAWN_ATTEMPTS(--[[Any]] p0, --[[float]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.SET_DISPATCH_TIME_BETWEEN_SPAWN_ATTEMPTS' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x44F7CBC1BEB3327D, p0, p1)
end
natives.misc.set_dispatch_time_between_spawn_attempts = natives.MISC.SET_DISPATCH_TIME_BETWEEN_SPAWN_ATTEMPTS

function natives.MISC.SET_DISPATCH_TIME_BETWEEN_SPAWN_ATTEMPTS_MULTIPLIER(--[[Any]] p0, --[[float]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.SET_DISPATCH_TIME_BETWEEN_SPAWN_ATTEMPTS_MULTIPLIER' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x48838ED9937A15D1, p0, p1)
end
natives.misc.set_dispatch_time_between_spawn_attempts_multiplier = natives.MISC.SET_DISPATCH_TIME_BETWEEN_SPAWN_ATTEMPTS_MULTIPLIER

--[[
To remove, see: REMOVE_DISPATCH_SPAWN_BLOCKING_AREA
See IS_POINT_IN_ANGLED_AREA for the definition of an angled area.
]]
function natives.MISC.ADD_DISPATCH_SPAWN_ANGLED_BLOCKING_AREA(--[[float]] x1, --[[float]] y1, --[[float]] z1, --[[float]] x2, --[[float]] y2, --[[float]] z2, --[[float]] width) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.ADD_DISPATCH_SPAWN_ANGLED_BLOCKING_AREA' due to disabled trusted mode")

	assert(type(x1) == "number", "Arg #1 (x1) must be a number.")
	assert(type(y1) == "number", "Arg #2 (y1) must be a number.")
	assert(type(z1) == "number", "Arg #3 (z1) must be a number.")
	assert(type(x2) == "number", "Arg #4 (x2) must be a number.")
	assert(type(y2) == "number", "Arg #5 (y2) must be a number.")
	assert(type(z2) == "number", "Arg #6 (z2) must be a number.")
	assert(type(width) == "number", "Arg #7 (width) must be a number.")

	local result = native_call(0x918C7B2D2FF3928B, x1, y1, z1, x2, y2, z2, width)
	return result:__tointeger()
end
natives.misc.add_dispatch_spawn_angled_blocking_area = natives.MISC.ADD_DISPATCH_SPAWN_ANGLED_BLOCKING_AREA

function natives.MISC.ADD_DISPATCH_SPAWN_SPHERE_BLOCKING_AREA(--[[float]] x1, --[[float]] y1, --[[float]] x2, --[[float]] y2) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.ADD_DISPATCH_SPAWN_SPHERE_BLOCKING_AREA' due to disabled trusted mode")

	assert(type(x1) == "number", "Arg #1 (x1) must be a number.")
	assert(type(y1) == "number", "Arg #2 (y1) must be a number.")
	assert(type(x2) == "number", "Arg #3 (x2) must be a number.")
	assert(type(y2) == "number", "Arg #4 (y2) must be a number.")

	local result = native_call(0x2D4259F1FEB81DA9, x1, y1, x2, y2)
	return result:__tointeger()
end
natives.misc.add_dispatch_spawn_sphere_blocking_area = natives.MISC.ADD_DISPATCH_SPAWN_SPHERE_BLOCKING_AREA

function natives.MISC.REMOVE_DISPATCH_SPAWN_BLOCKING_AREA(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.REMOVE_DISPATCH_SPAWN_BLOCKING_AREA' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x264AC28B01B353A5, p0)
end
natives.misc.remove_dispatch_spawn_blocking_area = natives.MISC.REMOVE_DISPATCH_SPAWN_BLOCKING_AREA

function natives.MISC.RESET_DISPATCH_SPAWN_BLOCKING_AREAS() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.RESET_DISPATCH_SPAWN_BLOCKING_AREAS' due to disabled trusted mode")

	local result = native_call(0xAC7BFD5C1D83EA75)
end
natives.misc.reset_dispatch_spawn_blocking_areas = natives.MISC.RESET_DISPATCH_SPAWN_BLOCKING_AREAS

function natives.MISC.RESET_WANTED_RESPONSE_NUM_PEDS_TO_SPAWN() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.RESET_WANTED_RESPONSE_NUM_PEDS_TO_SPAWN' due to disabled trusted mode")

	local result = native_call(0xD9F692D349249528)
end
natives.misc.reset_wanted_response_num_peds_to_spawn = natives.MISC.RESET_WANTED_RESPONSE_NUM_PEDS_TO_SPAWN

function natives.MISC.SET_WANTED_RESPONSE_NUM_PEDS_TO_SPAWN(--[[int]] p0, --[[int]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.SET_WANTED_RESPONSE_NUM_PEDS_TO_SPAWN' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xE532EC1A63231B4F, p0, p1)
end
natives.misc.set_wanted_response_num_peds_to_spawn = natives.MISC.SET_WANTED_RESPONSE_NUM_PEDS_TO_SPAWN

function natives.MISC.ADD_TACTICAL_NAV_MESH_POINT(--[[float]] x, --[[float]] y, --[[float]] z) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.ADD_TACTICAL_NAV_MESH_POINT' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")

	local result = native_call(0xB8721407EE9C3FF6, x, y, z)
end
natives.misc.add_tactical_nav_mesh_point = natives.MISC.ADD_TACTICAL_NAV_MESH_POINT

function natives.MISC.CLEAR_TACTICAL_NAV_MESH_POINTS() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.CLEAR_TACTICAL_NAV_MESH_POINTS' due to disabled trusted mode")

	local result = native_call(0xB3CD58CCA6CDA852)
end
natives.misc.clear_tactical_nav_mesh_points = natives.MISC.CLEAR_TACTICAL_NAV_MESH_POINTS

--[[
Activates (usused?) riot mode. All NPCs are being hostile to each other (including player). Also the game will give weapons (pistols, smgs) to random NPCs.
]]
function natives.MISC.SET_RIOT_MODE_ENABLED(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.SET_RIOT_MODE_ENABLED' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x2587A48BC88DFADF, toggle)
end
natives.misc.set_riot_mode_enabled = natives.MISC.SET_RIOT_MODE_ENABLED

function natives.MISC.DISPLAY_ONSCREEN_KEYBOARD_WITH_LONGER_INITIAL_STRING(--[[int]] p0, --[[const char*]] windowTitle, --[[Any*]] p2, --[[const char*]] defaultText, --[[const char*]] defaultConcat1, --[[const char*]] defaultConcat2, --[[const char*]] defaultConcat3, --[[const char*]] defaultConcat4, --[[const char*]] defaultConcat5, --[[const char*]] defaultConcat6, --[[const char*]] defaultConcat7, --[[int]] maxInputLength) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.DISPLAY_ONSCREEN_KEYBOARD_WITH_LONGER_INITIAL_STRING' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(windowTitle) == "string", "Arg #2 (windowTitle) must be a string.")
	assert(type(p2) == "userdata", "Arg #3 (p2) must be a userdata.")
	assert(type(defaultText) == "string", "Arg #4 (defaultText) must be a string.")
	assert(type(defaultConcat1) == "string", "Arg #5 (defaultConcat1) must be a string.")
	assert(type(defaultConcat2) == "string", "Arg #6 (defaultConcat2) must be a string.")
	assert(type(defaultConcat3) == "string", "Arg #7 (defaultConcat3) must be a string.")
	assert(type(defaultConcat4) == "string", "Arg #8 (defaultConcat4) must be a string.")
	assert(type(defaultConcat5) == "string", "Arg #9 (defaultConcat5) must be a string.")
	assert(type(defaultConcat6) == "string", "Arg #10 (defaultConcat6) must be a string.")
	assert(type(defaultConcat7) == "string", "Arg #11 (defaultConcat7) must be a string.")
	assert(type(maxInputLength) == "number", "Arg #12 (maxInputLength) must be a number.")

	local result = native_call(0xCA78CFA0366592FE, p0, windowTitle, p2, defaultText, defaultConcat1, defaultConcat2, defaultConcat3, defaultConcat4, defaultConcat5, defaultConcat6, defaultConcat7, maxInputLength)
end
natives.misc.display_onscreen_keyboard_with_longer_initial_string = natives.MISC.DISPLAY_ONSCREEN_KEYBOARD_WITH_LONGER_INITIAL_STRING

--[[
sfink: note, p0 is set to 6 for PC platform in at least 1 script, or to `unk::_get_ui_language_id() == 0` otherwise.

NOTE: windowTitle uses text labels, and an invalid value will display nothing.

www.gtaforums.com/topic/788343-vrel-script-hook-v/?p=1067380474

windowTitle's
-----------------
CELL_EMAIL_BOD  =   "Enter your Eyefind message"
CELL_EMAIL_BODE =   "Message too long. Try again"
CELL_EMAIL_BODF    =   "Forbidden message. Try again"
CELL_EMAIL_SOD    =   "Enter your Eyefind subject"
CELL_EMAIL_SODE =   "Subject too long. Try again"
CELL_EMAIL_SODF    =   "Forbidden text. Try again"
CELL_EMASH_BOD   =   "Enter your Eyefind message"
CELL_EMASH_BODE =   "Message too long. Try again"
CELL_EMASH_BODF    =   "Forbidden message. Try again"
CELL_EMASH_SOD    =   "Enter your Eyefind subject"
CELL_EMASH_SODE =   "Subject too long. Try again"
CELL_EMASH_SODF    =   "Forbidden Text. Try again"
FMMC_KEY_TIP10   =   "Enter Synopsis"
FMMC_KEY_TIP12  =   "Enter Custom Team Name"
FMMC_KEY_TIP12F =   "Forbidden Text. Try again"
FMMC_KEY_TIP12N  =   "Custom Team Name"
FMMC_KEY_TIP8 =   "Enter Message"
FMMC_KEY_TIP8F   =   "Forbidden Text. Try again"
FMMC_KEY_TIP8FS  =   "Invalid Message. Try again"
FMMC_KEY_TIP8S  =   "Enter Message"
FMMC_KEY_TIP9    =   "Enter Outfit Name"
FMMC_KEY_TIP9F   =   "Invalid Outfit Name. Try again"
FMMC_KEY_TIP9N  =   "Outfit Name"
PM_NAME_CHALL  =   "Enter Challenge Name"
]]
function natives.MISC.DISPLAY_ONSCREEN_KEYBOARD(--[[int]] p0, --[[const char*]] windowTitle, --[[const char*]] p2, --[[const char*]] defaultText, --[[const char*]] defaultConcat1, --[[const char*]] defaultConcat2, --[[const char*]] defaultConcat3, --[[int]] maxInputLength) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.DISPLAY_ONSCREEN_KEYBOARD' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(windowTitle) == "string", "Arg #2 (windowTitle) must be a string.")
	assert(type(p2) == "string", "Arg #3 (p2) must be a string.")
	assert(type(defaultText) == "string", "Arg #4 (defaultText) must be a string.")
	assert(type(defaultConcat1) == "string", "Arg #5 (defaultConcat1) must be a string.")
	assert(type(defaultConcat2) == "string", "Arg #6 (defaultConcat2) must be a string.")
	assert(type(defaultConcat3) == "string", "Arg #7 (defaultConcat3) must be a string.")
	assert(type(maxInputLength) == "number", "Arg #8 (maxInputLength) must be a number.")

	local result = native_call(0x00DC833F2568DBF6, p0, windowTitle, p2, defaultText, defaultConcat1, defaultConcat2, defaultConcat3, maxInputLength)
end
natives.misc.display_onscreen_keyboard = natives.MISC.DISPLAY_ONSCREEN_KEYBOARD

--[[
Returns the current status of the onscreen keyboard, and updates the output.

Status Codes:

-1: Keyboard isn't active
0: User still editing
1: User has finished editing
2: User has canceled editing
]]
function natives.MISC.UPDATE_ONSCREEN_KEYBOARD() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.UPDATE_ONSCREEN_KEYBOARD' due to disabled trusted mode")

	local result = native_call(0x0CF2B696BBF945AE)
	return result:__tointeger()
end
natives.misc.update_onscreen_keyboard = natives.MISC.UPDATE_ONSCREEN_KEYBOARD

--[[
Returns NULL unless UPDATE_ONSCREEN_KEYBOARD() returns 1 in the same tick.
]]
function natives.MISC.GET_ONSCREEN_KEYBOARD_RESULT() -- Returns const char*
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.GET_ONSCREEN_KEYBOARD_RESULT' due to disabled trusted mode")

	local result = native_call(0x8362B09B91893647)
	return result:__tostring(true)
end
natives.misc.get_onscreen_keyboard_result = natives.MISC.GET_ONSCREEN_KEYBOARD_RESULT

--[[
DO NOT use this as it doesn't clean up the text input box properly and your script will get stuck in the UPDATE_ONSCREEN_KEYBOARD() loop.
Use FORCE_CLOSE_TEXT_INPUT_BOX instead.
]]
function natives.MISC.CANCEL_ONSCREEN_KEYBOARD() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.CANCEL_ONSCREEN_KEYBOARD' due to disabled trusted mode")

	local result = native_call(0x58A39BE597CE99CD)
end
natives.misc.cancel_onscreen_keyboard = natives.MISC.CANCEL_ONSCREEN_KEYBOARD

--[[
p0 was always 2 in R* scripts.
Called before calling DISPLAY_ONSCREEN_KEYBOARD if the input needs to be saved.
]]
function natives.MISC.NEXT_ONSCREEN_KEYBOARD_RESULT_WILL_DISPLAY_USING_THESE_FONTS(--[[int]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.NEXT_ONSCREEN_KEYBOARD_RESULT_WILL_DISPLAY_USING_THESE_FONTS' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x3ED1438C1F5C6612, p0)
end
natives.misc.next_onscreen_keyboard_result_will_display_using_these_fonts = natives.MISC.NEXT_ONSCREEN_KEYBOARD_RESULT_WILL_DISPLAY_USING_THESE_FONTS

--[[
Appears to remove stealth kill action from memory
]]
function natives.MISC.ACTION_MANAGER_ENABLE_ACTION(--[[Hash]] hash, --[[BOOL]] enable) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.ACTION_MANAGER_ENABLE_ACTION' due to disabled trusted mode")

	assert(type(hash) == "number", "Arg #1 (hash) must be a number.")
	assert(type(enable) == "boolean", "Arg #2 (enable) must be a boolean.")

	local result = native_call(0xA6A12939F16D85BE, hash, enable)
end
natives.misc.action_manager_enable_action = natives.MISC.ACTION_MANAGER_ENABLE_ACTION

--[[
GET_GAME_TIMER() / 1000
]]
function natives.MISC.GET_REAL_WORLD_TIME() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.GET_REAL_WORLD_TIME' due to disabled trusted mode")

	local result = native_call(0x3F60413F5DF65748)
	return result:__tointeger()
end
natives.misc.get_real_world_time = natives.MISC.GET_REAL_WORLD_TIME

--[[
Unsure about the use of this native but here's an example:

void sub_8709() {
    MISC::_1EAE0A6E978894A2(0, 1);
    MISC::_1EAE0A6E978894A2(1, 1);
    MISC::_1EAE0A6E978894A2(2, 1);
    MISC::_1EAE0A6E978894A2(3, 1);
    MISC::_1EAE0A6E978894A2(4, 1);
    MISC::_1EAE0A6E978894A2(5, 1);
    MISC::_1EAE0A6E978894A2(6, 1);
    MISC::_1EAE0A6E978894A2(7, 1);
    MISC::_1EAE0A6E978894A2(8, 1);
}

So it appears that p0 ranges from 0 to 8.

ENABLE_DISPATCH_SERVICE, seems to have a similar layout.
]]
function natives.MISC.SUPRESS_RANDOM_EVENT_THIS_FRAME(--[[int]] p0, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.SUPRESS_RANDOM_EVENT_THIS_FRAME' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0x1EAE0A6E978894A2, p0, p1)
end
natives.misc.supress_random_event_this_frame = natives.MISC.SUPRESS_RANDOM_EVENT_THIS_FRAME

function natives.MISC.SET_EXPLOSIVE_AMMO_THIS_FRAME(--[[Player]] player) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.SET_EXPLOSIVE_AMMO_THIS_FRAME' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0xA66C71C98D5F2CFB, player)
end
natives.misc.set_explosive_ammo_this_frame = natives.MISC.SET_EXPLOSIVE_AMMO_THIS_FRAME

function natives.MISC.SET_FIRE_AMMO_THIS_FRAME(--[[Player]] player) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.SET_FIRE_AMMO_THIS_FRAME' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0x11879CDD803D30F4, player)
end
natives.misc.set_fire_ammo_this_frame = natives.MISC.SET_FIRE_AMMO_THIS_FRAME

function natives.MISC.SET_EXPLOSIVE_MELEE_THIS_FRAME(--[[Player]] player) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.SET_EXPLOSIVE_MELEE_THIS_FRAME' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0xFF1BED81BFDC0FE0, player)
end
natives.misc.set_explosive_melee_this_frame = natives.MISC.SET_EXPLOSIVE_MELEE_THIS_FRAME

function natives.MISC.SET_SUPER_JUMP_THIS_FRAME(--[[Player]] player) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.SET_SUPER_JUMP_THIS_FRAME' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0x57FFF03E423A4C0B, player)
end
natives.misc.set_super_jump_this_frame = natives.MISC.SET_SUPER_JUMP_THIS_FRAME

function natives.MISC.SET_BEAST_JUMP_THIS_FRAME(--[[Player]] player) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.SET_BEAST_JUMP_THIS_FRAME' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0x438822C279B73B93, player)
end
natives.misc.set_beast_jump_this_frame = natives.MISC.SET_BEAST_JUMP_THIS_FRAME

function natives.MISC.SET_FORCED_JUMP_THIS_FRAME(--[[Player]] player) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.SET_FORCED_JUMP_THIS_FRAME' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0xA1183BCFEE0F93D1, player)
end
natives.misc.set_forced_jump_this_frame = natives.MISC.SET_FORCED_JUMP_THIS_FRAME

function natives.MISC.HAS_GAME_INSTALLED_THIS_SESSION() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.HAS_GAME_INSTALLED_THIS_SESSION' due to disabled trusted mode")

	local result = native_call(0x6FDDF453C0C756EC)
	return result:__tointeger() ~= 0
end
natives.misc.has_game_installed_this_session = natives.MISC.HAS_GAME_INSTALLED_THIS_SESSION

function natives.MISC.SET_TICKER_JOHNMARSTON_IS_DONE() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.SET_TICKER_JOHNMARSTON_IS_DONE' due to disabled trusted mode")

	local result = native_call(0xFB00CA71DA386228)
end
natives.misc.set_ticker_johnmarston_is_done = natives.MISC.SET_TICKER_JOHNMARSTON_IS_DONE

function natives.MISC.ARE_PROFILE_SETTINGS_VALID() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.ARE_PROFILE_SETTINGS_VALID' due to disabled trusted mode")

	local result = native_call(0x5AA3BEFA29F03AD4)
	return result:__tointeger() ~= 0
end
natives.misc.are_profile_settings_valid = natives.MISC.ARE_PROFILE_SETTINGS_VALID

function natives.MISC.PREVENT_ARREST_STATE_THIS_FRAME() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.PREVENT_ARREST_STATE_THIS_FRAME' due to disabled trusted mode")

	local result = native_call(0xE3D969D2785FFB5E)
end
natives.misc.prevent_arrest_state_this_frame = natives.MISC.PREVENT_ARREST_STATE_THIS_FRAME

--[[
Sets the localplayer playerinfo state back to playing (State 0)

States are:
-1: "Invalid"
0: "Playing"
1: "Died"
2: "Arrested"
3: "Failed Mission"
4: "Left Game"
5: "Respawn"
6: "In MP Cutscene"
]]
function natives.MISC.FORCE_GAME_STATE_PLAYING() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.FORCE_GAME_STATE_PLAYING' due to disabled trusted mode")

	local result = native_call(0xC0AA53F866B3134D)
end
natives.misc.force_game_state_playing = natives.MISC.FORCE_GAME_STATE_PLAYING

function natives.MISC.SCRIPT_RACE_INIT(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.SCRIPT_RACE_INIT' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x0A60017F841A54F2, p0, p1, p2, p3)
end
natives.misc.script_race_init = natives.MISC.SCRIPT_RACE_INIT

function natives.MISC.SCRIPT_RACE_SHUTDOWN() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.SCRIPT_RACE_SHUTDOWN' due to disabled trusted mode")

	local result = native_call(0x1FF6BF9A63E5757F)
end
natives.misc.script_race_shutdown = natives.MISC.SCRIPT_RACE_SHUTDOWN

function natives.MISC.SCRIPT_RACE_PLAYER_HIT_CHECKPOINT(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.SCRIPT_RACE_PLAYER_HIT_CHECKPOINT' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x1BB299305C3E8C13, p0, p1, p2, p3)
end
natives.misc.script_race_player_hit_checkpoint = natives.MISC.SCRIPT_RACE_PLAYER_HIT_CHECKPOINT

function natives.MISC.SCRIPT_RACE_GET_PLAYER_SPLIT_TIME(--[[Player]] player, --[[int*]] p1, --[[int*]] p2) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.SCRIPT_RACE_GET_PLAYER_SPLIT_TIME' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(p1) == "userdata", "Arg #2 (p1) must be a userdata.")
	assert(type(p2) == "userdata", "Arg #3 (p2) must be a userdata.")

	local result = native_call(0x8EF5573A1F801A5C, player, p1, p2)
	return result:__tointeger() ~= 0
end
natives.misc.script_race_get_player_split_time = natives.MISC.SCRIPT_RACE_GET_PLAYER_SPLIT_TIME

function natives.MISC.START_END_USER_BENCHMARK() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.START_END_USER_BENCHMARK' due to disabled trusted mode")

	local result = native_call(0x92790862E36C2ADA)
end
natives.misc.start_end_user_benchmark = natives.MISC.START_END_USER_BENCHMARK

function natives.MISC.STOP_END_USER_BENCHMARK() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.STOP_END_USER_BENCHMARK' due to disabled trusted mode")

	local result = native_call(0xC7DB36C24634F52B)
end
natives.misc.stop_end_user_benchmark = natives.MISC.STOP_END_USER_BENCHMARK

function natives.MISC.RESET_END_USER_BENCHMARK() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.RESET_END_USER_BENCHMARK' due to disabled trusted mode")

	local result = native_call(0x437138B6A830166A)
end
natives.misc.reset_end_user_benchmark = natives.MISC.RESET_END_USER_BENCHMARK

--[[
Saves the benchmark recording to %USERPROFILE%\Documents\Rockstar Games\GTA V\Benchmarks and submits some metrics.
]]
function natives.MISC.SAVE_END_USER_BENCHMARK() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.SAVE_END_USER_BENCHMARK' due to disabled trusted mode")

	local result = native_call(0x37DEB0AA183FB6D8)
end
natives.misc.save_end_user_benchmark = natives.MISC.SAVE_END_USER_BENCHMARK

--[[
Returns true if the current frontend menu is FE_MENU_VERSION_SP_PAUSE
]]
function natives.MISC.UI_STARTED_END_USER_BENCHMARK() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.UI_STARTED_END_USER_BENCHMARK' due to disabled trusted mode")

	local result = native_call(0xEA2F2061875EED90)
	return result:__tointeger() ~= 0
end
natives.misc.ui_started_end_user_benchmark = natives.MISC.UI_STARTED_END_USER_BENCHMARK

--[[
Returns true if the current frontend menu is FE_MENU_VERSION_LANDING_MENU
]]
function natives.MISC.LANDING_SCREEN_STARTED_END_USER_BENCHMARK() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.LANDING_SCREEN_STARTED_END_USER_BENCHMARK' due to disabled trusted mode")

	local result = native_call(0x3BBBD13E5041A79E)
	return result:__tointeger() ~= 0
end
natives.misc.landing_screen_started_end_user_benchmark = natives.MISC.LANDING_SCREEN_STARTED_END_USER_BENCHMARK

--[[
Returns true if command line option '-benchmark' is set.
]]
function natives.MISC.IS_COMMANDLINE_END_USER_BENCHMARK() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.IS_COMMANDLINE_END_USER_BENCHMARK' due to disabled trusted mode")

	local result = native_call(0xA049A5BE0F04F2F8)
	return result:__tointeger() ~= 0
end
natives.misc.is_commandline_end_user_benchmark = natives.MISC.IS_COMMANDLINE_END_USER_BENCHMARK

--[[
Returns value of the '-benchmarkIterations' command line option.
]]
function natives.MISC.GET_BENCHMARK_ITERATIONS() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.GET_BENCHMARK_ITERATIONS' due to disabled trusted mode")

	local result = native_call(0x4750FC27570311EC)
	return result:__tointeger()
end
natives.misc.get_benchmark_iterations = natives.MISC.GET_BENCHMARK_ITERATIONS

--[[
Returns value of the '-benchmarkPass' command line option.
]]
function natives.MISC.GET_BENCHMARK_PASS() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.GET_BENCHMARK_PASS' due to disabled trusted mode")

	local result = native_call(0x1B2366C3F2A5C8DF)
	return result:__tointeger()
end
natives.misc.get_benchmark_pass = natives.MISC.GET_BENCHMARK_PASS

--[[
In singleplayer it does exactly what the name implies. In FiveM / GTA:Online it shows `Disconnecting from GTA Online` HUD and then quits the game.
]]
function natives.MISC.RESTART_GAME() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.RESTART_GAME' due to disabled trusted mode")

	local result = native_call(0xE574A662ACAEFBB1)
end
natives.misc.restart_game = natives.MISC.RESTART_GAME

--[[
Exits the game and downloads a fresh social club update on next restart.
]]
function natives.MISC.QUIT_GAME() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.QUIT_GAME' due to disabled trusted mode")

	local result = native_call(0xEB6891F03362FB12)
end
natives.misc.quit_game = natives.MISC.QUIT_GAME

--[[
Hardcoded to always return true.
]]
function natives.MISC.HAS_ASYNC_INSTALL_FINISHED() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.HAS_ASYNC_INSTALL_FINISHED' due to disabled trusted mode")

	local result = native_call(0x14832BF2ABA53FC5)
	return result:__tointeger() ~= 0
end
natives.misc.has_async_install_finished = natives.MISC.HAS_ASYNC_INSTALL_FINISHED

function natives.MISC.CLEANUP_ASYNC_INSTALL() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.CLEANUP_ASYNC_INSTALL' due to disabled trusted mode")

	local result = native_call(0xC79AE21974B01FB2)
end
natives.misc.cleanup_async_install = natives.MISC.CLEANUP_ASYNC_INSTALL

--[[
aka "constrained"
]]
function natives.MISC.PLM_IS_IN_CONSTRAINED_MODE() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.PLM_IS_IN_CONSTRAINED_MODE' due to disabled trusted mode")

	local result = native_call(0x684A41975F077262)
	return result:__tointeger() ~= 0
end
natives.misc.plm_is_in_constrained_mode = natives.MISC.PLM_IS_IN_CONSTRAINED_MODE

--[[
Returns duration of how long the game has been in power-saving mode (aka "constrained") in milliseconds.
]]
function natives.MISC.PLM_GET_CONSTRAINED_DURATION_MS() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.PLM_GET_CONSTRAINED_DURATION_MS' due to disabled trusted mode")

	local result = native_call(0xABB2FA71C83A1B72)
	return result:__tointeger()
end
natives.misc.plm_get_constrained_duration_ms = natives.MISC.PLM_GET_CONSTRAINED_DURATION_MS

--[[
If toggle is true, the ped's head is shown in the pause menu
If toggle is false, the ped's head is not shown in the pause menu
]]
function natives.MISC.SET_PLAYER_IS_IN_ANIMAL_FORM(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.SET_PLAYER_IS_IN_ANIMAL_FORM' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x4EBB7E87AA0DBED4, toggle)
end
natives.misc.set_player_is_in_animal_form = natives.MISC.SET_PLAYER_IS_IN_ANIMAL_FORM

--[[
Although we don't have a jenkins hash for this one, the name is 100% confirmed.
]]
function natives.MISC.GET_IS_PLAYER_IN_ANIMAL_FORM() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.GET_IS_PLAYER_IN_ANIMAL_FORM' due to disabled trusted mode")

	local result = native_call(0x9689123E3F213AA5)
	return result:__tointeger() ~= 0
end
natives.misc.get_is_player_in_animal_form = natives.MISC.GET_IS_PLAYER_IN_ANIMAL_FORM

function natives.MISC.SET_PLAYER_IS_REPEATING_A_MISSION(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.SET_PLAYER_IS_REPEATING_A_MISSION' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x9D8D44ADBBA61EF2, toggle)
end
natives.misc.set_player_is_repeating_a_mission = natives.MISC.SET_PLAYER_IS_REPEATING_A_MISSION

--[[
Does nothing (it's a nullsub).
]]
function natives.MISC.DISABLE_SCREEN_DIMMING_THIS_FRAME() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.DISABLE_SCREEN_DIMMING_THIS_FRAME' due to disabled trusted mode")

	local result = native_call(0x23227DF0B2115469)
end
natives.misc.disable_screen_dimming_this_frame = natives.MISC.DISABLE_SCREEN_DIMMING_THIS_FRAME

function natives.MISC.GET_CITY_DENSITY() -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.GET_CITY_DENSITY' due to disabled trusted mode")

	local result = native_call(0xD10282B6E3751BA0)
	return result:__tointeger()
end
natives.misc.get_city_density = natives.MISC.GET_CITY_DENSITY

function natives.MISC.USE_ACTIVE_CAMERA_FOR_TIMESLICING_CENTRE() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.USE_ACTIVE_CAMERA_FOR_TIMESLICING_CENTRE' due to disabled trusted mode")

	local result = native_call(0x693478ACBD7F18E7)
end
natives.misc.use_active_camera_for_timeslicing_centre = natives.MISC.USE_ACTIVE_CAMERA_FOR_TIMESLICING_CENTRE

function natives.MISC.SET_CONTENT_ID_INDEX(--[[Hash]] contentId, --[[int]] index) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.SET_CONTENT_ID_INDEX' due to disabled trusted mode")

	assert(type(contentId) == "number", "Arg #1 (contentId) must be a number.")
	assert(type(index) == "number", "Arg #2 (index) must be a number.")

	local result = native_call(0x4B82FA6F2D624634, contentId, index)
end
natives.misc.set_content_id_index = natives.MISC.SET_CONTENT_ID_INDEX

function natives.MISC.GET_CONTENT_ID_INDEX(--[[Hash]] contentId) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MISC.GET_CONTENT_ID_INDEX' due to disabled trusted mode")

	assert(type(contentId) == "number", "Arg #1 (contentId) must be a number.")

	local result = native_call(0xECF041186C5A94DC, contentId)
	return result:__tointeger()
end
natives.misc.get_content_id_index = natives.MISC.GET_CONTENT_ID_INDEX


natives.MOBILE = {}
natives.mobile = {}

--[[
Creates a mobile phone of the specified type.

Possible phone types:

0 - Default phone / Michael's phone
1 - Trevor's phone
2 - Franklin's phone
3 - Unused police phone
4 - Prologue phone

Higher values may crash your game.
]]
function natives.MOBILE.CREATE_MOBILE_PHONE(--[[int]] phoneType) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MOBILE.CREATE_MOBILE_PHONE' due to disabled trusted mode")

	assert(type(phoneType) == "number", "Arg #1 (phoneType) must be a number.")

	local result = native_call(0xA4E8E696C532FBC7, phoneType)
end
natives.mobile.create_mobile_phone = natives.MOBILE.CREATE_MOBILE_PHONE

--[[
Destroys the currently active mobile phone.
]]
function natives.MOBILE.DESTROY_MOBILE_PHONE() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MOBILE.DESTROY_MOBILE_PHONE' due to disabled trusted mode")

	local result = native_call(0x3BC861DF703E5097)
end
natives.mobile.destroy_mobile_phone = natives.MOBILE.DESTROY_MOBILE_PHONE

--[[
The minimum/default is 500.0f. If you plan to make it bigger set it's position as well. Also this seems to need to be called in a loop as when you close the phone the scale is reset. If not in a loop you'd need to call it everytime before you re-open the phone.
]]
function natives.MOBILE.SET_MOBILE_PHONE_SCALE(--[[float]] scale) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MOBILE.SET_MOBILE_PHONE_SCALE' due to disabled trusted mode")

	assert(type(scale) == "number", "Arg #1 (scale) must be a number.")

	local result = native_call(0xCBDD322A73D6D932, scale)
end
natives.mobile.set_mobile_phone_scale = natives.MOBILE.SET_MOBILE_PHONE_SCALE

--[[
Last parameter is unknown and always zero.
]]
function natives.MOBILE.SET_MOBILE_PHONE_ROTATION(--[[float]] rotX, --[[float]] rotY, --[[float]] rotZ, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MOBILE.SET_MOBILE_PHONE_ROTATION' due to disabled trusted mode")

	assert(type(rotX) == "number", "Arg #1 (rotX) must be a number.")
	assert(type(rotY) == "number", "Arg #2 (rotY) must be a number.")
	assert(type(rotZ) == "number", "Arg #3 (rotZ) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0xBB779C0CA917E865, rotX, rotY, rotZ, p3)
end
natives.mobile.set_mobile_phone_rotation = natives.MOBILE.SET_MOBILE_PHONE_ROTATION

function natives.MOBILE.GET_MOBILE_PHONE_ROTATION(--[[Vector3*]] rotation, --[[Vehicle]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MOBILE.GET_MOBILE_PHONE_ROTATION' due to disabled trusted mode")

	assert(type(rotation) == "userdata", "Arg #1 (rotation) must be a userdata.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x1CEFB61F193070AE, rotation, p1)
end
natives.mobile.get_mobile_phone_rotation = natives.MOBILE.GET_MOBILE_PHONE_ROTATION

function natives.MOBILE.SET_MOBILE_PHONE_POSITION(--[[float]] posX, --[[float]] posY, --[[float]] posZ) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MOBILE.SET_MOBILE_PHONE_POSITION' due to disabled trusted mode")

	assert(type(posX) == "number", "Arg #1 (posX) must be a number.")
	assert(type(posY) == "number", "Arg #2 (posY) must be a number.")
	assert(type(posZ) == "number", "Arg #3 (posZ) must be a number.")

	local result = native_call(0x693A5C6D6734085B, posX, posY, posZ)
end
natives.mobile.set_mobile_phone_position = natives.MOBILE.SET_MOBILE_PHONE_POSITION

function natives.MOBILE.GET_MOBILE_PHONE_POSITION(--[[Vector3*]] position) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MOBILE.GET_MOBILE_PHONE_POSITION' due to disabled trusted mode")

	assert(type(position) == "userdata", "Arg #1 (position) must be a userdata.")

	local result = native_call(0x584FDFDA48805B86, position)
end
natives.mobile.get_mobile_phone_position = natives.MOBILE.GET_MOBILE_PHONE_POSITION

--[[
If bool Toggle = true so the mobile is hide to screen.
If bool Toggle = false so the mobile is show to screen.
]]
function natives.MOBILE.SCRIPT_IS_MOVING_MOBILE_PHONE_OFFSCREEN(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MOBILE.SCRIPT_IS_MOVING_MOBILE_PHONE_OFFSCREEN' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0xF511F759238A5122, toggle)
end
natives.mobile.script_is_moving_mobile_phone_offscreen = natives.MOBILE.SCRIPT_IS_MOVING_MOBILE_PHONE_OFFSCREEN

--[[
This one is weird and seems to return a TRUE state regardless of whether the phone is visible on screen or tucked away.


I can confirm the above. This function is hard-coded to always return 1.
]]
function natives.MOBILE.CAN_PHONE_BE_SEEN_ON_SCREEN() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MOBILE.CAN_PHONE_BE_SEEN_ON_SCREEN' due to disabled trusted mode")

	local result = native_call(0xC4E2813898C97A4B)
	return result:__tointeger() ~= 0
end
natives.mobile.can_phone_be_seen_on_screen = natives.MOBILE.CAN_PHONE_BE_SEEN_ON_SCREEN

function natives.MOBILE.SET_MOBILE_PHONE_DOF_STATE(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MOBILE.SET_MOBILE_PHONE_DOF_STATE' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x375A706A5C2FD084, toggle)
end
natives.mobile.set_mobile_phone_dof_state = natives.MOBILE.SET_MOBILE_PHONE_DOF_STATE

--[[
For move the finger of player, the value of int goes 1 at 5.
]]
function natives.MOBILE.CELL_SET_INPUT(--[[int]] direction) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MOBILE.CELL_SET_INPUT' due to disabled trusted mode")

	assert(type(direction) == "number", "Arg #1 (direction) must be a number.")

	local result = native_call(0x95C9E72F3D7DEC9B, direction)
end
natives.mobile.cell_set_input = natives.MOBILE.CELL_SET_INPUT

--[[
if the bool "Toggle" is "true" so the phone is lean.
if the bool "Toggle" is "false" so the phone is not lean.
]]
function natives.MOBILE.CELL_HORIZONTAL_MODE_TOGGLE(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MOBILE.CELL_HORIZONTAL_MODE_TOGGLE' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x44E44169EF70138E, toggle)
end
natives.mobile.cell_horizontal_mode_toggle = natives.MOBILE.CELL_HORIZONTAL_MODE_TOGGLE

function natives.MOBILE.CELL_CAM_ACTIVATE(--[[BOOL]] p0, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MOBILE.CELL_CAM_ACTIVATE' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0xFDE8F069C542D126, p0, p1)
end
natives.mobile.cell_cam_activate = natives.MOBILE.CELL_CAM_ACTIVATE

function natives.MOBILE.CELL_CAM_ACTIVATE_SELFIE_MODE(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MOBILE.CELL_CAM_ACTIVATE_SELFIE_MODE' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x015C49A93E3E086E, toggle)
end
natives.mobile.cell_cam_activate_selfie_mode = natives.MOBILE.CELL_CAM_ACTIVATE_SELFIE_MODE

function natives.MOBILE.CELL_CAM_ACTIVATE_SHALLOW_DOF_MODE(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MOBILE.CELL_CAM_ACTIVATE_SHALLOW_DOF_MODE' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0xA2CCBE62CD4C91A4, toggle)
end
natives.mobile.cell_cam_activate_shallow_dof_mode = natives.MOBILE.CELL_CAM_ACTIVATE_SHALLOW_DOF_MODE

function natives.MOBILE.CELL_CAM_SET_SELFIE_MODE_SIDE_OFFSET_SCALING(--[[float]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MOBILE.CELL_CAM_SET_SELFIE_MODE_SIDE_OFFSET_SCALING' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x1B0B4AEED5B9B41C, p0)
end
natives.mobile.cell_cam_set_selfie_mode_side_offset_scaling = natives.MOBILE.CELL_CAM_SET_SELFIE_MODE_SIDE_OFFSET_SCALING

function natives.MOBILE.CELL_CAM_SET_SELFIE_MODE_HORZ_PAN_OFFSET(--[[float]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MOBILE.CELL_CAM_SET_SELFIE_MODE_HORZ_PAN_OFFSET' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x53F4892D18EC90A4, p0)
end
natives.mobile.cell_cam_set_selfie_mode_horz_pan_offset = natives.MOBILE.CELL_CAM_SET_SELFIE_MODE_HORZ_PAN_OFFSET

function natives.MOBILE.CELL_CAM_SET_SELFIE_MODE_VERT_PAN_OFFSET(--[[float]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MOBILE.CELL_CAM_SET_SELFIE_MODE_VERT_PAN_OFFSET' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x3117D84EFA60F77B, p0)
end
natives.mobile.cell_cam_set_selfie_mode_vert_pan_offset = natives.MOBILE.CELL_CAM_SET_SELFIE_MODE_VERT_PAN_OFFSET

function natives.MOBILE.CELL_CAM_SET_SELFIE_MODE_ROLL_OFFSET(--[[float]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MOBILE.CELL_CAM_SET_SELFIE_MODE_ROLL_OFFSET' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x15E69E2802C24B8D, p0)
end
natives.mobile.cell_cam_set_selfie_mode_roll_offset = natives.MOBILE.CELL_CAM_SET_SELFIE_MODE_ROLL_OFFSET

function natives.MOBILE.CELL_CAM_SET_SELFIE_MODE_DISTANCE_SCALING(--[[float]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MOBILE.CELL_CAM_SET_SELFIE_MODE_DISTANCE_SCALING' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xAC2890471901861C, p0)
end
natives.mobile.cell_cam_set_selfie_mode_distance_scaling = natives.MOBILE.CELL_CAM_SET_SELFIE_MODE_DISTANCE_SCALING

function natives.MOBILE.CELL_CAM_SET_SELFIE_MODE_HEAD_YAW_OFFSET(--[[float]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MOBILE.CELL_CAM_SET_SELFIE_MODE_HEAD_YAW_OFFSET' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xD6ADE981781FCA09, p0)
end
natives.mobile.cell_cam_set_selfie_mode_head_yaw_offset = natives.MOBILE.CELL_CAM_SET_SELFIE_MODE_HEAD_YAW_OFFSET

function natives.MOBILE.CELL_CAM_SET_SELFIE_MODE_HEAD_ROLL_OFFSET(--[[float]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MOBILE.CELL_CAM_SET_SELFIE_MODE_HEAD_ROLL_OFFSET' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xF1E22DC13F5EEBAD, p0)
end
natives.mobile.cell_cam_set_selfie_mode_head_roll_offset = natives.MOBILE.CELL_CAM_SET_SELFIE_MODE_HEAD_ROLL_OFFSET

function natives.MOBILE.CELL_CAM_SET_SELFIE_MODE_HEAD_PITCH_OFFSET(--[[float]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MOBILE.CELL_CAM_SET_SELFIE_MODE_HEAD_PITCH_OFFSET' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x466DA42C89865553, p0)
end
natives.mobile.cell_cam_set_selfie_mode_head_pitch_offset = natives.MOBILE.CELL_CAM_SET_SELFIE_MODE_HEAD_PITCH_OFFSET

function natives.MOBILE.CELL_CAM_IS_CHAR_VISIBLE_NO_FACE_CHECK(--[[Entity]] entity) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MOBILE.CELL_CAM_IS_CHAR_VISIBLE_NO_FACE_CHECK' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0x439E9BC95B7E7FBE, entity)
	return result:__tointeger() ~= 0
end
natives.mobile.cell_cam_is_char_visible_no_face_check = natives.MOBILE.CELL_CAM_IS_CHAR_VISIBLE_NO_FACE_CHECK

function natives.MOBILE.GET_MOBILE_PHONE_RENDER_ID(--[[int*]] renderId) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MOBILE.GET_MOBILE_PHONE_RENDER_ID' due to disabled trusted mode")

	assert(type(renderId) == "userdata", "Arg #1 (renderId) must be a userdata.")

	local result = native_call(0xB4A53E05F68B6FA1, renderId)
end
natives.mobile.get_mobile_phone_render_id = natives.MOBILE.GET_MOBILE_PHONE_RENDER_ID


natives.MONEY = {}
natives.money = {}

function natives.MONEY.NETWORK_INITIALIZE_CASH(--[[int]] wallet, --[[int]] bank) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_INITIALIZE_CASH' due to disabled trusted mode")

	assert(type(wallet) == "number", "Arg #1 (wallet) must be a number.")
	assert(type(bank) == "number", "Arg #2 (bank) must be a number.")

	local result = native_call(0x3DA5ECD1A56CBA6D, wallet, bank)
end
natives.money.network_initialize_cash = natives.MONEY.NETWORK_INITIALIZE_CASH

--[[
Note the 2nd parameters are always 1, 0. I have a feeling it deals with your money, wallet, bank. So when you delete the character it of course wipes the wallet cash at that time. So if that was the case, it would be eg, NETWORK_DELETE_CHARACTER(characterIndex, deleteWalletCash, deleteBankCash);
]]
function natives.MONEY.NETWORK_DELETE_CHARACTER(--[[int]] characterSlot, --[[BOOL]] p1, --[[BOOL]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_DELETE_CHARACTER' due to disabled trusted mode")

	assert(type(characterSlot) == "number", "Arg #1 (characterSlot) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")

	local result = native_call(0x05A50AF38947EB8D, characterSlot, p1, p2)
end
natives.money.network_delete_character = natives.MONEY.NETWORK_DELETE_CHARACTER

function natives.MONEY.NETWORK_MANUAL_DELETE_CHARACTER(--[[int]] characterSlot) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_MANUAL_DELETE_CHARACTER' due to disabled trusted mode")

	assert(type(characterSlot) == "number", "Arg #1 (characterSlot) must be a number.")

	local result = native_call(0x821418C727FCACD7, characterSlot)
end
natives.money.network_manual_delete_character = natives.MONEY.NETWORK_MANUAL_DELETE_CHARACTER

function natives.MONEY.NETWORK_GET_PLAYER_IS_HIGH_EARNER() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_GET_PLAYER_IS_HIGH_EARNER' due to disabled trusted mode")

	local result = native_call(0xFB2456B2040A6A67)
	return result:__tointeger() ~= 0
end
natives.money.network_get_player_is_high_earner = natives.MONEY.NETWORK_GET_PLAYER_IS_HIGH_EARNER

function natives.MONEY.NETWORK_CLEAR_CHARACTER_WALLET(--[[int]] characterSlot) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_CLEAR_CHARACTER_WALLET' due to disabled trusted mode")

	assert(type(characterSlot) == "number", "Arg #1 (characterSlot) must be a number.")

	local result = native_call(0xA921DED15FDF28F5, characterSlot)
end
natives.money.network_clear_character_wallet = natives.MONEY.NETWORK_CLEAR_CHARACTER_WALLET

function natives.MONEY.NETWORK_GIVE_PLAYER_JOBSHARE_CASH(--[[int]] amount, --[[Any*]] gamerHandle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_GIVE_PLAYER_JOBSHARE_CASH' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")
	assert(type(gamerHandle) == "userdata", "Arg #2 (gamerHandle) must be a userdata.")

	local result = native_call(0xFB18DF9CB95E0105, amount, gamerHandle)
end
natives.money.network_give_player_jobshare_cash = natives.MONEY.NETWORK_GIVE_PLAYER_JOBSHARE_CASH

function natives.MONEY.NETWORK_RECEIVE_PLAYER_JOBSHARE_CASH(--[[int]] value, --[[Any*]] gamerHandle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_RECEIVE_PLAYER_JOBSHARE_CASH' due to disabled trusted mode")

	assert(type(value) == "number", "Arg #1 (value) must be a number.")
	assert(type(gamerHandle) == "userdata", "Arg #2 (gamerHandle) must be a userdata.")

	local result = native_call(0x56A3B51944C50598, value, gamerHandle)
end
natives.money.network_receive_player_jobshare_cash = natives.MONEY.NETWORK_RECEIVE_PLAYER_JOBSHARE_CASH

function natives.MONEY.NETWORK_CAN_SHARE_JOB_CASH() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_CAN_SHARE_JOB_CASH' due to disabled trusted mode")

	local result = native_call(0x1C2473301B1C66BA)
	return result:__tointeger() ~= 0
end
natives.money.network_can_share_job_cash = natives.MONEY.NETWORK_CAN_SHARE_JOB_CASH

--[[
index
-------
See function sub_1005 in am_boat_taxi.ysc

context
----------
"BACKUP_VAGOS"
"BACKUP_LOST"
"BACKUP_FAMILIES"
"HIRE_MUGGER"
"HIRE_MERCENARY"
"BUY_CARDROPOFF"
"HELI_PICKUP"
"BOAT_PICKUP"
"CLEAR_WANTED"
"HEAD_2_HEAD"
"CHALLENGE"
"SHARE_LAST_JOB"
"DEFAULT"

reason
---------
"NOTREACHTARGET"
"TARGET_ESCAPE"
"DELIVERY_FAIL"
"NOT_USED"
"TEAM_QUIT"
"SERVER_ERROR"
"RECEIVE_LJ_L"
"CHALLENGE_PLAYER_LEFT"
"DEFAULT"

unk
-----
Unknown bool value


]]
function natives.MONEY.NETWORK_REFUND_CASH(--[[int]] index, --[[const char*]] context, --[[const char*]] reason, --[[BOOL]] unk) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_REFUND_CASH' due to disabled trusted mode")

	assert(type(index) == "number", "Arg #1 (index) must be a number.")
	assert(type(context) == "string", "Arg #2 (context) must be a string.")
	assert(type(reason) == "string", "Arg #3 (reason) must be a string.")
	assert(type(unk) == "boolean", "Arg #4 (unk) must be a boolean.")

	local result = native_call(0xF9C812CD7C46E817, index, context, reason, unk)
end
natives.money.network_refund_cash = natives.MONEY.NETWORK_REFUND_CASH

function natives.MONEY.NETWORK_DEDUCT_CASH(--[[int]] amount, --[[const char*]] p1, --[[const char*]] p2, --[[BOOL]] p3, --[[BOOL]] p4, --[[BOOL]] p5) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_DEDUCT_CASH' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")
	assert(type(p1) == "string", "Arg #2 (p1) must be a string.")
	assert(type(p2) == "string", "Arg #3 (p2) must be a string.")
	assert(type(p3) == "boolean", "Arg #4 (p3) must be a boolean.")
	assert(type(p4) == "boolean", "Arg #5 (p4) must be a boolean.")
	assert(type(p5) == "boolean", "Arg #6 (p5) must be a boolean.")

	local result = native_call(0x18B7AE224B087E26, amount, p1, p2, p3, p4, p5)
end
natives.money.network_deduct_cash = natives.MONEY.NETWORK_DEDUCT_CASH

function natives.MONEY.NETWORK_MONEY_CAN_BET(--[[int]] amount, --[[BOOL]] p1, --[[BOOL]] p2) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_MONEY_CAN_BET' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")

	local result = native_call(0x81404F3DC124FE5B, amount, p1, p2)
	return result:__tointeger() ~= 0
end
natives.money.network_money_can_bet = natives.MONEY.NETWORK_MONEY_CAN_BET

function natives.MONEY.NETWORK_CAN_BET(--[[int]] amount) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_CAN_BET' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")

	local result = native_call(0x3A54E33660DED67F, amount)
	return result:__tointeger() ~= 0
end
natives.money.network_can_bet = natives.MONEY.NETWORK_CAN_BET

--[[
GTAO_CASINO_HOUSE
GTAO_CASINO_INSIDETRACK
GTAO_CASINO_LUCKYWHEEL
GTAO_CASINO_BLACKJACK
GTAO_CASINO_ROULETTE
GTAO_CASINO_SLOTS
GTAO_CASINO_PURCHASE_CHIPS

NETWORK_C*
]]
function natives.MONEY.NETWORK_CASINO_CAN_BET(--[[Hash]] hash) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_CASINO_CAN_BET' due to disabled trusted mode")

	assert(type(hash) == "number", "Arg #1 (hash) must be a number.")

	local result = native_call(0x158C16F5E4CF41F8, hash)
	return result:__tointeger() ~= 0
end
natives.money.network_casino_can_bet = natives.MONEY.NETWORK_CASINO_CAN_BET

--[[
Same as 0x8968D4D8C6C40C11.

NETWORK_C*
]]
function natives.MONEY.NETWORK_CASINO_CAN_BET_PVC() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_CASINO_CAN_BET_PVC' due to disabled trusted mode")

	local result = native_call(0x394DCDB9E836B7A9)
	return result:__tointeger() ~= 0
end
natives.money.network_casino_can_bet_pvc = natives.MONEY.NETWORK_CASINO_CAN_BET_PVC

--[[
NETWORK_C*
]]
function natives.MONEY.NETWORK_CASINO_CAN_BET_AMOUNT(--[[Any]] p0) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_CASINO_CAN_BET_AMOUNT' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xF62F6D9528358FE4, p0)
	return result:__tointeger() ~= 0
end
natives.money.network_casino_can_bet_amount = natives.MONEY.NETWORK_CASINO_CAN_BET_AMOUNT

--[[
Same as 0x394DCDB9E836B7A9.

NETWORK_C*
]]
function natives.MONEY.NETWORK_CASINO_CAN_BUY_CHIPS_PVC() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_CASINO_CAN_BUY_CHIPS_PVC' due to disabled trusted mode")

	local result = native_call(0x8968D4D8C6C40C11)
	return result:__tointeger() ~= 0
end
natives.money.network_casino_can_buy_chips_pvc = natives.MONEY.NETWORK_CASINO_CAN_BUY_CHIPS_PVC

--[[
NETWORK_C*
]]
function natives.MONEY.NETWORK_CASINO_BUY_CHIPS(--[[int]] p0, --[[int]] p1) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_CASINO_BUY_CHIPS' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x3BD101471C7F9EEC, p0, p1)
	return result:__tointeger() ~= 0
end
natives.money.network_casino_buy_chips = natives.MONEY.NETWORK_CASINO_BUY_CHIPS

--[[
NETWORK_C*
]]
function natives.MONEY.NETWORK_CASINO_SELL_CHIPS(--[[int]] p0, --[[int]] p1) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_CASINO_SELL_CHIPS' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xED44897CB336F480, p0, p1)
	return result:__tointeger() ~= 0
end
natives.money.network_casino_sell_chips = natives.MONEY.NETWORK_CASINO_SELL_CHIPS

--[[
Does nothing (it's a nullsub).
]]
function natives.MONEY.NETWORK_DEFER_CASH_TRANSACTIONS_UNTIL_SHOP_SAVE() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_DEFER_CASH_TRANSACTIONS_UNTIL_SHOP_SAVE' due to disabled trusted mode")

	local result = native_call(0xCD0F5B5D932AE473)
end
natives.money.network_defer_cash_transactions_until_shop_save = natives.MONEY.NETWORK_DEFER_CASH_TRANSACTIONS_UNTIL_SHOP_SAVE

--[[
CAN_*
]]
function natives.MONEY.CAN_PAY_AMOUNT_TO_BOSS(--[[int]] p0, --[[int]] p1, --[[int]] amount, --[[int*]] p3) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.CAN_PAY_AMOUNT_TO_BOSS' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(amount) == "number", "Arg #3 (amount) must be a number.")
	assert(type(p3) == "userdata", "Arg #4 (p3) must be a userdata.")

	local result = native_call(0x9777734DAD16992F, p0, p1, amount, p3)
	return result:__tointeger() ~= 0
end
natives.money.can_pay_amount_to_boss = natives.MONEY.CAN_PAY_AMOUNT_TO_BOSS

function natives.MONEY.NETWORK_EARN_FROM_PICKUP(--[[int]] amount) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_FROM_PICKUP' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")

	local result = native_call(0xED1517D3AF17C698, amount)
end
natives.money.network_earn_from_pickup = natives.MONEY.NETWORK_EARN_FROM_PICKUP

function natives.MONEY.NETWORK_EARN_FROM_CASHING_OUT(--[[int]] amount) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_FROM_CASHING_OUT' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")

	local result = native_call(0x718FBBF67414FA36, amount)
end
natives.money.network_earn_from_cashing_out = natives.MONEY.NETWORK_EARN_FROM_CASHING_OUT

function natives.MONEY.NETWORK_EARN_FROM_GANGATTACK_PICKUP(--[[int]] amount) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_FROM_GANGATTACK_PICKUP' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")

	local result = native_call(0xA03D4ACE0A3284CE, amount)
end
natives.money.network_earn_from_gangattack_pickup = natives.MONEY.NETWORK_EARN_FROM_GANGATTACK_PICKUP

function natives.MONEY.NETWORK_EARN_ASSASSINATE_TARGET_KILLED(--[[int]] amount) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_ASSASSINATE_TARGET_KILLED' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")

	local result = native_call(0xFA700D8A9905F78A, amount)
end
natives.money.network_earn_assassinate_target_killed = natives.MONEY.NETWORK_EARN_ASSASSINATE_TARGET_KILLED

--[[
For the money bags that drop a max of $40,000. Often called 40k bags.

Most likely NETWORK_EARN_FROM_ROB***
]]
function natives.MONEY.NETWORK_EARN_FROM_ROB_ARMORED_CARS(--[[int]] amount) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_FROM_ROB_ARMORED_CARS' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")

	local result = native_call(0xF514621E8EA463D0, amount)
end
natives.money.network_earn_from_rob_armored_cars = natives.MONEY.NETWORK_EARN_FROM_ROB_ARMORED_CARS

function natives.MONEY.NETWORK_EARN_FROM_CRATE_DROP(--[[int]] amount) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_FROM_CRATE_DROP' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")

	local result = native_call(0xB1CC1B9EC3007A2A, amount)
end
natives.money.network_earn_from_crate_drop = natives.MONEY.NETWORK_EARN_FROM_CRATE_DROP

function natives.MONEY.NETWORK_EARN_FROM_BETTING(--[[int]] amount, --[[const char*]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_FROM_BETTING' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")
	assert(type(p1) == "string", "Arg #2 (p1) must be a string.")

	local result = native_call(0x827A5BA1A44ACA6D, amount, p1)
end
natives.money.network_earn_from_betting = natives.MONEY.NETWORK_EARN_FROM_BETTING

function natives.MONEY.NETWORK_EARN_FROM_JOB(--[[int]] amount, --[[const char*]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_FROM_JOB' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")
	assert(type(p1) == "string", "Arg #2 (p1) must be a string.")

	local result = native_call(0xB2CC4836834E8A98, amount, p1)
end
natives.money.network_earn_from_job = natives.MONEY.NETWORK_EARN_FROM_JOB

function natives.MONEY.NETWORK_EARN_FROM_JOBX2(--[[int]] amount, --[[const char*]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_FROM_JOBX2' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")
	assert(type(p1) == "string", "Arg #2 (p1) must be a string.")

	local result = native_call(0xDEBBF584665411D0, amount, p1)
end
natives.money.network_earn_from_jobx2 = natives.MONEY.NETWORK_EARN_FROM_JOBX2

function natives.MONEY.NETWORK_EARN_FROM_PREMIUM_JOB(--[[int]] amount, --[[const char*]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_FROM_PREMIUM_JOB' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")
	assert(type(p1) == "string", "Arg #2 (p1) must be a string.")

	local result = native_call(0xC8407624CEF2354B, amount, p1)
end
natives.money.network_earn_from_premium_job = natives.MONEY.NETWORK_EARN_FROM_PREMIUM_JOB

function natives.MONEY.NETWORK_EARN_FROM_BEND_JOB(--[[int]] amount, --[[const char*]] heistHash) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_FROM_BEND_JOB' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")
	assert(type(heistHash) == "string", "Arg #2 (heistHash) must be a string.")

	local result = native_call(0x61326EE6DF15B0CA, amount, heistHash)
end
natives.money.network_earn_from_bend_job = natives.MONEY.NETWORK_EARN_FROM_BEND_JOB

function natives.MONEY.NETWORK_EARN_FROM_CHALLENGE_WIN(--[[Any]] p0, --[[Any*]] p1, --[[BOOL]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_FROM_CHALLENGE_WIN' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "userdata", "Arg #2 (p1) must be a userdata.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")

	local result = native_call(0x2B171E6B2F64D8DF, p0, p1, p2)
end
natives.money.network_earn_from_challenge_win = natives.MONEY.NETWORK_EARN_FROM_CHALLENGE_WIN

function natives.MONEY.NETWORK_EARN_FROM_BOUNTY(--[[int]] amount, --[[Any*]] gamerHandle, --[[Any*]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_FROM_BOUNTY' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")
	assert(type(gamerHandle) == "userdata", "Arg #2 (gamerHandle) must be a userdata.")
	assert(type(p2) == "userdata", "Arg #3 (p2) must be a userdata.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x131BB5DA15453ACF, amount, gamerHandle, p2, p3)
end
natives.money.network_earn_from_bounty = natives.MONEY.NETWORK_EARN_FROM_BOUNTY

function natives.MONEY.NETWORK_EARN_FROM_IMPORT_EXPORT(--[[int]] amount, --[[Hash]] modelHash) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_FROM_IMPORT_EXPORT' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")
	assert(type(modelHash) == "number", "Arg #2 (modelHash) must be a number.")

	local result = native_call(0xF92A014A634442D6, amount, modelHash)
end
natives.money.network_earn_from_import_export = natives.MONEY.NETWORK_EARN_FROM_IMPORT_EXPORT

function natives.MONEY.NETWORK_EARN_FROM_HOLDUPS(--[[int]] amount) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_FROM_HOLDUPS' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")

	local result = native_call(0x45B8154E077D9E4D, amount)
end
natives.money.network_earn_from_holdups = natives.MONEY.NETWORK_EARN_FROM_HOLDUPS

function natives.MONEY.NETWORK_EARN_FROM_PROPERTY(--[[int]] amount, --[[Hash]] propertyName) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_FROM_PROPERTY' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")
	assert(type(propertyName) == "number", "Arg #2 (propertyName) must be a number.")

	local result = native_call(0x849648349D77F5C5, amount, propertyName)
end
natives.money.network_earn_from_property = natives.MONEY.NETWORK_EARN_FROM_PROPERTY

--[[
DSPORT
]]
function natives.MONEY.NETWORK_EARN_FROM_AI_TARGET_KILL(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_FROM_AI_TARGET_KILL' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x515B4A22E4D3C6D7, p0, p1)
end
natives.money.network_earn_from_ai_target_kill = natives.MONEY.NETWORK_EARN_FROM_AI_TARGET_KILL

function natives.MONEY.NETWORK_EARN_FROM_NOT_BADSPORT(--[[int]] amount) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_FROM_NOT_BADSPORT' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")

	local result = native_call(0x4337511FA8221D36, amount)
end
natives.money.network_earn_from_not_badsport = natives.MONEY.NETWORK_EARN_FROM_NOT_BADSPORT

function natives.MONEY.NETWORK_EARN_FROM_ROCKSTAR(--[[int]] amount) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_FROM_ROCKSTAR' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")

	local result = native_call(0x02CE1D6AC0FC73EA, amount)
end
natives.money.network_earn_from_rockstar = natives.MONEY.NETWORK_EARN_FROM_ROCKSTAR

function natives.MONEY.NETWORK_EARN_FROM_VEHICLE(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3, --[[Any]] p4, --[[Any]] p5, --[[Any]] p6, --[[Any]] p7) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_FROM_VEHICLE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")
	assert(type(p6) == "number", "Arg #7 (p6) must be a number.")
	assert(type(p7) == "number", "Arg #8 (p7) must be a number.")

	local result = native_call(0xB539BD8A4C1EECF8, p0, p1, p2, p3, p4, p5, p6, p7)
end
natives.money.network_earn_from_vehicle = natives.MONEY.NETWORK_EARN_FROM_VEHICLE

function natives.MONEY.NETWORK_EARN_FROM_PERSONAL_VEHICLE(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3, --[[Any]] p4, --[[Any]] p5, --[[Any]] p6, --[[Any]] p7, --[[Any]] p8) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_FROM_PERSONAL_VEHICLE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")
	assert(type(p6) == "number", "Arg #7 (p6) must be a number.")
	assert(type(p7) == "number", "Arg #8 (p7) must be a number.")
	assert(type(p8) == "number", "Arg #9 (p8) must be a number.")

	local result = native_call(0x3F4D00167E41E0AD, p0, p1, p2, p3, p4, p5, p6, p7, p8)
end
natives.money.network_earn_from_personal_vehicle = natives.MONEY.NETWORK_EARN_FROM_PERSONAL_VEHICLE

function natives.MONEY.NETWORK_EARN_FROM_DAILY_OBJECTIVES(--[[int]] p0, --[[const char*]] p1, --[[int]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_FROM_DAILY_OBJECTIVES' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "string", "Arg #2 (p1) must be a string.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0x6EA318C91C1A8786, p0, p1, p2)
end
natives.money.network_earn_from_daily_objectives = natives.MONEY.NETWORK_EARN_FROM_DAILY_OBJECTIVES

--[[
Example for p1: "AM_DISTRACT_COPS"
]]
function natives.MONEY.NETWORK_EARN_FROM_AMBIENT_JOB(--[[int]] p0, --[[const char*]] p1, --[[Any*]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_FROM_AMBIENT_JOB' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "string", "Arg #2 (p1) must be a string.")
	assert(type(p2) == "userdata", "Arg #3 (p2) must be a userdata.")

	local result = native_call(0xFB6DB092FBAE29E6, p0, p1, p2)
end
natives.money.network_earn_from_ambient_job = natives.MONEY.NETWORK_EARN_FROM_AMBIENT_JOB

function natives.MONEY.NETWORK_EARN_FROM_JOB_BONUS(--[[Any]] p0, --[[Any*]] p1, --[[Any*]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_FROM_JOB_BONUS' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "userdata", "Arg #2 (p1) must be a userdata.")
	assert(type(p2) == "userdata", "Arg #3 (p2) must be a userdata.")

	local result = native_call(0x6816FB4416760775, p0, p1, p2)
end
natives.money.network_earn_from_job_bonus = natives.MONEY.NETWORK_EARN_FROM_JOB_BONUS

function natives.MONEY.NETWORK_EARN_FROM_CRIMINAL_MASTERMIND(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_FROM_CRIMINAL_MASTERMIND' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0xFA009A62990671D4, p0, p1, p2)
end
natives.money.network_earn_from_criminal_mastermind = natives.MONEY.NETWORK_EARN_FROM_CRIMINAL_MASTERMIND

function natives.MONEY.NETWORK_EARN_HEIST_AWARD(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_HEIST_AWARD' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0x9D4FDBB035229669, p0, p1, p2)
end
natives.money.network_earn_heist_award = natives.MONEY.NETWORK_EARN_HEIST_AWARD

function natives.MONEY.NETWORK_EARN_FIRST_TIME_BONUS(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_FIRST_TIME_BONUS' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0x11B0A20C493F7E36, p0, p1, p2)
end
natives.money.network_earn_first_time_bonus = natives.MONEY.NETWORK_EARN_FIRST_TIME_BONUS

function natives.MONEY.NETWORK_EARN_GOON(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_GOON' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0xCDA1C62BE2777802, p0, p1, p2)
end
natives.money.network_earn_goon = natives.MONEY.NETWORK_EARN_GOON

function natives.MONEY.NETWORK_EARN_BOSS(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_BOSS' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0x08B0CA7A6AB3AC32, p0, p1, p2)
end
natives.money.network_earn_boss = natives.MONEY.NETWORK_EARN_BOSS

function natives.MONEY.NETWORK_EARN_AGENCY(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_AGENCY' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x0CB1BE0633C024A8, p0, p1, p2, p3)
end
natives.money.network_earn_agency = natives.MONEY.NETWORK_EARN_AGENCY

function natives.MONEY.NETWORK_EARN_FROM_WAREHOUSE(--[[int]] amount, --[[int]] id) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_FROM_WAREHOUSE' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")
	assert(type(id) == "number", "Arg #2 (id) must be a number.")

	local result = native_call(0x3E4ADAFF1830F146, amount, id)
end
natives.money.network_earn_from_warehouse = natives.MONEY.NETWORK_EARN_FROM_WAREHOUSE

function natives.MONEY.NETWORK_EARN_FROM_CONTRABAND(--[[int]] amount, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_FROM_CONTRABAND' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xECA658CE2A4E5A72, amount, p1)
end
natives.money.network_earn_from_contraband = natives.MONEY.NETWORK_EARN_FROM_CONTRABAND

function natives.MONEY.NETWORK_EARN_FROM_DESTROYING_CONTRABAND(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_FROM_DESTROYING_CONTRABAND' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x84C0116D012E8FC2, p0)
end
natives.money.network_earn_from_destroying_contraband = natives.MONEY.NETWORK_EARN_FROM_DESTROYING_CONTRABAND

function natives.MONEY.NETWORK_EARN_FROM_SMUGGLER_WORK(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3, --[[Any]] p4) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_FROM_SMUGGLER_WORK' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")

	local result = native_call(0x6B7E4FB50D5F3D65, p0, p1, p2, p3, p4)
end
natives.money.network_earn_from_smuggler_work = natives.MONEY.NETWORK_EARN_FROM_SMUGGLER_WORK

function natives.MONEY.NETWORK_EARN_FROM_HANGAR_TRADE(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_FROM_HANGAR_TRADE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x31BA138F6304FB9F, p0, p1)
end
natives.money.network_earn_from_hangar_trade = natives.MONEY.NETWORK_EARN_FROM_HANGAR_TRADE

function natives.MONEY.NETWORK_EARN_PURCHASE_CLUB_HOUSE(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_PURCHASE_CLUB_HOUSE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x55A1E095DB052FA5, p0, p1)
end
natives.money.network_earn_purchase_club_house = natives.MONEY.NETWORK_EARN_PURCHASE_CLUB_HOUSE

function natives.MONEY.NETWORK_EARN_FROM_BUSINESS_PRODUCT(--[[int]] amount, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_FROM_BUSINESS_PRODUCT' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x8586789730B10CAF, amount, p1, p2, p3)
end
natives.money.network_earn_from_business_product = natives.MONEY.NETWORK_EARN_FROM_BUSINESS_PRODUCT

function natives.MONEY.NETWORK_EARN_FROM_VEHICLE_EXPORT(--[[int]] amount, --[[Any]] p1, --[[Any]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_FROM_VEHICLE_EXPORT' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0xEDEAD9A91EC768B3, amount, p1, p2)
end
natives.money.network_earn_from_vehicle_export = natives.MONEY.NETWORK_EARN_FROM_VEHICLE_EXPORT

function natives.MONEY.NETWORK_EARN_SMUGGLER_AGENCY(--[[int]] amount, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_SMUGGLER_AGENCY' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0xDEE612F2D71B0308, amount, p1, p2, p3)
end
natives.money.network_earn_smuggler_agency = natives.MONEY.NETWORK_EARN_SMUGGLER_AGENCY

function natives.MONEY.NETWORK_EARN_BOUNTY_HUNTER_REWARD(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_BOUNTY_HUNTER_REWARD' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xF6B170F9A02E9E87, p0)
end
natives.money.network_earn_bounty_hunter_reward = natives.MONEY.NETWORK_EARN_BOUNTY_HUNTER_REWARD

function natives.MONEY.NETWORK_EARN_FROM_BUSINESS_BATTLE(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_FROM_BUSINESS_BATTLE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x42FCE14F50F27291, p0)
end
natives.money.network_earn_from_business_battle = natives.MONEY.NETWORK_EARN_FROM_BUSINESS_BATTLE

function natives.MONEY.NETWORK_EARN_FROM_CLUB_MANAGEMENT_PARTICIPATION(--[[Any]] p0, --[[int]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_FROM_CLUB_MANAGEMENT_PARTICIPATION' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xA75EAC69F59E96E7, p0, p1)
end
natives.money.network_earn_from_club_management_participation = natives.MONEY.NETWORK_EARN_FROM_CLUB_MANAGEMENT_PARTICIPATION

function natives.MONEY.NETWORK_EARN_FROM_FMBB_PHONECALL_MISSION(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_FROM_FMBB_PHONECALL_MISSION' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xC5156361F26E2212, p0)
end
natives.money.network_earn_from_fmbb_phonecall_mission = natives.MONEY.NETWORK_EARN_FROM_FMBB_PHONECALL_MISSION

function natives.MONEY.NETWORK_EARN_FROM_BUSINESS_HUB_SELL(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_FROM_BUSINESS_HUB_SELL' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0x0B39CF0D53F1C883, p0, p1, p2)
end
natives.money.network_earn_from_business_hub_sell = natives.MONEY.NETWORK_EARN_FROM_BUSINESS_HUB_SELL

function natives.MONEY.NETWORK_EARN_FROM_FMBB_BOSS_WORK(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_FROM_FMBB_BOSS_WORK' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x1FDA0AA679C9919B, p0)
end
natives.money.network_earn_from_fmbb_boss_work = natives.MONEY.NETWORK_EARN_FROM_FMBB_BOSS_WORK

function natives.MONEY.NETWORK_EARN_FMBB_WAGE_BONUS(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_FMBB_WAGE_BONUS' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xFFFBA1B1F7C0B6F4, p0)
end
natives.money.network_earn_fmbb_wage_bonus = natives.MONEY.NETWORK_EARN_FMBB_WAGE_BONUS

function natives.MONEY.NETWORK_CAN_SPEND_MONEY(--[[Any]] p0, --[[BOOL]] p1, --[[BOOL]] p2, --[[BOOL]] p3, --[[Any]] p4, --[[Any]] p5) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_CAN_SPEND_MONEY' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")
	assert(type(p3) == "boolean", "Arg #4 (p3) must be a boolean.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")

	local result = native_call(0xAB3CAA6B422164DA, p0, p1, p2, p3, p4, p5)
	return result:__tointeger() ~= 0
end
natives.money.network_can_spend_money = natives.MONEY.NETWORK_CAN_SPEND_MONEY

function natives.MONEY.NETWORK_CAN_SPEND_MONEY2(--[[Any]] p0, --[[BOOL]] p1, --[[BOOL]] p2, --[[BOOL]] p3, --[[Any*]] p4, --[[Any]] p5, --[[Any]] p6) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_CAN_SPEND_MONEY2' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")
	assert(type(p3) == "boolean", "Arg #4 (p3) must be a boolean.")
	assert(type(p4) == "userdata", "Arg #5 (p4) must be a userdata.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")
	assert(type(p6) == "number", "Arg #7 (p6) must be a number.")

	local result = native_call(0x7303E27CC6532080, p0, p1, p2, p3, p4, p5, p6)
	return result:__tointeger() ~= 0
end
natives.money.network_can_spend_money2 = natives.MONEY.NETWORK_CAN_SPEND_MONEY2

function natives.MONEY.NETWORK_BUY_ITEM(--[[int]] amount, --[[Hash]] item, --[[Any]] p2, --[[Any]] p3, --[[BOOL]] p4, --[[const char*]] item_name, --[[Any]] p6, --[[Any]] p7, --[[Any]] p8, --[[BOOL]] p9) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_BUY_ITEM' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")
	assert(type(item) == "number", "Arg #2 (item) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "boolean", "Arg #5 (p4) must be a boolean.")
	assert(type(item_name) == "string", "Arg #6 (item_name) must be a string.")
	assert(type(p6) == "number", "Arg #7 (p6) must be a number.")
	assert(type(p7) == "number", "Arg #8 (p7) must be a number.")
	assert(type(p8) == "number", "Arg #9 (p8) must be a number.")
	assert(type(p9) == "boolean", "Arg #10 (p9) must be a boolean.")

	local result = native_call(0xF0077C797F66A355, amount, item, p2, p3, p4, item_name, p6, p7, p8, p9)
end
natives.money.network_buy_item = natives.MONEY.NETWORK_BUY_ITEM

function natives.MONEY.NETWORK_SPENT_TAXI(--[[int]] amount, --[[BOOL]] p1, --[[BOOL]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPENT_TAXI' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x17C3A7D31EAE39F9, amount, p1, p2, p3)
end
natives.money.network_spent_taxi = natives.MONEY.NETWORK_SPENT_TAXI

function natives.MONEY.NETWORK_PAY_EMPLOYEE_WAGE(--[[Any]] p0, --[[BOOL]] p1, --[[BOOL]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_PAY_EMPLOYEE_WAGE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")

	local result = native_call(0x5FD5ED82CBBE9989, p0, p1, p2)
end
natives.money.network_pay_employee_wage = natives.MONEY.NETWORK_PAY_EMPLOYEE_WAGE

function natives.MONEY.NETWORK_PAY_MATCH_ENTRY_FEE(--[[int]] amount, --[[const char*]] matchId, --[[BOOL]] p2, --[[BOOL]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_PAY_MATCH_ENTRY_FEE' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")
	assert(type(matchId) == "string", "Arg #2 (matchId) must be a string.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")
	assert(type(p3) == "boolean", "Arg #4 (p3) must be a boolean.")

	local result = native_call(0x9346E14F2AF74D46, amount, matchId, p2, p3)
end
natives.money.network_pay_match_entry_fee = natives.MONEY.NETWORK_PAY_MATCH_ENTRY_FEE

function natives.MONEY.NETWORK_SPENT_BETTING(--[[int]] amount, --[[int]] p1, --[[const char*]] matchId, --[[BOOL]] p3, --[[BOOL]] p4) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPENT_BETTING' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(matchId) == "string", "Arg #3 (matchId) must be a string.")
	assert(type(p3) == "boolean", "Arg #4 (p3) must be a boolean.")
	assert(type(p4) == "boolean", "Arg #5 (p4) must be a boolean.")

	local result = native_call(0x1C436FD11FFA692F, amount, p1, matchId, p3, p4)
end
natives.money.network_spent_betting = natives.MONEY.NETWORK_SPENT_BETTING

function natives.MONEY.NETWORK_SPENT_WAGER(--[[Any]] p0, --[[Any]] p1, --[[int]] amount) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPENT_WAGER' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(amount) == "number", "Arg #3 (amount) must be a number.")

	local result = native_call(0xD99DB210089617FE, p0, p1, amount)
end
natives.money.network_spent_wager = natives.MONEY.NETWORK_SPENT_WAGER

function natives.MONEY.NETWORK_SPENT_IN_STRIPCLUB(--[[Any]] p0, --[[BOOL]] p1, --[[Any]] p2, --[[BOOL]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPENT_IN_STRIPCLUB' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "boolean", "Arg #4 (p3) must be a boolean.")

	local result = native_call(0xEE99784E4467689C, p0, p1, p2, p3)
end
natives.money.network_spent_in_stripclub = natives.MONEY.NETWORK_SPENT_IN_STRIPCLUB

function natives.MONEY.NETWORK_BUY_HEALTHCARE(--[[int]] cost, --[[BOOL]] p1, --[[BOOL]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_BUY_HEALTHCARE' due to disabled trusted mode")

	assert(type(cost) == "number", "Arg #1 (cost) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")

	local result = native_call(0xD9B067E55253E3DD, cost, p1, p2)
end
natives.money.network_buy_healthcare = natives.MONEY.NETWORK_BUY_HEALTHCARE

--[[
p1 = 0 (always)
p2 = 1 (always)
]]
function natives.MONEY.NETWORK_BUY_AIRSTRIKE(--[[int]] cost, --[[BOOL]] p1, --[[BOOL]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_BUY_AIRSTRIKE' due to disabled trusted mode")

	assert(type(cost) == "number", "Arg #1 (cost) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x763B4BD305338F19, cost, p1, p2, p3)
end
natives.money.network_buy_airstrike = natives.MONEY.NETWORK_BUY_AIRSTRIKE

function natives.MONEY.NETWORK_BUY_BACKUP_GANG(--[[int]] p0, --[[int]] p1, --[[BOOL]] p2, --[[BOOL]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_BUY_BACKUP_GANG' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")
	assert(type(p3) == "boolean", "Arg #4 (p3) must be a boolean.")

	local result = native_call(0xA3EDDAA42411D3B9, p0, p1, p2, p3)
end
natives.money.network_buy_backup_gang = natives.MONEY.NETWORK_BUY_BACKUP_GANG

--[[
p1 = 0 (always)
p2 = 1 (always)
]]
function natives.MONEY.NETWORK_BUY_HELI_STRIKE(--[[int]] cost, --[[BOOL]] p1, --[[BOOL]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_BUY_HELI_STRIKE' due to disabled trusted mode")

	assert(type(cost) == "number", "Arg #1 (cost) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x81AA4610E3FD3A69, cost, p1, p2, p3)
end
natives.money.network_buy_heli_strike = natives.MONEY.NETWORK_BUY_HELI_STRIKE

function natives.MONEY.NETWORK_SPENT_AMMO_DROP(--[[Any]] p0, --[[BOOL]] p1, --[[BOOL]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPENT_AMMO_DROP' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0xB162DC95C0A3317B, p0, p1, p2, p3)
end
natives.money.network_spent_ammo_drop = natives.MONEY.NETWORK_SPENT_AMMO_DROP

--[[
p1 is just an assumption. p2 was false and p3 was true.
]]
function natives.MONEY.NETWORK_BUY_BOUNTY(--[[int]] amount, --[[Player]] victim, --[[BOOL]] p2, --[[BOOL]] p3, --[[Any]] p4) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_BUY_BOUNTY' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")
	assert(type(victim) == "number", "Arg #2 (victim) must be a number.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")
	assert(type(p3) == "boolean", "Arg #4 (p3) must be a boolean.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")

	local result = native_call(0x7B718E197453F2D9, amount, victim, p2, p3, p4)
end
natives.money.network_buy_bounty = natives.MONEY.NETWORK_BUY_BOUNTY

function natives.MONEY.NETWORK_BUY_PROPERTY(--[[int]] cost, --[[Hash]] propertyName, --[[BOOL]] p2, --[[BOOL]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_BUY_PROPERTY' due to disabled trusted mode")

	assert(type(cost) == "number", "Arg #1 (cost) must be a number.")
	assert(type(propertyName) == "number", "Arg #2 (propertyName) must be a number.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")
	assert(type(p3) == "boolean", "Arg #4 (p3) must be a boolean.")

	local result = native_call(0x650A08A280870AF6, cost, propertyName, p2, p3)
end
natives.money.network_buy_property = natives.MONEY.NETWORK_BUY_PROPERTY

function natives.MONEY.NETWORK_BUY_SMOKES(--[[int]] p0, --[[BOOL]] p1, --[[BOOL]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_BUY_SMOKES' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")

	local result = native_call(0x75AF80E61248EEBD, p0, p1, p2)
end
natives.money.network_buy_smokes = natives.MONEY.NETWORK_BUY_SMOKES

function natives.MONEY.NETWORK_SPENT_HELI_PICKUP(--[[Any]] p0, --[[BOOL]] p1, --[[BOOL]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPENT_HELI_PICKUP' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x7BF1D73DB2ECA492, p0, p1, p2, p3)
end
natives.money.network_spent_heli_pickup = natives.MONEY.NETWORK_SPENT_HELI_PICKUP

function natives.MONEY.NETWORK_SPENT_BOAT_PICKUP(--[[Any]] p0, --[[BOOL]] p1, --[[BOOL]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPENT_BOAT_PICKUP' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x524EE43A37232C00, p0, p1, p2, p3)
end
natives.money.network_spent_boat_pickup = natives.MONEY.NETWORK_SPENT_BOAT_PICKUP

function natives.MONEY.NETWORK_SPENT_BULL_SHARK(--[[Any]] p0, --[[BOOL]] p1, --[[BOOL]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPENT_BULL_SHARK' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0xA6DD8458CE24012C, p0, p1, p2, p3)
end
natives.money.network_spent_bull_shark = natives.MONEY.NETWORK_SPENT_BULL_SHARK

function natives.MONEY.NETWORK_SPENT_CASH_DROP(--[[int]] amount, --[[BOOL]] p1, --[[BOOL]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPENT_CASH_DROP' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")

	local result = native_call(0x289016EC778D60E0, amount, p1, p2)
end
natives.money.network_spent_cash_drop = natives.MONEY.NETWORK_SPENT_CASH_DROP

--[[
Only used once in a script (am_contact_requests)
p1 = 0
p2 = 1
]]
function natives.MONEY.NETWORK_SPENT_HIRE_MUGGER(--[[Any]] p0, --[[BOOL]] p1, --[[BOOL]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPENT_HIRE_MUGGER' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0xE404BFB981665BF0, p0, p1, p2, p3)
end
natives.money.network_spent_hire_mugger = natives.MONEY.NETWORK_SPENT_HIRE_MUGGER

function natives.MONEY.NETWORK_SPENT_ROBBED_BY_MUGGER(--[[int]] amount, --[[BOOL]] p1, --[[BOOL]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPENT_ROBBED_BY_MUGGER' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x995A65F15F581359, amount, p1, p2, p3)
end
natives.money.network_spent_robbed_by_mugger = natives.MONEY.NETWORK_SPENT_ROBBED_BY_MUGGER

function natives.MONEY.NETWORK_SPENT_HIRE_MERCENARY(--[[Any]] p0, --[[BOOL]] p1, --[[BOOL]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPENT_HIRE_MERCENARY' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0xE7B80E2BF9D80BD6, p0, p1, p2, p3)
end
natives.money.network_spent_hire_mercenary = natives.MONEY.NETWORK_SPENT_HIRE_MERCENARY

function natives.MONEY.NETWORK_SPENT_BUY_WANTEDLEVEL(--[[Any]] p0, --[[Any*]] p1, --[[BOOL]] p2, --[[BOOL]] p3, --[[Any]] p4) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPENT_BUY_WANTEDLEVEL' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "userdata", "Arg #2 (p1) must be a userdata.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")
	assert(type(p3) == "boolean", "Arg #4 (p3) must be a boolean.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")

	local result = native_call(0xE1B13771A843C4F6, p0, p1, p2, p3, p4)
end
natives.money.network_spent_buy_wantedlevel = natives.MONEY.NETWORK_SPENT_BUY_WANTEDLEVEL

function natives.MONEY.NETWORK_SPENT_BUY_OFFTHERADAR(--[[Any]] p0, --[[BOOL]] p1, --[[BOOL]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPENT_BUY_OFFTHERADAR' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0xA628A745E2275C5D, p0, p1, p2, p3)
end
natives.money.network_spent_buy_offtheradar = natives.MONEY.NETWORK_SPENT_BUY_OFFTHERADAR

function natives.MONEY.NETWORK_SPENT_BUY_REVEAL_PLAYERS(--[[Any]] p0, --[[BOOL]] p1, --[[BOOL]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPENT_BUY_REVEAL_PLAYERS' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x6E176F1B18BC0637, p0, p1, p2, p3)
end
natives.money.network_spent_buy_reveal_players = natives.MONEY.NETWORK_SPENT_BUY_REVEAL_PLAYERS

function natives.MONEY.NETWORK_SPENT_CARWASH(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[BOOL]] p3, --[[BOOL]] p4) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPENT_CARWASH' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "boolean", "Arg #4 (p3) must be a boolean.")
	assert(type(p4) == "boolean", "Arg #5 (p4) must be a boolean.")

	local result = native_call(0xEC03C719DB2F4306, p0, p1, p2, p3, p4)
end
natives.money.network_spent_carwash = natives.MONEY.NETWORK_SPENT_CARWASH

function natives.MONEY.NETWORK_SPENT_CINEMA(--[[Any]] p0, --[[Any]] p1, --[[BOOL]] p2, --[[BOOL]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPENT_CINEMA' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")
	assert(type(p3) == "boolean", "Arg #4 (p3) must be a boolean.")

	local result = native_call(0x6B38ECB05A63A685, p0, p1, p2, p3)
end
natives.money.network_spent_cinema = natives.MONEY.NETWORK_SPENT_CINEMA

function natives.MONEY.NETWORK_SPENT_TELESCOPE(--[[Any]] p0, --[[BOOL]] p1, --[[BOOL]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPENT_TELESCOPE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")

	local result = native_call(0x7FE61782AD94CC09, p0, p1, p2)
end
natives.money.network_spent_telescope = natives.MONEY.NETWORK_SPENT_TELESCOPE

function natives.MONEY.NETWORK_SPENT_HOLDUPS(--[[Any]] p0, --[[BOOL]] p1, --[[BOOL]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPENT_HOLDUPS' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")

	local result = native_call(0xD9B86B9872039763, p0, p1, p2)
end
natives.money.network_spent_holdups = natives.MONEY.NETWORK_SPENT_HOLDUPS

function natives.MONEY.NETWORK_SPENT_BUY_PASSIVE_MODE(--[[Any]] p0, --[[BOOL]] p1, --[[BOOL]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPENT_BUY_PASSIVE_MODE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x6D3A430D1A809179, p0, p1, p2, p3)
end
natives.money.network_spent_buy_passive_mode = natives.MONEY.NETWORK_SPENT_BUY_PASSIVE_MODE

function natives.MONEY.NETWORK_SPENT_BANK_INTEREST(--[[int]] p0, --[[BOOL]] p1, --[[BOOL]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPENT_BANK_INTEREST' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")

	local result = native_call(0xCA230C9682556CF1, p0, p1, p2)
end
natives.money.network_spent_bank_interest = natives.MONEY.NETWORK_SPENT_BANK_INTEREST

function natives.MONEY.NETWORK_SPENT_PROSTITUTES(--[[Any]] p0, --[[BOOL]] p1, --[[BOOL]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPENT_PROSTITUTES' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")

	local result = native_call(0xB21B89501CFAC79E, p0, p1, p2)
end
natives.money.network_spent_prostitutes = natives.MONEY.NETWORK_SPENT_PROSTITUTES

function natives.MONEY.NETWORK_SPENT_ARREST_BAIL(--[[Any]] p0, --[[BOOL]] p1, --[[BOOL]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPENT_ARREST_BAIL' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")

	local result = native_call(0x812F5488B1B2A299, p0, p1, p2)
end
natives.money.network_spent_arrest_bail = natives.MONEY.NETWORK_SPENT_ARREST_BAIL

--[[
According to how I understood this in the freemode script alone,
The first parameter is determined by a function named, func_5749 within the freemode script which has a list of all the vehicles and a set price to return which some vehicles deals with globals as well. So the first parameter is basically the set in stone insurance cost it's gonna charge you for that specific vehicle model.

The second parameter whoever put it was right, they call GET_ENTITY_MODEL with the vehicle as the paremeter.

The third parameter is the network handle as they call their little struct<13> func or atleast how the script decompiled it to look which in lamens terms just returns the network handle of the previous owner based on DECOR_GET_INT(vehicle, "Previous_Owner").

The fourth parameter is a bool that returns true/false depending on if your bank balance is greater then 0.

The fifth and last parameter is a bool that returns true/false depending on if you have the money for the car based on the cost returned by func_5749. In the freemode script eg,
bool hasTheMoney = MONEY::_GET_BANK_BALANCE() < carCost.
]]
function natives.MONEY.NETWORK_SPENT_PAY_VEHICLE_INSURANCE_PREMIUM(--[[int]] amount, --[[Hash]] vehicleModel, --[[Any*]] gamerHandle, --[[BOOL]] notBankrupt, --[[BOOL]] hasTheMoney) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPENT_PAY_VEHICLE_INSURANCE_PREMIUM' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")
	assert(type(vehicleModel) == "number", "Arg #2 (vehicleModel) must be a number.")
	assert(type(gamerHandle) == "userdata", "Arg #3 (gamerHandle) must be a userdata.")
	assert(type(notBankrupt) == "boolean", "Arg #4 (notBankrupt) must be a boolean.")
	assert(type(hasTheMoney) == "boolean", "Arg #5 (hasTheMoney) must be a boolean.")

	local result = native_call(0x9FF28D88C766E3E8, amount, vehicleModel, gamerHandle, notBankrupt, hasTheMoney)
end
natives.money.network_spent_pay_vehicle_insurance_premium = natives.MONEY.NETWORK_SPENT_PAY_VEHICLE_INSURANCE_PREMIUM

function natives.MONEY.NETWORK_SPENT_CALL_PLAYER(--[[Any]] p0, --[[Any*]] p1, --[[BOOL]] p2, --[[BOOL]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPENT_CALL_PLAYER' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "userdata", "Arg #2 (p1) must be a userdata.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")
	assert(type(p3) == "boolean", "Arg #4 (p3) must be a boolean.")

	local result = native_call(0xACDE7185B374177C, p0, p1, p2, p3)
end
natives.money.network_spent_call_player = natives.MONEY.NETWORK_SPENT_CALL_PLAYER

function natives.MONEY.NETWORK_SPENT_BOUNTY(--[[Any]] p0, --[[BOOL]] p1, --[[BOOL]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPENT_BOUNTY' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")

	local result = native_call(0x29B260B84947DFCC, p0, p1, p2)
end
natives.money.network_spent_bounty = natives.MONEY.NETWORK_SPENT_BOUNTY

function natives.MONEY.NETWORK_SPENT_FROM_ROCKSTAR(--[[int]] p0, --[[BOOL]] p1, --[[BOOL]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPENT_FROM_ROCKSTAR' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")

	local result = native_call(0x6A445B64ED7ABEB5, p0, p1, p2)
end
natives.money.network_spent_from_rockstar = natives.MONEY.NETWORK_SPENT_FROM_ROCKSTAR

--[[
Hardcoded to return 0.
]]
function natives.MONEY.NETWORK_SPEND_EARNED_FROM_BANK_AND_WALLETS() -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPEND_EARNED_FROM_BANK_AND_WALLETS' due to disabled trusted mode")

	local result = native_call(0x9B5016A6433A68C5)
	return result:__tointeger()
end
natives.money.network_spend_earned_from_bank_and_wallets = natives.MONEY.NETWORK_SPEND_EARNED_FROM_BANK_AND_WALLETS

--[[
This isn't a hash collision.
]]
function natives.MONEY.PROCESS_CASH_GIFT(--[[int*]] p0, --[[int*]] p1, --[[const char*]] p2) -- Returns const char*
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.PROCESS_CASH_GIFT' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")
	assert(type(p1) == "userdata", "Arg #2 (p1) must be a userdata.")
	assert(type(p2) == "string", "Arg #3 (p2) must be a string.")

	local result = native_call(0x20194D48EAEC9A41, p0, p1, p2)
	return result:__tostring(true)
end
natives.money.process_cash_gift = natives.MONEY.PROCESS_CASH_GIFT

function natives.MONEY.NETWORK_SPENT_MOVE_SUBMARINE(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPENT_MOVE_SUBMARINE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0xCD4D66B43B1DD28D, p0, p1, p2)
end
natives.money.network_spent_move_submarine = natives.MONEY.NETWORK_SPENT_MOVE_SUBMARINE

function natives.MONEY.NETWORK_SPENT_PLAYER_HEALTHCARE(--[[int]] p0, --[[int]] p1, --[[BOOL]] p2, --[[BOOL]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPENT_PLAYER_HEALTHCARE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")
	assert(type(p3) == "boolean", "Arg #4 (p3) must be a boolean.")

	local result = native_call(0x7C99101F7FCE2EE5, p0, p1, p2, p3)
end
natives.money.network_spent_player_healthcare = natives.MONEY.NETWORK_SPENT_PLAYER_HEALTHCARE

function natives.MONEY.NETWORK_SPENT_NO_COPS(--[[Any]] p0, --[[BOOL]] p1, --[[BOOL]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPENT_NO_COPS' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0xD5BB406F4E04019F, p0, p1, p2, p3)
end
natives.money.network_spent_no_cops = natives.MONEY.NETWORK_SPENT_NO_COPS

function natives.MONEY.NETWORK_SPENT_CARGO_SOURCING(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3, --[[Any]] p4, --[[Any]] p5) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPENT_CARGO_SOURCING' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")

	local result = native_call(0x948705F6F9C50824, p0, p1, p2, p3, p4, p5)
end
natives.money.network_spent_cargo_sourcing = natives.MONEY.NETWORK_SPENT_CARGO_SOURCING

function natives.MONEY.NETWORK_SPENT_REQUEST_JOB(--[[Any]] p0, --[[BOOL]] p1, --[[BOOL]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPENT_REQUEST_JOB' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x8204DA7934DF3155, p0, p1, p2, p3)
end
natives.money.network_spent_request_job = natives.MONEY.NETWORK_SPENT_REQUEST_JOB

function natives.MONEY.NETWORK_SPENT_REQUEST_HEIST(--[[Any]] p0, --[[BOOL]] p1, --[[BOOL]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPENT_REQUEST_HEIST' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x9D26502BB97BFE62, p0, p1, p2, p3)
end
natives.money.network_spent_request_heist = natives.MONEY.NETWORK_SPENT_REQUEST_HEIST

--[[
The first parameter is the amount spent which is store in a global when this native is called. The global returns 10. Which is the price for both rides.

The last 3 parameters are, 
2,0,1 in the am_ferriswheel.c
1,0,1 in the am_rollercoaster.c

]]
function natives.MONEY.NETWORK_BUY_FAIRGROUND_RIDE(--[[int]] amount, --[[Any]] p1, --[[BOOL]] p2, --[[BOOL]] p3, --[[Any]] p4) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_BUY_FAIRGROUND_RIDE' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")
	assert(type(p3) == "boolean", "Arg #4 (p3) must be a boolean.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")

	local result = native_call(0x8A7B3952DD64D2B5, amount, p1, p2, p3, p4)
end
natives.money.network_buy_fairground_ride = natives.MONEY.NETWORK_BUY_FAIRGROUND_RIDE

function natives.MONEY.NETWORK_ECONOMY_HAS_FIXED_CRAZY_NUMBERS() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_ECONOMY_HAS_FIXED_CRAZY_NUMBERS' due to disabled trusted mode")

	local result = native_call(0x7C4FCCD2E4DEB394)
	return result:__tointeger() ~= 0
end
natives.money.network_economy_has_fixed_crazy_numbers = natives.MONEY.NETWORK_ECONOMY_HAS_FIXED_CRAZY_NUMBERS

function natives.MONEY.NETWORK_SPENT_JOB_SKIP(--[[int]] amount, --[[const char*]] matchId, --[[BOOL]] p2, --[[BOOL]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPENT_JOB_SKIP' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")
	assert(type(matchId) == "string", "Arg #2 (matchId) must be a string.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")
	assert(type(p3) == "boolean", "Arg #4 (p3) must be a boolean.")

	local result = native_call(0x28F174A67B8D0C2F, amount, matchId, p2, p3)
end
natives.money.network_spent_job_skip = natives.MONEY.NETWORK_SPENT_JOB_SKIP

function natives.MONEY.NETWORK_SPENT_BOSS_GOON(--[[int]] amount, --[[BOOL]] p1, --[[BOOL]] p2) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPENT_BOSS_GOON' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")

	local result = native_call(0xFFBE02CD385356BD, amount, p1, p2)
	return result:__tointeger() ~= 0
end
natives.money.network_spent_boss_goon = natives.MONEY.NETWORK_SPENT_BOSS_GOON

function natives.MONEY.NETWORK_SPEND_GOON(--[[int]] p0, --[[int]] p1, --[[int]] amount) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPEND_GOON' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(amount) == "number", "Arg #3 (amount) must be a number.")

	local result = native_call(0x08A1B82B91900682, p0, p1, amount)
end
natives.money.network_spend_goon = natives.MONEY.NETWORK_SPEND_GOON

function natives.MONEY.NETWORK_SPEND_BOSS(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPEND_BOSS' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0xDBC966A01C02BCA7, p0, p1, p2)
end
natives.money.network_spend_boss = natives.MONEY.NETWORK_SPEND_BOSS

function natives.MONEY.NETWORK_SPENT_MOVE_YACHT(--[[int]] amount, --[[BOOL]] p1, --[[BOOL]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPENT_MOVE_YACHT' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")

	local result = native_call(0xE7DF4E0545DFB56E, amount, p1, p2)
end
natives.money.network_spent_move_yacht = natives.MONEY.NETWORK_SPENT_MOVE_YACHT

function natives.MONEY.NETWORK_SPENT_RENAME_ORGANIZATION(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPENT_RENAME_ORGANIZATION' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0xFC4EE00A7B3BFB76, p0, p1, p2)
end
natives.money.network_spent_rename_organization = natives.MONEY.NETWORK_SPENT_RENAME_ORGANIZATION

function natives.MONEY.NETWORK_BUY_CONTRABAND_MISSION(--[[int]] p0, --[[int]] p1, --[[Hash]] p2, --[[BOOL]] p3, --[[BOOL]] p4) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_BUY_CONTRABAND_MISSION' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "boolean", "Arg #4 (p3) must be a boolean.")
	assert(type(p4) == "boolean", "Arg #5 (p4) must be a boolean.")

	local result = native_call(0x30FD873ECE50E9F6, p0, p1, p2, p3, p4)
end
natives.money.network_buy_contraband_mission = natives.MONEY.NETWORK_BUY_CONTRABAND_MISSION

function natives.MONEY.NETWORK_SPENT_PA_SERVICE_HELI(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPENT_PA_SERVICE_HELI' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x112209CE0290C03A, p0, p1, p2, p3)
end
natives.money.network_spent_pa_service_heli = natives.MONEY.NETWORK_SPENT_PA_SERVICE_HELI

function natives.MONEY.NETWORK_SPENT_PA_SERVICE_VEHICLE(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPENT_PA_SERVICE_VEHICLE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0xED5FD7AF10F5E262, p0, p1, p2, p3)
end
natives.money.network_spent_pa_service_vehicle = natives.MONEY.NETWORK_SPENT_PA_SERVICE_VEHICLE

function natives.MONEY.NETWORK_SPENT_PA_SERVICE_SNACK(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPENT_PA_SERVICE_SNACK' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x0D30EB83668E63C5, p0, p1, p2, p3)
end
natives.money.network_spent_pa_service_snack = natives.MONEY.NETWORK_SPENT_PA_SERVICE_SNACK

function natives.MONEY.NETWORK_SPENT_PA_SERVICE_DANCER(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPENT_PA_SERVICE_DANCER' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0xB49ECA122467D05F, p0, p1, p2, p3)
end
natives.money.network_spent_pa_service_dancer = natives.MONEY.NETWORK_SPENT_PA_SERVICE_DANCER

function natives.MONEY.NETWORK_SPENT_PA_SERVICE_IMPOUND(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPENT_PA_SERVICE_IMPOUND' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0xE23ADC6FCB1F29AE, p0, p1, p2)
end
natives.money.network_spent_pa_service_impound = natives.MONEY.NETWORK_SPENT_PA_SERVICE_IMPOUND

function natives.MONEY.NETWORK_SPENT_PA_HELI_PICKUP(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPENT_PA_HELI_PICKUP' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x0FE8E1FCD2B86B33, p0, p1, p2, p3)
end
natives.money.network_spent_pa_heli_pickup = natives.MONEY.NETWORK_SPENT_PA_HELI_PICKUP

function natives.MONEY.NETWORK_SPENT_PURCHASE_OFFICE_PROPERTY(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPENT_PURCHASE_OFFICE_PROPERTY' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x69EF772B192614C1, p0, p1, p2, p3)
end
natives.money.network_spent_purchase_office_property = natives.MONEY.NETWORK_SPENT_PURCHASE_OFFICE_PROPERTY

function natives.MONEY.NETWORK_SPENT_UPGRADE_OFFICE_PROPERTY(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPENT_UPGRADE_OFFICE_PROPERTY' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x8E243837643D9583, p0, p1, p2, p3)
end
natives.money.network_spent_upgrade_office_property = natives.MONEY.NETWORK_SPENT_UPGRADE_OFFICE_PROPERTY

function natives.MONEY.NETWORK_SPENT_PURCHASE_WAREHOUSE_PROPERTY(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPENT_PURCHASE_WAREHOUSE_PROPERTY' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0xBD0EFB25CCA8F97A, p0, p1, p2, p3)
end
natives.money.network_spent_purchase_warehouse_property = natives.MONEY.NETWORK_SPENT_PURCHASE_WAREHOUSE_PROPERTY

function natives.MONEY.NETWORK_SPENT_UPGRADE_WAREHOUSE_PROPERTY(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPENT_UPGRADE_WAREHOUSE_PROPERTY' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0xA95F667A755725DA, p0, p1, p2, p3)
end
natives.money.network_spent_upgrade_warehouse_property = natives.MONEY.NETWORK_SPENT_UPGRADE_WAREHOUSE_PROPERTY

function natives.MONEY.NETWORK_SPENT_PURCHASE_IMPEXP_WAREHOUSE_PROPERTY(--[[int]] amount, --[[Any*]] data, --[[BOOL]] p2, --[[BOOL]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPENT_PURCHASE_IMPEXP_WAREHOUSE_PROPERTY' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")
	assert(type(data) == "userdata", "Arg #2 (data) must be a userdata.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")
	assert(type(p3) == "boolean", "Arg #4 (p3) must be a boolean.")

	local result = native_call(0x33981D6804E62F49, amount, data, p2, p3)
end
natives.money.network_spent_purchase_impexp_warehouse_property = natives.MONEY.NETWORK_SPENT_PURCHASE_IMPEXP_WAREHOUSE_PROPERTY

function natives.MONEY.NETWORK_SPENT_UPGRADE_IMPEXP_WAREHOUSE_PROPERTY(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPENT_UPGRADE_IMPEXP_WAREHOUSE_PROPERTY' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x4128464231E3CA0B, p0, p1, p2, p3)
end
natives.money.network_spent_upgrade_impexp_warehouse_property = natives.MONEY.NETWORK_SPENT_UPGRADE_IMPEXP_WAREHOUSE_PROPERTY

function natives.MONEY.NETWORK_SPENT_TRADE_IMPEXP_WAREHOUSE_PROPERTY(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPENT_TRADE_IMPEXP_WAREHOUSE_PROPERTY' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x2FAB6614CE22E196, p0, p1, p2, p3)
end
natives.money.network_spent_trade_impexp_warehouse_property = natives.MONEY.NETWORK_SPENT_TRADE_IMPEXP_WAREHOUSE_PROPERTY

function natives.MONEY.NETWORK_SPENT_ORDER_WAREHOUSE_VEHICLE(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPENT_ORDER_WAREHOUSE_VEHICLE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x05F04155A226FBBF, p0, p1, p2, p3)
end
natives.money.network_spent_order_warehouse_vehicle = natives.MONEY.NETWORK_SPENT_ORDER_WAREHOUSE_VEHICLE

function natives.MONEY.NETWORK_SPENT_ORDER_BODYGUARD_VEHICLE(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPENT_ORDER_BODYGUARD_VEHICLE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0xE8B0B270B6E7C76E, p0, p1, p2, p3)
end
natives.money.network_spent_order_bodyguard_vehicle = natives.MONEY.NETWORK_SPENT_ORDER_BODYGUARD_VEHICLE

function natives.MONEY.NETWORK_SPENT_JUKEBOX(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPENT_JUKEBOX' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x5BCDE0F640C773D2, p0, p1, p2, p3)
end
natives.money.network_spent_jukebox = natives.MONEY.NETWORK_SPENT_JUKEBOX

function natives.MONEY.NETWORK_SPENT_PURCHASE_CLUB_HOUSE(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPENT_PURCHASE_CLUB_HOUSE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x998E18CEB44487FC, p0, p1, p2, p3)
end
natives.money.network_spent_purchase_club_house = natives.MONEY.NETWORK_SPENT_PURCHASE_CLUB_HOUSE

function natives.MONEY.NETWORK_SPENT_UPGRADE_CLUB_HOUSE(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPENT_UPGRADE_CLUB_HOUSE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0xFA07759E6FDDD7CF, p0, p1, p2, p3)
end
natives.money.network_spent_upgrade_club_house = natives.MONEY.NETWORK_SPENT_UPGRADE_CLUB_HOUSE

function natives.MONEY.NETWORK_SPENT_PURCHASE_BUSINESS_PROPERTY(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPENT_PURCHASE_BUSINESS_PROPERTY' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x6FD97159FE3C971A, p0, p1, p2, p3)
end
natives.money.network_spent_purchase_business_property = natives.MONEY.NETWORK_SPENT_PURCHASE_BUSINESS_PROPERTY

function natives.MONEY.NETWORK_SPENT_UPGRADE_BUSINESS_PROPERTY(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPENT_UPGRADE_BUSINESS_PROPERTY' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x675D19C6067CAE08, p0, p1, p2, p3)
end
natives.money.network_spent_upgrade_business_property = natives.MONEY.NETWORK_SPENT_UPGRADE_BUSINESS_PROPERTY

function natives.MONEY.NETWORK_SPENT_TRADE_BUSINESS_PROPERTY(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPENT_TRADE_BUSINESS_PROPERTY' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0xA51B086B0B2C0F7A, p0, p1, p2, p3)
end
natives.money.network_spent_trade_business_property = natives.MONEY.NETWORK_SPENT_TRADE_BUSINESS_PROPERTY

function natives.MONEY.NETWORK_SPENT_MC_ABILITY(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3, --[[Any]] p4) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPENT_MC_ABILITY' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")

	local result = native_call(0xD7CCCBA28C4ECAF0, p0, p1, p2, p3, p4)
end
natives.money.network_spent_mc_ability = natives.MONEY.NETWORK_SPENT_MC_ABILITY

function natives.MONEY.NETWORK_SPENT_PAY_BUSINESS_SUPPLIES(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPENT_PAY_BUSINESS_SUPPLIES' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x0035BB914316F1E3, p0, p1, p2, p3)
end
natives.money.network_spent_pay_business_supplies = natives.MONEY.NETWORK_SPENT_PAY_BUSINESS_SUPPLIES

function natives.MONEY.NETWORK_SPENT_CHANGE_APPEARANCE(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPENT_CHANGE_APPEARANCE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0x5F456788B05FAEAC, p0, p1, p2)
end
natives.money.network_spent_change_appearance = natives.MONEY.NETWORK_SPENT_CHANGE_APPEARANCE

function natives.MONEY.NETWORK_SPENT_VEHICLE_EXPORT_MODS(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3, --[[Any]] p4, --[[Any]] p5, --[[Any]] p6, --[[Any]] p7, --[[Any]] p8, --[[Any]] p9) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPENT_VEHICLE_EXPORT_MODS' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")
	assert(type(p6) == "number", "Arg #7 (p6) must be a number.")
	assert(type(p7) == "number", "Arg #8 (p7) must be a number.")
	assert(type(p8) == "number", "Arg #9 (p8) must be a number.")
	assert(type(p9) == "number", "Arg #10 (p9) must be a number.")

	local result = native_call(0xA75CCF58A60A5FD1, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9)
end
natives.money.network_spent_vehicle_export_mods = natives.MONEY.NETWORK_SPENT_VEHICLE_EXPORT_MODS

function natives.MONEY.NETWORK_SPENT_PURCHASE_OFFICE_GARAGE(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPENT_PURCHASE_OFFICE_GARAGE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0xB4C2EC463672474E, p0, p1, p2, p3)
end
natives.money.network_spent_purchase_office_garage = natives.MONEY.NETWORK_SPENT_PURCHASE_OFFICE_GARAGE

function natives.MONEY.NETWORK_SPENT_UPGRADE_OFFICE_GARAGE(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPENT_UPGRADE_OFFICE_GARAGE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x2AFC2D19B50797F2, p0, p1, p2, p3)
end
natives.money.network_spent_upgrade_office_garage = natives.MONEY.NETWORK_SPENT_UPGRADE_OFFICE_GARAGE

function natives.MONEY.NETWORK_SPENT_IMPORT_EXPORT_REPAIR(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPENT_IMPORT_EXPORT_REPAIR' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0xC1952F3773BA18FE, p0, p1, p2)
end
natives.money.network_spent_import_export_repair = natives.MONEY.NETWORK_SPENT_IMPORT_EXPORT_REPAIR

function natives.MONEY.NETWORK_SPENT_PURCHASE_HANGAR(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPENT_PURCHASE_HANGAR' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0xCCB339CC970452DA, p0, p1, p2, p3)
end
natives.money.network_spent_purchase_hangar = natives.MONEY.NETWORK_SPENT_PURCHASE_HANGAR

function natives.MONEY.NETWORK_SPENT_UPGRADE_HANGAR(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPENT_UPGRADE_HANGAR' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x615EB504B0788DAF, p0, p1, p2, p3)
end
natives.money.network_spent_upgrade_hangar = natives.MONEY.NETWORK_SPENT_UPGRADE_HANGAR

function natives.MONEY.NETWORK_SPENT_HANGAR_UTILITY_CHARGES(--[[int]] amount, --[[BOOL]] p1, --[[BOOL]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPENT_HANGAR_UTILITY_CHARGES' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")

	local result = native_call(0xB18AC2ECBB15CB6A, amount, p1, p2)
end
natives.money.network_spent_hangar_utility_charges = natives.MONEY.NETWORK_SPENT_HANGAR_UTILITY_CHARGES

function natives.MONEY.NETWORK_SPENT_HANGAR_STAFF_CHARGES(--[[int]] amount, --[[BOOL]] p1, --[[BOOL]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPENT_HANGAR_STAFF_CHARGES' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")

	local result = native_call(0xB1F1346FD57685D7, amount, p1, p2)
end
natives.money.network_spent_hangar_staff_charges = natives.MONEY.NETWORK_SPENT_HANGAR_STAFF_CHARGES

function natives.MONEY.NETWORK_SPENT_BUY_TRUCK(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPENT_BUY_TRUCK' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0xAC272C0AE01B4BD8, p0, p1, p2, p3)
end
natives.money.network_spent_buy_truck = natives.MONEY.NETWORK_SPENT_BUY_TRUCK

function natives.MONEY.NETWORK_SPENT_UPGRADE_TRUCK(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPENT_UPGRADE_TRUCK' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x365E877C61D6988B, p0, p1, p2, p3)
end
natives.money.network_spent_upgrade_truck = natives.MONEY.NETWORK_SPENT_UPGRADE_TRUCK

function natives.MONEY.NETWORK_SPENT_BUY_BUNKER(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPENT_BUY_BUNKER' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x12D148D26538D0F9, p0, p1, p2, p3)
end
natives.money.network_spent_buy_bunker = natives.MONEY.NETWORK_SPENT_BUY_BUNKER

function natives.MONEY.NETWORK_SPENT_UPRADE_BUNKER(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPENT_UPRADE_BUNKER' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x0C82D21A77C22D49, p0, p1, p2, p3)
end
natives.money.network_spent_uprade_bunker = natives.MONEY.NETWORK_SPENT_UPRADE_BUNKER

function natives.MONEY.NETWORK_EARN_FROM_SELL_BUNKER(--[[int]] amount, --[[Hash]] bunkerHash) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_FROM_SELL_BUNKER' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")
	assert(type(bunkerHash) == "number", "Arg #2 (bunkerHash) must be a number.")

	local result = native_call(0x9251B6ABF2D0A5B4, amount, bunkerHash)
end
natives.money.network_earn_from_sell_bunker = natives.MONEY.NETWORK_EARN_FROM_SELL_BUNKER

function natives.MONEY.NETWORK_SPENT_BALLISTIC_EQUIPMENT(--[[int]] amount, --[[BOOL]] p1, --[[BOOL]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPENT_BALLISTIC_EQUIPMENT' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")

	local result = native_call(0x5D97630A8A0EF123, amount, p1, p2)
end
natives.money.network_spent_ballistic_equipment = natives.MONEY.NETWORK_SPENT_BALLISTIC_EQUIPMENT

function natives.MONEY.NETWORK_EARN_RDR_BONUS(--[[int]] amount, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_RDR_BONUS' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x7A5349B773584675, amount, p1)
end
natives.money.network_earn_rdr_bonus = natives.MONEY.NETWORK_EARN_RDR_BONUS

function natives.MONEY.NETWORK_EARN_WAGE_PAYMENT(--[[int]] amount, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_WAGE_PAYMENT' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x35F8DA0E8A31EF1B, amount, p1)
end
natives.money.network_earn_wage_payment = natives.MONEY.NETWORK_EARN_WAGE_PAYMENT

function natives.MONEY.NETWORK_EARN_WAGE_PAYMENT_BONUS(--[[int]] amount) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_WAGE_PAYMENT_BONUS' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")

	local result = native_call(0x005ACA7100BD101D, amount)
end
natives.money.network_earn_wage_payment_bonus = natives.MONEY.NETWORK_EARN_WAGE_PAYMENT_BONUS

function natives.MONEY.NETWORK_SPENT_BUY_BASE(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPENT_BUY_BASE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x4EA3F425C7744D21, p0, p1, p2, p3)
end
natives.money.network_spent_buy_base = natives.MONEY.NETWORK_SPENT_BUY_BASE

function natives.MONEY.NETWORK_SPENT_UPGRADE_BASE(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPENT_UPGRADE_BASE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x3DD3F33A5D55EA6F, p0, p1, p2, p3)
end
natives.money.network_spent_upgrade_base = natives.MONEY.NETWORK_SPENT_UPGRADE_BASE

function natives.MONEY.NETWORK_SPENT_BUY_TILTROTOR(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPENT_BUY_TILTROTOR' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x0CCE73BC7A11E885, p0, p1, p2, p3)
end
natives.money.network_spent_buy_tiltrotor = natives.MONEY.NETWORK_SPENT_BUY_TILTROTOR

function natives.MONEY.NETWORK_SPENT_UPGRADE_TILTROTOR(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPENT_UPGRADE_TILTROTOR' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x165E135D6DFA2907, p0, p1, p2, p3)
end
natives.money.network_spent_upgrade_tiltrotor = natives.MONEY.NETWORK_SPENT_UPGRADE_TILTROTOR

function natives.MONEY.NETWORK_SPENT_EMPLOY_ASSASSINS(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPENT_EMPLOY_ASSASSINS' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x5BBBD92186E1F1C5, p0, p1, p2, p3)
end
natives.money.network_spent_employ_assassins = natives.MONEY.NETWORK_SPENT_EMPLOY_ASSASSINS

function natives.MONEY.NETWORK_SPEND_GANGOPS_CANNON(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPEND_GANGOPS_CANNON' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x771ADB0E7635B7BF, p0, p1, p2, p3)
end
natives.money.network_spend_gangops_cannon = natives.MONEY.NETWORK_SPEND_GANGOPS_CANNON

function natives.MONEY.NETWORK_SPEND_GANGOPS_SKIP_MISSION(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPEND_GANGOPS_SKIP_MISSION' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0xDA947AE8880D5C18, p0, p1, p2, p3)
end
natives.money.network_spend_gangops_skip_mission = natives.MONEY.NETWORK_SPEND_GANGOPS_SKIP_MISSION

function natives.MONEY.NETWORK_SPEND_CASINO_HEIST_SKIP_MISSION(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPEND_CASINO_HEIST_SKIP_MISSION' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x487009DD91D93429, p0, p1, p2, p3)
end
natives.money.network_spend_casino_heist_skip_mission = natives.MONEY.NETWORK_SPEND_CASINO_HEIST_SKIP_MISSION

function natives.MONEY.NETWORK_EARN_SELL_BASE(--[[int]] amount, --[[Hash]] baseNameHash) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_SELL_BASE' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")
	assert(type(baseNameHash) == "number", "Arg #2 (baseNameHash) must be a number.")

	local result = native_call(0x0E1E2FF3F4EC11AA, amount, baseNameHash)
end
natives.money.network_earn_sell_base = natives.MONEY.NETWORK_EARN_SELL_BASE

function natives.MONEY.NETWORK_EARN_TARGET_REFUND(--[[int]] amount, --[[int]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_TARGET_REFUND' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x5B669CF2299A271F, amount, p1)
end
natives.money.network_earn_target_refund = natives.MONEY.NETWORK_EARN_TARGET_REFUND

function natives.MONEY.NETWORK_EARN_GANGOPS_WAGES(--[[int]] amount, --[[int]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_GANGOPS_WAGES' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x2DCB19ABAB0380A8, amount, p1)
end
natives.money.network_earn_gangops_wages = natives.MONEY.NETWORK_EARN_GANGOPS_WAGES

function natives.MONEY.NETWORK_EARN_GANGOPS_WAGES_BONUS(--[[int]] amount, --[[int]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_GANGOPS_WAGES_BONUS' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x15BB2A5C757EB91F, amount, p1)
end
natives.money.network_earn_gangops_wages_bonus = natives.MONEY.NETWORK_EARN_GANGOPS_WAGES_BONUS

function natives.MONEY.NETWORK_EARN_DAR_CHALLENGE(--[[int]] amount, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_DAR_CHALLENGE' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xCAC672087B4A24AB, amount, p1)
end
natives.money.network_earn_dar_challenge = natives.MONEY.NETWORK_EARN_DAR_CHALLENGE

function natives.MONEY.NETWORK_EARN_DOOMSDAY_FINALE_BONUS(--[[int]] amount, --[[Hash]] vehicleHash) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_DOOMSDAY_FINALE_BONUS' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")
	assert(type(vehicleHash) == "number", "Arg #2 (vehicleHash) must be a number.")

	local result = native_call(0x128A747F4A230952, amount, vehicleHash)
end
natives.money.network_earn_doomsday_finale_bonus = natives.MONEY.NETWORK_EARN_DOOMSDAY_FINALE_BONUS

function natives.MONEY.NETWORK_EARN_GANGOPS_AWARD(--[[int]] amount, --[[const char*]] unk, --[[Any]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_GANGOPS_AWARD' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")
	assert(type(unk) == "string", "Arg #2 (unk) must be a string.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0xA9A31475F530DFDA, amount, unk, p2)
end
natives.money.network_earn_gangops_award = natives.MONEY.NETWORK_EARN_GANGOPS_AWARD

function natives.MONEY.NETWORK_EARN_GANGOPS_ELITE(--[[int]] amount, --[[const char*]] unk, --[[int]] actIndex) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_GANGOPS_ELITE' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")
	assert(type(unk) == "string", "Arg #2 (unk) must be a string.")
	assert(type(actIndex) == "number", "Arg #3 (actIndex) must be a number.")

	local result = native_call(0x2597A0D4A4FC2C77, amount, unk, actIndex)
end
natives.money.network_earn_gangops_elite = natives.MONEY.NETWORK_EARN_GANGOPS_ELITE

function natives.MONEY.NETWORK_SERVICE_EARN_GANGOPS_RIVAL_DELIVERY(--[[int]] earnedMoney) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SERVICE_EARN_GANGOPS_RIVAL_DELIVERY' due to disabled trusted mode")

	assert(type(earnedMoney) == "number", "Arg #1 (earnedMoney) must be a number.")

	local result = native_call(0x1B882107C23A9022, earnedMoney)
end
natives.money.network_service_earn_gangops_rival_delivery = natives.MONEY.NETWORK_SERVICE_EARN_GANGOPS_RIVAL_DELIVERY

function natives.MONEY.NETWORK_SPEND_GANGOPS_START_STRAND(--[[int]] type, --[[int]] amount, --[[BOOL]] p2, --[[BOOL]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPEND_GANGOPS_START_STRAND' due to disabled trusted mode")

	assert(type(type) == "number", "Arg #1 (type) must be a number.")
	assert(type(amount) == "number", "Arg #2 (amount) must be a number.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")
	assert(type(p3) == "boolean", "Arg #4 (p3) must be a boolean.")

	local result = native_call(0xA19EC0786E326E06, type, amount, p2, p3)
end
natives.money.network_spend_gangops_start_strand = natives.MONEY.NETWORK_SPEND_GANGOPS_START_STRAND

function natives.MONEY.NETWORK_SPEND_GANGOPS_TRIP_SKIP(--[[int]] amount, --[[BOOL]] p1, --[[BOOL]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPEND_GANGOPS_TRIP_SKIP' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")

	local result = native_call(0x5ECE6FD7B4EC8D6A, amount, p1, p2)
end
natives.money.network_spend_gangops_trip_skip = natives.MONEY.NETWORK_SPEND_GANGOPS_TRIP_SKIP

function natives.MONEY.NETWORK_EARN_GANGOPS_PREP_PARTICIPATION(--[[int]] amount) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_GANGOPS_PREP_PARTICIPATION' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")

	local result = native_call(0xED26584F6BDCBBFD, amount)
end
natives.money.network_earn_gangops_prep_participation = natives.MONEY.NETWORK_EARN_GANGOPS_PREP_PARTICIPATION

function natives.MONEY.NETWORK_EARN_GANGOPS_SETUP(--[[int]] amount, --[[const char*]] unk) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_GANGOPS_SETUP' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")
	assert(type(unk) == "string", "Arg #2 (unk) must be a string.")

	local result = native_call(0xA9160796D47A2CF8, amount, unk)
end
natives.money.network_earn_gangops_setup = natives.MONEY.NETWORK_EARN_GANGOPS_SETUP

function natives.MONEY.NETWORK_EARN_GANGOPS_FINALE(--[[int]] amount, --[[const char*]] unk) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_GANGOPS_FINALE' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")
	assert(type(unk) == "string", "Arg #2 (unk) must be a string.")

	local result = native_call(0x1C121FC9545E0D52, amount, unk)
end
natives.money.network_earn_gangops_finale = natives.MONEY.NETWORK_EARN_GANGOPS_FINALE

function natives.MONEY.NETWORK_SPEND_GANGOPS_REPAIR_COST(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPEND_GANGOPS_REPAIR_COST' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0x2A7CEC72C3443BCC, p0, p1, p2)
end
natives.money.network_spend_gangops_repair_cost = natives.MONEY.NETWORK_SPEND_GANGOPS_REPAIR_COST

function natives.MONEY.NETWORK_EARN_NIGHTCLUB(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_NIGHTCLUB' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xE0F82D68C7039158, p0)
end
natives.money.network_earn_nightclub = natives.MONEY.NETWORK_EARN_NIGHTCLUB

function natives.MONEY.NETWORK_EARN_NIGHTCLUB_DANCING(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_NIGHTCLUB_DANCING' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xB4DEAE67F35E2ACD, p0)
end
natives.money.network_earn_nightclub_dancing = natives.MONEY.NETWORK_EARN_NIGHTCLUB_DANCING

function natives.MONEY.NETWORK_EARN_BB_EVENT_BONUS(--[[int]] amount) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_BB_EVENT_BONUS' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")

	local result = native_call(0xFDD8D2440DAF1590, amount)
end
natives.money.network_earn_bb_event_bonus = natives.MONEY.NETWORK_EARN_BB_EVENT_BONUS

function natives.MONEY.NETWORK_SPENT_PURCHASE_HACKER_TRUCK(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPENT_PURCHASE_HACKER_TRUCK' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x2A93C46AAB1EACC9, p0, p1, p2, p3)
end
natives.money.network_spent_purchase_hacker_truck = natives.MONEY.NETWORK_SPENT_PURCHASE_HACKER_TRUCK

function natives.MONEY.NETWORK_SPENT_UPGRADE_HACKER_TRUCK(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPENT_UPGRADE_HACKER_TRUCK' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x226C284C830D0CA8, p0, p1, p2, p3)
end
natives.money.network_spent_upgrade_hacker_truck = natives.MONEY.NETWORK_SPENT_UPGRADE_HACKER_TRUCK

function natives.MONEY.NETWORK_EARN_HACKER_TRUCK(--[[Any]] p0, --[[int]] amount, --[[Any]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_HACKER_TRUCK' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(amount) == "number", "Arg #2 (amount) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0xE8815FE993896AD3, p0, amount, p2, p3)
end
natives.money.network_earn_hacker_truck = natives.MONEY.NETWORK_EARN_HACKER_TRUCK

function natives.MONEY.NETWORK_SPENT_PURCHASE_NIGHTCLUB_AND_WAREHOUSE(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPENT_PURCHASE_NIGHTCLUB_AND_WAREHOUSE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0xED76D195E6E3BF7F, p0, p1, p2, p3)
end
natives.money.network_spent_purchase_nightclub_and_warehouse = natives.MONEY.NETWORK_SPENT_PURCHASE_NIGHTCLUB_AND_WAREHOUSE

function natives.MONEY.NETWORK_SPENT_UPGRADE_NIGHTCLUB_AND_WAREHOUSE(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPENT_UPGRADE_NIGHTCLUB_AND_WAREHOUSE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x1DC9B749E7AE282B, p0, p1, p2, p3)
end
natives.money.network_spent_upgrade_nightclub_and_warehouse = natives.MONEY.NETWORK_SPENT_UPGRADE_NIGHTCLUB_AND_WAREHOUSE

function natives.MONEY.NETWORK_EARN_NIGHTCLUB_AND_WAREHOUSE(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3, --[[Any]] p4, --[[Any]] p5, --[[Any]] p6) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_NIGHTCLUB_AND_WAREHOUSE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")
	assert(type(p6) == "number", "Arg #7 (p6) must be a number.")

	local result = native_call(0xC6E74CF8C884C880, p0, p1, p2, p3, p4, p5, p6)
end
natives.money.network_earn_nightclub_and_warehouse = natives.MONEY.NETWORK_EARN_NIGHTCLUB_AND_WAREHOUSE

function natives.MONEY.NETWORK_SPEND_NIGHTCLUB_AND_WAREHOUSE(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3, --[[Any]] p4, --[[Any]] p5) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPEND_NIGHTCLUB_AND_WAREHOUSE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")

	local result = native_call(0x65482BFD0923C8A1, p0, p1, p2, p3, p4, p5)
end
natives.money.network_spend_nightclub_and_warehouse = natives.MONEY.NETWORK_SPEND_NIGHTCLUB_AND_WAREHOUSE

function natives.MONEY.NETWORK_SPENT_RDR_HATCHET_BONUS(--[[int]] amount, --[[BOOL]] p1, --[[BOOL]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPENT_RDR_HATCHET_BONUS' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")

	local result = native_call(0xE284D46FFDB82E36, amount, p1, p2)
end
natives.money.network_spent_rdr_hatchet_bonus = natives.MONEY.NETWORK_SPENT_RDR_HATCHET_BONUS

function natives.MONEY.NETWORK_SPENT_NIGHTCLUB_ENTRY_FEE(--[[Player]] player, --[[int]] amount, --[[Any]] p1, --[[BOOL]] p2, --[[BOOL]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPENT_NIGHTCLUB_ENTRY_FEE' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(amount) == "number", "Arg #2 (amount) must be a number.")
	assert(type(p1) == "number", "Arg #3 (p1) must be a number.")
	assert(type(p2) == "boolean", "Arg #4 (p2) must be a boolean.")
	assert(type(p3) == "boolean", "Arg #5 (p3) must be a boolean.")

	local result = native_call(0x876056684281655D, player, amount, p1, p2, p3)
end
natives.money.network_spent_nightclub_entry_fee = natives.MONEY.NETWORK_SPENT_NIGHTCLUB_ENTRY_FEE

function natives.MONEY.NETWORK_SPEND_NIGHTCLUB_BAR_DRINK(--[[int]] amount, --[[Any]] p1, --[[BOOL]] p2, --[[BOOL]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPEND_NIGHTCLUB_BAR_DRINK' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")
	assert(type(p3) == "boolean", "Arg #4 (p3) must be a boolean.")

	local result = native_call(0xDD21B016E4289465, amount, p1, p2, p3)
end
natives.money.network_spend_nightclub_bar_drink = natives.MONEY.NETWORK_SPEND_NIGHTCLUB_BAR_DRINK

function natives.MONEY.NETWORK_SPEND_BOUNTY_HUNTER_MISSION(--[[int]] amount, --[[BOOL]] p1, --[[BOOL]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPEND_BOUNTY_HUNTER_MISSION' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")

	local result = native_call(0x1BEA0CD93470BB1F, amount, p1, p2)
end
natives.money.network_spend_bounty_hunter_mission = natives.MONEY.NETWORK_SPEND_BOUNTY_HUNTER_MISSION

function natives.MONEY.NETWORK_SPENT_REHIRE_DJ(--[[int]] amount, --[[Any]] p1, --[[BOOL]] p2, --[[BOOL]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPENT_REHIRE_DJ' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")
	assert(type(p3) == "boolean", "Arg #4 (p3) must be a boolean.")

	local result = native_call(0xF6C8A544E4CF14FC, amount, p1, p2, p3)
end
natives.money.network_spent_rehire_dj = natives.MONEY.NETWORK_SPENT_REHIRE_DJ

function natives.MONEY.NETWORK_SPENT_ARENA_JOIN_SPECTATOR(--[[int]] amount, --[[Any]] p1, --[[BOOL]] p2, --[[BOOL]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPENT_ARENA_JOIN_SPECTATOR' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")
	assert(type(p3) == "boolean", "Arg #4 (p3) must be a boolean.")

	local result = native_call(0x14EAEA58F93B55AF, amount, p1, p2, p3)
end
natives.money.network_spent_arena_join_spectator = natives.MONEY.NETWORK_SPENT_ARENA_JOIN_SPECTATOR

function natives.MONEY.NETWORK_EARN_ARENA_SKILL_LEVEL_PROGRESSION(--[[int]] amount, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_ARENA_SKILL_LEVEL_PROGRESSION' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xE08256F972C7BB2C, amount, p1)
end
natives.money.network_earn_arena_skill_level_progression = natives.MONEY.NETWORK_EARN_ARENA_SKILL_LEVEL_PROGRESSION

function natives.MONEY.NETWORK_EARN_ARENA_CAREER_PROGRESSION(--[[int]] amount, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_ARENA_CAREER_PROGRESSION' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x0F99F70C61F14619, amount, p1)
end
natives.money.network_earn_arena_career_progression = natives.MONEY.NETWORK_EARN_ARENA_CAREER_PROGRESSION

function natives.MONEY.NETWORK_SPEND_MAKE_IT_RAIN(--[[int]] amount, --[[BOOL]] p1, --[[BOOL]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPEND_MAKE_IT_RAIN' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")

	local result = native_call(0xE5F5A060439C2F5D, amount, p1, p2)
end
natives.money.network_spend_make_it_rain = natives.MONEY.NETWORK_SPEND_MAKE_IT_RAIN

function natives.MONEY.NETWORK_SPEND_BUY_ARENA(--[[int]] amount, --[[BOOL]] p1, --[[BOOL]] p2, --[[const char*]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPEND_BUY_ARENA' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")
	assert(type(p3) == "string", "Arg #4 (p3) must be a string.")

	local result = native_call(0x40D5DA9550B7CB46, amount, p1, p2, p3)
end
natives.money.network_spend_buy_arena = natives.MONEY.NETWORK_SPEND_BUY_ARENA

function natives.MONEY.NETWORK_SPEND_UPGRADE_ARENA(--[[int]] amount, --[[BOOL]] p1, --[[BOOL]] p2, --[[const char*]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPEND_UPGRADE_ARENA' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")
	assert(type(p3) == "string", "Arg #4 (p3) must be a string.")

	local result = native_call(0x037ABB06825D7AB1, amount, p1, p2, p3)
end
natives.money.network_spend_upgrade_arena = natives.MONEY.NETWORK_SPEND_UPGRADE_ARENA

function natives.MONEY.NETWORK_SPEND_ARENA_SPECTATOR_BOX(--[[int]] amount, --[[Any]] p1, --[[BOOL]] p2, --[[BOOL]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPEND_ARENA_SPECTATOR_BOX' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")
	assert(type(p3) == "boolean", "Arg #4 (p3) must be a boolean.")

	local result = native_call(0x7049BF858601DC0F, amount, p1, p2, p3)
end
natives.money.network_spend_arena_spectator_box = natives.MONEY.NETWORK_SPEND_ARENA_SPECTATOR_BOX

function natives.MONEY.NETWORK_SPEND_SPIN_THE_WHEEL_PAYMENT(--[[int]] amount, --[[Any]] p1, --[[BOOL]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPEND_SPIN_THE_WHEEL_PAYMENT' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")

	local result = native_call(0x9A5BD1D0000B339C, amount, p1, p2)
end
natives.money.network_spend_spin_the_wheel_payment = natives.MONEY.NETWORK_SPEND_SPIN_THE_WHEEL_PAYMENT

function natives.MONEY.NETWORK_EARN_SPIN_THE_WHEEL_CASH(--[[int]] amount) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_SPIN_THE_WHEEL_CASH' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")

	local result = native_call(0x676C48776CACBB5A, amount)
end
natives.money.network_earn_spin_the_wheel_cash = natives.MONEY.NETWORK_EARN_SPIN_THE_WHEEL_CASH

function natives.MONEY.NETWORK_SPEND_ARENA_PREMIUM(--[[int]] amount, --[[BOOL]] p1, --[[BOOL]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPEND_ARENA_PREMIUM' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")

	local result = native_call(0x619496D837EFD920, amount, p1, p2)
end
natives.money.network_spend_arena_premium = natives.MONEY.NETWORK_SPEND_ARENA_PREMIUM

function natives.MONEY.NETWORK_EARN_ARENA_WAR(--[[int]] amount, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_ARENA_WAR' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x631F1CB8FB4130AA, amount, p1, p2, p3)
end
natives.money.network_earn_arena_war = natives.MONEY.NETWORK_EARN_ARENA_WAR

function natives.MONEY.NETWORK_EARN_ARENA_WAR_ASSASSINATE_TARGET(--[[int]] amount) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_ARENA_WAR_ASSASSINATE_TARGET' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")

	local result = native_call(0x5E7AE8AABE8B7C0D, amount)
end
natives.money.network_earn_arena_war_assassinate_target = natives.MONEY.NETWORK_EARN_ARENA_WAR_ASSASSINATE_TARGET

function natives.MONEY.NETWORK_EARN_ARENA_WAR_EVENT_CARGO(--[[int]] amount) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_ARENA_WAR_EVENT_CARGO' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")

	local result = native_call(0xA82959062361B259, amount)
end
natives.money.network_earn_arena_war_event_cargo = natives.MONEY.NETWORK_EARN_ARENA_WAR_EVENT_CARGO

function natives.MONEY.NETWORK_EARN_RC_TIME_TRIAL(--[[int]] amount) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_RC_TIME_TRIAL' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")

	local result = native_call(0xDFF49EE984E7AAE8, amount)
end
natives.money.network_earn_rc_time_trial = natives.MONEY.NETWORK_EARN_RC_TIME_TRIAL

function natives.MONEY.NETWORK_EARN_DAILY_OBJECTIVE_EVENT(--[[int]] amount) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_DAILY_OBJECTIVE_EVENT' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")

	local result = native_call(0x5128DF14A5BB86FC, amount)
end
natives.money.network_earn_daily_objective_event = natives.MONEY.NETWORK_EARN_DAILY_OBJECTIVE_EVENT

function natives.MONEY.NETWORK_SPEND_CASINO_MEMBERSHIP(--[[int]] amount, --[[BOOL]] p1, --[[BOOL]] p2, --[[int]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPEND_CASINO_MEMBERSHIP' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0xFBBE0570EDF39D46, amount, p1, p2, p3)
end
natives.money.network_spend_casino_membership = natives.MONEY.NETWORK_SPEND_CASINO_MEMBERSHIP

function natives.MONEY.NETWORK_SPEND_BUY_CASINO(--[[int]] amount, --[[BOOL]] p1, --[[BOOL]] p2, --[[Any*]] data) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPEND_BUY_CASINO' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")
	assert(type(data) == "userdata", "Arg #4 (data) must be a userdata.")

	local result = native_call(0x34A6FC4D06C4DA0F, amount, p1, p2, data)
end
natives.money.network_spend_buy_casino = natives.MONEY.NETWORK_SPEND_BUY_CASINO

function natives.MONEY.NETWORK_SPEND_UPGRADE_CASINO(--[[int]] amount, --[[BOOL]] p1, --[[BOOL]] p2, --[[Any*]] data) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPEND_UPGRADE_CASINO' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")
	assert(type(data) == "userdata", "Arg #4 (data) must be a userdata.")

	local result = native_call(0x4740D62BC1B4EBEA, amount, p1, p2, data)
end
natives.money.network_spend_upgrade_casino = natives.MONEY.NETWORK_SPEND_UPGRADE_CASINO

function natives.MONEY.NETWORK_SPEND_CASINO_GENERIC(--[[int]] amount, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3, --[[Any]] p4) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPEND_CASINO_GENERIC' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")

	local result = native_call(0x88BF9B612B84D3C3, amount, p1, p2, p3, p4)
end
natives.money.network_spend_casino_generic = natives.MONEY.NETWORK_SPEND_CASINO_GENERIC

function natives.MONEY.NETWORK_EARN_CASINO_TIME_TRIAL_WIN(--[[int]] amount) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_CASINO_TIME_TRIAL_WIN' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")

	local result = native_call(0x0819DB99FD2FBBD8, amount)
end
natives.money.network_earn_casino_time_trial_win = natives.MONEY.NETWORK_EARN_CASINO_TIME_TRIAL_WIN

function natives.MONEY.NETWORK_EARN_COLLECTABLES_ACTION_FIGURES(--[[int]] amount) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_COLLECTABLES_ACTION_FIGURES' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")

	local result = native_call(0x5517F90043466049, amount)
end
natives.money.network_earn_collectables_action_figures = natives.MONEY.NETWORK_EARN_COLLECTABLES_ACTION_FIGURES

function natives.MONEY.NETWORK_EARN_CASINO_COLLECTABLE_COMPLETED_COLLECTION(--[[int]] amount) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_CASINO_COLLECTABLE_COMPLETED_COLLECTION' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")

	local result = native_call(0x83AD64F53F4E9483, amount)
end
natives.money.network_earn_casino_collectable_completed_collection = natives.MONEY.NETWORK_EARN_CASINO_COLLECTABLE_COMPLETED_COLLECTION

function natives.MONEY.NETWORK_EARN_SELL_PRIZE_VEHICLE(--[[int]] amount, --[[Any]] p1, --[[Any]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_SELL_PRIZE_VEHICLE' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0x8BCB27A057DF7B7F, amount, p1, p2)
end
natives.money.network_earn_sell_prize_vehicle = natives.MONEY.NETWORK_EARN_SELL_PRIZE_VEHICLE

function natives.MONEY.NETWORK_EARN_CASINO_MISSION_REWARD(--[[int]] amount) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_CASINO_MISSION_REWARD' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")

	local result = native_call(0x566FD402B25787DE, amount)
end
natives.money.network_earn_casino_mission_reward = natives.MONEY.NETWORK_EARN_CASINO_MISSION_REWARD

function natives.MONEY.NETWORK_EARN_CASINO_STORY_MISSION_REWARD(--[[int]] amount) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_CASINO_STORY_MISSION_REWARD' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")

	local result = native_call(0xAC95ED552157E092, amount)
end
natives.money.network_earn_casino_story_mission_reward = natives.MONEY.NETWORK_EARN_CASINO_STORY_MISSION_REWARD

function natives.MONEY.NETWORK_EARN_CASINO_MISSION_PARTICIPATION(--[[int]] amount) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_CASINO_MISSION_PARTICIPATION' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")

	local result = native_call(0x09E8F18641BE2575, amount)
end
natives.money.network_earn_casino_mission_participation = natives.MONEY.NETWORK_EARN_CASINO_MISSION_PARTICIPATION

function natives.MONEY.NETWORK_EARN_CASINO_AWARD(--[[int]] amount, --[[Hash]] hash) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_CASINO_AWARD' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")
	assert(type(hash) == "number", "Arg #2 (hash) must be a number.")

	local result = native_call(0x973A9781A34F8DEB, amount, hash)
end
natives.money.network_earn_casino_award = natives.MONEY.NETWORK_EARN_CASINO_AWARD

function natives.MONEY.NETWORK_SPEND_BUY_ARCADE(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPEND_BUY_ARCADE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x870289A558348378, p0, p1, p2, p3)
end
natives.money.network_spend_buy_arcade = natives.MONEY.NETWORK_SPEND_BUY_ARCADE

function natives.MONEY.NETWORK_SPEND_UPGRADE_ARCADE(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPEND_UPGRADE_ARCADE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x5574637681911FDA, p0, p1, p2, p3)
end
natives.money.network_spend_upgrade_arcade = natives.MONEY.NETWORK_SPEND_UPGRADE_ARCADE

function natives.MONEY.NETWORK_SPEND_CASINO_HEIST(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3, --[[Any]] p4, --[[Any]] p5, --[[Any]] p6, --[[Any]] p7, --[[Any]] p8, --[[Any]] p9, --[[Any]] p10) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPEND_CASINO_HEIST' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")
	assert(type(p6) == "number", "Arg #7 (p6) must be a number.")
	assert(type(p7) == "number", "Arg #8 (p7) must be a number.")
	assert(type(p8) == "number", "Arg #9 (p8) must be a number.")
	assert(type(p9) == "number", "Arg #10 (p9) must be a number.")
	assert(type(p10) == "number", "Arg #11 (p10) must be a number.")

	local result = native_call(0xD30E8392F407C328, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10)
end
natives.money.network_spend_casino_heist = natives.MONEY.NETWORK_SPEND_CASINO_HEIST

function natives.MONEY.NETWORK_SPEND_ARCADE_MGMT(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3, --[[Any]] p4) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPEND_ARCADE_MGMT' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")

	local result = native_call(0xB5B58E24868CB09E, p0, p1, p2, p3, p4)
end
natives.money.network_spend_arcade_mgmt = natives.MONEY.NETWORK_SPEND_ARCADE_MGMT

function natives.MONEY.NETWORK_SPEND_PLAY_ARCADE(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3, --[[Any]] p4) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPEND_PLAY_ARCADE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")

	local result = native_call(0xEAD3D81F2C3A1458, p0, p1, p2, p3, p4)
end
natives.money.network_spend_play_arcade = natives.MONEY.NETWORK_SPEND_PLAY_ARCADE

function natives.MONEY.NETWORK_SPEND_ARCADE(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3, --[[Any]] p4) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPEND_ARCADE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")

	local result = native_call(0x43AA7FAC4E6D6687, p0, p1, p2, p3, p4)
end
natives.money.network_spend_arcade = natives.MONEY.NETWORK_SPEND_ARCADE

function natives.MONEY.NETWORK_EARN_CASINO_HEIST(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3, --[[Any]] p4, --[[Any]] p5, --[[Any]] p6) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_CASINO_HEIST' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")
	assert(type(p6) == "number", "Arg #7 (p6) must be a number.")

	local result = native_call(0x72E7C7B9615FA3C3, p0, p1, p2, p3, p4, p5, p6)
end
natives.money.network_earn_casino_heist = natives.MONEY.NETWORK_EARN_CASINO_HEIST

function natives.MONEY.NETWORK_EARN_UPGRADE_ARCADE(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_UPGRADE_ARCADE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0x4C3B75694F7E0D9C, p0, p1, p2)
end
natives.money.network_earn_upgrade_arcade = natives.MONEY.NETWORK_EARN_UPGRADE_ARCADE

function natives.MONEY.NETWORK_EARN_ARCADE(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3, --[[Any]] p4) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_ARCADE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")

	local result = native_call(0xD29334ED1A256DBF, p0, p1, p2, p3, p4)
end
natives.money.network_earn_arcade = natives.MONEY.NETWORK_EARN_ARCADE

function natives.MONEY.NETWORK_EARN_COLLECTABLES(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_COLLECTABLES' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0xA95CFB4E02390842, p0, p1, p2)
end
natives.money.network_earn_collectables = natives.MONEY.NETWORK_EARN_COLLECTABLES

function natives.MONEY.NETWORK_EARN_CHALLENGE(--[[int]] amount, --[[Any]] p1, --[[Any]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_CHALLENGE' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0x0DD362F14F18942A, amount, p1, p2)
end
natives.money.network_earn_challenge = natives.MONEY.NETWORK_EARN_CHALLENGE

function natives.MONEY.NETWORK_EARN_CASINO_HEIST_AWARDS(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3, --[[Any]] p4) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_CASINO_HEIST_AWARDS' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")

	local result = native_call(0x3EC7471E6909798A, p0, p1, p2, p3, p4)
end
natives.money.network_earn_casino_heist_awards = natives.MONEY.NETWORK_EARN_CASINO_HEIST_AWARDS

function natives.MONEY.NETWORK_EARN_COLLECTABLE_ITEM(--[[int]] amount, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_COLLECTABLE_ITEM' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x84FF63BD4966F33D, amount, p1)
end
natives.money.network_earn_collectable_item = natives.MONEY.NETWORK_EARN_COLLECTABLE_ITEM

function natives.MONEY.NETWORK_EARN_COLLECTABLE_COMPLETED_COLLECTION(--[[int]] amount, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_COLLECTABLE_COMPLETED_COLLECTION' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x5C9B198AF5A54FA6, amount, p1)
end
natives.money.network_earn_collectable_completed_collection = natives.MONEY.NETWORK_EARN_COLLECTABLE_COMPLETED_COLLECTION

function natives.MONEY.NETWORK_EARN_YATCH_MISSION(--[[int]] amount, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_YATCH_MISSION' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xDE68E30D89F97132, amount, p1)
end
natives.money.network_earn_yatch_mission = natives.MONEY.NETWORK_EARN_YATCH_MISSION

function natives.MONEY.NETWORK_EARN_DISPATCH_CALL(--[[int]] amount, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_DISPATCH_CALL' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xE2E244AB823B4483, amount, p1)
end
natives.money.network_earn_dispatch_call = natives.MONEY.NETWORK_EARN_DISPATCH_CALL

function natives.MONEY.NETWORK_SPEND_BEACH_PARTY(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPEND_BEACH_PARTY' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x54ABA22FA6371249, p0)
end
natives.money.network_spend_beach_party = natives.MONEY.NETWORK_SPEND_BEACH_PARTY

function natives.MONEY.NETWORK_SPEND_SUBMARINE(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3, --[[Any]] p4, --[[Any]] p5) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPEND_SUBMARINE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")

	local result = native_call(0x6C8BC1488527AAAB, p0, p1, p2, p3, p4, p5)
end
natives.money.network_spend_submarine = natives.MONEY.NETWORK_SPEND_SUBMARINE

function natives.MONEY.NETWORK_SPEND_CASINO_CLUB(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3, --[[Any]] p4, --[[Any]] p5, --[[Any]] p6, --[[Any]] p7, --[[Any]] p8) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPEND_CASINO_CLUB' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")
	assert(type(p6) == "number", "Arg #7 (p6) must be a number.")
	assert(type(p7) == "number", "Arg #8 (p7) must be a number.")
	assert(type(p8) == "number", "Arg #9 (p8) must be a number.")

	local result = native_call(0xC991C255AA6D90B2, p0, p1, p2, p3, p4, p5, p6, p7, p8)
end
natives.money.network_spend_casino_club = natives.MONEY.NETWORK_SPEND_CASINO_CLUB

function natives.MONEY.NETWORK_SPEND_BUY_SUB(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPEND_BUY_SUB' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x90CD7C6871FBF1B4, p0, p1, p2, p3)
end
natives.money.network_spend_buy_sub = natives.MONEY.NETWORK_SPEND_BUY_SUB

function natives.MONEY.NETWORK_SPEND_UPGRADE_SUB(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPEND_UPGRADE_SUB' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x89049A84065CE68E, p0, p1, p2, p3)
end
natives.money.network_spend_upgrade_sub = natives.MONEY.NETWORK_SPEND_UPGRADE_SUB

function natives.MONEY.NETWORK_SPEND_ISLAND_HEIST(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPEND_ISLAND_HEIST' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0xE86689E5F82DE429, p0, p1, p2, p3)
end
natives.money.network_spend_island_heist = natives.MONEY.NETWORK_SPEND_ISLAND_HEIST

function natives.MONEY.NETWORK_EARN_ISLAND_HEIST(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3, --[[Any]] p4, --[[Any]] p5) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_ISLAND_HEIST' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")

	local result = native_call(0xD21D111C46BA9F15, p0, p1, p2, p3, p4, p5)
end
natives.money.network_earn_island_heist = natives.MONEY.NETWORK_EARN_ISLAND_HEIST

function natives.MONEY.NETWORK_EARN_BEACH_PARTY_LOST_FOUND(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_BEACH_PARTY_LOST_FOUND' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0xA51338E0DCCD4065, p0, p1, p2)
end
natives.money.network_earn_beach_party_lost_found = natives.MONEY.NETWORK_EARN_BEACH_PARTY_LOST_FOUND

function natives.MONEY.NETWORK_EARN_FROM_ISLAND_HEIST_DJ_MISSION(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_FROM_ISLAND_HEIST_DJ_MISSION' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xE2BB399D90942091, p0, p1)
end
natives.money.network_earn_from_island_heist_dj_mission = natives.MONEY.NETWORK_EARN_FROM_ISLAND_HEIST_DJ_MISSION

function natives.MONEY.NETWORK_SPEND_CAR_CLUB_MEMBERSHIP(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3, --[[Any]] p4) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPEND_CAR_CLUB_MEMBERSHIP' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")

	local result = native_call(0x1464E17207CD36E2, p0, p1, p2, p3, p4)
end
natives.money.network_spend_car_club_membership = natives.MONEY.NETWORK_SPEND_CAR_CLUB_MEMBERSHIP

function natives.MONEY.NETWORK_SPEND_CAR_CLUB_BAR(--[[Any]] p0, --[[BOOL]] p1, --[[BOOL]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPEND_CAR_CLUB_BAR' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x925227803A0EAA1B, p0, p1, p2, p3)
end
natives.money.network_spend_car_club_bar = natives.MONEY.NETWORK_SPEND_CAR_CLUB_BAR

function natives.MONEY.NETWORK_SPEND_AUTOSHOP_MODIFY(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3, --[[Any]] p4) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPEND_AUTOSHOP_MODIFY' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")

	local result = native_call(0x9BEA350D7C48061B, p0, p1, p2, p3, p4)
end
natives.money.network_spend_autoshop_modify = natives.MONEY.NETWORK_SPEND_AUTOSHOP_MODIFY

function natives.MONEY.NETWORK_SPEND_CAR_CLUB_TAKEOVER(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPEND_CAR_CLUB_TAKEOVER' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0xD1E46824E6FB92B5, p0, p1, p2, p3)
end
natives.money.network_spend_car_club_takeover = natives.MONEY.NETWORK_SPEND_CAR_CLUB_TAKEOVER

function natives.MONEY.NETWORK_SPEND_BUY_AUTOSHOP(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPEND_BUY_AUTOSHOP' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0xEEB7E5D1FEB20869, p0, p1, p2, p3)
end
natives.money.network_spend_buy_autoshop = natives.MONEY.NETWORK_SPEND_BUY_AUTOSHOP

function natives.MONEY.NETWORK_SPEND_UPGRADE_AUTOSHOP(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPEND_UPGRADE_AUTOSHOP' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0xDD829AA198FDC46C, p0, p1, p2, p3)
end
natives.money.network_spend_upgrade_autoshop = natives.MONEY.NETWORK_SPEND_UPGRADE_AUTOSHOP

function natives.MONEY.NETWORK_EARN_AUTOSHOP_BUSINESS(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_AUTOSHOP_BUSINESS' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x36A7FD5A7194B03E, p0, p1)
end
natives.money.network_earn_autoshop_business = natives.MONEY.NETWORK_EARN_AUTOSHOP_BUSINESS

function natives.MONEY.NETWORK_EARN_AUTOSHOP_INCOME(--[[Any]] p0, --[[int]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_AUTOSHOP_INCOME' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xC66D1CF99ED7FE25, p0, p1)
end
natives.money.network_earn_autoshop_income = natives.MONEY.NETWORK_EARN_AUTOSHOP_INCOME

function natives.MONEY.NETWORK_EARN_CARCLUB_MEMBERSHIP(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_CARCLUB_MEMBERSHIP' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xBC6227792A188E2E, p0)
end
natives.money.network_earn_carclub_membership = natives.MONEY.NETWORK_EARN_CARCLUB_MEMBERSHIP

function natives.MONEY.NETWORK_EARN_DAILY_VEHICLE(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_DAILY_VEHICLE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x533073E8A596008C, p0, p1)
end
natives.money.network_earn_daily_vehicle = natives.MONEY.NETWORK_EARN_DAILY_VEHICLE

function natives.MONEY.NETWORK_EARN_DAILY_VEHICLE_BONUS(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_DAILY_VEHICLE_BONUS' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xFE65AFE7308E32B2, p0)
end
natives.money.network_earn_daily_vehicle_bonus = natives.MONEY.NETWORK_EARN_DAILY_VEHICLE_BONUS

function natives.MONEY.NETWORK_EARN_TUNER_AWARD(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_TUNER_AWARD' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0xB846F547D3792DF6, p0, p1, p2)
end
natives.money.network_earn_tuner_award = natives.MONEY.NETWORK_EARN_TUNER_AWARD

function natives.MONEY.NETWORK_EARN_TUNER_ROBBERY(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3, --[[Any]] p4) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_TUNER_ROBBERY' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")

	local result = native_call(0xBCB266247193AC61, p0, p1, p2, p3, p4)
end
natives.money.network_earn_tuner_robbery = natives.MONEY.NETWORK_EARN_TUNER_ROBBERY

function natives.MONEY.NETWORK_EARN_UPGRADE_AUTOSHOP(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_UPGRADE_AUTOSHOP' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xC10322A8D3E061EE, p0, p1)
end
natives.money.network_earn_upgrade_autoshop = natives.MONEY.NETWORK_EARN_UPGRADE_AUTOSHOP

function natives.MONEY.NETWORK_SPEND_INTERACTION_MENU_ABILITY(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPEND_INTERACTION_MENU_ABILITY' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x93AA4165CB67E925, p0, p1, p2, p3)
end
natives.money.network_spend_interaction_menu_ability = natives.MONEY.NETWORK_SPEND_INTERACTION_MENU_ABILITY

function natives.MONEY.NETWORK_SPEND_SET_COMMON_FIELDS(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[BOOL]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPEND_SET_COMMON_FIELDS' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "boolean", "Arg #4 (p3) must be a boolean.")

	local result = native_call(0xB9F7A469460E7A4A, p0, p1, p2, p3)
end
natives.money.network_spend_set_common_fields = natives.MONEY.NETWORK_SPEND_SET_COMMON_FIELDS

function natives.MONEY.NETWORK_SPEND_SET_DISCOUNT(--[[BOOL]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPEND_SET_DISCOUNT' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0x7E2F4E8F44CAF4E0, p0)
end
natives.money.network_spend_set_discount = natives.MONEY.NETWORK_SPEND_SET_DISCOUNT

function natives.MONEY.NETWORK_SPEND_BUY_AGENCY(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPEND_BUY_AGENCY' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0xEA8CD3C9B3C35884, p0, p1, p2, p3)
end
natives.money.network_spend_buy_agency = natives.MONEY.NETWORK_SPEND_BUY_AGENCY

function natives.MONEY.NETWORK_SPEND_UPGRADE_AGENCY(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPEND_UPGRADE_AGENCY' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x6CCA64840589A3B6, p0, p1, p2, p3)
end
natives.money.network_spend_upgrade_agency = natives.MONEY.NETWORK_SPEND_UPGRADE_AGENCY

function natives.MONEY.NETWORK_SPEND_AGENCY(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3, --[[Any]] p4) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPEND_AGENCY' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")

	local result = native_call(0x1B2120405080125C, p0, p1, p2, p3, p4)
end
natives.money.network_spend_agency = natives.MONEY.NETWORK_SPEND_AGENCY

function natives.MONEY.NETWORK_SPEND_HIDDEN(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPEND_HIDDEN' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0xBF8793B91EA094A7, p0, p1, p2, p3)
end
natives.money.network_spend_hidden = natives.MONEY.NETWORK_SPEND_HIDDEN

function natives.MONEY.NETWORK_SPEND_SOURCE_BIKE(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPEND_SOURCE_BIKE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0xD9DF467CBE4398C8, p0, p1, p2, p3)
end
natives.money.network_spend_source_bike = natives.MONEY.NETWORK_SPEND_SOURCE_BIKE

function natives.MONEY.NETWORK_SPEND_COMP_SUV(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPEND_COMP_SUV' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0xD86581F9E7CDA383, p0, p1, p2, p3)
end
natives.money.network_spend_comp_suv = natives.MONEY.NETWORK_SPEND_COMP_SUV

function natives.MONEY.NETWORK_SPEND_SUV_FST_TRVL(--[[int]] p0, --[[BOOL]] p1, --[[BOOL]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPEND_SUV_FST_TRVL' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x61A2DF64ED2D396E, p0, p1, p2, p3)
end
natives.money.network_spend_suv_fst_trvl = natives.MONEY.NETWORK_SPEND_SUV_FST_TRVL

function natives.MONEY.NETWORK_SPEND_SUPPLY(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPEND_SUPPLY' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0xEBD482B82ACB8BAD, p0, p1, p2, p3)
end
natives.money.network_spend_supply = natives.MONEY.NETWORK_SPEND_SUPPLY

function natives.MONEY.NETWORK_SPEND_BIKE_SHOP(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPEND_BIKE_SHOP' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x923AEA8E78F8DF0B, p0, p1, p2, p3)
end
natives.money.network_spend_bike_shop = natives.MONEY.NETWORK_SPEND_BIKE_SHOP

function natives.MONEY.NETWORK_SPEND_VEHICLE_REQUESTED(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3, --[[Any]] p4) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPEND_VEHICLE_REQUESTED' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")

	local result = native_call(0x02D24A35A9CC3503, p0, p1, p2, p3, p4)
end
natives.money.network_spend_vehicle_requested = natives.MONEY.NETWORK_SPEND_VEHICLE_REQUESTED

function natives.MONEY.NETWORK_SPEND_GUNRUNNING(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPEND_GUNRUNNING' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x2CEB0E0BC2A77C05, p0, p1, p2, p3)
end
natives.money.network_spend_gunrunning = natives.MONEY.NETWORK_SPEND_GUNRUNNING

function natives.MONEY.NETWORK_EARN_AGENCY_SAFE(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_AGENCY_SAFE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x663B4B9D11742A12, p0)
end
natives.money.network_earn_agency_safe = natives.MONEY.NETWORK_EARN_AGENCY_SAFE

function natives.MONEY.NETWORK_EARN_AWARD_CONTRACT(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_AWARD_CONTRACT' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x146D4EB6D22A403F, p0, p1)
end
natives.money.network_earn_award_contract = natives.MONEY.NETWORK_EARN_AWARD_CONTRACT

function natives.MONEY.NETWORK_EARN_AGENCY_CONTRACT(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_AGENCY_CONTRACT' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x38482AD49CB905C7, p0, p1)
end
natives.money.network_earn_agency_contract = natives.MONEY.NETWORK_EARN_AGENCY_CONTRACT

function natives.MONEY.NETWORK_EARN_AWARD_PHONE(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_AWARD_PHONE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x7397A115030F1BE3, p0, p1)
end
natives.money.network_earn_award_phone = natives.MONEY.NETWORK_EARN_AWARD_PHONE

function natives.MONEY.NETWORK_EARN_AGENCY_PHONE(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_AGENCY_PHONE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0xE29F3D5FA63B1B82, p0, p1, p2)
end
natives.money.network_earn_agency_phone = natives.MONEY.NETWORK_EARN_AGENCY_PHONE

function natives.MONEY.NETWORK_EARN_AWARD_FIXER_MISSION(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_AWARD_FIXER_MISSION' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x88D6C327D6C57C45, p0, p1)
end
natives.money.network_earn_award_fixer_mission = natives.MONEY.NETWORK_EARN_AWARD_FIXER_MISSION

function natives.MONEY.NETWORK_EARN_FIXER_PREP(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_FIXER_PREP' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x6283E5DE4C4460C6, p0, p1)
end
natives.money.network_earn_fixer_prep = natives.MONEY.NETWORK_EARN_FIXER_PREP

function natives.MONEY.NETWORK_EARN_FIXER_FINALE(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_FIXER_FINALE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xBA154373C5FE51E8, p0, p1)
end
natives.money.network_earn_fixer_finale = natives.MONEY.NETWORK_EARN_FIXER_FINALE

function natives.MONEY.NETWORK_EARN_FIXER_AGENCY_SHORT_TRIP(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_FIXER_AGENCY_SHORT_TRIP' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xF4A8E57460BF2037, p0, p1)
end
natives.money.network_earn_fixer_agency_short_trip = natives.MONEY.NETWORK_EARN_FIXER_AGENCY_SHORT_TRIP

function natives.MONEY.NETWORK_EARN_AWARD_SHORT_TRIP(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_AWARD_SHORT_TRIP' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x5B4DBDED84D6A420, p0, p1)
end
natives.money.network_earn_award_short_trip = natives.MONEY.NETWORK_EARN_AWARD_SHORT_TRIP

function natives.MONEY.NETWORK_EARN_FIXER_RIVAL_DELIVERY(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_FIXER_RIVAL_DELIVERY' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x235D41210B3A1A5E, p0, p1)
end
natives.money.network_earn_fixer_rival_delivery = natives.MONEY.NETWORK_EARN_FIXER_RIVAL_DELIVERY

function natives.MONEY.NETWORK_EARN_UPGRADE_AGENCY(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_UPGRADE_AGENCY' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xD07C7C3F1995108C, p0, p1)
end
natives.money.network_earn_upgrade_agency = natives.MONEY.NETWORK_EARN_UPGRADE_AGENCY

function natives.MONEY.NETWORK_SPEND_APARTMENT_UTILITIES(--[[int]] amount, --[[BOOL]] p1, --[[BOOL]] p2, --[[Any*]] data) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPEND_APARTMENT_UTILITIES' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")
	assert(type(data) == "userdata", "Arg #4 (data) must be a userdata.")

	local result = native_call(0x1254B5B3925EFD3D, amount, p1, p2, data)
end
natives.money.network_spend_apartment_utilities = natives.MONEY.NETWORK_SPEND_APARTMENT_UTILITIES

function natives.MONEY.NETWORK_SPEND_BUSINESS_PROPERTY_FEES(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_SPEND_BUSINESS_PROPERTY_FEES' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x92D1CFDA1227FF1C, p0, p1, p2, p3)
end
natives.money.network_spend_business_property_fees = natives.MONEY.NETWORK_SPEND_BUSINESS_PROPERTY_FEES

function natives.MONEY.NETWORK_EARN_SIGHTSEEING_REWARD(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_SIGHTSEEING_REWARD' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x45087AE480B233AC, p0, p1, p2, p3)
end
natives.money.network_earn_sightseeing_reward = natives.MONEY.NETWORK_EARN_SIGHTSEEING_REWARD

function natives.MONEY.NETWORK_EARN_BIKER_SHOP(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_BIKER_SHOP' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x2C5809EB9DF57257, p0, p1)
end
natives.money.network_earn_biker_shop = natives.MONEY.NETWORK_EARN_BIKER_SHOP

function natives.MONEY.NETWORK_EARN_BIKER(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_EARN_BIKER' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x71BEC32FA466E105, p0)
end
natives.money.network_earn_biker = natives.MONEY.NETWORK_EARN_BIKER

function natives.MONEY.NETWORK_YOHAN_SOURCE_GOODS(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_YOHAN_SOURCE_GOODS' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x59498BC8B1C8B15C, p0, p1, p2, p3)
end
natives.money.network_yohan_source_goods = natives.MONEY.NETWORK_YOHAN_SOURCE_GOODS

function natives.MONEY.NETWORK_GET_VC_BANK_BALANCE() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_GET_VC_BANK_BALANCE' due to disabled trusted mode")

	local result = native_call(0x76EF28DA05EA395A)
	return result:__tointeger()
end
natives.money.network_get_vc_bank_balance = natives.MONEY.NETWORK_GET_VC_BANK_BALANCE

function natives.MONEY.NETWORK_GET_VC_WALLET_BALANCE(--[[int]] characterSlot) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_GET_VC_WALLET_BALANCE' due to disabled trusted mode")

	assert(type(characterSlot) == "number", "Arg #1 (characterSlot) must be a number.")

	local result = native_call(0xA40F9C2623F6A8B5, characterSlot)
	return result:__tointeger()
end
natives.money.network_get_vc_wallet_balance = natives.MONEY.NETWORK_GET_VC_WALLET_BALANCE

function natives.MONEY.NETWORK_GET_VC_BALANCE() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_GET_VC_BALANCE' due to disabled trusted mode")

	local result = native_call(0x5CBAD97E059E1B94)
	return result:__tointeger()
end
natives.money.network_get_vc_balance = natives.MONEY.NETWORK_GET_VC_BALANCE

function natives.MONEY.NETWORK_GET_EVC_BALANCE() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_GET_EVC_BALANCE' due to disabled trusted mode")

	local result = native_call(0x5D1E75F91C07DEE5)
	return result:__tointeger()
end
natives.money.network_get_evc_balance = natives.MONEY.NETWORK_GET_EVC_BALANCE

function natives.MONEY.NETWORK_GET_PVC_BALANCE() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_GET_PVC_BALANCE' due to disabled trusted mode")

	local result = native_call(0x4F54F3B6C202FB4E)
	return result:__tointeger()
end
natives.money.network_get_pvc_balance = natives.MONEY.NETWORK_GET_PVC_BALANCE

function natives.MONEY.NETWORK_GET_STRING_WALLET_BALANCE(--[[int]] characterSlot) -- Returns const char*
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_GET_STRING_WALLET_BALANCE' due to disabled trusted mode")

	assert(type(characterSlot) == "number", "Arg #1 (characterSlot) must be a number.")

	local result = native_call(0xF9B10B529DCFB33B, characterSlot)
	return result:__tostring(true)
end
natives.money.network_get_string_wallet_balance = natives.MONEY.NETWORK_GET_STRING_WALLET_BALANCE

function natives.MONEY.NETWORK_GET_STRING_BANK_BALANCE() -- Returns const char*
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_GET_STRING_BANK_BALANCE' due to disabled trusted mode")

	local result = native_call(0xA6FA3979BED01B81)
	return result:__tostring(true)
end
natives.money.network_get_string_bank_balance = natives.MONEY.NETWORK_GET_STRING_BANK_BALANCE

function natives.MONEY.NETWORK_GET_STRING_BANK_WALLET_BALANCE() -- Returns const char*
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_GET_STRING_BANK_WALLET_BALANCE' due to disabled trusted mode")

	local result = native_call(0x700AF71AE615E6DD)
	return result:__tostring(true)
end
natives.money.network_get_string_bank_wallet_balance = natives.MONEY.NETWORK_GET_STRING_BANK_WALLET_BALANCE

--[[
Returns true if wallet balance >= amount.
]]
function natives.MONEY.NETWORK_GET_CAN_SPEND_FROM_WALLET(--[[int]] amount, --[[int]] characterSlot) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_GET_CAN_SPEND_FROM_WALLET' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")
	assert(type(characterSlot) == "number", "Arg #2 (characterSlot) must be a number.")

	local result = native_call(0xED5AB8860415BABA, amount, characterSlot)
	return result:__tointeger() ~= 0
end
natives.money.network_get_can_spend_from_wallet = natives.MONEY.NETWORK_GET_CAN_SPEND_FROM_WALLET

--[[
Returns true if bank balance >= amount.
]]
function natives.MONEY.NETWORK_GET_CAN_SPEND_FROM_BANK(--[[int]] amount) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_GET_CAN_SPEND_FROM_BANK' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")

	local result = native_call(0xA31FD6A0865B6D14, amount)
	return result:__tointeger() ~= 0
end
natives.money.network_get_can_spend_from_bank = natives.MONEY.NETWORK_GET_CAN_SPEND_FROM_BANK

--[[
Returns true if bank balance + wallet balance >= amount.
]]
function natives.MONEY.NETWORK_GET_CAN_SPEND_FROM_BANK_AND_WALLET(--[[int]] amount, --[[int]] characterSlot) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_GET_CAN_SPEND_FROM_BANK_AND_WALLET' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")
	assert(type(characterSlot) == "number", "Arg #2 (characterSlot) must be a number.")

	local result = native_call(0xDC18531D7019A535, amount, characterSlot)
	return result:__tointeger() ~= 0
end
natives.money.network_get_can_spend_from_bank_and_wallet = natives.MONEY.NETWORK_GET_CAN_SPEND_FROM_BANK_AND_WALLET

--[[
Retturns the same value as NETWORK_GET_REMAINING_TRANSFER_BALANCE.
]]
function natives.MONEY.NETWORK_GET_PVC_TRANSFER_BALANCE() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_GET_PVC_TRANSFER_BALANCE' due to disabled trusted mode")

	local result = native_call(0x13A8DE2FD77D04F3)
	return result:__tointeger()
end
natives.money.network_get_pvc_transfer_balance = natives.MONEY.NETWORK_GET_PVC_TRANSFER_BALANCE

--[[
Returns false if amount > wallet balance or daily transfer limit has been hit.
]]
function natives.MONEY.NETWORK_GET_CAN_TRANSFER_CASH(--[[int]] amount) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_GET_CAN_TRANSFER_CASH' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")

	local result = native_call(0x08E8EEADFD0DC4A0, amount)
	return result:__tointeger() ~= 0
end
natives.money.network_get_can_transfer_cash = natives.MONEY.NETWORK_GET_CAN_TRANSFER_CASH

function natives.MONEY.NETWORK_CAN_RECEIVE_PLAYER_CASH(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_CAN_RECEIVE_PLAYER_CASH' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x5D17BE59D2123284, p0, p1, p2, p3)
	return result:__tointeger() ~= 0
end
natives.money.network_can_receive_player_cash = natives.MONEY.NETWORK_CAN_RECEIVE_PLAYER_CASH

--[[
Returns the same value as NETWORK_GET_PVC_TRANSFER_BALANCE.
]]
function natives.MONEY.NETWORK_GET_REMAINING_TRANSFER_BALANCE() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.NETWORK_GET_REMAINING_TRANSFER_BALANCE' due to disabled trusted mode")

	local result = native_call(0xEA560AC9EEB1E19B)
	return result:__tointeger()
end
natives.money.network_get_remaining_transfer_balance = natives.MONEY.NETWORK_GET_REMAINING_TRANSFER_BALANCE

--[[
Does nothing and always returns 0.
]]
function natives.MONEY.WITHDRAW_VC(--[[int]] amount) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.WITHDRAW_VC' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")

	local result = native_call(0xF70EFA14FE091429, amount)
	return result:__tointeger()
end
natives.money.withdraw_vc = natives.MONEY.WITHDRAW_VC

--[[
Does nothing and always returns false.
]]
function natives.MONEY.DEPOSIT_VC(--[[int]] amount) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.DEPOSIT_VC' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")

	local result = native_call(0xE260E0BB9CD995AC, amount)
	return result:__tointeger() ~= 0
end
natives.money.deposit_vc = natives.MONEY.DEPOSIT_VC

--[[
This function is hard-coded to always return 1.
]]
function natives.MONEY.HAS_VC_WITHDRAWAL_COMPLETED(--[[Any]] p0) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.HAS_VC_WITHDRAWAL_COMPLETED' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xE154B48B68EF72BC, p0)
	return result:__tointeger() ~= 0
end
natives.money.has_vc_withdrawal_completed = natives.MONEY.HAS_VC_WITHDRAWAL_COMPLETED

--[[
This function is hard-coded to always return 1.
]]
function natives.MONEY.WAS_VC_WITHDRAWAL_SUCCESSFUL(--[[Any]] p0) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'MONEY.WAS_VC_WITHDRAWAL_SUCCESSFUL' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x6FCF8DDEA146C45B, p0)
	return result:__tointeger() ~= 0
end
natives.money.was_vc_withdrawal_successful = natives.MONEY.WAS_VC_WITHDRAWAL_SUCCESSFUL


natives.NETSHOPPING = {}
natives.netshopping = {}

function natives.NETSHOPPING.NET_GAMESERVER_USE_SERVER_TRANSACTIONS() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETSHOPPING.NET_GAMESERVER_USE_SERVER_TRANSACTIONS' due to disabled trusted mode")

	local result = native_call(0x7D2708796355B20B)
	return result:__tointeger() ~= 0
end
natives.netshopping.net_gameserver_use_server_transactions = natives.NETSHOPPING.NET_GAMESERVER_USE_SERVER_TRANSACTIONS

function natives.NETSHOPPING.NET_GAMESERVER_CATALOG_ITEM_IS_VALID(--[[const char*]] name) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETSHOPPING.NET_GAMESERVER_CATALOG_ITEM_IS_VALID' due to disabled trusted mode")

	assert(type(name) == "string", "Arg #1 (name) must be a string.")

	local result = native_call(0xBD4D7EAF8A30F637, name)
	return result:__tointeger() ~= 0
end
natives.netshopping.net_gameserver_catalog_item_is_valid = natives.NETSHOPPING.NET_GAMESERVER_CATALOG_ITEM_IS_VALID

function natives.NETSHOPPING.NET_GAMESERVER_CATALOG_ITEM_KEY_IS_VALID(--[[Hash]] hash) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETSHOPPING.NET_GAMESERVER_CATALOG_ITEM_KEY_IS_VALID' due to disabled trusted mode")

	assert(type(hash) == "number", "Arg #1 (hash) must be a number.")

	local result = native_call(0x247F0F73A182EA0B, hash)
	return result:__tointeger() ~= 0
end
natives.netshopping.net_gameserver_catalog_item_key_is_valid = natives.NETSHOPPING.NET_GAMESERVER_CATALOG_ITEM_KEY_IS_VALID

--[[
bool is always true in game scripts
]]
function natives.NETSHOPPING.NET_GAMESERVER_GET_PRICE(--[[Hash]] itemHash, --[[Hash]] categoryHash, --[[BOOL]] p2) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETSHOPPING.NET_GAMESERVER_GET_PRICE' due to disabled trusted mode")

	assert(type(itemHash) == "number", "Arg #1 (itemHash) must be a number.")
	assert(type(categoryHash) == "number", "Arg #2 (categoryHash) must be a number.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")

	local result = native_call(0xC27009422FCCA88D, itemHash, categoryHash, p2)
	return result:__tointeger()
end
natives.netshopping.net_gameserver_get_price = natives.NETSHOPPING.NET_GAMESERVER_GET_PRICE

function natives.NETSHOPPING.NET_GAMESERVER_CATALOG_IS_VALID() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETSHOPPING.NET_GAMESERVER_CATALOG_IS_VALID' due to disabled trusted mode")

	local result = native_call(0x3C4487461E9B0DCB)
	return result:__tointeger() ~= 0
end
natives.netshopping.net_gameserver_catalog_is_valid = natives.NETSHOPPING.NET_GAMESERVER_CATALOG_IS_VALID

function natives.NETSHOPPING.NET_GAMESERVER_IS_CATALOG_CURRENT() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETSHOPPING.NET_GAMESERVER_IS_CATALOG_CURRENT' due to disabled trusted mode")

	local result = native_call(0x2B949A1E6AEC8F6A)
	return result:__tointeger() ~= 0
end
natives.netshopping.net_gameserver_is_catalog_current = natives.NETSHOPPING.NET_GAMESERVER_IS_CATALOG_CURRENT

function natives.NETSHOPPING.NET_GAMESERVER_GET_CATALOG_CLOUD_CRC() -- Returns Hash
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETSHOPPING.NET_GAMESERVER_GET_CATALOG_CLOUD_CRC' due to disabled trusted mode")

	local result = native_call(0x85F6C9ABA1DE2BCF)
	return result:__tointeger()
end
natives.netshopping.net_gameserver_get_catalog_cloud_crc = natives.NETSHOPPING.NET_GAMESERVER_GET_CATALOG_CLOUD_CRC

function natives.NETSHOPPING.NET_GAMESERVER_REFRESH_SERVER_CATALOG() -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETSHOPPING.NET_GAMESERVER_REFRESH_SERVER_CATALOG' due to disabled trusted mode")

	local result = native_call(0x357B152EF96C30B6)
	return result:__tointeger()
end
natives.netshopping.net_gameserver_refresh_server_catalog = natives.NETSHOPPING.NET_GAMESERVER_REFRESH_SERVER_CATALOG

function natives.NETSHOPPING.NET_GAMESERVER_RETRIEVE_CATALOG_REFRESH_STATUS(--[[int*]] state) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETSHOPPING.NET_GAMESERVER_RETRIEVE_CATALOG_REFRESH_STATUS' due to disabled trusted mode")

	assert(type(state) == "userdata", "Arg #1 (state) must be a userdata.")

	local result = native_call(0xCF38DAFBB49EDE5E, state)
	return result:__tointeger() ~= 0
end
natives.netshopping.net_gameserver_retrieve_catalog_refresh_status = natives.NETSHOPPING.NET_GAMESERVER_RETRIEVE_CATALOG_REFRESH_STATUS

function natives.NETSHOPPING.NET_GAMESERVER_INIT_SESSION() -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETSHOPPING.NET_GAMESERVER_INIT_SESSION' due to disabled trusted mode")

	local result = native_call(0xE3E5A7C64CA2C6ED)
	return result:__tointeger()
end
natives.netshopping.net_gameserver_init_session = natives.NETSHOPPING.NET_GAMESERVER_INIT_SESSION

function natives.NETSHOPPING.NET_GAMESERVER_RETRIEVE_INIT_SESSION_STATUS(--[[int*]] p0) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETSHOPPING.NET_GAMESERVER_RETRIEVE_INIT_SESSION_STATUS' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")

	local result = native_call(0x0395CB47B022E62C, p0)
	return result:__tointeger() ~= 0
end
natives.netshopping.net_gameserver_retrieve_init_session_status = natives.NETSHOPPING.NET_GAMESERVER_RETRIEVE_INIT_SESSION_STATUS

function natives.NETSHOPPING.NET_GAMESERVER_START_SESSION(--[[int]] charSlot) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETSHOPPING.NET_GAMESERVER_START_SESSION' due to disabled trusted mode")

	assert(type(charSlot) == "number", "Arg #1 (charSlot) must be a number.")

	local result = native_call(0xA135AC892A58FC07, charSlot)
	return result:__tointeger() ~= 0
end
natives.netshopping.net_gameserver_start_session = natives.NETSHOPPING.NET_GAMESERVER_START_SESSION

function natives.NETSHOPPING.NET_GAMESERVER_START_SESSION_PENDING() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETSHOPPING.NET_GAMESERVER_START_SESSION_PENDING' due to disabled trusted mode")

	local result = native_call(0x72EB7BA9B69BF6AB)
	return result:__tointeger() ~= 0
end
natives.netshopping.net_gameserver_start_session_pending = natives.NETSHOPPING.NET_GAMESERVER_START_SESSION_PENDING

function natives.NETSHOPPING.NET_GAMESERVER_RETRIEVE_START_SESSION_STATUS(--[[int*]] p0) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETSHOPPING.NET_GAMESERVER_RETRIEVE_START_SESSION_STATUS' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")

	local result = native_call(0x170910093218C8B9, p0)
	return result:__tointeger() ~= 0
end
natives.netshopping.net_gameserver_retrieve_start_session_status = natives.NETSHOPPING.NET_GAMESERVER_RETRIEVE_START_SESSION_STATUS

function natives.NETSHOPPING.NET_GAMESERVER_RETRIEVE_SESSION_ERROR_CODE(--[[int*]] p0) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETSHOPPING.NET_GAMESERVER_RETRIEVE_SESSION_ERROR_CODE' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")

	local result = native_call(0xC13C38E47EA5DF31, p0)
	return result:__tointeger() ~= 0
end
natives.netshopping.net_gameserver_retrieve_session_error_code = natives.NETSHOPPING.NET_GAMESERVER_RETRIEVE_SESSION_ERROR_CODE

function natives.NETSHOPPING.NET_GAMESERVER_IS_SESSION_VALID(--[[int]] charSlot) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETSHOPPING.NET_GAMESERVER_IS_SESSION_VALID' due to disabled trusted mode")

	assert(type(charSlot) == "number", "Arg #1 (charSlot) must be a number.")

	local result = native_call(0xB24F0944DA203D9E, charSlot)
	return result:__tointeger() ~= 0
end
natives.netshopping.net_gameserver_is_session_valid = natives.NETSHOPPING.NET_GAMESERVER_IS_SESSION_VALID

function natives.NETSHOPPING.NET_GAMESERVER_CLEAR_SESSION(--[[int]] p0) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETSHOPPING.NET_GAMESERVER_CLEAR_SESSION' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x74A0FD0688F1EE45, p0)
	return result:__tointeger()
end
natives.netshopping.net_gameserver_clear_session = natives.NETSHOPPING.NET_GAMESERVER_CLEAR_SESSION

function natives.NETSHOPPING.NET_GAMESERVER_SESSION_APPLY_RECEIVED_DATA(--[[int]] charSlot) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETSHOPPING.NET_GAMESERVER_SESSION_APPLY_RECEIVED_DATA' due to disabled trusted mode")

	assert(type(charSlot) == "number", "Arg #1 (charSlot) must be a number.")

	local result = native_call(0x2F41D51BA3BCD1F1, charSlot)
	return result:__tointeger() ~= 0
end
natives.netshopping.net_gameserver_session_apply_received_data = natives.NETSHOPPING.NET_GAMESERVER_SESSION_APPLY_RECEIVED_DATA

function natives.NETSHOPPING.NET_GAMESERVER_IS_SESSION_REFRESH_PENDING() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETSHOPPING.NET_GAMESERVER_IS_SESSION_REFRESH_PENDING' due to disabled trusted mode")

	local result = native_call(0x810E8431C0614BF9)
	return result:__tointeger() ~= 0
end
natives.netshopping.net_gameserver_is_session_refresh_pending = natives.NETSHOPPING.NET_GAMESERVER_IS_SESSION_REFRESH_PENDING

--[[
Note: only one of the arguments can be set to true at a time
]]
function natives.NETSHOPPING.NET_GAMESERVER_START_SESSION_RESTART(--[[BOOL]] inventory, --[[BOOL]] playerbalance) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETSHOPPING.NET_GAMESERVER_START_SESSION_RESTART' due to disabled trusted mode")

	assert(type(inventory) == "boolean", "Arg #1 (inventory) must be a boolean.")
	assert(type(playerbalance) == "boolean", "Arg #2 (playerbalance) must be a boolean.")

	local result = native_call(0x35A1B3E1D1315CFA, inventory, playerbalance)
	return result:__tointeger() ~= 0
end
natives.netshopping.net_gameserver_start_session_restart = natives.NETSHOPPING.NET_GAMESERVER_START_SESSION_RESTART

function natives.NETSHOPPING.NET_GAMESERVER_TRANSACTION_IN_PROGRESS() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETSHOPPING.NET_GAMESERVER_TRANSACTION_IN_PROGRESS' due to disabled trusted mode")

	local result = native_call(0x613F125BA3BD2EB9)
	return result:__tointeger() ~= 0
end
natives.netshopping.net_gameserver_transaction_in_progress = natives.NETSHOPPING.NET_GAMESERVER_TRANSACTION_IN_PROGRESS

function natives.NETSHOPPING.NET_GAMESERVER_GET_SESSION_STATE_AND_STATUS(--[[int*]] p0, --[[BOOL*]] p1) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETSHOPPING.NET_GAMESERVER_GET_SESSION_STATE_AND_STATUS' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")
	assert(type(p1) == "userdata", "Arg #2 (p1) must be a userdata.")

	local result = native_call(0x897433D292B44130, p0, p1)
	return result:__tointeger() ~= 0
end
natives.netshopping.net_gameserver_get_session_state_and_status = natives.NETSHOPPING.NET_GAMESERVER_GET_SESSION_STATE_AND_STATUS

function natives.NETSHOPPING.NET_GAMESERVER_BASKET_START(--[[int*]] transactionId, --[[Hash]] categoryHash, --[[Hash]] actionHash, --[[int]] flags) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETSHOPPING.NET_GAMESERVER_BASKET_START' due to disabled trusted mode")

	assert(type(transactionId) == "userdata", "Arg #1 (transactionId) must be a userdata.")
	assert(type(categoryHash) == "number", "Arg #2 (categoryHash) must be a number.")
	assert(type(actionHash) == "number", "Arg #3 (actionHash) must be a number.")
	assert(type(flags) == "number", "Arg #4 (flags) must be a number.")

	local result = native_call(0x279F08B1A4B29B7E, transactionId, categoryHash, actionHash, flags)
	return result:__tointeger() ~= 0
end
natives.netshopping.net_gameserver_basket_start = natives.NETSHOPPING.NET_GAMESERVER_BASKET_START

function natives.NETSHOPPING.NET_GAMESERVER_BASKET_END() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETSHOPPING.NET_GAMESERVER_BASKET_END' due to disabled trusted mode")

	local result = native_call(0xFA336E7F40C0A0D0)
	return result:__tointeger() ~= 0
end
natives.netshopping.net_gameserver_basket_end = natives.NETSHOPPING.NET_GAMESERVER_BASKET_END

function natives.NETSHOPPING.NET_GAMESERVER_BASKET_IS_ACTIVE() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETSHOPPING.NET_GAMESERVER_BASKET_IS_ACTIVE' due to disabled trusted mode")

	local result = native_call(0xA65568121DF2EA26)
	return result:__tointeger() ~= 0
end
natives.netshopping.net_gameserver_basket_is_active = natives.NETSHOPPING.NET_GAMESERVER_BASKET_IS_ACTIVE

function natives.NETSHOPPING.NET_GAMESERVER_BASKET_ADD_ITEM(--[[Any*]] itemData, --[[int]] quantity) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETSHOPPING.NET_GAMESERVER_BASKET_ADD_ITEM' due to disabled trusted mode")

	assert(type(itemData) == "userdata", "Arg #1 (itemData) must be a userdata.")
	assert(type(quantity) == "number", "Arg #2 (quantity) must be a number.")

	local result = native_call(0xF30980718C8ED876, itemData, quantity)
	return result:__tointeger() ~= 0
end
natives.netshopping.net_gameserver_basket_add_item = natives.NETSHOPPING.NET_GAMESERVER_BASKET_ADD_ITEM

function natives.NETSHOPPING.NET_GAMESERVER_BASKET_IS_FULL() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETSHOPPING.NET_GAMESERVER_BASKET_IS_FULL' due to disabled trusted mode")

	local result = native_call(0x27F76CC6C55AD30E)
	return result:__tointeger() ~= 0
end
natives.netshopping.net_gameserver_basket_is_full = natives.NETSHOPPING.NET_GAMESERVER_BASKET_IS_FULL

function natives.NETSHOPPING.NET_GAMESERVER_BASKET_APPLY_SERVER_DATA(--[[Any]] p0, --[[Any*]] p1) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETSHOPPING.NET_GAMESERVER_BASKET_APPLY_SERVER_DATA' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "userdata", "Arg #2 (p1) must be a userdata.")

	local result = native_call(0xE1A0450ED46A7812, p0, p1)
	return result:__tointeger() ~= 0
end
natives.netshopping.net_gameserver_basket_apply_server_data = natives.NETSHOPPING.NET_GAMESERVER_BASKET_APPLY_SERVER_DATA

function natives.NETSHOPPING.NET_GAMESERVER_CHECKOUT_START(--[[int]] transactionId) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETSHOPPING.NET_GAMESERVER_CHECKOUT_START' due to disabled trusted mode")

	assert(type(transactionId) == "number", "Arg #1 (transactionId) must be a number.")

	local result = native_call(0x39BE7CEA8D9CC8E6, transactionId)
	return result:__tointeger() ~= 0
end
natives.netshopping.net_gameserver_checkout_start = natives.NETSHOPPING.NET_GAMESERVER_CHECKOUT_START

function natives.NETSHOPPING.NET_GAMESERVER_BEGIN_SERVICE(--[[int*]] transactionId, --[[Hash]] categoryHash, --[[Hash]] itemHash, --[[Hash]] actionTypeHash, --[[int]] value, --[[int]] flags) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETSHOPPING.NET_GAMESERVER_BEGIN_SERVICE' due to disabled trusted mode")

	assert(type(transactionId) == "userdata", "Arg #1 (transactionId) must be a userdata.")
	assert(type(categoryHash) == "number", "Arg #2 (categoryHash) must be a number.")
	assert(type(itemHash) == "number", "Arg #3 (itemHash) must be a number.")
	assert(type(actionTypeHash) == "number", "Arg #4 (actionTypeHash) must be a number.")
	assert(type(value) == "number", "Arg #5 (value) must be a number.")
	assert(type(flags) == "number", "Arg #6 (flags) must be a number.")

	local result = native_call(0x3C5FD37B5499582E, transactionId, categoryHash, itemHash, actionTypeHash, value, flags)
	return result:__tointeger() ~= 0
end
natives.netshopping.net_gameserver_begin_service = natives.NETSHOPPING.NET_GAMESERVER_BEGIN_SERVICE

function natives.NETSHOPPING.NET_GAMESERVER_END_SERVICE(--[[int]] transactionId) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETSHOPPING.NET_GAMESERVER_END_SERVICE' due to disabled trusted mode")

	assert(type(transactionId) == "number", "Arg #1 (transactionId) must be a number.")

	local result = native_call(0xE2A99A9B524BEFFF, transactionId)
	return result:__tointeger() ~= 0
end
natives.netshopping.net_gameserver_end_service = natives.NETSHOPPING.NET_GAMESERVER_END_SERVICE

function natives.NETSHOPPING.NET_GAMESERVER_DELETE_CHARACTER(--[[int]] slot, --[[BOOL]] transfer, --[[Hash]] reason) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETSHOPPING.NET_GAMESERVER_DELETE_CHARACTER' due to disabled trusted mode")

	assert(type(slot) == "number", "Arg #1 (slot) must be a number.")
	assert(type(transfer) == "boolean", "Arg #2 (transfer) must be a boolean.")
	assert(type(reason) == "number", "Arg #3 (reason) must be a number.")

	local result = native_call(0x51F1A8E48C3D2F6D, slot, transfer, reason)
	return result:__tointeger() ~= 0
end
natives.netshopping.net_gameserver_delete_character = natives.NETSHOPPING.NET_GAMESERVER_DELETE_CHARACTER

function natives.NETSHOPPING.NET_GAMESERVER_DELETE_CHARACTER_GET_STATUS() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETSHOPPING.NET_GAMESERVER_DELETE_CHARACTER_GET_STATUS' due to disabled trusted mode")

	local result = native_call(0x0A6D923DFFC9BD89)
	return result:__tointeger()
end
natives.netshopping.net_gameserver_delete_character_get_status = natives.NETSHOPPING.NET_GAMESERVER_DELETE_CHARACTER_GET_STATUS

function natives.NETSHOPPING.NET_GAMESERVER_DELETE_SET_TELEMETRY_NONCE_SEED() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETSHOPPING.NET_GAMESERVER_DELETE_SET_TELEMETRY_NONCE_SEED' due to disabled trusted mode")

	local result = native_call(0x112CEF1615A1139F)
	return result:__tointeger() ~= 0
end
natives.netshopping.net_gameserver_delete_set_telemetry_nonce_seed = natives.NETSHOPPING.NET_GAMESERVER_DELETE_SET_TELEMETRY_NONCE_SEED

function natives.NETSHOPPING.NET_GAMESERVER_TRANSFER_BANK_TO_WALLET(--[[int]] charSlot, --[[int]] amount) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETSHOPPING.NET_GAMESERVER_TRANSFER_BANK_TO_WALLET' due to disabled trusted mode")

	assert(type(charSlot) == "number", "Arg #1 (charSlot) must be a number.")
	assert(type(amount) == "number", "Arg #2 (amount) must be a number.")

	local result = native_call(0xD47A2C1BA117471D, charSlot, amount)
	return result:__tointeger() ~= 0
end
natives.netshopping.net_gameserver_transfer_bank_to_wallet = natives.NETSHOPPING.NET_GAMESERVER_TRANSFER_BANK_TO_WALLET

function natives.NETSHOPPING.NET_GAMESERVER_TRANSFER_WALLET_TO_BANK(--[[int]] charSlot, --[[int]] amount) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETSHOPPING.NET_GAMESERVER_TRANSFER_WALLET_TO_BANK' due to disabled trusted mode")

	assert(type(charSlot) == "number", "Arg #1 (charSlot) must be a number.")
	assert(type(amount) == "number", "Arg #2 (amount) must be a number.")

	local result = native_call(0xC2F7FE5309181C7D, charSlot, amount)
	return result:__tointeger() ~= 0
end
natives.netshopping.net_gameserver_transfer_wallet_to_bank = natives.NETSHOPPING.NET_GAMESERVER_TRANSFER_WALLET_TO_BANK

--[[
Same as 0x350AA5EBC03D3BD2
]]
function natives.NETSHOPPING.NET_GAMESERVER_TRANSFER_BANK_TO_WALLET_GET_STATUS() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETSHOPPING.NET_GAMESERVER_TRANSFER_BANK_TO_WALLET_GET_STATUS' due to disabled trusted mode")

	local result = native_call(0x23789E777D14CE44)
	return result:__tointeger()
end
natives.netshopping.net_gameserver_transfer_bank_to_wallet_get_status = natives.NETSHOPPING.NET_GAMESERVER_TRANSFER_BANK_TO_WALLET_GET_STATUS

--[[
Same as 0x23789E777D14CE44
]]
function natives.NETSHOPPING.NET_GAMESERVER_TRANSFER_WALLET_TO_BANK_GET_STATUS() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETSHOPPING.NET_GAMESERVER_TRANSFER_WALLET_TO_BANK_GET_STATUS' due to disabled trusted mode")

	local result = native_call(0x350AA5EBC03D3BD2)
	return result:__tointeger()
end
natives.netshopping.net_gameserver_transfer_wallet_to_bank_get_status = natives.NETSHOPPING.NET_GAMESERVER_TRANSFER_WALLET_TO_BANK_GET_STATUS

--[[
Used to be NETWORK_SHOP_CASH_TRANSFER_SET_TELEMETRY_NONCE_SEED
]]
function natives.NETSHOPPING.NET_GAMESERVER_TRANSFER_CASH_SET_TELEMETRY_NONCE_SEED() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETSHOPPING.NET_GAMESERVER_TRANSFER_CASH_SET_TELEMETRY_NONCE_SEED' due to disabled trusted mode")

	local result = native_call(0x498C1E05CE5F7877)
	return result:__tointeger() ~= 0
end
natives.netshopping.net_gameserver_transfer_cash_set_telemetry_nonce_seed = natives.NETSHOPPING.NET_GAMESERVER_TRANSFER_CASH_SET_TELEMETRY_NONCE_SEED

function natives.NETSHOPPING.NET_GAMESERVER_SET_TELEMETRY_NONCE_SEED(--[[int]] p0) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETSHOPPING.NET_GAMESERVER_SET_TELEMETRY_NONCE_SEED' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x9507D4271988E1AE, p0)
	return result:__tointeger() ~= 0
end
natives.netshopping.net_gameserver_set_telemetry_nonce_seed = natives.NETSHOPPING.NET_GAMESERVER_SET_TELEMETRY_NONCE_SEED


natives.NETWORK = {}
natives.network = {}

--[[
Online version is defined here: update\update.rpf\common\data\version.txt

Example:

[ONLINE_VERSION_NUMBER]
1.33

_GET_ONLINE_VERSION() will return "1.33"
]]
function natives.NETWORK.GET_ONLINE_VERSION() -- Returns const char*
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.GET_ONLINE_VERSION' due to disabled trusted mode")

	local result = native_call(0xFCA9373EF340AC0A)
	return result:__tostring(true)
end
natives.network.get_online_version = natives.NETWORK.GET_ONLINE_VERSION

--[[
Returns whether the player is signed into Social Club.
]]
function natives.NETWORK.NETWORK_IS_SIGNED_IN() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IS_SIGNED_IN' due to disabled trusted mode")

	local result = native_call(0x054354A99211EB96)
	return result:__tointeger() ~= 0
end
natives.network.network_is_signed_in = natives.NETWORK.NETWORK_IS_SIGNED_IN

--[[
Returns whether the game is not in offline mode.

seemed not to work for some ppl
]]
function natives.NETWORK.NETWORK_IS_SIGNED_ONLINE() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IS_SIGNED_ONLINE' due to disabled trusted mode")

	local result = native_call(0x1077788E268557C2)
	return result:__tointeger() ~= 0
end
natives.network.network_is_signed_online = natives.NETWORK.NETWORK_IS_SIGNED_ONLINE

--[[
MulleDK19: This function is hard-coded to always return 1.
]]
function natives.NETWORK.NETWORK_IS_NP_AVAILABLE() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IS_NP_AVAILABLE' due to disabled trusted mode")

	local result = native_call(0xBD545D44CCE70597)
	return result:__tointeger() ~= 0
end
natives.network.network_is_np_available = natives.NETWORK.NETWORK_IS_NP_AVAILABLE

--[[
MulleDK19: This function is hard-coded to always return 1.
]]
function natives.NETWORK.NETWORK_IS_NP_PENDING() -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IS_NP_PENDING' due to disabled trusted mode")

	local result = native_call(0xEBCAB9E5048434F4)
	return result:__tointeger()
end
natives.network.network_is_np_pending = natives.NETWORK.NETWORK_IS_NP_PENDING

--[[
Hardcoded to return zero.

==== PS4 specific info ====

Returns some sort of unavailable reason:
-1 = REASON_INVALID
 0 = REASON_OTHER
 1 = REASON_SYSTEM_UPDATE
 2 = REASON_GAME_UPDATE
 3 = REASON_SIGNED_OUT
 4 = REASON_AGE
 5 = REASON_CONNECTION

=================================
]]
function natives.NETWORK.NETWORK_GET_NP_UNAVAILABLE_REASON() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_NP_UNAVAILABLE_REASON' due to disabled trusted mode")

	local result = native_call(0x74FB3E29E6D10FA9)
	return result:__tointeger()
end
natives.network.network_get_np_unavailable_reason = natives.NETWORK.NETWORK_GET_NP_UNAVAILABLE_REASON

--[[
MulleDK19: This function is hard-coded to always return 1.
]]
function natives.NETWORK.NETWORK_IS_CONNETED_TO_NP_PRESENCE() -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IS_CONNETED_TO_NP_PRESENCE' due to disabled trusted mode")

	local result = native_call(0x7808619F31FF22DB)
	return result:__tointeger()
end
natives.network.network_is_conneted_to_np_presence = natives.NETWORK.NETWORK_IS_CONNETED_TO_NP_PRESENCE

--[[
MulleDK19: This function is hard-coded to always return 0.
]]
function natives.NETWORK.NETWORK_IS_LOGGED_IN_TO_PSN() -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IS_LOGGED_IN_TO_PSN' due to disabled trusted mode")

	local result = native_call(0xA0FA4EC6A05DA44E)
	return result:__tointeger()
end
natives.network.network_is_logged_in_to_psn = natives.NETWORK.NETWORK_IS_LOGGED_IN_TO_PSN

--[[
Returns whether the signed-in user has valid Rockstar Online Services (ROS) credentials.
]]
function natives.NETWORK.NETWORK_HAS_VALID_ROS_CREDENTIALS() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_HAS_VALID_ROS_CREDENTIALS' due to disabled trusted mode")

	local result = native_call(0x85443FF4C328F53B)
	return result:__tointeger() ~= 0
end
natives.network.network_has_valid_ros_credentials = natives.NETWORK.NETWORK_HAS_VALID_ROS_CREDENTIALS

function natives.NETWORK.NETWORK_IS_REFRESHING_ROS_CREDENTIALS() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IS_REFRESHING_ROS_CREDENTIALS' due to disabled trusted mode")

	local result = native_call(0x8D11E61A4ABF49CC)
	return result:__tointeger() ~= 0
end
natives.network.network_is_refreshing_ros_credentials = natives.NETWORK.NETWORK_IS_REFRESHING_ROS_CREDENTIALS

function natives.NETWORK.NETWORK_IS_CLOUD_AVAILABLE() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IS_CLOUD_AVAILABLE' due to disabled trusted mode")

	local result = native_call(0x9A4CF4F48AD77302)
	return result:__tointeger() ~= 0
end
natives.network.network_is_cloud_available = natives.NETWORK.NETWORK_IS_CLOUD_AVAILABLE

function natives.NETWORK.NETWORK_HAS_SOCIAL_CLUB_ACCOUNT() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_HAS_SOCIAL_CLUB_ACCOUNT' due to disabled trusted mode")

	local result = native_call(0x67A5589628E0CFF6)
	return result:__tointeger() ~= 0
end
natives.network.network_has_social_club_account = natives.NETWORK.NETWORK_HAS_SOCIAL_CLUB_ACCOUNT

function natives.NETWORK.NETWORK_ARE_SOCIAL_CLUB_POLICIES_CURRENT() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_ARE_SOCIAL_CLUB_POLICIES_CURRENT' due to disabled trusted mode")

	local result = native_call(0xBA9775570DB788CF)
	return result:__tointeger() ~= 0
end
natives.network.network_are_social_club_policies_current = natives.NETWORK.NETWORK_ARE_SOCIAL_CLUB_POLICIES_CURRENT

--[[
If you are host, returns true else returns false.
]]
function natives.NETWORK.NETWORK_IS_HOST() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IS_HOST' due to disabled trusted mode")

	local result = native_call(0x8DB296B814EDDA07)
	return result:__tointeger() ~= 0
end
natives.network.network_is_host = natives.NETWORK.NETWORK_IS_HOST

function natives.NETWORK.NETWORK_GET_HOST_PLAYER_INDEX() -- Returns Player
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_HOST_PLAYER_INDEX' due to disabled trusted mode")

	local result = native_call(0x8251FB94DC4FDFC8)
	return result:__tointeger()
end
natives.network.network_get_host_player_index = natives.NETWORK.NETWORK_GET_HOST_PLAYER_INDEX

function natives.NETWORK.NETWORK_WAS_GAME_SUSPENDED() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_WAS_GAME_SUSPENDED' due to disabled trusted mode")

	local result = native_call(0x4237E822315D8BA9)
	return result:__tointeger() ~= 0
end
natives.network.network_was_game_suspended = natives.NETWORK.NETWORK_WAS_GAME_SUSPENDED

function natives.NETWORK.NETWORK_HAVE_ONLINE_PRIVILEGES() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_HAVE_ONLINE_PRIVILEGES' due to disabled trusted mode")

	local result = native_call(0x25CB5A9F37BFD063)
	return result:__tointeger() ~= 0
end
natives.network.network_have_online_privileges = natives.NETWORK.NETWORK_HAVE_ONLINE_PRIVILEGES

function natives.NETWORK.NETWORK_HAS_AGE_RESTRICTIONS() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_HAS_AGE_RESTRICTIONS' due to disabled trusted mode")

	local result = native_call(0x1353F87E89946207)
	return result:__tointeger() ~= 0
end
natives.network.network_has_age_restrictions = natives.NETWORK.NETWORK_HAS_AGE_RESTRICTIONS

function natives.NETWORK.NETWORK_HAVE_USER_CONTENT_PRIVILEGES(--[[int]] p0) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_HAVE_USER_CONTENT_PRIVILEGES' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x72D918C99BCACC54, p0)
	return result:__tointeger() ~= 0
end
natives.network.network_have_user_content_privileges = natives.NETWORK.NETWORK_HAVE_USER_CONTENT_PRIVILEGES

function natives.NETWORK.NETWORK_HAVE_COMMUNICATION_PRIVILEGES(--[[int]] p0, --[[Player]] player) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_HAVE_COMMUNICATION_PRIVILEGES' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(player) == "number", "Arg #2 (player) must be a number.")

	local result = native_call(0xAEEF48CDF5B6CE7C, p0, player)
	return result:__tointeger() ~= 0
end
natives.network.network_have_communication_privileges = natives.NETWORK.NETWORK_HAVE_COMMUNICATION_PRIVILEGES

function natives.NETWORK.NETWORK_CHECK_ONLINE_PRIVILEGES(--[[Any]] p0, --[[BOOL]] p1) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_CHECK_ONLINE_PRIVILEGES' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0x78321BEA235FD8CD, p0, p1)
	return result:__tointeger() ~= 0
end
natives.network.network_check_online_privileges = natives.NETWORK.NETWORK_CHECK_ONLINE_PRIVILEGES

function natives.NETWORK.NETWORK_CHECK_USER_CONTENT_PRIVILEGES(--[[int]] p0, --[[int]] p1, --[[BOOL]] p2) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_CHECK_USER_CONTENT_PRIVILEGES' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")

	local result = native_call(0x595F028698072DD9, p0, p1, p2)
	return result:__tointeger() ~= 0
end
natives.network.network_check_user_content_privileges = natives.NETWORK.NETWORK_CHECK_USER_CONTENT_PRIVILEGES

function natives.NETWORK.NETWORK_CHECK_COMMUNICATION_PRIVILEGES(--[[int]] p0, --[[int]] p1, --[[BOOL]] p2) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_CHECK_COMMUNICATION_PRIVILEGES' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")

	local result = native_call(0x83F28CE49FBBFFBA, p0, p1, p2)
	return result:__tointeger() ~= 0
end
natives.network.network_check_communication_privileges = natives.NETWORK.NETWORK_CHECK_COMMUNICATION_PRIVILEGES

function natives.NETWORK.NETWORK_CHECK_TEXT_COMMUNICATION_PRIVILEGES(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_CHECK_TEXT_COMMUNICATION_PRIVILEGES' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0x07EAB372C8841D99, p0, p1, p2)
	return result:__tointeger()
end
natives.network.network_check_text_communication_privileges = natives.NETWORK.NETWORK_CHECK_TEXT_COMMUNICATION_PRIVILEGES

function natives.NETWORK.NETWORK_IS_USING_ONLINE_PROMOTION() -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IS_USING_ONLINE_PROMOTION' due to disabled trusted mode")

	local result = native_call(0x906CA41A4B74ECA4)
	return result:__tointeger()
end
natives.network.network_is_using_online_promotion = natives.NETWORK.NETWORK_IS_USING_ONLINE_PROMOTION

function natives.NETWORK.NETWORK_SHOULD_SHOW_PROMOTION_ALERT_SCREEN() -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SHOULD_SHOW_PROMOTION_ALERT_SCREEN' due to disabled trusted mode")

	local result = native_call(0x023ACAB2DC9DC4A4)
	return result:__tointeger()
end
natives.network.network_should_show_promotion_alert_screen = natives.NETWORK.NETWORK_SHOULD_SHOW_PROMOTION_ALERT_SCREEN

function natives.NETWORK.NETWORK_HAS_SOCIAL_NETWORKING_SHARING_PRIV() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_HAS_SOCIAL_NETWORKING_SHARING_PRIV' due to disabled trusted mode")

	local result = native_call(0x76BF03FADBF154F5)
	return result:__tointeger() ~= 0
end
natives.network.network_has_social_networking_sharing_priv = natives.NETWORK.NETWORK_HAS_SOCIAL_NETWORKING_SHARING_PRIV

function natives.NETWORK.NETWORK_GET_AGE_GROUP() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_AGE_GROUP' due to disabled trusted mode")

	local result = native_call(0x9614B71F8ADB982B)
	return result:__tointeger()
end
natives.network.network_get_age_group = natives.NETWORK.NETWORK_GET_AGE_GROUP

function natives.NETWORK.NETWORK_CHECK_PRIVILEGES(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_CHECK_PRIVILEGES' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0x0CF6CC51AA18F0F8, p0, p1, p2)
	return result:__tointeger()
end
natives.network.network_check_privileges = natives.NETWORK.NETWORK_CHECK_PRIVILEGES

--[[
Hardcoded to return false.
]]
function natives.NETWORK.NETWORK_IS_PRIVILEGE_CHECK_IN_PROGRESS() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IS_PRIVILEGE_CHECK_IN_PROGRESS' due to disabled trusted mode")

	local result = native_call(0x64E5C4CC82847B73)
	return result:__tointeger() ~= 0
end
natives.network.network_is_privilege_check_in_progress = natives.NETWORK.NETWORK_IS_PRIVILEGE_CHECK_IN_PROGRESS

function natives.NETWORK.NETWORK_SET_PRIVILEGE_CHECK_RESULT_NOT_NEEDED() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SET_PRIVILEGE_CHECK_RESULT_NOT_NEEDED' due to disabled trusted mode")

	local result = native_call(0x1F7BC3539F9E0224)
end
natives.network.network_set_privilege_check_result_not_needed = natives.NETWORK.NETWORK_SET_PRIVILEGE_CHECK_RESULT_NOT_NEEDED

--[[
Hardcoded to return true.
]]
function natives.NETWORK.NETWORK_RESOLVE_PRIVILEGE_USER_CONTENT() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_RESOLVE_PRIVILEGE_USER_CONTENT' due to disabled trusted mode")

	local result = native_call(0xDE9225854F37BF72)
	return result:__tointeger() ~= 0
end
natives.network.network_resolve_privilege_user_content = natives.NETWORK.NETWORK_RESOLVE_PRIVILEGE_USER_CONTENT

function natives.NETWORK.NETWORK_HAVE_PLATFORM_SUBSCRIPTION() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_HAVE_PLATFORM_SUBSCRIPTION' due to disabled trusted mode")

	local result = native_call(0x5EA784D197556507)
	return result:__tointeger() ~= 0
end
natives.network.network_have_platform_subscription = natives.NETWORK.NETWORK_HAVE_PLATFORM_SUBSCRIPTION

function natives.NETWORK.NETWORK_IS_PLATFORM_SUBSCRIPTION_CHECK_PENDING() -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IS_PLATFORM_SUBSCRIPTION_CHECK_PENDING' due to disabled trusted mode")

	local result = native_call(0xA8ACB6459542A8C8)
	return result:__tointeger()
end
natives.network.network_is_platform_subscription_check_pending = natives.NETWORK.NETWORK_IS_PLATFORM_SUBSCRIPTION_CHECK_PENDING

function natives.NETWORK.NETWORK_SHOW_ACCOUNT_UPGRADE_UI() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SHOW_ACCOUNT_UPGRADE_UI' due to disabled trusted mode")

	local result = native_call(0x83FE8D7229593017)
end
natives.network.network_show_account_upgrade_ui = natives.NETWORK.NETWORK_SHOW_ACCOUNT_UPGRADE_UI

function natives.NETWORK.NETWORK_IS_SHOWING_SYSTEM_UI_OR_RECENTLY_REQUESTED_UPSELL() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IS_SHOWING_SYSTEM_UI_OR_RECENTLY_REQUESTED_UPSELL' due to disabled trusted mode")

	local result = native_call(0x7788DFE15016A182)
	return result:__tointeger() ~= 0
end
natives.network.network_is_showing_system_ui_or_recently_requested_upsell = natives.NETWORK.NETWORK_IS_SHOWING_SYSTEM_UI_OR_RECENTLY_REQUESTED_UPSELL

function natives.NETWORK.NETWORK_NEED_TO_START_NEW_GAME_BUT_BLOCKED() -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_NEED_TO_START_NEW_GAME_BUT_BLOCKED' due to disabled trusted mode")

	local result = native_call(0x53C10C8BD774F2C9)
	return result:__tointeger()
end
natives.network.network_need_to_start_new_game_but_blocked = natives.NETWORK.NETWORK_NEED_TO_START_NEW_GAME_BUT_BLOCKED

function natives.NETWORK.NETWORK_CAN_BAIL() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_CAN_BAIL' due to disabled trusted mode")

	local result = native_call(0x580CE4438479CC61)
	return result:__tointeger() ~= 0
end
natives.network.network_can_bail = natives.NETWORK.NETWORK_CAN_BAIL

function natives.NETWORK.NETWORK_BAIL(--[[int]] p0, --[[int]] p1, --[[int]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_BAIL' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0x95914459A87EBA28, p0, p1, p2)
end
natives.network.network_bail = natives.NETWORK.NETWORK_BAIL

function natives.NETWORK.NETWORK_ON_RETURN_TO_SINGLE_PLAYER() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_ON_RETURN_TO_SINGLE_PLAYER' due to disabled trusted mode")

	local result = native_call(0x283B6062A2C01E9B)
end
natives.network.network_on_return_to_single_player = natives.NETWORK.NETWORK_ON_RETURN_TO_SINGLE_PLAYER

function natives.NETWORK.NETWORK_TRANSITION_START(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_TRANSITION_START' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x8B4FFC790CA131EF, p0, p1, p2, p3)
	return result:__tointeger()
end
natives.network.network_transition_start = natives.NETWORK.NETWORK_TRANSITION_START

function natives.NETWORK.NETWORK_TRANSITION_ADD_STAGE(--[[Hash]] hash, --[[int]] p1, --[[int]] p2, --[[int]] state, --[[int]] p4) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_TRANSITION_ADD_STAGE' due to disabled trusted mode")

	assert(type(hash) == "number", "Arg #1 (hash) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(state) == "number", "Arg #4 (state) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")

	local result = native_call(0xC3BFED92026A2AAD, hash, p1, p2, state, p4)
end
natives.network.network_transition_add_stage = natives.NETWORK.NETWORK_TRANSITION_ADD_STAGE

function natives.NETWORK.NETWORK_TRANSITION_FINISH(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_TRANSITION_FINISH' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0x04918A41BC9B8157, p0, p1, p2)
	return result:__tointeger()
end
natives.network.network_transition_finish = natives.NETWORK.NETWORK_TRANSITION_FINISH

--[[
11 - Need to download tunables.
12 - Need to download background script.

Returns 1 if the multiplayer is loaded, otherwhise 0.
]]
function natives.NETWORK.NETWORK_CAN_ACCESS_MULTIPLAYER(--[[int*]] loadingState) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_CAN_ACCESS_MULTIPLAYER' due to disabled trusted mode")

	assert(type(loadingState) == "userdata", "Arg #1 (loadingState) must be a userdata.")

	local result = native_call(0xAF50DA1A3F8B1BA4, loadingState)
	return result:__tointeger() ~= 0
end
natives.network.network_can_access_multiplayer = natives.NETWORK.NETWORK_CAN_ACCESS_MULTIPLAYER

function natives.NETWORK.NETWORK_IS_MULTIPLAYER_DISABLED() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IS_MULTIPLAYER_DISABLED' due to disabled trusted mode")

	local result = native_call(0x9747292807126EDA)
	return result:__tointeger() ~= 0
end
natives.network.network_is_multiplayer_disabled = natives.NETWORK.NETWORK_IS_MULTIPLAYER_DISABLED

function natives.NETWORK.NETWORK_CAN_ENTER_MULTIPLAYER() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_CAN_ENTER_MULTIPLAYER' due to disabled trusted mode")

	local result = native_call(0x7E782A910C362C25)
	return result:__tointeger() ~= 0
end
natives.network.network_can_enter_multiplayer = natives.NETWORK.NETWORK_CAN_ENTER_MULTIPLAYER

--[[
unknown params

p0 = 0, 2, or 999 (The global is 999 by default.)
p1 = 0 (Always in every script it's found in atleast.)
p2 = 0, 3, or 4 (Based on a var that is determined by a function.)
p3 = maxPlayers (It's obvious in x360 scripts it's always 18)
p4 = 0 (Always in every script it's found in atleast.)
p5 = 0 or 1. (1 if network_can_enter_multiplayer, but set to 0 if other checks after that are passed.)
p5 is reset to 0 if,
Global_1315318 = 0 or Global_1315323 = 9 or 12 or (Global_1312629 = 0 && Global_1312631 = true/1) those are passed.
]]
function natives.NETWORK.NETWORK_SESSION_DO_FREEROAM_QUICKMATCH(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[int]] maxPlayers, --[[Any]] p4, --[[Any]] p5) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SESSION_DO_FREEROAM_QUICKMATCH' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(maxPlayers) == "number", "Arg #4 (maxPlayers) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")

	local result = native_call(0x330ED4D05491934F, p0, p1, p2, maxPlayers, p4, p5)
	return result:__tointeger()
end
natives.network.network_session_do_freeroam_quickmatch = natives.NETWORK.NETWORK_SESSION_DO_FREEROAM_QUICKMATCH

function natives.NETWORK.NETWORK_SESSION_DO_FRIEND_MATCHMAKING(--[[int]] p0, --[[int]] p1, --[[int]] maxPlayers, --[[BOOL]] p3) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SESSION_DO_FRIEND_MATCHMAKING' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(maxPlayers) == "number", "Arg #3 (maxPlayers) must be a number.")
	assert(type(p3) == "boolean", "Arg #4 (p3) must be a boolean.")

	local result = native_call(0x2CFC76E0D087C994, p0, p1, maxPlayers, p3)
	return result:__tointeger() ~= 0
end
natives.network.network_session_do_friend_matchmaking = natives.NETWORK.NETWORK_SESSION_DO_FRIEND_MATCHMAKING

--[[
p4 seems to be unused in 1.60/build 2628
]]
function natives.NETWORK.NETWORK_SESSION_DO_CREW_MATCHMAKING(--[[int]] crewId, --[[int]] p1, --[[int]] p2, --[[int]] maxPlayers, --[[BOOL]] p4) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SESSION_DO_CREW_MATCHMAKING' due to disabled trusted mode")

	assert(type(crewId) == "number", "Arg #1 (crewId) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(maxPlayers) == "number", "Arg #4 (maxPlayers) must be a number.")
	assert(type(p4) == "boolean", "Arg #5 (p4) must be a boolean.")

	local result = native_call(0x94BC51E9449D917F, crewId, p1, p2, maxPlayers, p4)
	return result:__tointeger() ~= 0
end
natives.network.network_session_do_crew_matchmaking = natives.NETWORK.NETWORK_SESSION_DO_CREW_MATCHMAKING

function natives.NETWORK.NETWORK_SESSION_DO_ACTIVITY_QUICKMATCH(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3, --[[Any]] p4) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SESSION_DO_ACTIVITY_QUICKMATCH' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")

	local result = native_call(0xBE3E347A87ACEB82, p0, p1, p2, p3, p4)
	return result:__tointeger() ~= 0
end
natives.network.network_session_do_activity_quickmatch = natives.NETWORK.NETWORK_SESSION_DO_ACTIVITY_QUICKMATCH

--[[
Does nothing in online but in offline it will cause the screen to fade to black. Nothing happens past then, the screen will sit at black until you restart GTA. Other stuff must be needed to actually host a session.
]]
function natives.NETWORK.NETWORK_SESSION_HOST(--[[int]] p0, --[[int]] maxPlayers, --[[BOOL]] p2) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SESSION_HOST' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(maxPlayers) == "number", "Arg #2 (maxPlayers) must be a number.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")

	local result = native_call(0x6F3D4ED9BEE4E61D, p0, maxPlayers, p2)
	return result:__tointeger() ~= 0
end
natives.network.network_session_host = natives.NETWORK.NETWORK_SESSION_HOST

function natives.NETWORK.NETWORK_SESSION_HOST_CLOSED(--[[int]] p0, --[[int]] maxPlayers) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SESSION_HOST_CLOSED' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(maxPlayers) == "number", "Arg #2 (maxPlayers) must be a number.")

	local result = native_call(0xED34C0C02C098BB7, p0, maxPlayers)
	return result:__tointeger() ~= 0
end
natives.network.network_session_host_closed = natives.NETWORK.NETWORK_SESSION_HOST_CLOSED

--[[
Does nothing in online but in offline it will cause the screen to fade to black. Nothing happens past then, the screen will sit at black until you restart GTA. Other stuff must be needed to actually host a session.
]]
function natives.NETWORK.NETWORK_SESSION_HOST_FRIENDS_ONLY(--[[int]] p0, --[[int]] maxPlayers) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SESSION_HOST_FRIENDS_ONLY' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(maxPlayers) == "number", "Arg #2 (maxPlayers) must be a number.")

	local result = native_call(0xB9CFD27A5D578D83, p0, maxPlayers)
	return result:__tointeger() ~= 0
end
natives.network.network_session_host_friends_only = natives.NETWORK.NETWORK_SESSION_HOST_FRIENDS_ONLY

function natives.NETWORK.NETWORK_SESSION_IS_CLOSED_FRIENDS() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SESSION_IS_CLOSED_FRIENDS' due to disabled trusted mode")

	local result = native_call(0xFBCFA2EA2E206890)
	return result:__tointeger() ~= 0
end
natives.network.network_session_is_closed_friends = natives.NETWORK.NETWORK_SESSION_IS_CLOSED_FRIENDS

function natives.NETWORK.NETWORK_SESSION_IS_CLOSED_CREW() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SESSION_IS_CLOSED_CREW' due to disabled trusted mode")

	local result = native_call(0x74732C6CA90DA2B4)
	return result:__tointeger() ~= 0
end
natives.network.network_session_is_closed_crew = natives.NETWORK.NETWORK_SESSION_IS_CLOSED_CREW

function natives.NETWORK.NETWORK_SESSION_IS_SOLO() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SESSION_IS_SOLO' due to disabled trusted mode")

	local result = native_call(0xF3929C2379B60CCE)
	return result:__tointeger() ~= 0
end
natives.network.network_session_is_solo = natives.NETWORK.NETWORK_SESSION_IS_SOLO

function natives.NETWORK.NETWORK_SESSION_IS_PRIVATE() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SESSION_IS_PRIVATE' due to disabled trusted mode")

	local result = native_call(0xCEF70AA5B3F89BA1)
	return result:__tointeger() ~= 0
end
natives.network.network_session_is_private = natives.NETWORK.NETWORK_SESSION_IS_PRIVATE

--[[
p0 is always false and p1 varies.
NETWORK_SESSION_END(0, 1)
NETWORK_SESSION_END(0, 0)
Results in: "Connection to session lost due to an unknown network error. Please return to Grand Theft Auto V and try again later."
]]
function natives.NETWORK.NETWORK_SESSION_END(--[[BOOL]] p0, --[[BOOL]] p1) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SESSION_END' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0xA02E59562D711006, p0, p1)
	return result:__tointeger() ~= 0
end
natives.network.network_session_end = natives.NETWORK.NETWORK_SESSION_END

function natives.NETWORK.NETWORK_SESSION_LEAVE(--[[Any]] p0) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SESSION_LEAVE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xB9351A07A0D458B1, p0)
	return result:__tointeger()
end
natives.network.network_session_leave = natives.NETWORK.NETWORK_SESSION_LEAVE

--[[
Only works as host.
]]
function natives.NETWORK.NETWORK_SESSION_KICK_PLAYER(--[[Player]] player) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SESSION_KICK_PLAYER' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0xFA8904DC5F304220, player)
end
natives.network.network_session_kick_player = natives.NETWORK.NETWORK_SESSION_KICK_PLAYER

function natives.NETWORK.NETWORK_SESSION_GET_KICK_VOTE(--[[Player]] player) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SESSION_GET_KICK_VOTE' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0xD6D09A6F32F49EF1, player)
	return result:__tointeger() ~= 0
end
natives.network.network_session_get_kick_vote = natives.NETWORK.NETWORK_SESSION_GET_KICK_VOTE

function natives.NETWORK.NETWORK_SESSION_RESERVE_SLOTS_TRANSITION(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SESSION_RESERVE_SLOTS_TRANSITION' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0x041C7F2A6C9894E6, p0, p1, p2)
	return result:__tointeger()
end
natives.network.network_session_reserve_slots_transition = natives.NETWORK.NETWORK_SESSION_RESERVE_SLOTS_TRANSITION

function natives.NETWORK.NETWORK_JOIN_PREVIOUSLY_FAILED_SESSION() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_JOIN_PREVIOUSLY_FAILED_SESSION' due to disabled trusted mode")

	local result = native_call(0x59DF79317F85A7E0)
	return result:__tointeger() ~= 0
end
natives.network.network_join_previously_failed_session = natives.NETWORK.NETWORK_JOIN_PREVIOUSLY_FAILED_SESSION

function natives.NETWORK.NETWORK_JOIN_PREVIOUSLY_FAILED_TRANSITION() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_JOIN_PREVIOUSLY_FAILED_TRANSITION' due to disabled trusted mode")

	local result = native_call(0xFFE1E5B792D92B34)
	return result:__tointeger() ~= 0
end
natives.network.network_join_previously_failed_transition = natives.NETWORK.NETWORK_JOIN_PREVIOUSLY_FAILED_TRANSITION

function natives.NETWORK.NETWORK_SESSION_SET_MATCHMAKING_GROUP(--[[int]] matchmakingGroup) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SESSION_SET_MATCHMAKING_GROUP' due to disabled trusted mode")

	assert(type(matchmakingGroup) == "number", "Arg #1 (matchmakingGroup) must be a number.")

	local result = native_call(0x49EC8030F5015F8B, matchmakingGroup)
end
natives.network.network_session_set_matchmaking_group = natives.NETWORK.NETWORK_SESSION_SET_MATCHMAKING_GROUP

--[[
playerType is an unsigned int from 0 to 4
0 = regular joiner
4 = spectator
]]
function natives.NETWORK.NETWORK_SESSION_SET_MATCHMAKING_GROUP_MAX(--[[int]] playerType, --[[int]] playerCount) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SESSION_SET_MATCHMAKING_GROUP_MAX' due to disabled trusted mode")

	assert(type(playerType) == "number", "Arg #1 (playerType) must be a number.")
	assert(type(playerCount) == "number", "Arg #2 (playerCount) must be a number.")

	local result = native_call(0x8B6A4DD0AF9CE215, playerType, playerCount)
end
natives.network.network_session_set_matchmaking_group_max = natives.NETWORK.NETWORK_SESSION_SET_MATCHMAKING_GROUP_MAX

function natives.NETWORK.NETWORK_SESSION_GET_MATCHMAKING_GROUP_FREE(--[[int]] p0) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SESSION_GET_MATCHMAKING_GROUP_FREE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x56CE820830EF040B, p0)
	return result:__tointeger()
end
natives.network.network_session_get_matchmaking_group_free = natives.NETWORK.NETWORK_SESSION_GET_MATCHMAKING_GROUP_FREE

--[[
groupId range: [0, 4]
]]
function natives.NETWORK.NETWORK_SESSION_ADD_ACTIVE_MATCHMAKING_GROUP(--[[int]] groupId) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SESSION_ADD_ACTIVE_MATCHMAKING_GROUP' due to disabled trusted mode")

	assert(type(groupId) == "number", "Arg #1 (groupId) must be a number.")

	local result = native_call(0xCAE55F48D3D7875C, groupId)
end
natives.network.network_session_add_active_matchmaking_group = natives.NETWORK.NETWORK_SESSION_ADD_ACTIVE_MATCHMAKING_GROUP

function natives.NETWORK.NETWORK_SESSION_SET_UNIQUE_CREW_LIMIT(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SESSION_SET_UNIQUE_CREW_LIMIT' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xF49ABC20D8552257, p0)
end
natives.network.network_session_set_unique_crew_limit = natives.NETWORK.NETWORK_SESSION_SET_UNIQUE_CREW_LIMIT

function natives.NETWORK.NETWORK_SESSION_SET_UNIQUE_CREW_LIMIT_TRANSITION(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SESSION_SET_UNIQUE_CREW_LIMIT_TRANSITION' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x4811BBAC21C5FCD5, p0)
end
natives.network.network_session_set_unique_crew_limit_transition = natives.NETWORK.NETWORK_SESSION_SET_UNIQUE_CREW_LIMIT_TRANSITION

function natives.NETWORK.NETWORK_SESSION_SET_UNIQUE_CREW_ONLY_CREWS_TRANSITION(--[[BOOL]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SESSION_SET_UNIQUE_CREW_ONLY_CREWS_TRANSITION' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0x5539C3EBF104A53A, p0)
end
natives.network.network_session_set_unique_crew_only_crews_transition = natives.NETWORK.NETWORK_SESSION_SET_UNIQUE_CREW_ONLY_CREWS_TRANSITION

function natives.NETWORK.NETWORK_SESSION_SET_CREW_LIMIT_MAX_MEMBERS_TRANSITION(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SESSION_SET_CREW_LIMIT_MAX_MEMBERS_TRANSITION' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x702BC4D605522539, p0)
end
natives.network.network_session_set_crew_limit_max_members_transition = natives.NETWORK.NETWORK_SESSION_SET_CREW_LIMIT_MAX_MEMBERS_TRANSITION

function natives.NETWORK.NETWORK_SESSION_SET_MATCHMAKING_PROPERTY_ID(--[[BOOL]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SESSION_SET_MATCHMAKING_PROPERTY_ID' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0x3F52E880AAF6C8CA, p0)
end
natives.network.network_session_set_matchmaking_property_id = natives.NETWORK.NETWORK_SESSION_SET_MATCHMAKING_PROPERTY_ID

function natives.NETWORK.NETWORK_SESSION_SET_MATCHMAKING_MENTAL_STATE(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SESSION_SET_MATCHMAKING_MENTAL_STATE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xF1EEA2DDA9FFA69D, p0)
end
natives.network.network_session_set_matchmaking_mental_state = natives.NETWORK.NETWORK_SESSION_SET_MATCHMAKING_MENTAL_STATE

function natives.NETWORK.NETWORK_SESSION_SET_NUM_BOSSES(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SESSION_SET_NUM_BOSSES' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x59D421683D31835A, p0)
end
natives.network.network_session_set_num_bosses = natives.NETWORK.NETWORK_SESSION_SET_NUM_BOSSES

function natives.NETWORK.NETWORK_SESSION_SET_SCRIPT_VALIDATE_JOIN() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SESSION_SET_SCRIPT_VALIDATE_JOIN' due to disabled trusted mode")

	local result = native_call(0x1153FA02A659051C)
end
natives.network.network_session_set_script_validate_join = natives.NETWORK.NETWORK_SESSION_SET_SCRIPT_VALIDATE_JOIN

function natives.NETWORK.NETWORK_SESSION_VALIDATE_JOIN(--[[BOOL]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SESSION_VALIDATE_JOIN' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0xC19F6C8E7865A6FF, p0)
end
natives.network.network_session_validate_join = natives.NETWORK.NETWORK_SESSION_VALIDATE_JOIN

--[[
..
]]
function natives.NETWORK.NETWORK_ADD_FOLLOWERS(--[[int*]] p0, --[[int]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_ADD_FOLLOWERS' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x236406F60CF216D6, p0, p1)
end
natives.network.network_add_followers = natives.NETWORK.NETWORK_ADD_FOLLOWERS

function natives.NETWORK.NETWORK_CLEAR_FOLLOWERS() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_CLEAR_FOLLOWERS' due to disabled trusted mode")

	local result = native_call(0x058F43EC59A8631A)
end
natives.network.network_clear_followers = natives.NETWORK.NETWORK_CLEAR_FOLLOWERS

function natives.NETWORK.NETWORK_GET_GLOBAL_MULTIPLAYER_CLOCK(--[[int*]] hours, --[[int*]] minutes, --[[int*]] seconds) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_GLOBAL_MULTIPLAYER_CLOCK' due to disabled trusted mode")

	assert(type(hours) == "userdata", "Arg #1 (hours) must be a userdata.")
	assert(type(minutes) == "userdata", "Arg #2 (minutes) must be a userdata.")
	assert(type(seconds) == "userdata", "Arg #3 (seconds) must be a userdata.")

	local result = native_call(0x6D03BFBD643B2A02, hours, minutes, seconds)
end
natives.network.network_get_global_multiplayer_clock = natives.NETWORK.NETWORK_GET_GLOBAL_MULTIPLAYER_CLOCK

function natives.NETWORK.NETWORK_SESSION_SET_GAMEMODE(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SESSION_SET_GAMEMODE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x600F8CB31C7AAB6E, p0)
end
natives.network.network_session_set_gamemode = natives.NETWORK.NETWORK_SESSION_SET_GAMEMODE

function natives.NETWORK.NETWORK_SESSION_GET_HOST_AIM_PREFERENCE() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SESSION_GET_HOST_AIM_PREFERENCE' due to disabled trusted mode")

	local result = native_call(0xDFFA5BE8381C3314)
	return result:__tointeger()
end
natives.network.network_session_get_host_aim_preference = natives.NETWORK.NETWORK_SESSION_GET_HOST_AIM_PREFERENCE

function natives.NETWORK.NETWORK_FIND_GAMERS_IN_CREW(--[[int]] crewId) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_FIND_GAMERS_IN_CREW' due to disabled trusted mode")

	assert(type(crewId) == "number", "Arg #1 (crewId) must be a number.")

	local result = native_call(0xE532D6811B3A4D2A, crewId)
	return result:__tointeger() ~= 0
end
natives.network.network_find_gamers_in_crew = natives.NETWORK.NETWORK_FIND_GAMERS_IN_CREW

--[[
Uses attributes to find players with similar stats. Upper/Lower limit must be above zero or the fallback limit +/-0.1 is used.
There can be up to 15 attributes, they are as follows:

0 = Races
1 = Parachuting
2 = Horde
3 = Darts
4 = Arm Wrestling
5 = Tennis
6 = Golf
7 = Shooting Range
8 = Deathmatch
9 = MPPLY_MCMWIN/MPPLY_CRMISSION
]]
function natives.NETWORK.NETWORK_FIND_MATCHED_GAMERS(--[[int]] attribute, --[[float]] fallbackLimit, --[[float]] lowerLimit, --[[float]] upperLimit) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_FIND_MATCHED_GAMERS' due to disabled trusted mode")

	assert(type(attribute) == "number", "Arg #1 (attribute) must be a number.")
	assert(type(fallbackLimit) == "number", "Arg #2 (fallbackLimit) must be a number.")
	assert(type(lowerLimit) == "number", "Arg #3 (lowerLimit) must be a number.")
	assert(type(upperLimit) == "number", "Arg #4 (upperLimit) must be a number.")

	local result = native_call(0xF7B2CFDE5C9F700D, attribute, fallbackLimit, lowerLimit, upperLimit)
	return result:__tointeger() ~= 0
end
natives.network.network_find_matched_gamers = natives.NETWORK.NETWORK_FIND_MATCHED_GAMERS

function natives.NETWORK.NETWORK_IS_FINDING_GAMERS() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IS_FINDING_GAMERS' due to disabled trusted mode")

	local result = native_call(0xDDDF64C91BFCF0AA)
	return result:__tointeger() ~= 0
end
natives.network.network_is_finding_gamers = natives.NETWORK.NETWORK_IS_FINDING_GAMERS

function natives.NETWORK.NETWORK_DID_FIND_GAMERS_SUCCEED() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_DID_FIND_GAMERS_SUCCEED' due to disabled trusted mode")

	local result = native_call(0xF9B83B77929D8863)
	return result:__tointeger() ~= 0
end
natives.network.network_did_find_gamers_succeed = natives.NETWORK.NETWORK_DID_FIND_GAMERS_SUCCEED

function natives.NETWORK.NETWORK_GET_NUM_FOUND_GAMERS() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_NUM_FOUND_GAMERS' due to disabled trusted mode")

	local result = native_call(0xA1B043EE79A916FB)
	return result:__tointeger()
end
natives.network.network_get_num_found_gamers = natives.NETWORK.NETWORK_GET_NUM_FOUND_GAMERS

function natives.NETWORK.NETWORK_GET_FOUND_GAMER(--[[Any*]] p0, --[[Any]] p1) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_FOUND_GAMER' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x9DCFF2AFB68B3476, p0, p1)
	return result:__tointeger() ~= 0
end
natives.network.network_get_found_gamer = natives.NETWORK.NETWORK_GET_FOUND_GAMER

function natives.NETWORK.NETWORK_CLEAR_FOUND_GAMERS() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_CLEAR_FOUND_GAMERS' due to disabled trusted mode")

	local result = native_call(0x6D14CCEE1B40381A)
end
natives.network.network_clear_found_gamers = natives.NETWORK.NETWORK_CLEAR_FOUND_GAMERS

function natives.NETWORK.NETWORK_QUEUE_GAMER_FOR_STATUS(--[[Any*]] p0) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_QUEUE_GAMER_FOR_STATUS' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")

	local result = native_call(0x85A0EF54A500882C, p0)
	return result:__tointeger() ~= 0
end
natives.network.network_queue_gamer_for_status = natives.NETWORK.NETWORK_QUEUE_GAMER_FOR_STATUS

function natives.NETWORK.NETWORK_GET_GAMER_STATUS_FROM_QUEUE() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_GAMER_STATUS_FROM_QUEUE' due to disabled trusted mode")

	local result = native_call(0x2CC848A861D01493)
	return result:__tointeger() ~= 0
end
natives.network.network_get_gamer_status_from_queue = natives.NETWORK.NETWORK_GET_GAMER_STATUS_FROM_QUEUE

function natives.NETWORK.NETWORK_IS_GETTING_GAMER_STATUS() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IS_GETTING_GAMER_STATUS' due to disabled trusted mode")

	local result = native_call(0x94A8394D150B013A)
	return result:__tointeger() ~= 0
end
natives.network.network_is_getting_gamer_status = natives.NETWORK.NETWORK_IS_GETTING_GAMER_STATUS

function natives.NETWORK.NETWORK_DID_GET_GAMER_STATUS_SUCCEED() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_DID_GET_GAMER_STATUS_SUCCEED' due to disabled trusted mode")

	local result = native_call(0x5AE17C6B0134B7F1)
	return result:__tointeger() ~= 0
end
natives.network.network_did_get_gamer_status_succeed = natives.NETWORK.NETWORK_DID_GET_GAMER_STATUS_SUCCEED

function natives.NETWORK.NETWORK_GET_GAMER_STATUS_RESULT(--[[Any*]] p0, --[[Any]] p1) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_GAMER_STATUS_RESULT' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x02A8BEC6FD9AF660, p0, p1)
	return result:__tointeger() ~= 0
end
natives.network.network_get_gamer_status_result = natives.NETWORK.NETWORK_GET_GAMER_STATUS_RESULT

function natives.NETWORK.NETWORK_CLEAR_GET_GAMER_STATUS() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_CLEAR_GET_GAMER_STATUS' due to disabled trusted mode")

	local result = native_call(0x86E0660E4F5C956D)
end
natives.network.network_clear_get_gamer_status = natives.NETWORK.NETWORK_CLEAR_GET_GAMER_STATUS

function natives.NETWORK.NETWORK_SESSION_JOIN_INVITE() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SESSION_JOIN_INVITE' due to disabled trusted mode")

	local result = native_call(0xC6F8AB8A4189CF3A)
end
natives.network.network_session_join_invite = natives.NETWORK.NETWORK_SESSION_JOIN_INVITE

function natives.NETWORK.NETWORK_SESSION_CANCEL_INVITE() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SESSION_CANCEL_INVITE' due to disabled trusted mode")

	local result = native_call(0x2FBF47B1B36D36F9)
end
natives.network.network_session_cancel_invite = natives.NETWORK.NETWORK_SESSION_CANCEL_INVITE

function natives.NETWORK.NETWORK_SESSION_FORCE_CANCEL_INVITE() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SESSION_FORCE_CANCEL_INVITE' due to disabled trusted mode")

	local result = native_call(0xA29177F7703B5644)
end
natives.network.network_session_force_cancel_invite = natives.NETWORK.NETWORK_SESSION_FORCE_CANCEL_INVITE

function natives.NETWORK.NETWORK_HAS_PENDING_INVITE() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_HAS_PENDING_INVITE' due to disabled trusted mode")

	local result = native_call(0xAC8C7B9B88C4A668)
	return result:__tointeger() ~= 0
end
natives.network.network_has_pending_invite = natives.NETWORK.NETWORK_HAS_PENDING_INVITE

function natives.NETWORK.NETWORK_HAS_CONFIRMED_INVITE() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_HAS_CONFIRMED_INVITE' due to disabled trusted mode")

	local result = native_call(0xC42DD763159F3461)
	return result:__tointeger() ~= 0
end
natives.network.network_has_confirmed_invite = natives.NETWORK.NETWORK_HAS_CONFIRMED_INVITE

--[[
Triggers a CEventNetworkInviteConfirmed event
]]
function natives.NETWORK.NETWORK_REQUEST_INVITE_CONFIRMED_EVENT() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_REQUEST_INVITE_CONFIRMED_EVENT' due to disabled trusted mode")

	local result = native_call(0x62A0296C1BB1CEB3)
	return result:__tointeger() ~= 0
end
natives.network.network_request_invite_confirmed_event = natives.NETWORK.NETWORK_REQUEST_INVITE_CONFIRMED_EVENT

function natives.NETWORK.NETWORK_SESSION_WAS_INVITED() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SESSION_WAS_INVITED' due to disabled trusted mode")

	local result = native_call(0x23DFB504655D0CE4)
	return result:__tointeger() ~= 0
end
natives.network.network_session_was_invited = natives.NETWORK.NETWORK_SESSION_WAS_INVITED

function natives.NETWORK.NETWORK_SESSION_GET_INVITER(--[[Any*]] gamerHandle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SESSION_GET_INVITER' due to disabled trusted mode")

	assert(type(gamerHandle) == "userdata", "Arg #1 (gamerHandle) must be a userdata.")

	local result = native_call(0xE57397B4A3429DD0, gamerHandle)
end
natives.network.network_session_get_inviter = natives.NETWORK.NETWORK_SESSION_GET_INVITER

--[[
Seems to be true while "Getting GTA Online session details" shows up.
]]
function natives.NETWORK.NETWORK_SESSION_IS_AWAITING_INVITE_RESPONSE() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SESSION_IS_AWAITING_INVITE_RESPONSE' due to disabled trusted mode")

	local result = native_call(0xD313DE83394AF134)
	return result:__tointeger() ~= 0
end
natives.network.network_session_is_awaiting_invite_response = natives.NETWORK.NETWORK_SESSION_IS_AWAITING_INVITE_RESPONSE

function natives.NETWORK.NETWORK_SESSION_IS_DISPLAYING_INVITE_CONFIRMATION() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SESSION_IS_DISPLAYING_INVITE_CONFIRMATION' due to disabled trusted mode")

	local result = native_call(0xBDB6F89C729CF388)
	return result:__tointeger() ~= 0
end
natives.network.network_session_is_displaying_invite_confirmation = natives.NETWORK.NETWORK_SESSION_IS_DISPLAYING_INVITE_CONFIRMATION

function natives.NETWORK.NETWORK_SUPPRESS_INVITE(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SUPPRESS_INVITE' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0xA0682D67EF1FBA3D, toggle)
end
natives.network.network_suppress_invite = natives.NETWORK.NETWORK_SUPPRESS_INVITE

function natives.NETWORK.NETWORK_BLOCK_INVITES(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_BLOCK_INVITES' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x34F9E9049454A7A0, toggle)
end
natives.network.network_block_invites = natives.NETWORK.NETWORK_BLOCK_INVITES

function natives.NETWORK.NETWORK_BLOCK_JOIN_QUEUE_INVITES(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_BLOCK_JOIN_QUEUE_INVITES' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0xCFEB8AF24FC1D0BB, toggle)
end
natives.network.network_block_join_queue_invites = natives.NETWORK.NETWORK_BLOCK_JOIN_QUEUE_INVITES

function natives.NETWORK.NETWORK_SET_CAN_RECEIVE_RS_INVITES(--[[BOOL]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SET_CAN_RECEIVE_RS_INVITES' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0x68980414688F7F9D, p0)
end
natives.network.network_set_can_receive_rs_invites = natives.NETWORK.NETWORK_SET_CAN_RECEIVE_RS_INVITES

function natives.NETWORK.NETWORK_STORE_INVITE_THROUGH_RESTART() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_STORE_INVITE_THROUGH_RESTART' due to disabled trusted mode")

	local result = native_call(0xF814FEC6A19FD6E0)
end
natives.network.network_store_invite_through_restart = natives.NETWORK.NETWORK_STORE_INVITE_THROUGH_RESTART

function natives.NETWORK.NETWORK_ALLOW_INVITE_PROCESS_IN_PLAYER_SWITCH(--[[BOOL]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_ALLOW_INVITE_PROCESS_IN_PLAYER_SWITCH' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0x6B07B9CE4D390375, p0)
end
natives.network.network_allow_invite_process_in_player_switch = natives.NETWORK.NETWORK_ALLOW_INVITE_PROCESS_IN_PLAYER_SWITCH

function natives.NETWORK.NETWORK_SET_SCRIPT_READY_FOR_EVENTS(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SET_SCRIPT_READY_FOR_EVENTS' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x7AC752103856FB20, toggle)
end
natives.network.network_set_script_ready_for_events = natives.NETWORK.NETWORK_SET_SCRIPT_READY_FOR_EVENTS

function natives.NETWORK.NETWORK_IS_OFFLINE_INVITE_PENDING() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IS_OFFLINE_INVITE_PENDING' due to disabled trusted mode")

	local result = native_call(0x74698374C45701D2)
	return result:__tointeger() ~= 0
end
natives.network.network_is_offline_invite_pending = natives.NETWORK.NETWORK_IS_OFFLINE_INVITE_PENDING

function natives.NETWORK.NETWORK_CLEAR_OFFLINE_INVITE_PENDING() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_CLEAR_OFFLINE_INVITE_PENDING' due to disabled trusted mode")

	local result = native_call(0x140E6A44870A11CE)
end
natives.network.network_clear_offline_invite_pending = natives.NETWORK.NETWORK_CLEAR_OFFLINE_INVITE_PENDING

--[[
Loads up the map that is loaded when beeing in mission creator
Player gets placed in a mix between online/offline mode
p0 is always 2 in R* scripts.

Appears to be patched in gtav b757 (game gets terminated) alonside with most other network natives to prevent online modding ~ghost30812
]]
function natives.NETWORK.NETWORK_SESSION_HOST_SINGLE_PLAYER(--[[int]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SESSION_HOST_SINGLE_PLAYER' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xC74C33FCA52856D5, p0)
end
natives.network.network_session_host_single_player = natives.NETWORK.NETWORK_SESSION_HOST_SINGLE_PLAYER

function natives.NETWORK.NETWORK_SESSION_LEAVE_SINGLE_PLAYER() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SESSION_LEAVE_SINGLE_PLAYER' due to disabled trusted mode")

	local result = native_call(0x3442775428FD2DAA)
end
natives.network.network_session_leave_single_player = natives.NETWORK.NETWORK_SESSION_LEAVE_SINGLE_PLAYER

function natives.NETWORK.NETWORK_IS_GAME_IN_PROGRESS() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IS_GAME_IN_PROGRESS' due to disabled trusted mode")

	local result = native_call(0x10FAB35428CCC9D7)
	return result:__tointeger() ~= 0
end
natives.network.network_is_game_in_progress = natives.NETWORK.NETWORK_IS_GAME_IN_PROGRESS

function natives.NETWORK.NETWORK_IS_SESSION_ACTIVE() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IS_SESSION_ACTIVE' due to disabled trusted mode")

	local result = native_call(0xD83C2B94E7508980)
	return result:__tointeger() ~= 0
end
natives.network.network_is_session_active = natives.NETWORK.NETWORK_IS_SESSION_ACTIVE

function natives.NETWORK.NETWORK_IS_IN_SESSION() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IS_IN_SESSION' due to disabled trusted mode")

	local result = native_call(0xCA97246103B63917)
	return result:__tointeger() ~= 0
end
natives.network.network_is_in_session = natives.NETWORK.NETWORK_IS_IN_SESSION

--[[
This checks if player is playing on gta online or not.
Please add an if and block your mod if this is "true".
]]
function natives.NETWORK.NETWORK_IS_SESSION_STARTED() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IS_SESSION_STARTED' due to disabled trusted mode")

	local result = native_call(0x9DE624D2FC4B603F)
	return result:__tointeger() ~= 0
end
natives.network.network_is_session_started = natives.NETWORK.NETWORK_IS_SESSION_STARTED

function natives.NETWORK.NETWORK_IS_SESSION_BUSY() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IS_SESSION_BUSY' due to disabled trusted mode")

	local result = native_call(0xF4435D66A8E2905E)
	return result:__tointeger() ~= 0
end
natives.network.network_is_session_busy = natives.NETWORK.NETWORK_IS_SESSION_BUSY

function natives.NETWORK.NETWORK_CAN_SESSION_END() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_CAN_SESSION_END' due to disabled trusted mode")

	local result = native_call(0x4EEBC3694E49C572)
	return result:__tointeger() ~= 0
end
natives.network.network_can_session_end = natives.NETWORK.NETWORK_CAN_SESSION_END

function natives.NETWORK.NETWORK_GET_GAME_MODE() -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_GAME_MODE' due to disabled trusted mode")

	local result = native_call(0x4C9034162368E206)
	return result:__tointeger()
end
natives.network.network_get_game_mode = natives.NETWORK.NETWORK_GET_GAME_MODE

function natives.NETWORK.NETWORK_SESSION_MARK_VISIBLE(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SESSION_MARK_VISIBLE' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x271CC6AB59EBF9A5, toggle)
end
natives.network.network_session_mark_visible = natives.NETWORK.NETWORK_SESSION_MARK_VISIBLE

function natives.NETWORK.NETWORK_SESSION_IS_VISIBLE() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SESSION_IS_VISIBLE' due to disabled trusted mode")

	local result = native_call(0xBA416D68C631496A)
	return result:__tointeger() ~= 0
end
natives.network.network_session_is_visible = natives.NETWORK.NETWORK_SESSION_IS_VISIBLE

function natives.NETWORK.NETWORK_SESSION_BLOCK_JOIN_REQUESTS(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SESSION_BLOCK_JOIN_REQUESTS' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0xA73667484D7037C3, toggle)
end
natives.network.network_session_block_join_requests = natives.NETWORK.NETWORK_SESSION_BLOCK_JOIN_REQUESTS

function natives.NETWORK.NETWORK_SESSION_CHANGE_SLOTS(--[[int]] p0, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SESSION_CHANGE_SLOTS' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0xB4AB419E0D86ACAE, p0, p1)
end
natives.network.network_session_change_slots = natives.NETWORK.NETWORK_SESSION_CHANGE_SLOTS

function natives.NETWORK.NETWORK_SESSION_GET_PRIVATE_SLOTS() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SESSION_GET_PRIVATE_SLOTS' due to disabled trusted mode")

	local result = native_call(0x53AFD64C6758F2F9)
	return result:__tointeger()
end
natives.network.network_session_get_private_slots = natives.NETWORK.NETWORK_SESSION_GET_PRIVATE_SLOTS

function natives.NETWORK.NETWORK_SESSION_VOICE_HOST() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SESSION_VOICE_HOST' due to disabled trusted mode")

	local result = native_call(0x9C1556705F864230)
end
natives.network.network_session_voice_host = natives.NETWORK.NETWORK_SESSION_VOICE_HOST

function natives.NETWORK.NETWORK_SESSION_VOICE_LEAVE() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SESSION_VOICE_LEAVE' due to disabled trusted mode")

	local result = native_call(0x6793E42BE02B575D)
end
natives.network.network_session_voice_leave = natives.NETWORK.NETWORK_SESSION_VOICE_LEAVE

--[[
Only one occurence in the scripts:

auto sub_cb43(auto a_0, auto a_1) {
    if (g_2594CB._f1) {
        if (NETWORK::_855BC38818F6F684()) {
            NETWORK::_ABD5E88B8A2D3DB2(&a_0._fB93);
            g_2594CB._f14/*{13}*/ = a_0._fB93;
            g_2594CB._f4/*"64"*/ = a_1;
            return 1;
        }
    }
    return 0;
}

other:
looks like it passes a player in the paramater

Contains string "NETWORK_VOICE_CONNECT_TO_PLAYER" in ida
]]
function natives.NETWORK.NETWORK_SESSION_VOICE_CONNECT_TO_PLAYER(--[[Any*]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SESSION_VOICE_CONNECT_TO_PLAYER' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")

	local result = native_call(0xABD5E88B8A2D3DB2, p0)
end
natives.network.network_session_voice_connect_to_player = natives.NETWORK.NETWORK_SESSION_VOICE_CONNECT_TO_PLAYER

function natives.NETWORK.NETWORK_SESSION_VOICE_RESPOND_TO_REQUEST(--[[BOOL]] p0, --[[int]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SESSION_VOICE_RESPOND_TO_REQUEST' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x7F8413B7FC2AA6B9, p0, p1)
end
natives.network.network_session_voice_respond_to_request = natives.NETWORK.NETWORK_SESSION_VOICE_RESPOND_TO_REQUEST

function natives.NETWORK.NETWORK_SESSION_VOICE_SET_TIMEOUT(--[[int]] timeout) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SESSION_VOICE_SET_TIMEOUT' due to disabled trusted mode")

	assert(type(timeout) == "number", "Arg #1 (timeout) must be a number.")

	local result = native_call(0x5B8ED3DB018927B1, timeout)
end
natives.network.network_session_voice_set_timeout = natives.NETWORK.NETWORK_SESSION_VOICE_SET_TIMEOUT

function natives.NETWORK.NETWORK_SESSION_IS_IN_VOICE_SESSION() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SESSION_IS_IN_VOICE_SESSION' due to disabled trusted mode")

	local result = native_call(0x855BC38818F6F684)
	return result:__tointeger() ~= 0
end
natives.network.network_session_is_in_voice_session = natives.NETWORK.NETWORK_SESSION_IS_IN_VOICE_SESSION

function natives.NETWORK.NETWORK_SESSION_IS_VOICE_SESSION_ACTIVE() -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SESSION_IS_VOICE_SESSION_ACTIVE' due to disabled trusted mode")

	local result = native_call(0xB5D3453C98456528)
	return result:__tointeger()
end
natives.network.network_session_is_voice_session_active = natives.NETWORK.NETWORK_SESSION_IS_VOICE_SESSION_ACTIVE

function natives.NETWORK.NETWORK_SESSION_IS_VOICE_SESSION_BUSY() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SESSION_IS_VOICE_SESSION_BUSY' due to disabled trusted mode")

	local result = native_call(0xEF0912DDF7C4CB4B)
	return result:__tointeger() ~= 0
end
natives.network.network_session_is_voice_session_busy = natives.NETWORK.NETWORK_SESSION_IS_VOICE_SESSION_BUSY

--[[
Message is limited to 64 characters.
]]
function natives.NETWORK.NETWORK_SEND_TEXT_MESSAGE(--[[const char*]] message, --[[Any*]] gamerHandle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SEND_TEXT_MESSAGE' due to disabled trusted mode")

	assert(type(message) == "string", "Arg #1 (message) must be a string.")
	assert(type(gamerHandle) == "userdata", "Arg #2 (gamerHandle) must be a userdata.")

	local result = native_call(0x3A214F2EC889B100, message, gamerHandle)
	return result:__tointeger() ~= 0
end
natives.network.network_send_text_message = natives.NETWORK.NETWORK_SEND_TEXT_MESSAGE

function natives.NETWORK.NETWORK_SET_ACTIVITY_SPECTATOR(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SET_ACTIVITY_SPECTATOR' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x75138790B4359A74, toggle)
end
natives.network.network_set_activity_spectator = natives.NETWORK.NETWORK_SET_ACTIVITY_SPECTATOR

function natives.NETWORK.NETWORK_IS_ACTIVITY_SPECTATOR() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IS_ACTIVITY_SPECTATOR' due to disabled trusted mode")

	local result = native_call(0x12103B9E0C9F92FB)
	return result:__tointeger() ~= 0
end
natives.network.network_is_activity_spectator = natives.NETWORK.NETWORK_IS_ACTIVITY_SPECTATOR

function natives.NETWORK.NETWORK_SET_ACTIVITY_PLAYER_MAX(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SET_ACTIVITY_PLAYER_MAX' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x0E4F77F7B9D74D84, p0)
end
natives.network.network_set_activity_player_max = natives.NETWORK.NETWORK_SET_ACTIVITY_PLAYER_MAX

function natives.NETWORK.NETWORK_SET_ACTIVITY_SPECTATOR_MAX(--[[int]] maxSpectators) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SET_ACTIVITY_SPECTATOR_MAX' due to disabled trusted mode")

	assert(type(maxSpectators) == "number", "Arg #1 (maxSpectators) must be a number.")

	local result = native_call(0x9D277B76D1D12222, maxSpectators)
end
natives.network.network_set_activity_spectator_max = natives.NETWORK.NETWORK_SET_ACTIVITY_SPECTATOR_MAX

function natives.NETWORK.NETWORK_GET_ACTIVITY_PLAYER_NUM(--[[BOOL]] p0) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_ACTIVITY_PLAYER_NUM' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0x73E2B500410DA5A2, p0)
	return result:__tointeger()
end
natives.network.network_get_activity_player_num = natives.NETWORK.NETWORK_GET_ACTIVITY_PLAYER_NUM

function natives.NETWORK.NETWORK_IS_ACTIVITY_SPECTATOR_FROM_HANDLE(--[[Any*]] gamerHandle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IS_ACTIVITY_SPECTATOR_FROM_HANDLE' due to disabled trusted mode")

	assert(type(gamerHandle) == "userdata", "Arg #1 (gamerHandle) must be a userdata.")

	local result = native_call(0x2763BBAA72A7BCB9, gamerHandle)
	return result:__tointeger() ~= 0
end
natives.network.network_is_activity_spectator_from_handle = natives.NETWORK.NETWORK_IS_ACTIVITY_SPECTATOR_FROM_HANDLE

--[[
p0: Unknown int
p1: Unknown int
p2: Unknown int
p3: Unknown int
p4: Unknown always 0 in decompiled scripts
p5: BOOL purpose unknown, both 0 and 1 are used in decompiled scripts.
p6: BOOL purpose unknown, both 0 and 1 are used in decompiled scripts.
p7: Unknown int, it's an int according to decompiled scripts, however the value is always 0 or 1.
p8: Unknown int, it's an int according to decompiled scripts, however the value is always 0 or 1.
p9: Unknown int, sometimes 0, but also 32768 or 16384 appear in decompiled scripst, maybe a flag of some sort?

From what I can tell it looks like it does the following:
Creates/hosts a new transition to another online session, using this in FiveM will result in other players being disconencted from the server/preventing them from joining. This is most likely because I entered the wrong session parameters since they're pretty much all unknown right now.
You also need to use `NetworkJoinTransition(Player player)` and `NetworkLaunchTransition()`.
]]
function natives.NETWORK.NETWORK_HOST_TRANSITION(--[[int]] p0, --[[int]] p1, --[[int]] p2, --[[int]] p3, --[[Any]] p4, --[[BOOL]] p5, --[[BOOL]] p6, --[[int]] p7, --[[Any]] p8, --[[int]] p9) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_HOST_TRANSITION' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "boolean", "Arg #6 (p5) must be a boolean.")
	assert(type(p6) == "boolean", "Arg #7 (p6) must be a boolean.")
	assert(type(p7) == "number", "Arg #8 (p7) must be a number.")
	assert(type(p8) == "number", "Arg #9 (p8) must be a number.")
	assert(type(p9) == "number", "Arg #10 (p9) must be a number.")

	local result = native_call(0xA60BB5CE242BB254, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9)
	return result:__tointeger() ~= 0
end
natives.network.network_host_transition = natives.NETWORK.NETWORK_HOST_TRANSITION

function natives.NETWORK.NETWORK_DO_TRANSITION_QUICKMATCH(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3, --[[Any]] p4, --[[Any]] p5) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_DO_TRANSITION_QUICKMATCH' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")

	local result = native_call(0x71FB0EBCD4915D56, p0, p1, p2, p3, p4, p5)
	return result:__tointeger() ~= 0
end
natives.network.network_do_transition_quickmatch = natives.NETWORK.NETWORK_DO_TRANSITION_QUICKMATCH

function natives.NETWORK.NETWORK_DO_TRANSITION_QUICKMATCH_ASYNC(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3, --[[Any]] p4, --[[Any]] p5) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_DO_TRANSITION_QUICKMATCH_ASYNC' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")

	local result = native_call(0xA091A5E44F0072E5, p0, p1, p2, p3, p4, p5)
	return result:__tointeger() ~= 0
end
natives.network.network_do_transition_quickmatch_async = natives.NETWORK.NETWORK_DO_TRANSITION_QUICKMATCH_ASYNC

function natives.NETWORK.NETWORK_DO_TRANSITION_QUICKMATCH_WITH_GROUP(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3, --[[Any*]] p4, --[[Any]] p5, --[[Any]] p6, --[[Any]] p7) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_DO_TRANSITION_QUICKMATCH_WITH_GROUP' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "userdata", "Arg #5 (p4) must be a userdata.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")
	assert(type(p6) == "number", "Arg #7 (p6) must be a number.")
	assert(type(p7) == "number", "Arg #8 (p7) must be a number.")

	local result = native_call(0x9C4AB58491FDC98A, p0, p1, p2, p3, p4, p5, p6, p7)
	return result:__tointeger() ~= 0
end
natives.network.network_do_transition_quickmatch_with_group = natives.NETWORK.NETWORK_DO_TRANSITION_QUICKMATCH_WITH_GROUP

function natives.NETWORK.NETWORK_JOIN_GROUP_ACTIVITY() -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_JOIN_GROUP_ACTIVITY' due to disabled trusted mode")

	local result = native_call(0xA06509A691D12BE4)
	return result:__tointeger()
end
natives.network.network_join_group_activity = natives.NETWORK.NETWORK_JOIN_GROUP_ACTIVITY

function natives.NETWORK.NETWORK_CLEAR_GROUP_ACTIVITY() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_CLEAR_GROUP_ACTIVITY' due to disabled trusted mode")

	local result = native_call(0x1888694923EF4591)
end
natives.network.network_clear_group_activity = natives.NETWORK.NETWORK_CLEAR_GROUP_ACTIVITY

function natives.NETWORK.NETWORK_RETAIN_ACTIVITY_GROUP() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_RETAIN_ACTIVITY_GROUP' due to disabled trusted mode")

	local result = native_call(0xB13E88E655E5A3BC)
end
natives.network.network_retain_activity_group = natives.NETWORK.NETWORK_RETAIN_ACTIVITY_GROUP

function natives.NETWORK.NETWORK_IS_TRANSITION_CLOSED_FRIENDS() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IS_TRANSITION_CLOSED_FRIENDS' due to disabled trusted mode")

	local result = native_call(0x6512765E3BE78C50)
	return result:__tointeger() ~= 0
end
natives.network.network_is_transition_closed_friends = natives.NETWORK.NETWORK_IS_TRANSITION_CLOSED_FRIENDS

function natives.NETWORK.NETWORK_IS_TRANSITION_CLOSED_CREW() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IS_TRANSITION_CLOSED_CREW' due to disabled trusted mode")

	local result = native_call(0x0DBD5D7E3C5BEC3B)
	return result:__tointeger() ~= 0
end
natives.network.network_is_transition_closed_crew = natives.NETWORK.NETWORK_IS_TRANSITION_CLOSED_CREW

function natives.NETWORK.NETWORK_IS_TRANSITION_SOLO() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IS_TRANSITION_SOLO' due to disabled trusted mode")

	local result = native_call(0x5DC577201723960A)
	return result:__tointeger() ~= 0
end
natives.network.network_is_transition_solo = natives.NETWORK.NETWORK_IS_TRANSITION_SOLO

function natives.NETWORK.NETWORK_IS_TRANSITION_PRIVATE() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IS_TRANSITION_PRIVATE' due to disabled trusted mode")

	local result = native_call(0x5A6AA44FF8E931E6)
	return result:__tointeger() ~= 0
end
natives.network.network_is_transition_private = natives.NETWORK.NETWORK_IS_TRANSITION_PRIVATE

function natives.NETWORK.NETWORK_GET_NUM_TRANSITION_NON_ASYNC_GAMERS() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_NUM_TRANSITION_NON_ASYNC_GAMERS' due to disabled trusted mode")

	local result = native_call(0x617F49C2668E6155)
	return result:__tointeger()
end
natives.network.network_get_num_transition_non_async_gamers = natives.NETWORK.NETWORK_GET_NUM_TRANSITION_NON_ASYNC_GAMERS

function natives.NETWORK.NETWORK_MARK_AS_PREFERRED_ACTIVITY(--[[BOOL]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_MARK_AS_PREFERRED_ACTIVITY' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0x261E97AD7BCF3D40, p0)
end
natives.network.network_mark_as_preferred_activity = natives.NETWORK.NETWORK_MARK_AS_PREFERRED_ACTIVITY

function natives.NETWORK.NETWORK_MARK_AS_WAITING_ASYNC(--[[BOOL]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_MARK_AS_WAITING_ASYNC' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0x39917E1B4CB0F911, p0)
end
natives.network.network_mark_as_waiting_async = natives.NETWORK.NETWORK_MARK_AS_WAITING_ASYNC

function natives.NETWORK.NETWORK_SET_IN_PROGRESS_FINISH_TIME(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SET_IN_PROGRESS_FINISH_TIME' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x2CE9D95E4051AECD, p0)
end
natives.network.network_set_in_progress_finish_time = natives.NETWORK.NETWORK_SET_IN_PROGRESS_FINISH_TIME

function natives.NETWORK.NETWORK_SET_TRANSITION_CREATOR_HANDLE(--[[Any*]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SET_TRANSITION_CREATOR_HANDLE' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")

	local result = native_call(0xEF26739BCD9907D5, p0)
end
natives.network.network_set_transition_creator_handle = natives.NETWORK.NETWORK_SET_TRANSITION_CREATOR_HANDLE

function natives.NETWORK.NETWORK_CLEAR_TRANSITION_CREATOR_HANDLE() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_CLEAR_TRANSITION_CREATOR_HANDLE' due to disabled trusted mode")

	local result = native_call(0xFB3272229A82C759)
end
natives.network.network_clear_transition_creator_handle = natives.NETWORK.NETWORK_CLEAR_TRANSITION_CREATOR_HANDLE

function natives.NETWORK.NETWORK_INVITE_GAMERS_TO_TRANSITION(--[[Any*]] p0, --[[Any]] p1) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_INVITE_GAMERS_TO_TRANSITION' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x4A595C32F77DFF76, p0, p1)
	return result:__tointeger() ~= 0
end
natives.network.network_invite_gamers_to_transition = natives.NETWORK.NETWORK_INVITE_GAMERS_TO_TRANSITION

function natives.NETWORK.NETWORK_SET_GAMER_INVITED_TO_TRANSITION(--[[Any*]] gamerHandle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SET_GAMER_INVITED_TO_TRANSITION' due to disabled trusted mode")

	assert(type(gamerHandle) == "userdata", "Arg #1 (gamerHandle) must be a userdata.")

	local result = native_call(0xCA2C8073411ECDB6, gamerHandle)
end
natives.network.network_set_gamer_invited_to_transition = natives.NETWORK.NETWORK_SET_GAMER_INVITED_TO_TRANSITION

function natives.NETWORK.NETWORK_LEAVE_TRANSITION() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_LEAVE_TRANSITION' due to disabled trusted mode")

	local result = native_call(0xD23A1A815D21DB19)
	return result:__tointeger() ~= 0
end
natives.network.network_leave_transition = natives.NETWORK.NETWORK_LEAVE_TRANSITION

function natives.NETWORK.NETWORK_LAUNCH_TRANSITION() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_LAUNCH_TRANSITION' due to disabled trusted mode")

	local result = native_call(0x2DCF46CB1A4F0884)
	return result:__tointeger() ~= 0
end
natives.network.network_launch_transition = natives.NETWORK.NETWORK_LAUNCH_TRANSITION

--[[
Appears to set whether a transition should be started when the session is migrating.
]]
function natives.NETWORK.NETWORK_SET_DO_NOT_LAUNCH_FROM_JOIN_AS_MIGRATED_HOST(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SET_DO_NOT_LAUNCH_FROM_JOIN_AS_MIGRATED_HOST' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0xA2E9C1AB8A92E8CD, toggle)
end
natives.network.network_set_do_not_launch_from_join_as_migrated_host = natives.NETWORK.NETWORK_SET_DO_NOT_LAUNCH_FROM_JOIN_AS_MIGRATED_HOST

function natives.NETWORK.NETWORK_CANCEL_TRANSITION_MATCHMAKING() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_CANCEL_TRANSITION_MATCHMAKING' due to disabled trusted mode")

	local result = native_call(0x023782EFC70585EE)
end
natives.network.network_cancel_transition_matchmaking = natives.NETWORK.NETWORK_CANCEL_TRANSITION_MATCHMAKING

function natives.NETWORK.NETWORK_BAIL_TRANSITION(--[[int]] p0, --[[int]] p1, --[[int]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_BAIL_TRANSITION' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0xEAA572036990CD1B, p0, p1, p2)
end
natives.network.network_bail_transition = natives.NETWORK.NETWORK_BAIL_TRANSITION

function natives.NETWORK.NETWORK_DO_TRANSITION_TO_GAME(--[[BOOL]] p0, --[[int]] maxPlayers) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_DO_TRANSITION_TO_GAME' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")
	assert(type(maxPlayers) == "number", "Arg #2 (maxPlayers) must be a number.")

	local result = native_call(0x3E9BB38102A589B0, p0, maxPlayers)
	return result:__tointeger() ~= 0
end
natives.network.network_do_transition_to_game = natives.NETWORK.NETWORK_DO_TRANSITION_TO_GAME

function natives.NETWORK.NETWORK_DO_TRANSITION_TO_NEW_GAME(--[[BOOL]] p0, --[[int]] maxPlayers, --[[BOOL]] p2) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_DO_TRANSITION_TO_NEW_GAME' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")
	assert(type(maxPlayers) == "number", "Arg #2 (maxPlayers) must be a number.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")

	local result = native_call(0x4665F51EFED00034, p0, maxPlayers, p2)
	return result:__tointeger() ~= 0
end
natives.network.network_do_transition_to_new_game = natives.NETWORK.NETWORK_DO_TRANSITION_TO_NEW_GAME

--[[
p2 is true 3/4 of the occurrences I found.
'players' is the number of players for a session. On PS3/360 it's always 18. On PC it's 32.
]]
function natives.NETWORK.NETWORK_DO_TRANSITION_TO_FREEMODE(--[[Any*]] p0, --[[Any]] p1, --[[BOOL]] p2, --[[int]] players, --[[BOOL]] p4) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_DO_TRANSITION_TO_FREEMODE' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")
	assert(type(players) == "number", "Arg #4 (players) must be a number.")
	assert(type(p4) == "boolean", "Arg #5 (p4) must be a boolean.")

	local result = native_call(0x3AAD8B2FCA1E289F, p0, p1, p2, players, p4)
	return result:__tointeger() ~= 0
end
natives.network.network_do_transition_to_freemode = natives.NETWORK.NETWORK_DO_TRANSITION_TO_FREEMODE

function natives.NETWORK.NETWORK_DO_TRANSITION_TO_NEW_FREEMODE(--[[Any*]] p0, --[[Any]] p1, --[[int]] players, --[[BOOL]] p3, --[[BOOL]] p4, --[[BOOL]] p5) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_DO_TRANSITION_TO_NEW_FREEMODE' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(players) == "number", "Arg #3 (players) must be a number.")
	assert(type(p3) == "boolean", "Arg #4 (p3) must be a boolean.")
	assert(type(p4) == "boolean", "Arg #5 (p4) must be a boolean.")
	assert(type(p5) == "boolean", "Arg #6 (p5) must be a boolean.")

	local result = native_call(0x9E80A5BA8109F974, p0, p1, players, p3, p4, p5)
	return result:__tointeger() ~= 0
end
natives.network.network_do_transition_to_new_freemode = natives.NETWORK.NETWORK_DO_TRANSITION_TO_NEW_FREEMODE

function natives.NETWORK.NETWORK_IS_TRANSITION_TO_GAME() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IS_TRANSITION_TO_GAME' due to disabled trusted mode")

	local result = native_call(0x9D7696D8F4FA6CB7)
	return result:__tointeger() ~= 0
end
natives.network.network_is_transition_to_game = natives.NETWORK.NETWORK_IS_TRANSITION_TO_GAME

--[[
Returns count.
]]
function natives.NETWORK.NETWORK_GET_TRANSITION_MEMBERS(--[[Any*]] data, --[[int]] dataCount) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_TRANSITION_MEMBERS' due to disabled trusted mode")

	assert(type(data) == "userdata", "Arg #1 (data) must be a userdata.")
	assert(type(dataCount) == "number", "Arg #2 (dataCount) must be a number.")

	local result = native_call(0x73B000F7FBC55829, data, dataCount)
	return result:__tointeger()
end
natives.network.network_get_transition_members = natives.NETWORK.NETWORK_GET_TRANSITION_MEMBERS

function natives.NETWORK.NETWORK_APPLY_TRANSITION_PARAMETER(--[[int]] p0, --[[int]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_APPLY_TRANSITION_PARAMETER' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x521638ADA1BA0D18, p0, p1)
end
natives.network.network_apply_transition_parameter = natives.NETWORK.NETWORK_APPLY_TRANSITION_PARAMETER

function natives.NETWORK.NETWORK_APPLY_TRANSITION_PARAMETER_STRING(--[[int]] p0, --[[const char*]] string, --[[BOOL]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_APPLY_TRANSITION_PARAMETER_STRING' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(string) == "string", "Arg #2 (string) must be a string.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")

	local result = native_call(0xEBEFC2E77084F599, p0, string, p2)
end
natives.network.network_apply_transition_parameter_string = natives.NETWORK.NETWORK_APPLY_TRANSITION_PARAMETER_STRING

function natives.NETWORK.NETWORK_SEND_TRANSITION_GAMER_INSTRUCTION(--[[Any*]] gamerHandle, --[[const char*]] p1, --[[int]] p2, --[[int]] p3, --[[BOOL]] p4) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SEND_TRANSITION_GAMER_INSTRUCTION' due to disabled trusted mode")

	assert(type(gamerHandle) == "userdata", "Arg #1 (gamerHandle) must be a userdata.")
	assert(type(p1) == "string", "Arg #2 (p1) must be a string.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "boolean", "Arg #5 (p4) must be a boolean.")

	local result = native_call(0x31D1D2B858D25E6B, gamerHandle, p1, p2, p3, p4)
	return result:__tointeger() ~= 0
end
natives.network.network_send_transition_gamer_instruction = natives.NETWORK.NETWORK_SEND_TRANSITION_GAMER_INSTRUCTION

function natives.NETWORK.NETWORK_MARK_TRANSITION_GAMER_AS_FULLY_JOINED(--[[Any*]] p0) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_MARK_TRANSITION_GAMER_AS_FULLY_JOINED' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")

	local result = native_call(0x5728BB6D63E3FF1D, p0)
	return result:__tointeger() ~= 0
end
natives.network.network_mark_transition_gamer_as_fully_joined = natives.NETWORK.NETWORK_MARK_TRANSITION_GAMER_AS_FULLY_JOINED

function natives.NETWORK.NETWORK_IS_TRANSITION_HOST() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IS_TRANSITION_HOST' due to disabled trusted mode")

	local result = native_call(0x0B824797C9BF2159)
	return result:__tointeger() ~= 0
end
natives.network.network_is_transition_host = natives.NETWORK.NETWORK_IS_TRANSITION_HOST

function natives.NETWORK.NETWORK_IS_TRANSITION_HOST_FROM_HANDLE(--[[Any*]] gamerHandle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IS_TRANSITION_HOST_FROM_HANDLE' due to disabled trusted mode")

	assert(type(gamerHandle) == "userdata", "Arg #1 (gamerHandle) must be a userdata.")

	local result = native_call(0x6B5C83BA3EFE6A10, gamerHandle)
	return result:__tointeger() ~= 0
end
natives.network.network_is_transition_host_from_handle = natives.NETWORK.NETWORK_IS_TRANSITION_HOST_FROM_HANDLE

function natives.NETWORK.NETWORK_GET_TRANSITION_HOST(--[[Any*]] gamerHandle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_TRANSITION_HOST' due to disabled trusted mode")

	assert(type(gamerHandle) == "userdata", "Arg #1 (gamerHandle) must be a userdata.")

	local result = native_call(0x65042B9774C4435E, gamerHandle)
	return result:__tointeger() ~= 0
end
natives.network.network_get_transition_host = natives.NETWORK.NETWORK_GET_TRANSITION_HOST

function natives.NETWORK.NETWORK_IS_IN_TRANSITION() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IS_IN_TRANSITION' due to disabled trusted mode")

	local result = native_call(0x68049AEFF83D8F0A)
	return result:__tointeger() ~= 0
end
natives.network.network_is_in_transition = natives.NETWORK.NETWORK_IS_IN_TRANSITION

function natives.NETWORK.NETWORK_IS_TRANSITION_STARTED() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IS_TRANSITION_STARTED' due to disabled trusted mode")

	local result = native_call(0x53FA83401D9C07FE)
	return result:__tointeger() ~= 0
end
natives.network.network_is_transition_started = natives.NETWORK.NETWORK_IS_TRANSITION_STARTED

function natives.NETWORK.NETWORK_IS_TRANSITION_BUSY() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IS_TRANSITION_BUSY' due to disabled trusted mode")

	local result = native_call(0x520F3282A53D26B7)
	return result:__tointeger() ~= 0
end
natives.network.network_is_transition_busy = natives.NETWORK.NETWORK_IS_TRANSITION_BUSY

function natives.NETWORK.NETWORK_IS_TRANSITION_MATCHMAKING() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IS_TRANSITION_MATCHMAKING' due to disabled trusted mode")

	local result = native_call(0x292564C735375EDF)
	return result:__tointeger() ~= 0
end
natives.network.network_is_transition_matchmaking = natives.NETWORK.NETWORK_IS_TRANSITION_MATCHMAKING

function natives.NETWORK.NETWORK_IS_TRANSITION_LEAVE_POSTPONED() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IS_TRANSITION_LEAVE_POSTPONED' due to disabled trusted mode")

	local result = native_call(0xC571D0E77D8BBC29)
	return result:__tointeger() ~= 0
end
natives.network.network_is_transition_leave_postponed = natives.NETWORK.NETWORK_IS_TRANSITION_LEAVE_POSTPONED

function natives.NETWORK.NETWORK_TRANSITION_SET_IN_PROGRESS(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_TRANSITION_SET_IN_PROGRESS' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x1398582B7F72B3ED, p0)
end
natives.network.network_transition_set_in_progress = natives.NETWORK.NETWORK_TRANSITION_SET_IN_PROGRESS

function natives.NETWORK.NETWORK_TRANSITION_SET_CONTENT_CREATOR(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_TRANSITION_SET_CONTENT_CREATOR' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x1F8E00FB18239600, p0)
end
natives.network.network_transition_set_content_creator = natives.NETWORK.NETWORK_TRANSITION_SET_CONTENT_CREATOR

function natives.NETWORK.NETWORK_TRANSITION_SET_ACTIVITY_ISLAND(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_TRANSITION_SET_ACTIVITY_ISLAND' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xF6F4383B7C92F11A, p0)
end
natives.network.network_transition_set_activity_island = natives.NETWORK.NETWORK_TRANSITION_SET_ACTIVITY_ISLAND

function natives.NETWORK.NETWORK_OPEN_TRANSITION_MATCHMAKING() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_OPEN_TRANSITION_MATCHMAKING' due to disabled trusted mode")

	local result = native_call(0x2B3A8F7CA3A38FDE)
end
natives.network.network_open_transition_matchmaking = natives.NETWORK.NETWORK_OPEN_TRANSITION_MATCHMAKING

function natives.NETWORK.NETWORK_CLOSE_TRANSITION_MATCHMAKING() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_CLOSE_TRANSITION_MATCHMAKING' due to disabled trusted mode")

	local result = native_call(0x43F4DBA69710E01E)
end
natives.network.network_close_transition_matchmaking = natives.NETWORK.NETWORK_CLOSE_TRANSITION_MATCHMAKING

function natives.NETWORK.NETWORK_IS_TRANSITION_OPEN_TO_MATCHMAKING() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IS_TRANSITION_OPEN_TO_MATCHMAKING' due to disabled trusted mode")

	local result = native_call(0x37A4494483B9F5C9)
	return result:__tointeger() ~= 0
end
natives.network.network_is_transition_open_to_matchmaking = natives.NETWORK.NETWORK_IS_TRANSITION_OPEN_TO_MATCHMAKING

function natives.NETWORK.NETWORK_SET_TRANSITION_VISIBILITY_LOCK(--[[BOOL]] p0, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SET_TRANSITION_VISIBILITY_LOCK' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0x0C978FDA19692C2C, p0, p1)
end
natives.network.network_set_transition_visibility_lock = natives.NETWORK.NETWORK_SET_TRANSITION_VISIBILITY_LOCK

function natives.NETWORK.NETWORK_IS_TRANSITION_VISIBILITY_LOCKED() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IS_TRANSITION_VISIBILITY_LOCKED' due to disabled trusted mode")

	local result = native_call(0xD0A484CB2F829FBE)
	return result:__tointeger() ~= 0
end
natives.network.network_is_transition_visibility_locked = natives.NETWORK.NETWORK_IS_TRANSITION_VISIBILITY_LOCKED

function natives.NETWORK.NETWORK_SET_TRANSITION_ACTIVITY_ID(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SET_TRANSITION_ACTIVITY_ID' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x30DE938B516F0AD2, p0)
end
natives.network.network_set_transition_activity_id = natives.NETWORK.NETWORK_SET_TRANSITION_ACTIVITY_ID

function natives.NETWORK.NETWORK_CHANGE_TRANSITION_SLOTS(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_CHANGE_TRANSITION_SLOTS' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xEEEDA5E6D7080987, p0, p1)
end
natives.network.network_change_transition_slots = natives.NETWORK.NETWORK_CHANGE_TRANSITION_SLOTS

function natives.NETWORK.NETWORK_TRANSITION_BLOCK_JOIN_REQUESTS(--[[BOOL]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_TRANSITION_BLOCK_JOIN_REQUESTS' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0x973D76AA760A6CB6, p0)
end
natives.network.network_transition_block_join_requests = natives.NETWORK.NETWORK_TRANSITION_BLOCK_JOIN_REQUESTS

function natives.NETWORK.NETWORK_HAS_PLAYER_STARTED_TRANSITION(--[[Player]] player) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_HAS_PLAYER_STARTED_TRANSITION' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0x9AC9CCBFA8C29795, player)
	return result:__tointeger() ~= 0
end
natives.network.network_has_player_started_transition = natives.NETWORK.NETWORK_HAS_PLAYER_STARTED_TRANSITION

function natives.NETWORK.NETWORK_ARE_TRANSITION_DETAILS_VALID(--[[Any]] p0) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_ARE_TRANSITION_DETAILS_VALID' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x2615AA2A695930C1, p0)
	return result:__tointeger() ~= 0
end
natives.network.network_are_transition_details_valid = natives.NETWORK.NETWORK_ARE_TRANSITION_DETAILS_VALID

--[[
int handle[76];
          NETWORK_HANDLE_FROM_FRIEND(iSelectedPlayer, &handle[0], 13);
          Player uVar2 = NETWORK_GET_PLAYER_FROM_GAMER_HANDLE(&handle[0]);
          NETWORK_JOIN_TRANSITION(uVar2);
nothing doin.
]]
function natives.NETWORK.NETWORK_JOIN_TRANSITION(--[[Player]] player) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_JOIN_TRANSITION' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0x9D060B08CD63321A, player)
	return result:__tointeger() ~= 0
end
natives.network.network_join_transition = natives.NETWORK.NETWORK_JOIN_TRANSITION

function natives.NETWORK.NETWORK_HAS_INVITED_GAMER_TO_TRANSITION(--[[Any*]] p0) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_HAS_INVITED_GAMER_TO_TRANSITION' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")

	local result = native_call(0x7284A47B3540E6CF, p0)
	return result:__tointeger() ~= 0
end
natives.network.network_has_invited_gamer_to_transition = natives.NETWORK.NETWORK_HAS_INVITED_GAMER_TO_TRANSITION

function natives.NETWORK.NETWORK_HAS_TRANSITION_INVITE_BEEN_ACKED(--[[Any*]] p0) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_HAS_TRANSITION_INVITE_BEEN_ACKED' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")

	local result = native_call(0x3F9990BF5F22759C, p0)
	return result:__tointeger() ~= 0
end
natives.network.network_has_transition_invite_been_acked = natives.NETWORK.NETWORK_HAS_TRANSITION_INVITE_BEEN_ACKED

function natives.NETWORK.NETWORK_IS_ACTIVITY_SESSION() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IS_ACTIVITY_SESSION' due to disabled trusted mode")

	local result = native_call(0x05095437424397FA)
	return result:__tointeger() ~= 0
end
natives.network.network_is_activity_session = natives.NETWORK.NETWORK_IS_ACTIVITY_SESSION

function natives.NETWORK.NETWORK_DISABLE_REALTIME_MULTIPLAYER() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_DISABLE_REALTIME_MULTIPLAYER' due to disabled trusted mode")

	local result = native_call(0x236905C700FDB54D)
end
natives.network.network_disable_realtime_multiplayer = natives.NETWORK.NETWORK_DISABLE_REALTIME_MULTIPLAYER

--[[
Does nothing. It's just a nullsub.
]]
function natives.NETWORK.NETWORK_SET_PRESENCE_SESSION_INVITES_BLOCKED(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SET_PRESENCE_SESSION_INVITES_BLOCKED' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x4A9FDE3A5A6D0437, toggle)
end
natives.network.network_set_presence_session_invites_blocked = natives.NETWORK.NETWORK_SET_PRESENCE_SESSION_INVITES_BLOCKED

function natives.NETWORK.NETWORK_SEND_INVITE_VIA_PRESENCE(--[[Any*]] gamerHandle, --[[const char*]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SEND_INVITE_VIA_PRESENCE' due to disabled trusted mode")

	assert(type(gamerHandle) == "userdata", "Arg #1 (gamerHandle) must be a userdata.")
	assert(type(p1) == "string", "Arg #2 (p1) must be a string.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0xC3C7A6AFDB244624, gamerHandle, p1, p2, p3)
	return result:__tointeger() ~= 0
end
natives.network.network_send_invite_via_presence = natives.NETWORK.NETWORK_SEND_INVITE_VIA_PRESENCE

function natives.NETWORK.NETWORK_SEND_TRANSITION_INVITE_VIA_PRESENCE(--[[Any*]] gamerHandle, --[[const char*]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SEND_TRANSITION_INVITE_VIA_PRESENCE' due to disabled trusted mode")

	assert(type(gamerHandle) == "userdata", "Arg #1 (gamerHandle) must be a userdata.")
	assert(type(p1) == "string", "Arg #2 (p1) must be a string.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0xC116FF9B4D488291, gamerHandle, p1, p2, p3)
	return result:__tointeger() ~= 0
end
natives.network.network_send_transition_invite_via_presence = natives.NETWORK.NETWORK_SEND_TRANSITION_INVITE_VIA_PRESENCE

--[[
Contains the string "NETWORK_SEND_PRESENCE_TRANSITION_INVITE" but so does 0xC116FF9B4D488291; seems to fit alphabetically here, tho.
]]
function natives.NETWORK.NETWORK_SEND_IMPORTANT_TRANSITION_INVITE_VIA_PRESENCE(--[[Any*]] gamerHandle, --[[const char*]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SEND_IMPORTANT_TRANSITION_INVITE_VIA_PRESENCE' due to disabled trusted mode")

	assert(type(gamerHandle) == "userdata", "Arg #1 (gamerHandle) must be a userdata.")
	assert(type(p1) == "string", "Arg #2 (p1) must be a string.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x1171A97A3D3981B6, gamerHandle, p1, p2, p3)
	return result:__tointeger() ~= 0
end
natives.network.network_send_important_transition_invite_via_presence = natives.NETWORK.NETWORK_SEND_IMPORTANT_TRANSITION_INVITE_VIA_PRESENCE

function natives.NETWORK.NETWORK_GET_PRESENCE_INVITE_INDEX_BY_ID(--[[Any]] p0) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_PRESENCE_INVITE_INDEX_BY_ID' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x742B58F723233ED9, p0)
	return result:__tointeger()
end
natives.network.network_get_presence_invite_index_by_id = natives.NETWORK.NETWORK_GET_PRESENCE_INVITE_INDEX_BY_ID

function natives.NETWORK.NETWORK_GET_NUM_PRESENCE_INVITES() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_NUM_PRESENCE_INVITES' due to disabled trusted mode")

	local result = native_call(0xCEFA968912D0F78D)
	return result:__tointeger()
end
natives.network.network_get_num_presence_invites = natives.NETWORK.NETWORK_GET_NUM_PRESENCE_INVITES

function natives.NETWORK.NETWORK_ACCEPT_PRESENCE_INVITE(--[[Any]] p0) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_ACCEPT_PRESENCE_INVITE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xFA91550DF9318B22, p0)
	return result:__tointeger() ~= 0
end
natives.network.network_accept_presence_invite = natives.NETWORK.NETWORK_ACCEPT_PRESENCE_INVITE

function natives.NETWORK.NETWORK_REMOVE_PRESENCE_INVITE(--[[Any]] p0) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_REMOVE_PRESENCE_INVITE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xF0210268DB0974B1, p0)
	return result:__tointeger() ~= 0
end
natives.network.network_remove_presence_invite = natives.NETWORK.NETWORK_REMOVE_PRESENCE_INVITE

function natives.NETWORK.NETWORK_GET_PRESENCE_INVITE_ID(--[[Any]] p0) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_PRESENCE_INVITE_ID' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xDFF09646E12EC386, p0)
	return result:__tointeger()
end
natives.network.network_get_presence_invite_id = natives.NETWORK.NETWORK_GET_PRESENCE_INVITE_ID

function natives.NETWORK.NETWORK_GET_PRESENCE_INVITE_INVITER(--[[Any]] p0) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_PRESENCE_INVITE_INVITER' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x4962CC4AA2F345B7, p0)
	return result:__tointeger()
end
natives.network.network_get_presence_invite_inviter = natives.NETWORK.NETWORK_GET_PRESENCE_INVITE_INVITER

function natives.NETWORK.NETWORK_GET_PRESENCE_INVITE_HANDLE(--[[Any]] p0, --[[Any*]] p1) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_PRESENCE_INVITE_HANDLE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "userdata", "Arg #2 (p1) must be a userdata.")

	local result = native_call(0x38D5B0FEBB086F75, p0, p1)
	return result:__tointeger() ~= 0
end
natives.network.network_get_presence_invite_handle = natives.NETWORK.NETWORK_GET_PRESENCE_INVITE_HANDLE

function natives.NETWORK.NETWORK_GET_PRESENCE_INVITE_SESSION_ID(--[[Any]] p0) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_PRESENCE_INVITE_SESSION_ID' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x26E1CD96B0903D60, p0)
	return result:__tointeger()
end
natives.network.network_get_presence_invite_session_id = natives.NETWORK.NETWORK_GET_PRESENCE_INVITE_SESSION_ID

function natives.NETWORK.NETWORK_GET_PRESENCE_INVITE_CONTENT_ID(--[[Any]] p0) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_PRESENCE_INVITE_CONTENT_ID' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x24409FC4C55CB22D, p0)
	return result:__tointeger()
end
natives.network.network_get_presence_invite_content_id = natives.NETWORK.NETWORK_GET_PRESENCE_INVITE_CONTENT_ID

function natives.NETWORK.NETWORK_GET_PRESENCE_INVITE_PLAYLIST_LENGTH(--[[Any]] p0) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_PRESENCE_INVITE_PLAYLIST_LENGTH' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xD39B3FFF8FFDD5BF, p0)
	return result:__tointeger()
end
natives.network.network_get_presence_invite_playlist_length = natives.NETWORK.NETWORK_GET_PRESENCE_INVITE_PLAYLIST_LENGTH

function natives.NETWORK.NETWORK_GET_PRESENCE_INVITE_PLAYLIST_CURRENT(--[[Any]] p0) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_PRESENCE_INVITE_PLAYLIST_CURRENT' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x728C4CC7920CD102, p0)
	return result:__tointeger()
end
natives.network.network_get_presence_invite_playlist_current = natives.NETWORK.NETWORK_GET_PRESENCE_INVITE_PLAYLIST_CURRENT

function natives.NETWORK.NETWORK_GET_PRESENCE_INVITE_FROM_ADMIN(--[[Any]] p0) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_PRESENCE_INVITE_FROM_ADMIN' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x3DBF2DF0AEB7D289, p0)
	return result:__tointeger() ~= 0
end
natives.network.network_get_presence_invite_from_admin = natives.NETWORK.NETWORK_GET_PRESENCE_INVITE_FROM_ADMIN

function natives.NETWORK.NETWORK_GET_PRESENCE_INVITE_IS_TOURNAMENT(--[[Any]] p0) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_PRESENCE_INVITE_IS_TOURNAMENT' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x8806CEBFABD3CE05, p0)
	return result:__tointeger() ~= 0
end
natives.network.network_get_presence_invite_is_tournament = natives.NETWORK.NETWORK_GET_PRESENCE_INVITE_IS_TOURNAMENT

function natives.NETWORK.NETWORK_HAS_FOLLOW_INVITE() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_HAS_FOLLOW_INVITE' due to disabled trusted mode")

	local result = native_call(0x76D9B976C4C09FDE)
	return result:__tointeger() ~= 0
end
natives.network.network_has_follow_invite = natives.NETWORK.NETWORK_HAS_FOLLOW_INVITE

function natives.NETWORK.NETWORK_ACTION_FOLLOW_INVITE() -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_ACTION_FOLLOW_INVITE' due to disabled trusted mode")

	local result = native_call(0xC88156EBB786F8D5)
	return result:__tointeger()
end
natives.network.network_action_follow_invite = natives.NETWORK.NETWORK_ACTION_FOLLOW_INVITE

function natives.NETWORK.NETWORK_CLEAR_FOLLOW_INVITE() -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_CLEAR_FOLLOW_INVITE' due to disabled trusted mode")

	local result = native_call(0x439BFDE3CD0610F6)
	return result:__tointeger()
end
natives.network.network_clear_follow_invite = natives.NETWORK.NETWORK_CLEAR_FOLLOW_INVITE

function natives.NETWORK.NETWORK_REMOVE_AND_CANCEL_ALL_INVITES() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_REMOVE_AND_CANCEL_ALL_INVITES' due to disabled trusted mode")

	local result = native_call(0xEBF8284D8CADEB53)
end
natives.network.network_remove_and_cancel_all_invites = natives.NETWORK.NETWORK_REMOVE_AND_CANCEL_ALL_INVITES

function natives.NETWORK.NETWORK_REMOVE_TRANSITION_INVITE(--[[Any*]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_REMOVE_TRANSITION_INVITE' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")

	local result = native_call(0x7524B431B2E6F7EE, p0)
end
natives.network.network_remove_transition_invite = natives.NETWORK.NETWORK_REMOVE_TRANSITION_INVITE

function natives.NETWORK.NETWORK_REMOVE_ALL_TRANSITION_INVITE() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_REMOVE_ALL_TRANSITION_INVITE' due to disabled trusted mode")

	local result = native_call(0x726E0375C7A26368)
end
natives.network.network_remove_all_transition_invite = natives.NETWORK.NETWORK_REMOVE_ALL_TRANSITION_INVITE

function natives.NETWORK.NETWORK_REMOVE_AND_CANCEL_ALL_TRANSITION_INVITES() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_REMOVE_AND_CANCEL_ALL_TRANSITION_INVITES' due to disabled trusted mode")

	local result = native_call(0xF083835B70BA9BFE)
end
natives.network.network_remove_and_cancel_all_transition_invites = natives.NETWORK.NETWORK_REMOVE_AND_CANCEL_ALL_TRANSITION_INVITES

function natives.NETWORK.NETWORK_INVITE_GAMERS(--[[Any*]] p0, --[[Any]] p1, --[[Any*]] p2, --[[Any*]] p3) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_INVITE_GAMERS' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "userdata", "Arg #3 (p2) must be a userdata.")
	assert(type(p3) == "userdata", "Arg #4 (p3) must be a userdata.")

	local result = native_call(0x9D80CD1D0E6327DE, p0, p1, p2, p3)
	return result:__tointeger() ~= 0
end
natives.network.network_invite_gamers = natives.NETWORK.NETWORK_INVITE_GAMERS

function natives.NETWORK.NETWORK_HAS_INVITED_GAMER(--[[Any*]] p0) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_HAS_INVITED_GAMER' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")

	local result = native_call(0x4D86CD31E8976ECE, p0)
	return result:__tointeger() ~= 0
end
natives.network.network_has_invited_gamer = natives.NETWORK.NETWORK_HAS_INVITED_GAMER

function natives.NETWORK.NETWORK_HAS_MADE_INVITE_DECISION(--[[Any*]] gamerHandle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_HAS_MADE_INVITE_DECISION' due to disabled trusted mode")

	assert(type(gamerHandle) == "userdata", "Arg #1 (gamerHandle) must be a userdata.")

	local result = native_call(0x71DC455F5CD1C2B1, gamerHandle)
	return result:__tointeger() ~= 0
end
natives.network.network_has_made_invite_decision = natives.NETWORK.NETWORK_HAS_MADE_INVITE_DECISION

function natives.NETWORK.NETWORK_GET_INVITE_REPLY_STATUS(--[[Any]] p0) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_INVITE_REPLY_STATUS' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x3855FB5EB2C5E8B2, p0)
	return result:__tointeger()
end
natives.network.network_get_invite_reply_status = natives.NETWORK.NETWORK_GET_INVITE_REPLY_STATUS

function natives.NETWORK.NETWORK_GET_CURRENTLY_SELECTED_GAMER_HANDLE_FROM_INVITE_MENU(--[[Any*]] p0) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_CURRENTLY_SELECTED_GAMER_HANDLE_FROM_INVITE_MENU' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")

	local result = native_call(0x74881E6BCAE2327C, p0)
	return result:__tointeger() ~= 0
end
natives.network.network_get_currently_selected_gamer_handle_from_invite_menu = natives.NETWORK.NETWORK_GET_CURRENTLY_SELECTED_GAMER_HANDLE_FROM_INVITE_MENU

function natives.NETWORK.NETWORK_SET_CURRENTLY_SELECTED_GAMER_HANDLE_FROM_INVITE_MENU(--[[Any*]] p0) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SET_CURRENTLY_SELECTED_GAMER_HANDLE_FROM_INVITE_MENU' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")

	local result = native_call(0x7206F674F2A3B1BB, p0)
	return result:__tointeger() ~= 0
end
natives.network.network_set_currently_selected_gamer_handle_from_invite_menu = natives.NETWORK.NETWORK_SET_CURRENTLY_SELECTED_GAMER_HANDLE_FROM_INVITE_MENU

function natives.NETWORK.NETWORK_SET_INVITE_ON_CALL_FOR_INVITE_MENU(--[[Any*]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SET_INVITE_ON_CALL_FOR_INVITE_MENU' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")

	local result = native_call(0x66F010A4B031A331, p0)
end
natives.network.network_set_invite_on_call_for_invite_menu = natives.NETWORK.NETWORK_SET_INVITE_ON_CALL_FOR_INVITE_MENU

function natives.NETWORK.NETWORK_CHECK_DATA_MANAGER_SUCCEEDED_FOR_HANDLE(--[[Any]] p0, --[[Any*]] p1) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_CHECK_DATA_MANAGER_SUCCEEDED_FOR_HANDLE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "userdata", "Arg #2 (p1) must be a userdata.")

	local result = native_call(0x44B37CDCAE765AAE, p0, p1)
	return result:__tointeger() ~= 0
end
natives.network.network_check_data_manager_succeeded_for_handle = natives.NETWORK.NETWORK_CHECK_DATA_MANAGER_SUCCEEDED_FOR_HANDLE

function natives.NETWORK.NETWORK_CHECK_DATA_MANAGER_FOR_HANDLE(--[[Any]] p0, --[[Any]] p1) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_CHECK_DATA_MANAGER_FOR_HANDLE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x4AD490AE1536933B, p0, p1)
	return result:__tointeger()
end
natives.network.network_check_data_manager_for_handle = natives.NETWORK.NETWORK_CHECK_DATA_MANAGER_FOR_HANDLE

function natives.NETWORK.NETWORK_SET_INVITE_FAILED_MESSAGE_FOR_INVITE_MENU(--[[Any*]] p0, --[[Any*]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SET_INVITE_FAILED_MESSAGE_FOR_INVITE_MENU' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")
	assert(type(p1) == "userdata", "Arg #2 (p1) must be a userdata.")

	local result = native_call(0x0D77A82DC2D0DA59, p0, p1)
end
natives.network.network_set_invite_failed_message_for_invite_menu = natives.NETWORK.NETWORK_SET_INVITE_FAILED_MESSAGE_FOR_INVITE_MENU

function natives.NETWORK.FILLOUT_PM_PLAYER_LIST(--[[Any*]] gamerHandle, --[[Any]] p1, --[[Any]] p2) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.FILLOUT_PM_PLAYER_LIST' due to disabled trusted mode")

	assert(type(gamerHandle) == "userdata", "Arg #1 (gamerHandle) must be a userdata.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0xCBBD7C4991B64809, gamerHandle, p1, p2)
	return result:__tointeger() ~= 0
end
natives.network.fillout_pm_player_list = natives.NETWORK.FILLOUT_PM_PLAYER_LIST

function natives.NETWORK.FILLOUT_PM_PLAYER_LIST_WITH_NAMES(--[[Any*]] p0, --[[Any*]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.FILLOUT_PM_PLAYER_LIST_WITH_NAMES' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")
	assert(type(p1) == "userdata", "Arg #2 (p1) must be a userdata.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x716B6DB9D1886106, p0, p1, p2, p3)
	return result:__tointeger() ~= 0
end
natives.network.fillout_pm_player_list_with_names = natives.NETWORK.FILLOUT_PM_PLAYER_LIST_WITH_NAMES

function natives.NETWORK.REFRESH_PLAYER_LIST_STATS(--[[int]] p0) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.REFRESH_PLAYER_LIST_STATS' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xE26CCFF8094D8C74, p0)
	return result:__tointeger() ~= 0
end
natives.network.refresh_player_list_stats = natives.NETWORK.REFRESH_PLAYER_LIST_STATS

function natives.NETWORK.NETWORK_SET_CURRENT_DATA_MANAGER_HANDLE(--[[Any*]] p0) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SET_CURRENT_DATA_MANAGER_HANDLE' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")

	local result = native_call(0x796A87B3B68D1F3D, p0)
	return result:__tointeger() ~= 0
end
natives.network.network_set_current_data_manager_handle = natives.NETWORK.NETWORK_SET_CURRENT_DATA_MANAGER_HANDLE

--[[
Hardcoded to return false.
]]
function natives.NETWORK.NETWORK_IS_IN_PLATFORM_PARTY() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IS_IN_PLATFORM_PARTY' due to disabled trusted mode")

	local result = native_call(0x2FC5650B0271CB57)
	return result:__tointeger() ~= 0
end
natives.network.network_is_in_platform_party = natives.NETWORK.NETWORK_IS_IN_PLATFORM_PARTY

function natives.NETWORK.NETWORK_GET_PLATFORM_PARTY_MEMBER_COUNT() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_PLATFORM_PARTY_MEMBER_COUNT' due to disabled trusted mode")

	local result = native_call(0x01ABCE5E7CBDA196)
	return result:__tointeger()
end
natives.network.network_get_platform_party_member_count = natives.NETWORK.NETWORK_GET_PLATFORM_PARTY_MEMBER_COUNT

function natives.NETWORK.NETWORK_GET_PLATFORM_PARTY_MEMBERS(--[[Any*]] data, --[[int]] dataSize) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_PLATFORM_PARTY_MEMBERS' due to disabled trusted mode")

	assert(type(data) == "userdata", "Arg #1 (data) must be a userdata.")
	assert(type(dataSize) == "number", "Arg #2 (dataSize) must be a number.")

	local result = native_call(0x120364DE2845DAF8, data, dataSize)
	return result:__tointeger()
end
natives.network.network_get_platform_party_members = natives.NETWORK.NETWORK_GET_PLATFORM_PARTY_MEMBERS

--[[
Hardcoded to return false.
]]
function natives.NETWORK.NETWORK_IS_IN_PLATFORM_PARTY_CHAT() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IS_IN_PLATFORM_PARTY_CHAT' due to disabled trusted mode")

	local result = native_call(0xFD8B834A8BA05048)
	return result:__tointeger() ~= 0
end
natives.network.network_is_in_platform_party_chat = natives.NETWORK.NETWORK_IS_IN_PLATFORM_PARTY_CHAT

--[[
This would be nice to see if someone is in party chat, but 2 sad notes.
1) It only becomes true if said person is speaking in that party at the time.
2) It will never, become true unless you are in that party with said person.
]]
function natives.NETWORK.NETWORK_IS_CHATTING_IN_PLATFORM_PARTY(--[[Any*]] gamerHandle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IS_CHATTING_IN_PLATFORM_PARTY' due to disabled trusted mode")

	assert(type(gamerHandle) == "userdata", "Arg #1 (gamerHandle) must be a userdata.")

	local result = native_call(0x8DE9945BCC9AEC52, gamerHandle)
	return result:__tointeger() ~= 0
end
natives.network.network_is_chatting_in_platform_party = natives.NETWORK.NETWORK_IS_CHATTING_IN_PLATFORM_PARTY

function natives.NETWORK.NETWORK_CAN_QUEUE_FOR_PREVIOUS_SESSION_JOIN() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_CAN_QUEUE_FOR_PREVIOUS_SESSION_JOIN' due to disabled trusted mode")

	local result = native_call(0x2BF66D2E7414F686)
	return result:__tointeger() ~= 0
end
natives.network.network_can_queue_for_previous_session_join = natives.NETWORK.NETWORK_CAN_QUEUE_FOR_PREVIOUS_SESSION_JOIN

function natives.NETWORK.NETWORK_IS_QUEUING_FOR_SESSION_JOIN() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IS_QUEUING_FOR_SESSION_JOIN' due to disabled trusted mode")

	local result = native_call(0x14922ED3E38761F0)
	return result:__tointeger() ~= 0
end
natives.network.network_is_queuing_for_session_join = natives.NETWORK.NETWORK_IS_QUEUING_FOR_SESSION_JOIN

function natives.NETWORK.NETWORK_CLEAR_QUEUED_JOIN_REQUEST() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_CLEAR_QUEUED_JOIN_REQUEST' due to disabled trusted mode")

	local result = native_call(0x6CE50E47F5543D0C)
end
natives.network.network_clear_queued_join_request = natives.NETWORK.NETWORK_CLEAR_QUEUED_JOIN_REQUEST

function natives.NETWORK.NETWORK_SEND_QUEUED_JOIN_REQUEST() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SEND_QUEUED_JOIN_REQUEST' due to disabled trusted mode")

	local result = native_call(0xFA2888E3833C8E96)
end
natives.network.network_send_queued_join_request = natives.NETWORK.NETWORK_SEND_QUEUED_JOIN_REQUEST

function natives.NETWORK.NETWORK_REMOVE_ALL_QUEUED_JOIN_REQUESTS() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_REMOVE_ALL_QUEUED_JOIN_REQUESTS' due to disabled trusted mode")

	local result = native_call(0x25D990F8E0E3F13C)
end
natives.network.network_remove_all_queued_join_requests = natives.NETWORK.NETWORK_REMOVE_ALL_QUEUED_JOIN_REQUESTS

function natives.NETWORK.NETWORK_SEED_RANDOM_NUMBER_GENERATOR(--[[int]] seed) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SEED_RANDOM_NUMBER_GENERATOR' due to disabled trusted mode")

	assert(type(seed) == "number", "Arg #1 (seed) must be a number.")

	local result = native_call(0xF1B84178F8674195, seed)
end
natives.network.network_seed_random_number_generator = natives.NETWORK.NETWORK_SEED_RANDOM_NUMBER_GENERATOR

function natives.NETWORK.NETWORK_GET_RANDOM_INT() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_RANDOM_INT' due to disabled trusted mode")

	local result = native_call(0x599E4FA1F87EB5FF)
	return result:__tointeger()
end
natives.network.network_get_random_int = natives.NETWORK.NETWORK_GET_RANDOM_INT

--[[
Same as GET_RANDOM_INT_IN_RANGE
]]
function natives.NETWORK.NETWORK_GET_RANDOM_INT_RANGED(--[[int]] rangeStart, --[[int]] rangeEnd) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_RANDOM_INT_RANGED' due to disabled trusted mode")

	assert(type(rangeStart) == "number", "Arg #1 (rangeStart) must be a number.")
	assert(type(rangeEnd) == "number", "Arg #2 (rangeEnd) must be a number.")

	local result = native_call(0xE30CF56F1EFA5F43, rangeStart, rangeEnd)
	return result:__tointeger()
end
natives.network.network_get_random_int_ranged = natives.NETWORK.NETWORK_GET_RANDOM_INT_RANGED

function natives.NETWORK.NETWORK_PLAYER_IS_CHEATER() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_PLAYER_IS_CHEATER' due to disabled trusted mode")

	local result = native_call(0x655B91F1495A9090)
	return result:__tointeger() ~= 0
end
natives.network.network_player_is_cheater = natives.NETWORK.NETWORK_PLAYER_IS_CHEATER

function natives.NETWORK.NETWORK_PLAYER_GET_CHEATER_REASON() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_PLAYER_GET_CHEATER_REASON' due to disabled trusted mode")

	local result = native_call(0x172F75B6EE2233BA)
	return result:__tointeger()
end
natives.network.network_player_get_cheater_reason = natives.NETWORK.NETWORK_PLAYER_GET_CHEATER_REASON

function natives.NETWORK.NETWORK_PLAYER_IS_BADSPORT() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_PLAYER_IS_BADSPORT' due to disabled trusted mode")

	local result = native_call(0x19D8DA0E5A68045A)
	return result:__tointeger() ~= 0
end
natives.network.network_player_is_badsport = natives.NETWORK.NETWORK_PLAYER_IS_BADSPORT

--[[
p1 = 6
]]
function natives.NETWORK.TRIGGER_PLAYER_CRC_HACKER_CHECK(--[[Player]] player, --[[int]] p1, --[[Hash]] scriptHash) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.TRIGGER_PLAYER_CRC_HACKER_CHECK' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(scriptHash) == "number", "Arg #3 (scriptHash) must be a number.")

	local result = native_call(0x46FB3ED415C7641C, player, p1, scriptHash)
	return result:__tointeger() ~= 0
end
natives.network.trigger_player_crc_hacker_check = natives.NETWORK.TRIGGER_PLAYER_CRC_HACKER_CHECK

function natives.NETWORK.TRIGGER_TUNING_CRC_HACKER_CHECK() -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.TRIGGER_TUNING_CRC_HACKER_CHECK' due to disabled trusted mode")

	local result = native_call(0xA12D3A5A3753CC23)
	return result:__tointeger()
end
natives.network.trigger_tuning_crc_hacker_check = natives.NETWORK.TRIGGER_TUNING_CRC_HACKER_CHECK

function natives.NETWORK.TRIGGER_FILE_CRC_HACKER_CHECK() -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.TRIGGER_FILE_CRC_HACKER_CHECK' due to disabled trusted mode")

	local result = native_call(0xF287F506767CC8A9)
	return result:__tointeger()
end
natives.network.trigger_file_crc_hacker_check = natives.NETWORK.TRIGGER_FILE_CRC_HACKER_CHECK

function natives.NETWORK.REMOTE_CHEATER_PLAYER_DETECTED(--[[Player]] player, --[[int]] a, --[[int]] b) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.REMOTE_CHEATER_PLAYER_DETECTED' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(a) == "number", "Arg #2 (a) must be a number.")
	assert(type(b) == "number", "Arg #3 (b) must be a number.")

	local result = native_call(0x472841A026D26D8B, player, a, b)
	return result:__tointeger() ~= 0
end
natives.network.remote_cheater_player_detected = natives.NETWORK.REMOTE_CHEATER_PLAYER_DETECTED

function natives.NETWORK.BAD_SPORT_PLAYER_LEFT_DETECTED(--[[Any*]] gamerHandle, --[[int]] event, --[[int]] amountReceived) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.BAD_SPORT_PLAYER_LEFT_DETECTED' due to disabled trusted mode")

	assert(type(gamerHandle) == "userdata", "Arg #1 (gamerHandle) must be a userdata.")
	assert(type(event) == "number", "Arg #2 (event) must be a number.")
	assert(type(amountReceived) == "number", "Arg #3 (amountReceived) must be a number.")

	local result = native_call(0xEC5E3AF5289DCA81, gamerHandle, event, amountReceived)
	return result:__tointeger() ~= 0
end
natives.network.bad_sport_player_left_detected = natives.NETWORK.BAD_SPORT_PLAYER_LEFT_DETECTED

function natives.NETWORK.NETWORK_ADD_INVALID_OBJECT_MODEL(--[[Hash]] modelHash) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_ADD_INVALID_OBJECT_MODEL' due to disabled trusted mode")

	assert(type(modelHash) == "number", "Arg #1 (modelHash) must be a number.")

	local result = native_call(0x7F562DBC212E81F9, modelHash)
end
natives.network.network_add_invalid_object_model = natives.NETWORK.NETWORK_ADD_INVALID_OBJECT_MODEL

function natives.NETWORK.NETWORK_REMOVE_INVALID_OBJECT_MODEL(--[[Hash]] modelHash) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_REMOVE_INVALID_OBJECT_MODEL' due to disabled trusted mode")

	assert(type(modelHash) == "number", "Arg #1 (modelHash) must be a number.")

	local result = native_call(0x791EDB5803B2F468, modelHash)
end
natives.network.network_remove_invalid_object_model = natives.NETWORK.NETWORK_REMOVE_INVALID_OBJECT_MODEL

function natives.NETWORK.NETWORK_CLEAR_INVALID_OBJECT_MODELS() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_CLEAR_INVALID_OBJECT_MODELS' due to disabled trusted mode")

	local result = native_call(0x03B2F03A53D85E41)
end
natives.network.network_clear_invalid_object_models = natives.NETWORK.NETWORK_CLEAR_INVALID_OBJECT_MODELS

function natives.NETWORK.NETWORK_APPLY_PED_SCAR_DATA(--[[Ped]] ped, --[[int]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_APPLY_PED_SCAR_DATA' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xE66C690248F11150, ped, p1)
end
natives.network.network_apply_ped_scar_data = natives.NETWORK.NETWORK_APPLY_PED_SCAR_DATA

function natives.NETWORK.NETWORK_SET_THIS_SCRIPT_IS_NETWORK_SCRIPT(--[[int]] maxNumMissionParticipants, --[[BOOL]] p1, --[[int]] instanceId) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SET_THIS_SCRIPT_IS_NETWORK_SCRIPT' due to disabled trusted mode")

	assert(type(maxNumMissionParticipants) == "number", "Arg #1 (maxNumMissionParticipants) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(instanceId) == "number", "Arg #3 (instanceId) must be a number.")

	local result = native_call(0x1CA59E306ECB80A5, maxNumMissionParticipants, p1, instanceId)
end
natives.network.network_set_this_script_is_network_script = natives.NETWORK.NETWORK_SET_THIS_SCRIPT_IS_NETWORK_SCRIPT

function natives.NETWORK.NETWORK_TRY_TO_SET_THIS_SCRIPT_IS_NETWORK_SCRIPT(--[[Any]] p0, --[[BOOL]] p1, --[[Any]] p2) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_TRY_TO_SET_THIS_SCRIPT_IS_NETWORK_SCRIPT' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0xD1110739EEADB592, p0, p1, p2)
	return result:__tointeger() ~= 0
end
natives.network.network_try_to_set_this_script_is_network_script = natives.NETWORK.NETWORK_TRY_TO_SET_THIS_SCRIPT_IS_NETWORK_SCRIPT

function natives.NETWORK.NETWORK_GET_THIS_SCRIPT_IS_NETWORK_SCRIPT() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_THIS_SCRIPT_IS_NETWORK_SCRIPT' due to disabled trusted mode")

	local result = native_call(0x2910669969E9535E)
	return result:__tointeger() ~= 0
end
natives.network.network_get_this_script_is_network_script = natives.NETWORK.NETWORK_GET_THIS_SCRIPT_IS_NETWORK_SCRIPT

--[[
Seems to always return 0, but it's used in quite a few loops.

for (num3 = 0; num3 < NETWORK::0xCCD8C02D(); num3++)
    {
        if (NETWORK::NETWORK_IS_PARTICIPANT_ACTIVE(PLAYER::0x98F3B274(num3)) != 0)
        {
            var num5 = NETWORK::NETWORK_GET_PLAYER_INDEX(PLAYER::0x98F3B274(num3));
]]
function natives.NETWORK.NETWORK_GET_MAX_NUM_PARTICIPANTS() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_MAX_NUM_PARTICIPANTS' due to disabled trusted mode")

	local result = native_call(0xA6C90FBC38E395EE)
	return result:__tointeger()
end
natives.network.network_get_max_num_participants = natives.NETWORK.NETWORK_GET_MAX_NUM_PARTICIPANTS

function natives.NETWORK.NETWORK_GET_NUM_PARTICIPANTS() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_NUM_PARTICIPANTS' due to disabled trusted mode")

	local result = native_call(0x18D0456E86604654)
	return result:__tointeger()
end
natives.network.network_get_num_participants = natives.NETWORK.NETWORK_GET_NUM_PARTICIPANTS

function natives.NETWORK.NETWORK_GET_SCRIPT_STATUS() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_SCRIPT_STATUS' due to disabled trusted mode")

	local result = native_call(0x57D158647A6BFABF)
	return result:__tointeger()
end
natives.network.network_get_script_status = natives.NETWORK.NETWORK_GET_SCRIPT_STATUS

function natives.NETWORK.NETWORK_REGISTER_HOST_BROADCAST_VARIABLES(--[[int*]] vars, --[[int]] numVars, --[[const char*]] debugName) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_REGISTER_HOST_BROADCAST_VARIABLES' due to disabled trusted mode")

	assert(type(vars) == "userdata", "Arg #1 (vars) must be a userdata.")
	assert(type(numVars) == "number", "Arg #2 (numVars) must be a number.")
	assert(type(debugName) == "string", "Arg #3 (debugName) must be a string.")

	local result = native_call(0x3E9B2F01C50DF595, vars, numVars, debugName)
end
natives.network.network_register_host_broadcast_variables = natives.NETWORK.NETWORK_REGISTER_HOST_BROADCAST_VARIABLES

function natives.NETWORK.NETWORK_REGISTER_PLAYER_BROADCAST_VARIABLES(--[[int*]] vars, --[[int]] numVars, --[[const char*]] debugName) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_REGISTER_PLAYER_BROADCAST_VARIABLES' due to disabled trusted mode")

	assert(type(vars) == "userdata", "Arg #1 (vars) must be a userdata.")
	assert(type(numVars) == "number", "Arg #2 (numVars) must be a number.")
	assert(type(debugName) == "string", "Arg #3 (debugName) must be a string.")

	local result = native_call(0x3364AA97340CA215, vars, numVars, debugName)
end
natives.network.network_register_player_broadcast_variables = natives.NETWORK.NETWORK_REGISTER_PLAYER_BROADCAST_VARIABLES

function natives.NETWORK.NETWORK_REGISTER_HIGH_FREQUENCY_HOST_BROADCAST_VARIABLES(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_REGISTER_HIGH_FREQUENCY_HOST_BROADCAST_VARIABLES' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0xEA8C0DDB10E2822A, p0, p1, p2)
end
natives.network.network_register_high_frequency_host_broadcast_variables = natives.NETWORK.NETWORK_REGISTER_HIGH_FREQUENCY_HOST_BROADCAST_VARIABLES

function natives.NETWORK.NETWORK_REGISTER_HIGH_FREQUENCY_PLAYER_BROADCAST_VARIABLES(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_REGISTER_HIGH_FREQUENCY_PLAYER_BROADCAST_VARIABLES' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0xD6D7478CA62B8D41, p0, p1, p2)
end
natives.network.network_register_high_frequency_player_broadcast_variables = natives.NETWORK.NETWORK_REGISTER_HIGH_FREQUENCY_PLAYER_BROADCAST_VARIABLES

function natives.NETWORK.NETWORK_FINISH_BROADCASTING_DATA() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_FINISH_BROADCASTING_DATA' due to disabled trusted mode")

	local result = native_call(0x64F62AFB081E260D)
end
natives.network.network_finish_broadcasting_data = natives.NETWORK.NETWORK_FINISH_BROADCASTING_DATA

function natives.NETWORK.NETWORK_HAS_RECEIVED_HOST_BROADCAST_DATA() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_HAS_RECEIVED_HOST_BROADCAST_DATA' due to disabled trusted mode")

	local result = native_call(0x5D10B3795F3FC886)
	return result:__tointeger() ~= 0
end
natives.network.network_has_received_host_broadcast_data = natives.NETWORK.NETWORK_HAS_RECEIVED_HOST_BROADCAST_DATA

function natives.NETWORK.NETWORK_GET_PLAYER_INDEX(--[[Player]] player) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_PLAYER_INDEX' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0x24FB80D107371267, player)
	return result:__tointeger()
end
natives.network.network_get_player_index = natives.NETWORK.NETWORK_GET_PLAYER_INDEX

function natives.NETWORK.NETWORK_GET_PARTICIPANT_INDEX(--[[int]] index) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_PARTICIPANT_INDEX' due to disabled trusted mode")

	assert(type(index) == "number", "Arg #1 (index) must be a number.")

	local result = native_call(0x1B84DF6AF2A46938, index)
	return result:__tointeger()
end
natives.network.network_get_participant_index = natives.NETWORK.NETWORK_GET_PARTICIPANT_INDEX

--[[
Returns the Player associated to a given Ped when in an online session.
]]
function natives.NETWORK.NETWORK_GET_PLAYER_INDEX_FROM_PED(--[[Ped]] ped) -- Returns Player
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_PLAYER_INDEX_FROM_PED' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x6C0E2E0125610278, ped)
	return result:__tointeger()
end
natives.network.network_get_player_index_from_ped = natives.NETWORK.NETWORK_GET_PLAYER_INDEX_FROM_PED

--[[
Returns the amount of players connected in the current session. Only works when connected to a session/server.
]]
function natives.NETWORK.NETWORK_GET_NUM_CONNECTED_PLAYERS() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_NUM_CONNECTED_PLAYERS' due to disabled trusted mode")

	local result = native_call(0xA4A79DD2D9600654)
	return result:__tointeger()
end
natives.network.network_get_num_connected_players = natives.NETWORK.NETWORK_GET_NUM_CONNECTED_PLAYERS

function natives.NETWORK.NETWORK_IS_PLAYER_CONNECTED(--[[Player]] player) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IS_PLAYER_CONNECTED' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0x93DC1BE4E1ABE9D1, player)
	return result:__tointeger() ~= 0
end
natives.network.network_is_player_connected = natives.NETWORK.NETWORK_IS_PLAYER_CONNECTED

function natives.NETWORK.NETWORK_GET_TOTAL_NUM_PLAYERS() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_TOTAL_NUM_PLAYERS' due to disabled trusted mode")

	local result = native_call(0xCF61D4B4702EE9EB)
	return result:__tointeger()
end
natives.network.network_get_total_num_players = natives.NETWORK.NETWORK_GET_TOTAL_NUM_PLAYERS

function natives.NETWORK.NETWORK_IS_PARTICIPANT_ACTIVE(--[[int]] p0) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IS_PARTICIPANT_ACTIVE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x6FF8FF40B6357D45, p0)
	return result:__tointeger() ~= 0
end
natives.network.network_is_participant_active = natives.NETWORK.NETWORK_IS_PARTICIPANT_ACTIVE

function natives.NETWORK.NETWORK_IS_PLAYER_ACTIVE(--[[Player]] player) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IS_PLAYER_ACTIVE' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0xB8DFD30D6973E135, player)
	return result:__tointeger() ~= 0
end
natives.network.network_is_player_active = natives.NETWORK.NETWORK_IS_PLAYER_ACTIVE

function natives.NETWORK.NETWORK_IS_PLAYER_A_PARTICIPANT(--[[Player]] player) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IS_PLAYER_A_PARTICIPANT' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0x3CA58F6CB7CBD784, player)
	return result:__tointeger() ~= 0
end
natives.network.network_is_player_a_participant = natives.NETWORK.NETWORK_IS_PLAYER_A_PARTICIPANT

function natives.NETWORK.NETWORK_IS_HOST_OF_THIS_SCRIPT() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IS_HOST_OF_THIS_SCRIPT' due to disabled trusted mode")

	local result = native_call(0x83CD99A1E6061AB5)
	return result:__tointeger() ~= 0
end
natives.network.network_is_host_of_this_script = natives.NETWORK.NETWORK_IS_HOST_OF_THIS_SCRIPT

function natives.NETWORK.NETWORK_GET_HOST_OF_THIS_SCRIPT() -- Returns Player
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_HOST_OF_THIS_SCRIPT' due to disabled trusted mode")

	local result = native_call(0xC7B4D79B01FA7A5C)
	return result:__tointeger()
end
natives.network.network_get_host_of_this_script = natives.NETWORK.NETWORK_GET_HOST_OF_THIS_SCRIPT

--[[
scriptName examples:
"freemode", "AM_CR_SecurityVan", ...

Most of the time, these values are used:
instance_id = -1
position_hash = 0
]]
function natives.NETWORK.NETWORK_GET_HOST_OF_SCRIPT(--[[const char*]] scriptName, --[[int]] instance_id, --[[int]] position_hash) -- Returns Player
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_HOST_OF_SCRIPT' due to disabled trusted mode")

	assert(type(scriptName) == "string", "Arg #1 (scriptName) must be a string.")
	assert(type(instance_id) == "number", "Arg #2 (instance_id) must be a number.")
	assert(type(position_hash) == "number", "Arg #3 (position_hash) must be a number.")

	local result = native_call(0x1D6A14F1F9A736FC, scriptName, instance_id, position_hash)
	return result:__tointeger()
end
natives.network.network_get_host_of_script = natives.NETWORK.NETWORK_GET_HOST_OF_SCRIPT

function natives.NETWORK.NETWORK_SET_MISSION_FINISHED() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SET_MISSION_FINISHED' due to disabled trusted mode")

	local result = native_call(0x3B3D11CD9FFCDFC9)
end
natives.network.network_set_mission_finished = natives.NETWORK.NETWORK_SET_MISSION_FINISHED

function natives.NETWORK.NETWORK_IS_SCRIPT_ACTIVE(--[[const char*]] scriptName, --[[int]] instance_id, --[[BOOL]] p2, --[[int]] position_hash) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IS_SCRIPT_ACTIVE' due to disabled trusted mode")

	assert(type(scriptName) == "string", "Arg #1 (scriptName) must be a string.")
	assert(type(instance_id) == "number", "Arg #2 (instance_id) must be a number.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")
	assert(type(position_hash) == "number", "Arg #4 (position_hash) must be a number.")

	local result = native_call(0x9D40DF90FAD26098, scriptName, instance_id, p2, position_hash)
	return result:__tointeger() ~= 0
end
natives.network.network_is_script_active = natives.NETWORK.NETWORK_IS_SCRIPT_ACTIVE

function natives.NETWORK.NETWORK_IS_SCRIPT_ACTIVE_BY_HASH(--[[Hash]] scriptHash, --[[int]] p1, --[[BOOL]] p2, --[[int]] p3) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IS_SCRIPT_ACTIVE_BY_HASH' due to disabled trusted mode")

	assert(type(scriptHash) == "number", "Arg #1 (scriptHash) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0xDA7DE67F5FE5EE13, scriptHash, p1, p2, p3)
	return result:__tointeger() ~= 0
end
natives.network.network_is_script_active_by_hash = natives.NETWORK.NETWORK_IS_SCRIPT_ACTIVE_BY_HASH

function natives.NETWORK.NETWORK_IS_THREAD_A_NETWORK_SCRIPT(--[[int]] threadId) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IS_THREAD_A_NETWORK_SCRIPT' due to disabled trusted mode")

	assert(type(threadId) == "number", "Arg #1 (threadId) must be a number.")

	local result = native_call(0x560B423D73015E77, threadId)
	return result:__tointeger() ~= 0
end
natives.network.network_is_thread_a_network_script = natives.NETWORK.NETWORK_IS_THREAD_A_NETWORK_SCRIPT

function natives.NETWORK.NETWORK_GET_NUM_SCRIPT_PARTICIPANTS(--[[const char*]] scriptName, --[[int]] instance_id, --[[int]] position_hash) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_NUM_SCRIPT_PARTICIPANTS' due to disabled trusted mode")

	assert(type(scriptName) == "string", "Arg #1 (scriptName) must be a string.")
	assert(type(instance_id) == "number", "Arg #2 (instance_id) must be a number.")
	assert(type(position_hash) == "number", "Arg #3 (position_hash) must be a number.")

	local result = native_call(0x3658E8CD94FC121A, scriptName, instance_id, position_hash)
	return result:__tointeger()
end
natives.network.network_get_num_script_participants = natives.NETWORK.NETWORK_GET_NUM_SCRIPT_PARTICIPANTS

function natives.NETWORK.NETWORK_GET_INSTANCE_ID_OF_THIS_SCRIPT() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_INSTANCE_ID_OF_THIS_SCRIPT' due to disabled trusted mode")

	local result = native_call(0x638A3A81733086DB)
	return result:__tointeger()
end
natives.network.network_get_instance_id_of_this_script = natives.NETWORK.NETWORK_GET_INSTANCE_ID_OF_THIS_SCRIPT

function natives.NETWORK.NETWORK_GET_POSITION_HASH_OF_THIS_SCRIPT() -- Returns Hash
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_POSITION_HASH_OF_THIS_SCRIPT' due to disabled trusted mode")

	local result = native_call(0x257ED0FADF750BCF)
	return result:__tointeger()
end
natives.network.network_get_position_hash_of_this_script = natives.NETWORK.NETWORK_GET_POSITION_HASH_OF_THIS_SCRIPT

function natives.NETWORK.NETWORK_IS_PLAYER_A_PARTICIPANT_ON_SCRIPT(--[[Player]] player, --[[const char*]] script, --[[int]] instance_id) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IS_PLAYER_A_PARTICIPANT_ON_SCRIPT' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(script) == "string", "Arg #2 (script) must be a string.")
	assert(type(instance_id) == "number", "Arg #3 (instance_id) must be a number.")

	local result = native_call(0x1AD5B71586B94820, player, script, instance_id)
	return result:__tointeger() ~= 0
end
natives.network.network_is_player_a_participant_on_script = natives.NETWORK.NETWORK_IS_PLAYER_A_PARTICIPANT_ON_SCRIPT

function natives.NETWORK.NETWORK_PREVENT_SCRIPT_HOST_MIGRATION() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_PREVENT_SCRIPT_HOST_MIGRATION' due to disabled trusted mode")

	local result = native_call(0x2302C0264EA58D31)
end
natives.network.network_prevent_script_host_migration = natives.NETWORK.NETWORK_PREVENT_SCRIPT_HOST_MIGRATION

function natives.NETWORK.NETWORK_REQUEST_TO_BE_HOST_OF_THIS_SCRIPT() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_REQUEST_TO_BE_HOST_OF_THIS_SCRIPT' due to disabled trusted mode")

	local result = native_call(0x741A3D8380319A81)
end
natives.network.network_request_to_be_host_of_this_script = natives.NETWORK.NETWORK_REQUEST_TO_BE_HOST_OF_THIS_SCRIPT

--[[
Return the local Participant ID
]]
function natives.NETWORK.PARTICIPANT_ID() -- Returns Player
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.PARTICIPANT_ID' due to disabled trusted mode")

	local result = native_call(0x90986E8876CE0A83)
	return result:__tointeger()
end
natives.network.participant_id = natives.NETWORK.PARTICIPANT_ID

--[[
Return the local Participant ID.

This native is exactly the same as 'PARTICIPANT_ID' native.
]]
function natives.NETWORK.PARTICIPANT_ID_TO_INT() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.PARTICIPANT_ID_TO_INT' due to disabled trusted mode")

	local result = native_call(0x57A3BDDAD8E5AA0A)
	return result:__tointeger()
end
natives.network.participant_id_to_int = natives.NETWORK.PARTICIPANT_ID_TO_INT

function natives.NETWORK.NETWORK_GET_KILLER_OF_PLAYER(--[[Player]] player, --[[Hash*]] weaponHash) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_KILLER_OF_PLAYER' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(weaponHash) == "userdata", "Arg #2 (weaponHash) must be a userdata.")

	local result = native_call(0x2DA41ED6E1FCD7A5, player, weaponHash)
	return result:__tointeger()
end
natives.network.network_get_killer_of_player = natives.NETWORK.NETWORK_GET_KILLER_OF_PLAYER

function natives.NETWORK.NETWORK_GET_DESTROYER_OF_NETWORK_ID(--[[int]] netId, --[[Hash*]] weaponHash) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_DESTROYER_OF_NETWORK_ID' due to disabled trusted mode")

	assert(type(netId) == "number", "Arg #1 (netId) must be a number.")
	assert(type(weaponHash) == "userdata", "Arg #2 (weaponHash) must be a userdata.")

	local result = native_call(0x7A1ADEEF01740A24, netId, weaponHash)
	return result:__tointeger()
end
natives.network.network_get_destroyer_of_network_id = natives.NETWORK.NETWORK_GET_DESTROYER_OF_NETWORK_ID

function natives.NETWORK.NETWORK_GET_DESTROYER_OF_ENTITY(--[[Entity]] entity, --[[Hash*]] weaponHash) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_DESTROYER_OF_ENTITY' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(weaponHash) == "userdata", "Arg #2 (weaponHash) must be a userdata.")

	local result = native_call(0xC434133D9BA52777, entity, weaponHash)
	return result:__tointeger()
end
natives.network.network_get_destroyer_of_entity = natives.NETWORK.NETWORK_GET_DESTROYER_OF_ENTITY

--[[
NETWORK_GET_ASSISTED_DAMAGE_OF_ENTITY that ensures the entity is dead (IS_ENTITY_DEAD)
]]
function natives.NETWORK.NETWORK_GET_ASSISTED_KILL_OF_ENTITY(--[[Player]] player, --[[Entity]] entity, --[[int*]] p2) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_ASSISTED_KILL_OF_ENTITY' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(entity) == "number", "Arg #2 (entity) must be a number.")
	assert(type(p2) == "userdata", "Arg #3 (p2) must be a userdata.")

	local result = native_call(0x83660B734994124D, player, entity, p2)
	return result:__tointeger() ~= 0
end
natives.network.network_get_assisted_kill_of_entity = natives.NETWORK.NETWORK_GET_ASSISTED_KILL_OF_ENTITY

function natives.NETWORK.NETWORK_GET_ASSISTED_DAMAGE_OF_ENTITY(--[[Player]] player, --[[Entity]] entity, --[[int*]] p2) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_ASSISTED_DAMAGE_OF_ENTITY' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(entity) == "number", "Arg #2 (entity) must be a number.")
	assert(type(p2) == "userdata", "Arg #3 (p2) must be a userdata.")

	local result = native_call(0x4CACA84440FA26F6, player, entity, p2)
	return result:__tointeger() ~= 0
end
natives.network.network_get_assisted_damage_of_entity = natives.NETWORK.NETWORK_GET_ASSISTED_DAMAGE_OF_ENTITY

function natives.NETWORK.NETWORK_GET_ENTITY_KILLER_OF_PLAYER(--[[Player]] player, --[[Hash*]] weaponHash) -- Returns Entity
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_ENTITY_KILLER_OF_PLAYER' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(weaponHash) == "userdata", "Arg #2 (weaponHash) must be a userdata.")

	local result = native_call(0x42B2DAA6B596F5F8, player, weaponHash)
	return result:__tointeger()
end
natives.network.network_get_entity_killer_of_player = natives.NETWORK.NETWORK_GET_ENTITY_KILLER_OF_PLAYER

function natives.NETWORK.NETWORK_SET_CURRENT_PUBLIC_CONTENT_ID(--[[const char*]] missionId) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SET_CURRENT_PUBLIC_CONTENT_ID' due to disabled trusted mode")

	assert(type(missionId) == "string", "Arg #1 (missionId) must be a string.")

	local result = native_call(0x2C863ACDCD12B3DB, missionId)
end
natives.network.network_set_current_public_content_id = natives.NETWORK.NETWORK_SET_CURRENT_PUBLIC_CONTENT_ID

--[[
mpSettingSpawn:

enum eMpSettingSpawn
{
	MP_SETTING_SPAWN_NULL,
	MP_SETTING_SPAWN_PROPERTY,
	MP_SETTING_SPAWN_LAST_POSITION,
	MP_SETTING_SPAWN_GARAGE,
	MP_SETTING_SPAWN_RANDOM,
	MP_SETTING_SPAWN_PRIVATE_YACHT,
	MP_SETTING_SPAWN_OFFICE,
	MP_SETTING_SPAWN_CLUBHOUSE,
	MP_SETTING_SPAWN_IE_WAREHOUSE,
	MP_SETTING_SPAWN_BUNKER,
	MP_SETTING_SPAWN_HANGAR,
	MP_SETTING_SPAWN_DEFUNCT_BASE,
	MP_SETTING_SPAWN_NIGHTCLUB,
	MP_SETTING_SPAWN_ARENA_GARAGE,
	MP_SETTING_SPAWN_CASINO_APARTMENT,
	MP_SETTING_SPAWN_ARCADE,
	MP_SETTING_SPAWN_SUBMARINE,
	MP_SETTING_SPAWN_CAR_MEET,
	MP_SETTING_SPAWN_AUTO_SHOP,
	MP_SETTING_SPAWN_FIXER_HQ,
	MP_SETTING_SPAWN_MAX,
};
]]
function natives.NETWORK.NETWORK_SET_CURRENT_SPAWN_LOCATION_OPTION(--[[Hash]] mpSettingSpawn) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SET_CURRENT_SPAWN_LOCATION_OPTION' due to disabled trusted mode")

	assert(type(mpSettingSpawn) == "number", "Arg #1 (mpSettingSpawn) must be a number.")

	local result = native_call(0xAA6D5451DC3448B6, mpSettingSpawn)
end
natives.network.network_set_current_spawn_location_option = natives.NETWORK.NETWORK_SET_CURRENT_SPAWN_LOCATION_OPTION

--[[
Used by MetricVEHICLE_DIST_DRIVEN
]]
function natives.NETWORK.NETWORK_SET_VEHICLE_DRIVEN_IN_TEST_DRIVE(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SET_VEHICLE_DRIVEN_IN_TEST_DRIVE' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x8C70252FC40F320B, toggle)
end
natives.network.network_set_vehicle_driven_in_test_drive = natives.NETWORK.NETWORK_SET_VEHICLE_DRIVEN_IN_TEST_DRIVE

function natives.NETWORK.NETWORK_RESURRECT_LOCAL_PLAYER(--[[float]] x, --[[float]] y, --[[float]] z, --[[float]] heading, --[[BOOL]] unk, --[[BOOL]] changetime, --[[BOOL]] p6, --[[int]] p7, --[[int]] p8) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_RESURRECT_LOCAL_PLAYER' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(heading) == "number", "Arg #4 (heading) must be a number.")
	assert(type(unk) == "boolean", "Arg #5 (unk) must be a boolean.")
	assert(type(changetime) == "boolean", "Arg #6 (changetime) must be a boolean.")
	assert(type(p6) == "boolean", "Arg #7 (p6) must be a boolean.")
	assert(type(p7) == "number", "Arg #8 (p7) must be a number.")
	assert(type(p8) == "number", "Arg #9 (p8) must be a number.")

	local result = native_call(0xEA23C49EAA83ACFB, x, y, z, heading, unk, changetime, p6, p7, p8)
end
natives.network.network_resurrect_local_player = natives.NETWORK.NETWORK_RESURRECT_LOCAL_PLAYER

function natives.NETWORK.NETWORK_SET_LOCAL_PLAYER_INVINCIBLE_TIME(--[[int]] time) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SET_LOCAL_PLAYER_INVINCIBLE_TIME' due to disabled trusted mode")

	assert(type(time) == "number", "Arg #1 (time) must be a number.")

	local result = native_call(0x2D95C7E2D7E07307, time)
end
natives.network.network_set_local_player_invincible_time = natives.NETWORK.NETWORK_SET_LOCAL_PLAYER_INVINCIBLE_TIME

function natives.NETWORK.NETWORK_IS_LOCAL_PLAYER_INVINCIBLE() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IS_LOCAL_PLAYER_INVINCIBLE' due to disabled trusted mode")

	local result = native_call(0x8A8694B48715B000)
	return result:__tointeger() ~= 0
end
natives.network.network_is_local_player_invincible = natives.NETWORK.NETWORK_IS_LOCAL_PLAYER_INVINCIBLE

function natives.NETWORK.NETWORK_DISABLE_INVINCIBLE_FLASHING(--[[Player]] player, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_DISABLE_INVINCIBLE_FLASHING' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x9DD368BF06983221, player, toggle)
end
natives.network.network_disable_invincible_flashing = natives.NETWORK.NETWORK_DISABLE_INVINCIBLE_FLASHING

function natives.NETWORK.NETWORK_PATCH_POST_CUTSCENE_HS4F_TUN_ENT(--[[Ped]] ped) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_PATCH_POST_CUTSCENE_HS4F_TUN_ENT' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0xF0BC9BCD24A511D5, ped)
end
natives.network.network_patch_post_cutscene_hs4f_tun_ent = natives.NETWORK.NETWORK_PATCH_POST_CUTSCENE_HS4F_TUN_ENT

function natives.NETWORK.NETWORK_SET_LOCAL_PLAYER_SYNC_LOOK_AT(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SET_LOCAL_PLAYER_SYNC_LOOK_AT' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x524FF0AEFF9C3973, toggle)
end
natives.network.network_set_local_player_sync_look_at = natives.NETWORK.NETWORK_SET_LOCAL_PLAYER_SYNC_LOOK_AT

function natives.NETWORK.NETWORK_HAS_ENTITY_BEEN_REGISTERED_WITH_THIS_THREAD(--[[Entity]] entity) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_HAS_ENTITY_BEEN_REGISTERED_WITH_THIS_THREAD' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0xB07D3185E11657A5, entity)
	return result:__tointeger() ~= 0
end
natives.network.network_has_entity_been_registered_with_this_thread = natives.NETWORK.NETWORK_HAS_ENTITY_BEEN_REGISTERED_WITH_THIS_THREAD

function natives.NETWORK.NETWORK_GET_NETWORK_ID_FROM_ENTITY(--[[Entity]] entity) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_NETWORK_ID_FROM_ENTITY' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0xA11700682F3AD45C, entity)
	return result:__tointeger()
end
natives.network.network_get_network_id_from_entity = natives.NETWORK.NETWORK_GET_NETWORK_ID_FROM_ENTITY

function natives.NETWORK.NETWORK_GET_ENTITY_FROM_NETWORK_ID(--[[int]] netId) -- Returns Entity
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_ENTITY_FROM_NETWORK_ID' due to disabled trusted mode")

	assert(type(netId) == "number", "Arg #1 (netId) must be a number.")

	local result = native_call(0xCE4E5D9B0A4FF560, netId)
	return result:__tointeger()
end
natives.network.network_get_entity_from_network_id = natives.NETWORK.NETWORK_GET_ENTITY_FROM_NETWORK_ID

function natives.NETWORK.NETWORK_GET_ENTITY_IS_NETWORKED(--[[Entity]] entity) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_ENTITY_IS_NETWORKED' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0xC7827959479DCC78, entity)
	return result:__tointeger() ~= 0
end
natives.network.network_get_entity_is_networked = natives.NETWORK.NETWORK_GET_ENTITY_IS_NETWORKED

function natives.NETWORK.NETWORK_GET_ENTITY_IS_LOCAL(--[[Entity]] entity) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_ENTITY_IS_LOCAL' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0x0991549DE4D64762, entity)
	return result:__tointeger() ~= 0
end
natives.network.network_get_entity_is_local = natives.NETWORK.NETWORK_GET_ENTITY_IS_LOCAL

function natives.NETWORK.NETWORK_REGISTER_ENTITY_AS_NETWORKED(--[[Entity]] entity) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_REGISTER_ENTITY_AS_NETWORKED' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0x06FAACD625D80CAA, entity)
end
natives.network.network_register_entity_as_networked = natives.NETWORK.NETWORK_REGISTER_ENTITY_AS_NETWORKED

function natives.NETWORK.NETWORK_UNREGISTER_NETWORKED_ENTITY(--[[Entity]] entity) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_UNREGISTER_NETWORKED_ENTITY' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0x7368E683BB9038D6, entity)
end
natives.network.network_unregister_networked_entity = natives.NETWORK.NETWORK_UNREGISTER_NETWORKED_ENTITY

function natives.NETWORK.NETWORK_DOES_NETWORK_ID_EXIST(--[[int]] netId) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_DOES_NETWORK_ID_EXIST' due to disabled trusted mode")

	assert(type(netId) == "number", "Arg #1 (netId) must be a number.")

	local result = native_call(0x38CE16C96BD11344, netId)
	return result:__tointeger() ~= 0
end
natives.network.network_does_network_id_exist = natives.NETWORK.NETWORK_DOES_NETWORK_ID_EXIST

function natives.NETWORK.NETWORK_DOES_ENTITY_EXIST_WITH_NETWORK_ID(--[[int]] netId) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_DOES_ENTITY_EXIST_WITH_NETWORK_ID' due to disabled trusted mode")

	assert(type(netId) == "number", "Arg #1 (netId) must be a number.")

	local result = native_call(0x18A47D074708FD68, netId)
	return result:__tointeger() ~= 0
end
natives.network.network_does_entity_exist_with_network_id = natives.NETWORK.NETWORK_DOES_ENTITY_EXIST_WITH_NETWORK_ID

function natives.NETWORK.NETWORK_REQUEST_CONTROL_OF_NETWORK_ID(--[[int]] netId) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_REQUEST_CONTROL_OF_NETWORK_ID' due to disabled trusted mode")

	assert(type(netId) == "number", "Arg #1 (netId) must be a number.")

	local result = native_call(0xA670B3662FAFFBD0, netId)
	return result:__tointeger() ~= 0
end
natives.network.network_request_control_of_network_id = natives.NETWORK.NETWORK_REQUEST_CONTROL_OF_NETWORK_ID

function natives.NETWORK.NETWORK_HAS_CONTROL_OF_NETWORK_ID(--[[int]] netId) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_HAS_CONTROL_OF_NETWORK_ID' due to disabled trusted mode")

	assert(type(netId) == "number", "Arg #1 (netId) must be a number.")

	local result = native_call(0x4D36070FE0215186, netId)
	return result:__tointeger() ~= 0
end
natives.network.network_has_control_of_network_id = natives.NETWORK.NETWORK_HAS_CONTROL_OF_NETWORK_ID

--[[
Returns true if the specified network id is controlled by someone else.
]]
function natives.NETWORK.NETWORK_IS_NETWORK_ID_REMOTELY_CONTROLLED(--[[int]] netId) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IS_NETWORK_ID_REMOTELY_CONTROLLED' due to disabled trusted mode")

	assert(type(netId) == "number", "Arg #1 (netId) must be a number.")

	local result = native_call(0x7242F8B741CE1086, netId)
	return result:__tointeger() ~= 0
end
natives.network.network_is_network_id_remotely_controlled = natives.NETWORK.NETWORK_IS_NETWORK_ID_REMOTELY_CONTROLLED

function natives.NETWORK.NETWORK_REQUEST_CONTROL_OF_ENTITY(--[[Entity]] entity) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_REQUEST_CONTROL_OF_ENTITY' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0xB69317BF5E782347, entity)
	return result:__tointeger() ~= 0
end
natives.network.network_request_control_of_entity = natives.NETWORK.NETWORK_REQUEST_CONTROL_OF_ENTITY

function natives.NETWORK.NETWORK_REQUEST_CONTROL_OF_DOOR(--[[int]] doorID) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_REQUEST_CONTROL_OF_DOOR' due to disabled trusted mode")

	assert(type(doorID) == "number", "Arg #1 (doorID) must be a number.")

	local result = native_call(0x870DDFD5A4A796E4, doorID)
	return result:__tointeger() ~= 0
end
natives.network.network_request_control_of_door = natives.NETWORK.NETWORK_REQUEST_CONTROL_OF_DOOR

function natives.NETWORK.NETWORK_HAS_CONTROL_OF_ENTITY(--[[Entity]] entity) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_HAS_CONTROL_OF_ENTITY' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0x01BF60A500E28887, entity)
	return result:__tointeger() ~= 0
end
natives.network.network_has_control_of_entity = natives.NETWORK.NETWORK_HAS_CONTROL_OF_ENTITY

function natives.NETWORK.NETWORK_HAS_CONTROL_OF_PICKUP(--[[Pickup]] pickup) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_HAS_CONTROL_OF_PICKUP' due to disabled trusted mode")

	assert(type(pickup) == "number", "Arg #1 (pickup) must be a number.")

	local result = native_call(0x5BC9495F0B3B6FA6, pickup)
	return result:__tointeger() ~= 0
end
natives.network.network_has_control_of_pickup = natives.NETWORK.NETWORK_HAS_CONTROL_OF_PICKUP

function natives.NETWORK.NETWORK_HAS_CONTROL_OF_DOOR(--[[Hash]] doorHash) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_HAS_CONTROL_OF_DOOR' due to disabled trusted mode")

	assert(type(doorHash) == "number", "Arg #1 (doorHash) must be a number.")

	local result = native_call(0xCB3C68ADB06195DF, doorHash)
	return result:__tointeger() ~= 0
end
natives.network.network_has_control_of_door = natives.NETWORK.NETWORK_HAS_CONTROL_OF_DOOR

function natives.NETWORK.NETWORK_IS_DOOR_NETWORKED(--[[Hash]] doorHash) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IS_DOOR_NETWORKED' due to disabled trusted mode")

	assert(type(doorHash) == "number", "Arg #1 (doorHash) must be a number.")

	local result = native_call(0xC01E93FAC20C3346, doorHash)
	return result:__tointeger() ~= 0
end
natives.network.network_is_door_networked = natives.NETWORK.NETWORK_IS_DOOR_NETWORKED

--[[
calls from vehicle to net.

]]
function natives.NETWORK.VEH_TO_NET(--[[Vehicle]] vehicle) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.VEH_TO_NET' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0xB4C94523F023419C, vehicle)
	return result:__tointeger()
end
natives.network.veh_to_net = natives.NETWORK.VEH_TO_NET

--[[
gets the network id of a ped
]]
function natives.NETWORK.PED_TO_NET(--[[Ped]] ped) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.PED_TO_NET' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x0EDEC3C276198689, ped)
	return result:__tointeger()
end
natives.network.ped_to_net = natives.NETWORK.PED_TO_NET

--[[
Lets objects spawn online simply do it like this:

int createdObject = OBJ_TO_NET(CREATE_OBJECT_NO_OFFSET(oball, pCoords.x, pCoords.y, pCoords.z, 1, 0, 0));
]]
function natives.NETWORK.OBJ_TO_NET(--[[Object]] object) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.OBJ_TO_NET' due to disabled trusted mode")

	assert(type(object) == "number", "Arg #1 (object) must be a number.")

	local result = native_call(0x99BFDC94A603E541, object)
	return result:__tointeger()
end
natives.network.obj_to_net = natives.NETWORK.OBJ_TO_NET

function natives.NETWORK.NET_TO_VEH(--[[int]] netHandle) -- Returns Vehicle
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NET_TO_VEH' due to disabled trusted mode")

	assert(type(netHandle) == "number", "Arg #1 (netHandle) must be a number.")

	local result = native_call(0x367B936610BA360C, netHandle)
	return result:__tointeger()
end
natives.network.net_to_veh = natives.NETWORK.NET_TO_VEH

--[[
gets the ped id of a network id
]]
function natives.NETWORK.NET_TO_PED(--[[int]] netHandle) -- Returns Ped
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NET_TO_PED' due to disabled trusted mode")

	assert(type(netHandle) == "number", "Arg #1 (netHandle) must be a number.")

	local result = native_call(0xBDCD95FC216A8B3E, netHandle)
	return result:__tointeger()
end
natives.network.net_to_ped = natives.NETWORK.NET_TO_PED

--[[
gets the object id of a network id
]]
function natives.NETWORK.NET_TO_OBJ(--[[int]] netHandle) -- Returns Object
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NET_TO_OBJ' due to disabled trusted mode")

	assert(type(netHandle) == "number", "Arg #1 (netHandle) must be a number.")

	local result = native_call(0xD8515F5FEA14CB3F, netHandle)
	return result:__tointeger()
end
natives.network.net_to_obj = natives.NETWORK.NET_TO_OBJ

--[[
gets the entity id of a network id
]]
function natives.NETWORK.NET_TO_ENT(--[[int]] netHandle) -- Returns Entity
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NET_TO_ENT' due to disabled trusted mode")

	assert(type(netHandle) == "number", "Arg #1 (netHandle) must be a number.")

	local result = native_call(0xBFFEAB45A9A9094A, netHandle)
	return result:__tointeger()
end
natives.network.net_to_ent = natives.NETWORK.NET_TO_ENT

function natives.NETWORK.NETWORK_GET_LOCAL_HANDLE(--[[Any*]] gamerHandle, --[[int]] gamerHandleSize) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_LOCAL_HANDLE' due to disabled trusted mode")

	assert(type(gamerHandle) == "userdata", "Arg #1 (gamerHandle) must be a userdata.")
	assert(type(gamerHandleSize) == "number", "Arg #2 (gamerHandleSize) must be a number.")

	local result = native_call(0xE86051786B66CD8E, gamerHandle, gamerHandleSize)
end
natives.network.network_get_local_handle = natives.NETWORK.NETWORK_GET_LOCAL_HANDLE

function natives.NETWORK.NETWORK_HANDLE_FROM_USER_ID(--[[const char*]] userId, --[[Any*]] gamerHandle, --[[int]] gamerHandleSize) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_HANDLE_FROM_USER_ID' due to disabled trusted mode")

	assert(type(userId) == "string", "Arg #1 (userId) must be a string.")
	assert(type(gamerHandle) == "userdata", "Arg #2 (gamerHandle) must be a userdata.")
	assert(type(gamerHandleSize) == "number", "Arg #3 (gamerHandleSize) must be a number.")

	local result = native_call(0xDCD51DD8F87AEC5C, userId, gamerHandle, gamerHandleSize)
end
natives.network.network_handle_from_user_id = natives.NETWORK.NETWORK_HANDLE_FROM_USER_ID

function natives.NETWORK.NETWORK_HANDLE_FROM_MEMBER_ID(--[[const char*]] memberId, --[[Any*]] gamerHandle, --[[int]] gamerHandleSize) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_HANDLE_FROM_MEMBER_ID' due to disabled trusted mode")

	assert(type(memberId) == "string", "Arg #1 (memberId) must be a string.")
	assert(type(gamerHandle) == "userdata", "Arg #2 (gamerHandle) must be a userdata.")
	assert(type(gamerHandleSize) == "number", "Arg #3 (gamerHandleSize) must be a number.")

	local result = native_call(0xA0FD21BED61E5C4C, memberId, gamerHandle, gamerHandleSize)
end
natives.network.network_handle_from_member_id = natives.NETWORK.NETWORK_HANDLE_FROM_MEMBER_ID

function natives.NETWORK.NETWORK_HANDLE_FROM_PLAYER(--[[Player]] player, --[[Any*]] gamerHandle, --[[int]] gamerHandleSize) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_HANDLE_FROM_PLAYER' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(gamerHandle) == "userdata", "Arg #2 (gamerHandle) must be a userdata.")
	assert(type(gamerHandleSize) == "number", "Arg #3 (gamerHandleSize) must be a number.")

	local result = native_call(0x388EB2B86C73B6B3, player, gamerHandle, gamerHandleSize)
end
natives.network.network_handle_from_player = natives.NETWORK.NETWORK_HANDLE_FROM_PLAYER

function natives.NETWORK.NETWORK_HASH_FROM_PLAYER_HANDLE(--[[Player]] player) -- Returns Hash
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_HASH_FROM_PLAYER_HANDLE' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0xBC1D768F2F5D6C05, player)
	return result:__tointeger()
end
natives.network.network_hash_from_player_handle = natives.NETWORK.NETWORK_HASH_FROM_PLAYER_HANDLE

function natives.NETWORK.NETWORK_HASH_FROM_GAMER_HANDLE(--[[Any*]] gamerHandle) -- Returns Hash
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_HASH_FROM_GAMER_HANDLE' due to disabled trusted mode")

	assert(type(gamerHandle) == "userdata", "Arg #1 (gamerHandle) must be a userdata.")

	local result = native_call(0x58575AC3CF2CA8EC, gamerHandle)
	return result:__tointeger()
end
natives.network.network_hash_from_gamer_handle = natives.NETWORK.NETWORK_HASH_FROM_GAMER_HANDLE

function natives.NETWORK.NETWORK_HANDLE_FROM_FRIEND(--[[int]] friendIndex, --[[Any*]] gamerHandle, --[[int]] gamerHandleSize) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_HANDLE_FROM_FRIEND' due to disabled trusted mode")

	assert(type(friendIndex) == "number", "Arg #1 (friendIndex) must be a number.")
	assert(type(gamerHandle) == "userdata", "Arg #2 (gamerHandle) must be a userdata.")
	assert(type(gamerHandleSize) == "number", "Arg #3 (gamerHandleSize) must be a number.")

	local result = native_call(0xD45CB817D7E177D2, friendIndex, gamerHandle, gamerHandleSize)
end
natives.network.network_handle_from_friend = natives.NETWORK.NETWORK_HANDLE_FROM_FRIEND

function natives.NETWORK.NETWORK_GAMERTAG_FROM_HANDLE_START(--[[Any*]] gamerHandle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GAMERTAG_FROM_HANDLE_START' due to disabled trusted mode")

	assert(type(gamerHandle) == "userdata", "Arg #1 (gamerHandle) must be a userdata.")

	local result = native_call(0x9F0C0A981D73FA56, gamerHandle)
	return result:__tointeger() ~= 0
end
natives.network.network_gamertag_from_handle_start = natives.NETWORK.NETWORK_GAMERTAG_FROM_HANDLE_START

function natives.NETWORK.NETWORK_GAMERTAG_FROM_HANDLE_PENDING() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GAMERTAG_FROM_HANDLE_PENDING' due to disabled trusted mode")

	local result = native_call(0xB071E27958EF4CF0)
	return result:__tointeger() ~= 0
end
natives.network.network_gamertag_from_handle_pending = natives.NETWORK.NETWORK_GAMERTAG_FROM_HANDLE_PENDING

function natives.NETWORK.NETWORK_GAMERTAG_FROM_HANDLE_SUCCEEDED() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GAMERTAG_FROM_HANDLE_SUCCEEDED' due to disabled trusted mode")

	local result = native_call(0xFD00798DBA7523DD)
	return result:__tointeger() ~= 0
end
natives.network.network_gamertag_from_handle_succeeded = natives.NETWORK.NETWORK_GAMERTAG_FROM_HANDLE_SUCCEEDED

function natives.NETWORK.NETWORK_GET_GAMERTAG_FROM_HANDLE(--[[Any*]] gamerHandle) -- Returns const char*
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_GAMERTAG_FROM_HANDLE' due to disabled trusted mode")

	assert(type(gamerHandle) == "userdata", "Arg #1 (gamerHandle) must be a userdata.")

	local result = native_call(0x426141162EBE5CDB, gamerHandle)
	return result:__tostring(true)
end
natives.network.network_get_gamertag_from_handle = natives.NETWORK.NETWORK_GET_GAMERTAG_FROM_HANDLE

--[[
Hardcoded to return -1.
]]
function natives.NETWORK.NETWORK_DISPLAYNAMES_FROM_HANDLES_START(--[[Any*]] p0, --[[Any]] p1) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_DISPLAYNAMES_FROM_HANDLES_START' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xD66C9E72B3CC4982, p0, p1)
	return result:__tointeger()
end
natives.network.network_displaynames_from_handles_start = natives.NETWORK.NETWORK_DISPLAYNAMES_FROM_HANDLES_START

--[[
MulleDK19: This function is hard-coded to always return 0.
]]
function natives.NETWORK.NETWORK_GET_DISPLAYNAMES_FROM_HANDLES(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_DISPLAYNAMES_FROM_HANDLES' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0x58CC181719256197, p0, p1, p2)
	return result:__tointeger()
end
natives.network.network_get_displaynames_from_handles = natives.NETWORK.NETWORK_GET_DISPLAYNAMES_FROM_HANDLES

function natives.NETWORK.NETWORK_ARE_HANDLES_THE_SAME(--[[Any*]] gamerHandle1, --[[Any*]] gamerHandle2) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_ARE_HANDLES_THE_SAME' due to disabled trusted mode")

	assert(type(gamerHandle1) == "userdata", "Arg #1 (gamerHandle1) must be a userdata.")
	assert(type(gamerHandle2) == "userdata", "Arg #2 (gamerHandle2) must be a userdata.")

	local result = native_call(0x57DBA049E110F217, gamerHandle1, gamerHandle2)
	return result:__tointeger() ~= 0
end
natives.network.network_are_handles_the_same = natives.NETWORK.NETWORK_ARE_HANDLES_THE_SAME

function natives.NETWORK.NETWORK_IS_HANDLE_VALID(--[[Any*]] gamerHandle, --[[int]] gamerHandleSize) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IS_HANDLE_VALID' due to disabled trusted mode")

	assert(type(gamerHandle) == "userdata", "Arg #1 (gamerHandle) must be a userdata.")
	assert(type(gamerHandleSize) == "number", "Arg #2 (gamerHandleSize) must be a number.")

	local result = native_call(0x6F79B93B0A8E4133, gamerHandle, gamerHandleSize)
	return result:__tointeger() ~= 0
end
natives.network.network_is_handle_valid = natives.NETWORK.NETWORK_IS_HANDLE_VALID

function natives.NETWORK.NETWORK_GET_PLAYER_FROM_GAMER_HANDLE(--[[Any*]] gamerHandle) -- Returns Player
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_PLAYER_FROM_GAMER_HANDLE' due to disabled trusted mode")

	assert(type(gamerHandle) == "userdata", "Arg #1 (gamerHandle) must be a userdata.")

	local result = native_call(0xCE5F689CF5A0A49D, gamerHandle)
	return result:__tointeger()
end
natives.network.network_get_player_from_gamer_handle = natives.NETWORK.NETWORK_GET_PLAYER_FROM_GAMER_HANDLE

function natives.NETWORK.NETWORK_MEMBER_ID_FROM_GAMER_HANDLE(--[[Any*]] gamerHandle) -- Returns const char*
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_MEMBER_ID_FROM_GAMER_HANDLE' due to disabled trusted mode")

	assert(type(gamerHandle) == "userdata", "Arg #1 (gamerHandle) must be a userdata.")

	local result = native_call(0xC82630132081BB6F, gamerHandle)
	return result:__tostring(true)
end
natives.network.network_member_id_from_gamer_handle = natives.NETWORK.NETWORK_MEMBER_ID_FROM_GAMER_HANDLE

function natives.NETWORK.NETWORK_IS_GAMER_IN_MY_SESSION(--[[Any*]] gamerHandle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IS_GAMER_IN_MY_SESSION' due to disabled trusted mode")

	assert(type(gamerHandle) == "userdata", "Arg #1 (gamerHandle) must be a userdata.")

	local result = native_call(0x0F10B05DDF8D16E9, gamerHandle)
	return result:__tointeger() ~= 0
end
natives.network.network_is_gamer_in_my_session = natives.NETWORK.NETWORK_IS_GAMER_IN_MY_SESSION

function natives.NETWORK.NETWORK_SHOW_PROFILE_UI(--[[Any*]] gamerHandle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SHOW_PROFILE_UI' due to disabled trusted mode")

	assert(type(gamerHandle) == "userdata", "Arg #1 (gamerHandle) must be a userdata.")

	local result = native_call(0x859ED1CEA343FCA8, gamerHandle)
end
natives.network.network_show_profile_ui = natives.NETWORK.NETWORK_SHOW_PROFILE_UI

--[[
Returns the name of a given player. Returns "**Invalid**" if rlGamerInfo of the given player cannot be retrieved or the player doesn't exist.
]]
function natives.NETWORK.NETWORK_PLAYER_GET_NAME(--[[Player]] player) -- Returns const char*
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_PLAYER_GET_NAME' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0x7718D2E2060837D2, player)
	return result:__tostring(true)
end
natives.network.network_player_get_name = natives.NETWORK.NETWORK_PLAYER_GET_NAME

--[[
Returns a string of the player's Rockstar Id. 
Takes a 24 char buffer. Returns the buffer or "**Invalid**" if rlGamerInfo of the given player cannot be retrieved or the player doesn't exist.
]]
function natives.NETWORK.NETWORK_PLAYER_GET_USERID(--[[Player]] player, --[[int*]] userID) -- Returns const char*
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_PLAYER_GET_USERID' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(userID) == "userdata", "Arg #2 (userID) must be a userdata.")

	local result = native_call(0x4927FC39CD0869A0, player, userID)
	return result:__tostring(true)
end
natives.network.network_player_get_userid = natives.NETWORK.NETWORK_PLAYER_GET_USERID

--[[
Checks if a specific value (BYTE) in CNetGamePlayer is nonzero.
Returns always false in Singleplayer.

No longer used for dev checks since first mods were released on PS3 & 360.
R* now checks with the IS_DLC_PRESENT native for the dlc hash 2532323046,
if that is present it will unlock dev stuff.
]]
function natives.NETWORK.NETWORK_PLAYER_IS_ROCKSTAR_DEV(--[[Player]] player) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_PLAYER_IS_ROCKSTAR_DEV' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0x544ABDDA3B409B6D, player)
	return result:__tointeger() ~= 0
end
natives.network.network_player_is_rockstar_dev = natives.NETWORK.NETWORK_PLAYER_IS_ROCKSTAR_DEV

function natives.NETWORK.NETWORK_PLAYER_INDEX_IS_CHEATER(--[[Player]] player) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_PLAYER_INDEX_IS_CHEATER' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0x565E430DB3B05BEC, player)
	return result:__tointeger() ~= 0
end
natives.network.network_player_index_is_cheater = natives.NETWORK.NETWORK_PLAYER_INDEX_IS_CHEATER

function natives.NETWORK.NETWORK_ENTITY_GET_OBJECT_ID(--[[Entity]] entity) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_ENTITY_GET_OBJECT_ID' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0x815F18AD865F057F, entity)
	return result:__tointeger()
end
natives.network.network_entity_get_object_id = natives.NETWORK.NETWORK_ENTITY_GET_OBJECT_ID

--[[
I've had this return the player's ped handle sometimes, but also other random entities.
Whatever p0 is, it's at least not synced to other players.
At least not all the time, some p0 values actually output the same entity, (different handle of course, but same entity).
But another p0 value may return an entity for player x, but not for player y (it'll just return -1 even if the entity exists on both clients).

Returns an entity handle or -1, value changes based on p0's value.
]]
function natives.NETWORK.NETWORK_GET_ENTITY_FROM_OBJECT_ID(--[[Any]] p0) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_ENTITY_FROM_OBJECT_ID' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x37D5F739FD494675, p0)
	return result:__tointeger()
end
natives.network.network_get_entity_from_object_id = natives.NETWORK.NETWORK_GET_ENTITY_FROM_OBJECT_ID

function natives.NETWORK.NETWORK_IS_INACTIVE_PROFILE(--[[Any*]] p0) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IS_INACTIVE_PROFILE' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")

	local result = native_call(0x7E58745504313A2E, p0)
	return result:__tointeger() ~= 0
end
natives.network.network_is_inactive_profile = natives.NETWORK.NETWORK_IS_INACTIVE_PROFILE

function natives.NETWORK.NETWORK_GET_MAX_FRIENDS() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_MAX_FRIENDS' due to disabled trusted mode")

	local result = native_call(0xAFEBB0D5D8F687D2)
	return result:__tointeger()
end
natives.network.network_get_max_friends = natives.NETWORK.NETWORK_GET_MAX_FRIENDS

function natives.NETWORK.NETWORK_GET_FRIEND_COUNT() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_FRIEND_COUNT' due to disabled trusted mode")

	local result = native_call(0x203F1CFD823B27A4)
	return result:__tointeger()
end
natives.network.network_get_friend_count = natives.NETWORK.NETWORK_GET_FRIEND_COUNT

function natives.NETWORK.NETWORK_GET_FRIEND_NAME(--[[int]] friendIndex) -- Returns const char*
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_FRIEND_NAME' due to disabled trusted mode")

	assert(type(friendIndex) == "number", "Arg #1 (friendIndex) must be a number.")

	local result = native_call(0xE11EBBB2A783FE8B, friendIndex)
	return result:__tostring(true)
end
natives.network.network_get_friend_name = natives.NETWORK.NETWORK_GET_FRIEND_NAME

function natives.NETWORK.NETWORK_GET_FRIEND_DISPLAY_NAME(--[[int]] friendIndex) -- Returns const char*
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_FRIEND_DISPLAY_NAME' due to disabled trusted mode")

	assert(type(friendIndex) == "number", "Arg #1 (friendIndex) must be a number.")

	local result = native_call(0x4164F227D052E293, friendIndex)
	return result:__tostring(true)
end
natives.network.network_get_friend_display_name = natives.NETWORK.NETWORK_GET_FRIEND_DISPLAY_NAME

function natives.NETWORK.NETWORK_IS_FRIEND_ONLINE(--[[const char*]] name) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IS_FRIEND_ONLINE' due to disabled trusted mode")

	assert(type(name) == "string", "Arg #1 (name) must be a string.")

	local result = native_call(0x425A44533437B64D, name)
	return result:__tointeger() ~= 0
end
natives.network.network_is_friend_online = natives.NETWORK.NETWORK_IS_FRIEND_ONLINE

function natives.NETWORK.NETWORK_IS_FRIEND_HANDLE_ONLINE(--[[Any*]] gamerHandle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IS_FRIEND_HANDLE_ONLINE' due to disabled trusted mode")

	assert(type(gamerHandle) == "userdata", "Arg #1 (gamerHandle) must be a userdata.")

	local result = native_call(0x87EB7A3FFCB314DB, gamerHandle)
	return result:__tointeger() ~= 0
end
natives.network.network_is_friend_handle_online = natives.NETWORK.NETWORK_IS_FRIEND_HANDLE_ONLINE

--[[
In scripts R* calls 'NETWORK_GET_FRIEND_NAME' in this param.
]]
function natives.NETWORK.NETWORK_IS_FRIEND_IN_SAME_TITLE(--[[const char*]] friendName) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IS_FRIEND_IN_SAME_TITLE' due to disabled trusted mode")

	assert(type(friendName) == "string", "Arg #1 (friendName) must be a string.")

	local result = native_call(0x2EA9A3BEDF3F17B8, friendName)
	return result:__tointeger() ~= 0
end
natives.network.network_is_friend_in_same_title = natives.NETWORK.NETWORK_IS_FRIEND_IN_SAME_TITLE

function natives.NETWORK.NETWORK_IS_FRIEND_IN_MULTIPLAYER(--[[const char*]] friendName) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IS_FRIEND_IN_MULTIPLAYER' due to disabled trusted mode")

	assert(type(friendName) == "string", "Arg #1 (friendName) must be a string.")

	local result = native_call(0x57005C18827F3A28, friendName)
	return result:__tointeger() ~= 0
end
natives.network.network_is_friend_in_multiplayer = natives.NETWORK.NETWORK_IS_FRIEND_IN_MULTIPLAYER

function natives.NETWORK.NETWORK_IS_FRIEND(--[[Any*]] gamerHandle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IS_FRIEND' due to disabled trusted mode")

	assert(type(gamerHandle) == "userdata", "Arg #1 (gamerHandle) must be a userdata.")

	local result = native_call(0x1A24A179F9B31654, gamerHandle)
	return result:__tointeger() ~= 0
end
natives.network.network_is_friend = natives.NETWORK.NETWORK_IS_FRIEND

--[[
This function is hard-coded to always return 0.
]]
function natives.NETWORK.NETWORK_IS_PENDING_FRIEND(--[[Any]] p0) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IS_PENDING_FRIEND' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x0BE73DA6984A6E33, p0)
	return result:__tointeger()
end
natives.network.network_is_pending_friend = natives.NETWORK.NETWORK_IS_PENDING_FRIEND

function natives.NETWORK.NETWORK_IS_ADDING_FRIEND() -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IS_ADDING_FRIEND' due to disabled trusted mode")

	local result = native_call(0x6EA101606F6E4D81)
	return result:__tointeger()
end
natives.network.network_is_adding_friend = natives.NETWORK.NETWORK_IS_ADDING_FRIEND

function natives.NETWORK.NETWORK_ADD_FRIEND(--[[Any*]] gamerHandle, --[[const char*]] message) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_ADD_FRIEND' due to disabled trusted mode")

	assert(type(gamerHandle) == "userdata", "Arg #1 (gamerHandle) must be a userdata.")
	assert(type(message) == "string", "Arg #2 (message) must be a string.")

	local result = native_call(0x8E02D73914064223, gamerHandle, message)
	return result:__tointeger() ~= 0
end
natives.network.network_add_friend = natives.NETWORK.NETWORK_ADD_FRIEND

function natives.NETWORK.NETWORK_IS_FRIEND_INDEX_ONLINE(--[[int]] friendIndex) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IS_FRIEND_INDEX_ONLINE' due to disabled trusted mode")

	assert(type(friendIndex) == "number", "Arg #1 (friendIndex) must be a number.")

	local result = native_call(0xBAD8F2A42B844821, friendIndex)
	return result:__tointeger() ~= 0
end
natives.network.network_is_friend_index_online = natives.NETWORK.NETWORK_IS_FRIEND_INDEX_ONLINE

function natives.NETWORK.NETWORK_SET_PLAYER_IS_PASSIVE(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SET_PLAYER_IS_PASSIVE' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x1B857666604B1A74, toggle)
end
natives.network.network_set_player_is_passive = natives.NETWORK.NETWORK_SET_PLAYER_IS_PASSIVE

function natives.NETWORK.NETWORK_GET_PLAYER_OWNS_WAYPOINT(--[[Player]] player) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_PLAYER_OWNS_WAYPOINT' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0x82377B65E943F72D, player)
	return result:__tointeger() ~= 0
end
natives.network.network_get_player_owns_waypoint = natives.NETWORK.NETWORK_GET_PLAYER_OWNS_WAYPOINT

function natives.NETWORK.NETWORK_CAN_SET_WAYPOINT() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_CAN_SET_WAYPOINT' due to disabled trusted mode")

	local result = native_call(0xC927EC229934AF60)
	return result:__tointeger() ~= 0
end
natives.network.network_can_set_waypoint = natives.NETWORK.NETWORK_CAN_SET_WAYPOINT

function natives.NETWORK.NETWORK_IGNORE_REMOTE_WAYPOINTS() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IGNORE_REMOTE_WAYPOINTS' due to disabled trusted mode")

	local result = native_call(0x4C2A9FDC22377075)
end
natives.network.network_ignore_remote_waypoints = natives.NETWORK.NETWORK_IGNORE_REMOTE_WAYPOINTS

function natives.NETWORK.NETWORK_SET_SCRIPT_AUTOMUTED(--[[Any]] p0) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SET_SCRIPT_AUTOMUTED' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xB309EBEA797E001F, p0)
	return result:__tointeger()
end
natives.network.network_set_script_automuted = natives.NETWORK.NETWORK_SET_SCRIPT_AUTOMUTED

function natives.NETWORK.NETWORK_HAS_AUTOMUTE_OVERRIDE() -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_HAS_AUTOMUTE_OVERRIDE' due to disabled trusted mode")

	local result = native_call(0x26F07DD83A5F7F98)
	return result:__tointeger()
end
natives.network.network_has_automute_override = natives.NETWORK.NETWORK_HAS_AUTOMUTE_OVERRIDE

function natives.NETWORK.NETWORK_HAS_HEADSET() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_HAS_HEADSET' due to disabled trusted mode")

	local result = native_call(0xE870F9F1F7B4F1FA)
	return result:__tointeger() ~= 0
end
natives.network.network_has_headset = natives.NETWORK.NETWORK_HAS_HEADSET

function natives.NETWORK.NETWORK_SET_LOOK_AT_TALKERS(--[[BOOL]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SET_LOOK_AT_TALKERS' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0x7D395EA61622E116, p0)
end
natives.network.network_set_look_at_talkers = natives.NETWORK.NETWORK_SET_LOOK_AT_TALKERS

function natives.NETWORK.NETWORK_IS_PUSH_TO_TALK_ACTIVE() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IS_PUSH_TO_TALK_ACTIVE' due to disabled trusted mode")

	local result = native_call(0xC0D2AF00BCC234CA)
	return result:__tointeger() ~= 0
end
natives.network.network_is_push_to_talk_active = natives.NETWORK.NETWORK_IS_PUSH_TO_TALK_ACTIVE

function natives.NETWORK.NETWORK_GAMER_HAS_HEADSET(--[[Any*]] gamerHandle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GAMER_HAS_HEADSET' due to disabled trusted mode")

	assert(type(gamerHandle) == "userdata", "Arg #1 (gamerHandle) must be a userdata.")

	local result = native_call(0xF2FD55CB574BCC55, gamerHandle)
	return result:__tointeger() ~= 0
end
natives.network.network_gamer_has_headset = natives.NETWORK.NETWORK_GAMER_HAS_HEADSET

function natives.NETWORK.NETWORK_IS_GAMER_TALKING(--[[Any*]] gamerHandle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IS_GAMER_TALKING' due to disabled trusted mode")

	assert(type(gamerHandle) == "userdata", "Arg #1 (gamerHandle) must be a userdata.")

	local result = native_call(0x71C33B22606CD88A, gamerHandle)
	return result:__tointeger() ~= 0
end
natives.network.network_is_gamer_talking = natives.NETWORK.NETWORK_IS_GAMER_TALKING

function natives.NETWORK.NETWORK_PERMISSIONS_HAS_GAMER_RECORD(--[[Any*]] gamerHandle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_PERMISSIONS_HAS_GAMER_RECORD' due to disabled trusted mode")

	assert(type(gamerHandle) == "userdata", "Arg #1 (gamerHandle) must be a userdata.")

	local result = native_call(0x559EBF901A8C68E0, gamerHandle)
	return result:__tointeger() ~= 0
end
natives.network.network_permissions_has_gamer_record = natives.NETWORK.NETWORK_PERMISSIONS_HAS_GAMER_RECORD

function natives.NETWORK.NETWORK_CAN_COMMUNICATE_WITH_GAMER(--[[Any*]] gamerHandle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_CAN_COMMUNICATE_WITH_GAMER' due to disabled trusted mode")

	assert(type(gamerHandle) == "userdata", "Arg #1 (gamerHandle) must be a userdata.")

	local result = native_call(0x8F5D1AD832AEB06C, gamerHandle)
	return result:__tointeger() ~= 0
end
natives.network.network_can_communicate_with_gamer = natives.NETWORK.NETWORK_CAN_COMMUNICATE_WITH_GAMER

function natives.NETWORK.NETWORK_CAN_TEXT_CHAT_WITH_GAMER(--[[Any*]] gamerHandle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_CAN_TEXT_CHAT_WITH_GAMER' due to disabled trusted mode")

	assert(type(gamerHandle) == "userdata", "Arg #1 (gamerHandle) must be a userdata.")

	local result = native_call(0xA150A4F065806B1F, gamerHandle)
	return result:__tointeger() ~= 0
end
natives.network.network_can_text_chat_with_gamer = natives.NETWORK.NETWORK_CAN_TEXT_CHAT_WITH_GAMER

function natives.NETWORK.NETWORK_IS_GAMER_MUTED_BY_ME(--[[Any*]] gamerHandle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IS_GAMER_MUTED_BY_ME' due to disabled trusted mode")

	assert(type(gamerHandle) == "userdata", "Arg #1 (gamerHandle) must be a userdata.")

	local result = native_call(0xCE60DE011B6C7978, gamerHandle)
	return result:__tointeger() ~= 0
end
natives.network.network_is_gamer_muted_by_me = natives.NETWORK.NETWORK_IS_GAMER_MUTED_BY_ME

function natives.NETWORK.NETWORK_AM_I_MUTED_BY_GAMER(--[[Any*]] gamerHandle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_AM_I_MUTED_BY_GAMER' due to disabled trusted mode")

	assert(type(gamerHandle) == "userdata", "Arg #1 (gamerHandle) must be a userdata.")

	local result = native_call(0xDF02A2C93F1F26DA, gamerHandle)
	return result:__tointeger() ~= 0
end
natives.network.network_am_i_muted_by_gamer = natives.NETWORK.NETWORK_AM_I_MUTED_BY_GAMER

function natives.NETWORK.NETWORK_IS_GAMER_BLOCKED_BY_ME(--[[Any*]] gamerHandle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IS_GAMER_BLOCKED_BY_ME' due to disabled trusted mode")

	assert(type(gamerHandle) == "userdata", "Arg #1 (gamerHandle) must be a userdata.")

	local result = native_call(0xE944C4F5AF1B5883, gamerHandle)
	return result:__tointeger() ~= 0
end
natives.network.network_is_gamer_blocked_by_me = natives.NETWORK.NETWORK_IS_GAMER_BLOCKED_BY_ME

function natives.NETWORK.NETWORK_AM_I_BLOCKED_BY_GAMER(--[[Any*]] gamerHandle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_AM_I_BLOCKED_BY_GAMER' due to disabled trusted mode")

	assert(type(gamerHandle) == "userdata", "Arg #1 (gamerHandle) must be a userdata.")

	local result = native_call(0x15337C7C268A27B2, gamerHandle)
	return result:__tointeger() ~= 0
end
natives.network.network_am_i_blocked_by_gamer = natives.NETWORK.NETWORK_AM_I_BLOCKED_BY_GAMER

function natives.NETWORK.NETWORK_CAN_VIEW_GAMER_USER_CONTENT(--[[Any*]] gamerHandle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_CAN_VIEW_GAMER_USER_CONTENT' due to disabled trusted mode")

	assert(type(gamerHandle) == "userdata", "Arg #1 (gamerHandle) must be a userdata.")

	local result = native_call(0xB57A49545BA53CE7, gamerHandle)
	return result:__tointeger() ~= 0
end
natives.network.network_can_view_gamer_user_content = natives.NETWORK.NETWORK_CAN_VIEW_GAMER_USER_CONTENT

function natives.NETWORK.NETWORK_HAS_VIEW_GAMER_USER_CONTENT_RESULT(--[[Any*]] gamerHandle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_HAS_VIEW_GAMER_USER_CONTENT_RESULT' due to disabled trusted mode")

	assert(type(gamerHandle) == "userdata", "Arg #1 (gamerHandle) must be a userdata.")

	local result = native_call(0xCCA4318E1AB03F1F, gamerHandle)
	return result:__tointeger() ~= 0
end
natives.network.network_has_view_gamer_user_content_result = natives.NETWORK.NETWORK_HAS_VIEW_GAMER_USER_CONTENT_RESULT

function natives.NETWORK.NETWORK_CAN_PLAY_MULTIPLAYER_WITH_GAMER(--[[Any*]] gamerHandle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_CAN_PLAY_MULTIPLAYER_WITH_GAMER' due to disabled trusted mode")

	assert(type(gamerHandle) == "userdata", "Arg #1 (gamerHandle) must be a userdata.")

	local result = native_call(0x07DD29D5E22763F1, gamerHandle)
	return result:__tointeger() ~= 0
end
natives.network.network_can_play_multiplayer_with_gamer = natives.NETWORK.NETWORK_CAN_PLAY_MULTIPLAYER_WITH_GAMER

function natives.NETWORK.NETWORK_CAN_GAMER_PLAY_MULTIPLAYER_WITH_ME(--[[Any*]] gamerHandle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_CAN_GAMER_PLAY_MULTIPLAYER_WITH_ME' due to disabled trusted mode")

	assert(type(gamerHandle) == "userdata", "Arg #1 (gamerHandle) must be a userdata.")

	local result = native_call(0x135F9B7B7ADD2185, gamerHandle)
	return result:__tointeger() ~= 0
end
natives.network.network_can_gamer_play_multiplayer_with_me = natives.NETWORK.NETWORK_CAN_GAMER_PLAY_MULTIPLAYER_WITH_ME

function natives.NETWORK.NETWORK_CAN_SEND_LOCAL_INVITE(--[[Any*]] gamerHandle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_CAN_SEND_LOCAL_INVITE' due to disabled trusted mode")

	assert(type(gamerHandle) == "userdata", "Arg #1 (gamerHandle) must be a userdata.")

	local result = native_call(0x021ABCBD98EC4320, gamerHandle)
	return result:__tointeger() ~= 0
end
natives.network.network_can_send_local_invite = natives.NETWORK.NETWORK_CAN_SEND_LOCAL_INVITE

function natives.NETWORK.NETWORK_CAN_RECEIVE_LOCAL_INVITE(--[[Any*]] gamerHandle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_CAN_RECEIVE_LOCAL_INVITE' due to disabled trusted mode")

	assert(type(gamerHandle) == "userdata", "Arg #1 (gamerHandle) must be a userdata.")

	local result = native_call(0x421E34C55F125964, gamerHandle)
	return result:__tointeger() ~= 0
end
natives.network.network_can_receive_local_invite = natives.NETWORK.NETWORK_CAN_RECEIVE_LOCAL_INVITE

--[[
returns true if someone is screaming or talking in a microphone
]]
function natives.NETWORK.NETWORK_IS_PLAYER_TALKING(--[[Player]] player) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IS_PLAYER_TALKING' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0x031E11F3D447647E, player)
	return result:__tointeger() ~= 0
end
natives.network.network_is_player_talking = natives.NETWORK.NETWORK_IS_PLAYER_TALKING

function natives.NETWORK.NETWORK_PLAYER_HAS_HEADSET(--[[Player]] player) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_PLAYER_HAS_HEADSET' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0x3FB99A8B08D18FD6, player)
	return result:__tointeger() ~= 0
end
natives.network.network_player_has_headset = natives.NETWORK.NETWORK_PLAYER_HAS_HEADSET

function natives.NETWORK.NETWORK_IS_PLAYER_MUTED_BY_ME(--[[Player]] player) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IS_PLAYER_MUTED_BY_ME' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0x8C71288AE68EDE39, player)
	return result:__tointeger() ~= 0
end
natives.network.network_is_player_muted_by_me = natives.NETWORK.NETWORK_IS_PLAYER_MUTED_BY_ME

function natives.NETWORK.NETWORK_AM_I_MUTED_BY_PLAYER(--[[Player]] player) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_AM_I_MUTED_BY_PLAYER' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0x9D6981DFC91A8604, player)
	return result:__tointeger() ~= 0
end
natives.network.network_am_i_muted_by_player = natives.NETWORK.NETWORK_AM_I_MUTED_BY_PLAYER

function natives.NETWORK.NETWORK_IS_PLAYER_BLOCKED_BY_ME(--[[Player]] player) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IS_PLAYER_BLOCKED_BY_ME' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0x57AF1F8E27483721, player)
	return result:__tointeger() ~= 0
end
natives.network.network_is_player_blocked_by_me = natives.NETWORK.NETWORK_IS_PLAYER_BLOCKED_BY_ME

function natives.NETWORK.NETWORK_AM_I_BLOCKED_BY_PLAYER(--[[Player]] player) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_AM_I_BLOCKED_BY_PLAYER' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0x87F395D957D4353D, player)
	return result:__tointeger() ~= 0
end
natives.network.network_am_i_blocked_by_player = natives.NETWORK.NETWORK_AM_I_BLOCKED_BY_PLAYER

function natives.NETWORK.NETWORK_GET_PLAYER_LOUDNESS(--[[Player]] player) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_PLAYER_LOUDNESS' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0x21A1684A25C2867F, player)
	return result:__tonumber()
end
natives.network.network_get_player_loudness = natives.NETWORK.NETWORK_GET_PLAYER_LOUDNESS

function natives.NETWORK.NETWORK_SET_TALKER_PROXIMITY(--[[float]] value) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SET_TALKER_PROXIMITY' due to disabled trusted mode")

	assert(type(value) == "number", "Arg #1 (value) must be a number.")

	local result = native_call(0xCBF12D65F95AD686, value)
end
natives.network.network_set_talker_proximity = natives.NETWORK.NETWORK_SET_TALKER_PROXIMITY

function natives.NETWORK.NETWORK_GET_TALKER_PROXIMITY() -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_TALKER_PROXIMITY' due to disabled trusted mode")

	local result = native_call(0x84F0F13120B4E098)
	return result:__tonumber()
end
natives.network.network_get_talker_proximity = natives.NETWORK.NETWORK_GET_TALKER_PROXIMITY

function natives.NETWORK.NETWORK_SET_VOICE_ACTIVE(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SET_VOICE_ACTIVE' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0xBABEC9E69A91C57B, toggle)
end
natives.network.network_set_voice_active = natives.NETWORK.NETWORK_SET_VOICE_ACTIVE

function natives.NETWORK.NETWORK_REMAIN_IN_GAME_CHAT(--[[BOOL]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_REMAIN_IN_GAME_CHAT' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0xCFEB46DCD7D8D5EB, p0)
end
natives.network.network_remain_in_game_chat = natives.NETWORK.NETWORK_REMAIN_IN_GAME_CHAT

function natives.NETWORK.NETWORK_OVERRIDE_TRANSITION_CHAT(--[[BOOL]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_OVERRIDE_TRANSITION_CHAT' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0xAF66059A131AA269, p0)
end
natives.network.network_override_transition_chat = natives.NETWORK.NETWORK_OVERRIDE_TRANSITION_CHAT

function natives.NETWORK.NETWORK_SET_TEAM_ONLY_CHAT(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SET_TEAM_ONLY_CHAT' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0xD5B4883AC32F24C3, toggle)
end
natives.network.network_set_team_only_chat = natives.NETWORK.NETWORK_SET_TEAM_ONLY_CHAT

function natives.NETWORK.NETWORK_SET_SCRIPT_CONTROLLING_TEAMS(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SET_SCRIPT_CONTROLLING_TEAMS' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x265559DA40B3F327, p0)
end
natives.network.network_set_script_controlling_teams = natives.NETWORK.NETWORK_SET_SCRIPT_CONTROLLING_TEAMS

function natives.NETWORK.NETWORK_SET_SAME_TEAM_AS_LOCAL_PLAYER(--[[Any]] p0, --[[Any]] p1) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SET_SAME_TEAM_AS_LOCAL_PLAYER' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x4348BFDA56023A2F, p0, p1)
	return result:__tointeger()
end
natives.network.network_set_same_team_as_local_player = natives.NETWORK.NETWORK_SET_SAME_TEAM_AS_LOCAL_PLAYER

function natives.NETWORK.NETWORK_OVERRIDE_TEAM_RESTRICTIONS(--[[int]] team, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_OVERRIDE_TEAM_RESTRICTIONS' due to disabled trusted mode")

	assert(type(team) == "number", "Arg #1 (team) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x6F697A66CE78674E, team, toggle)
end
natives.network.network_override_team_restrictions = natives.NETWORK.NETWORK_OVERRIDE_TEAM_RESTRICTIONS

function natives.NETWORK.NETWORK_SET_OVERRIDE_SPECTATOR_MODE(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SET_OVERRIDE_SPECTATOR_MODE' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x70DA3BF8DACD3210, toggle)
end
natives.network.network_set_override_spectator_mode = natives.NETWORK.NETWORK_SET_OVERRIDE_SPECTATOR_MODE

function natives.NETWORK.NETWORK_SET_OVERRIDE_TUTORIAL_SESSION_CHAT(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SET_OVERRIDE_TUTORIAL_SESSION_CHAT' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x3C5C1E2C2FF814B1, toggle)
end
natives.network.network_set_override_tutorial_session_chat = natives.NETWORK.NETWORK_SET_OVERRIDE_TUTORIAL_SESSION_CHAT

function natives.NETWORK.NETWORK_SET_PROXIMITY_AFFECTS_TEAM(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SET_PROXIMITY_AFFECTS_TEAM' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x9D7AFCBF21C51712, toggle)
end
natives.network.network_set_proximity_affects_team = natives.NETWORK.NETWORK_SET_PROXIMITY_AFFECTS_TEAM

function natives.NETWORK.NETWORK_SET_NO_SPECTATOR_CHAT(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SET_NO_SPECTATOR_CHAT' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0xF46A1E03E8755980, toggle)
end
natives.network.network_set_no_spectator_chat = natives.NETWORK.NETWORK_SET_NO_SPECTATOR_CHAT

function natives.NETWORK.NETWORK_SET_IGNORE_SPECTATOR_CHAT_LIMITS_SAME_TEAM(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SET_IGNORE_SPECTATOR_CHAT_LIMITS_SAME_TEAM' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x6A5D89D7769A40D8, toggle)
end
natives.network.network_set_ignore_spectator_chat_limits_same_team = natives.NETWORK.NETWORK_SET_IGNORE_SPECTATOR_CHAT_LIMITS_SAME_TEAM

--[[
Could possibly bypass being muted or automatically muted
]]
function natives.NETWORK.NETWORK_OVERRIDE_CHAT_RESTRICTIONS(--[[Player]] player, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_OVERRIDE_CHAT_RESTRICTIONS' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x3039AE5AD2C9C0C4, player, toggle)
end
natives.network.network_override_chat_restrictions = natives.NETWORK.NETWORK_OVERRIDE_CHAT_RESTRICTIONS

--[[
This is used alongside the native,
'NETWORK_OVERRIDE_RECEIVE_RESTRICTIONS'. Read its description for more info.
]]
function natives.NETWORK.NETWORK_OVERRIDE_SEND_RESTRICTIONS(--[[Player]] player, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_OVERRIDE_SEND_RESTRICTIONS' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x97DD4C5944CC2E6A, player, toggle)
end
natives.network.network_override_send_restrictions = natives.NETWORK.NETWORK_OVERRIDE_SEND_RESTRICTIONS

function natives.NETWORK.NETWORK_OVERRIDE_SEND_RESTRICTIONS_ALL(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_OVERRIDE_SEND_RESTRICTIONS_ALL' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x57B192B4D4AD23D5, toggle)
end
natives.network.network_override_send_restrictions_all = natives.NETWORK.NETWORK_OVERRIDE_SEND_RESTRICTIONS_ALL

--[[
R* uses this to hear all player when spectating. 
It allows you to hear other online players when their chat is on none, crew and or friends
]]
function natives.NETWORK.NETWORK_OVERRIDE_RECEIVE_RESTRICTIONS(--[[Player]] player, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_OVERRIDE_RECEIVE_RESTRICTIONS' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xDDF73E2B1FEC5AB4, player, toggle)
end
natives.network.network_override_receive_restrictions = natives.NETWORK.NETWORK_OVERRIDE_RECEIVE_RESTRICTIONS

--[[
p0 is always false in scripts.
]]
function natives.NETWORK.NETWORK_OVERRIDE_RECEIVE_RESTRICTIONS_ALL(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_OVERRIDE_RECEIVE_RESTRICTIONS_ALL' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x0FF2862B61A58AF9, toggle)
end
natives.network.network_override_receive_restrictions_all = natives.NETWORK.NETWORK_OVERRIDE_RECEIVE_RESTRICTIONS_ALL

function natives.NETWORK.NETWORK_SET_VOICE_CHANNEL(--[[int]] channel) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SET_VOICE_CHANNEL' due to disabled trusted mode")

	assert(type(channel) == "number", "Arg #1 (channel) must be a number.")

	local result = native_call(0xEF6212C2EFEF1A23, channel)
end
natives.network.network_set_voice_channel = natives.NETWORK.NETWORK_SET_VOICE_CHANNEL

function natives.NETWORK.NETWORK_CLEAR_VOICE_CHANNEL() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_CLEAR_VOICE_CHANNEL' due to disabled trusted mode")

	local result = native_call(0xE036A705F989E049)
end
natives.network.network_clear_voice_channel = natives.NETWORK.NETWORK_CLEAR_VOICE_CHANNEL

function natives.NETWORK.NETWORK_APPLY_VOICE_PROXIMITY_OVERRIDE(--[[float]] x, --[[float]] y, --[[float]] z) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_APPLY_VOICE_PROXIMITY_OVERRIDE' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")

	local result = native_call(0xDBD2056652689917, x, y, z)
end
natives.network.network_apply_voice_proximity_override = natives.NETWORK.NETWORK_APPLY_VOICE_PROXIMITY_OVERRIDE

function natives.NETWORK.NETWORK_CLEAR_VOICE_PROXIMITY_OVERRIDE() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_CLEAR_VOICE_PROXIMITY_OVERRIDE' due to disabled trusted mode")

	local result = native_call(0xF03755696450470C)
end
natives.network.network_clear_voice_proximity_override = natives.NETWORK.NETWORK_CLEAR_VOICE_PROXIMITY_OVERRIDE

function natives.NETWORK.NETWORK_ENABLE_VOICE_BANDWIDTH_RESTRICTION(--[[Player]] player) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_ENABLE_VOICE_BANDWIDTH_RESTRICTION' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0x5E3AA4CA2B6FB0EE, player)
end
natives.network.network_enable_voice_bandwidth_restriction = natives.NETWORK.NETWORK_ENABLE_VOICE_BANDWIDTH_RESTRICTION

function natives.NETWORK.NETWORK_DISABLE_VOICE_BANDWIDTH_RESTRICTION(--[[Player]] player) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_DISABLE_VOICE_BANDWIDTH_RESTRICTION' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0xCA575C391FEA25CC, player)
end
natives.network.network_disable_voice_bandwidth_restriction = natives.NETWORK.NETWORK_DISABLE_VOICE_BANDWIDTH_RESTRICTION

--[[
NETWORK_GET_M[A-U]
]]
function natives.NETWORK.NETWORK_GET_MUTE_COUNT_FOR_PLAYER(--[[Player]] p0, --[[float*]] p1, --[[float*]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_MUTE_COUNT_FOR_PLAYER' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "userdata", "Arg #2 (p1) must be a userdata.")
	assert(type(p2) == "userdata", "Arg #3 (p2) must be a userdata.")

	local result = native_call(0xADB57E5B663CCA8B, p0, p1, p2)
end
natives.network.network_get_mute_count_for_player = natives.NETWORK.NETWORK_GET_MUTE_COUNT_FOR_PLAYER

function natives.NETWORK.NETWORK_SET_SPECTATOR_TO_NON_SPECTATOR_TEXT_CHAT(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SET_SPECTATOR_TO_NON_SPECTATOR_TEXT_CHAT' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x8EF52ACAECC51D9C, toggle)
end
natives.network.network_set_spectator_to_non_spectator_text_chat = natives.NETWORK.NETWORK_SET_SPECTATOR_TO_NON_SPECTATOR_TEXT_CHAT

--[[
Same as _IS_TEXT_CHAT_ACTIVE, except it does not check if the text chat HUD component is initialized, and therefore may crash.
]]
function natives.NETWORK.NETWORK_TEXT_CHAT_IS_TYPING() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_TEXT_CHAT_IS_TYPING' due to disabled trusted mode")

	local result = native_call(0x5FCF4D7069B09026)
	return result:__tointeger() ~= 0
end
natives.network.network_text_chat_is_typing = natives.NETWORK.NETWORK_TEXT_CHAT_IS_TYPING

--[[
Starts a new singleplayer game (at the prologue).
]]
function natives.NETWORK.SHUTDOWN_AND_LAUNCH_SINGLE_PLAYER_GAME() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.SHUTDOWN_AND_LAUNCH_SINGLE_PLAYER_GAME' due to disabled trusted mode")

	local result = native_call(0x593850C16A36B692)
end
natives.network.shutdown_and_launch_single_player_game = natives.NETWORK.SHUTDOWN_AND_LAUNCH_SINGLE_PLAYER_GAME

--[[
In singleplayer this will re-load your game.

In FiveM / GTA:Online this disconnects you from the session, and starts loading single player, however you still remain connected to the server (only if you're the host, if you're not then you also (most likely) get disconnected from the server) and other players will not be able to join until you exit the game.

You might need to DoScreenFadeIn and ShutdownLoadingScreen otherwise you probably won't end up loading into SP at all.

Somewhat related note: opening the pause menu after loading into this 'singleplayer' mode crashes the game.
]]
function natives.NETWORK.SHUTDOWN_AND_LOAD_MOST_RECENT_SAVE() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.SHUTDOWN_AND_LOAD_MOST_RECENT_SAVE' due to disabled trusted mode")

	local result = native_call(0x9ECA15ADFE141431)
	return result:__tointeger() ~= 0
end
natives.network.shutdown_and_load_most_recent_save = natives.NETWORK.SHUTDOWN_AND_LOAD_MOST_RECENT_SAVE

function natives.NETWORK.NETWORK_SET_FRIENDLY_FIRE_OPTION(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SET_FRIENDLY_FIRE_OPTION' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0xF808475FA571D823, toggle)
end
natives.network.network_set_friendly_fire_option = natives.NETWORK.NETWORK_SET_FRIENDLY_FIRE_OPTION

--[[
This native does absolutely nothing, just a nullsub
]]
function natives.NETWORK.NETWORK_SET_RICH_PRESENCE(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SET_RICH_PRESENCE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x1DCCACDCFC569362, p0, p1, p2, p3)
end
natives.network.network_set_rich_presence = natives.NETWORK.NETWORK_SET_RICH_PRESENCE

--[[
This native does absolutely nothing, just a nullsub
]]
function natives.NETWORK.NETWORK_SET_RICH_PRESENCE_STRING(--[[int]] p0, --[[const char*]] textLabel) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SET_RICH_PRESENCE_STRING' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(textLabel) == "string", "Arg #2 (textLabel) must be a string.")

	local result = native_call(0x3E200C2BCF4164EB, p0, textLabel)
end
natives.network.network_set_rich_presence_string = natives.NETWORK.NETWORK_SET_RICH_PRESENCE_STRING

function natives.NETWORK.NETWORK_GET_TIMEOUT_TIME() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_TIMEOUT_TIME' due to disabled trusted mode")

	local result = native_call(0x5ED0356A0CE3A34F)
	return result:__tointeger()
end
natives.network.network_get_timeout_time = natives.NETWORK.NETWORK_GET_TIMEOUT_TIME

--[[
p4 and p5 are always 0 in scripts
]]
function natives.NETWORK.NETWORK_LEAVE_PED_BEHIND_BEFORE_WARP(--[[Player]] player, --[[float]] x, --[[float]] y, --[[float]] z, --[[BOOL]] p4, --[[BOOL]] p5) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_LEAVE_PED_BEHIND_BEFORE_WARP' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")
	assert(type(p4) == "boolean", "Arg #5 (p4) must be a boolean.")
	assert(type(p5) == "boolean", "Arg #6 (p5) must be a boolean.")

	local result = native_call(0x9769F811D1785B03, player, x, y, z, p4, p5)
end
natives.network.network_leave_ped_behind_before_warp = natives.NETWORK.NETWORK_LEAVE_PED_BEHIND_BEFORE_WARP

function natives.NETWORK.NETWORK_LEAVE_PED_BEHIND_BEFORE_CUTSCENE(--[[Player]] player, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_LEAVE_PED_BEHIND_BEFORE_CUTSCENE' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0xBF22E0F32968E967, player, p1)
end
natives.network.network_leave_ped_behind_before_cutscene = natives.NETWORK.NETWORK_LEAVE_PED_BEHIND_BEFORE_CUTSCENE

--[[
entity must be a valid entity; ped can be NULL
]]
function natives.NETWORK.REMOVE_ALL_STICKY_BOMBS_FROM_ENTITY(--[[Entity]] entity, --[[Ped]] ped) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.REMOVE_ALL_STICKY_BOMBS_FROM_ENTITY' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(ped) == "number", "Arg #2 (ped) must be a number.")

	local result = native_call(0x715135F4B82AC90D, entity, ped)
end
natives.network.remove_all_sticky_bombs_from_entity = natives.NETWORK.REMOVE_ALL_STICKY_BOMBS_FROM_ENTITY

function natives.NETWORK.NETWORK_KEEP_ENTITY_COLLISION_DISABLED_AFTER_ANIM_SCENE(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_KEEP_ENTITY_COLLISION_DISABLED_AFTER_ANIM_SCENE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x17C9E241111A674D, p0, p1)
end
natives.network.network_keep_entity_collision_disabled_after_anim_scene = natives.NETWORK.NETWORK_KEEP_ENTITY_COLLISION_DISABLED_AFTER_ANIM_SCENE

function natives.NETWORK.NETWORK_IS_ANY_PLAYER_NEAR(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3, --[[Any]] p4, --[[Any]] p5, --[[Any]] p6) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IS_ANY_PLAYER_NEAR' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")
	assert(type(p6) == "number", "Arg #7 (p6) must be a number.")

	local result = native_call(0x2E4C123D1C8A710E, p0, p1, p2, p3, p4, p5, p6)
	return result:__tointeger()
end
natives.network.network_is_any_player_near = natives.NETWORK.NETWORK_IS_ANY_PLAYER_NEAR

function natives.NETWORK.NETWORK_CLAN_SERVICE_IS_VALID() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_CLAN_SERVICE_IS_VALID' due to disabled trusted mode")

	local result = native_call(0x579CCED0265D4896)
	return result:__tointeger() ~= 0
end
natives.network.network_clan_service_is_valid = natives.NETWORK.NETWORK_CLAN_SERVICE_IS_VALID

function natives.NETWORK.NETWORK_CLAN_PLAYER_IS_ACTIVE(--[[Any*]] gamerHandle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_CLAN_PLAYER_IS_ACTIVE' due to disabled trusted mode")

	assert(type(gamerHandle) == "userdata", "Arg #1 (gamerHandle) must be a userdata.")

	local result = native_call(0xB124B57F571D8F18, gamerHandle)
	return result:__tointeger() ~= 0
end
natives.network.network_clan_player_is_active = natives.NETWORK.NETWORK_CLAN_PLAYER_IS_ACTIVE

--[[
bufferSize is 35 in the scripts.

bufferSize is the elementCount of p0(desc), sizeof(p0) == 280 == p1*8 == 35 * 8, p2(netHandle) is obtained from NETWORK::NETWORK_HANDLE_FROM_PLAYER.  And no, I can't explain why 35 * sizeof(int) == 280 and not 140, but I'll get back to you on that.

the answer is: because p0 an int64_t* / int64_t[35].  and FYI p2 is an int64_t[13]

pastebin.com/cSZniHak
]]
function natives.NETWORK.NETWORK_CLAN_PLAYER_GET_DESC(--[[Any*]] clanDesc, --[[int]] bufferSize, --[[Any*]] gamerHandle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_CLAN_PLAYER_GET_DESC' due to disabled trusted mode")

	assert(type(clanDesc) == "userdata", "Arg #1 (clanDesc) must be a userdata.")
	assert(type(bufferSize) == "number", "Arg #2 (bufferSize) must be a number.")
	assert(type(gamerHandle) == "userdata", "Arg #3 (gamerHandle) must be a userdata.")

	local result = native_call(0xEEE6EACBE8874FBA, clanDesc, bufferSize, gamerHandle)
	return result:__tointeger() ~= 0
end
natives.network.network_clan_player_get_desc = natives.NETWORK.NETWORK_CLAN_PLAYER_GET_DESC

--[[
bufferSize is 35 in the scripts.
]]
function natives.NETWORK.NETWORK_CLAN_IS_ROCKSTAR_CLAN(--[[Any*]] clanDesc, --[[int]] bufferSize) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_CLAN_IS_ROCKSTAR_CLAN' due to disabled trusted mode")

	assert(type(clanDesc) == "userdata", "Arg #1 (clanDesc) must be a userdata.")
	assert(type(bufferSize) == "number", "Arg #2 (bufferSize) must be a number.")

	local result = native_call(0x7543BB439F63792B, clanDesc, bufferSize)
	return result:__tointeger() ~= 0
end
natives.network.network_clan_is_rockstar_clan = natives.NETWORK.NETWORK_CLAN_IS_ROCKSTAR_CLAN

--[[
bufferSize is 35 in the scripts.
]]
function natives.NETWORK.NETWORK_CLAN_GET_UI_FORMATTED_TAG(--[[Any*]] clanDesc, --[[int]] bufferSize, --[[char*]] formattedTag) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_CLAN_GET_UI_FORMATTED_TAG' due to disabled trusted mode")

	assert(type(clanDesc) == "userdata", "Arg #1 (clanDesc) must be a userdata.")
	assert(type(bufferSize) == "number", "Arg #2 (bufferSize) must be a number.")
	assert(type(formattedTag) == "userdata", "Arg #3 (formattedTag) must be a userdata.")

	local result = native_call(0xF45352426FF3A4F0, clanDesc, bufferSize, formattedTag)
end
natives.network.network_clan_get_ui_formatted_tag = natives.NETWORK.NETWORK_CLAN_GET_UI_FORMATTED_TAG

function natives.NETWORK.NETWORK_CLAN_GET_LOCAL_MEMBERSHIPS_COUNT() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_CLAN_GET_LOCAL_MEMBERSHIPS_COUNT' due to disabled trusted mode")

	local result = native_call(0x1F471B79ACC90BEF)
	return result:__tointeger()
end
natives.network.network_clan_get_local_memberships_count = natives.NETWORK.NETWORK_CLAN_GET_LOCAL_MEMBERSHIPS_COUNT

function natives.NETWORK.NETWORK_CLAN_GET_MEMBERSHIP_DESC(--[[Any*]] memberDesc, --[[int]] p1) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_CLAN_GET_MEMBERSHIP_DESC' due to disabled trusted mode")

	assert(type(memberDesc) == "userdata", "Arg #1 (memberDesc) must be a userdata.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x48DE78AF2C8885B8, memberDesc, p1)
	return result:__tointeger() ~= 0
end
natives.network.network_clan_get_membership_desc = natives.NETWORK.NETWORK_CLAN_GET_MEMBERSHIP_DESC

function natives.NETWORK.NETWORK_CLAN_DOWNLOAD_MEMBERSHIP(--[[Any*]] gamerHandle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_CLAN_DOWNLOAD_MEMBERSHIP' due to disabled trusted mode")

	assert(type(gamerHandle) == "userdata", "Arg #1 (gamerHandle) must be a userdata.")

	local result = native_call(0xA989044E70010ABE, gamerHandle)
	return result:__tointeger() ~= 0
end
natives.network.network_clan_download_membership = natives.NETWORK.NETWORK_CLAN_DOWNLOAD_MEMBERSHIP

function natives.NETWORK.NETWORK_CLAN_DOWNLOAD_MEMBERSHIP_PENDING(--[[Any*]] p0) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_CLAN_DOWNLOAD_MEMBERSHIP_PENDING' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")

	local result = native_call(0x5B9E023DC6EBEDC0, p0)
	return result:__tointeger() ~= 0
end
natives.network.network_clan_download_membership_pending = natives.NETWORK.NETWORK_CLAN_DOWNLOAD_MEMBERSHIP_PENDING

function natives.NETWORK.NETWORK_CLAN_ANY_DOWNLOAD_MEMBERSHIP_PENDING() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_CLAN_ANY_DOWNLOAD_MEMBERSHIP_PENDING' due to disabled trusted mode")

	local result = native_call(0xB3F64A6A91432477)
	return result:__tointeger() ~= 0
end
natives.network.network_clan_any_download_membership_pending = natives.NETWORK.NETWORK_CLAN_ANY_DOWNLOAD_MEMBERSHIP_PENDING

function natives.NETWORK.NETWORK_CLAN_REMOTE_MEMBERSHIPS_ARE_IN_CACHE(--[[int*]] p0) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_CLAN_REMOTE_MEMBERSHIPS_ARE_IN_CACHE' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")

	local result = native_call(0xBB6E6FEE99D866B2, p0)
	return result:__tointeger() ~= 0
end
natives.network.network_clan_remote_memberships_are_in_cache = natives.NETWORK.NETWORK_CLAN_REMOTE_MEMBERSHIPS_ARE_IN_CACHE

function natives.NETWORK.NETWORK_CLAN_GET_MEMBERSHIP_COUNT(--[[int*]] p0) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_CLAN_GET_MEMBERSHIP_COUNT' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")

	local result = native_call(0xAAB11F6C4ADBC2C1, p0)
	return result:__tointeger()
end
natives.network.network_clan_get_membership_count = natives.NETWORK.NETWORK_CLAN_GET_MEMBERSHIP_COUNT

function natives.NETWORK.NETWORK_CLAN_GET_MEMBERSHIP_VALID(--[[int*]] p0, --[[Any]] p1) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_CLAN_GET_MEMBERSHIP_VALID' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x48A59CF88D43DF0E, p0, p1)
	return result:__tointeger() ~= 0
end
natives.network.network_clan_get_membership_valid = natives.NETWORK.NETWORK_CLAN_GET_MEMBERSHIP_VALID

function natives.NETWORK.NETWORK_CLAN_GET_MEMBERSHIP(--[[int*]] p0, --[[Any*]] clanMembership, --[[int]] p2) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_CLAN_GET_MEMBERSHIP' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")
	assert(type(clanMembership) == "userdata", "Arg #2 (clanMembership) must be a userdata.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0xC8BC2011F67B3411, p0, clanMembership, p2)
	return result:__tointeger() ~= 0
end
natives.network.network_clan_get_membership = natives.NETWORK.NETWORK_CLAN_GET_MEMBERSHIP

function natives.NETWORK.NETWORK_CLAN_JOIN(--[[int]] clanDesc) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_CLAN_JOIN' due to disabled trusted mode")

	assert(type(clanDesc) == "number", "Arg #1 (clanDesc) must be a number.")

	local result = native_call(0x9FAAA4F4FC71F87F, clanDesc)
	return result:__tointeger() ~= 0
end
natives.network.network_clan_join = natives.NETWORK.NETWORK_CLAN_JOIN

--[[
Only documented...

Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
]]
function natives.NETWORK.NETWORK_CLAN_CREWINFO_GET_STRING_VALUE(--[[const char*]] animDict, --[[const char*]] animName) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_CLAN_CREWINFO_GET_STRING_VALUE' due to disabled trusted mode")

	assert(type(animDict) == "string", "Arg #1 (animDict) must be a string.")
	assert(type(animName) == "string", "Arg #2 (animName) must be a string.")

	local result = native_call(0x729E3401F0430686, animDict, animName)
	return result:__tointeger() ~= 0
end
natives.network.network_clan_crewinfo_get_string_value = natives.NETWORK.NETWORK_CLAN_CREWINFO_GET_STRING_VALUE

function natives.NETWORK.NETWORK_CLAN_CREWINFO_GET_CREWRANKTITLE(--[[int]] p0, --[[const char*]] p1) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_CLAN_CREWINFO_GET_CREWRANKTITLE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "string", "Arg #2 (p1) must be a string.")

	local result = native_call(0x2B51EDBEFC301339, p0, p1)
	return result:__tointeger() ~= 0
end
natives.network.network_clan_crewinfo_get_crewranktitle = natives.NETWORK.NETWORK_CLAN_CREWINFO_GET_CREWRANKTITLE

function natives.NETWORK.NETWORK_CLAN_HAS_CREWINFO_METADATA_BEEN_RECEIVED() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_CLAN_HAS_CREWINFO_METADATA_BEEN_RECEIVED' due to disabled trusted mode")

	local result = native_call(0xC32EA7A2F6CA7557)
	return result:__tointeger() ~= 0
end
natives.network.network_clan_has_crewinfo_metadata_been_received = natives.NETWORK.NETWORK_CLAN_HAS_CREWINFO_METADATA_BEEN_RECEIVED

function natives.NETWORK.NETWORK_CLAN_GET_EMBLEM_TXD_NAME(--[[Any*]] netHandle, --[[char*]] txdName) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_CLAN_GET_EMBLEM_TXD_NAME' due to disabled trusted mode")

	assert(type(netHandle) == "userdata", "Arg #1 (netHandle) must be a userdata.")
	assert(type(txdName) == "userdata", "Arg #2 (txdName) must be a userdata.")

	local result = native_call(0x5835D9CD92E83184, netHandle, txdName)
	return result:__tointeger() ~= 0
end
natives.network.network_clan_get_emblem_txd_name = natives.NETWORK.NETWORK_CLAN_GET_EMBLEM_TXD_NAME

function natives.NETWORK.NETWORK_CLAN_REQUEST_EMBLEM(--[[Any]] p0) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_CLAN_REQUEST_EMBLEM' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x13518FF1C6B28938, p0)
	return result:__tointeger() ~= 0
end
natives.network.network_clan_request_emblem = natives.NETWORK.NETWORK_CLAN_REQUEST_EMBLEM

function natives.NETWORK.NETWORK_CLAN_IS_EMBLEM_READY(--[[Any]] p0, --[[Any*]] p1) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_CLAN_IS_EMBLEM_READY' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "userdata", "Arg #2 (p1) must be a userdata.")

	local result = native_call(0xA134777FF7F33331, p0, p1)
	return result:__tointeger() ~= 0
end
natives.network.network_clan_is_emblem_ready = natives.NETWORK.NETWORK_CLAN_IS_EMBLEM_READY

function natives.NETWORK.NETWORK_CLAN_RELEASE_EMBLEM(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_CLAN_RELEASE_EMBLEM' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x113E6E3E50E286B0, p0)
end
natives.network.network_clan_release_emblem = natives.NETWORK.NETWORK_CLAN_RELEASE_EMBLEM

function natives.NETWORK.NETWORK_GET_PRIMARY_CLAN_DATA_CLEAR() -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_PRIMARY_CLAN_DATA_CLEAR' due to disabled trusted mode")

	local result = native_call(0x9AA46BADAD0E27ED)
	return result:__tointeger()
end
natives.network.network_get_primary_clan_data_clear = natives.NETWORK.NETWORK_GET_PRIMARY_CLAN_DATA_CLEAR

function natives.NETWORK.NETWORK_GET_PRIMARY_CLAN_DATA_CANCEL() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_PRIMARY_CLAN_DATA_CANCEL' due to disabled trusted mode")

	local result = native_call(0x042E4B70B93E6054)
end
natives.network.network_get_primary_clan_data_cancel = natives.NETWORK.NETWORK_GET_PRIMARY_CLAN_DATA_CANCEL

function natives.NETWORK.NETWORK_GET_PRIMARY_CLAN_DATA_START(--[[Any*]] p0, --[[Any]] p1) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_PRIMARY_CLAN_DATA_START' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xCE86D8191B762107, p0, p1)
	return result:__tointeger() ~= 0
end
natives.network.network_get_primary_clan_data_start = natives.NETWORK.NETWORK_GET_PRIMARY_CLAN_DATA_START

function natives.NETWORK.NETWORK_GET_PRIMARY_CLAN_DATA_PENDING() -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_PRIMARY_CLAN_DATA_PENDING' due to disabled trusted mode")

	local result = native_call(0xB5074DB804E28CE7)
	return result:__tointeger()
end
natives.network.network_get_primary_clan_data_pending = natives.NETWORK.NETWORK_GET_PRIMARY_CLAN_DATA_PENDING

function natives.NETWORK.NETWORK_GET_PRIMARY_CLAN_DATA_SUCCESS() -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_PRIMARY_CLAN_DATA_SUCCESS' due to disabled trusted mode")

	local result = native_call(0x5B4F04F19376A0BA)
	return result:__tointeger()
end
natives.network.network_get_primary_clan_data_success = natives.NETWORK.NETWORK_GET_PRIMARY_CLAN_DATA_SUCCESS

function natives.NETWORK.NETWORK_GET_PRIMARY_CLAN_DATA_NEW(--[[Any*]] p0, --[[Any*]] p1) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_PRIMARY_CLAN_DATA_NEW' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")
	assert(type(p1) == "userdata", "Arg #2 (p1) must be a userdata.")

	local result = native_call(0xC080FF658B2E41DA, p0, p1)
	return result:__tointeger() ~= 0
end
natives.network.network_get_primary_clan_data_new = natives.NETWORK.NETWORK_GET_PRIMARY_CLAN_DATA_NEW

--[[
Whether or not another player is allowed to take control of the entity
]]
function natives.NETWORK.SET_NETWORK_ID_CAN_MIGRATE(--[[int]] netId, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.SET_NETWORK_ID_CAN_MIGRATE' due to disabled trusted mode")

	assert(type(netId) == "number", "Arg #1 (netId) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x299EEB23175895FC, netId, toggle)
end
natives.network.set_network_id_can_migrate = natives.NETWORK.SET_NETWORK_ID_CAN_MIGRATE

function natives.NETWORK.SET_NETWORK_ID_EXISTS_ON_ALL_MACHINES(--[[int]] netId, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.SET_NETWORK_ID_EXISTS_ON_ALL_MACHINES' due to disabled trusted mode")

	assert(type(netId) == "number", "Arg #1 (netId) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xE05E81A888FA63C8, netId, toggle)
end
natives.network.set_network_id_exists_on_all_machines = natives.NETWORK.SET_NETWORK_ID_EXISTS_ON_ALL_MACHINES

function natives.NETWORK.SET_NETWORK_ID_ALWAYS_EXISTS_FOR_PLAYER(--[[int]] netId, --[[Player]] player, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.SET_NETWORK_ID_ALWAYS_EXISTS_FOR_PLAYER' due to disabled trusted mode")

	assert(type(netId) == "number", "Arg #1 (netId) must be a number.")
	assert(type(player) == "number", "Arg #2 (player) must be a number.")
	assert(type(toggle) == "boolean", "Arg #3 (toggle) must be a boolean.")

	local result = native_call(0xA8A024587329F36A, netId, player, toggle)
end
natives.network.set_network_id_always_exists_for_player = natives.NETWORK.SET_NETWORK_ID_ALWAYS_EXISTS_FOR_PLAYER

--[[
"No Reassign" in CPhysicalScriptGameStateDataNode
]]
function natives.NETWORK.SET_NETWORK_ID_CAN_BE_REASSIGNED(--[[int]] netId, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.SET_NETWORK_ID_CAN_BE_REASSIGNED' due to disabled trusted mode")

	assert(type(netId) == "number", "Arg #1 (netId) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x9D724B400A7E8FFC, netId, toggle)
end
natives.network.set_network_id_can_be_reassigned = natives.NETWORK.SET_NETWORK_ID_CAN_BE_REASSIGNED

function natives.NETWORK.NETWORK_SET_ENTITY_CAN_BLEND(--[[Entity]] entity, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SET_ENTITY_CAN_BLEND' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xD830567D88A1E873, entity, toggle)
end
natives.network.network_set_entity_can_blend = natives.NETWORK.NETWORK_SET_ENTITY_CAN_BLEND

function natives.NETWORK.NETWORK_SET_OBJECT_CAN_BLEND_WHEN_FIXED(--[[Object]] object, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SET_OBJECT_CAN_BLEND_WHEN_FIXED' due to disabled trusted mode")

	assert(type(object) == "number", "Arg #1 (object) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x0379DAF89BA09AA5, object, toggle)
end
natives.network.network_set_object_can_blend_when_fixed = natives.NETWORK.NETWORK_SET_OBJECT_CAN_BLEND_WHEN_FIXED

--[[
if set to true other network players can't see it
if set to false other network player can see it
=========================================
^^ I attempted this by grabbing an object with GET_ENTITY_PLAYER_IS_FREE_AIMING_AT and setting this naive no matter the toggle he could still see it.

pc or last gen?

^^ last-gen
]]
function natives.NETWORK.NETWORK_SET_ENTITY_ONLY_EXISTS_FOR_PARTICIPANTS(--[[Entity]] entity, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SET_ENTITY_ONLY_EXISTS_FOR_PARTICIPANTS' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xF1CA12B18AEF5298, entity, toggle)
end
natives.network.network_set_entity_only_exists_for_participants = natives.NETWORK.NETWORK_SET_ENTITY_ONLY_EXISTS_FOR_PARTICIPANTS

function natives.NETWORK.SET_NETWORK_ID_VISIBLE_IN_CUTSCENE(--[[int]] netId, --[[BOOL]] p1, --[[BOOL]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.SET_NETWORK_ID_VISIBLE_IN_CUTSCENE' due to disabled trusted mode")

	assert(type(netId) == "number", "Arg #1 (netId) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")

	local result = native_call(0xA6928482543022B4, netId, p1, p2)
end
natives.network.set_network_id_visible_in_cutscene = natives.NETWORK.SET_NETWORK_ID_VISIBLE_IN_CUTSCENE

function natives.NETWORK.SET_NETWORK_ID_VISIBLE_IN_CUTSCENE_HACK(--[[int]] netId, --[[BOOL]] p1, --[[BOOL]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.SET_NETWORK_ID_VISIBLE_IN_CUTSCENE_HACK' due to disabled trusted mode")

	assert(type(netId) == "number", "Arg #1 (netId) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")

	local result = native_call(0x32EBD154CB6B8B99, netId, p1, p2)
end
natives.network.set_network_id_visible_in_cutscene_hack = natives.NETWORK.SET_NETWORK_ID_VISIBLE_IN_CUTSCENE_HACK

function natives.NETWORK.SET_NETWORK_ID_VISIBLE_IN_CUTSCENE_REMAIN_HACK(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.SET_NETWORK_ID_VISIBLE_IN_CUTSCENE_REMAIN_HACK' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x76B3F29D3F967692, p0, p1)
end
natives.network.set_network_id_visible_in_cutscene_remain_hack = natives.NETWORK.SET_NETWORK_ID_VISIBLE_IN_CUTSCENE_REMAIN_HACK

function natives.NETWORK.SET_NETWORK_CUTSCENE_ENTITIES(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.SET_NETWORK_CUTSCENE_ENTITIES' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0xAAA553E7DD28A457, toggle)
end
natives.network.set_network_cutscene_entities = natives.NETWORK.SET_NETWORK_CUTSCENE_ENTITIES

--[[
Getter for SET_NETWORK_CUTSCENE_ENTITIES.
]]
function natives.NETWORK.ARE_CUTSCENE_ENTITIES_NETWORKED() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.ARE_CUTSCENE_ENTITIES_NETWORKED' due to disabled trusted mode")

	local result = native_call(0x66D6A5E9C511214A)
	return result:__tointeger() ~= 0
end
natives.network.are_cutscene_entities_networked = natives.NETWORK.ARE_CUTSCENE_ENTITIES_NETWORKED

function natives.NETWORK.SET_NETWORK_ID_PASS_CONTROL_IN_TUTORIAL(--[[int]] netId, --[[BOOL]] state) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.SET_NETWORK_ID_PASS_CONTROL_IN_TUTORIAL' due to disabled trusted mode")

	assert(type(netId) == "number", "Arg #1 (netId) must be a number.")
	assert(type(state) == "boolean", "Arg #2 (state) must be a boolean.")

	local result = native_call(0x3FA36981311FA4FF, netId, state)
end
natives.network.set_network_id_pass_control_in_tutorial = natives.NETWORK.SET_NETWORK_ID_PASS_CONTROL_IN_TUTORIAL

function natives.NETWORK.IS_NETWORK_ID_OWNED_BY_PARTICIPANT(--[[int]] netId) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.IS_NETWORK_ID_OWNED_BY_PARTICIPANT' due to disabled trusted mode")

	assert(type(netId) == "number", "Arg #1 (netId) must be a number.")

	local result = native_call(0xA1607996431332DF, netId)
	return result:__tointeger() ~= 0
end
natives.network.is_network_id_owned_by_participant = natives.NETWORK.IS_NETWORK_ID_OWNED_BY_PARTICIPANT

function natives.NETWORK.SET_LOCAL_PLAYER_VISIBLE_IN_CUTSCENE(--[[BOOL]] p0, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.SET_LOCAL_PLAYER_VISIBLE_IN_CUTSCENE' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0xD1065D68947E7B6E, p0, p1)
end
natives.network.set_local_player_visible_in_cutscene = natives.NETWORK.SET_LOCAL_PLAYER_VISIBLE_IN_CUTSCENE

function natives.NETWORK.SET_LOCAL_PLAYER_INVISIBLE_LOCALLY(--[[BOOL]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.SET_LOCAL_PLAYER_INVISIBLE_LOCALLY' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0xE5F773C1A1D9D168, p0)
end
natives.network.set_local_player_invisible_locally = natives.NETWORK.SET_LOCAL_PLAYER_INVISIBLE_LOCALLY

function natives.NETWORK.SET_LOCAL_PLAYER_VISIBLE_LOCALLY(--[[BOOL]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.SET_LOCAL_PLAYER_VISIBLE_LOCALLY' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0x7619364C82D3BF14, p0)
end
natives.network.set_local_player_visible_locally = natives.NETWORK.SET_LOCAL_PLAYER_VISIBLE_LOCALLY

function natives.NETWORK.SET_PLAYER_INVISIBLE_LOCALLY(--[[Player]] player, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.SET_PLAYER_INVISIBLE_LOCALLY' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x12B37D54667DB0B8, player, toggle)
end
natives.network.set_player_invisible_locally = natives.NETWORK.SET_PLAYER_INVISIBLE_LOCALLY

function natives.NETWORK.SET_PLAYER_VISIBLE_LOCALLY(--[[Player]] player, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.SET_PLAYER_VISIBLE_LOCALLY' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xFAA10F1FAFB11AF2, player, toggle)
end
natives.network.set_player_visible_locally = natives.NETWORK.SET_PLAYER_VISIBLE_LOCALLY

--[[
Hardcoded to not work in SP.
]]
function natives.NETWORK.FADE_OUT_LOCAL_PLAYER(--[[BOOL]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.FADE_OUT_LOCAL_PLAYER' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0x416DBD4CD6ED8DD2, p0)
end
natives.network.fade_out_local_player = natives.NETWORK.FADE_OUT_LOCAL_PLAYER

--[[
normal - transition like when your coming out of LSC
slow - transition like when you walk into a mission
 
]]
function natives.NETWORK.NETWORK_FADE_OUT_ENTITY(--[[Entity]] entity, --[[BOOL]] normal, --[[BOOL]] slow) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_FADE_OUT_ENTITY' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(normal) == "boolean", "Arg #2 (normal) must be a boolean.")
	assert(type(slow) == "boolean", "Arg #3 (slow) must be a boolean.")

	local result = native_call(0xDE564951F95E09ED, entity, normal, slow)
end
natives.network.network_fade_out_entity = natives.NETWORK.NETWORK_FADE_OUT_ENTITY

--[[
state - 0 does 5 fades
state - 1 does 6 fades

p3: setting to 1 made vehicle fade in slower, probably "slow" as per NETWORK_FADE_OUT_ENTITY
]]
function natives.NETWORK.NETWORK_FADE_IN_ENTITY(--[[Entity]] entity, --[[BOOL]] state, --[[Any]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_FADE_IN_ENTITY' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(state) == "boolean", "Arg #2 (state) must be a boolean.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0x1F4ED342ACEFE62D, entity, state, p2)
end
natives.network.network_fade_in_entity = natives.NETWORK.NETWORK_FADE_IN_ENTITY

function natives.NETWORK.NETWORK_IS_PLAYER_FADING(--[[Player]] player) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IS_PLAYER_FADING' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0x631DC5DFF4B110E3, player)
	return result:__tointeger() ~= 0
end
natives.network.network_is_player_fading = natives.NETWORK.NETWORK_IS_PLAYER_FADING

function natives.NETWORK.NETWORK_IS_ENTITY_FADING(--[[Entity]] entity) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IS_ENTITY_FADING' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0x422F32CC7E56ABAD, entity)
	return result:__tointeger() ~= 0
end
natives.network.network_is_entity_fading = natives.NETWORK.NETWORK_IS_ENTITY_FADING

function natives.NETWORK.IS_PLAYER_IN_CUTSCENE(--[[Player]] player) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.IS_PLAYER_IN_CUTSCENE' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0xE73092F4157CD126, player)
	return result:__tointeger() ~= 0
end
natives.network.is_player_in_cutscene = natives.NETWORK.IS_PLAYER_IN_CUTSCENE

function natives.NETWORK.SET_ENTITY_VISIBLE_IN_CUTSCENE(--[[Any]] p0, --[[BOOL]] p1, --[[BOOL]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.SET_ENTITY_VISIBLE_IN_CUTSCENE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")

	local result = native_call(0xE0031D3C8F36AB82, p0, p1, p2)
end
natives.network.set_entity_visible_in_cutscene = natives.NETWORK.SET_ENTITY_VISIBLE_IN_CUTSCENE

--[[
Makes the provided entity visible for yourself for the current frame.
]]
function natives.NETWORK.SET_ENTITY_LOCALLY_INVISIBLE(--[[Entity]] entity) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.SET_ENTITY_LOCALLY_INVISIBLE' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0xE135A9FF3F5D05D8, entity)
end
natives.network.set_entity_locally_invisible = natives.NETWORK.SET_ENTITY_LOCALLY_INVISIBLE

function natives.NETWORK.SET_ENTITY_LOCALLY_VISIBLE(--[[Entity]] entity) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.SET_ENTITY_LOCALLY_VISIBLE' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0x241E289B5C059EDC, entity)
end
natives.network.set_entity_locally_visible = natives.NETWORK.SET_ENTITY_LOCALLY_VISIBLE

function natives.NETWORK.IS_DAMAGE_TRACKER_ACTIVE_ON_NETWORK_ID(--[[int]] netID) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.IS_DAMAGE_TRACKER_ACTIVE_ON_NETWORK_ID' due to disabled trusted mode")

	assert(type(netID) == "number", "Arg #1 (netID) must be a number.")

	local result = native_call(0x6E192E33AD436366, netID)
	return result:__tointeger() ~= 0
end
natives.network.is_damage_tracker_active_on_network_id = natives.NETWORK.IS_DAMAGE_TRACKER_ACTIVE_ON_NETWORK_ID

function natives.NETWORK.ACTIVATE_DAMAGE_TRACKER_ON_NETWORK_ID(--[[int]] netID, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.ACTIVATE_DAMAGE_TRACKER_ON_NETWORK_ID' due to disabled trusted mode")

	assert(type(netID) == "number", "Arg #1 (netID) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xD45B1FFCCD52FF19, netID, toggle)
end
natives.network.activate_damage_tracker_on_network_id = natives.NETWORK.ACTIVATE_DAMAGE_TRACKER_ON_NETWORK_ID

function natives.NETWORK.IS_DAMAGE_TRACKER_ACTIVE_ON_PLAYER(--[[Player]] player) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.IS_DAMAGE_TRACKER_ACTIVE_ON_PLAYER' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0xB2092A1EAA7FD45F, player)
	return result:__tointeger() ~= 0
end
natives.network.is_damage_tracker_active_on_player = natives.NETWORK.IS_DAMAGE_TRACKER_ACTIVE_ON_PLAYER

function natives.NETWORK.ACTIVATE_DAMAGE_TRACKER_ON_PLAYER(--[[Player]] player, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.ACTIVATE_DAMAGE_TRACKER_ON_PLAYER' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xBEC0816FF5ACBCDA, player, toggle)
end
natives.network.activate_damage_tracker_on_player = natives.NETWORK.ACTIVATE_DAMAGE_TRACKER_ON_PLAYER

function natives.NETWORK.IS_SPHERE_VISIBLE_TO_ANOTHER_MACHINE(--[[float]] p0, --[[float]] p1, --[[float]] p2, --[[float]] p3) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.IS_SPHERE_VISIBLE_TO_ANOTHER_MACHINE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0xD82CF8E64C8729D8, p0, p1, p2, p3)
	return result:__tointeger() ~= 0
end
natives.network.is_sphere_visible_to_another_machine = natives.NETWORK.IS_SPHERE_VISIBLE_TO_ANOTHER_MACHINE

function natives.NETWORK.IS_SPHERE_VISIBLE_TO_PLAYER(--[[Any]] p0, --[[float]] p1, --[[float]] p2, --[[float]] p3, --[[float]] p4) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.IS_SPHERE_VISIBLE_TO_PLAYER' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")

	local result = native_call(0xDC3A310219E5DA62, p0, p1, p2, p3, p4)
	return result:__tointeger() ~= 0
end
natives.network.is_sphere_visible_to_player = natives.NETWORK.IS_SPHERE_VISIBLE_TO_PLAYER

function natives.NETWORK.RESERVE_NETWORK_MISSION_OBJECTS(--[[int]] amount) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.RESERVE_NETWORK_MISSION_OBJECTS' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")

	local result = native_call(0x4E5C93BD0C32FBF8, amount)
end
natives.network.reserve_network_mission_objects = natives.NETWORK.RESERVE_NETWORK_MISSION_OBJECTS

function natives.NETWORK.RESERVE_NETWORK_MISSION_PEDS(--[[int]] amount) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.RESERVE_NETWORK_MISSION_PEDS' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")

	local result = native_call(0xB60FEBA45333D36F, amount)
end
natives.network.reserve_network_mission_peds = natives.NETWORK.RESERVE_NETWORK_MISSION_PEDS

function natives.NETWORK.RESERVE_NETWORK_MISSION_VEHICLES(--[[int]] amount) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.RESERVE_NETWORK_MISSION_VEHICLES' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")

	local result = native_call(0x76B02E21ED27A469, amount)
end
natives.network.reserve_network_mission_vehicles = natives.NETWORK.RESERVE_NETWORK_MISSION_VEHICLES

function natives.NETWORK.RESERVE_LOCAL_NETWORK_MISSION_OBJECTS(--[[int]] amount) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.RESERVE_LOCAL_NETWORK_MISSION_OBJECTS' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")

	local result = native_call(0x797F9C5E661D920E, amount)
end
natives.network.reserve_local_network_mission_objects = natives.NETWORK.RESERVE_LOCAL_NETWORK_MISSION_OBJECTS

function natives.NETWORK.RESERVE_LOCAL_NETWORK_MISSION_PEDS(--[[int]] amount) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.RESERVE_LOCAL_NETWORK_MISSION_PEDS' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")

	local result = native_call(0x2C8DF5D129595281, amount)
end
natives.network.reserve_local_network_mission_peds = natives.NETWORK.RESERVE_LOCAL_NETWORK_MISSION_PEDS

function natives.NETWORK.RESERVE_LOCAL_NETWORK_MISSION_VEHICLES(--[[int]] amount) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.RESERVE_LOCAL_NETWORK_MISSION_VEHICLES' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")

	local result = native_call(0x42613035157E4208, amount)
end
natives.network.reserve_local_network_mission_vehicles = natives.NETWORK.RESERVE_LOCAL_NETWORK_MISSION_VEHICLES

function natives.NETWORK.CAN_REGISTER_MISSION_OBJECTS(--[[int]] amount) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.CAN_REGISTER_MISSION_OBJECTS' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")

	local result = native_call(0x800DD4721A8B008B, amount)
	return result:__tointeger() ~= 0
end
natives.network.can_register_mission_objects = natives.NETWORK.CAN_REGISTER_MISSION_OBJECTS

function natives.NETWORK.CAN_REGISTER_MISSION_PEDS(--[[int]] amount) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.CAN_REGISTER_MISSION_PEDS' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")

	local result = native_call(0xBCBF4FEF9FA5D781, amount)
	return result:__tointeger() ~= 0
end
natives.network.can_register_mission_peds = natives.NETWORK.CAN_REGISTER_MISSION_PEDS

function natives.NETWORK.CAN_REGISTER_MISSION_VEHICLES(--[[int]] amount) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.CAN_REGISTER_MISSION_VEHICLES' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")

	local result = native_call(0x7277F1F2E085EE74, amount)
	return result:__tointeger() ~= 0
end
natives.network.can_register_mission_vehicles = natives.NETWORK.CAN_REGISTER_MISSION_VEHICLES

function natives.NETWORK.CAN_REGISTER_MISSION_PICKUPS(--[[int]] amount) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.CAN_REGISTER_MISSION_PICKUPS' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")

	local result = native_call(0x0A49D1CB6E34AF72, amount)
	return result:__tointeger() ~= 0
end
natives.network.can_register_mission_pickups = natives.NETWORK.CAN_REGISTER_MISSION_PICKUPS

function natives.NETWORK.CAN_REGISTER_MISSION_DOORS(--[[Any]] p0) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.CAN_REGISTER_MISSION_DOORS' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xE16AA70CE9BEEDC3, p0)
	return result:__tointeger()
end
natives.network.can_register_mission_doors = natives.NETWORK.CAN_REGISTER_MISSION_DOORS

function natives.NETWORK.CAN_REGISTER_MISSION_ENTITIES(--[[int]] ped_amt, --[[int]] vehicle_amt, --[[int]] object_amt, --[[int]] pickup_amt) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.CAN_REGISTER_MISSION_ENTITIES' due to disabled trusted mode")

	assert(type(ped_amt) == "number", "Arg #1 (ped_amt) must be a number.")
	assert(type(vehicle_amt) == "number", "Arg #2 (vehicle_amt) must be a number.")
	assert(type(object_amt) == "number", "Arg #3 (object_amt) must be a number.")
	assert(type(pickup_amt) == "number", "Arg #4 (pickup_amt) must be a number.")

	local result = native_call(0x69778E7564BADE6D, ped_amt, vehicle_amt, object_amt, pickup_amt)
	return result:__tointeger() ~= 0
end
natives.network.can_register_mission_entities = natives.NETWORK.CAN_REGISTER_MISSION_ENTITIES

--[[
p0 appears to be for MP
]]
function natives.NETWORK.GET_NUM_RESERVED_MISSION_OBJECTS(--[[BOOL]] p0, --[[Any]] p1) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.GET_NUM_RESERVED_MISSION_OBJECTS' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xAA81B5F10BC43AC2, p0, p1)
	return result:__tointeger()
end
natives.network.get_num_reserved_mission_objects = natives.NETWORK.GET_NUM_RESERVED_MISSION_OBJECTS

--[[
p0 appears to be for MP
]]
function natives.NETWORK.GET_NUM_RESERVED_MISSION_PEDS(--[[BOOL]] p0, --[[Any]] p1) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.GET_NUM_RESERVED_MISSION_PEDS' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x1F13D5AE5CB17E17, p0, p1)
	return result:__tointeger()
end
natives.network.get_num_reserved_mission_peds = natives.NETWORK.GET_NUM_RESERVED_MISSION_PEDS

--[[
p0 appears to be for MP
]]
function natives.NETWORK.GET_NUM_RESERVED_MISSION_VEHICLES(--[[BOOL]] p0, --[[Any]] p1) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.GET_NUM_RESERVED_MISSION_VEHICLES' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xCF3A965906452031, p0, p1)
	return result:__tointeger()
end
natives.network.get_num_reserved_mission_vehicles = natives.NETWORK.GET_NUM_RESERVED_MISSION_VEHICLES

function natives.NETWORK.GET_NUM_CREATED_MISSION_OBJECTS(--[[BOOL]] p0) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.GET_NUM_CREATED_MISSION_OBJECTS' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0x12B6281B6C6706C0, p0)
	return result:__tointeger()
end
natives.network.get_num_created_mission_objects = natives.NETWORK.GET_NUM_CREATED_MISSION_OBJECTS

function natives.NETWORK.GET_NUM_CREATED_MISSION_PEDS(--[[BOOL]] p0) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.GET_NUM_CREATED_MISSION_PEDS' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0xCB215C4B56A7FAE7, p0)
	return result:__tointeger()
end
natives.network.get_num_created_mission_peds = natives.NETWORK.GET_NUM_CREATED_MISSION_PEDS

function natives.NETWORK.GET_NUM_CREATED_MISSION_VEHICLES(--[[BOOL]] p0) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.GET_NUM_CREATED_MISSION_VEHICLES' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0x0CD9AB83489430EA, p0)
	return result:__tointeger()
end
natives.network.get_num_created_mission_vehicles = natives.NETWORK.GET_NUM_CREATED_MISSION_VEHICLES

function natives.NETWORK.GET_RESERVED_MISSION_ENTITIES_IN_AREA(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3, --[[Any]] p4, --[[Any]] p5, --[[Any]] p6) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.GET_RESERVED_MISSION_ENTITIES_IN_AREA' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")
	assert(type(p6) == "number", "Arg #7 (p6) must be a number.")

	local result = native_call(0xE42D626EEC94E5D9, p0, p1, p2, p3, p4, p5, p6)
end
natives.network.get_reserved_mission_entities_in_area = natives.NETWORK.GET_RESERVED_MISSION_ENTITIES_IN_AREA

function natives.NETWORK.GET_MAX_NUM_NETWORK_OBJECTS() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.GET_MAX_NUM_NETWORK_OBJECTS' due to disabled trusted mode")

	local result = native_call(0xC7BE335216B5EC7C)
	return result:__tointeger()
end
natives.network.get_max_num_network_objects = natives.NETWORK.GET_MAX_NUM_NETWORK_OBJECTS

function natives.NETWORK.GET_MAX_NUM_NETWORK_PEDS() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.GET_MAX_NUM_NETWORK_PEDS' due to disabled trusted mode")

	local result = native_call(0x0C1F7D49C39D2289)
	return result:__tointeger()
end
natives.network.get_max_num_network_peds = natives.NETWORK.GET_MAX_NUM_NETWORK_PEDS

function natives.NETWORK.GET_MAX_NUM_NETWORK_VEHICLES() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.GET_MAX_NUM_NETWORK_VEHICLES' due to disabled trusted mode")

	local result = native_call(0x0AFCE529F69B21FF)
	return result:__tointeger()
end
natives.network.get_max_num_network_vehicles = natives.NETWORK.GET_MAX_NUM_NETWORK_VEHICLES

function natives.NETWORK.GET_MAX_NUM_NETWORK_PICKUPS() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.GET_MAX_NUM_NETWORK_PICKUPS' due to disabled trusted mode")

	local result = native_call(0xA72835064DD63E4C)
	return result:__tointeger()
end
natives.network.get_max_num_network_pickups = natives.NETWORK.GET_MAX_NUM_NETWORK_PICKUPS

function natives.NETWORK.NETWORK_SET_OBJECT_SCOPE_DISTANCE(--[[Object]] object, --[[float]] range) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SET_OBJECT_SCOPE_DISTANCE' due to disabled trusted mode")

	assert(type(object) == "number", "Arg #1 (object) must be a number.")
	assert(type(range) == "number", "Arg #2 (range) must be a number.")

	local result = native_call(0xBA7F0B77D80A4EB7, object, range)
end
natives.network.network_set_object_scope_distance = natives.NETWORK.NETWORK_SET_OBJECT_SCOPE_DISTANCE

function natives.NETWORK.NETWORK_ALLOW_CLONING_WHILE_IN_TUTORIAL(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_ALLOW_CLONING_WHILE_IN_TUTORIAL' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x0F1A4B45B7693B95, p0, p1)
end
natives.network.network_allow_cloning_while_in_tutorial = natives.NETWORK.NETWORK_ALLOW_CLONING_WHILE_IN_TUTORIAL

--[[
A value between 1.0 and 5.0

_NETWORK_SET_TASK_CUTSCENE_PROXIMITY_SCALE?
]]
function natives.NETWORK.NETWORK_SET_TASK_CUTSCENE_INSCOPE_MULTIPLER(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SET_TASK_CUTSCENE_INSCOPE_MULTIPLER' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xC6FCEE21C6FCEE21, p0)
end
natives.network.network_set_task_cutscene_inscope_multipler = natives.NETWORK.NETWORK_SET_TASK_CUTSCENE_INSCOPE_MULTIPLER

function natives.NETWORK.GET_NETWORK_TIME() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.GET_NETWORK_TIME' due to disabled trusted mode")

	local result = native_call(0x7A5487FE9FAA6B48)
	return result:__tointeger()
end
natives.network.get_network_time = natives.NETWORK.GET_NETWORK_TIME

--[[
Returns the same value as GET_NETWORK_TIME in freemode, but as opposed to `GET_NETWORK_TIME` it always gets the most recent time, instead of once per tick.
Could be used for benchmarking since it can return times in ticks.
]]
function natives.NETWORK.GET_NETWORK_TIME_ACCURATE() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.GET_NETWORK_TIME_ACCURATE' due to disabled trusted mode")

	local result = native_call(0x89023FBBF9200E9F)
	return result:__tointeger()
end
natives.network.get_network_time_accurate = natives.NETWORK.GET_NETWORK_TIME_ACCURATE

function natives.NETWORK.HAS_NETWORK_TIME_STARTED() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.HAS_NETWORK_TIME_STARTED' due to disabled trusted mode")

	local result = native_call(0x46718ACEEDEAFC84)
	return result:__tointeger() ~= 0
end
natives.network.has_network_time_started = natives.NETWORK.HAS_NETWORK_TIME_STARTED

--[[
Adds the first argument to the second.
]]
function natives.NETWORK.GET_TIME_OFFSET(--[[int]] timeA, --[[int]] timeB) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.GET_TIME_OFFSET' due to disabled trusted mode")

	assert(type(timeA) == "number", "Arg #1 (timeA) must be a number.")
	assert(type(timeB) == "number", "Arg #2 (timeB) must be a number.")

	local result = native_call(0x017008CCDAD48503, timeA, timeB)
	return result:__tointeger()
end
natives.network.get_time_offset = natives.NETWORK.GET_TIME_OFFSET

--[[
Subtracts the second argument from the first, then returns whether the result is negative.
]]
function natives.NETWORK.IS_TIME_LESS_THAN(--[[int]] timeA, --[[int]] timeB) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.IS_TIME_LESS_THAN' due to disabled trusted mode")

	assert(type(timeA) == "number", "Arg #1 (timeA) must be a number.")
	assert(type(timeB) == "number", "Arg #2 (timeB) must be a number.")

	local result = native_call(0xCB2CF5148012C8D0, timeA, timeB)
	return result:__tointeger() ~= 0
end
natives.network.is_time_less_than = natives.NETWORK.IS_TIME_LESS_THAN

--[[
Subtracts the first argument from the second, then returns whether the result is negative.
]]
function natives.NETWORK.IS_TIME_MORE_THAN(--[[int]] timeA, --[[int]] timeB) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.IS_TIME_MORE_THAN' due to disabled trusted mode")

	assert(type(timeA) == "number", "Arg #1 (timeA) must be a number.")
	assert(type(timeB) == "number", "Arg #2 (timeB) must be a number.")

	local result = native_call(0xDE350F8651E4346C, timeA, timeB)
	return result:__tointeger() ~= 0
end
natives.network.is_time_more_than = natives.NETWORK.IS_TIME_MORE_THAN

--[[
Returns true if the two times are equal; otherwise returns false.
]]
function natives.NETWORK.IS_TIME_EQUAL_TO(--[[int]] timeA, --[[int]] timeB) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.IS_TIME_EQUAL_TO' due to disabled trusted mode")

	assert(type(timeA) == "number", "Arg #1 (timeA) must be a number.")
	assert(type(timeB) == "number", "Arg #2 (timeB) must be a number.")

	local result = native_call(0xF5BC95857BD6D512, timeA, timeB)
	return result:__tointeger() ~= 0
end
natives.network.is_time_equal_to = natives.NETWORK.IS_TIME_EQUAL_TO

--[[
Subtracts the second argument from the first.
]]
function natives.NETWORK.GET_TIME_DIFFERENCE(--[[int]] timeA, --[[int]] timeB) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.GET_TIME_DIFFERENCE' due to disabled trusted mode")

	assert(type(timeA) == "number", "Arg #1 (timeA) must be a number.")
	assert(type(timeB) == "number", "Arg #2 (timeB) must be a number.")

	local result = native_call(0xA2C6FC031D46FFF0, timeA, timeB)
	return result:__tointeger()
end
natives.network.get_time_difference = natives.NETWORK.GET_TIME_DIFFERENCE

function natives.NETWORK.GET_TIME_AS_STRING(--[[int]] time) -- Returns const char*
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.GET_TIME_AS_STRING' due to disabled trusted mode")

	assert(type(time) == "number", "Arg #1 (time) must be a number.")

	local result = native_call(0x9E23B1777A927DAD, time)
	return result:__tostring(true)
end
natives.network.get_time_as_string = natives.NETWORK.GET_TIME_AS_STRING

--[[
Same as GET_CLOUD_TIME_AS_INT but returns the value as a hex string (%I64X).
]]
function natives.NETWORK.GET_CLOUD_TIME_AS_STRING() -- Returns const char*
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.GET_CLOUD_TIME_AS_STRING' due to disabled trusted mode")

	local result = native_call(0xF12E6CD06C73D69E)
	return result:__tostring(true)
end
natives.network.get_cloud_time_as_string = natives.NETWORK.GET_CLOUD_TIME_AS_STRING

--[[
Returns POSIX timestamp, an int representing the cloud time.
]]
function natives.NETWORK.GET_CLOUD_TIME_AS_INT() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.GET_CLOUD_TIME_AS_INT' due to disabled trusted mode")

	local result = native_call(0x9A73240B49945C76)
	return result:__tointeger()
end
natives.network.get_cloud_time_as_int = natives.NETWORK.GET_CLOUD_TIME_AS_INT

--[[
Takes the specified time and writes it to the structure specified in the second argument.

struct date_time
{
    int year;
    int PADDING1;
    int month;
    int PADDING2;
    int day;
    int PADDING3;
    int hour;
    int PADDING4;
    int minute;
    int PADDING5;
    int second;
    int PADDING6;
};
]]
function natives.NETWORK.CONVERT_POSIX_TIME(--[[int]] posixTime, --[[Any*]] timeStructure) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.CONVERT_POSIX_TIME' due to disabled trusted mode")

	assert(type(posixTime) == "number", "Arg #1 (posixTime) must be a number.")
	assert(type(timeStructure) == "userdata", "Arg #2 (timeStructure) must be a userdata.")

	local result = native_call(0xAC97AF97FA68E5D5, posixTime, timeStructure)
end
natives.network.convert_posix_time = natives.NETWORK.CONVERT_POSIX_TIME

function natives.NETWORK.NETWORK_SET_IN_SPECTATOR_MODE(--[[BOOL]] toggle, --[[Ped]] playerPed) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SET_IN_SPECTATOR_MODE' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")
	assert(type(playerPed) == "number", "Arg #2 (playerPed) must be a number.")

	local result = native_call(0x423DE3854BB50894, toggle, playerPed)
end
natives.network.network_set_in_spectator_mode = natives.NETWORK.NETWORK_SET_IN_SPECTATOR_MODE

function natives.NETWORK.NETWORK_SET_IN_SPECTATOR_MODE_EXTENDED(--[[BOOL]] toggle, --[[Ped]] playerPed, --[[BOOL]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SET_IN_SPECTATOR_MODE_EXTENDED' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")
	assert(type(playerPed) == "number", "Arg #2 (playerPed) must be a number.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")

	local result = native_call(0x419594E137637120, toggle, playerPed, p2)
end
natives.network.network_set_in_spectator_mode_extended = natives.NETWORK.NETWORK_SET_IN_SPECTATOR_MODE_EXTENDED

function natives.NETWORK.NETWORK_SET_IN_FREE_CAM_MODE(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SET_IN_FREE_CAM_MODE' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0xFC18DB55AE19E046, toggle)
end
natives.network.network_set_in_free_cam_mode = natives.NETWORK.NETWORK_SET_IN_FREE_CAM_MODE

function natives.NETWORK.NETWORK_SET_ANTAGONISTIC_TO_PLAYER(--[[BOOL]] toggle, --[[Player]] player) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SET_ANTAGONISTIC_TO_PLAYER' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")
	assert(type(player) == "number", "Arg #2 (player) must be a number.")

	local result = native_call(0x5C707A667DF8B9FA, toggle, player)
end
natives.network.network_set_antagonistic_to_player = natives.NETWORK.NETWORK_SET_ANTAGONISTIC_TO_PLAYER

function natives.NETWORK.NETWORK_IS_IN_SPECTATOR_MODE() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IS_IN_SPECTATOR_MODE' due to disabled trusted mode")

	local result = native_call(0x048746E388762E11)
	return result:__tointeger() ~= 0
end
natives.network.network_is_in_spectator_mode = natives.NETWORK.NETWORK_IS_IN_SPECTATOR_MODE

function natives.NETWORK.NETWORK_SET_IN_MP_CUTSCENE(--[[BOOL]] p0, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SET_IN_MP_CUTSCENE' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0x9CA5DE655269FEC4, p0, p1)
end
natives.network.network_set_in_mp_cutscene = natives.NETWORK.NETWORK_SET_IN_MP_CUTSCENE

function natives.NETWORK.NETWORK_IS_IN_MP_CUTSCENE() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IS_IN_MP_CUTSCENE' due to disabled trusted mode")

	local result = native_call(0x6CC27C9FA2040220)
	return result:__tointeger() ~= 0
end
natives.network.network_is_in_mp_cutscene = natives.NETWORK.NETWORK_IS_IN_MP_CUTSCENE

function natives.NETWORK.NETWORK_IS_PLAYER_IN_MP_CUTSCENE(--[[Player]] player) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IS_PLAYER_IN_MP_CUTSCENE' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0x63F9EE203C3619F2, player)
	return result:__tointeger() ~= 0
end
natives.network.network_is_player_in_mp_cutscene = natives.NETWORK.NETWORK_IS_PLAYER_IN_MP_CUTSCENE

function natives.NETWORK.NETWORK_HIDE_PROJECTILE_IN_CUTSCENE() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_HIDE_PROJECTILE_IN_CUTSCENE' due to disabled trusted mode")

	local result = native_call(0xFAC18E7356BD3210)
end
natives.network.network_hide_projectile_in_cutscene = natives.NETWORK.NETWORK_HIDE_PROJECTILE_IN_CUTSCENE

function natives.NETWORK.SET_NETWORK_VEHICLE_RESPOT_TIMER(--[[int]] netId, --[[int]] time, --[[Any]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.SET_NETWORK_VEHICLE_RESPOT_TIMER' due to disabled trusted mode")

	assert(type(netId) == "number", "Arg #1 (netId) must be a number.")
	assert(type(time) == "number", "Arg #2 (time) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0xEC51713AB6EC36E8, netId, time, p2, p3)
end
natives.network.set_network_vehicle_respot_timer = natives.NETWORK.SET_NETWORK_VEHICLE_RESPOT_TIMER

function natives.NETWORK.SET_NETWORK_VEHICLE_AS_GHOST(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.SET_NETWORK_VEHICLE_AS_GHOST' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x6274C4712850841E, vehicle, toggle)
end
natives.network.set_network_vehicle_as_ghost = natives.NETWORK.SET_NETWORK_VEHICLE_AS_GHOST

--[[
rage::netBlenderLinInterp::GetPositionMaxForUpdateLevel
]]
function natives.NETWORK.SET_NETWORK_VEHICLE_MAX_POSITION_DELTA_MULTIPLIER(--[[Vehicle]] vehicle, --[[float]] multiplier) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.SET_NETWORK_VEHICLE_MAX_POSITION_DELTA_MULTIPLIER' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(multiplier) == "number", "Arg #2 (multiplier) must be a number.")

	local result = native_call(0xA2A707979FE754DC, vehicle, multiplier)
end
natives.network.set_network_vehicle_max_position_delta_multiplier = natives.NETWORK.SET_NETWORK_VEHICLE_MAX_POSITION_DELTA_MULTIPLIER

--[[
Enables a periodic ShapeTest within the NetBlender and invokes rage::netBlenderLinInterp::GoStraightToTarget (or some functional wrapper).
]]
function natives.NETWORK.SET_NETWORK_ENABLE_HIGH_SPEED_EDGE_FALL_DETECTION(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.SET_NETWORK_ENABLE_HIGH_SPEED_EDGE_FALL_DETECTION' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x838DA0936A24ED4D, vehicle, toggle)
end
natives.network.set_network_enable_high_speed_edge_fall_detection = natives.NETWORK.SET_NETWORK_ENABLE_HIGH_SPEED_EDGE_FALL_DETECTION

function natives.NETWORK.SET_LOCAL_PLAYER_AS_GHOST(--[[BOOL]] toggle, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.SET_LOCAL_PLAYER_AS_GHOST' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0x5FFE9B4144F9712F, toggle, p1)
end
natives.network.set_local_player_as_ghost = natives.NETWORK.SET_LOCAL_PLAYER_AS_GHOST

function natives.NETWORK.IS_ENTITY_A_GHOST(--[[Entity]] entity) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.IS_ENTITY_A_GHOST' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0x21D04D7BC538C146, entity)
	return result:__tointeger() ~= 0
end
natives.network.is_entity_a_ghost = natives.NETWORK.IS_ENTITY_A_GHOST

function natives.NETWORK.SET_NON_PARTICIPANTS_OF_THIS_SCRIPT_AS_GHOSTS(--[[BOOL]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.SET_NON_PARTICIPANTS_OF_THIS_SCRIPT_AS_GHOSTS' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0x13F1FCB111B820B0, p0)
end
natives.network.set_non_participants_of_this_script_as_ghosts = natives.NETWORK.SET_NON_PARTICIPANTS_OF_THIS_SCRIPT_AS_GHOSTS

--[[
Enables ghosting between specific players
]]
function natives.NETWORK.SET_REMOTE_PLAYER_AS_GHOST(--[[Player]] player, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.SET_REMOTE_PLAYER_AS_GHOST' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0xA7C511FA1C5BDA38, player, p1)
end
natives.network.set_remote_player_as_ghost = natives.NETWORK.SET_REMOTE_PLAYER_AS_GHOST

--[[
Must be a value between 1 and 254
]]
function natives.NETWORK.SET_GHOST_ALPHA(--[[int]] alpha) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.SET_GHOST_ALPHA' due to disabled trusted mode")

	assert(type(alpha) == "number", "Arg #1 (alpha) must be a number.")

	local result = native_call(0x658500AE6D723A7E, alpha)
end
natives.network.set_ghost_alpha = natives.NETWORK.SET_GHOST_ALPHA

--[[
Resets the entity ghost alpha to the default value (128)
]]
function natives.NETWORK.RESET_GHOST_ALPHA() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.RESET_GHOST_ALPHA' due to disabled trusted mode")

	local result = native_call(0x17330EBF2F2124A8)
end
natives.network.reset_ghost_alpha = natives.NETWORK.RESET_GHOST_ALPHA

function natives.NETWORK.SET_ENTITY_GHOSTED_FOR_GHOST_PLAYERS(--[[Entity]] entity, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.SET_ENTITY_GHOSTED_FOR_GHOST_PLAYERS' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0x4BA166079D658ED4, entity, p1)
end
natives.network.set_entity_ghosted_for_ghost_players = natives.NETWORK.SET_ENTITY_GHOSTED_FOR_GHOST_PLAYERS

function natives.NETWORK.SET_INVERT_GHOSTING(--[[BOOL]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.SET_INVERT_GHOSTING' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0xD7B6C73CAD419BCF, p0)
end
natives.network.set_invert_ghosting = natives.NETWORK.SET_INVERT_GHOSTING

function natives.NETWORK.IS_ENTITY_IN_GHOST_COLLISION(--[[Entity]] entity) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.IS_ENTITY_IN_GHOST_COLLISION' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0x7EF7649B64D7FF10, entity)
	return result:__tointeger() ~= 0
end
natives.network.is_entity_in_ghost_collision = natives.NETWORK.IS_ENTITY_IN_GHOST_COLLISION

function natives.NETWORK.USE_PLAYER_COLOUR_INSTEAD_OF_TEAM_COLOUR(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.USE_PLAYER_COLOUR_INSTEAD_OF_TEAM_COLOUR' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x77758139EC9B66C7, toggle)
end
natives.network.use_player_colour_instead_of_team_colour = natives.NETWORK.USE_PLAYER_COLOUR_INSTEAD_OF_TEAM_COLOUR

function natives.NETWORK.NETWORK_CREATE_SYNCHRONISED_SCENE(--[[float]] x, --[[float]] y, --[[float]] z, --[[float]] xRot, --[[float]] yRot, --[[float]] zRot, --[[int]] rotationOrder, --[[BOOL]] useOcclusionPortal, --[[BOOL]] looped, --[[float]] p9, --[[float]] animTime, --[[float]] p11) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_CREATE_SYNCHRONISED_SCENE' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(xRot) == "number", "Arg #4 (xRot) must be a number.")
	assert(type(yRot) == "number", "Arg #5 (yRot) must be a number.")
	assert(type(zRot) == "number", "Arg #6 (zRot) must be a number.")
	assert(type(rotationOrder) == "number", "Arg #7 (rotationOrder) must be a number.")
	assert(type(useOcclusionPortal) == "boolean", "Arg #8 (useOcclusionPortal) must be a boolean.")
	assert(type(looped) == "boolean", "Arg #9 (looped) must be a boolean.")
	assert(type(p9) == "number", "Arg #10 (p9) must be a number.")
	assert(type(animTime) == "number", "Arg #11 (animTime) must be a number.")
	assert(type(p11) == "number", "Arg #12 (p11) must be a number.")

	local result = native_call(0x7CD6BC4C2BBDD526, x, y, z, xRot, yRot, zRot, rotationOrder, useOcclusionPortal, looped, p9, animTime, p11)
	return result:__tointeger()
end
natives.network.network_create_synchronised_scene = natives.NETWORK.NETWORK_CREATE_SYNCHRONISED_SCENE

function natives.NETWORK.NETWORK_ADD_PED_TO_SYNCHRONISED_SCENE(--[[Ped]] ped, --[[int]] netScene, --[[const char*]] animDict, --[[const char*]] animnName, --[[float]] speed, --[[float]] speedMultiplier, --[[int]] duration, --[[int]] flag, --[[float]] playbackRate, --[[Any]] p9) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_ADD_PED_TO_SYNCHRONISED_SCENE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(netScene) == "number", "Arg #2 (netScene) must be a number.")
	assert(type(animDict) == "string", "Arg #3 (animDict) must be a string.")
	assert(type(animnName) == "string", "Arg #4 (animnName) must be a string.")
	assert(type(speed) == "number", "Arg #5 (speed) must be a number.")
	assert(type(speedMultiplier) == "number", "Arg #6 (speedMultiplier) must be a number.")
	assert(type(duration) == "number", "Arg #7 (duration) must be a number.")
	assert(type(flag) == "number", "Arg #8 (flag) must be a number.")
	assert(type(playbackRate) == "number", "Arg #9 (playbackRate) must be a number.")
	assert(type(p9) == "number", "Arg #10 (p9) must be a number.")

	local result = native_call(0x742A637471BCECD9, ped, netScene, animDict, animnName, speed, speedMultiplier, duration, flag, playbackRate, p9)
end
natives.network.network_add_ped_to_synchronised_scene = natives.NETWORK.NETWORK_ADD_PED_TO_SYNCHRONISED_SCENE

function natives.NETWORK.NETWORK_ADD_PED_TO_SYNCHRONISED_SCENE_WITH_IK(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3, --[[Any]] p4, --[[Any]] p5, --[[Any]] p6, --[[Any]] p7, --[[Any]] p8, --[[Any]] p9) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_ADD_PED_TO_SYNCHRONISED_SCENE_WITH_IK' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")
	assert(type(p6) == "number", "Arg #7 (p6) must be a number.")
	assert(type(p7) == "number", "Arg #8 (p7) must be a number.")
	assert(type(p8) == "number", "Arg #9 (p8) must be a number.")
	assert(type(p9) == "number", "Arg #10 (p9) must be a number.")

	local result = native_call(0xA5EAFE473E45C442, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9)
end
natives.network.network_add_ped_to_synchronised_scene_with_ik = natives.NETWORK.NETWORK_ADD_PED_TO_SYNCHRONISED_SCENE_WITH_IK

function natives.NETWORK.NETWORK_ADD_ENTITY_TO_SYNCHRONISED_SCENE(--[[Entity]] entity, --[[int]] netScene, --[[const char*]] animDict, --[[const char*]] animName, --[[float]] speed, --[[float]] speedMulitiplier, --[[int]] flag) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_ADD_ENTITY_TO_SYNCHRONISED_SCENE' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(netScene) == "number", "Arg #2 (netScene) must be a number.")
	assert(type(animDict) == "string", "Arg #3 (animDict) must be a string.")
	assert(type(animName) == "string", "Arg #4 (animName) must be a string.")
	assert(type(speed) == "number", "Arg #5 (speed) must be a number.")
	assert(type(speedMulitiplier) == "number", "Arg #6 (speedMulitiplier) must be a number.")
	assert(type(flag) == "number", "Arg #7 (flag) must be a number.")

	local result = native_call(0xF2404D68CBC855FA, entity, netScene, animDict, animName, speed, speedMulitiplier, flag)
end
natives.network.network_add_entity_to_synchronised_scene = natives.NETWORK.NETWORK_ADD_ENTITY_TO_SYNCHRONISED_SCENE

--[[
Similar structure as NETWORK_ADD_ENTITY_TO_SYNCHRONISED_SCENE but it includes this time a hash.
In casino_slots it is used one time in a synced scene involving a ped and the slot machine?
]]
function natives.NETWORK.NETWORK_ADD_MAP_ENTITY_TO_SYNCHRONISED_SCENE(--[[int]] netScene, --[[Hash]] modelHash, --[[float]] x, --[[float]] y, --[[float]] z, --[[float]] p5, --[[const char*]] p6, --[[float]] p7, --[[float]] p8, --[[int]] flags) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_ADD_MAP_ENTITY_TO_SYNCHRONISED_SCENE' due to disabled trusted mode")

	assert(type(netScene) == "number", "Arg #1 (netScene) must be a number.")
	assert(type(modelHash) == "number", "Arg #2 (modelHash) must be a number.")
	assert(type(x) == "number", "Arg #3 (x) must be a number.")
	assert(type(y) == "number", "Arg #4 (y) must be a number.")
	assert(type(z) == "number", "Arg #5 (z) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")
	assert(type(p6) == "string", "Arg #7 (p6) must be a string.")
	assert(type(p7) == "number", "Arg #8 (p7) must be a number.")
	assert(type(p8) == "number", "Arg #9 (p8) must be a number.")
	assert(type(flags) == "number", "Arg #10 (flags) must be a number.")

	local result = native_call(0x45F35C0EDC33B03B, netScene, modelHash, x, y, z, p5, p6, p7, p8, flags)
end
natives.network.network_add_map_entity_to_synchronised_scene = natives.NETWORK.NETWORK_ADD_MAP_ENTITY_TO_SYNCHRONISED_SCENE

function natives.NETWORK.NETWORK_ADD_SYNCHRONISED_SCENE_CAMERA(--[[int]] netScene, --[[const char*]] animDict, --[[const char*]] animName) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_ADD_SYNCHRONISED_SCENE_CAMERA' due to disabled trusted mode")

	assert(type(netScene) == "number", "Arg #1 (netScene) must be a number.")
	assert(type(animDict) == "string", "Arg #2 (animDict) must be a string.")
	assert(type(animName) == "string", "Arg #3 (animName) must be a string.")

	local result = native_call(0xCF8BD3B0BD6D42D7, netScene, animDict, animName)
end
natives.network.network_add_synchronised_scene_camera = natives.NETWORK.NETWORK_ADD_SYNCHRONISED_SCENE_CAMERA

function natives.NETWORK.NETWORK_ATTACH_SYNCHRONISED_SCENE_TO_ENTITY(--[[int]] netScene, --[[Entity]] entity, --[[int]] bone) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_ATTACH_SYNCHRONISED_SCENE_TO_ENTITY' due to disabled trusted mode")

	assert(type(netScene) == "number", "Arg #1 (netScene) must be a number.")
	assert(type(entity) == "number", "Arg #2 (entity) must be a number.")
	assert(type(bone) == "number", "Arg #3 (bone) must be a number.")

	local result = native_call(0x478DCBD2A98B705A, netScene, entity, bone)
end
natives.network.network_attach_synchronised_scene_to_entity = natives.NETWORK.NETWORK_ATTACH_SYNCHRONISED_SCENE_TO_ENTITY

function natives.NETWORK.NETWORK_START_SYNCHRONISED_SCENE(--[[int]] netScene) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_START_SYNCHRONISED_SCENE' due to disabled trusted mode")

	assert(type(netScene) == "number", "Arg #1 (netScene) must be a number.")

	local result = native_call(0x9A1B3FCDB36C8697, netScene)
end
natives.network.network_start_synchronised_scene = natives.NETWORK.NETWORK_START_SYNCHRONISED_SCENE

function natives.NETWORK.NETWORK_STOP_SYNCHRONISED_SCENE(--[[int]] netScene) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_STOP_SYNCHRONISED_SCENE' due to disabled trusted mode")

	assert(type(netScene) == "number", "Arg #1 (netScene) must be a number.")

	local result = native_call(0xC254481A4574CB2F, netScene)
end
natives.network.network_stop_synchronised_scene = natives.NETWORK.NETWORK_STOP_SYNCHRONISED_SCENE

function natives.NETWORK.NETWORK_GET_LOCAL_SCENE_FROM_NETWORK_ID(--[[int]] netId) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_LOCAL_SCENE_FROM_NETWORK_ID' due to disabled trusted mode")

	assert(type(netId) == "number", "Arg #1 (netId) must be a number.")

	local result = native_call(0x02C40BF885C567B6, netId)
	return result:__tointeger()
end
natives.network.network_get_local_scene_from_network_id = natives.NETWORK.NETWORK_GET_LOCAL_SCENE_FROM_NETWORK_ID

function natives.NETWORK.NETWORK_FORCE_LOCAL_USE_OF_SYNCED_SCENE_CAMERA(--[[int]] netScene) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_FORCE_LOCAL_USE_OF_SYNCED_SCENE_CAMERA' due to disabled trusted mode")

	assert(type(netScene) == "number", "Arg #1 (netScene) must be a number.")

	local result = native_call(0xC9B43A33D09CADA7, netScene)
end
natives.network.network_force_local_use_of_synced_scene_camera = natives.NETWORK.NETWORK_FORCE_LOCAL_USE_OF_SYNCED_SCENE_CAMERA

function natives.NETWORK.NETWORK_ALLOW_REMOTE_SYNCED_SCENE_LOCAL_PLAYER_REQUESTS(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_ALLOW_REMOTE_SYNCED_SCENE_LOCAL_PLAYER_REQUESTS' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x144DA052257AE7D8, p0)
end
natives.network.network_allow_remote_synced_scene_local_player_requests = natives.NETWORK.NETWORK_ALLOW_REMOTE_SYNCED_SCENE_LOCAL_PLAYER_REQUESTS

--[[
p0 is always 0. p1 is pointing to a global.
]]
function natives.NETWORK.NETWORK_FIND_LARGEST_BUNCH_OF_PLAYERS(--[[int]] p0, --[[Any]] p1) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_FIND_LARGEST_BUNCH_OF_PLAYERS' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xFB1F9381E80FA13F, p0, p1)
	return result:__tointeger()
end
natives.network.network_find_largest_bunch_of_players = natives.NETWORK.NETWORK_FIND_LARGEST_BUNCH_OF_PLAYERS

--[[
One of the first things it does is get the players ped.
Then it calls a function that is used in some tasks and ped based functions.
p5, p6, p7 is another coordinate (or zero), often related to `GET_BLIP_COORDS, in the decompiled scripts.
]]
function natives.NETWORK.NETWORK_START_RESPAWN_SEARCH_FOR_PLAYER(--[[Player]] player, --[[float]] x, --[[float]] y, --[[float]] z, --[[float]] radius, --[[float]] p5, --[[float]] p6, --[[float]] p7, --[[int]] flags) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_START_RESPAWN_SEARCH_FOR_PLAYER' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")
	assert(type(radius) == "number", "Arg #5 (radius) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")
	assert(type(p6) == "number", "Arg #7 (p6) must be a number.")
	assert(type(p7) == "number", "Arg #8 (p7) must be a number.")
	assert(type(flags) == "number", "Arg #9 (flags) must be a number.")

	local result = native_call(0x5A6FFA2433E2F14C, player, x, y, z, radius, p5, p6, p7, flags)
	return result:__tointeger() ~= 0
end
natives.network.network_start_respawn_search_for_player = natives.NETWORK.NETWORK_START_RESPAWN_SEARCH_FOR_PLAYER

--[[
p8, p9, p10 is another coordinate, or zero, often related to `GET_BLIP_COORDS in the decompiled scripts.
]]
function natives.NETWORK.NETWORK_START_RESPAWN_SEARCH_IN_ANGLED_AREA_FOR_PLAYER(--[[Player]] player, --[[float]] x1, --[[float]] y1, --[[float]] z1, --[[float]] x2, --[[float]] y2, --[[float]] z2, --[[float]] width, --[[float]] p8, --[[float]] p9, --[[float]] p10, --[[int]] flags) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_START_RESPAWN_SEARCH_IN_ANGLED_AREA_FOR_PLAYER' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(x1) == "number", "Arg #2 (x1) must be a number.")
	assert(type(y1) == "number", "Arg #3 (y1) must be a number.")
	assert(type(z1) == "number", "Arg #4 (z1) must be a number.")
	assert(type(x2) == "number", "Arg #5 (x2) must be a number.")
	assert(type(y2) == "number", "Arg #6 (y2) must be a number.")
	assert(type(z2) == "number", "Arg #7 (z2) must be a number.")
	assert(type(width) == "number", "Arg #8 (width) must be a number.")
	assert(type(p8) == "number", "Arg #9 (p8) must be a number.")
	assert(type(p9) == "number", "Arg #10 (p9) must be a number.")
	assert(type(p10) == "number", "Arg #11 (p10) must be a number.")
	assert(type(flags) == "number", "Arg #12 (flags) must be a number.")

	local result = native_call(0x4BA92A18502BCA61, player, x1, y1, z1, x2, y2, z2, width, p8, p9, p10, flags)
	return result:__tointeger() ~= 0
end
natives.network.network_start_respawn_search_in_angled_area_for_player = natives.NETWORK.NETWORK_START_RESPAWN_SEARCH_IN_ANGLED_AREA_FOR_PLAYER

function natives.NETWORK.NETWORK_QUERY_RESPAWN_RESULTS(--[[Any*]] p0) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_QUERY_RESPAWN_RESULTS' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")

	local result = native_call(0x3C891A251567DFCE, p0)
	return result:__tointeger()
end
natives.network.network_query_respawn_results = natives.NETWORK.NETWORK_QUERY_RESPAWN_RESULTS

function natives.NETWORK.NETWORK_CANCEL_RESPAWN_SEARCH() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_CANCEL_RESPAWN_SEARCH' due to disabled trusted mode")

	local result = native_call(0xFB8F2A6F3DF08CBE)
end
natives.network.network_cancel_respawn_search = natives.NETWORK.NETWORK_CANCEL_RESPAWN_SEARCH

--[[
Based on scripts such as in freemode.c how they call their vars vVar and fVar the 2nd and 3rd param it a Vector3 and Float, but the first is based on get_random_int_in_range..
]]
function natives.NETWORK.NETWORK_GET_RESPAWN_RESULT(--[[int]] randomInt, --[[Vector3*]] coordinates, --[[float*]] heading) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_RESPAWN_RESULT' due to disabled trusted mode")

	assert(type(randomInt) == "number", "Arg #1 (randomInt) must be a number.")
	assert(type(coordinates) == "userdata", "Arg #2 (coordinates) must be a userdata.")
	assert(type(heading) == "userdata", "Arg #3 (heading) must be a userdata.")

	local result = native_call(0x371EA43692861CF1, randomInt, coordinates, heading)
end
natives.network.network_get_respawn_result = natives.NETWORK.NETWORK_GET_RESPAWN_RESULT

function natives.NETWORK.NETWORK_GET_RESPAWN_RESULT_FLAGS(--[[int]] p0) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_RESPAWN_RESULT_FLAGS' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x6C34F1208B8923FD, p0)
	return result:__tointeger()
end
natives.network.network_get_respawn_result_flags = natives.NETWORK.NETWORK_GET_RESPAWN_RESULT_FLAGS

--[[
*
]]
function natives.NETWORK.NETWORK_START_SOLO_TUTORIAL_SESSION() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_START_SOLO_TUTORIAL_SESSION' due to disabled trusted mode")

	local result = native_call(0x17E0198B3882C2CB)
end
natives.network.network_start_solo_tutorial_session = natives.NETWORK.NETWORK_START_SOLO_TUTORIAL_SESSION

--[[
teamId must be < 3, instanceId must be < 64
]]
function natives.NETWORK.NETWORK_ALLOW_GANG_TO_JOIN_TUTORIAL_SESSION(--[[int]] teamId, --[[int]] instanceId) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_ALLOW_GANG_TO_JOIN_TUTORIAL_SESSION' due to disabled trusted mode")

	assert(type(teamId) == "number", "Arg #1 (teamId) must be a number.")
	assert(type(instanceId) == "number", "Arg #2 (instanceId) must be a number.")

	local result = native_call(0xFB680D403909DC70, teamId, instanceId)
end
natives.network.network_allow_gang_to_join_tutorial_session = natives.NETWORK.NETWORK_ALLOW_GANG_TO_JOIN_TUTORIAL_SESSION

function natives.NETWORK.NETWORK_END_TUTORIAL_SESSION() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_END_TUTORIAL_SESSION' due to disabled trusted mode")

	local result = native_call(0xD0AFAFF5A51D72F7)
end
natives.network.network_end_tutorial_session = natives.NETWORK.NETWORK_END_TUTORIAL_SESSION

function natives.NETWORK.NETWORK_IS_IN_TUTORIAL_SESSION() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IS_IN_TUTORIAL_SESSION' due to disabled trusted mode")

	local result = native_call(0xADA24309FE08DACF)
	return result:__tointeger() ~= 0
end
natives.network.network_is_in_tutorial_session = natives.NETWORK.NETWORK_IS_IN_TUTORIAL_SESSION

function natives.NETWORK.NETWORK_WAITING_POP_CLEAR_TUTORIAL_SESSION() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_WAITING_POP_CLEAR_TUTORIAL_SESSION' due to disabled trusted mode")

	local result = native_call(0xB37E4E6A2388CA7B)
	return result:__tointeger() ~= 0
end
natives.network.network_waiting_pop_clear_tutorial_session = natives.NETWORK.NETWORK_WAITING_POP_CLEAR_TUTORIAL_SESSION

function natives.NETWORK.NETWORK_IS_TUTORIAL_SESSION_CHANGE_PENDING() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IS_TUTORIAL_SESSION_CHANGE_PENDING' due to disabled trusted mode")

	local result = native_call(0x35F0B98A8387274D)
	return result:__tointeger() ~= 0
end
natives.network.network_is_tutorial_session_change_pending = natives.NETWORK.NETWORK_IS_TUTORIAL_SESSION_CHANGE_PENDING

function natives.NETWORK.NETWORK_GET_PLAYER_TUTORIAL_SESSION_INSTANCE(--[[Player]] player) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_PLAYER_TUTORIAL_SESSION_INSTANCE' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0x3B39236746714134, player)
	return result:__tointeger()
end
natives.network.network_get_player_tutorial_session_instance = natives.NETWORK.NETWORK_GET_PLAYER_TUTORIAL_SESSION_INSTANCE

function natives.NETWORK.NETWORK_ARE_PLAYERS_IN_SAME_TUTORIAL_SESSION(--[[Player]] player, --[[int]] index) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_ARE_PLAYERS_IN_SAME_TUTORIAL_SESSION' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(index) == "number", "Arg #2 (index) must be a number.")

	local result = native_call(0x9DE986FC9A87C474, player, index)
	return result:__tointeger() ~= 0
end
natives.network.network_are_players_in_same_tutorial_session = natives.NETWORK.NETWORK_ARE_PLAYERS_IN_SAME_TUTORIAL_SESSION

function natives.NETWORK.NETWORK_BLOCK_PROXY_MIGRATION_BETWEEN_TUTORIAL_SESSIONS(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_BLOCK_PROXY_MIGRATION_BETWEEN_TUTORIAL_SESSIONS' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xFEA7A352DDB34D52, p0)
end
natives.network.network_block_proxy_migration_between_tutorial_sessions = natives.NETWORK.NETWORK_BLOCK_PROXY_MIGRATION_BETWEEN_TUTORIAL_SESSIONS

function natives.NETWORK.NETWORK_CONCEAL_PLAYER(--[[Player]] player, --[[BOOL]] toggle, --[[BOOL]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_CONCEAL_PLAYER' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")

	local result = native_call(0xBBDF066252829606, player, toggle, p2)
end
natives.network.network_conceal_player = natives.NETWORK.NETWORK_CONCEAL_PLAYER

function natives.NETWORK.NETWORK_IS_PLAYER_CONCEALED(--[[Player]] player) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IS_PLAYER_CONCEALED' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0x919B3C98ED8292F9, player)
	return result:__tointeger() ~= 0
end
natives.network.network_is_player_concealed = natives.NETWORK.NETWORK_IS_PLAYER_CONCEALED

function natives.NETWORK.NETWORK_CONCEAL_ENTITY(--[[Entity]] entity, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_CONCEAL_ENTITY' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x1632BE0AC1E62876, entity, toggle)
end
natives.network.network_conceal_entity = natives.NETWORK.NETWORK_CONCEAL_ENTITY

--[[
Note: This only works for vehicles, which appears to be a bug (since the setter _does_ work for every entity type and the name is 99% correct).
]]
function natives.NETWORK.NETWORK_IS_ENTITY_CONCEALED(--[[Entity]] entity) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IS_ENTITY_CONCEALED' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0x71302EC70689052A, entity)
	return result:__tointeger() ~= 0
end
natives.network.network_is_entity_concealed = natives.NETWORK.NETWORK_IS_ENTITY_CONCEALED

--[[
Works in Singleplayer too.
Passing wrong data (e.g. hours above 23) will cause the game to crash.
]]
function natives.NETWORK.NETWORK_OVERRIDE_CLOCK_TIME(--[[int]] hours, --[[int]] minutes, --[[int]] seconds) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_OVERRIDE_CLOCK_TIME' due to disabled trusted mode")

	assert(type(hours) == "number", "Arg #1 (hours) must be a number.")
	assert(type(minutes) == "number", "Arg #2 (minutes) must be a number.")
	assert(type(seconds) == "number", "Arg #3 (seconds) must be a number.")

	local result = native_call(0xE679E3E06E363892, hours, minutes, seconds)
end
natives.network.network_override_clock_time = natives.NETWORK.NETWORK_OVERRIDE_CLOCK_TIME

function natives.NETWORK.NETWORK_OVERRIDE_CLOCK_RATE(--[[int]] ms) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_OVERRIDE_CLOCK_RATE' due to disabled trusted mode")

	assert(type(ms) == "number", "Arg #1 (ms) must be a number.")

	local result = native_call(0x42BF1D2E723B6D7E, ms)
end
natives.network.network_override_clock_rate = natives.NETWORK.NETWORK_OVERRIDE_CLOCK_RATE

function natives.NETWORK.NETWORK_CLEAR_CLOCK_TIME_OVERRIDE() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_CLEAR_CLOCK_TIME_OVERRIDE' due to disabled trusted mode")

	local result = native_call(0xD972DF67326F966E)
end
natives.network.network_clear_clock_time_override = natives.NETWORK.NETWORK_CLEAR_CLOCK_TIME_OVERRIDE

function natives.NETWORK.NETWORK_IS_CLOCK_TIME_OVERRIDDEN() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IS_CLOCK_TIME_OVERRIDDEN' due to disabled trusted mode")

	local result = native_call(0xD7C95D322FF57522)
	return result:__tointeger() ~= 0
end
natives.network.network_is_clock_time_overridden = natives.NETWORK.NETWORK_IS_CLOCK_TIME_OVERRIDDEN

function natives.NETWORK.NETWORK_ADD_ENTITY_AREA(--[[float]] p0, --[[float]] p1, --[[float]] p2, --[[float]] p3, --[[float]] p4, --[[float]] p5) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_ADD_ENTITY_AREA' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")

	local result = native_call(0x494C8FB299290269, p0, p1, p2, p3, p4, p5)
	return result:__tointeger()
end
natives.network.network_add_entity_area = natives.NETWORK.NETWORK_ADD_ENTITY_AREA

--[[
To remove, see: NETWORK_REMOVE_ENTITY_AREA
See IS_POINT_IN_ANGLED_AREA for the definition of an angled area.
]]
function natives.NETWORK.NETWORK_ADD_ENTITY_ANGLED_AREA(--[[float]] x1, --[[float]] y1, --[[float]] z1, --[[float]] x2, --[[float]] y2, --[[float]] z2, --[[float]] width) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_ADD_ENTITY_ANGLED_AREA' due to disabled trusted mode")

	assert(type(x1) == "number", "Arg #1 (x1) must be a number.")
	assert(type(y1) == "number", "Arg #2 (y1) must be a number.")
	assert(type(z1) == "number", "Arg #3 (z1) must be a number.")
	assert(type(x2) == "number", "Arg #4 (x2) must be a number.")
	assert(type(y2) == "number", "Arg #5 (y2) must be a number.")
	assert(type(z2) == "number", "Arg #6 (z2) must be a number.")
	assert(type(width) == "number", "Arg #7 (width) must be a number.")

	local result = native_call(0x376C6375BA60293A, x1, y1, z1, x2, y2, z2, width)
	return result:__tointeger()
end
natives.network.network_add_entity_angled_area = natives.NETWORK.NETWORK_ADD_ENTITY_ANGLED_AREA

function natives.NETWORK.NETWORK_ADD_CLIENT_ENTITY_AREA(--[[float]] p0, --[[float]] p1, --[[float]] p2, --[[float]] p3, --[[float]] p4, --[[float]] p5) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_ADD_CLIENT_ENTITY_AREA' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")

	local result = native_call(0x25B99872D588A101, p0, p1, p2, p3, p4, p5)
	return result:__tointeger()
end
natives.network.network_add_client_entity_area = natives.NETWORK.NETWORK_ADD_CLIENT_ENTITY_AREA

function natives.NETWORK.NETWORK_ADD_CLIENT_ENTITY_ANGLED_AREA(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3, --[[Any]] p4, --[[Any]] p5, --[[Any]] p6) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_ADD_CLIENT_ENTITY_ANGLED_AREA' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")
	assert(type(p6) == "number", "Arg #7 (p6) must be a number.")

	local result = native_call(0x2B1C623823DB0D9D, p0, p1, p2, p3, p4, p5, p6)
	return result:__tointeger()
end
natives.network.network_add_client_entity_angled_area = natives.NETWORK.NETWORK_ADD_CLIENT_ENTITY_ANGLED_AREA

function natives.NETWORK.NETWORK_REMOVE_ENTITY_AREA(--[[Any]] p0) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_REMOVE_ENTITY_AREA' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x93CF869BAA0C4874, p0)
	return result:__tointeger() ~= 0
end
natives.network.network_remove_entity_area = natives.NETWORK.NETWORK_REMOVE_ENTITY_AREA

function natives.NETWORK.NETWORK_ENTITY_AREA_DOES_EXIST(--[[int]] areaHandle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_ENTITY_AREA_DOES_EXIST' due to disabled trusted mode")

	assert(type(areaHandle) == "number", "Arg #1 (areaHandle) must be a number.")

	local result = native_call(0xE64A3CA08DFA37A9, areaHandle)
	return result:__tointeger() ~= 0
end
natives.network.network_entity_area_does_exist = natives.NETWORK.NETWORK_ENTITY_AREA_DOES_EXIST

function natives.NETWORK.NETWORK_ENTITY_AREA_HAVE_ALL_REPLIED(--[[int]] areaHandle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_ENTITY_AREA_HAVE_ALL_REPLIED' due to disabled trusted mode")

	assert(type(areaHandle) == "number", "Arg #1 (areaHandle) must be a number.")

	local result = native_call(0x4DF7CFFF471A7FB1, areaHandle)
	return result:__tointeger() ~= 0
end
natives.network.network_entity_area_have_all_replied = natives.NETWORK.NETWORK_ENTITY_AREA_HAVE_ALL_REPLIED

function natives.NETWORK.NETWORK_ENTITY_AREA_IS_OCCUPIED(--[[int]] areaHandle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_ENTITY_AREA_IS_OCCUPIED' due to disabled trusted mode")

	assert(type(areaHandle) == "number", "Arg #1 (areaHandle) must be a number.")

	local result = native_call(0x4A2D4E8BF4265B0F, areaHandle)
	return result:__tointeger() ~= 0
end
natives.network.network_entity_area_is_occupied = natives.NETWORK.NETWORK_ENTITY_AREA_IS_OCCUPIED

function natives.NETWORK.NETWORK_USE_HIGH_PRECISION_BLENDING(--[[int]] netID, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_USE_HIGH_PRECISION_BLENDING' due to disabled trusted mode")

	assert(type(netID) == "number", "Arg #1 (netID) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x2B1813ABA29016C5, netID, toggle)
end
natives.network.network_use_high_precision_blending = natives.NETWORK.NETWORK_USE_HIGH_PRECISION_BLENDING

function natives.NETWORK.NETWORK_SET_CUSTOM_ARENA_BALL_PARAMS(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SET_CUSTOM_ARENA_BALL_PARAMS' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xA6FCECCF4721D679, p0)
end
natives.network.network_set_custom_arena_ball_params = natives.NETWORK.NETWORK_SET_CUSTOM_ARENA_BALL_PARAMS

function natives.NETWORK.NETWORK_ENTITY_USE_HIGH_PRECISION_ROTATION(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_ENTITY_USE_HIGH_PRECISION_ROTATION' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x95BAF97C82464629, p0, p1)
end
natives.network.network_entity_use_high_precision_rotation = natives.NETWORK.NETWORK_ENTITY_USE_HIGH_PRECISION_ROTATION

function natives.NETWORK.NETWORK_REQUEST_CLOUD_BACKGROUND_SCRIPTS() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_REQUEST_CLOUD_BACKGROUND_SCRIPTS' due to disabled trusted mode")

	local result = native_call(0x924426BFFD82E915)
	return result:__tointeger() ~= 0
end
natives.network.network_request_cloud_background_scripts = natives.NETWORK.NETWORK_REQUEST_CLOUD_BACKGROUND_SCRIPTS

function natives.NETWORK.NETWORK_IS_CLOUD_BACKGROUND_SCRIPT_REQUEST_PENDING() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IS_CLOUD_BACKGROUND_SCRIPT_REQUEST_PENDING' due to disabled trusted mode")

	local result = native_call(0x8132C0EB8B2B3293)
	return result:__tointeger() ~= 0
end
natives.network.network_is_cloud_background_script_request_pending = natives.NETWORK.NETWORK_IS_CLOUD_BACKGROUND_SCRIPT_REQUEST_PENDING

function natives.NETWORK.NETWORK_REQUEST_CLOUD_TUNABLES() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_REQUEST_CLOUD_TUNABLES' due to disabled trusted mode")

	local result = native_call(0x42FB3B532D526E6C)
end
natives.network.network_request_cloud_tunables = natives.NETWORK.NETWORK_REQUEST_CLOUD_TUNABLES

function natives.NETWORK.NETWORK_IS_TUNABLE_CLOUD_REQUEST_PENDING() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IS_TUNABLE_CLOUD_REQUEST_PENDING' due to disabled trusted mode")

	local result = native_call(0x0467C11ED88B7D28)
	return result:__tointeger() ~= 0
end
natives.network.network_is_tunable_cloud_request_pending = natives.NETWORK.NETWORK_IS_TUNABLE_CLOUD_REQUEST_PENDING

--[[
Actually returns the version (TUNABLE_VERSION)
]]
function natives.NETWORK.NETWORK_GET_TUNABLE_CLOUD_CRC() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_TUNABLE_CLOUD_CRC' due to disabled trusted mode")

	local result = native_call(0x10BD227A753B0D84)
	return result:__tointeger()
end
natives.network.network_get_tunable_cloud_crc = natives.NETWORK.NETWORK_GET_TUNABLE_CLOUD_CRC

function natives.NETWORK.NETWORK_DOES_TUNABLE_EXIST(--[[const char*]] tunableContext, --[[const char*]] tunableName) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_DOES_TUNABLE_EXIST' due to disabled trusted mode")

	assert(type(tunableContext) == "string", "Arg #1 (tunableContext) must be a string.")
	assert(type(tunableName) == "string", "Arg #2 (tunableName) must be a string.")

	local result = native_call(0x85E5F8B9B898B20A, tunableContext, tunableName)
	return result:__tointeger() ~= 0
end
natives.network.network_does_tunable_exist = natives.NETWORK.NETWORK_DOES_TUNABLE_EXIST

function natives.NETWORK.NETWORK_ACCESS_TUNABLE_INT(--[[const char*]] tunableContext, --[[const char*]] tunableName, --[[int*]] value) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_ACCESS_TUNABLE_INT' due to disabled trusted mode")

	assert(type(tunableContext) == "string", "Arg #1 (tunableContext) must be a string.")
	assert(type(tunableName) == "string", "Arg #2 (tunableName) must be a string.")
	assert(type(value) == "userdata", "Arg #3 (value) must be a userdata.")

	local result = native_call(0x8BE1146DFD5D4468, tunableContext, tunableName, value)
	return result:__tointeger() ~= 0
end
natives.network.network_access_tunable_int = natives.NETWORK.NETWORK_ACCESS_TUNABLE_INT

function natives.NETWORK.NETWORK_ACCESS_TUNABLE_FLOAT(--[[const char*]] tunableContext, --[[const char*]] tunableName, --[[float*]] value) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_ACCESS_TUNABLE_FLOAT' due to disabled trusted mode")

	assert(type(tunableContext) == "string", "Arg #1 (tunableContext) must be a string.")
	assert(type(tunableName) == "string", "Arg #2 (tunableName) must be a string.")
	assert(type(value) == "userdata", "Arg #3 (value) must be a userdata.")

	local result = native_call(0xE5608CA7BC163A5F, tunableContext, tunableName, value)
	return result:__tointeger() ~= 0
end
natives.network.network_access_tunable_float = natives.NETWORK.NETWORK_ACCESS_TUNABLE_FLOAT

function natives.NETWORK.NETWORK_ACCESS_TUNABLE_BOOL(--[[const char*]] tunableContext, --[[const char*]] tunableName) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_ACCESS_TUNABLE_BOOL' due to disabled trusted mode")

	assert(type(tunableContext) == "string", "Arg #1 (tunableContext) must be a string.")
	assert(type(tunableName) == "string", "Arg #2 (tunableName) must be a string.")

	local result = native_call(0xAA6A47A573ABB75A, tunableContext, tunableName)
	return result:__tointeger() ~= 0
end
natives.network.network_access_tunable_bool = natives.NETWORK.NETWORK_ACCESS_TUNABLE_BOOL

function natives.NETWORK.NETWORK_DOES_TUNABLE_EXIST_HASH(--[[Hash]] tunableContext, --[[Hash]] tunableName) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_DOES_TUNABLE_EXIST_HASH' due to disabled trusted mode")

	assert(type(tunableContext) == "number", "Arg #1 (tunableContext) must be a number.")
	assert(type(tunableName) == "number", "Arg #2 (tunableName) must be a number.")

	local result = native_call(0xE4E53E1419D81127, tunableContext, tunableName)
	return result:__tointeger() ~= 0
end
natives.network.network_does_tunable_exist_hash = natives.NETWORK.NETWORK_DOES_TUNABLE_EXIST_HASH

function natives.NETWORK.NETWORK_ACCESS_TUNABLE_MODIFICATION_DETECTION_CLEAR() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_ACCESS_TUNABLE_MODIFICATION_DETECTION_CLEAR' due to disabled trusted mode")

	local result = native_call(0xFAFC23AEE23868DB)
	return result:__tointeger() ~= 0
end
natives.network.network_access_tunable_modification_detection_clear = natives.NETWORK.NETWORK_ACCESS_TUNABLE_MODIFICATION_DETECTION_CLEAR

function natives.NETWORK.NETWORK_ACCESS_TUNABLE_INT_HASH(--[[Hash]] tunableContext, --[[Hash]] tunableName, --[[int*]] value) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_ACCESS_TUNABLE_INT_HASH' due to disabled trusted mode")

	assert(type(tunableContext) == "number", "Arg #1 (tunableContext) must be a number.")
	assert(type(tunableName) == "number", "Arg #2 (tunableName) must be a number.")
	assert(type(value) == "userdata", "Arg #3 (value) must be a userdata.")

	local result = native_call(0x40FCE03E50E8DBE8, tunableContext, tunableName, value)
	return result:__tointeger() ~= 0
end
natives.network.network_access_tunable_int_hash = natives.NETWORK.NETWORK_ACCESS_TUNABLE_INT_HASH

function natives.NETWORK.NETWORK_ACCESS_TUNABLE_INT_MODIFICATION_DETECTION_REGISTRATION_HASH(--[[Hash]] contextHash, --[[Hash]] nameHash, --[[int*]] value) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_ACCESS_TUNABLE_INT_MODIFICATION_DETECTION_REGISTRATION_HASH' due to disabled trusted mode")

	assert(type(contextHash) == "number", "Arg #1 (contextHash) must be a number.")
	assert(type(nameHash) == "number", "Arg #2 (nameHash) must be a number.")
	assert(type(value) == "userdata", "Arg #3 (value) must be a userdata.")

	local result = native_call(0x3A8B55FDA4C8DDEF, contextHash, nameHash, value)
	return result:__tointeger() ~= 0
end
natives.network.network_access_tunable_int_modification_detection_registration_hash = natives.NETWORK.NETWORK_ACCESS_TUNABLE_INT_MODIFICATION_DETECTION_REGISTRATION_HASH

function natives.NETWORK.NETWORK_ACCESS_TUNABLE_FLOAT_HASH(--[[Hash]] tunableContext, --[[Hash]] tunableName, --[[float*]] value) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_ACCESS_TUNABLE_FLOAT_HASH' due to disabled trusted mode")

	assert(type(tunableContext) == "number", "Arg #1 (tunableContext) must be a number.")
	assert(type(tunableName) == "number", "Arg #2 (tunableName) must be a number.")
	assert(type(value) == "userdata", "Arg #3 (value) must be a userdata.")

	local result = native_call(0x972BC203BBC4C4D5, tunableContext, tunableName, value)
	return result:__tointeger() ~= 0
end
natives.network.network_access_tunable_float_hash = natives.NETWORK.NETWORK_ACCESS_TUNABLE_FLOAT_HASH

function natives.NETWORK.NETWORK_ACCESS_TUNABLE_FLOAT_MODIFICATION_DETECTION_REGISTRATION_HASH(--[[Hash]] contextHash, --[[Hash]] nameHash, --[[float*]] value) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_ACCESS_TUNABLE_FLOAT_MODIFICATION_DETECTION_REGISTRATION_HASH' due to disabled trusted mode")

	assert(type(contextHash) == "number", "Arg #1 (contextHash) must be a number.")
	assert(type(nameHash) == "number", "Arg #2 (nameHash) must be a number.")
	assert(type(value) == "userdata", "Arg #3 (value) must be a userdata.")

	local result = native_call(0x1950DAE9848A4739, contextHash, nameHash, value)
	return result:__tointeger() ~= 0
end
natives.network.network_access_tunable_float_modification_detection_registration_hash = natives.NETWORK.NETWORK_ACCESS_TUNABLE_FLOAT_MODIFICATION_DETECTION_REGISTRATION_HASH

function natives.NETWORK.NETWORK_ACCESS_TUNABLE_BOOL_HASH(--[[Hash]] tunableContext, --[[Hash]] tunableName) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_ACCESS_TUNABLE_BOOL_HASH' due to disabled trusted mode")

	assert(type(tunableContext) == "number", "Arg #1 (tunableContext) must be a number.")
	assert(type(tunableName) == "number", "Arg #2 (tunableName) must be a number.")

	local result = native_call(0xEA16B69D93D71A45, tunableContext, tunableName)
	return result:__tointeger() ~= 0
end
natives.network.network_access_tunable_bool_hash = natives.NETWORK.NETWORK_ACCESS_TUNABLE_BOOL_HASH

function natives.NETWORK.NETWORK_ACCESS_TUNABLE_BOOL_MODIFICATION_DETECTION_REGISTRATION_HASH(--[[Hash]] contextHash, --[[Hash]] nameHash, --[[BOOL*]] value) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_ACCESS_TUNABLE_BOOL_MODIFICATION_DETECTION_REGISTRATION_HASH' due to disabled trusted mode")

	assert(type(contextHash) == "number", "Arg #1 (contextHash) must be a number.")
	assert(type(nameHash) == "number", "Arg #2 (nameHash) must be a number.")
	assert(type(value) == "userdata", "Arg #3 (value) must be a userdata.")

	local result = native_call(0x697F508861875B42, contextHash, nameHash, value)
	return result:__tointeger() ~= 0
end
natives.network.network_access_tunable_bool_modification_detection_registration_hash = natives.NETWORK.NETWORK_ACCESS_TUNABLE_BOOL_MODIFICATION_DETECTION_REGISTRATION_HASH

--[[
Returns defaultValue if the tunable doesn't exist.
]]
function natives.NETWORK.NETWORK_TRY_ACCESS_TUNABLE_BOOL_HASH(--[[Hash]] tunableContext, --[[Hash]] tunableName, --[[BOOL]] defaultValue) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_TRY_ACCESS_TUNABLE_BOOL_HASH' due to disabled trusted mode")

	assert(type(tunableContext) == "number", "Arg #1 (tunableContext) must be a number.")
	assert(type(tunableName) == "number", "Arg #2 (tunableName) must be a number.")
	assert(type(defaultValue) == "boolean", "Arg #3 (defaultValue) must be a boolean.")

	local result = native_call(0xC7420099936CE286, tunableContext, tunableName, defaultValue)
	return result:__tointeger() ~= 0
end
natives.network.network_try_access_tunable_bool_hash = natives.NETWORK.NETWORK_TRY_ACCESS_TUNABLE_BOOL_HASH

--[[
Return the content modifier id (the tunables context if you want) of a specific content.

It takes the content hash (which is the mission id hash), and return the content modifier id, used as the tunables context.

The mission id can be found on the Social club, for example, 'socialclub.rockstargames.com/games/gtav/jobs/job/A8M6Bz8MLEC5xngvDCzGwA'

'A8M6Bz8MLEC5xngvDCzGwA' is the mission id, so the game hash this and use it as the parameter for this native.

]]
function natives.NETWORK.NETWORK_GET_CONTENT_MODIFIER_LIST_ID(--[[Hash]] contentHash) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_CONTENT_MODIFIER_LIST_ID' due to disabled trusted mode")

	assert(type(contentHash) == "number", "Arg #1 (contentHash) must be a number.")

	local result = native_call(0x187382F8A3E0A6C3, contentHash)
	return result:__tointeger()
end
natives.network.network_get_content_modifier_list_id = natives.NETWORK.NETWORK_GET_CONTENT_MODIFIER_LIST_ID

function natives.NETWORK.NETWORK_GET_BONE_ID_OF_FATAL_HIT() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_BONE_ID_OF_FATAL_HIT' due to disabled trusted mode")

	local result = native_call(0x7DB53B37A2F211A0)
	return result:__tointeger()
end
natives.network.network_get_bone_id_of_fatal_hit = natives.NETWORK.NETWORK_GET_BONE_ID_OF_FATAL_HIT

function natives.NETWORK.NETWORK_RESET_BODY_TRACKER() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_RESET_BODY_TRACKER' due to disabled trusted mode")

	local result = native_call(0x72433699B4E6DD64)
end
natives.network.network_reset_body_tracker = natives.NETWORK.NETWORK_RESET_BODY_TRACKER

function natives.NETWORK.NETWORK_GET_NUMBER_BODY_TRACKER_HITS() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_NUMBER_BODY_TRACKER_HITS' due to disabled trusted mode")

	local result = native_call(0xD38C4A6D047C019D)
	return result:__tointeger()
end
natives.network.network_get_number_body_tracker_hits = natives.NETWORK.NETWORK_GET_NUMBER_BODY_TRACKER_HITS

function natives.NETWORK.NETWORK_HAS_BONE_BEEN_HIT_BY_KILLER(--[[Any]] p0) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_HAS_BONE_BEEN_HIT_BY_KILLER' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x2E0BF682CC778D49, p0)
	return result:__tointeger() ~= 0
end
natives.network.network_has_bone_been_hit_by_killer = natives.NETWORK.NETWORK_HAS_BONE_BEEN_HIT_BY_KILLER

function natives.NETWORK.NETWORK_SET_ATTRIBUTE_DAMAGE_TO_PLAYER(--[[Ped]] ped, --[[Player]] player) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SET_ATTRIBUTE_DAMAGE_TO_PLAYER' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(player) == "number", "Arg #2 (player) must be a number.")

	local result = native_call(0x0EDE326D47CD0F3E, ped, player)
	return result:__tointeger() ~= 0
end
natives.network.network_set_attribute_damage_to_player = natives.NETWORK.NETWORK_SET_ATTRIBUTE_DAMAGE_TO_PLAYER

--[[
Allows vehicle wheels to be destructible even when the vehicle entity is invincible.
]]
function natives.NETWORK.NETWORK_TRIGGER_DAMAGE_EVENT_FOR_ZERO_DAMAGE(--[[Entity]] entity, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_TRIGGER_DAMAGE_EVENT_FOR_ZERO_DAMAGE' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x890E2C5ABED7236D, entity, toggle)
end
natives.network.network_trigger_damage_event_for_zero_damage = natives.NETWORK.NETWORK_TRIGGER_DAMAGE_EVENT_FOR_ZERO_DAMAGE

function natives.NETWORK.NETWORK_TRIGGER_DAMAGE_EVENT_FOR_ZERO_WEAPON_HASH(--[[Entity]] entity, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_TRIGGER_DAMAGE_EVENT_FOR_ZERO_WEAPON_HASH' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x38B7C51AB1EDC7D8, entity, toggle)
end
natives.network.network_trigger_damage_event_for_zero_weapon_hash = natives.NETWORK.NETWORK_TRIGGER_DAMAGE_EVENT_FOR_ZERO_WEAPON_HASH

--[[
nullsub, doesn't do anything
]]
function natives.NETWORK.NETWORK_SET_NO_LONGER_NEEDED(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SET_NO_LONGER_NEEDED' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x3FC795691834481D, p0, p1)
end
natives.network.network_set_no_longer_needed = natives.NETWORK.NETWORK_SET_NO_LONGER_NEEDED

--[[
In the console script dumps, this is only referenced once. 
NETWORK::NETWORK_EXPLODE_VEHICLE(vehicle, 1, 0, 0);

^^^^^ That must be PC script dumps? In X360 Script Dumps it is reference a few times with 2 differences in the parameters.
Which as you see below is 1, 0, 0 + 1, 1, 0 + 1, 0, and a *param?

am_plane_takedown.c 
network_explode_vehicle(net_to_veh(Local_40.imm_2), 1, 1, 0);

armenian2.c 
network_explode_vehicle(Local_80[6 <2>], 1, 0, 0);

fm_horde_controler.c
network_explode_vehicle(net_to_veh(*uParam0), 1, 0, *uParam0);

fm_mission_controller.c, has 6 hits so not going to list them.

Side note, setting the first parameter to 0 seems to mute sound or so?

Seems it's like ADD_EXPLOSION, etc. the first 2 params. The 3rd atm no need to worry since it always seems to be 0.

]]
function natives.NETWORK.NETWORK_EXPLODE_VEHICLE(--[[Vehicle]] vehicle, --[[BOOL]] isAudible, --[[BOOL]] isInvisible, --[[int]] netId) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_EXPLODE_VEHICLE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(isAudible) == "boolean", "Arg #2 (isAudible) must be a boolean.")
	assert(type(isInvisible) == "boolean", "Arg #3 (isInvisible) must be a boolean.")
	assert(type(netId) == "number", "Arg #4 (netId) must be a number.")

	local result = native_call(0x301A42153C9AD707, vehicle, isAudible, isInvisible, netId)
end
natives.network.network_explode_vehicle = natives.NETWORK.NETWORK_EXPLODE_VEHICLE

function natives.NETWORK.NETWORK_EXPLODE_HELI(--[[Vehicle]] vehicle, --[[BOOL]] isAudible, --[[BOOL]] isInvisible, --[[int]] netId) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_EXPLODE_HELI' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(isAudible) == "boolean", "Arg #2 (isAudible) must be a boolean.")
	assert(type(isInvisible) == "boolean", "Arg #3 (isInvisible) must be a boolean.")
	assert(type(netId) == "number", "Arg #4 (netId) must be a number.")

	local result = native_call(0x2A5E0621DD815A9A, vehicle, isAudible, isInvisible, netId)
end
natives.network.network_explode_heli = natives.NETWORK.NETWORK_EXPLODE_HELI

function natives.NETWORK.NETWORK_USE_LOGARITHMIC_BLENDING_THIS_FRAME(--[[Entity]] entity) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_USE_LOGARITHMIC_BLENDING_THIS_FRAME' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0xCD71A4ECAB22709E, entity)
end
natives.network.network_use_logarithmic_blending_this_frame = natives.NETWORK.NETWORK_USE_LOGARITHMIC_BLENDING_THIS_FRAME

function natives.NETWORK.NETWORK_OVERRIDE_COORDS_AND_HEADING(--[[Entity]] entity, --[[float]] x, --[[float]] y, --[[float]] z, --[[float]] heading) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_OVERRIDE_COORDS_AND_HEADING' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")
	assert(type(heading) == "number", "Arg #5 (heading) must be a number.")

	local result = native_call(0xA7E30DE9272B6D49, entity, x, y, z, heading)
end
natives.network.network_override_coords_and_heading = natives.NETWORK.NETWORK_OVERRIDE_COORDS_AND_HEADING

function natives.NETWORK.NETWORK_ENABLE_EXTRA_VEHICLE_ORIENTATION_BLEND_CHECKS(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_ENABLE_EXTRA_VEHICLE_ORIENTATION_BLEND_CHECKS' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xE6717E652B8C8D8A, p0, p1)
end
natives.network.network_enable_extra_vehicle_orientation_blend_checks = natives.NETWORK.NETWORK_ENABLE_EXTRA_VEHICLE_ORIENTATION_BLEND_CHECKS

function natives.NETWORK.NETWORK_DISABLE_PROXIMITY_MIGRATION(--[[int]] netID) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_DISABLE_PROXIMITY_MIGRATION' due to disabled trusted mode")

	assert(type(netID) == "number", "Arg #1 (netID) must be a number.")

	local result = native_call(0x407091CF6037118E, netID)
end
natives.network.network_disable_proximity_migration = natives.NETWORK.NETWORK_DISABLE_PROXIMITY_MIGRATION

--[[
value must be < 255
]]
function natives.NETWORK.NETWORK_SET_PROPERTY_ID(--[[int]] id) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SET_PROPERTY_ID' due to disabled trusted mode")

	assert(type(id) == "number", "Arg #1 (id) must be a number.")

	local result = native_call(0x1775961C2FBBCB5C, id)
end
natives.network.network_set_property_id = natives.NETWORK.NETWORK_SET_PROPERTY_ID

function natives.NETWORK.NETWORK_CLEAR_PROPERTY_ID() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_CLEAR_PROPERTY_ID' due to disabled trusted mode")

	local result = native_call(0xC2B82527CA77053E)
end
natives.network.network_clear_property_id = natives.NETWORK.NETWORK_CLEAR_PROPERTY_ID

function natives.NETWORK.NETWORK_SET_PLAYER_MENTAL_STATE(--[[int]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SET_PLAYER_MENTAL_STATE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x367EF5E2F439B4C6, p0)
end
natives.network.network_set_player_mental_state = natives.NETWORK.NETWORK_SET_PLAYER_MENTAL_STATE

function natives.NETWORK.NETWORK_SET_MINIMUM_RANK_FOR_MISSION(--[[BOOL]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SET_MINIMUM_RANK_FOR_MISSION' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0x94538037EE44F5CF, p0)
end
natives.network.network_set_minimum_rank_for_mission = natives.NETWORK.NETWORK_SET_MINIMUM_RANK_FOR_MISSION

function natives.NETWORK.NETWORK_CACHE_LOCAL_PLAYER_HEAD_BLEND_DATA() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_CACHE_LOCAL_PLAYER_HEAD_BLEND_DATA' due to disabled trusted mode")

	local result = native_call(0xBD0BE0BFC927EAC1)
end
natives.network.network_cache_local_player_head_blend_data = natives.NETWORK.NETWORK_CACHE_LOCAL_PLAYER_HEAD_BLEND_DATA

function natives.NETWORK.NETWORK_HAS_CACHED_PLAYER_HEAD_BLEND_DATA(--[[Player]] player) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_HAS_CACHED_PLAYER_HEAD_BLEND_DATA' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0x237D5336A9A54108, player)
	return result:__tointeger() ~= 0
end
natives.network.network_has_cached_player_head_blend_data = natives.NETWORK.NETWORK_HAS_CACHED_PLAYER_HEAD_BLEND_DATA

function natives.NETWORK.NETWORK_APPLY_CACHED_PLAYER_HEAD_BLEND_DATA(--[[Ped]] ped, --[[Player]] player) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_APPLY_CACHED_PLAYER_HEAD_BLEND_DATA' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(player) == "number", "Arg #2 (player) must be a number.")

	local result = native_call(0x99B72C7ABDE5C910, ped, player)
	return result:__tointeger() ~= 0
end
natives.network.network_apply_cached_player_head_blend_data = natives.NETWORK.NETWORK_APPLY_CACHED_PLAYER_HEAD_BLEND_DATA

function natives.NETWORK.GET_NUM_COMMERCE_ITEMS() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.GET_NUM_COMMERCE_ITEMS' due to disabled trusted mode")

	local result = native_call(0xF2EAC213D5EA0623)
	return result:__tointeger()
end
natives.network.get_num_commerce_items = natives.NETWORK.GET_NUM_COMMERCE_ITEMS

function natives.NETWORK.IS_COMMERCE_DATA_VALID() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.IS_COMMERCE_DATA_VALID' due to disabled trusted mode")

	local result = native_call(0xEA14EEF5B7CD2C30)
	return result:__tointeger() ~= 0
end
natives.network.is_commerce_data_valid = natives.NETWORK.IS_COMMERCE_DATA_VALID

--[[
Does nothing (it's a nullsub).
]]
function natives.NETWORK.TRIGGER_COMMERCE_DATA_FETCH(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.TRIGGER_COMMERCE_DATA_FETCH' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xB606E6CC59664972, p0)
end
natives.network.trigger_commerce_data_fetch = natives.NETWORK.TRIGGER_COMMERCE_DATA_FETCH

function natives.NETWORK.IS_COMMERCE_DATA_FETCH_IN_PROGRESS() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.IS_COMMERCE_DATA_FETCH_IN_PROGRESS' due to disabled trusted mode")

	local result = native_call(0x1D4DC17C38FEAFF0)
	return result:__tointeger() ~= 0
end
natives.network.is_commerce_data_fetch_in_progress = natives.NETWORK.IS_COMMERCE_DATA_FETCH_IN_PROGRESS

function natives.NETWORK.GET_COMMERCE_ITEM_ID(--[[int]] index) -- Returns const char*
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.GET_COMMERCE_ITEM_ID' due to disabled trusted mode")

	assert(type(index) == "number", "Arg #1 (index) must be a number.")

	local result = native_call(0x662635855957C411, index)
	return result:__tostring(true)
end
natives.network.get_commerce_item_id = natives.NETWORK.GET_COMMERCE_ITEM_ID

function natives.NETWORK.GET_COMMERCE_ITEM_NAME(--[[int]] index) -- Returns const char*
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.GET_COMMERCE_ITEM_NAME' due to disabled trusted mode")

	assert(type(index) == "number", "Arg #1 (index) must be a number.")

	local result = native_call(0xB4271092CA7EDF48, index)
	return result:__tostring(true)
end
natives.network.get_commerce_item_name = natives.NETWORK.GET_COMMERCE_ITEM_NAME

function natives.NETWORK.GET_COMMERCE_PRODUCT_PRICE(--[[int]] index) -- Returns const char*
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.GET_COMMERCE_PRODUCT_PRICE' due to disabled trusted mode")

	assert(type(index) == "number", "Arg #1 (index) must be a number.")

	local result = native_call(0xCA94551B50B4932C, index)
	return result:__tostring(true)
end
natives.network.get_commerce_product_price = natives.NETWORK.GET_COMMERCE_PRODUCT_PRICE

function natives.NETWORK.GET_COMMERCE_ITEM_NUM_CATS(--[[int]] index) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.GET_COMMERCE_ITEM_NUM_CATS' due to disabled trusted mode")

	assert(type(index) == "number", "Arg #1 (index) must be a number.")

	local result = native_call(0x2A7776C709904AB0, index)
	return result:__tointeger()
end
natives.network.get_commerce_item_num_cats = natives.NETWORK.GET_COMMERCE_ITEM_NUM_CATS

--[[
index2 is unused
]]
function natives.NETWORK.GET_COMMERCE_ITEM_CAT(--[[int]] index, --[[int]] index2) -- Returns const char*
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.GET_COMMERCE_ITEM_CAT' due to disabled trusted mode")

	assert(type(index) == "number", "Arg #1 (index) must be a number.")
	assert(type(index2) == "number", "Arg #2 (index2) must be a number.")

	local result = native_call(0x6F44CBF56D79FAC0, index, index2)
	return result:__tostring(true)
end
natives.network.get_commerce_item_cat = natives.NETWORK.GET_COMMERCE_ITEM_CAT

function natives.NETWORK.OPEN_COMMERCE_STORE(--[[const char*]] p0, --[[const char*]] p1, --[[int]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.OPEN_COMMERCE_STORE' due to disabled trusted mode")

	assert(type(p0) == "string", "Arg #1 (p0) must be a string.")
	assert(type(p1) == "string", "Arg #2 (p1) must be a string.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0x58C21165F6545892, p0, p1, p2)
end
natives.network.open_commerce_store = natives.NETWORK.OPEN_COMMERCE_STORE

function natives.NETWORK.IS_COMMERCE_STORE_OPEN() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.IS_COMMERCE_STORE_OPEN' due to disabled trusted mode")

	local result = native_call(0x2EAC52B4019E2782)
	return result:__tointeger() ~= 0
end
natives.network.is_commerce_store_open = natives.NETWORK.IS_COMMERCE_STORE_OPEN

--[[
Access to the store for shark cards etc...
]]
function natives.NETWORK.SET_STORE_ENABLED(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.SET_STORE_ENABLED' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x9641A9FF718E9C5E, toggle)
end
natives.network.set_store_enabled = natives.NETWORK.SET_STORE_ENABLED

function natives.NETWORK.REQUEST_COMMERCE_ITEM_IMAGE(--[[int]] index) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.REQUEST_COMMERCE_ITEM_IMAGE' due to disabled trusted mode")

	assert(type(index) == "number", "Arg #1 (index) must be a number.")

	local result = native_call(0xA2F952104FC6DD4B, index)
	return result:__tointeger() ~= 0
end
natives.network.request_commerce_item_image = natives.NETWORK.REQUEST_COMMERCE_ITEM_IMAGE

function natives.NETWORK.RELEASE_ALL_COMMERCE_ITEM_IMAGES() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.RELEASE_ALL_COMMERCE_ITEM_IMAGES' due to disabled trusted mode")

	local result = native_call(0x72D0706CD6CCDB58)
end
natives.network.release_all_commerce_item_images = natives.NETWORK.RELEASE_ALL_COMMERCE_ITEM_IMAGES

function natives.NETWORK.GET_COMMERCE_ITEM_TEXTURENAME(--[[int]] index) -- Returns const char*
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.GET_COMMERCE_ITEM_TEXTURENAME' due to disabled trusted mode")

	assert(type(index) == "number", "Arg #1 (index) must be a number.")

	local result = native_call(0x722F5D28B61C5EA8, index)
	return result:__tostring(true)
end
natives.network.get_commerce_item_texturename = natives.NETWORK.GET_COMMERCE_ITEM_TEXTURENAME

function natives.NETWORK.IS_STORE_AVAILABLE_TO_USER() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.IS_STORE_AVAILABLE_TO_USER' due to disabled trusted mode")

	local result = native_call(0x883D79C4071E18B3)
	return result:__tointeger() ~= 0
end
natives.network.is_store_available_to_user = natives.NETWORK.IS_STORE_AVAILABLE_TO_USER

function natives.NETWORK.DELAY_MP_STORE_OPEN() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.DELAY_MP_STORE_OPEN' due to disabled trusted mode")

	local result = native_call(0x265635150FB0D82E)
end
natives.network.delay_mp_store_open = natives.NETWORK.DELAY_MP_STORE_OPEN

function natives.NETWORK.RESET_STORE_NETWORK_GAME_TRACKING() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.RESET_STORE_NETWORK_GAME_TRACKING' due to disabled trusted mode")

	local result = native_call(0x444C4525ECE0A4B9)
end
natives.network.reset_store_network_game_tracking = natives.NETWORK.RESET_STORE_NETWORK_GAME_TRACKING

function natives.NETWORK.IS_USER_OLD_ENOUGH_TO_ACCESS_STORE() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.IS_USER_OLD_ENOUGH_TO_ACCESS_STORE' due to disabled trusted mode")

	local result = native_call(0x59328EB08C5CEB2B)
	return result:__tointeger() ~= 0
end
natives.network.is_user_old_enough_to_access_store = natives.NETWORK.IS_USER_OLD_ENOUGH_TO_ACCESS_STORE

function natives.NETWORK.SET_LAST_VIEWED_SHOP_ITEM(--[[Hash]] p0, --[[int]] p1, --[[Hash]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.SET_LAST_VIEWED_SHOP_ITEM' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0xFAE628F1E9ADB239, p0, p1, p2)
end
natives.network.set_last_viewed_shop_item = natives.NETWORK.SET_LAST_VIEWED_SHOP_ITEM

--[[
Checks some commerce stuff
]]
function natives.NETWORK.GET_USER_PREMIUM_ACCESS() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.GET_USER_PREMIUM_ACCESS' due to disabled trusted mode")

	local result = native_call(0x754615490A029508)
	return result:__tointeger()
end
natives.network.get_user_premium_access = natives.NETWORK.GET_USER_PREMIUM_ACCESS

--[[
Checks some commerce stuff
]]
function natives.NETWORK.GET_USER_STARTER_ACCESS() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.GET_USER_STARTER_ACCESS' due to disabled trusted mode")

	local result = native_call(0x155467ACA0F55705)
	return result:__tointeger()
end
natives.network.get_user_starter_access = natives.NETWORK.GET_USER_STARTER_ACCESS

function natives.NETWORK.CLOUD_DELETE_MEMBER_FILE(--[[const char*]] p0) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.CLOUD_DELETE_MEMBER_FILE' due to disabled trusted mode")

	assert(type(p0) == "string", "Arg #1 (p0) must be a string.")

	local result = native_call(0xC64DED7EF0D2FE37, p0)
	return result:__tointeger()
end
natives.network.cloud_delete_member_file = natives.NETWORK.CLOUD_DELETE_MEMBER_FILE

function natives.NETWORK.CLOUD_HAS_REQUEST_COMPLETED(--[[int]] handle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.CLOUD_HAS_REQUEST_COMPLETED' due to disabled trusted mode")

	assert(type(handle) == "number", "Arg #1 (handle) must be a number.")

	local result = native_call(0x4C61B39930D045DA, handle)
	return result:__tointeger() ~= 0
end
natives.network.cloud_has_request_completed = natives.NETWORK.CLOUD_HAS_REQUEST_COMPLETED

function natives.NETWORK.CLOUD_DID_REQUEST_SUCCEED(--[[int]] handle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.CLOUD_DID_REQUEST_SUCCEED' due to disabled trusted mode")

	assert(type(handle) == "number", "Arg #1 (handle) must be a number.")

	local result = native_call(0x3A3D5568AF297CD5, handle)
	return result:__tointeger() ~= 0
end
natives.network.cloud_did_request_succeed = natives.NETWORK.CLOUD_DID_REQUEST_SUCCEED

--[[
Downloads prod.cloud.rockstargames.com/titles/gta5/[platform]/check.json
]]
function natives.NETWORK.CLOUD_CHECK_AVAILABILITY() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.CLOUD_CHECK_AVAILABILITY' due to disabled trusted mode")

	local result = native_call(0x4F18196C8D38768D)
end
natives.network.cloud_check_availability = natives.NETWORK.CLOUD_CHECK_AVAILABILITY

function natives.NETWORK.CLOUD_IS_CHECKING_AVAILABILITY() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.CLOUD_IS_CHECKING_AVAILABILITY' due to disabled trusted mode")

	local result = native_call(0xC7ABAC5DE675EE3B)
	return result:__tointeger() ~= 0
end
natives.network.cloud_is_checking_availability = natives.NETWORK.CLOUD_IS_CHECKING_AVAILABILITY

function natives.NETWORK.CLOUD_GET_AVAILABILITY_CHECK_RESULT() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.CLOUD_GET_AVAILABILITY_CHECK_RESULT' due to disabled trusted mode")

	local result = native_call(0x0B0CC10720653F3B)
	return result:__tointeger() ~= 0
end
natives.network.cloud_get_availability_check_result = natives.NETWORK.CLOUD_GET_AVAILABILITY_CHECK_RESULT

--[[
MulleDK19: This function is hard-coded to always return 0.
]]
function natives.NETWORK.GET_CONTENT_TO_LOAD_TYPE() -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.GET_CONTENT_TO_LOAD_TYPE' due to disabled trusted mode")

	local result = native_call(0x8B0C2964BA471961)
	return result:__tointeger()
end
natives.network.get_content_to_load_type = natives.NETWORK.GET_CONTENT_TO_LOAD_TYPE

--[[
MulleDK19: This function is hard-coded to always return 0.
]]
function natives.NETWORK.GET_IS_LAUNCH_FROM_LIVE_AREA() -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.GET_IS_LAUNCH_FROM_LIVE_AREA' due to disabled trusted mode")

	local result = native_call(0x88B588B41FF7868E)
	return result:__tointeger()
end
natives.network.get_is_launch_from_live_area = natives.NETWORK.GET_IS_LAUNCH_FROM_LIVE_AREA

--[[
MulleDK19: This function is hard-coded to always return 0.
]]
function natives.NETWORK.GET_IS_LIVE_AREA_LAUNCH_WITH_CONTENT() -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.GET_IS_LIVE_AREA_LAUNCH_WITH_CONTENT' due to disabled trusted mode")

	local result = native_call(0x67FC09BC554A75E5)
	return result:__tointeger()
end
natives.network.get_is_live_area_launch_with_content = natives.NETWORK.GET_IS_LIVE_AREA_LAUNCH_WITH_CONTENT

--[[
This native does absolutely nothing, just a nullsub
]]
function natives.NETWORK.CLEAR_SERVICE_EVENT_ARGUMENTS() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.CLEAR_SERVICE_EVENT_ARGUMENTS' due to disabled trusted mode")

	local result = native_call(0x966DD84FB6A46017)
end
natives.network.clear_service_event_arguments = natives.NETWORK.CLEAR_SERVICE_EVENT_ARGUMENTS

function natives.NETWORK.UGC_COPY_CONTENT(--[[Any*]] p0, --[[Any*]] p1) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.UGC_COPY_CONTENT' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")
	assert(type(p1) == "userdata", "Arg #2 (p1) must be a userdata.")

	local result = native_call(0x152D90E4C1B4738A, p0, p1)
	return result:__tointeger() ~= 0
end
natives.network.ugc_copy_content = natives.NETWORK.UGC_COPY_CONTENT

function natives.NETWORK.UGC_IS_CREATING() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.UGC_IS_CREATING' due to disabled trusted mode")

	local result = native_call(0x9FEDF86898F100E9)
	return result:__tointeger() ~= 0
end
natives.network.ugc_is_creating = natives.NETWORK.UGC_IS_CREATING

function natives.NETWORK.UGC_HAS_CREATE_FINISHED() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.UGC_HAS_CREATE_FINISHED' due to disabled trusted mode")

	local result = native_call(0x5E24341A7F92A74B)
	return result:__tointeger() ~= 0
end
natives.network.ugc_has_create_finished = natives.NETWORK.UGC_HAS_CREATE_FINISHED

function natives.NETWORK.UGC_DID_CREATE_SUCCEED() -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.UGC_DID_CREATE_SUCCEED' due to disabled trusted mode")

	local result = native_call(0x24E4E51FC16305F9)
	return result:__tointeger()
end
natives.network.ugc_did_create_succeed = natives.NETWORK.UGC_DID_CREATE_SUCCEED

function natives.NETWORK.UGC_GET_CREATE_RESULT() -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.UGC_GET_CREATE_RESULT' due to disabled trusted mode")

	local result = native_call(0xFBC5E768C7A77A6A)
	return result:__tointeger()
end
natives.network.ugc_get_create_result = natives.NETWORK.UGC_GET_CREATE_RESULT

function natives.NETWORK.UGC_GET_CREATE_CONTENT_ID() -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.UGC_GET_CREATE_CONTENT_ID' due to disabled trusted mode")

	local result = native_call(0xC55A0B40FFB1ED23)
	return result:__tointeger()
end
natives.network.ugc_get_create_content_id = natives.NETWORK.UGC_GET_CREATE_CONTENT_ID

function natives.NETWORK.UGC_CLEAR_CREATE_RESULT() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.UGC_CLEAR_CREATE_RESULT' due to disabled trusted mode")

	local result = native_call(0x17440AA15D1D3739)
end
natives.network.ugc_clear_create_result = natives.NETWORK.UGC_CLEAR_CREATE_RESULT

function natives.NETWORK.UGC_QUERY_MY_CONTENT(--[[Any]] p0, --[[Any]] p1, --[[Any*]] p2, --[[Any]] p3, --[[Any]] p4, --[[Any]] p5) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.UGC_QUERY_MY_CONTENT' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "userdata", "Arg #3 (p2) must be a userdata.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")

	local result = native_call(0x9BF438815F5D96EA, p0, p1, p2, p3, p4, p5)
	return result:__tointeger() ~= 0
end
natives.network.ugc_query_my_content = natives.NETWORK.UGC_QUERY_MY_CONTENT

function natives.NETWORK.UGC_QUERY_BY_CATEGORY(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[const char*]] p3, --[[Any]] p4, --[[BOOL]] p5) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.UGC_QUERY_BY_CATEGORY' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "string", "Arg #4 (p3) must be a string.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "boolean", "Arg #6 (p5) must be a boolean.")

	local result = native_call(0x692D58DF40657E8C, p0, p1, p2, p3, p4, p5)
	return result:__tointeger() ~= 0
end
natives.network.ugc_query_by_category = natives.NETWORK.UGC_QUERY_BY_CATEGORY

function natives.NETWORK.UGC_QUERY_BY_CONTENT_ID(--[[const char*]] contentId, --[[BOOL]] latestVersion, --[[const char*]] contentTypeName) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.UGC_QUERY_BY_CONTENT_ID' due to disabled trusted mode")

	assert(type(contentId) == "string", "Arg #1 (contentId) must be a string.")
	assert(type(latestVersion) == "boolean", "Arg #2 (latestVersion) must be a boolean.")
	assert(type(contentTypeName) == "string", "Arg #3 (contentTypeName) must be a string.")

	local result = native_call(0x158EC424F35EC469, contentId, latestVersion, contentTypeName)
	return result:__tointeger() ~= 0
end
natives.network.ugc_query_by_content_id = natives.NETWORK.UGC_QUERY_BY_CONTENT_ID

function natives.NETWORK.UGC_QUERY_BY_CONTENT_IDS(--[[Any*]] data, --[[int]] count, --[[BOOL]] latestVersion, --[[const char*]] contentTypeName) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.UGC_QUERY_BY_CONTENT_IDS' due to disabled trusted mode")

	assert(type(data) == "userdata", "Arg #1 (data) must be a userdata.")
	assert(type(count) == "number", "Arg #2 (count) must be a number.")
	assert(type(latestVersion) == "boolean", "Arg #3 (latestVersion) must be a boolean.")
	assert(type(contentTypeName) == "string", "Arg #4 (contentTypeName) must be a string.")

	local result = native_call(0xC7397A83F7A2A462, data, count, latestVersion, contentTypeName)
	return result:__tointeger() ~= 0
end
natives.network.ugc_query_by_content_ids = natives.NETWORK.UGC_QUERY_BY_CONTENT_IDS

function natives.NETWORK.UGC_QUERY_MOST_RECENTLY_CREATED_CONTENT(--[[int]] offset, --[[int]] count, --[[const char*]] contentTypeName, --[[int]] p3) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.UGC_QUERY_MOST_RECENTLY_CREATED_CONTENT' due to disabled trusted mode")

	assert(type(offset) == "number", "Arg #1 (offset) must be a number.")
	assert(type(count) == "number", "Arg #2 (count) must be a number.")
	assert(type(contentTypeName) == "string", "Arg #3 (contentTypeName) must be a string.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x6D4CB481FAC835E8, offset, count, contentTypeName, p3)
	return result:__tointeger() ~= 0
end
natives.network.ugc_query_most_recently_created_content = natives.NETWORK.UGC_QUERY_MOST_RECENTLY_CREATED_CONTENT

function natives.NETWORK.UGC_GET_BOOKMARKED_CONTENT(--[[Any]] p0, --[[Any]] p1, --[[const char*]] p2, --[[Any*]] p3) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.UGC_GET_BOOKMARKED_CONTENT' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "string", "Arg #3 (p2) must be a string.")
	assert(type(p3) == "userdata", "Arg #4 (p3) must be a userdata.")

	local result = native_call(0xD5A4B59980401588, p0, p1, p2, p3)
	return result:__tointeger() ~= 0
end
natives.network.ugc_get_bookmarked_content = natives.NETWORK.UGC_GET_BOOKMARKED_CONTENT

function natives.NETWORK.UGC_GET_MY_CONTENT(--[[Any]] p0, --[[Any]] p1, --[[const char*]] p2, --[[Any*]] p3) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.UGC_GET_MY_CONTENT' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "string", "Arg #3 (p2) must be a string.")
	assert(type(p3) == "userdata", "Arg #4 (p3) must be a userdata.")

	local result = native_call(0x3195F8DD0D531052, p0, p1, p2, p3)
	return result:__tointeger() ~= 0
end
natives.network.ugc_get_my_content = natives.NETWORK.UGC_GET_MY_CONTENT

function natives.NETWORK.UGC_GET_FRIEND_CONTENT(--[[Any]] p0, --[[Any]] p1, --[[const char*]] p2, --[[Any*]] p3) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.UGC_GET_FRIEND_CONTENT' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "string", "Arg #3 (p2) must be a string.")
	assert(type(p3) == "userdata", "Arg #4 (p3) must be a userdata.")

	local result = native_call(0xF9E1CCAE8BA4C281, p0, p1, p2, p3)
	return result:__tointeger() ~= 0
end
natives.network.ugc_get_friend_content = natives.NETWORK.UGC_GET_FRIEND_CONTENT

function natives.NETWORK.UGC_GET_CREW_CONTENT(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[const char*]] p3, --[[Any*]] p4) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.UGC_GET_CREW_CONTENT' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "string", "Arg #4 (p3) must be a string.")
	assert(type(p4) == "userdata", "Arg #5 (p4) must be a userdata.")

	local result = native_call(0x9F6E2821885CAEE2, p0, p1, p2, p3, p4)
	return result:__tointeger() ~= 0
end
natives.network.ugc_get_crew_content = natives.NETWORK.UGC_GET_CREW_CONTENT

function natives.NETWORK.UGC_GET_GET_BY_CATEGORY(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[const char*]] p3, --[[Any*]] p4) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.UGC_GET_GET_BY_CATEGORY' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "string", "Arg #4 (p3) must be a string.")
	assert(type(p4) == "userdata", "Arg #5 (p4) must be a userdata.")

	local result = native_call(0x678BB03C1A3BD51E, p0, p1, p2, p3, p4)
	return result:__tointeger() ~= 0
end
natives.network.ugc_get_get_by_category = natives.NETWORK.UGC_GET_GET_BY_CATEGORY

function natives.NETWORK.UGC_GET_GET_BY_CONTENT_ID(--[[const char*]] contentId, --[[const char*]] contentTypeName) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.UGC_GET_GET_BY_CONTENT_ID' due to disabled trusted mode")

	assert(type(contentId) == "string", "Arg #1 (contentId) must be a string.")
	assert(type(contentTypeName) == "string", "Arg #2 (contentTypeName) must be a string.")

	local result = native_call(0x815E5E3073DA1D67, contentId, contentTypeName)
	return result:__tointeger() ~= 0
end
natives.network.ugc_get_get_by_content_id = natives.NETWORK.UGC_GET_GET_BY_CONTENT_ID

function natives.NETWORK.UGC_GET_GET_BY_CONTENT_IDS(--[[Any*]] data, --[[int]] dataCount, --[[const char*]] contentTypeName) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.UGC_GET_GET_BY_CONTENT_IDS' due to disabled trusted mode")

	assert(type(data) == "userdata", "Arg #1 (data) must be a userdata.")
	assert(type(dataCount) == "number", "Arg #2 (dataCount) must be a number.")
	assert(type(contentTypeName) == "string", "Arg #3 (contentTypeName) must be a string.")

	local result = native_call(0xB8322EEB38BE7C26, data, dataCount, contentTypeName)
	return result:__tointeger() ~= 0
end
natives.network.ugc_get_get_by_content_ids = natives.NETWORK.UGC_GET_GET_BY_CONTENT_IDS

function natives.NETWORK.UGC_GET_MOST_RECENTLY_CREATED_CONTENT(--[[Any]] p0, --[[Any]] p1, --[[Any*]] p2, --[[Any*]] p3) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.UGC_GET_MOST_RECENTLY_CREATED_CONTENT' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "userdata", "Arg #3 (p2) must be a userdata.")
	assert(type(p3) == "userdata", "Arg #4 (p3) must be a userdata.")

	local result = native_call(0xA7862BC5ED1DFD7E, p0, p1, p2, p3)
	return result:__tointeger() ~= 0
end
natives.network.ugc_get_most_recently_created_content = natives.NETWORK.UGC_GET_MOST_RECENTLY_CREATED_CONTENT

function natives.NETWORK.UGC_GET_MOST_RECENTLY_PLAYED_CONTENT(--[[Any]] p0, --[[Any]] p1, --[[Any*]] p2, --[[Any*]] p3) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.UGC_GET_MOST_RECENTLY_PLAYED_CONTENT' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "userdata", "Arg #3 (p2) must be a userdata.")
	assert(type(p3) == "userdata", "Arg #4 (p3) must be a userdata.")

	local result = native_call(0x97A770BEEF227E2B, p0, p1, p2, p3)
	return result:__tointeger() ~= 0
end
natives.network.ugc_get_most_recently_played_content = natives.NETWORK.UGC_GET_MOST_RECENTLY_PLAYED_CONTENT

function natives.NETWORK.UGC_GET_TOP_RATED_CONTENT(--[[Any]] p0, --[[Any]] p1, --[[Any*]] p2, --[[Any*]] p3) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.UGC_GET_TOP_RATED_CONTENT' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "userdata", "Arg #3 (p2) must be a userdata.")
	assert(type(p3) == "userdata", "Arg #4 (p3) must be a userdata.")

	local result = native_call(0x5324A0E3E4CE3570, p0, p1, p2, p3)
	return result:__tointeger() ~= 0
end
natives.network.ugc_get_top_rated_content = natives.NETWORK.UGC_GET_TOP_RATED_CONTENT

function natives.NETWORK.UGC_CANCEL_QUERY() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.UGC_CANCEL_QUERY' due to disabled trusted mode")

	local result = native_call(0xE9B99B6853181409)
end
natives.network.ugc_cancel_query = natives.NETWORK.UGC_CANCEL_QUERY

function natives.NETWORK.UGC_IS_GETTING() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.UGC_IS_GETTING' due to disabled trusted mode")

	local result = native_call(0xD53ACDBEF24A46E8)
	return result:__tointeger() ~= 0
end
natives.network.ugc_is_getting = natives.NETWORK.UGC_IS_GETTING

function natives.NETWORK.UGC_HAS_GET_FINISHED() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.UGC_HAS_GET_FINISHED' due to disabled trusted mode")

	local result = native_call(0x02ADA21EA2F6918F)
	return result:__tointeger() ~= 0
end
natives.network.ugc_has_get_finished = natives.NETWORK.UGC_HAS_GET_FINISHED

function natives.NETWORK.UGC_DID_GET_SUCCEED() -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.UGC_DID_GET_SUCCEED' due to disabled trusted mode")

	local result = native_call(0x941E5306BCD7C2C7)
	return result:__tointeger()
end
natives.network.ugc_did_get_succeed = natives.NETWORK.UGC_DID_GET_SUCCEED

function natives.NETWORK.UGC_WAS_QUERY_FORCE_CANCELLED() -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.UGC_WAS_QUERY_FORCE_CANCELLED' due to disabled trusted mode")

	local result = native_call(0xC87E740D9F3872CC)
	return result:__tointeger()
end
natives.network.ugc_was_query_force_cancelled = natives.NETWORK.UGC_WAS_QUERY_FORCE_CANCELLED

function natives.NETWORK.UGC_GET_QUERY_RESULT() -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.UGC_GET_QUERY_RESULT' due to disabled trusted mode")

	local result = native_call(0xEDF7F927136C224B)
	return result:__tointeger()
end
natives.network.ugc_get_query_result = natives.NETWORK.UGC_GET_QUERY_RESULT

function natives.NETWORK.UGC_GET_CONTENT_NUM() -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.UGC_GET_CONTENT_NUM' due to disabled trusted mode")

	local result = native_call(0xE0A6138401BCB837)
	return result:__tointeger()
end
natives.network.ugc_get_content_num = natives.NETWORK.UGC_GET_CONTENT_NUM

function natives.NETWORK.UGC_GET_CONTENT_TOTAL() -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.UGC_GET_CONTENT_TOTAL' due to disabled trusted mode")

	local result = native_call(0x769951E2455E2EB5)
	return result:__tointeger()
end
natives.network.ugc_get_content_total = natives.NETWORK.UGC_GET_CONTENT_TOTAL

function natives.NETWORK.UGC_GET_CONTENT_HASH() -- Returns Hash
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.UGC_GET_CONTENT_HASH' due to disabled trusted mode")

	local result = native_call(0x3A17A27D75C74887)
	return result:__tointeger()
end
natives.network.ugc_get_content_hash = natives.NETWORK.UGC_GET_CONTENT_HASH

function natives.NETWORK.UGC_CLEAR_QUERY_RESULTS() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.UGC_CLEAR_QUERY_RESULTS' due to disabled trusted mode")

	local result = native_call(0xBA96394A0EECFA65)
end
natives.network.ugc_clear_query_results = natives.NETWORK.UGC_CLEAR_QUERY_RESULTS

function natives.NETWORK.UGC_GET_CONTENT_USER_ID(--[[int]] p0) -- Returns const char*
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.UGC_GET_CONTENT_USER_ID' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xCD67AD041A394C9C, p0)
	return result:__tostring(true)
end
natives.network.ugc_get_content_user_id = natives.NETWORK.UGC_GET_CONTENT_USER_ID

function natives.NETWORK.UGC_GET_CONTENT_CREATOR_GAMER_HANDLE(--[[int]] p0, --[[Any*]] p1) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.UGC_GET_CONTENT_CREATOR_GAMER_HANDLE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "userdata", "Arg #2 (p1) must be a userdata.")

	local result = native_call(0x584770794D758C18, p0, p1)
	return result:__tointeger() ~= 0
end
natives.network.ugc_get_content_creator_gamer_handle = natives.NETWORK.UGC_GET_CONTENT_CREATOR_GAMER_HANDLE

function natives.NETWORK.UGC_GET_CONTENT_CREATED_BY_LOCAL_PLAYER(--[[Any]] p0) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.UGC_GET_CONTENT_CREATED_BY_LOCAL_PLAYER' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x8C8D2739BA44AF0F, p0)
	return result:__tointeger() ~= 0
end
natives.network.ugc_get_content_created_by_local_player = natives.NETWORK.UGC_GET_CONTENT_CREATED_BY_LOCAL_PLAYER

function natives.NETWORK.UGC_GET_CONTENT_USER_NAME(--[[Any]] p0) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.UGC_GET_CONTENT_USER_NAME' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x703F12425ECA8BF5, p0)
	return result:__tointeger()
end
natives.network.ugc_get_content_user_name = natives.NETWORK.UGC_GET_CONTENT_USER_NAME

function natives.NETWORK.UGC_GET_CONTENT_IS_USING_SC_NICKNAME(--[[Any]] p0) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.UGC_GET_CONTENT_IS_USING_SC_NICKNAME' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xAEAB987727C5A8A4, p0)
	return result:__tointeger() ~= 0
end
natives.network.ugc_get_content_is_using_sc_nickname = natives.NETWORK.UGC_GET_CONTENT_IS_USING_SC_NICKNAME

function natives.NETWORK.UGC_GET_CONTENT_CATEGORY(--[[int]] p0) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.UGC_GET_CONTENT_CATEGORY' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xA7BAB11E7C9C6C5A, p0)
	return result:__tointeger()
end
natives.network.ugc_get_content_category = natives.NETWORK.UGC_GET_CONTENT_CATEGORY

--[[
Return the mission id of a job.
]]
function natives.NETWORK.UGC_GET_CONTENT_ID(--[[int]] p0) -- Returns const char*
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.UGC_GET_CONTENT_ID' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x55AA95F481D694D2, p0)
	return result:__tostring(true)
end
natives.network.ugc_get_content_id = natives.NETWORK.UGC_GET_CONTENT_ID

--[[
Return the root content id of a job.
]]
function natives.NETWORK.UGC_GET_ROOT_CONTENT_ID(--[[int]] p0) -- Returns const char*
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.UGC_GET_ROOT_CONTENT_ID' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xC0173D6BFF4E0348, p0)
	return result:__tostring(true)
end
natives.network.ugc_get_root_content_id = natives.NETWORK.UGC_GET_ROOT_CONTENT_ID

function natives.NETWORK.UGC_GET_CONTENT_NAME(--[[Any]] p0) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.UGC_GET_CONTENT_NAME' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xBF09786A7FCAB582, p0)
	return result:__tointeger()
end
natives.network.ugc_get_content_name = natives.NETWORK.UGC_GET_CONTENT_NAME

function natives.NETWORK.UGC_GET_CONTENT_DESCRIPTION_HASH(--[[Any]] p0) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.UGC_GET_CONTENT_DESCRIPTION_HASH' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x7CF0448787B23758, p0)
	return result:__tointeger()
end
natives.network.ugc_get_content_description_hash = natives.NETWORK.UGC_GET_CONTENT_DESCRIPTION_HASH

function natives.NETWORK.UGC_GET_CONTENT_PATH(--[[int]] p0, --[[int]] p1) -- Returns const char*
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.UGC_GET_CONTENT_PATH' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xBAF6BABF9E7CCC13, p0, p1)
	return result:__tostring(true)
end
natives.network.ugc_get_content_path = natives.NETWORK.UGC_GET_CONTENT_PATH

function natives.NETWORK.UGC_GET_CONTENT_UPDATED_DATE(--[[Any]] p0, --[[Any*]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.UGC_GET_CONTENT_UPDATED_DATE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "userdata", "Arg #2 (p1) must be a userdata.")

	local result = native_call(0xCFD115B373C0DF63, p0, p1)
end
natives.network.ugc_get_content_updated_date = natives.NETWORK.UGC_GET_CONTENT_UPDATED_DATE

function natives.NETWORK.UGC_GET_CONTENT_FILE_VERSION(--[[Any]] p0, --[[Any]] p1) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.UGC_GET_CONTENT_FILE_VERSION' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x37025B27D9B658B1, p0, p1)
	return result:__tointeger()
end
natives.network.ugc_get_content_file_version = natives.NETWORK.UGC_GET_CONTENT_FILE_VERSION

function natives.NETWORK.UGC_GET_CONTENT_HAS_LO_RES_PHOTO(--[[int]] p0) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.UGC_GET_CONTENT_HAS_LO_RES_PHOTO' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x1D610EB0FEA716D9, p0)
	return result:__tointeger() ~= 0
end
natives.network.ugc_get_content_has_lo_res_photo = natives.NETWORK.UGC_GET_CONTENT_HAS_LO_RES_PHOTO

function natives.NETWORK.UGC_GET_CONTENT_HAS_HI_RES_PHOTO(--[[int]] p0) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.UGC_GET_CONTENT_HAS_HI_RES_PHOTO' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x7FCC39C46C3C03BD, p0)
	return result:__tointeger() ~= 0
end
natives.network.ugc_get_content_has_hi_res_photo = natives.NETWORK.UGC_GET_CONTENT_HAS_HI_RES_PHOTO

function natives.NETWORK.UGC_GET_CONTENT_LANGUAGE(--[[Any]] p0) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.UGC_GET_CONTENT_LANGUAGE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x32DD916F3F7C9672, p0)
	return result:__tointeger()
end
natives.network.ugc_get_content_language = natives.NETWORK.UGC_GET_CONTENT_LANGUAGE

function natives.NETWORK.UGC_GET_CONTENT_IS_PUBLISHED(--[[Any]] p0) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.UGC_GET_CONTENT_IS_PUBLISHED' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x3054F114121C21EA, p0)
	return result:__tointeger() ~= 0
end
natives.network.ugc_get_content_is_published = natives.NETWORK.UGC_GET_CONTENT_IS_PUBLISHED

function natives.NETWORK.UGC_GET_CONTENT_IS_VERIFIED(--[[Any]] p0) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.UGC_GET_CONTENT_IS_VERIFIED' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xA9240A96C74CCA13, p0)
	return result:__tointeger() ~= 0
end
natives.network.ugc_get_content_is_verified = natives.NETWORK.UGC_GET_CONTENT_IS_VERIFIED

function natives.NETWORK.UGC_GET_CONTENT_RATING(--[[Any]] p0, --[[Any]] p1) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.UGC_GET_CONTENT_RATING' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x1ACCFBA3D8DAB2EE, p0, p1)
	return result:__tointeger()
end
natives.network.ugc_get_content_rating = natives.NETWORK.UGC_GET_CONTENT_RATING

function natives.NETWORK.UGC_GET_CONTENT_RATING_COUNT(--[[Any]] p0, --[[Any]] p1) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.UGC_GET_CONTENT_RATING_COUNT' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x759299C5BB31D2A9, p0, p1)
	return result:__tointeger()
end
natives.network.ugc_get_content_rating_count = natives.NETWORK.UGC_GET_CONTENT_RATING_COUNT

function natives.NETWORK.UGC_GET_CONTENT_RATING_POSITIVE_COUNT(--[[Any]] p0, --[[Any]] p1) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.UGC_GET_CONTENT_RATING_POSITIVE_COUNT' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x87E5C46C187FE0AE, p0, p1)
	return result:__tointeger()
end
natives.network.ugc_get_content_rating_positive_count = natives.NETWORK.UGC_GET_CONTENT_RATING_POSITIVE_COUNT

function natives.NETWORK.UGC_GET_CONTENT_RATING_NEGATIVE_COUNT(--[[Any]] p0, --[[Any]] p1) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.UGC_GET_CONTENT_RATING_NEGATIVE_COUNT' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x4E548C0D7AE39FF9, p0, p1)
	return result:__tointeger()
end
natives.network.ugc_get_content_rating_negative_count = natives.NETWORK.UGC_GET_CONTENT_RATING_NEGATIVE_COUNT

function natives.NETWORK.UGC_GET_CONTENT_HAS_PLAYER_RECORD(--[[Any]] p0) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.UGC_GET_CONTENT_HAS_PLAYER_RECORD' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x70EA8DA57840F9BE, p0)
	return result:__tointeger() ~= 0
end
natives.network.ugc_get_content_has_player_record = natives.NETWORK.UGC_GET_CONTENT_HAS_PLAYER_RECORD

function natives.NETWORK.UGC_GET_CONTENT_HAS_PLAYER_BOOKMARKED(--[[Any]] p0) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.UGC_GET_CONTENT_HAS_PLAYER_BOOKMARKED' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x993CBE59D350D225, p0)
	return result:__tointeger() ~= 0
end
natives.network.ugc_get_content_has_player_bookmarked = natives.NETWORK.UGC_GET_CONTENT_HAS_PLAYER_BOOKMARKED

function natives.NETWORK.UGC_REQUEST_CONTENT_DATA_FROM_INDEX(--[[int]] p0, --[[int]] p1) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.UGC_REQUEST_CONTENT_DATA_FROM_INDEX' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x171DF6A0C07FB3DC, p0, p1)
	return result:__tointeger()
end
natives.network.ugc_request_content_data_from_index = natives.NETWORK.UGC_REQUEST_CONTENT_DATA_FROM_INDEX

function natives.NETWORK.UGC_REQUEST_CONTENT_DATA_FROM_PARAMS(--[[const char*]] contentTypeName, --[[const char*]] contentId, --[[int]] p2, --[[int]] p3, --[[int]] p4) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.UGC_REQUEST_CONTENT_DATA_FROM_PARAMS' due to disabled trusted mode")

	assert(type(contentTypeName) == "string", "Arg #1 (contentTypeName) must be a string.")
	assert(type(contentId) == "string", "Arg #2 (contentId) must be a string.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")

	local result = native_call(0x7FD2990AF016795E, contentTypeName, contentId, p2, p3, p4)
	return result:__tointeger()
end
natives.network.ugc_request_content_data_from_params = natives.NETWORK.UGC_REQUEST_CONTENT_DATA_FROM_PARAMS

function natives.NETWORK.UGC_REQUEST_CACHED_DESCRIPTION(--[[int]] p0) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.UGC_REQUEST_CACHED_DESCRIPTION' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x5E0165278F6339EE, p0)
	return result:__tointeger()
end
natives.network.ugc_request_cached_description = natives.NETWORK.UGC_REQUEST_CACHED_DESCRIPTION

function natives.NETWORK.UGC_IS_DESCRIPTION_REQUEST_IN_PROGRESS(--[[Any]] p0) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.UGC_IS_DESCRIPTION_REQUEST_IN_PROGRESS' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x2D5DC831176D0114, p0)
	return result:__tointeger() ~= 0
end
natives.network.ugc_is_description_request_in_progress = natives.NETWORK.UGC_IS_DESCRIPTION_REQUEST_IN_PROGRESS

function natives.NETWORK.UGC_HAS_DESCRIPTION_REQUEST_FINISHED(--[[Any]] p0) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.UGC_HAS_DESCRIPTION_REQUEST_FINISHED' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xEBFA8D50ADDC54C4, p0)
	return result:__tointeger() ~= 0
end
natives.network.ugc_has_description_request_finished = natives.NETWORK.UGC_HAS_DESCRIPTION_REQUEST_FINISHED

function natives.NETWORK.UGC_DID_DESCRIPTION_REQUEST_SUCCEED(--[[Any]] p0) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.UGC_DID_DESCRIPTION_REQUEST_SUCCEED' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x162C23CA83ED0A62, p0)
	return result:__tointeger() ~= 0
end
natives.network.ugc_did_description_request_succeed = natives.NETWORK.UGC_DID_DESCRIPTION_REQUEST_SUCCEED

function natives.NETWORK.UGC_GET_CACHED_DESCRIPTION(--[[Any]] p0, --[[Any]] p1) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.UGC_GET_CACHED_DESCRIPTION' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x40F7E66472DF3E5C, p0, p1)
	return result:__tointeger()
end
natives.network.ugc_get_cached_description = natives.NETWORK.UGC_GET_CACHED_DESCRIPTION

function natives.NETWORK.UGC_RELEASE_CACHED_DESCRIPTION(--[[Any]] p0) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.UGC_RELEASE_CACHED_DESCRIPTION' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x5A34CD9C3C5BEC44, p0)
	return result:__tointeger() ~= 0
end
natives.network.ugc_release_cached_description = natives.NETWORK.UGC_RELEASE_CACHED_DESCRIPTION

function natives.NETWORK.UGC_RELEASE_ALL_CACHED_DESCRIPTIONS() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.UGC_RELEASE_ALL_CACHED_DESCRIPTIONS' due to disabled trusted mode")

	local result = native_call(0x68103E2247887242)
end
natives.network.ugc_release_all_cached_descriptions = natives.NETWORK.UGC_RELEASE_ALL_CACHED_DESCRIPTIONS

function natives.NETWORK.UGC_PUBLISH(--[[const char*]] contentId, --[[const char*]] baseContentId, --[[const char*]] contentTypeName) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.UGC_PUBLISH' due to disabled trusted mode")

	assert(type(contentId) == "string", "Arg #1 (contentId) must be a string.")
	assert(type(baseContentId) == "string", "Arg #2 (baseContentId) must be a string.")
	assert(type(contentTypeName) == "string", "Arg #3 (contentTypeName) must be a string.")

	local result = native_call(0x1DE0F5F50D723CAA, contentId, baseContentId, contentTypeName)
	return result:__tointeger() ~= 0
end
natives.network.ugc_publish = natives.NETWORK.UGC_PUBLISH

function natives.NETWORK.UGC_SET_BOOKMARKED(--[[const char*]] contentId, --[[BOOL]] bookmarked, --[[const char*]] contentTypeName) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.UGC_SET_BOOKMARKED' due to disabled trusted mode")

	assert(type(contentId) == "string", "Arg #1 (contentId) must be a string.")
	assert(type(bookmarked) == "boolean", "Arg #2 (bookmarked) must be a boolean.")
	assert(type(contentTypeName) == "string", "Arg #3 (contentTypeName) must be a string.")

	local result = native_call(0x274A1519DFC1094F, contentId, bookmarked, contentTypeName)
	return result:__tointeger() ~= 0
end
natives.network.ugc_set_bookmarked = natives.NETWORK.UGC_SET_BOOKMARKED

function natives.NETWORK.UGC_SET_DELETED(--[[Any*]] p0, --[[BOOL]] p1, --[[const char*]] p2) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.UGC_SET_DELETED' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "string", "Arg #3 (p2) must be a string.")

	local result = native_call(0xD05D1A6C74DA3498, p0, p1, p2)
	return result:__tointeger() ~= 0
end
natives.network.ugc_set_deleted = natives.NETWORK.UGC_SET_DELETED

function natives.NETWORK.UGC_IS_MODIFYING() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.UGC_IS_MODIFYING' due to disabled trusted mode")

	local result = native_call(0x45E816772E93A9DB)
	return result:__tointeger() ~= 0
end
natives.network.ugc_is_modifying = natives.NETWORK.UGC_IS_MODIFYING

function natives.NETWORK.UGC_HAS_MODIFY_FINISHED() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.UGC_HAS_MODIFY_FINISHED' due to disabled trusted mode")

	local result = native_call(0x299EF3C576773506)
	return result:__tointeger() ~= 0
end
natives.network.ugc_has_modify_finished = natives.NETWORK.UGC_HAS_MODIFY_FINISHED

function natives.NETWORK.UGC_DID_MODIFY_SUCCEED() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.UGC_DID_MODIFY_SUCCEED' due to disabled trusted mode")

	local result = native_call(0x793FF272D5B365F4)
	return result:__tointeger() ~= 0
end
natives.network.ugc_did_modify_succeed = natives.NETWORK.UGC_DID_MODIFY_SUCCEED

function natives.NETWORK.UGC_GET_MODIFY_RESULT() -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.UGC_GET_MODIFY_RESULT' due to disabled trusted mode")

	local result = native_call(0x5A0A3D1A186A5508)
	return result:__tointeger()
end
natives.network.ugc_get_modify_result = natives.NETWORK.UGC_GET_MODIFY_RESULT

function natives.NETWORK.UGC_CLEAR_MODIFY_RESULT() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.UGC_CLEAR_MODIFY_RESULT' due to disabled trusted mode")

	local result = native_call(0xA1E5E0204A6FCC70)
end
natives.network.ugc_clear_modify_result = natives.NETWORK.UGC_CLEAR_MODIFY_RESULT

function natives.NETWORK.UGC_GET_CREATORS_BY_USER_ID(--[[Any*]] p0, --[[Any*]] p1) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.UGC_GET_CREATORS_BY_USER_ID' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")
	assert(type(p1) == "userdata", "Arg #2 (p1) must be a userdata.")

	local result = native_call(0xB746D20B17F2A229, p0, p1)
	return result:__tointeger() ~= 0
end
natives.network.ugc_get_creators_by_user_id = natives.NETWORK.UGC_GET_CREATORS_BY_USER_ID

function natives.NETWORK.UGC_HAS_QUERY_CREATORS_FINISHED() -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.UGC_HAS_QUERY_CREATORS_FINISHED' due to disabled trusted mode")

	local result = native_call(0x63B406D7884BFA95)
	return result:__tointeger()
end
natives.network.ugc_has_query_creators_finished = natives.NETWORK.UGC_HAS_QUERY_CREATORS_FINISHED

function natives.NETWORK.UGC_DID_QUERY_CREATORS_SUCCEED() -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.UGC_DID_QUERY_CREATORS_SUCCEED' due to disabled trusted mode")

	local result = native_call(0x4D02279C83BE69FE)
	return result:__tointeger()
end
natives.network.ugc_did_query_creators_succeed = natives.NETWORK.UGC_DID_QUERY_CREATORS_SUCCEED

function natives.NETWORK.UGC_GET_CREATOR_NUM() -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.UGC_GET_CREATOR_NUM' due to disabled trusted mode")

	local result = native_call(0x597F8DBA9B206FC7)
	return result:__tointeger()
end
natives.network.ugc_get_creator_num = natives.NETWORK.UGC_GET_CREATOR_NUM

function natives.NETWORK.UGC_LOAD_OFFLINE_QUERY(--[[Any]] p0) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.UGC_LOAD_OFFLINE_QUERY' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x5CAE833B0EE0C500, p0)
	return result:__tointeger() ~= 0
end
natives.network.ugc_load_offline_query = natives.NETWORK.UGC_LOAD_OFFLINE_QUERY

function natives.NETWORK.UGC_CLEAR_OFFLINE_QUERY() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.UGC_CLEAR_OFFLINE_QUERY' due to disabled trusted mode")

	local result = native_call(0x61A885D3F7CFEE9A)
end
natives.network.ugc_clear_offline_query = natives.NETWORK.UGC_CLEAR_OFFLINE_QUERY

function natives.NETWORK.UGC_SET_QUERY_DATA_FROM_OFFLINE(--[[BOOL]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.UGC_SET_QUERY_DATA_FROM_OFFLINE' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0xF98DDE0A8ED09323, p0)
end
natives.network.ugc_set_query_data_from_offline = natives.NETWORK.UGC_SET_QUERY_DATA_FROM_OFFLINE

function natives.NETWORK.UGC_SET_USING_OFFLINE_CONTENT(--[[BOOL]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.UGC_SET_USING_OFFLINE_CONTENT' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0xFD75DABC0957BF33, p0)
end
natives.network.ugc_set_using_offline_content = natives.NETWORK.UGC_SET_USING_OFFLINE_CONTENT

function natives.NETWORK.UGC_IS_LANGUAGE_SUPPORTED(--[[Any]] p0) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.UGC_IS_LANGUAGE_SUPPORTED' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xF53E48461B71EECB, p0)
	return result:__tointeger() ~= 0
end
natives.network.ugc_is_language_supported = natives.NETWORK.UGC_IS_LANGUAGE_SUPPORTED

function natives.NETWORK.FACEBOOK_POST_COMPLETED_HEIST(--[[const char*]] heistName, --[[int]] cashEarned, --[[int]] xpEarned) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.FACEBOOK_POST_COMPLETED_HEIST' due to disabled trusted mode")

	assert(type(heistName) == "string", "Arg #1 (heistName) must be a string.")
	assert(type(cashEarned) == "number", "Arg #2 (cashEarned) must be a number.")
	assert(type(xpEarned) == "number", "Arg #3 (xpEarned) must be a number.")

	local result = native_call(0x098AB65B9ED9A9EC, heistName, cashEarned, xpEarned)
	return result:__tointeger() ~= 0
end
natives.network.facebook_post_completed_heist = natives.NETWORK.FACEBOOK_POST_COMPLETED_HEIST

function natives.NETWORK.FACEBOOK_POST_CREATE_CHARACTER() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.FACEBOOK_POST_CREATE_CHARACTER' due to disabled trusted mode")

	local result = native_call(0xDC48473142545431)
	return result:__tointeger() ~= 0
end
natives.network.facebook_post_create_character = natives.NETWORK.FACEBOOK_POST_CREATE_CHARACTER

function natives.NETWORK.FACEBOOK_POST_COMPLETED_MILESTONE(--[[int]] milestoneId) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.FACEBOOK_POST_COMPLETED_MILESTONE' due to disabled trusted mode")

	assert(type(milestoneId) == "number", "Arg #1 (milestoneId) must be a number.")

	local result = native_call(0x0AE1F1653B554AB9, milestoneId)
	return result:__tointeger() ~= 0
end
natives.network.facebook_post_completed_milestone = natives.NETWORK.FACEBOOK_POST_COMPLETED_MILESTONE

function natives.NETWORK.FACEBOOK_HAS_POST_COMPLETED() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.FACEBOOK_HAS_POST_COMPLETED' due to disabled trusted mode")

	local result = native_call(0x62B9FEC9A11F10EF)
	return result:__tointeger() ~= 0
end
natives.network.facebook_has_post_completed = natives.NETWORK.FACEBOOK_HAS_POST_COMPLETED

function natives.NETWORK.FACEBOOK_DID_POST_SUCCEED() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.FACEBOOK_DID_POST_SUCCEED' due to disabled trusted mode")

	local result = native_call(0xA75E2B6733DA5142)
	return result:__tointeger() ~= 0
end
natives.network.facebook_did_post_succeed = natives.NETWORK.FACEBOOK_DID_POST_SUCCEED

function natives.NETWORK.FACEBOOK_CAN_POST_TO_FACEBOOK() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.FACEBOOK_CAN_POST_TO_FACEBOOK' due to disabled trusted mode")

	local result = native_call(0x43865688AE10F0D7)
	return result:__tointeger() ~= 0
end
natives.network.facebook_can_post_to_facebook = natives.NETWORK.FACEBOOK_CAN_POST_TO_FACEBOOK

function natives.NETWORK.TEXTURE_DOWNLOAD_REQUEST(--[[Any*]] gamerHandle, --[[const char*]] filePath, --[[const char*]] name, --[[BOOL]] p3) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.TEXTURE_DOWNLOAD_REQUEST' due to disabled trusted mode")

	assert(type(gamerHandle) == "userdata", "Arg #1 (gamerHandle) must be a userdata.")
	assert(type(filePath) == "string", "Arg #2 (filePath) must be a string.")
	assert(type(name) == "string", "Arg #3 (name) must be a string.")
	assert(type(p3) == "boolean", "Arg #4 (p3) must be a boolean.")

	local result = native_call(0x16160DA74A8E74A2, gamerHandle, filePath, name, p3)
	return result:__tointeger()
end
natives.network.texture_download_request = natives.NETWORK.TEXTURE_DOWNLOAD_REQUEST

function natives.NETWORK.TITLE_TEXTURE_DOWNLOAD_REQUEST(--[[const char*]] filePath, --[[const char*]] name, --[[BOOL]] p2) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.TITLE_TEXTURE_DOWNLOAD_REQUEST' due to disabled trusted mode")

	assert(type(filePath) == "string", "Arg #1 (filePath) must be a string.")
	assert(type(name) == "string", "Arg #2 (name) must be a string.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")

	local result = native_call(0x0B203B4AFDE53A4F, filePath, name, p2)
	return result:__tointeger()
end
natives.network.title_texture_download_request = natives.NETWORK.TITLE_TEXTURE_DOWNLOAD_REQUEST

function natives.NETWORK.UGC_TEXTURE_DOWNLOAD_REQUEST(--[[const char*]] p0, --[[int]] p1, --[[int]] p2, --[[int]] p3, --[[const char*]] p4, --[[BOOL]] p5) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.UGC_TEXTURE_DOWNLOAD_REQUEST' due to disabled trusted mode")

	assert(type(p0) == "string", "Arg #1 (p0) must be a string.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "string", "Arg #5 (p4) must be a string.")
	assert(type(p5) == "boolean", "Arg #6 (p5) must be a boolean.")

	local result = native_call(0x308F96458B7087CC, p0, p1, p2, p3, p4, p5)
	return result:__tointeger()
end
natives.network.ugc_texture_download_request = natives.NETWORK.UGC_TEXTURE_DOWNLOAD_REQUEST

function natives.NETWORK.TEXTURE_DOWNLOAD_RELEASE(--[[int]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.TEXTURE_DOWNLOAD_RELEASE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x487EB90B98E9FB19, p0)
end
natives.network.texture_download_release = natives.NETWORK.TEXTURE_DOWNLOAD_RELEASE

function natives.NETWORK.TEXTURE_DOWNLOAD_HAS_FAILED(--[[int]] p0) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.TEXTURE_DOWNLOAD_HAS_FAILED' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x5776ED562C134687, p0)
	return result:__tointeger() ~= 0
end
natives.network.texture_download_has_failed = natives.NETWORK.TEXTURE_DOWNLOAD_HAS_FAILED

function natives.NETWORK.TEXTURE_DOWNLOAD_GET_NAME(--[[int]] p0) -- Returns const char*
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.TEXTURE_DOWNLOAD_GET_NAME' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x3448505B6E35262D, p0)
	return result:__tostring(true)
end
natives.network.texture_download_get_name = natives.NETWORK.TEXTURE_DOWNLOAD_GET_NAME

--[[
0 = succeeded
1 = pending
2 = failed
]]
function natives.NETWORK.GET_STATUS_OF_TEXTURE_DOWNLOAD(--[[int]] p0) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.GET_STATUS_OF_TEXTURE_DOWNLOAD' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x8BD6C6DEA20E82C6, p0)
	return result:__tointeger()
end
natives.network.get_status_of_texture_download = natives.NETWORK.GET_STATUS_OF_TEXTURE_DOWNLOAD

--[[
Returns true if profile setting 901 is set to true and sets it to false.
]]
function natives.NETWORK.NETWORK_CHECK_ROS_LINK_WENTDOWN_NOT_NET() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_CHECK_ROS_LINK_WENTDOWN_NOT_NET' due to disabled trusted mode")

	local result = native_call(0x60EDD13EB3AC1FF3)
	return result:__tointeger() ~= 0
end
natives.network.network_check_ros_link_wentdown_not_net = natives.NETWORK.NETWORK_CHECK_ROS_LINK_WENTDOWN_NOT_NET

--[[
Returns true if the NAT type is Strict (3) and a certain number of connections have failed.
]]
function natives.NETWORK.NETWORK_SHOULD_SHOW_STRICT_NAT_WARNING() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SHOULD_SHOW_STRICT_NAT_WARNING' due to disabled trusted mode")

	local result = native_call(0x82A2B386716608F1)
	return result:__tointeger() ~= 0
end
natives.network.network_should_show_strict_nat_warning = natives.NETWORK.NETWORK_SHOULD_SHOW_STRICT_NAT_WARNING

function natives.NETWORK.NETWORK_IS_CABLE_CONNECTED() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IS_CABLE_CONNECTED' due to disabled trusted mode")

	local result = native_call(0xEFFB25453D8600F9)
	return result:__tointeger() ~= 0
end
natives.network.network_is_cable_connected = natives.NETWORK.NETWORK_IS_CABLE_CONNECTED

function natives.NETWORK.NETWORK_HAVE_SCS_PRIVATE_MSG_PRIV() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_HAVE_SCS_PRIVATE_MSG_PRIV' due to disabled trusted mode")

	local result = native_call(0x66B59CFFD78467AF)
	return result:__tointeger() ~= 0
end
natives.network.network_have_scs_private_msg_priv = natives.NETWORK.NETWORK_HAVE_SCS_PRIVATE_MSG_PRIV

function natives.NETWORK.NETWORK_HAVE_ROS_SOCIAL_CLUB_PRIV() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_HAVE_ROS_SOCIAL_CLUB_PRIV' due to disabled trusted mode")

	local result = native_call(0x606E4D3E3CCCF3EB)
	return result:__tointeger() ~= 0
end
natives.network.network_have_ros_social_club_priv = natives.NETWORK.NETWORK_HAVE_ROS_SOCIAL_CLUB_PRIV

function natives.NETWORK.NETWORK_HAVE_ROS_BANNED_PRIV() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_HAVE_ROS_BANNED_PRIV' due to disabled trusted mode")

	local result = native_call(0x8020A73847E0CA7D)
	return result:__tointeger() ~= 0
end
natives.network.network_have_ros_banned_priv = natives.NETWORK.NETWORK_HAVE_ROS_BANNED_PRIV

function natives.NETWORK.NETWORK_HAVE_ROS_CREATE_TICKET_PRIV() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_HAVE_ROS_CREATE_TICKET_PRIV' due to disabled trusted mode")

	local result = native_call(0xA0AD7E2AF5349F61)
	return result:__tointeger() ~= 0
end
natives.network.network_have_ros_create_ticket_priv = natives.NETWORK.NETWORK_HAVE_ROS_CREATE_TICKET_PRIV

function natives.NETWORK.NETWORK_HAVE_ROS_MULTIPLAYER_PRIV() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_HAVE_ROS_MULTIPLAYER_PRIV' due to disabled trusted mode")

	local result = native_call(0x5F91D5D0B36AA310)
	return result:__tointeger() ~= 0
end
natives.network.network_have_ros_multiplayer_priv = natives.NETWORK.NETWORK_HAVE_ROS_MULTIPLAYER_PRIV

function natives.NETWORK.NETWORK_HAVE_ROS_LEADERBOARD_WRITE_PRIV() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_HAVE_ROS_LEADERBOARD_WRITE_PRIV' due to disabled trusted mode")

	local result = native_call(0x422D396F80A96547)
	return result:__tointeger() ~= 0
end
natives.network.network_have_ros_leaderboard_write_priv = natives.NETWORK.NETWORK_HAVE_ROS_LEADERBOARD_WRITE_PRIV

--[[
index is always 18 in scripts
]]
function natives.NETWORK.NETWORK_HAS_ROS_PRIVILEGE(--[[int]] index) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_HAS_ROS_PRIVILEGE' due to disabled trusted mode")

	assert(type(index) == "number", "Arg #1 (index) must be a number.")

	local result = native_call(0xA699957E60D80214, index)
	return result:__tointeger() ~= 0
end
natives.network.network_has_ros_privilege = natives.NETWORK.NETWORK_HAS_ROS_PRIVILEGE

function natives.NETWORK.NETWORK_HAS_ROS_PRIVILEGE_END_DATE(--[[int]] privilege, --[[int*]] banType, --[[Any*]] timeData) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_HAS_ROS_PRIVILEGE_END_DATE' due to disabled trusted mode")

	assert(type(privilege) == "number", "Arg #1 (privilege) must be a number.")
	assert(type(banType) == "userdata", "Arg #2 (banType) must be a userdata.")
	assert(type(timeData) == "userdata", "Arg #3 (timeData) must be a userdata.")

	local result = native_call(0xC22912B1D85F26B1, privilege, banType, timeData)
	return result:__tointeger() ~= 0
end
natives.network.network_has_ros_privilege_end_date = natives.NETWORK.NETWORK_HAS_ROS_PRIVILEGE_END_DATE

function natives.NETWORK.NETWORK_HAS_ROS_PRIVILEGE_PLAYED_LAST_GEN() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_HAS_ROS_PRIVILEGE_PLAYED_LAST_GEN' due to disabled trusted mode")

	local result = native_call(0x593570C289A77688)
	return result:__tointeger() ~= 0
end
natives.network.network_has_ros_privilege_played_last_gen = natives.NETWORK.NETWORK_HAS_ROS_PRIVILEGE_PLAYED_LAST_GEN

function natives.NETWORK.NETWORK_HAS_ROS_PRIVILEGE_SPECIAL_EDITION_CONTENT() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_HAS_ROS_PRIVILEGE_SPECIAL_EDITION_CONTENT' due to disabled trusted mode")

	local result = native_call(0x91B87C55093DE351)
	return result:__tointeger() ~= 0
end
natives.network.network_has_ros_privilege_special_edition_content = natives.NETWORK.NETWORK_HAS_ROS_PRIVILEGE_SPECIAL_EDITION_CONTENT

function natives.NETWORK.NETWORK_START_COMMUNICATION_PERMISSIONS_CHECK(--[[Any]] p0) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_START_COMMUNICATION_PERMISSIONS_CHECK' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x36391F397731595D, p0)
	return result:__tointeger()
end
natives.network.network_start_communication_permissions_check = natives.NETWORK.NETWORK_START_COMMUNICATION_PERMISSIONS_CHECK

--[[
Always returns -1. Seems to be XB1 specific.
]]
function natives.NETWORK.NETWORK_START_USER_CONTENT_PERMISSIONS_CHECK(--[[Any*]] netHandle) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_START_USER_CONTENT_PERMISSIONS_CHECK' due to disabled trusted mode")

	assert(type(netHandle) == "userdata", "Arg #1 (netHandle) must be a userdata.")

	local result = native_call(0xDEB2B99A1AF1A2A6, netHandle)
	return result:__tointeger()
end
natives.network.network_start_user_content_permissions_check = natives.NETWORK.NETWORK_START_USER_CONTENT_PERMISSIONS_CHECK

function natives.NETWORK.NETWORK_SKIP_RADIO_RESET_NEXT_CLOSE() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SKIP_RADIO_RESET_NEXT_CLOSE' due to disabled trusted mode")

	local result = native_call(0x9465E683B12D3F6B)
end
natives.network.network_skip_radio_reset_next_close = natives.NETWORK.NETWORK_SKIP_RADIO_RESET_NEXT_CLOSE

function natives.NETWORK.NETWORK_SKIP_RADIO_RESET_NEXT_OPEN() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SKIP_RADIO_RESET_NEXT_OPEN' due to disabled trusted mode")

	local result = native_call(0xCA59CCAE5D01E4CE)
end
natives.network.network_skip_radio_reset_next_open = natives.NETWORK.NETWORK_SKIP_RADIO_RESET_NEXT_OPEN

--[[
Returns true if dinput8.dll is present in the game directory.
You will get following error message if that is true: "You are attempting to access GTA Online servers with an altered version of the game."
]]
function natives.NETWORK.NETWORK_SKIP_RADIO_WARNING() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SKIP_RADIO_WARNING' due to disabled trusted mode")

	local result = native_call(0x659CF2EF7F550C4F)
	return result:__tointeger() ~= 0
end
natives.network.network_skip_radio_warning = natives.NETWORK.NETWORK_SKIP_RADIO_WARNING

--[[
NETWORK_F[I-O]
]]
function natives.NETWORK.NETWORK_FORCE_LOCAL_PLAYER_SCAR_SYNC() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_FORCE_LOCAL_PLAYER_SCAR_SYNC' due to disabled trusted mode")

	local result = native_call(0xB7C7F6AD6424304B)
end
natives.network.network_force_local_player_scar_sync = natives.NETWORK.NETWORK_FORCE_LOCAL_PLAYER_SCAR_SYNC

function natives.NETWORK.NETWORK_DISABLE_LEAVE_REMOTE_PED_BEHIND(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_DISABLE_LEAVE_REMOTE_PED_BEHIND' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0xC505036A35AFD01B, toggle)
end
natives.network.network_disable_leave_remote_ped_behind = natives.NETWORK.NETWORK_DISABLE_LEAVE_REMOTE_PED_BEHIND

function natives.NETWORK.NETWORK_ALLOW_REMOTE_ATTACHMENT_MODIFICATION(--[[Entity]] entity, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_ALLOW_REMOTE_ATTACHMENT_MODIFICATION' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x267C78C60E806B9A, entity, toggle)
end
natives.network.network_allow_remote_attachment_modification = natives.NETWORK.NETWORK_ALLOW_REMOTE_ATTACHMENT_MODIFICATION

--[[
Does nothing (it's a nullsub).
]]
function natives.NETWORK.NETWORK_SHOW_CHAT_RESTRICTION_MSC(--[[Player]] player) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SHOW_CHAT_RESTRICTION_MSC' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0x6BFF5F84102DF80A, player)
end
natives.network.network_show_chat_restriction_msc = natives.NETWORK.NETWORK_SHOW_CHAT_RESTRICTION_MSC

--[[
This native does absolutely nothing, just a nullsub
]]
function natives.NETWORK.NETWORK_SHOW_PSN_UGC_RESTRICTION() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_SHOW_PSN_UGC_RESTRICTION' due to disabled trusted mode")

	local result = native_call(0x5C497525F803486B)
end
natives.network.network_show_psn_ugc_restriction = natives.NETWORK.NETWORK_SHOW_PSN_UGC_RESTRICTION

--[[
MulleDK19: This function is hard-coded to always return 0.
]]
function natives.NETWORK.NETWORK_IS_TITLE_UPDATE_REQUIRED() -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IS_TITLE_UPDATE_REQUIRED' due to disabled trusted mode")

	local result = native_call(0x6FB7BB3607D27FA2)
	return result:__tointeger()
end
natives.network.network_is_title_update_required = natives.NETWORK.NETWORK_IS_TITLE_UPDATE_REQUIRED

function natives.NETWORK.NETWORK_QUIT_MP_TO_DESKTOP() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_QUIT_MP_TO_DESKTOP' due to disabled trusted mode")

	local result = native_call(0x45A83257ED02D9BC)
end
natives.network.network_quit_mp_to_desktop = natives.NETWORK.NETWORK_QUIT_MP_TO_DESKTOP

function natives.NETWORK.NETWORK_IS_CONNECTED_VIA_RELAY(--[[Player]] player) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_IS_CONNECTED_VIA_RELAY' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0x16D3D49902F697BB, player)
	return result:__tointeger() ~= 0
end
natives.network.network_is_connected_via_relay = natives.NETWORK.NETWORK_IS_CONNECTED_VIA_RELAY

function natives.NETWORK.NETWORK_GET_AVERAGE_LATENCY(--[[Player]] player) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_AVERAGE_LATENCY' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0xD414BE129BB81B32, player)
	return result:__tonumber()
end
natives.network.network_get_average_latency = natives.NETWORK.NETWORK_GET_AVERAGE_LATENCY

--[[
Same as NETWORK_GET_AVERAGE_LATENCY
]]
function natives.NETWORK.NETWORK_GET_AVERAGE_PING(--[[Player]] player) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_AVERAGE_PING' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0x0E3A041ED6AC2B45, player)
	return result:__tonumber()
end
natives.network.network_get_average_ping = natives.NETWORK.NETWORK_GET_AVERAGE_PING

function natives.NETWORK.NETWORK_GET_AVERAGE_PACKET_LOSS(--[[Player]] player) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_AVERAGE_PACKET_LOSS' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0x350C23949E43686C, player)
	return result:__tonumber()
end
natives.network.network_get_average_packet_loss = natives.NETWORK.NETWORK_GET_AVERAGE_PACKET_LOSS

function natives.NETWORK.NETWORK_GET_NUM_UNACKED_RELIABLES(--[[Player]] player) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_NUM_UNACKED_RELIABLES' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0xFF8FCF9FFC458A1C, player)
	return result:__tointeger()
end
natives.network.network_get_num_unacked_reliables = natives.NETWORK.NETWORK_GET_NUM_UNACKED_RELIABLES

function natives.NETWORK.NETWORK_GET_UNRELIABLE_RESEND_COUNT(--[[Player]] player) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_UNRELIABLE_RESEND_COUNT' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0x3765C3A3E8192E10, player)
	return result:__tointeger()
end
natives.network.network_get_unreliable_resend_count = natives.NETWORK.NETWORK_GET_UNRELIABLE_RESEND_COUNT

function natives.NETWORK.NETWORK_GET_HIGHEST_RELIABLE_RESEND_COUNT(--[[Player]] player) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_HIGHEST_RELIABLE_RESEND_COUNT' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0x52C1EADAF7B10302, player)
	return result:__tointeger()
end
natives.network.network_get_highest_reliable_resend_count = natives.NETWORK.NETWORK_GET_HIGHEST_RELIABLE_RESEND_COUNT

function natives.NETWORK.NETWORK_REPORT_CODE_TAMPER() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_REPORT_CODE_TAMPER' due to disabled trusted mode")

	local result = native_call(0x5626D9D6810730D5)
end
natives.network.network_report_code_tamper = natives.NETWORK.NETWORK_REPORT_CODE_TAMPER

function natives.NETWORK.NETWORK_GET_LAST_ENTITY_POS_RECEIVED_OVER_NETWORK(--[[Entity]] entity) -- Returns Vector3
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_LAST_ENTITY_POS_RECEIVED_OVER_NETWORK' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0x64D779659BC37B19, entity)
	return result:__tov3()
end
natives.network.network_get_last_entity_pos_received_over_network = natives.NETWORK.NETWORK_GET_LAST_ENTITY_POS_RECEIVED_OVER_NETWORK

--[[
Returns the coordinates of another player.
Does not work if you enter your own player id as p0 (will return `(0.0, 0.0, 0.0)` in that case).
]]
function natives.NETWORK.NETWORK_GET_LAST_PLAYER_POS_RECEIVED_OVER_NETWORK(--[[Player]] player) -- Returns Vector3
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_LAST_PLAYER_POS_RECEIVED_OVER_NETWORK' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0x125E6D638B8605D4, player)
	return result:__tov3()
end
natives.network.network_get_last_player_pos_received_over_network = natives.NETWORK.NETWORK_GET_LAST_PLAYER_POS_RECEIVED_OVER_NETWORK

--[[
Used by NetBlender
]]
function natives.NETWORK.NETWORK_GET_LAST_VEL_RECEIVED_OVER_NETWORK(--[[Entity]] entity) -- Returns Vector3
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_LAST_VEL_RECEIVED_OVER_NETWORK' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0x33DE49EDF4DDE77A, entity)
	return result:__tov3()
end
natives.network.network_get_last_vel_received_over_network = natives.NETWORK.NETWORK_GET_LAST_VEL_RECEIVED_OVER_NETWORK

function natives.NETWORK.NETWORK_GET_PREDICTED_VELOCITY(--[[Entity]] entity) -- Returns Vector3
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_PREDICTED_VELOCITY' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0xAA5FAFCD2C5F5E47, entity)
	return result:__tov3()
end
natives.network.network_get_predicted_velocity = natives.NETWORK.NETWORK_GET_PREDICTED_VELOCITY

--[[
Does nothing (it's a nullsub).
]]
function natives.NETWORK.NETWORK_DUMP_NET_IF_CONFIG() -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_DUMP_NET_IF_CONFIG' due to disabled trusted mode")

	local result = native_call(0xAEDF1BC1C133D6E3)
	return result:__tointeger()
end
natives.network.network_dump_net_if_config = natives.NETWORK.NETWORK_DUMP_NET_IF_CONFIG

--[[
Does nothing (it's a nullsub).
]]
function natives.NETWORK.NETWORK_GET_SIGNALLING_INFO() -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_SIGNALLING_INFO' due to disabled trusted mode")

	local result = native_call(0x2555CF7DA5473794)
	return result:__tointeger()
end
natives.network.network_get_signalling_info = natives.NETWORK.NETWORK_GET_SIGNALLING_INFO

--[[
Does nothing (it's a nullsub).
]]
function natives.NETWORK.NETWORK_GET_NET_STATISTICS_INFO() -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_NET_STATISTICS_INFO' due to disabled trusted mode")

	local result = native_call(0x6FD992C4A1C1B986)
	return result:__tointeger()
end
natives.network.network_get_net_statistics_info = natives.NETWORK.NETWORK_GET_NET_STATISTICS_INFO

function natives.NETWORK.NETWORK_GET_PLAYER_ACCOUNT_ID(--[[Player]] player) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_GET_PLAYER_ACCOUNT_ID' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0xDB663CC9FF3407A9, player)
	return result:__tointeger()
end
natives.network.network_get_player_account_id = natives.NETWORK.NETWORK_GET_PLAYER_ACCOUNT_ID

function natives.NETWORK.NETWORK_UGC_NAV(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'NETWORK.NETWORK_UGC_NAV' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xC1447451DDB512F0, p0, p1)
end
natives.network.network_ugc_nav = natives.NETWORK.NETWORK_UGC_NAV


natives.OBJECT = {}
natives.object = {}

--[[
List of object models that can be created without any additional effort like making sure ytyp is loaded etc: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ObjectList.ini
]]
function natives.OBJECT.CREATE_OBJECT(--[[Hash]] modelHash, --[[float]] x, --[[float]] y, --[[float]] z, --[[BOOL]] isNetwork, --[[BOOL]] bScriptHostObj, --[[BOOL]] dynamic) -- Returns Object
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.CREATE_OBJECT' due to disabled trusted mode")

	assert(type(modelHash) == "number", "Arg #1 (modelHash) must be a number.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")
	assert(type(isNetwork) == "boolean", "Arg #5 (isNetwork) must be a boolean.")
	assert(type(bScriptHostObj) == "boolean", "Arg #6 (bScriptHostObj) must be a boolean.")
	assert(type(dynamic) == "boolean", "Arg #7 (dynamic) must be a boolean.")

	local result = native_call(0x509D5878EB39E842, modelHash, x, y, z, isNetwork, bScriptHostObj, dynamic)
	return result:__tointeger()
end
natives.object.create_object = natives.OBJECT.CREATE_OBJECT

--[[
List of object models that can be created without any additional effort like making sure ytyp is loaded etc: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ObjectList.ini
]]
function natives.OBJECT.CREATE_OBJECT_NO_OFFSET(--[[Hash]] modelHash, --[[float]] x, --[[float]] y, --[[float]] z, --[[BOOL]] isNetwork, --[[BOOL]] bScriptHostObj, --[[BOOL]] dynamic) -- Returns Object
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.CREATE_OBJECT_NO_OFFSET' due to disabled trusted mode")

	assert(type(modelHash) == "number", "Arg #1 (modelHash) must be a number.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")
	assert(type(isNetwork) == "boolean", "Arg #5 (isNetwork) must be a boolean.")
	assert(type(bScriptHostObj) == "boolean", "Arg #6 (bScriptHostObj) must be a boolean.")
	assert(type(dynamic) == "boolean", "Arg #7 (dynamic) must be a boolean.")

	local result = native_call(0x9A294B2138ABB884, modelHash, x, y, z, isNetwork, bScriptHostObj, dynamic)
	return result:__tointeger()
end
natives.object.create_object_no_offset = natives.OBJECT.CREATE_OBJECT_NO_OFFSET

--[[
Deletes the specified object, then sets the handle pointed to by the pointer to NULL.
]]
function natives.OBJECT.DELETE_OBJECT(--[[Object*]] object) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.DELETE_OBJECT' due to disabled trusted mode")

	assert(type(object) == "userdata", "Arg #1 (object) must be a userdata.")

	local result = native_call(0x539E0AE3E6634B9F, object)
end
natives.object.delete_object = natives.OBJECT.DELETE_OBJECT

function natives.OBJECT.PLACE_OBJECT_ON_GROUND_PROPERLY(--[[Object]] object) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.PLACE_OBJECT_ON_GROUND_PROPERLY' due to disabled trusted mode")

	assert(type(object) == "number", "Arg #1 (object) must be a number.")

	local result = native_call(0x58A850EAEE20FAA3, object)
	return result:__tointeger() ~= 0
end
natives.object.place_object_on_ground_properly = natives.OBJECT.PLACE_OBJECT_ON_GROUND_PROPERLY

function natives.OBJECT.PLACE_OBJECT_ON_GROUND_OR_OBJECT_PROPERLY(--[[Object]] object) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.PLACE_OBJECT_ON_GROUND_OR_OBJECT_PROPERLY' due to disabled trusted mode")

	assert(type(object) == "number", "Arg #1 (object) must be a number.")

	local result = native_call(0xD76EEEF746057FD6, object)
	return result:__tointeger() ~= 0
end
natives.object.place_object_on_ground_or_object_properly = natives.OBJECT.PLACE_OBJECT_ON_GROUND_OR_OBJECT_PROPERLY

function natives.OBJECT.ROTATE_OBJECT(--[[Object]] object, --[[float]] p1, --[[float]] p2, --[[BOOL]] p3) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.ROTATE_OBJECT' due to disabled trusted mode")

	assert(type(object) == "number", "Arg #1 (object) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "boolean", "Arg #4 (p3) must be a boolean.")

	local result = native_call(0xAFE24E4D29249E4A, object, p1, p2, p3)
	return result:__tointeger() ~= 0
end
natives.object.rotate_object = natives.OBJECT.ROTATE_OBJECT

--[[
Returns true if the object has finished moving.

If false, moves the object towards the specified X, Y and Z coordinates with the specified X, Y and Z speed.

See also: https://gtagmodding.com/opcode-database/opcode/034E/
Has to be looped until it returns true.
]]
function natives.OBJECT.SLIDE_OBJECT(--[[Object]] object, --[[float]] toX, --[[float]] toY, --[[float]] toZ, --[[float]] speedX, --[[float]] speedY, --[[float]] speedZ, --[[BOOL]] collision) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.SLIDE_OBJECT' due to disabled trusted mode")

	assert(type(object) == "number", "Arg #1 (object) must be a number.")
	assert(type(toX) == "number", "Arg #2 (toX) must be a number.")
	assert(type(toY) == "number", "Arg #3 (toY) must be a number.")
	assert(type(toZ) == "number", "Arg #4 (toZ) must be a number.")
	assert(type(speedX) == "number", "Arg #5 (speedX) must be a number.")
	assert(type(speedY) == "number", "Arg #6 (speedY) must be a number.")
	assert(type(speedZ) == "number", "Arg #7 (speedZ) must be a number.")
	assert(type(collision) == "boolean", "Arg #8 (collision) must be a boolean.")

	local result = native_call(0x2FDFF4107B8C1147, object, toX, toY, toZ, speedX, speedY, speedZ, collision)
	return result:__tointeger() ~= 0
end
natives.object.slide_object = natives.OBJECT.SLIDE_OBJECT

function natives.OBJECT.SET_OBJECT_TARGETTABLE(--[[Object]] object, --[[BOOL]] targettable) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.SET_OBJECT_TARGETTABLE' due to disabled trusted mode")

	assert(type(object) == "number", "Arg #1 (object) must be a number.")
	assert(type(targettable) == "boolean", "Arg #2 (targettable) must be a boolean.")

	local result = native_call(0x8A7391690F5AFD81, object, targettable)
end
natives.object.set_object_targettable = natives.OBJECT.SET_OBJECT_TARGETTABLE

--[[
Overrides a flag on the object which determines if the object should be avoided by a vehicle in task CTaskVehicleGoToPointWithAvoidanceAutomobile.
]]
function natives.OBJECT.SET_OBJECT_FORCE_VEHICLES_TO_AVOID(--[[Object]] object, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.SET_OBJECT_FORCE_VEHICLES_TO_AVOID' due to disabled trusted mode")

	assert(type(object) == "number", "Arg #1 (object) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x77F33F2CCF64B3AA, object, toggle)
end
natives.object.set_object_force_vehicles_to_avoid = natives.OBJECT.SET_OBJECT_FORCE_VEHICLES_TO_AVOID

--[[
Has 8 params in the latest patches.

isMission - if true doesn't return mission objects
]]
function natives.OBJECT.GET_CLOSEST_OBJECT_OF_TYPE(--[[float]] x, --[[float]] y, --[[float]] z, --[[float]] radius, --[[Hash]] modelHash, --[[BOOL]] isMission, --[[BOOL]] p6, --[[BOOL]] p7) -- Returns Object
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.GET_CLOSEST_OBJECT_OF_TYPE' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(radius) == "number", "Arg #4 (radius) must be a number.")
	assert(type(modelHash) == "number", "Arg #5 (modelHash) must be a number.")
	assert(type(isMission) == "boolean", "Arg #6 (isMission) must be a boolean.")
	assert(type(p6) == "boolean", "Arg #7 (p6) must be a boolean.")
	assert(type(p7) == "boolean", "Arg #8 (p7) must be a boolean.")

	local result = native_call(0xE143FA2249364369, x, y, z, radius, modelHash, isMission, p6, p7)
	return result:__tointeger()
end
natives.object.get_closest_object_of_type = natives.OBJECT.GET_CLOSEST_OBJECT_OF_TYPE

function natives.OBJECT.HAS_OBJECT_BEEN_BROKEN(--[[Object]] object, --[[Any]] p1) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.HAS_OBJECT_BEEN_BROKEN' due to disabled trusted mode")

	assert(type(object) == "number", "Arg #1 (object) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x8ABFB70C49CC43E2, object, p1)
	return result:__tointeger() ~= 0
end
natives.object.has_object_been_broken = natives.OBJECT.HAS_OBJECT_BEEN_BROKEN

function natives.OBJECT.HAS_CLOSEST_OBJECT_OF_TYPE_BEEN_BROKEN(--[[float]] p0, --[[float]] p1, --[[float]] p2, --[[float]] p3, --[[Hash]] modelHash, --[[Any]] p5) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.HAS_CLOSEST_OBJECT_OF_TYPE_BEEN_BROKEN' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(modelHash) == "number", "Arg #5 (modelHash) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")

	local result = native_call(0x761B0E69AC4D007E, p0, p1, p2, p3, modelHash, p5)
	return result:__tointeger() ~= 0
end
natives.object.has_closest_object_of_type_been_broken = natives.OBJECT.HAS_CLOSEST_OBJECT_OF_TYPE_BEEN_BROKEN

function natives.OBJECT.HAS_CLOSEST_OBJECT_OF_TYPE_BEEN_COMPLETELY_DESTROYED(--[[float]] x, --[[float]] y, --[[float]] z, --[[float]] radius, --[[Hash]] modelHash, --[[BOOL]] p5) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.HAS_CLOSEST_OBJECT_OF_TYPE_BEEN_COMPLETELY_DESTROYED' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(radius) == "number", "Arg #4 (radius) must be a number.")
	assert(type(modelHash) == "number", "Arg #5 (modelHash) must be a number.")
	assert(type(p5) == "boolean", "Arg #6 (p5) must be a boolean.")

	local result = native_call(0x46494A2475701343, x, y, z, radius, modelHash, p5)
	return result:__tointeger() ~= 0
end
natives.object.has_closest_object_of_type_been_completely_destroyed = natives.OBJECT.HAS_CLOSEST_OBJECT_OF_TYPE_BEEN_COMPLETELY_DESTROYED

function natives.OBJECT.GET_HAS_OBJECT_BEEN_COMPLETELY_DESTROYED(--[[Any]] p0) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.GET_HAS_OBJECT_BEEN_COMPLETELY_DESTROYED' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x2542269291C6AC84, p0)
	return result:__tointeger()
end
natives.object.get_has_object_been_completely_destroyed = natives.OBJECT.GET_HAS_OBJECT_BEEN_COMPLETELY_DESTROYED

function natives.OBJECT.GET_OFFSET_FROM_COORD_AND_HEADING_IN_WORLD_COORDS(--[[float]] xPos, --[[float]] yPos, --[[float]] zPos, --[[float]] heading, --[[float]] xOffset, --[[float]] yOffset, --[[float]] zOffset) -- Returns Vector3
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.GET_OFFSET_FROM_COORD_AND_HEADING_IN_WORLD_COORDS' due to disabled trusted mode")

	assert(type(xPos) == "number", "Arg #1 (xPos) must be a number.")
	assert(type(yPos) == "number", "Arg #2 (yPos) must be a number.")
	assert(type(zPos) == "number", "Arg #3 (zPos) must be a number.")
	assert(type(heading) == "number", "Arg #4 (heading) must be a number.")
	assert(type(xOffset) == "number", "Arg #5 (xOffset) must be a number.")
	assert(type(yOffset) == "number", "Arg #6 (yOffset) must be a number.")
	assert(type(zOffset) == "number", "Arg #7 (zOffset) must be a number.")

	local result = native_call(0x163E252DE035A133, xPos, yPos, zPos, heading, xOffset, yOffset, zOffset)
	return result:__tov3()
end
natives.object.get_offset_from_coord_and_heading_in_world_coords = natives.OBJECT.GET_OFFSET_FROM_COORD_AND_HEADING_IN_WORLD_COORDS

function natives.OBJECT.GET_COORDS_AND_ROTATION_OF_CLOSEST_OBJECT_OF_TYPE(--[[float]] x, --[[float]] y, --[[float]] z, --[[float]] radius, --[[Hash]] modelHash, --[[Vector3*]] outPosition, --[[Vector3*]] outRotation, --[[int]] rotationOrder) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.GET_COORDS_AND_ROTATION_OF_CLOSEST_OBJECT_OF_TYPE' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(radius) == "number", "Arg #4 (radius) must be a number.")
	assert(type(modelHash) == "number", "Arg #5 (modelHash) must be a number.")
	assert(type(outPosition) == "userdata", "Arg #6 (outPosition) must be a userdata.")
	assert(type(outRotation) == "userdata", "Arg #7 (outRotation) must be a userdata.")
	assert(type(rotationOrder) == "number", "Arg #8 (rotationOrder) must be a number.")

	local result = native_call(0x163F8B586BC95F2A, x, y, z, radius, modelHash, outPosition, outRotation, rotationOrder)
	return result:__tointeger()
end
natives.object.get_coords_and_rotation_of_closest_object_of_type = natives.OBJECT.GET_COORDS_AND_ROTATION_OF_CLOSEST_OBJECT_OF_TYPE

--[[
Hardcoded to not work in multiplayer.


Used to lock/unlock doors to interior areas of the game.

(Possible) Door Types:

pastebin.com/9S2m3qA4

Heading is either 1, 0 or -1 in the scripts. Means default closed(0) or opened either into(1) or out(-1) of the interior.
Locked means that the heading is locked.  
p6 is always 0. 

225 door types, model names and coords found in stripclub.c4:
pastebin.com/gywnbzsH

get door info: pastebin.com/i14rbekD
]]
function natives.OBJECT.SET_STATE_OF_CLOSEST_DOOR_OF_TYPE(--[[Hash]] type, --[[float]] x, --[[float]] y, --[[float]] z, --[[BOOL]] locked, --[[float]] heading, --[[BOOL]] p6) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.SET_STATE_OF_CLOSEST_DOOR_OF_TYPE' due to disabled trusted mode")

	assert(type(type) == "number", "Arg #1 (type) must be a number.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")
	assert(type(locked) == "boolean", "Arg #5 (locked) must be a boolean.")
	assert(type(heading) == "number", "Arg #6 (heading) must be a number.")
	assert(type(p6) == "boolean", "Arg #7 (p6) must be a boolean.")

	local result = native_call(0xF82D8F1926A02C3D, type, x, y, z, locked, heading, p6)
end
natives.object.set_state_of_closest_door_of_type = natives.OBJECT.SET_STATE_OF_CLOSEST_DOOR_OF_TYPE

--[[
locked is 0 if no door is found
locked is 0 if door is unlocked
locked is 1 if door is found and unlocked.

-------------
the locked bool is either 0(unlocked)(false) or 1(locked)(true)
]]
function natives.OBJECT.GET_STATE_OF_CLOSEST_DOOR_OF_TYPE(--[[Hash]] type, --[[float]] x, --[[float]] y, --[[float]] z, --[[BOOL*]] locked, --[[float*]] heading) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.GET_STATE_OF_CLOSEST_DOOR_OF_TYPE' due to disabled trusted mode")

	assert(type(type) == "number", "Arg #1 (type) must be a number.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")
	assert(type(locked) == "userdata", "Arg #5 (locked) must be a userdata.")
	assert(type(heading) == "userdata", "Arg #6 (heading) must be a userdata.")

	local result = native_call(0xEDC1A5B84AEF33FF, type, x, y, z, locked, heading)
end
natives.object.get_state_of_closest_door_of_type = natives.OBJECT.GET_STATE_OF_CLOSEST_DOOR_OF_TYPE

--[[
Hardcoded not to work in multiplayer environments.
When you set locked to 0 the door open and to 1 the door close
OBJECT::_9B12F9A24FABEDB0(${prop_gate_prison_01}, 1845.0, 2605.0, 45.0, 0, 0.0, 50.0, 0);  //door open

OBJECT::_9B12F9A24FABEDB0(${prop_gate_prison_01}, 1845.0, 2605.0, 45.0, 1, 0.0, 50.0, 0);  //door close
]]
function natives.OBJECT.SET_LOCKED_UNSTREAMED_IN_DOOR_OF_TYPE(--[[Hash]] modelHash, --[[float]] x, --[[float]] y, --[[float]] z, --[[BOOL]] locked, --[[float]] xRotMult, --[[float]] yRotMult, --[[float]] zRotMult) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.SET_LOCKED_UNSTREAMED_IN_DOOR_OF_TYPE' due to disabled trusted mode")

	assert(type(modelHash) == "number", "Arg #1 (modelHash) must be a number.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")
	assert(type(locked) == "boolean", "Arg #5 (locked) must be a boolean.")
	assert(type(xRotMult) == "number", "Arg #6 (xRotMult) must be a number.")
	assert(type(yRotMult) == "number", "Arg #7 (yRotMult) must be a number.")
	assert(type(zRotMult) == "number", "Arg #8 (zRotMult) must be a number.")

	local result = native_call(0x9B12F9A24FABEDB0, modelHash, x, y, z, locked, xRotMult, yRotMult, zRotMult)
end
natives.object.set_locked_unstreamed_in_door_of_type = natives.OBJECT.SET_LOCKED_UNSTREAMED_IN_DOOR_OF_TYPE

function natives.OBJECT.PLAY_OBJECT_AUTO_START_ANIM(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.PLAY_OBJECT_AUTO_START_ANIM' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x006E4B040ED37EC3, p0)
end
natives.object.play_object_auto_start_anim = natives.OBJECT.PLAY_OBJECT_AUTO_START_ANIM

--[[
doorHash has to be unique. scriptDoor false; relies upon getNetworkGameScriptHandler. isLocal On true disables the creation CRequestDoorEvent's in DOOR_SYSTEM_SET_DOOR_STATE.
p5 only set to true in single player native scripts.
If scriptDoor is true, register the door on the script handler host (note: there's a hardcap on the number of script IDs that can be added to the system at a given time). If scriptDoor and isLocal are both false, the door is considered to be in a "Persists w/o netobj" state.

door hashes normally look like PROP_[int]_DOOR_[int] for interior doors and PROP_BUILDING_[int]_DOOR_[int] exterior doors but you can just make up your own hash if you want
All doors need to be registered with ADD_DOOR_TO_SYSTEM before they can be manipulated with the door natives and the easiest way to get door models is just find the door in codewalker.

Example: AddDoorToSystem("PROP_43_DOOR_0", "hei_v_ilev_fh_heistdoor2", -1456.818, -520.5037, 69.67043, 0, 0, 0)
]]
function natives.OBJECT.ADD_DOOR_TO_SYSTEM(--[[Hash]] doorHash, --[[Hash]] modelHash, --[[float]] x, --[[float]] y, --[[float]] z, --[[BOOL]] p5, --[[BOOL]] scriptDoor, --[[BOOL]] isLocal) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.ADD_DOOR_TO_SYSTEM' due to disabled trusted mode")

	assert(type(doorHash) == "number", "Arg #1 (doorHash) must be a number.")
	assert(type(modelHash) == "number", "Arg #2 (modelHash) must be a number.")
	assert(type(x) == "number", "Arg #3 (x) must be a number.")
	assert(type(y) == "number", "Arg #4 (y) must be a number.")
	assert(type(z) == "number", "Arg #5 (z) must be a number.")
	assert(type(p5) == "boolean", "Arg #6 (p5) must be a boolean.")
	assert(type(scriptDoor) == "boolean", "Arg #7 (scriptDoor) must be a boolean.")
	assert(type(isLocal) == "boolean", "Arg #8 (isLocal) must be a boolean.")

	local result = native_call(0x6F8838D03D1DC226, doorHash, modelHash, x, y, z, p5, scriptDoor, isLocal)
end
natives.object.add_door_to_system = natives.OBJECT.ADD_DOOR_TO_SYSTEM

--[[
CDoor and CDoorSystemData still internally allocated (and their associations between doorHash, modelHash, and coordinates).
Only its NetObj removed and flag ``*(v2 + 192) |= 8u`` (1604 retail) toggled.
]]
function natives.OBJECT.REMOVE_DOOR_FROM_SYSTEM(--[[Hash]] doorHash, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.REMOVE_DOOR_FROM_SYSTEM' due to disabled trusted mode")

	assert(type(doorHash) == "number", "Arg #1 (doorHash) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x464D8E1427156FE4, doorHash, p1)
end
natives.object.remove_door_from_system = natives.OBJECT.REMOVE_DOOR_FROM_SYSTEM

--[[
Lockstates not applied and CNetObjDoor's not created until DOOR_SYSTEM_GET_IS_PHYSICS_LOADED returns true.
`requestDoor` on true, and when door system is configured to, i.e., "persists w/o netobj", generate a CRequestDoorEvent.
`forceUpdate` on true, forces an update on the door system (same path as netObjDoor_applyDoorStuff)
Door lock states:
0: UNLOCKED
1: LOCKED
2: DOORSTATE_FORCE_LOCKED_UNTIL_OUT_OF_AREA
3: DOORSTATE_FORCE_UNLOCKED_THIS_FRAME
4: DOORSTATE_FORCE_LOCKED_THIS_FRAME
5: DOORSTATE_FORCE_OPEN_THIS_FRAME
6: DOORSTATE_FORCE_CLOSED_THIS_FRAME
]]
function natives.OBJECT.DOOR_SYSTEM_SET_DOOR_STATE(--[[Hash]] doorHash, --[[int]] state, --[[BOOL]] requestDoor, --[[BOOL]] forceUpdate) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.DOOR_SYSTEM_SET_DOOR_STATE' due to disabled trusted mode")

	assert(type(doorHash) == "number", "Arg #1 (doorHash) must be a number.")
	assert(type(state) == "number", "Arg #2 (state) must be a number.")
	assert(type(requestDoor) == "boolean", "Arg #3 (requestDoor) must be a boolean.")
	assert(type(forceUpdate) == "boolean", "Arg #4 (forceUpdate) must be a boolean.")

	local result = native_call(0x6BAB9442830C7F53, doorHash, state, requestDoor, forceUpdate)
end
natives.object.door_system_set_door_state = natives.OBJECT.DOOR_SYSTEM_SET_DOOR_STATE

function natives.OBJECT.DOOR_SYSTEM_GET_DOOR_STATE(--[[Hash]] doorHash) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.DOOR_SYSTEM_GET_DOOR_STATE' due to disabled trusted mode")

	assert(type(doorHash) == "number", "Arg #1 (doorHash) must be a number.")

	local result = native_call(0x160AA1B32F6139B8, doorHash)
	return result:__tointeger()
end
natives.object.door_system_get_door_state = natives.OBJECT.DOOR_SYSTEM_GET_DOOR_STATE

function natives.OBJECT.DOOR_SYSTEM_GET_DOOR_PENDING_STATE(--[[Hash]] doorHash) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.DOOR_SYSTEM_GET_DOOR_PENDING_STATE' due to disabled trusted mode")

	assert(type(doorHash) == "number", "Arg #1 (doorHash) must be a number.")

	local result = native_call(0x4BC2854478F3A749, doorHash)
	return result:__tointeger()
end
natives.object.door_system_get_door_pending_state = natives.OBJECT.DOOR_SYSTEM_GET_DOOR_PENDING_STATE

--[[
Includes networking check: ownership vs. or the door itself **isn't** networked.
`forceUpdate` on true invokes DOOR_SYSTEM_SET_DOOR_STATE otherwise requestDoor is unused.
]]
function natives.OBJECT.DOOR_SYSTEM_SET_AUTOMATIC_RATE(--[[Hash]] doorHash, --[[float]] rate, --[[BOOL]] requestDoor, --[[BOOL]] forceUpdate) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.DOOR_SYSTEM_SET_AUTOMATIC_RATE' due to disabled trusted mode")

	assert(type(doorHash) == "number", "Arg #1 (doorHash) must be a number.")
	assert(type(rate) == "number", "Arg #2 (rate) must be a number.")
	assert(type(requestDoor) == "boolean", "Arg #3 (requestDoor) must be a boolean.")
	assert(type(forceUpdate) == "boolean", "Arg #4 (forceUpdate) must be a boolean.")

	local result = native_call(0x03C27E13B42A0E82, doorHash, rate, requestDoor, forceUpdate)
end
natives.object.door_system_set_automatic_rate = natives.OBJECT.DOOR_SYSTEM_SET_AUTOMATIC_RATE

--[[
`forceUpdate` on true invokes DOOR_SYSTEM_SET_DOOR_STATE otherwise requestDoor is unused.
]]
function natives.OBJECT.DOOR_SYSTEM_SET_AUTOMATIC_DISTANCE(--[[Hash]] doorHash, --[[float]] distance, --[[BOOL]] requestDoor, --[[BOOL]] forceUpdate) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.DOOR_SYSTEM_SET_AUTOMATIC_DISTANCE' due to disabled trusted mode")

	assert(type(doorHash) == "number", "Arg #1 (doorHash) must be a number.")
	assert(type(distance) == "number", "Arg #2 (distance) must be a number.")
	assert(type(requestDoor) == "boolean", "Arg #3 (requestDoor) must be a boolean.")
	assert(type(forceUpdate) == "boolean", "Arg #4 (forceUpdate) must be a boolean.")

	local result = native_call(0x9BA001CB45CBF627, doorHash, distance, requestDoor, forceUpdate)
end
natives.object.door_system_set_automatic_distance = natives.OBJECT.DOOR_SYSTEM_SET_AUTOMATIC_DISTANCE

--[[
Sets the ajar angle of a door.
Ranges from -1.0 to 1.0, and 0.0 is closed / default.
`forceUpdate` on true invokes DOOR_SYSTEM_SET_DOOR_STATE otherwise requestDoor is unused.
]]
function natives.OBJECT.DOOR_SYSTEM_SET_OPEN_RATIO(--[[Hash]] doorHash, --[[float]] ajar, --[[BOOL]] requestDoor, --[[BOOL]] forceUpdate) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.DOOR_SYSTEM_SET_OPEN_RATIO' due to disabled trusted mode")

	assert(type(doorHash) == "number", "Arg #1 (doorHash) must be a number.")
	assert(type(ajar) == "number", "Arg #2 (ajar) must be a number.")
	assert(type(requestDoor) == "boolean", "Arg #3 (requestDoor) must be a boolean.")
	assert(type(forceUpdate) == "boolean", "Arg #4 (forceUpdate) must be a boolean.")

	local result = native_call(0xB6E6FBA95C7324AC, doorHash, ajar, requestDoor, forceUpdate)
end
natives.object.door_system_set_open_ratio = natives.OBJECT.DOOR_SYSTEM_SET_OPEN_RATIO

function natives.OBJECT.DOOR_SYSTEM_GET_AUTOMATIC_DISTANCE(--[[Hash]] doorHash) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.DOOR_SYSTEM_GET_AUTOMATIC_DISTANCE' due to disabled trusted mode")

	assert(type(doorHash) == "number", "Arg #1 (doorHash) must be a number.")

	local result = native_call(0xE851471AEFC3374F, doorHash)
	return result:__tointeger()
end
natives.object.door_system_get_automatic_distance = natives.OBJECT.DOOR_SYSTEM_GET_AUTOMATIC_DISTANCE

function natives.OBJECT.DOOR_SYSTEM_GET_OPEN_RATIO(--[[Hash]] doorHash) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.DOOR_SYSTEM_GET_OPEN_RATIO' due to disabled trusted mode")

	assert(type(doorHash) == "number", "Arg #1 (doorHash) must be a number.")

	local result = native_call(0x65499865FCA6E5EC, doorHash)
	return result:__tonumber()
end
natives.object.door_system_get_open_ratio = natives.OBJECT.DOOR_SYSTEM_GET_OPEN_RATIO

--[[
Includes networking check: ownership vs. or the door itself **isn't** networked.
`forceUpdate` on true invokes DOOR_SYSTEM_SET_DOOR_STATE otherwise requestDoor is unused.
]]
function natives.OBJECT.DOOR_SYSTEM_SET_SPRING_REMOVED(--[[Hash]] doorHash, --[[BOOL]] removed, --[[BOOL]] requestDoor, --[[BOOL]] forceUpdate) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.DOOR_SYSTEM_SET_SPRING_REMOVED' due to disabled trusted mode")

	assert(type(doorHash) == "number", "Arg #1 (doorHash) must be a number.")
	assert(type(removed) == "boolean", "Arg #2 (removed) must be a boolean.")
	assert(type(requestDoor) == "boolean", "Arg #3 (requestDoor) must be a boolean.")
	assert(type(forceUpdate) == "boolean", "Arg #4 (forceUpdate) must be a boolean.")

	local result = native_call(0xC485E07E4F0B7958, doorHash, removed, requestDoor, forceUpdate)
end
natives.object.door_system_set_spring_removed = natives.OBJECT.DOOR_SYSTEM_SET_SPRING_REMOVED

--[[
Includes networking check: ownership vs. or the door itself **isn't** networked.
]]
function natives.OBJECT.DOOR_SYSTEM_SET_HOLD_OPEN(--[[Hash]] doorHash, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.DOOR_SYSTEM_SET_HOLD_OPEN' due to disabled trusted mode")

	assert(type(doorHash) == "number", "Arg #1 (doorHash) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xD9B71952F78A2640, doorHash, toggle)
end
natives.object.door_system_set_hold_open = natives.OBJECT.DOOR_SYSTEM_SET_HOLD_OPEN

--[[
Some property related to gates. Native name between ``DOOR_SYSTEM_SET_AUTOMATIC_RATE`` and ``DOOR_SYSTEM_SET_DOOR_STATE``.
]]
function natives.OBJECT.DOOR_SYSTEM_SET_DOOR_OPEN_FOR_RACES(--[[Hash]] doorHash, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.DOOR_SYSTEM_SET_DOOR_OPEN_FOR_RACES' due to disabled trusted mode")

	assert(type(doorHash) == "number", "Arg #1 (doorHash) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0xA85A21582451E951, doorHash, p1)
end
natives.object.door_system_set_door_open_for_races = natives.OBJECT.DOOR_SYSTEM_SET_DOOR_OPEN_FOR_RACES

--[[
if (OBJECT::IS_DOOR_REGISTERED_WITH_SYSTEM(doorHash)) 
{
    OBJECT::REMOVE_DOOR_FROM_SYSTEM(doorHash);
}
]]
function natives.OBJECT.IS_DOOR_REGISTERED_WITH_SYSTEM(--[[Hash]] doorHash) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.IS_DOOR_REGISTERED_WITH_SYSTEM' due to disabled trusted mode")

	assert(type(doorHash) == "number", "Arg #1 (doorHash) must be a number.")

	local result = native_call(0xC153C43EA202C8C1, doorHash)
	return result:__tointeger() ~= 0
end
natives.object.is_door_registered_with_system = natives.OBJECT.IS_DOOR_REGISTERED_WITH_SYSTEM

function natives.OBJECT.IS_DOOR_CLOSED(--[[Hash]] doorHash) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.IS_DOOR_CLOSED' due to disabled trusted mode")

	assert(type(doorHash) == "number", "Arg #1 (doorHash) must be a number.")

	local result = native_call(0xC531EE8A1145A149, doorHash)
	return result:__tointeger() ~= 0
end
natives.object.is_door_closed = natives.OBJECT.IS_DOOR_CLOSED

function natives.OBJECT.OPEN_ALL_BARRIERS_FOR_RACE(--[[BOOL]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.OPEN_ALL_BARRIERS_FOR_RACE' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0xC7F29CA00F46350E, p0)
end
natives.object.open_all_barriers_for_race = natives.OBJECT.OPEN_ALL_BARRIERS_FOR_RACE

--[[
Clears the fields sets by 0xC7F29CA00F46350E (1604 retail: 0x1424A7A10, 0x1424A7A11) and iterates over the global CDoor's bucket-list.
Related to its "Pre-networked state"?
]]
function natives.OBJECT.CLOSE_ALL_BARRIERS_FOR_RACE() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.CLOSE_ALL_BARRIERS_FOR_RACE' due to disabled trusted mode")

	local result = native_call(0x701FDA1E82076BA4)
end
natives.object.close_all_barriers_for_race = natives.OBJECT.CLOSE_ALL_BARRIERS_FOR_RACE

function natives.OBJECT.DOOR_SYSTEM_GET_IS_PHYSICS_LOADED(--[[Any]] p0) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.DOOR_SYSTEM_GET_IS_PHYSICS_LOADED' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xDF97CDD4FC08FD34, p0)
	return result:__tointeger() ~= 0
end
natives.object.door_system_get_is_physics_loaded = natives.OBJECT.DOOR_SYSTEM_GET_IS_PHYSICS_LOADED

--[[
Search radius: 0.5
]]
function natives.OBJECT.DOOR_SYSTEM_FIND_EXISTING_DOOR(--[[float]] x, --[[float]] y, --[[float]] z, --[[Hash]] modelHash, --[[Hash*]] outDoorHash) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.DOOR_SYSTEM_FIND_EXISTING_DOOR' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(modelHash) == "number", "Arg #4 (modelHash) must be a number.")
	assert(type(outDoorHash) == "userdata", "Arg #5 (outDoorHash) must be a userdata.")

	local result = native_call(0x589F80B325CC82C5, x, y, z, modelHash, outDoorHash)
	return result:__tointeger() ~= 0
end
natives.object.door_system_find_existing_door = natives.OBJECT.DOOR_SYSTEM_FIND_EXISTING_DOOR

function natives.OBJECT.IS_GARAGE_EMPTY(--[[Hash]] garageHash, --[[BOOL]] p1, --[[int]] p2) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.IS_GARAGE_EMPTY' due to disabled trusted mode")

	assert(type(garageHash) == "number", "Arg #1 (garageHash) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0x90E47239EA1980B8, garageHash, p1, p2)
	return result:__tointeger() ~= 0
end
natives.object.is_garage_empty = natives.OBJECT.IS_GARAGE_EMPTY

function natives.OBJECT.IS_PLAYER_ENTIRELY_INSIDE_GARAGE(--[[Hash]] garageHash, --[[Player]] player, --[[float]] p2, --[[int]] p3) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.IS_PLAYER_ENTIRELY_INSIDE_GARAGE' due to disabled trusted mode")

	assert(type(garageHash) == "number", "Arg #1 (garageHash) must be a number.")
	assert(type(player) == "number", "Arg #2 (player) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x024A60DEB0EA69F0, garageHash, player, p2, p3)
	return result:__tointeger() ~= 0
end
natives.object.is_player_entirely_inside_garage = natives.OBJECT.IS_PLAYER_ENTIRELY_INSIDE_GARAGE

function natives.OBJECT.IS_PLAYER_PARTIALLY_INSIDE_GARAGE(--[[Hash]] garageHash, --[[Player]] player, --[[int]] p2) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.IS_PLAYER_PARTIALLY_INSIDE_GARAGE' due to disabled trusted mode")

	assert(type(garageHash) == "number", "Arg #1 (garageHash) must be a number.")
	assert(type(player) == "number", "Arg #2 (player) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0x1761DC5D8471CBAA, garageHash, player, p2)
	return result:__tointeger() ~= 0
end
natives.object.is_player_partially_inside_garage = natives.OBJECT.IS_PLAYER_PARTIALLY_INSIDE_GARAGE

function natives.OBJECT.ARE_ENTITIES_ENTIRELY_INSIDE_GARAGE(--[[Hash]] garageHash, --[[BOOL]] p1, --[[BOOL]] p2, --[[BOOL]] p3, --[[Any]] p4) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.ARE_ENTITIES_ENTIRELY_INSIDE_GARAGE' due to disabled trusted mode")

	assert(type(garageHash) == "number", "Arg #1 (garageHash) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")
	assert(type(p3) == "boolean", "Arg #4 (p3) must be a boolean.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")

	local result = native_call(0x85B6C850546FDDE2, garageHash, p1, p2, p3, p4)
	return result:__tointeger() ~= 0
end
natives.object.are_entities_entirely_inside_garage = natives.OBJECT.ARE_ENTITIES_ENTIRELY_INSIDE_GARAGE

function natives.OBJECT.IS_ANY_ENTITY_ENTIRELY_INSIDE_GARAGE(--[[Hash]] garageHash, --[[BOOL]] p1, --[[BOOL]] p2, --[[BOOL]] p3, --[[Any]] p4) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.IS_ANY_ENTITY_ENTIRELY_INSIDE_GARAGE' due to disabled trusted mode")

	assert(type(garageHash) == "number", "Arg #1 (garageHash) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")
	assert(type(p3) == "boolean", "Arg #4 (p3) must be a boolean.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")

	local result = native_call(0x673ED815D6E323B7, garageHash, p1, p2, p3, p4)
	return result:__tointeger() ~= 0
end
natives.object.is_any_entity_entirely_inside_garage = natives.OBJECT.IS_ANY_ENTITY_ENTIRELY_INSIDE_GARAGE

--[[
Despite the name, it does work for any entity type.
]]
function natives.OBJECT.IS_OBJECT_ENTIRELY_INSIDE_GARAGE(--[[Hash]] garageHash, --[[Entity]] entity, --[[float]] p2, --[[int]] p3) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.IS_OBJECT_ENTIRELY_INSIDE_GARAGE' due to disabled trusted mode")

	assert(type(garageHash) == "number", "Arg #1 (garageHash) must be a number.")
	assert(type(entity) == "number", "Arg #2 (entity) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x372EF6699146A1E4, garageHash, entity, p2, p3)
	return result:__tointeger() ~= 0
end
natives.object.is_object_entirely_inside_garage = natives.OBJECT.IS_OBJECT_ENTIRELY_INSIDE_GARAGE

--[[
Despite the name, it does work for any entity type.
]]
function natives.OBJECT.IS_OBJECT_PARTIALLY_INSIDE_GARAGE(--[[Hash]] garageHash, --[[Entity]] entity, --[[int]] p2) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.IS_OBJECT_PARTIALLY_INSIDE_GARAGE' due to disabled trusted mode")

	assert(type(garageHash) == "number", "Arg #1 (garageHash) must be a number.")
	assert(type(entity) == "number", "Arg #2 (entity) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0xF0EED5A6BC7B237A, garageHash, entity, p2)
	return result:__tointeger() ~= 0
end
natives.object.is_object_partially_inside_garage = natives.OBJECT.IS_OBJECT_PARTIALLY_INSIDE_GARAGE

function natives.OBJECT.CLEAR_GARAGE(--[[Hash]] garageHash, --[[BOOL]] isNetwork) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.CLEAR_GARAGE' due to disabled trusted mode")

	assert(type(garageHash) == "number", "Arg #1 (garageHash) must be a number.")
	assert(type(isNetwork) == "boolean", "Arg #2 (isNetwork) must be a boolean.")

	local result = native_call(0xDA05194260CDCDF9, garageHash, isNetwork)
end
natives.object.clear_garage = natives.OBJECT.CLEAR_GARAGE

function natives.OBJECT.CLEAR_OBJECTS_INSIDE_GARAGE(--[[Hash]] garageHash, --[[BOOL]] vehicles, --[[BOOL]] peds, --[[BOOL]] objects, --[[BOOL]] isNetwork) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.CLEAR_OBJECTS_INSIDE_GARAGE' due to disabled trusted mode")

	assert(type(garageHash) == "number", "Arg #1 (garageHash) must be a number.")
	assert(type(vehicles) == "boolean", "Arg #2 (vehicles) must be a boolean.")
	assert(type(peds) == "boolean", "Arg #3 (peds) must be a boolean.")
	assert(type(objects) == "boolean", "Arg #4 (objects) must be a boolean.")
	assert(type(isNetwork) == "boolean", "Arg #5 (isNetwork) must be a boolean.")

	local result = native_call(0x190428512B240692, garageHash, vehicles, peds, objects, isNetwork)
end
natives.object.clear_objects_inside_garage = natives.OBJECT.CLEAR_OBJECTS_INSIDE_GARAGE

--[[
Sets a flag. A valid id is 0x157DC10D
]]
function natives.OBJECT.DISABLE_TIDYING_UP_IN_GARAGE(--[[int]] id, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.DISABLE_TIDYING_UP_IN_GARAGE' due to disabled trusted mode")

	assert(type(id) == "number", "Arg #1 (id) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x659F9D71F52843F8, id, toggle)
end
natives.object.disable_tidying_up_in_garage = natives.OBJECT.DISABLE_TIDYING_UP_IN_GARAGE

function natives.OBJECT.ENABLE_SAVING_IN_GARAGE(--[[Hash]] garageHash, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.ENABLE_SAVING_IN_GARAGE' due to disabled trusted mode")

	assert(type(garageHash) == "number", "Arg #1 (garageHash) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xF2E1A7133DD356A6, garageHash, toggle)
end
natives.object.enable_saving_in_garage = natives.OBJECT.ENABLE_SAVING_IN_GARAGE

function natives.OBJECT.CLOSE_SAFEHOUSE_GARAGES() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.CLOSE_SAFEHOUSE_GARAGES' due to disabled trusted mode")

	local result = native_call(0x66A49D021870FE88)
end
natives.object.close_safehouse_garages = natives.OBJECT.CLOSE_SAFEHOUSE_GARAGES

--[[
p5 is usually 0.
]]
function natives.OBJECT.DOES_OBJECT_OF_TYPE_EXIST_AT_COORDS(--[[float]] x, --[[float]] y, --[[float]] z, --[[float]] radius, --[[Hash]] hash, --[[BOOL]] p5) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.DOES_OBJECT_OF_TYPE_EXIST_AT_COORDS' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(radius) == "number", "Arg #4 (radius) must be a number.")
	assert(type(hash) == "number", "Arg #5 (hash) must be a number.")
	assert(type(p5) == "boolean", "Arg #6 (p5) must be a boolean.")

	local result = native_call(0xBFA48E2FF417213F, x, y, z, radius, hash, p5)
	return result:__tointeger() ~= 0
end
natives.object.does_object_of_type_exist_at_coords = natives.OBJECT.DOES_OBJECT_OF_TYPE_EXIST_AT_COORDS

--[[
An angled area is an X-Z oriented rectangle with three parameters:
1. origin: the mid-point along a base edge of the rectangle;
2. extent: the mid-point of opposite base edge on the other Z;
3. width: the length of the base edge; (named derived from logging strings ``CNetworkRoadNodeWorldStateData``).

The oriented rectangle can then be derived from the direction of the two points (``norm(origin - extent)``), its orthonormal, and the width, e.g:
1. golf_mp https://i.imgur.com/JhsQAK9.png
2. am_taxi https://i.imgur.com/TJWCZaT.jpg
]]
function natives.OBJECT.IS_POINT_IN_ANGLED_AREA(--[[float]] xPos, --[[float]] yPos, --[[float]] zPos, --[[float]] x1, --[[float]] y1, --[[float]] z1, --[[float]] x2, --[[float]] y2, --[[float]] z2, --[[float]] width, --[[BOOL]] debug, --[[BOOL]] includeZ) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.IS_POINT_IN_ANGLED_AREA' due to disabled trusted mode")

	assert(type(xPos) == "number", "Arg #1 (xPos) must be a number.")
	assert(type(yPos) == "number", "Arg #2 (yPos) must be a number.")
	assert(type(zPos) == "number", "Arg #3 (zPos) must be a number.")
	assert(type(x1) == "number", "Arg #4 (x1) must be a number.")
	assert(type(y1) == "number", "Arg #5 (y1) must be a number.")
	assert(type(z1) == "number", "Arg #6 (z1) must be a number.")
	assert(type(x2) == "number", "Arg #7 (x2) must be a number.")
	assert(type(y2) == "number", "Arg #8 (y2) must be a number.")
	assert(type(z2) == "number", "Arg #9 (z2) must be a number.")
	assert(type(width) == "number", "Arg #10 (width) must be a number.")
	assert(type(debug) == "boolean", "Arg #11 (debug) must be a boolean.")
	assert(type(includeZ) == "boolean", "Arg #12 (includeZ) must be a boolean.")

	local result = native_call(0x2A70BAE8883E4C81, xPos, yPos, zPos, x1, y1, z1, x2, y2, z2, width, debug, includeZ)
	return result:__tointeger() ~= 0
end
natives.object.is_point_in_angled_area = natives.OBJECT.IS_POINT_IN_ANGLED_AREA

--[[
Overrides the climbing/blocking flags of the object, used in the native scripts mostly for "prop_dock_bouy_*"
]]
function natives.OBJECT.SET_OBJECT_ALLOW_LOW_LOD_BUOYANCY(--[[Object]] object, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.SET_OBJECT_ALLOW_LOW_LOD_BUOYANCY' due to disabled trusted mode")

	assert(type(object) == "number", "Arg #1 (object) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x4D89D607CB3DD1D2, object, toggle)
end
natives.object.set_object_allow_low_lod_buoyancy = natives.OBJECT.SET_OBJECT_ALLOW_LOW_LOD_BUOYANCY

--[[
Adjust the physics parameters of a prop, or otherwise known as "object". This is useful for simulated gravity.

Other parameters seem to be unknown.

p2: seems to be weight and gravity related. Higher value makes the obj fall faster. Very sensitive?
p3: seems similar to p2
p4: makes obj fall slower the higher the value
p5: similar to p4
]]
function natives.OBJECT.SET_OBJECT_PHYSICS_PARAMS(--[[Object]] object, --[[float]] weight, --[[float]] p2, --[[float]] p3, --[[float]] p4, --[[float]] p5, --[[float]] gravity, --[[float]] p7, --[[float]] p8, --[[float]] p9, --[[float]] p10, --[[float]] buoyancy) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.SET_OBJECT_PHYSICS_PARAMS' due to disabled trusted mode")

	assert(type(object) == "number", "Arg #1 (object) must be a number.")
	assert(type(weight) == "number", "Arg #2 (weight) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")
	assert(type(gravity) == "number", "Arg #7 (gravity) must be a number.")
	assert(type(p7) == "number", "Arg #8 (p7) must be a number.")
	assert(type(p8) == "number", "Arg #9 (p8) must be a number.")
	assert(type(p9) == "number", "Arg #10 (p9) must be a number.")
	assert(type(p10) == "number", "Arg #11 (p10) must be a number.")
	assert(type(buoyancy) == "number", "Arg #12 (buoyancy) must be a number.")

	local result = native_call(0xF6DF6E90DE7DF90F, object, weight, p2, p3, p4, p5, gravity, p7, p8, p9, p10, buoyancy)
end
natives.object.set_object_physics_params = natives.OBJECT.SET_OBJECT_PHYSICS_PARAMS

function natives.OBJECT.GET_OBJECT_FRAGMENT_DAMAGE_HEALTH(--[[Any]] p0, --[[BOOL]] p1) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.GET_OBJECT_FRAGMENT_DAMAGE_HEALTH' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0xB6FBFD079B8D0596, p0, p1)
	return result:__tonumber()
end
natives.object.get_object_fragment_damage_health = natives.OBJECT.GET_OBJECT_FRAGMENT_DAMAGE_HEALTH

function natives.OBJECT.SET_ACTIVATE_OBJECT_PHYSICS_AS_SOON_AS_IT_IS_UNFROZEN(--[[Object]] object, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.SET_ACTIVATE_OBJECT_PHYSICS_AS_SOON_AS_IT_IS_UNFROZEN' due to disabled trusted mode")

	assert(type(object) == "number", "Arg #1 (object) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x406137F8EF90EAF5, object, toggle)
end
natives.object.set_activate_object_physics_as_soon_as_it_is_unfrozen = natives.OBJECT.SET_ACTIVATE_OBJECT_PHYSICS_AS_SOON_AS_IT_IS_UNFROZEN

function natives.OBJECT.IS_ANY_OBJECT_NEAR_POINT(--[[float]] x, --[[float]] y, --[[float]] z, --[[float]] range, --[[BOOL]] p4) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.IS_ANY_OBJECT_NEAR_POINT' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(range) == "number", "Arg #4 (range) must be a number.")
	assert(type(p4) == "boolean", "Arg #5 (p4) must be a boolean.")

	local result = native_call(0x397DC58FF00298D1, x, y, z, range, p4)
	return result:__tointeger() ~= 0
end
natives.object.is_any_object_near_point = natives.OBJECT.IS_ANY_OBJECT_NEAR_POINT

function natives.OBJECT.IS_OBJECT_NEAR_POINT(--[[Hash]] objectHash, --[[float]] x, --[[float]] y, --[[float]] z, --[[float]] range) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.IS_OBJECT_NEAR_POINT' due to disabled trusted mode")

	assert(type(objectHash) == "number", "Arg #1 (objectHash) must be a number.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")
	assert(type(range) == "number", "Arg #5 (range) must be a number.")

	local result = native_call(0x8C90FE4B381BA60A, objectHash, x, y, z, range)
	return result:__tointeger() ~= 0
end
natives.object.is_object_near_point = natives.OBJECT.IS_OBJECT_NEAR_POINT

function natives.OBJECT.REMOVE_OBJECT_HIGH_DETAIL_MODEL(--[[Object]] object) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.REMOVE_OBJECT_HIGH_DETAIL_MODEL' due to disabled trusted mode")

	assert(type(object) == "number", "Arg #1 (object) must be a number.")

	local result = native_call(0x4A39DB43E47CF3AA, object)
end
natives.object.remove_object_high_detail_model = natives.OBJECT.REMOVE_OBJECT_HIGH_DETAIL_MODEL

function natives.OBJECT.BREAK_OBJECT_FRAGMENT_CHILD(--[[Object]] p0, --[[Any]] p1, --[[BOOL]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.BREAK_OBJECT_FRAGMENT_CHILD' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")

	local result = native_call(0xE7E4C198B0185900, p0, p1, p2)
end
natives.object.break_object_fragment_child = natives.OBJECT.BREAK_OBJECT_FRAGMENT_CHILD

function natives.OBJECT.DAMAGE_OBJECT_FRAGMENT_CHILD(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.DAMAGE_OBJECT_FRAGMENT_CHILD' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0xE05F6AEEFEB0BB02, p0, p1, p2)
end
natives.object.damage_object_fragment_child = natives.OBJECT.DAMAGE_OBJECT_FRAGMENT_CHILD

function natives.OBJECT.FIX_OBJECT_FRAGMENT(--[[Object]] object) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.FIX_OBJECT_FRAGMENT' due to disabled trusted mode")

	assert(type(object) == "number", "Arg #1 (object) must be a number.")

	local result = native_call(0xF9C1681347C8BD15, object)
end
natives.object.fix_object_fragment = natives.OBJECT.FIX_OBJECT_FRAGMENT

function natives.OBJECT.TRACK_OBJECT_VISIBILITY(--[[Object]] object) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.TRACK_OBJECT_VISIBILITY' due to disabled trusted mode")

	assert(type(object) == "number", "Arg #1 (object) must be a number.")

	local result = native_call(0xB252BC036B525623, object)
end
natives.object.track_object_visibility = natives.OBJECT.TRACK_OBJECT_VISIBILITY

function natives.OBJECT.IS_OBJECT_VISIBLE(--[[Object]] object) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.IS_OBJECT_VISIBLE' due to disabled trusted mode")

	assert(type(object) == "number", "Arg #1 (object) must be a number.")

	local result = native_call(0x8B32ACE6326A7546, object)
	return result:__tointeger() ~= 0
end
natives.object.is_object_visible = natives.OBJECT.IS_OBJECT_VISIBLE

function natives.OBJECT.SET_OBJECT_IS_SPECIAL_GOLFBALL(--[[Object]] object, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.SET_OBJECT_IS_SPECIAL_GOLFBALL' due to disabled trusted mode")

	assert(type(object) == "number", "Arg #1 (object) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xC6033D32241F6FB5, object, toggle)
end
natives.object.set_object_is_special_golfball = natives.OBJECT.SET_OBJECT_IS_SPECIAL_GOLFBALL

function natives.OBJECT.SET_OBJECT_TAKES_DAMAGE_FROM_COLLIDING_WITH_BUILDINGS(--[[Any]] p0, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.SET_OBJECT_TAKES_DAMAGE_FROM_COLLIDING_WITH_BUILDINGS' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0xEB6F1A9B5510A5D2, p0, p1)
end
natives.object.set_object_takes_damage_from_colliding_with_buildings = natives.OBJECT.SET_OBJECT_TAKES_DAMAGE_FROM_COLLIDING_WITH_BUILDINGS

function natives.OBJECT.ALLOW_DAMAGE_EVENTS_FOR_NON_NETWORKED_OBJECTS(--[[BOOL]] value) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.ALLOW_DAMAGE_EVENTS_FOR_NON_NETWORKED_OBJECTS' due to disabled trusted mode")

	assert(type(value) == "boolean", "Arg #1 (value) must be a boolean.")

	local result = native_call(0xABDABF4E1EDECBFA, value)
end
natives.object.allow_damage_events_for_non_networked_objects = natives.OBJECT.ALLOW_DAMAGE_EVENTS_FOR_NON_NETWORKED_OBJECTS

--[[
Requires a component_at_*_flsh to be attached to the weapon object
]]
function natives.OBJECT.SET_CUTSCENES_WEAPON_FLASHLIGHT_ON_THIS_FRAME(--[[Object]] object, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.SET_CUTSCENES_WEAPON_FLASHLIGHT_ON_THIS_FRAME' due to disabled trusted mode")

	assert(type(object) == "number", "Arg #1 (object) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xBCE595371A5FBAAF, object, toggle)
end
natives.object.set_cutscenes_weapon_flashlight_on_this_frame = natives.OBJECT.SET_CUTSCENES_WEAPON_FLASHLIGHT_ON_THIS_FRAME

--[[
Example:
OBJECT::GET_RAYFIRE_MAP_OBJECT(-809.9619750976562, 170.919, 75.7406997680664, 3.0, "des_tvsmash");
]]
function natives.OBJECT.GET_RAYFIRE_MAP_OBJECT(--[[float]] x, --[[float]] y, --[[float]] z, --[[float]] radius, --[[const char*]] name) -- Returns Object
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.GET_RAYFIRE_MAP_OBJECT' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(radius) == "number", "Arg #4 (radius) must be a number.")
	assert(type(name) == "string", "Arg #5 (name) must be a string.")

	local result = native_call(0xB48FCED898292E52, x, y, z, radius, name)
	return result:__tointeger()
end
natives.object.get_rayfire_map_object = natives.OBJECT.GET_RAYFIRE_MAP_OBJECT

--[[
Defines the state of a destructible object.
Use the GET_RAYFIRE_MAP_OBJECT native to find an object's handle with its name / coords.
State 2 == object just spawned
State 4 == Beginning of the animation
State 6 == Start animation
State 9 == End of the animation
]]
function natives.OBJECT.SET_STATE_OF_RAYFIRE_MAP_OBJECT(--[[Object]] object, --[[int]] state) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.SET_STATE_OF_RAYFIRE_MAP_OBJECT' due to disabled trusted mode")

	assert(type(object) == "number", "Arg #1 (object) must be a number.")
	assert(type(state) == "number", "Arg #2 (state) must be a number.")

	local result = native_call(0x5C29F698D404C5E1, object, state)
end
natives.object.set_state_of_rayfire_map_object = natives.OBJECT.SET_STATE_OF_RAYFIRE_MAP_OBJECT

--[[
Get a destructible object's state.
Substract 1 to get the real state.
See SET_STATE_OF_RAYFIRE_MAP_OBJECT to see the different states
For example, if the object just spawned (state 2), the native will return 3.
]]
function natives.OBJECT.GET_STATE_OF_RAYFIRE_MAP_OBJECT(--[[Object]] object) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.GET_STATE_OF_RAYFIRE_MAP_OBJECT' due to disabled trusted mode")

	assert(type(object) == "number", "Arg #1 (object) must be a number.")

	local result = native_call(0x899BA936634A322E, object)
	return result:__tointeger()
end
natives.object.get_state_of_rayfire_map_object = natives.OBJECT.GET_STATE_OF_RAYFIRE_MAP_OBJECT

--[[
Returns true if a destructible object with this handle exists, false otherwise.  
]]
function natives.OBJECT.DOES_RAYFIRE_MAP_OBJECT_EXIST(--[[Object]] object) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.DOES_RAYFIRE_MAP_OBJECT_EXIST' due to disabled trusted mode")

	assert(type(object) == "number", "Arg #1 (object) must be a number.")

	local result = native_call(0x52AF537A0C5B8AAD, object)
	return result:__tointeger() ~= 0
end
natives.object.does_rayfire_map_object_exist = natives.OBJECT.DOES_RAYFIRE_MAP_OBJECT_EXIST

--[[
`object`: The des-object handle to get the animation progress from.
Return value is a float between 0.0 and 1.0, 0.0 is the beginning of the animation, 1.0 is the end. Value resets to 0.0 instantly after reaching 1.0.
]]
function natives.OBJECT.GET_RAYFIRE_MAP_OBJECT_ANIM_PHASE(--[[Object]] object) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.GET_RAYFIRE_MAP_OBJECT_ANIM_PHASE' due to disabled trusted mode")

	assert(type(object) == "number", "Arg #1 (object) must be a number.")

	local result = native_call(0x260EE4FDBDF4DB01, object)
	return result:__tonumber()
end
natives.object.get_rayfire_map_object_anim_phase = natives.OBJECT.GET_RAYFIRE_MAP_OBJECT_ANIM_PHASE

--[[
Pickup hashes: pastebin.com/8EuSv2r1

Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json
]]
function natives.OBJECT.CREATE_PICKUP(--[[Hash]] pickupHash, --[[float]] posX, --[[float]] posY, --[[float]] posZ, --[[int]] p4, --[[int]] value, --[[BOOL]] p6, --[[Hash]] modelHash) -- Returns Pickup
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.CREATE_PICKUP' due to disabled trusted mode")

	assert(type(pickupHash) == "number", "Arg #1 (pickupHash) must be a number.")
	assert(type(posX) == "number", "Arg #2 (posX) must be a number.")
	assert(type(posY) == "number", "Arg #3 (posY) must be a number.")
	assert(type(posZ) == "number", "Arg #4 (posZ) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(value) == "number", "Arg #6 (value) must be a number.")
	assert(type(p6) == "boolean", "Arg #7 (p6) must be a boolean.")
	assert(type(modelHash) == "number", "Arg #8 (modelHash) must be a number.")

	local result = native_call(0xFBA08C503DD5FA58, pickupHash, posX, posY, posZ, p4, value, p6, modelHash)
	return result:__tointeger()
end
natives.object.create_pickup = natives.OBJECT.CREATE_PICKUP

--[[
Pickup hashes: pastebin.com/8EuSv2r1

flags:
8 (1 << 3): place on ground
512 (1 << 9): spin around

Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json
]]
function natives.OBJECT.CREATE_PICKUP_ROTATE(--[[Hash]] pickupHash, --[[float]] posX, --[[float]] posY, --[[float]] posZ, --[[float]] rotX, --[[float]] rotY, --[[float]] rotZ, --[[int]] flag, --[[int]] amount, --[[Any]] p9, --[[BOOL]] p10, --[[Hash]] modelHash) -- Returns Pickup
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.CREATE_PICKUP_ROTATE' due to disabled trusted mode")

	assert(type(pickupHash) == "number", "Arg #1 (pickupHash) must be a number.")
	assert(type(posX) == "number", "Arg #2 (posX) must be a number.")
	assert(type(posY) == "number", "Arg #3 (posY) must be a number.")
	assert(type(posZ) == "number", "Arg #4 (posZ) must be a number.")
	assert(type(rotX) == "number", "Arg #5 (rotX) must be a number.")
	assert(type(rotY) == "number", "Arg #6 (rotY) must be a number.")
	assert(type(rotZ) == "number", "Arg #7 (rotZ) must be a number.")
	assert(type(flag) == "number", "Arg #8 (flag) must be a number.")
	assert(type(amount) == "number", "Arg #9 (amount) must be a number.")
	assert(type(p9) == "number", "Arg #10 (p9) must be a number.")
	assert(type(p10) == "boolean", "Arg #11 (p10) must be a boolean.")
	assert(type(modelHash) == "number", "Arg #12 (modelHash) must be a number.")

	local result = native_call(0x891804727E0A98B7, pickupHash, posX, posY, posZ, rotX, rotY, rotZ, flag, amount, p9, p10, modelHash)
	return result:__tointeger()
end
natives.object.create_pickup_rotate = natives.OBJECT.CREATE_PICKUP_ROTATE

function natives.OBJECT.FORCE_PICKUP_ROTATE_FACE_UP() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.FORCE_PICKUP_ROTATE_FACE_UP' due to disabled trusted mode")

	local result = native_call(0x394CD08E31313C28)
end
natives.object.force_pickup_rotate_face_up = natives.OBJECT.FORCE_PICKUP_ROTATE_FACE_UP

function natives.OBJECT.SET_CUSTOM_PICKUP_WEAPON_HASH(--[[Hash]] pickupHash, --[[Pickup]] pickup) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.SET_CUSTOM_PICKUP_WEAPON_HASH' due to disabled trusted mode")

	assert(type(pickupHash) == "number", "Arg #1 (pickupHash) must be a number.")
	assert(type(pickup) == "number", "Arg #2 (pickup) must be a number.")

	local result = native_call(0x826D1EE4D1CAFC78, pickupHash, pickup)
end
natives.object.set_custom_pickup_weapon_hash = natives.OBJECT.SET_CUSTOM_PICKUP_WEAPON_HASH

--[[
Used for doing money drop
Pickup hashes: pastebin.com/8EuSv2r1

Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json
]]
function natives.OBJECT.CREATE_AMBIENT_PICKUP(--[[Hash]] pickupHash, --[[float]] posX, --[[float]] posY, --[[float]] posZ, --[[int]] flags, --[[int]] value, --[[Hash]] modelHash, --[[BOOL]] p7, --[[BOOL]] p8) -- Returns Pickup
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.CREATE_AMBIENT_PICKUP' due to disabled trusted mode")

	assert(type(pickupHash) == "number", "Arg #1 (pickupHash) must be a number.")
	assert(type(posX) == "number", "Arg #2 (posX) must be a number.")
	assert(type(posY) == "number", "Arg #3 (posY) must be a number.")
	assert(type(posZ) == "number", "Arg #4 (posZ) must be a number.")
	assert(type(flags) == "number", "Arg #5 (flags) must be a number.")
	assert(type(value) == "number", "Arg #6 (value) must be a number.")
	assert(type(modelHash) == "number", "Arg #7 (modelHash) must be a number.")
	assert(type(p7) == "boolean", "Arg #8 (p7) must be a boolean.")
	assert(type(p8) == "boolean", "Arg #9 (p8) must be a boolean.")

	local result = native_call(0x673966A0C0FD7171, pickupHash, posX, posY, posZ, flags, value, modelHash, p7, p8)
	return result:__tointeger()
end
natives.object.create_ambient_pickup = natives.OBJECT.CREATE_AMBIENT_PICKUP

function natives.OBJECT.CREATE_NON_NETWORKED_AMBIENT_PICKUP(--[[Hash]] pickupHash, --[[float]] posX, --[[float]] posY, --[[float]] posZ, --[[int]] flags, --[[int]] value, --[[Hash]] modelHash, --[[BOOL]] p7, --[[BOOL]] p8) -- Returns Pickup
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.CREATE_NON_NETWORKED_AMBIENT_PICKUP' due to disabled trusted mode")

	assert(type(pickupHash) == "number", "Arg #1 (pickupHash) must be a number.")
	assert(type(posX) == "number", "Arg #2 (posX) must be a number.")
	assert(type(posY) == "number", "Arg #3 (posY) must be a number.")
	assert(type(posZ) == "number", "Arg #4 (posZ) must be a number.")
	assert(type(flags) == "number", "Arg #5 (flags) must be a number.")
	assert(type(value) == "number", "Arg #6 (value) must be a number.")
	assert(type(modelHash) == "number", "Arg #7 (modelHash) must be a number.")
	assert(type(p7) == "boolean", "Arg #8 (p7) must be a boolean.")
	assert(type(p8) == "boolean", "Arg #9 (p8) must be a boolean.")

	local result = native_call(0x9C93764223E29C50, pickupHash, posX, posY, posZ, flags, value, modelHash, p7, p8)
	return result:__tointeger()
end
natives.object.create_non_networked_ambient_pickup = natives.OBJECT.CREATE_NON_NETWORKED_AMBIENT_PICKUP

function natives.OBJECT.BLOCK_PLAYERS_FOR_AMBIENT_PICKUP(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.BLOCK_PLAYERS_FOR_AMBIENT_PICKUP' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x1E3F1B1B891A2AAA, p0, p1)
end
natives.object.block_players_for_ambient_pickup = natives.OBJECT.BLOCK_PLAYERS_FOR_AMBIENT_PICKUP

--[[
Pickup hashes: pastebin.com/8EuSv2r1

Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json
]]
function natives.OBJECT.CREATE_PORTABLE_PICKUP(--[[Hash]] pickupHash, --[[float]] x, --[[float]] y, --[[float]] z, --[[BOOL]] placeOnGround, --[[Hash]] modelHash) -- Returns Object
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.CREATE_PORTABLE_PICKUP' due to disabled trusted mode")

	assert(type(pickupHash) == "number", "Arg #1 (pickupHash) must be a number.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")
	assert(type(placeOnGround) == "boolean", "Arg #5 (placeOnGround) must be a boolean.")
	assert(type(modelHash) == "number", "Arg #6 (modelHash) must be a number.")

	local result = native_call(0x2EAF1FDB2FB55698, pickupHash, x, y, z, placeOnGround, modelHash)
	return result:__tointeger()
end
natives.object.create_portable_pickup = natives.OBJECT.CREATE_PORTABLE_PICKUP

--[[
Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json
]]
function natives.OBJECT.CREATE_NON_NETWORKED_PORTABLE_PICKUP(--[[Hash]] pickupHash, --[[float]] x, --[[float]] y, --[[float]] z, --[[BOOL]] placeOnGround, --[[Hash]] modelHash) -- Returns Object
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.CREATE_NON_NETWORKED_PORTABLE_PICKUP' due to disabled trusted mode")

	assert(type(pickupHash) == "number", "Arg #1 (pickupHash) must be a number.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")
	assert(type(placeOnGround) == "boolean", "Arg #5 (placeOnGround) must be a boolean.")
	assert(type(modelHash) == "number", "Arg #6 (modelHash) must be a number.")

	local result = native_call(0x125494B98A21AAF7, pickupHash, x, y, z, placeOnGround, modelHash)
	return result:__tointeger()
end
natives.object.create_non_networked_portable_pickup = natives.OBJECT.CREATE_NON_NETWORKED_PORTABLE_PICKUP

function natives.OBJECT.ATTACH_PORTABLE_PICKUP_TO_PED(--[[Object]] pickupObject, --[[Ped]] ped) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.ATTACH_PORTABLE_PICKUP_TO_PED' due to disabled trusted mode")

	assert(type(pickupObject) == "number", "Arg #1 (pickupObject) must be a number.")
	assert(type(ped) == "number", "Arg #2 (ped) must be a number.")

	local result = native_call(0x8DC39368BDD57755, pickupObject, ped)
end
natives.object.attach_portable_pickup_to_ped = natives.OBJECT.ATTACH_PORTABLE_PICKUP_TO_PED

function natives.OBJECT.DETACH_PORTABLE_PICKUP_FROM_PED(--[[Object]] pickupObject) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.DETACH_PORTABLE_PICKUP_FROM_PED' due to disabled trusted mode")

	assert(type(pickupObject) == "number", "Arg #1 (pickupObject) must be a number.")

	local result = native_call(0xCF463D1E9A0AECB1, pickupObject)
end
natives.object.detach_portable_pickup_from_ped = natives.OBJECT.DETACH_PORTABLE_PICKUP_FROM_PED

function natives.OBJECT.FORCE_PORTABLE_PICKUP_LAST_ACCESSIBLE_POSITION_SETTING(--[[Object]] object) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.FORCE_PORTABLE_PICKUP_LAST_ACCESSIBLE_POSITION_SETTING' due to disabled trusted mode")

	assert(type(object) == "number", "Arg #1 (object) must be a number.")

	local result = native_call(0x5CE2E45A5CE2E45A, object)
end
natives.object.force_portable_pickup_last_accessible_position_setting = natives.OBJECT.FORCE_PORTABLE_PICKUP_LAST_ACCESSIBLE_POSITION_SETTING

function natives.OBJECT.HIDE_PORTABLE_PICKUP_WHEN_DETACHED(--[[Object]] pickupObject, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.HIDE_PORTABLE_PICKUP_WHEN_DETACHED' due to disabled trusted mode")

	assert(type(pickupObject) == "number", "Arg #1 (pickupObject) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x867458251D47CCB2, pickupObject, toggle)
end
natives.object.hide_portable_pickup_when_detached = natives.OBJECT.HIDE_PORTABLE_PICKUP_WHEN_DETACHED

function natives.OBJECT.SET_MAX_NUM_PORTABLE_PICKUPS_CARRIED_BY_PLAYER(--[[Hash]] modelHash, --[[int]] number) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.SET_MAX_NUM_PORTABLE_PICKUPS_CARRIED_BY_PLAYER' due to disabled trusted mode")

	assert(type(modelHash) == "number", "Arg #1 (modelHash) must be a number.")
	assert(type(number) == "number", "Arg #2 (number) must be a number.")

	local result = native_call(0x0BF3B3BD47D79C08, modelHash, number)
end
natives.object.set_max_num_portable_pickups_carried_by_player = natives.OBJECT.SET_MAX_NUM_PORTABLE_PICKUPS_CARRIED_BY_PLAYER

function natives.OBJECT.SET_LOCAL_PLAYER_CAN_COLLECT_PORTABLE_PICKUPS(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.SET_LOCAL_PLAYER_CAN_COLLECT_PORTABLE_PICKUPS' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x78857FC65CADB909, toggle)
end
natives.object.set_local_player_can_collect_portable_pickups = natives.OBJECT.SET_LOCAL_PLAYER_CAN_COLLECT_PORTABLE_PICKUPS

function natives.OBJECT.GET_SAFE_PICKUP_COORDS(--[[float]] x, --[[float]] y, --[[float]] z, --[[float]] p3, --[[float]] p4) -- Returns Vector3
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.GET_SAFE_PICKUP_COORDS' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")

	local result = native_call(0x6E16BC2503FF1FF0, x, y, z, p3, p4)
	return result:__tov3()
end
natives.object.get_safe_pickup_coords = natives.OBJECT.GET_SAFE_PICKUP_COORDS

--[[
Adds an area that seems to be related to pickup physics behavior.
Max amount of areas is 10. Only works in multiplayer.
]]
function natives.OBJECT.ADD_EXTENDED_PICKUP_PROBE_AREA(--[[float]] x, --[[float]] y, --[[float]] z, --[[float]] radius) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.ADD_EXTENDED_PICKUP_PROBE_AREA' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(radius) == "number", "Arg #4 (radius) must be a number.")

	local result = native_call(0xD4A7A435B3710D05, x, y, z, radius)
end
natives.object.add_extended_pickup_probe_area = natives.OBJECT.ADD_EXTENDED_PICKUP_PROBE_AREA

--[[
Clears all areas created by ADD_EXTENDED_PICKUP_PROBE_AREA
]]
function natives.OBJECT.CLEAR_EXTENDED_PICKUP_PROBE_AREAS() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.CLEAR_EXTENDED_PICKUP_PROBE_AREAS' due to disabled trusted mode")

	local result = native_call(0xB7C6D80FB371659A)
end
natives.object.clear_extended_pickup_probe_areas = natives.OBJECT.CLEAR_EXTENDED_PICKUP_PROBE_AREAS

function natives.OBJECT.GET_PICKUP_COORDS(--[[Pickup]] pickup) -- Returns Vector3
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.GET_PICKUP_COORDS' due to disabled trusted mode")

	assert(type(pickup) == "number", "Arg #1 (pickup) must be a number.")

	local result = native_call(0x225B8B35C88029B3, pickup)
	return result:__tov3()
end
natives.object.get_pickup_coords = natives.OBJECT.GET_PICKUP_COORDS

function natives.OBJECT.SUPPRESS_PICKUP_SOUND_FOR_PICKUP(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.SUPPRESS_PICKUP_SOUND_FOR_PICKUP' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x8DCA505A5C196F05, p0, p1)
end
natives.object.suppress_pickup_sound_for_pickup = natives.OBJECT.SUPPRESS_PICKUP_SOUND_FOR_PICKUP

--[[
Pickup hashes: pastebin.com/8EuSv2r1

Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json
]]
function natives.OBJECT.REMOVE_ALL_PICKUPS_OF_TYPE(--[[Hash]] pickupHash) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.REMOVE_ALL_PICKUPS_OF_TYPE' due to disabled trusted mode")

	assert(type(pickupHash) == "number", "Arg #1 (pickupHash) must be a number.")

	local result = native_call(0x27F9D613092159CF, pickupHash)
end
natives.object.remove_all_pickups_of_type = natives.OBJECT.REMOVE_ALL_PICKUPS_OF_TYPE

function natives.OBJECT.HAS_PICKUP_BEEN_COLLECTED(--[[Pickup]] pickup) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.HAS_PICKUP_BEEN_COLLECTED' due to disabled trusted mode")

	assert(type(pickup) == "number", "Arg #1 (pickup) must be a number.")

	local result = native_call(0x80EC48E6679313F9, pickup)
	return result:__tointeger() ~= 0
end
natives.object.has_pickup_been_collected = natives.OBJECT.HAS_PICKUP_BEEN_COLLECTED

function natives.OBJECT.REMOVE_PICKUP(--[[Pickup]] pickup) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.REMOVE_PICKUP' due to disabled trusted mode")

	assert(type(pickup) == "number", "Arg #1 (pickup) must be a number.")

	local result = native_call(0x3288D8ACAECD2AB2, pickup)
end
natives.object.remove_pickup = natives.OBJECT.REMOVE_PICKUP

--[[
Spawns one or more money pickups.

x: The X-component of the world position to spawn the money pickups at.
y: The Y-component of the world position to spawn the money pickups at.
z: The Z-component of the world position to spawn the money pickups at.
value: The combined value of the pickups (in dollars).
amount: The number of pickups to spawn.
model: The model to use, or 0 for default money model.

Example:
CREATE_MONEY_PICKUPS(x, y, z, 1000, 3, 0x684a97ae);

Spawns 3 spray cans that'll collectively give $1000 when picked up. (Three spray cans, each giving $334, $334, $332 = $1000).

==============================================

Max is 2000 in MP. So if you put the amount to 20, but the value to $400,000 eg. They will only be able to pickup 20 - $2,000 bags. So, $40,000
]]
function natives.OBJECT.CREATE_MONEY_PICKUPS(--[[float]] x, --[[float]] y, --[[float]] z, --[[int]] value, --[[int]] amount, --[[Hash]] model) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.CREATE_MONEY_PICKUPS' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(value) == "number", "Arg #4 (value) must be a number.")
	assert(type(amount) == "number", "Arg #5 (amount) must be a number.")
	assert(type(model) == "number", "Arg #6 (model) must be a number.")

	local result = native_call(0x0589B5E791CE9B2B, x, y, z, value, amount, model)
end
natives.object.create_money_pickups = natives.OBJECT.CREATE_MONEY_PICKUPS

function natives.OBJECT.DOES_PICKUP_EXIST(--[[Pickup]] pickup) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.DOES_PICKUP_EXIST' due to disabled trusted mode")

	assert(type(pickup) == "number", "Arg #1 (pickup) must be a number.")

	local result = native_call(0xAFC1CA75AD4074D1, pickup)
	return result:__tointeger() ~= 0
end
natives.object.does_pickup_exist = natives.OBJECT.DOES_PICKUP_EXIST

function natives.OBJECT.DOES_PICKUP_OBJECT_EXIST(--[[Object]] pickupObject) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.DOES_PICKUP_OBJECT_EXIST' due to disabled trusted mode")

	assert(type(pickupObject) == "number", "Arg #1 (pickupObject) must be a number.")

	local result = native_call(0xD9EFB6DBF7DAAEA3, pickupObject)
	return result:__tointeger() ~= 0
end
natives.object.does_pickup_object_exist = natives.OBJECT.DOES_PICKUP_OBJECT_EXIST

function natives.OBJECT.GET_PICKUP_OBJECT(--[[Pickup]] pickup) -- Returns Object
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.GET_PICKUP_OBJECT' due to disabled trusted mode")

	assert(type(pickup) == "number", "Arg #1 (pickup) must be a number.")

	local result = native_call(0x5099BC55630B25AE, pickup)
	return result:__tointeger()
end
natives.object.get_pickup_object = natives.OBJECT.GET_PICKUP_OBJECT

function natives.OBJECT.IS_OBJECT_A_PICKUP(--[[Object]] object) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.IS_OBJECT_A_PICKUP' due to disabled trusted mode")

	assert(type(object) == "number", "Arg #1 (object) must be a number.")

	local result = native_call(0xFC481C641EBBD27D, object)
	return result:__tointeger() ~= 0
end
natives.object.is_object_a_pickup = natives.OBJECT.IS_OBJECT_A_PICKUP

function natives.OBJECT.IS_OBJECT_A_PORTABLE_PICKUP(--[[Object]] object) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.IS_OBJECT_A_PORTABLE_PICKUP' due to disabled trusted mode")

	assert(type(object) == "number", "Arg #1 (object) must be a number.")

	local result = native_call(0x0378C08504160D0D, object)
	return result:__tointeger() ~= 0
end
natives.object.is_object_a_portable_pickup = natives.OBJECT.IS_OBJECT_A_PORTABLE_PICKUP

--[[
Pickup hashes: pastebin.com/8EuSv2r1

Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json
]]
function natives.OBJECT.DOES_PICKUP_OF_TYPE_EXIST_IN_AREA(--[[Hash]] pickupHash, --[[float]] x, --[[float]] y, --[[float]] z, --[[float]] radius) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.DOES_PICKUP_OF_TYPE_EXIST_IN_AREA' due to disabled trusted mode")

	assert(type(pickupHash) == "number", "Arg #1 (pickupHash) must be a number.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")
	assert(type(radius) == "number", "Arg #5 (radius) must be a number.")

	local result = native_call(0xF9C36251F6E48E33, pickupHash, x, y, z, radius)
	return result:__tointeger() ~= 0
end
natives.object.does_pickup_of_type_exist_in_area = natives.OBJECT.DOES_PICKUP_OF_TYPE_EXIST_IN_AREA

function natives.OBJECT.SET_PICKUP_REGENERATION_TIME(--[[Pickup]] pickup, --[[int]] duration) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.SET_PICKUP_REGENERATION_TIME' due to disabled trusted mode")

	assert(type(pickup) == "number", "Arg #1 (pickup) must be a number.")
	assert(type(duration) == "number", "Arg #2 (duration) must be a number.")

	local result = native_call(0x78015C9B4B3ECC9D, pickup, duration)
end
natives.object.set_pickup_regeneration_time = natives.OBJECT.SET_PICKUP_REGENERATION_TIME

function natives.OBJECT.FORCE_PICKUP_REGENERATE(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.FORCE_PICKUP_REGENERATE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x758A5C1B3B1E1990, p0)
end
natives.object.force_pickup_regenerate = natives.OBJECT.FORCE_PICKUP_REGENERATE

--[[
Disabling/enabling a player from getting pickups. From the scripts:

OBJECT::_616093EC6B139DD9(PLAYER::PLAYER_ID(), ${pickup_portable_package}, 0);
OBJECT::_616093EC6B139DD9(PLAYER::PLAYER_ID(), ${pickup_portable_package}, 0);
OBJECT::_616093EC6B139DD9(PLAYER::PLAYER_ID(), ${pickup_portable_package}, 1);
OBJECT::_616093EC6B139DD9(PLAYER::PLAYER_ID(), ${pickup_portable_package}, 0);
OBJECT::_616093EC6B139DD9(PLAYER::PLAYER_ID(), ${pickup_armour_standard}, 0);
OBJECT::_616093EC6B139DD9(PLAYER::PLAYER_ID(), ${pickup_armour_standard}, 1);

Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json
]]
function natives.OBJECT.SET_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_OF_TYPE(--[[Player]] player, --[[Hash]] pickupHash, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.SET_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_OF_TYPE' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(pickupHash) == "number", "Arg #2 (pickupHash) must be a number.")
	assert(type(toggle) == "boolean", "Arg #3 (toggle) must be a boolean.")

	local result = native_call(0x616093EC6B139DD9, player, pickupHash, toggle)
end
natives.object.set_player_permitted_to_collect_pickups_of_type = natives.OBJECT.SET_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_OF_TYPE

--[[
Maximum amount of pickup models that can be disallowed is 30.
]]
function natives.OBJECT.SET_LOCAL_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_WITH_MODEL(--[[Hash]] modelHash, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.SET_LOCAL_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_WITH_MODEL' due to disabled trusted mode")

	assert(type(modelHash) == "number", "Arg #1 (modelHash) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x88EAEC617CD26926, modelHash, toggle)
end
natives.object.set_local_player_permitted_to_collect_pickups_with_model = natives.OBJECT.SET_LOCAL_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_WITH_MODEL

--[[
Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json
]]
function natives.OBJECT.ALLOW_ALL_PLAYERS_TO_COLLECT_PICKUPS_OF_TYPE(--[[Hash]] pickupHash) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.ALLOW_ALL_PLAYERS_TO_COLLECT_PICKUPS_OF_TYPE' due to disabled trusted mode")

	assert(type(pickupHash) == "number", "Arg #1 (pickupHash) must be a number.")

	local result = native_call(0xFDC07C58E8AAB715, pickupHash)
end
natives.object.allow_all_players_to_collect_pickups_of_type = natives.OBJECT.ALLOW_ALL_PLAYERS_TO_COLLECT_PICKUPS_OF_TYPE

function natives.OBJECT.SET_TEAM_PICKUP_OBJECT(--[[Object]] object, --[[Any]] p1, --[[BOOL]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.SET_TEAM_PICKUP_OBJECT' due to disabled trusted mode")

	assert(type(object) == "number", "Arg #1 (object) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")

	local result = native_call(0x53E0DF1A2A3CF0CA, object, p1, p2)
end
natives.object.set_team_pickup_object = natives.OBJECT.SET_TEAM_PICKUP_OBJECT

function natives.OBJECT.PREVENT_COLLECTION_OF_PORTABLE_PICKUP(--[[Object]] object, --[[BOOL]] p1, --[[BOOL]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.PREVENT_COLLECTION_OF_PORTABLE_PICKUP' due to disabled trusted mode")

	assert(type(object) == "number", "Arg #1 (object) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")

	local result = native_call(0x92AEFB5F6E294023, object, p1, p2)
end
natives.object.prevent_collection_of_portable_pickup = natives.OBJECT.PREVENT_COLLECTION_OF_PORTABLE_PICKUP

function natives.OBJECT.SET_PICKUP_OBJECT_GLOW_WHEN_UNCOLLECTABLE(--[[Pickup]] pickup, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.SET_PICKUP_OBJECT_GLOW_WHEN_UNCOLLECTABLE' due to disabled trusted mode")

	assert(type(pickup) == "number", "Arg #1 (pickup) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x27F248C3FEBFAAD3, pickup, toggle)
end
natives.object.set_pickup_object_glow_when_uncollectable = natives.OBJECT.SET_PICKUP_OBJECT_GLOW_WHEN_UNCOLLECTABLE

--[[
p1 is always 0.51. This native is called before SET_PICKUP_REGENERATION_TIME in all occurances.
]]
function natives.OBJECT.SET_PICKUP_GLOW_OFFSET(--[[Pickup]] pickup, --[[float]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.SET_PICKUP_GLOW_OFFSET' due to disabled trusted mode")

	assert(type(pickup) == "number", "Arg #1 (pickup) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x0596843B34B95CE5, pickup, p1)
end
natives.object.set_pickup_glow_offset = natives.OBJECT.SET_PICKUP_GLOW_OFFSET

--[[
p1 is always -0.2 in scripts and p2 is always true in scripts.
]]
function natives.OBJECT.SET_PICKUP_OBJECT_GLOW_OFFSET(--[[Pickup]] pickup, --[[float]] p1, --[[BOOL]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.SET_PICKUP_OBJECT_GLOW_OFFSET' due to disabled trusted mode")

	assert(type(pickup) == "number", "Arg #1 (pickup) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")

	local result = native_call(0xA08FE5E49BDC39DD, pickup, p1, p2)
end
natives.object.set_pickup_object_glow_offset = natives.OBJECT.SET_PICKUP_OBJECT_GLOW_OFFSET

function natives.OBJECT.SET_OBJECT_GLOW_IN_SAME_TEAM(--[[Pickup]] pickup) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.SET_OBJECT_GLOW_IN_SAME_TEAM' due to disabled trusted mode")

	assert(type(pickup) == "number", "Arg #1 (pickup) must be a number.")

	local result = native_call(0x62454A641B41F3C5, pickup)
end
natives.object.set_object_glow_in_same_team = natives.OBJECT.SET_OBJECT_GLOW_IN_SAME_TEAM

function natives.OBJECT.SET_PICKUP_OBJECT_ARROW_MARKER(--[[Pickup]] pickup, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.SET_PICKUP_OBJECT_ARROW_MARKER' due to disabled trusted mode")

	assert(type(pickup) == "number", "Arg #1 (pickup) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x39A5FB7EAF150840, pickup, toggle)
end
natives.object.set_pickup_object_arrow_marker = natives.OBJECT.SET_PICKUP_OBJECT_ARROW_MARKER

function natives.OBJECT.ALLOW_PICKUP_ARROW_MARKER_WHEN_UNCOLLECTABLE(--[[Pickup]] pickup, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.ALLOW_PICKUP_ARROW_MARKER_WHEN_UNCOLLECTABLE' due to disabled trusted mode")

	assert(type(pickup) == "number", "Arg #1 (pickup) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x834344A414C7C85D, pickup, toggle)
end
natives.object.allow_pickup_arrow_marker_when_uncollectable = natives.OBJECT.ALLOW_PICKUP_ARROW_MARKER_WHEN_UNCOLLECTABLE

function natives.OBJECT.GET_DEFAULT_AMMO_FOR_WEAPON_PICKUP(--[[Hash]] pickupHash) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.GET_DEFAULT_AMMO_FOR_WEAPON_PICKUP' due to disabled trusted mode")

	assert(type(pickupHash) == "number", "Arg #1 (pickupHash) must be a number.")

	local result = native_call(0xDB41D07A45A6D4B7, pickupHash)
	return result:__tointeger()
end
natives.object.get_default_ammo_for_weapon_pickup = natives.OBJECT.GET_DEFAULT_AMMO_FOR_WEAPON_PICKUP

function natives.OBJECT.SET_PICKUP_GENERATION_RANGE_MULTIPLIER(--[[float]] multiplier) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.SET_PICKUP_GENERATION_RANGE_MULTIPLIER' due to disabled trusted mode")

	assert(type(multiplier) == "number", "Arg #1 (multiplier) must be a number.")

	local result = native_call(0x318516E02DE3ECE2, multiplier)
end
natives.object.set_pickup_generation_range_multiplier = natives.OBJECT.SET_PICKUP_GENERATION_RANGE_MULTIPLIER

function natives.OBJECT.GET_PICKUP_GENERATION_RANGE_MULTIPLIER() -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.GET_PICKUP_GENERATION_RANGE_MULTIPLIER' due to disabled trusted mode")

	local result = native_call(0xB3ECA65C7317F174)
	return result:__tonumber()
end
natives.object.get_pickup_generation_range_multiplier = natives.OBJECT.GET_PICKUP_GENERATION_RANGE_MULTIPLIER

function natives.OBJECT.SET_ONLY_ALLOW_AMMO_COLLECTION_WHEN_LOW(--[[BOOL]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.SET_ONLY_ALLOW_AMMO_COLLECTION_WHEN_LOW' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0x31F924B53EADDF65, p0)
end
natives.object.set_only_allow_ammo_collection_when_low = natives.OBJECT.SET_ONLY_ALLOW_AMMO_COLLECTION_WHEN_LOW

function natives.OBJECT.SET_PICKUP_UNCOLLECTABLE(--[[Pickup]] pickup, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.SET_PICKUP_UNCOLLECTABLE' due to disabled trusted mode")

	assert(type(pickup) == "number", "Arg #1 (pickup) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x1C1B69FAE509BA97, pickup, toggle)
end
natives.object.set_pickup_uncollectable = natives.OBJECT.SET_PICKUP_UNCOLLECTABLE

function natives.OBJECT.SET_PICKUP_TRANSPARENT_WHEN_UNCOLLECTABLE(--[[Pickup]] pickup, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.SET_PICKUP_TRANSPARENT_WHEN_UNCOLLECTABLE' due to disabled trusted mode")

	assert(type(pickup) == "number", "Arg #1 (pickup) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x858EC9FD25DE04AA, pickup, toggle)
end
natives.object.set_pickup_transparent_when_uncollectable = natives.OBJECT.SET_PICKUP_TRANSPARENT_WHEN_UNCOLLECTABLE

function natives.OBJECT.SET_PICKUP_HIDDEN_WHEN_UNCOLLECTABLE(--[[Pickup]] pickup, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.SET_PICKUP_HIDDEN_WHEN_UNCOLLECTABLE' due to disabled trusted mode")

	assert(type(pickup) == "number", "Arg #1 (pickup) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x3ED2B83AB2E82799, pickup, toggle)
end
natives.object.set_pickup_hidden_when_uncollectable = natives.OBJECT.SET_PICKUP_HIDDEN_WHEN_UNCOLLECTABLE

function natives.OBJECT.SET_PICKUP_OBJECT_TRANSPARENT_WHEN_UNCOLLECTABLE(--[[Pickup]] pickup, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.SET_PICKUP_OBJECT_TRANSPARENT_WHEN_UNCOLLECTABLE' due to disabled trusted mode")

	assert(type(pickup) == "number", "Arg #1 (pickup) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x8881C98A31117998, pickup, toggle)
end
natives.object.set_pickup_object_transparent_when_uncollectable = natives.OBJECT.SET_PICKUP_OBJECT_TRANSPARENT_WHEN_UNCOLLECTABLE

--[[
p0 is either 0 or 50 in scripts.
]]
function natives.OBJECT.SET_PICKUP_OBJECT_ALPHA_WHEN_TRANSPARENT(--[[int]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.SET_PICKUP_OBJECT_ALPHA_WHEN_TRANSPARENT' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x8CFF648FBD7330F1, p0)
end
natives.object.set_pickup_object_alpha_when_transparent = natives.OBJECT.SET_PICKUP_OBJECT_ALPHA_WHEN_TRANSPARENT

function natives.OBJECT.SET_PORTABLE_PICKUP_PERSIST(--[[Pickup]] pickup, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.SET_PORTABLE_PICKUP_PERSIST' due to disabled trusted mode")

	assert(type(pickup) == "number", "Arg #1 (pickup) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x46F3ADD1E2D5BAF2, pickup, toggle)
end
natives.object.set_portable_pickup_persist = natives.OBJECT.SET_PORTABLE_PICKUP_PERSIST

function natives.OBJECT.ALLOW_PORTABLE_PICKUP_TO_MIGRATE_TO_NON_PARTICIPANTS(--[[Pickup]] pickup, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.ALLOW_PORTABLE_PICKUP_TO_MIGRATE_TO_NON_PARTICIPANTS' due to disabled trusted mode")

	assert(type(pickup) == "number", "Arg #1 (pickup) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x641F272B52E2F0F8, pickup, toggle)
end
natives.object.allow_portable_pickup_to_migrate_to_non_participants = natives.OBJECT.ALLOW_PORTABLE_PICKUP_TO_MIGRATE_TO_NON_PARTICIPANTS

function natives.OBJECT.FORCE_ACTIVATE_PHYSICS_ON_UNFIXED_PICKUP(--[[Pickup]] pickup, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.FORCE_ACTIVATE_PHYSICS_ON_UNFIXED_PICKUP' due to disabled trusted mode")

	assert(type(pickup) == "number", "Arg #1 (pickup) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x4C134B4DF76025D0, pickup, toggle)
end
natives.object.force_activate_physics_on_unfixed_pickup = natives.OBJECT.FORCE_ACTIVATE_PHYSICS_ON_UNFIXED_PICKUP

function natives.OBJECT.ALLOW_PICKUP_BY_NONE_PARTICIPANT(--[[Pickup]] pickup, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.ALLOW_PICKUP_BY_NONE_PARTICIPANT' due to disabled trusted mode")

	assert(type(pickup) == "number", "Arg #1 (pickup) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xAA059C615DE9DD03, pickup, toggle)
end
natives.object.allow_pickup_by_none_participant = natives.OBJECT.ALLOW_PICKUP_BY_NONE_PARTICIPANT

--[[
enum ePickupRewardType
{
    PICKUP_REWARD_TYPE_AMMO = (1 << 0),
    PICKUP_REWARD_TYPE_BULLET_MP = (1 << 1),
    PICKUP_REWARD_TYPE_MISSILE_MP = (1 << 2),
    PICKUP_REWARD_TYPE_GRENADE_LAUNCHER_MP = (1 << 3),
    PICKUP_REWARD_TYPE_ARMOUR = (1 << 4),
    PICKUP_REWARD_TYPE_HEALTH = (1 << 5),
    PICKUP_REWARD_TYPE_HEALTH_VARIABLE = PICKUP_REWARD_TYPE_HEALTH,
    PICKUP_REWARD_TYPE_MONEY_FIXED = (1 << 6),
    PICKUP_REWARD_TYPE_MONEY_VARIABLE = PICKUP_REWARD_TYPE_MONEY_FIXED,
    PICKUP_REWARD_TYPE_WEAPON = (1 << 7),
    PICKUP_REWARD_TYPE_STAT = (1 << 8),
    PICKUP_REWARD_TYPE_STAT_VARIABLE = PICKUP_REWARD_TYPE_STAT,
    PICKUP_REWARD_TYPE_VEHICLE_FIX = (1 << 9),
    PICKUP_REWARD_TYPE_FIREWORK_MP = (1 << 10),
};
]]
function natives.OBJECT.SUPPRESS_PICKUP_REWARD_TYPE(--[[int]] rewardType, --[[BOOL]] suppress) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.SUPPRESS_PICKUP_REWARD_TYPE' due to disabled trusted mode")

	assert(type(rewardType) == "number", "Arg #1 (rewardType) must be a number.")
	assert(type(suppress) == "boolean", "Arg #2 (suppress) must be a boolean.")

	local result = native_call(0xF92099527DB8E2A7, rewardType, suppress)
end
natives.object.suppress_pickup_reward_type = natives.OBJECT.SUPPRESS_PICKUP_REWARD_TYPE

function natives.OBJECT.CLEAR_ALL_PICKUP_REWARD_TYPE_SUPPRESSION() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.CLEAR_ALL_PICKUP_REWARD_TYPE_SUPPRESSION' due to disabled trusted mode")

	local result = native_call(0xA2C1F5E92AFE49ED)
end
natives.object.clear_all_pickup_reward_type_suppression = natives.OBJECT.CLEAR_ALL_PICKUP_REWARD_TYPE_SUPPRESSION

function natives.OBJECT.CLEAR_PICKUP_REWARD_TYPE_SUPPRESSION(--[[int]] rewardType) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.CLEAR_PICKUP_REWARD_TYPE_SUPPRESSION' due to disabled trusted mode")

	assert(type(rewardType) == "number", "Arg #1 (rewardType) must be a number.")

	local result = native_call(0x762DB2D380B48D04, rewardType)
end
natives.object.clear_pickup_reward_type_suppression = natives.OBJECT.CLEAR_PICKUP_REWARD_TYPE_SUPPRESSION

--[[
draws circular marker at pos
-1 = none
0 = red
1 = green
2 = blue
3 = green larger
4 = nothing
5 = green small
]]
function natives.OBJECT.RENDER_FAKE_PICKUP_GLOW(--[[float]] x, --[[float]] y, --[[float]] z, --[[int]] colorIndex) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.RENDER_FAKE_PICKUP_GLOW' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(colorIndex) == "number", "Arg #4 (colorIndex) must be a number.")

	local result = native_call(0x3430676B11CDF21D, x, y, z, colorIndex)
end
natives.object.render_fake_pickup_glow = natives.OBJECT.RENDER_FAKE_PICKUP_GLOW

function natives.OBJECT.SET_PICKUP_OBJECT_COLLECTABLE_IN_VEHICLE(--[[Pickup]] pickup) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.SET_PICKUP_OBJECT_COLLECTABLE_IN_VEHICLE' due to disabled trusted mode")

	assert(type(pickup) == "number", "Arg #1 (pickup) must be a number.")

	local result = native_call(0x7813E8B8C4AE4799, pickup)
end
natives.object.set_pickup_object_collectable_in_vehicle = natives.OBJECT.SET_PICKUP_OBJECT_COLLECTABLE_IN_VEHICLE

function natives.OBJECT.SET_PICKUP_TRACK_DAMAGE_EVENTS(--[[Pickup]] pickup, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.SET_PICKUP_TRACK_DAMAGE_EVENTS' due to disabled trusted mode")

	assert(type(pickup) == "number", "Arg #1 (pickup) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xBFFE53AE7E67FCDC, pickup, toggle)
end
natives.object.set_pickup_track_damage_events = natives.OBJECT.SET_PICKUP_TRACK_DAMAGE_EVENTS

--[[
Sets entity+38 to C (when false) or 0xFF3f (when true)
]]
function natives.OBJECT.SET_ENTITY_FLAG_SUPPRESS_SHADOW(--[[Entity]] entity, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.SET_ENTITY_FLAG_SUPPRESS_SHADOW' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xD05A3241B9A86F19, entity, toggle)
end
natives.object.set_entity_flag_suppress_shadow = natives.OBJECT.SET_ENTITY_FLAG_SUPPRESS_SHADOW

function natives.OBJECT.SET_ENTITY_FLAG_RENDER_SMALL_SHADOW(--[[Object]] object, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.SET_ENTITY_FLAG_RENDER_SMALL_SHADOW' due to disabled trusted mode")

	assert(type(object) == "number", "Arg #1 (object) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xB2D0BDE54F0E8E5A, object, toggle)
end
natives.object.set_entity_flag_render_small_shadow = natives.OBJECT.SET_ENTITY_FLAG_RENDER_SMALL_SHADOW

--[[
Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json
]]
function natives.OBJECT.GET_WEAPON_TYPE_FROM_PICKUP_TYPE(--[[Hash]] pickupHash) -- Returns Hash
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.GET_WEAPON_TYPE_FROM_PICKUP_TYPE' due to disabled trusted mode")

	assert(type(pickupHash) == "number", "Arg #1 (pickupHash) must be a number.")

	local result = native_call(0x08F96CA6C551AD51, pickupHash)
	return result:__tointeger()
end
natives.object.get_weapon_type_from_pickup_type = natives.OBJECT.GET_WEAPON_TYPE_FROM_PICKUP_TYPE

--[[
Returns the pickup hash for the given weapon hash
]]
function natives.OBJECT.GET_PICKUP_TYPE_FROM_WEAPON_HASH(--[[Hash]] weaponHash) -- Returns Hash
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.GET_PICKUP_TYPE_FROM_WEAPON_HASH' due to disabled trusted mode")

	assert(type(weaponHash) == "number", "Arg #1 (weaponHash) must be a number.")

	local result = native_call(0xD6429A016084F1A5, weaponHash)
	return result:__tointeger()
end
natives.object.get_pickup_type_from_weapon_hash = natives.OBJECT.GET_PICKUP_TYPE_FROM_WEAPON_HASH

function natives.OBJECT.IS_PICKUP_WEAPON_OBJECT_VALID(--[[Object]] object) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.IS_PICKUP_WEAPON_OBJECT_VALID' due to disabled trusted mode")

	assert(type(object) == "number", "Arg #1 (object) must be a number.")

	local result = native_call(0x11D1E53A726891FE, object)
	return result:__tointeger() ~= 0
end
natives.object.is_pickup_weapon_object_valid = natives.OBJECT.IS_PICKUP_WEAPON_OBJECT_VALID

function natives.OBJECT.GET_OBJECT_TINT_INDEX(--[[Object]] object) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.GET_OBJECT_TINT_INDEX' due to disabled trusted mode")

	assert(type(object) == "number", "Arg #1 (object) must be a number.")

	local result = native_call(0xE84EB93729C5F36A, object)
	return result:__tointeger()
end
natives.object.get_object_tint_index = natives.OBJECT.GET_OBJECT_TINT_INDEX

--[[
enum ObjectPaintVariants
{
 Pacific = 0,
  Azure = 1,
    Nautical = 2,
 Continental = 3,
  Battleship = 4,
   Intrepid = 5,
 Uniform = 6,
  Classico = 7,
 Mediterranean = 8,
    Command = 9,
  Mariner = 10,
 Ruby = 11,
    Vintage = 12,
 Pristine = 13,
    Merchant = 14,
    Voyager = 15
};
]]
function natives.OBJECT.SET_OBJECT_TINT_INDEX(--[[Object]] object, --[[int]] textureVariation) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.SET_OBJECT_TINT_INDEX' due to disabled trusted mode")

	assert(type(object) == "number", "Arg #1 (object) must be a number.")
	assert(type(textureVariation) == "number", "Arg #2 (textureVariation) must be a number.")

	local result = native_call(0x971DA0055324D033, object, textureVariation)
end
natives.object.set_object_tint_index = natives.OBJECT.SET_OBJECT_TINT_INDEX

function natives.OBJECT.SET_TINT_INDEX_CLOSEST_BUILDING_OF_TYPE(--[[float]] x, --[[float]] y, --[[float]] z, --[[float]] radius, --[[Hash]] modelHash, --[[int]] textureVariation) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.SET_TINT_INDEX_CLOSEST_BUILDING_OF_TYPE' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(radius) == "number", "Arg #4 (radius) must be a number.")
	assert(type(modelHash) == "number", "Arg #5 (modelHash) must be a number.")
	assert(type(textureVariation) == "number", "Arg #6 (textureVariation) must be a number.")

	local result = native_call(0xF12E33034D887F66, x, y, z, radius, modelHash, textureVariation)
	return result:__tointeger() ~= 0
end
natives.object.set_tint_index_closest_building_of_type = natives.OBJECT.SET_TINT_INDEX_CLOSEST_BUILDING_OF_TYPE

function natives.OBJECT.SET_PROP_TINT_INDEX(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.SET_PROP_TINT_INDEX' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x31574B1B41268673, p0, p1)
end
natives.object.set_prop_tint_index = natives.OBJECT.SET_PROP_TINT_INDEX

function natives.OBJECT.SET_PROP_LIGHT_COLOR(--[[Object]] object, --[[BOOL]] p1, --[[int]] r, --[[int]] g, --[[int]] b) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.SET_PROP_LIGHT_COLOR' due to disabled trusted mode")

	assert(type(object) == "number", "Arg #1 (object) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(r) == "number", "Arg #3 (r) must be a number.")
	assert(type(g) == "number", "Arg #4 (g) must be a number.")
	assert(type(b) == "number", "Arg #5 (b) must be a number.")

	local result = native_call(0x5F048334B4A4E774, object, p1, r, g, b)
	return result:__tointeger()
end
natives.object.set_prop_light_color = natives.OBJECT.SET_PROP_LIGHT_COLOR

function natives.OBJECT.IS_PROP_LIGHT_OVERRIDEN(--[[Object]] object) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.IS_PROP_LIGHT_OVERRIDEN' due to disabled trusted mode")

	assert(type(object) == "number", "Arg #1 (object) must be a number.")

	local result = native_call(0xADF084FB8F075D06, object)
	return result:__tointeger() ~= 0
end
natives.object.is_prop_light_overriden = natives.OBJECT.IS_PROP_LIGHT_OVERRIDEN

function natives.OBJECT.SET_OBJECT_IS_VISIBLE_IN_MIRRORS(--[[Object]] object, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.SET_OBJECT_IS_VISIBLE_IN_MIRRORS' due to disabled trusted mode")

	assert(type(object) == "number", "Arg #1 (object) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x3B2FD68DB5F8331C, object, toggle)
end
natives.object.set_object_is_visible_in_mirrors = natives.OBJECT.SET_OBJECT_IS_VISIBLE_IN_MIRRORS

function natives.OBJECT.SET_OBJECT_SPEED_BOOST_AMOUNT(--[[Object]] object, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.SET_OBJECT_SPEED_BOOST_AMOUNT' due to disabled trusted mode")

	assert(type(object) == "number", "Arg #1 (object) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x96EE0EBA0163DF80, object, p1)
end
natives.object.set_object_speed_boost_amount = natives.OBJECT.SET_OBJECT_SPEED_BOOST_AMOUNT

function natives.OBJECT.SET_OBJECT_SPEED_BOOST_DURATION(--[[Object]] object, --[[float]] duration) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.SET_OBJECT_SPEED_BOOST_DURATION' due to disabled trusted mode")

	assert(type(object) == "number", "Arg #1 (object) must be a number.")
	assert(type(duration) == "number", "Arg #2 (duration) must be a number.")

	local result = native_call(0xDF6CA0330F2E737B, object, duration)
end
natives.object.set_object_speed_boost_duration = natives.OBJECT.SET_OBJECT_SPEED_BOOST_DURATION

--[[
returns pickup hash.

Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json
]]
function natives.OBJECT.CONVERT_OLD_PICKUP_TYPE_TO_NEW(--[[Hash]] pickupHash) -- Returns Hash
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.CONVERT_OLD_PICKUP_TYPE_TO_NEW' due to disabled trusted mode")

	assert(type(pickupHash) == "number", "Arg #1 (pickupHash) must be a number.")

	local result = native_call(0x5EAAD83F8CFB4575, pickupHash)
	return result:__tointeger()
end
natives.object.convert_old_pickup_type_to_new = natives.OBJECT.CONVERT_OLD_PICKUP_TYPE_TO_NEW

function natives.OBJECT.SET_FORCE_OBJECT_THIS_FRAME(--[[float]] x, --[[float]] y, --[[float]] z, --[[float]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.SET_FORCE_OBJECT_THIS_FRAME' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0xF538081986E49E9D, x, y, z, p3)
end
natives.object.set_force_object_this_frame = natives.OBJECT.SET_FORCE_OBJECT_THIS_FRAME

--[[
is this like setting is as no longer needed?
]]
function natives.OBJECT.ONLY_CLEAN_UP_OBJECT_WHEN_OUT_OF_RANGE(--[[Object]] object) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.ONLY_CLEAN_UP_OBJECT_WHEN_OUT_OF_RANGE' due to disabled trusted mode")

	assert(type(object) == "number", "Arg #1 (object) must be a number.")

	local result = native_call(0xADBE4809F19F927A, object)
end
natives.object.only_clean_up_object_when_out_of_range = natives.OBJECT.ONLY_CLEAN_UP_OBJECT_WHEN_OUT_OF_RANGE

function natives.OBJECT.SET_DISABLE_COLLISIONS_BETWEEN_CARS_AND_CAR_PARACHUTE(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.SET_DISABLE_COLLISIONS_BETWEEN_CARS_AND_CAR_PARACHUTE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x8CAAB2BD3EA58BD4, p0)
end
natives.object.set_disable_collisions_between_cars_and_car_parachute = natives.OBJECT.SET_DISABLE_COLLISIONS_BETWEEN_CARS_AND_CAR_PARACHUTE

function natives.OBJECT.SET_PROJECTILES_SHOULD_EXPLODE_ON_CONTACT(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.SET_PROJECTILES_SHOULD_EXPLODE_ON_CONTACT' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x63ECF581BC70E363, p0, p1)
end
natives.object.set_projectiles_should_explode_on_contact = natives.OBJECT.SET_PROJECTILES_SHOULD_EXPLODE_ON_CONTACT

--[[
Activate the physics to: "xs_prop_arena_{flipper,wall,bollard,turntable,pit}"
]]
function natives.OBJECT.SET_DRIVE_ARTICULATED_JOINT(--[[Object]] object, --[[BOOL]] toggle, --[[int]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.SET_DRIVE_ARTICULATED_JOINT' due to disabled trusted mode")

	assert(type(object) == "number", "Arg #1 (object) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0x911024442F4898F0, object, toggle, p2)
end
natives.object.set_drive_articulated_joint = natives.OBJECT.SET_DRIVE_ARTICULATED_JOINT

function natives.OBJECT.SET_DRIVE_ARTICULATED_JOINT_WITH_INFLICTOR(--[[Object]] object, --[[BOOL]] toggle, --[[int]] p2, --[[Ped]] ped) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.SET_DRIVE_ARTICULATED_JOINT_WITH_INFLICTOR' due to disabled trusted mode")

	assert(type(object) == "number", "Arg #1 (object) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(ped) == "number", "Arg #4 (ped) must be a number.")

	local result = native_call(0xB20834A7DD3D8896, object, toggle, p2, ped)
end
natives.object.set_drive_articulated_joint_with_inflictor = natives.OBJECT.SET_DRIVE_ARTICULATED_JOINT_WITH_INFLICTOR

function natives.OBJECT.SET_OBJECT_IS_A_PRESSURE_PLATE(--[[Object]] object, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.SET_OBJECT_IS_A_PRESSURE_PLATE' due to disabled trusted mode")

	assert(type(object) == "number", "Arg #1 (object) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x734E1714D077DA9A, object, toggle)
end
natives.object.set_object_is_a_pressure_plate = natives.OBJECT.SET_OBJECT_IS_A_PRESSURE_PLATE

function natives.OBJECT.SET_WEAPON_IMPACTS_APPLY_GREATER_FORCE(--[[Object]] object, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.SET_WEAPON_IMPACTS_APPLY_GREATER_FORCE' due to disabled trusted mode")

	assert(type(object) == "number", "Arg #1 (object) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0x1A6CBB06E2D0D79D, object, p1)
end
natives.object.set_weapon_impacts_apply_greater_force = natives.OBJECT.SET_WEAPON_IMPACTS_APPLY_GREATER_FORCE

function natives.OBJECT.GET_IS_ARTICULATED_JOINT_AT_MIN_ANGLE(--[[Object]] object, --[[Any]] p1) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.GET_IS_ARTICULATED_JOINT_AT_MIN_ANGLE' due to disabled trusted mode")

	assert(type(object) == "number", "Arg #1 (object) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x43C677F1E1158005, object, p1)
	return result:__tointeger() ~= 0
end
natives.object.get_is_articulated_joint_at_min_angle = natives.OBJECT.GET_IS_ARTICULATED_JOINT_AT_MIN_ANGLE

function natives.OBJECT.GET_IS_ARTICULATED_JOINT_AT_MAX_ANGLE(--[[Any]] p0, --[[Any]] p1) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.GET_IS_ARTICULATED_JOINT_AT_MAX_ANGLE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x3BD770D281982DB5, p0, p1)
	return result:__tointeger()
end
natives.object.get_is_articulated_joint_at_max_angle = natives.OBJECT.GET_IS_ARTICULATED_JOINT_AT_MAX_ANGLE

function natives.OBJECT.SET_IS_OBJECT_ARTICULATED(--[[Object]] object, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.SET_IS_OBJECT_ARTICULATED' due to disabled trusted mode")

	assert(type(object) == "number", "Arg #1 (object) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x1C57C94A6446492A, object, toggle)
end
natives.object.set_is_object_articulated = natives.OBJECT.SET_IS_OBJECT_ARTICULATED

function natives.OBJECT.SET_IS_OBJECT_BALL(--[[Object]] object, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'OBJECT.SET_IS_OBJECT_BALL' due to disabled trusted mode")

	assert(type(object) == "number", "Arg #1 (object) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xB5B7742424BD4445, object, toggle)
end
natives.object.set_is_object_ball = natives.OBJECT.SET_IS_OBJECT_BALL


natives.PAD = {}
natives.pad = {}

--[[
padIndex: 0 (PLAYER_CONTROL), 1 (unk) and 2 (unk) used in the scripts.
]]
function natives.PAD.IS_CONTROL_ENABLED(--[[int]] padIndex, --[[int]] control) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PAD.IS_CONTROL_ENABLED' due to disabled trusted mode")

	assert(type(padIndex) == "number", "Arg #1 (padIndex) must be a number.")
	assert(type(control) == "number", "Arg #2 (control) must be a number.")

	local result = native_call(0x1CEA6BFDF248E5D9, padIndex, control)
	return result:__tointeger() ~= 0
end
natives.pad.is_control_enabled = natives.PAD.IS_CONTROL_ENABLED

--[[
Returns whether a control is currently pressed.
padIndex: 0 (PLAYER_CONTROL), 1 (unk) and 2 (unk) used in the scripts.
]]
function natives.PAD.IS_CONTROL_PRESSED(--[[int]] padIndex, --[[int]] control) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PAD.IS_CONTROL_PRESSED' due to disabled trusted mode")

	assert(type(padIndex) == "number", "Arg #1 (padIndex) must be a number.")
	assert(type(control) == "number", "Arg #2 (control) must be a number.")

	local result = native_call(0xF3A21BCD95725A4A, padIndex, control)
	return result:__tointeger() ~= 0
end
natives.pad.is_control_pressed = natives.PAD.IS_CONTROL_PRESSED

--[[
Returns whether a control is currently _not_ pressed.
padIndex: 0 (PLAYER_CONTROL), 1 (unk) and 2 (unk) used in the scripts.
]]
function natives.PAD.IS_CONTROL_RELEASED(--[[int]] padIndex, --[[int]] control) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PAD.IS_CONTROL_RELEASED' due to disabled trusted mode")

	assert(type(padIndex) == "number", "Arg #1 (padIndex) must be a number.")
	assert(type(control) == "number", "Arg #2 (control) must be a number.")

	local result = native_call(0x648EE3E7F38877DD, padIndex, control)
	return result:__tointeger() ~= 0
end
natives.pad.is_control_released = natives.PAD.IS_CONTROL_RELEASED

--[[
Returns whether a control was newly pressed since the last check.
padIndex: 0 (PLAYER_CONTROL), 1 (unk) and 2 (unk) used in the scripts.
]]
function natives.PAD.IS_CONTROL_JUST_PRESSED(--[[int]] padIndex, --[[int]] control) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PAD.IS_CONTROL_JUST_PRESSED' due to disabled trusted mode")

	assert(type(padIndex) == "number", "Arg #1 (padIndex) must be a number.")
	assert(type(control) == "number", "Arg #2 (control) must be a number.")

	local result = native_call(0x580417101DDB492F, padIndex, control)
	return result:__tointeger() ~= 0
end
natives.pad.is_control_just_pressed = natives.PAD.IS_CONTROL_JUST_PRESSED

--[[
Returns whether a control was newly released since the last check.
padIndex: 0 (PLAYER_CONTROL), 1 (unk) and 2 (unk) used in the scripts.
]]
function natives.PAD.IS_CONTROL_JUST_RELEASED(--[[int]] padIndex, --[[int]] control) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PAD.IS_CONTROL_JUST_RELEASED' due to disabled trusted mode")

	assert(type(padIndex) == "number", "Arg #1 (padIndex) must be a number.")
	assert(type(control) == "number", "Arg #2 (control) must be a number.")

	local result = native_call(0x50F940259D3841E6, padIndex, control)
	return result:__tointeger() ~= 0
end
natives.pad.is_control_just_released = natives.PAD.IS_CONTROL_JUST_RELEASED

--[[
padIndex: 0 (PLAYER_CONTROL), 1 (unk) and 2 (unk) used in the scripts.
]]
function natives.PAD.GET_CONTROL_VALUE(--[[int]] padIndex, --[[int]] control) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PAD.GET_CONTROL_VALUE' due to disabled trusted mode")

	assert(type(padIndex) == "number", "Arg #1 (padIndex) must be a number.")
	assert(type(control) == "number", "Arg #2 (control) must be a number.")

	local result = native_call(0xD95E79E8686D2C27, padIndex, control)
	return result:__tointeger()
end
natives.pad.get_control_value = natives.PAD.GET_CONTROL_VALUE

--[[
Returns the value of GET_CONTROL_VALUE normalized (i.e. a real number value between -1 and 1)

padIndex: 0 (PLAYER_CONTROL), 1 (unk) and 2 (unk) used in the scripts.
]]
function natives.PAD.GET_CONTROL_NORMAL(--[[int]] padIndex, --[[int]] control) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PAD.GET_CONTROL_NORMAL' due to disabled trusted mode")

	assert(type(padIndex) == "number", "Arg #1 (padIndex) must be a number.")
	assert(type(control) == "number", "Arg #2 (control) must be a number.")

	local result = native_call(0xEC3C9B8D5327B563, padIndex, control)
	return result:__tonumber()
end
natives.pad.get_control_normal = natives.PAD.GET_CONTROL_NORMAL

function natives.PAD.SET_USE_ADJUSTED_MOUSE_COORDS(--[[BOOL]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PAD.SET_USE_ADJUSTED_MOUSE_COORDS' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0x5B73C77D9EB66E24, p0)
end
natives.pad.set_use_adjusted_mouse_coords = natives.PAD.SET_USE_ADJUSTED_MOUSE_COORDS

--[[
Seems to return values between -1 and 1 for controls like gas and steering.

padIndex: 0 (PLAYER_CONTROL), 1 (unk) and 2 (unk) used in the scripts.
]]
function natives.PAD.GET_CONTROL_UNBOUND_NORMAL(--[[int]] padIndex, --[[int]] control) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PAD.GET_CONTROL_UNBOUND_NORMAL' due to disabled trusted mode")

	assert(type(padIndex) == "number", "Arg #1 (padIndex) must be a number.")
	assert(type(control) == "number", "Arg #2 (control) must be a number.")

	local result = native_call(0x5B84D09CEC5209C5, padIndex, control)
	return result:__tonumber()
end
natives.pad.get_control_unbound_normal = natives.PAD.GET_CONTROL_UNBOUND_NORMAL

--[[
This is for simulating player input.
amount is a float value from 0 - 1

padIndex: 0 (PLAYER_CONTROL), 1 (unk) and 2 (unk) used in the scripts.
]]
function natives.PAD.SET_CONTROL_VALUE_NEXT_FRAME(--[[int]] padIndex, --[[int]] control, --[[float]] amount) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PAD.SET_CONTROL_VALUE_NEXT_FRAME' due to disabled trusted mode")

	assert(type(padIndex) == "number", "Arg #1 (padIndex) must be a number.")
	assert(type(control) == "number", "Arg #2 (control) must be a number.")
	assert(type(amount) == "number", "Arg #3 (amount) must be a number.")

	local result = native_call(0xE8A25867FBA3B05E, padIndex, control, amount)
	return result:__tointeger() ~= 0
end
natives.pad.set_control_value_next_frame = natives.PAD.SET_CONTROL_VALUE_NEXT_FRAME

--[[
padIndex: 0 (PLAYER_CONTROL), 1 (unk) and 2 (unk) used in the scripts.
]]
function natives.PAD.IS_DISABLED_CONTROL_PRESSED(--[[int]] padIndex, --[[int]] control) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PAD.IS_DISABLED_CONTROL_PRESSED' due to disabled trusted mode")

	assert(type(padIndex) == "number", "Arg #1 (padIndex) must be a number.")
	assert(type(control) == "number", "Arg #2 (control) must be a number.")

	local result = native_call(0xE2587F8CBBD87B1D, padIndex, control)
	return result:__tointeger() ~= 0
end
natives.pad.is_disabled_control_pressed = natives.PAD.IS_DISABLED_CONTROL_PRESSED

--[[
padIndex: 0 (PLAYER_CONTROL), 1 (unk) and 2 (unk) used in the scripts.
]]
function natives.PAD.IS_DISABLED_CONTROL_RELEASED(--[[int]] padIndex, --[[int]] control) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PAD.IS_DISABLED_CONTROL_RELEASED' due to disabled trusted mode")

	assert(type(padIndex) == "number", "Arg #1 (padIndex) must be a number.")
	assert(type(control) == "number", "Arg #2 (control) must be a number.")

	local result = native_call(0xFB6C4072E9A32E92, padIndex, control)
	return result:__tointeger() ~= 0
end
natives.pad.is_disabled_control_released = natives.PAD.IS_DISABLED_CONTROL_RELEASED

--[[
padIndex: 0 (PLAYER_CONTROL), 1 (unk) and 2 (unk) used in the scripts.
]]
function natives.PAD.IS_DISABLED_CONTROL_JUST_PRESSED(--[[int]] padIndex, --[[int]] control) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PAD.IS_DISABLED_CONTROL_JUST_PRESSED' due to disabled trusted mode")

	assert(type(padIndex) == "number", "Arg #1 (padIndex) must be a number.")
	assert(type(control) == "number", "Arg #2 (control) must be a number.")

	local result = native_call(0x91AEF906BCA88877, padIndex, control)
	return result:__tointeger() ~= 0
end
natives.pad.is_disabled_control_just_pressed = natives.PAD.IS_DISABLED_CONTROL_JUST_PRESSED

--[[
padIndex: 0 (PLAYER_CONTROL), 1 (unk) and 2 (unk) used in the scripts.
]]
function natives.PAD.IS_DISABLED_CONTROL_JUST_RELEASED(--[[int]] padIndex, --[[int]] control) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PAD.IS_DISABLED_CONTROL_JUST_RELEASED' due to disabled trusted mode")

	assert(type(padIndex) == "number", "Arg #1 (padIndex) must be a number.")
	assert(type(control) == "number", "Arg #2 (control) must be a number.")

	local result = native_call(0x305C8DCD79DA8B0F, padIndex, control)
	return result:__tointeger() ~= 0
end
natives.pad.is_disabled_control_just_released = natives.PAD.IS_DISABLED_CONTROL_JUST_RELEASED

--[[
control - c# works with (int)GTA.Control.CursorY / (int)GTA.Control.CursorX and returns the mouse movement (additive).

padIndex: 0 (PLAYER_CONTROL), 1 (unk) and 2 (unk) used in the scripts.
]]
function natives.PAD.GET_DISABLED_CONTROL_NORMAL(--[[int]] padIndex, --[[int]] control) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PAD.GET_DISABLED_CONTROL_NORMAL' due to disabled trusted mode")

	assert(type(padIndex) == "number", "Arg #1 (padIndex) must be a number.")
	assert(type(control) == "number", "Arg #2 (control) must be a number.")

	local result = native_call(0x11E65974A982637C, padIndex, control)
	return result:__tonumber()
end
natives.pad.get_disabled_control_normal = natives.PAD.GET_DISABLED_CONTROL_NORMAL

--[[
The "disabled" variant of _0x5B84D09CEC5209C5.

padIndex: 0 (PLAYER_CONTROL), 1 (unk) and 2 (unk) used in the scripts.
]]
function natives.PAD.GET_DISABLED_CONTROL_UNBOUND_NORMAL(--[[int]] padIndex, --[[int]] control) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PAD.GET_DISABLED_CONTROL_UNBOUND_NORMAL' due to disabled trusted mode")

	assert(type(padIndex) == "number", "Arg #1 (padIndex) must be a number.")
	assert(type(control) == "number", "Arg #2 (control) must be a number.")

	local result = native_call(0x4F8A26A890FD62FB, padIndex, control)
	return result:__tonumber()
end
natives.pad.get_disabled_control_unbound_normal = natives.PAD.GET_DISABLED_CONTROL_UNBOUND_NORMAL

function natives.PAD.GET_CONTROL_HOW_LONG_AGO(--[[int]] p0) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PAD.GET_CONTROL_HOW_LONG_AGO' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xD7D22F5592AED8BA, p0)
	return result:__tointeger()
end
natives.pad.get_control_how_long_ago = natives.PAD.GET_CONTROL_HOW_LONG_AGO

--[[
padIndex: 0 (PLAYER_CONTROL), 1 (unk) and 2 (unk) used in the scripts.

Used to be known as _GET_LAST_INPUT_METHOD & _IS_INPUT_DISABLED
]]
function natives.PAD.IS_USING_KEYBOARD_AND_MOUSE(--[[int]] padIndex) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PAD.IS_USING_KEYBOARD_AND_MOUSE' due to disabled trusted mode")

	assert(type(padIndex) == "number", "Arg #1 (padIndex) must be a number.")

	local result = native_call(0xA571D46727E2B718, padIndex)
	return result:__tointeger() ~= 0
end
natives.pad.is_using_keyboard_and_mouse = natives.PAD.IS_USING_KEYBOARD_AND_MOUSE

--[[
padIndex: 0 (PLAYER_CONTROL), 1 (unk) and 2 (unk) used in the scripts.

Used to be known as _IS_INPUT_JUST_DISABLED
]]
function natives.PAD.IS_USING_CURSOR(--[[int]] padIndex) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PAD.IS_USING_CURSOR' due to disabled trusted mode")

	assert(type(padIndex) == "number", "Arg #1 (padIndex) must be a number.")

	local result = native_call(0x13337B38DB572509, padIndex)
	return result:__tointeger() ~= 0
end
natives.pad.is_using_cursor = natives.PAD.IS_USING_CURSOR

function natives.PAD.SET_CURSOR_POSITION(--[[float]] x, --[[float]] y) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PAD.SET_CURSOR_POSITION' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")

	local result = native_call(0xFC695459D4D0E219, x, y)
	return result:__tointeger() ~= 0
end
natives.pad.set_cursor_position = natives.PAD.SET_CURSOR_POSITION

--[[
padIndex: 0 (PLAYER_CONTROL), 1 (unk) and 2 (unk) used in the scripts.

Hardcoded to return false.
]]
function natives.PAD.IS_USING_REMOTE_PLAY(--[[int]] padIndex) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PAD.IS_USING_REMOTE_PLAY' due to disabled trusted mode")

	assert(type(padIndex) == "number", "Arg #1 (padIndex) must be a number.")

	local result = native_call(0x23F09EADC01449D6, padIndex)
	return result:__tointeger() ~= 0
end
natives.pad.is_using_remote_play = natives.PAD.IS_USING_REMOTE_PLAY

--[[
padIndex: 0 (PLAYER_CONTROL), 1 (unk) and 2 (unk) used in the scripts.
]]
function natives.PAD.HAVE_CONTROLS_CHANGED(--[[int]] padIndex) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PAD.HAVE_CONTROLS_CHANGED' due to disabled trusted mode")

	assert(type(padIndex) == "number", "Arg #1 (padIndex) must be a number.")

	local result = native_call(0x6CD79468A1E595C6, padIndex)
	return result:__tointeger() ~= 0
end
natives.pad.have_controls_changed = natives.PAD.HAVE_CONTROLS_CHANGED

--[[
formerly called _GET_CONTROL_ACTION_NAME incorrectly

p2 appears to always be true.
p2 is unused variable in function.

EG:
GET_CONTROL_INSTRUCTIONAL_BUTTON (2, 201, 1) /*INPUT_FRONTEND_ACCEPT (e.g. Enter button)*/
GET_CONTROL_INSTRUCTIONAL_BUTTON (2, 202, 1) /*INPUT_FRONTEND_CANCEL (e.g. ESC button)*/
GET_CONTROL_INSTRUCTIONAL_BUTTON (2, 51, 1) /*INPUT_CONTEXT (e.g. E button)*/

gtaforums.com/topic/819070-c-draw-instructional-buttons-scaleform-movie/#entry1068197378

padIndex: 0 (PLAYER_CONTROL), 1 (unk) and 2 (unk) used in the scripts.
]]
function natives.PAD.GET_CONTROL_INSTRUCTIONAL_BUTTONS_STRING(--[[int]] padIndex, --[[int]] control, --[[BOOL]] p2) -- Returns const char*
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PAD.GET_CONTROL_INSTRUCTIONAL_BUTTONS_STRING' due to disabled trusted mode")

	assert(type(padIndex) == "number", "Arg #1 (padIndex) must be a number.")
	assert(type(control) == "number", "Arg #2 (control) must be a number.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")

	local result = native_call(0x0499D7B09FC9B407, padIndex, control, p2)
	return result:__tostring(true)
end
natives.pad.get_control_instructional_buttons_string = natives.PAD.GET_CONTROL_INSTRUCTIONAL_BUTTONS_STRING

--[[
padIndex: 0 (PLAYER_CONTROL), 1 (unk) and 2 (unk) used in the scripts.
]]
function natives.PAD.GET_CONTROL_GROUP_INSTRUCTIONAL_BUTTONS_STRING(--[[int]] padIndex, --[[int]] controlGroup, --[[BOOL]] p2) -- Returns const char*
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PAD.GET_CONTROL_GROUP_INSTRUCTIONAL_BUTTONS_STRING' due to disabled trusted mode")

	assert(type(padIndex) == "number", "Arg #1 (padIndex) must be a number.")
	assert(type(controlGroup) == "number", "Arg #2 (controlGroup) must be a number.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")

	local result = native_call(0x80C2FD58D720C801, padIndex, controlGroup, p2)
	return result:__tostring(true)
end
natives.pad.get_control_group_instructional_buttons_string = natives.PAD.GET_CONTROL_GROUP_INSTRUCTIONAL_BUTTONS_STRING

--[[
padIndex: 0 (PLAYER_CONTROL), 1 (unk) and 2 (unk) used in the scripts.
]]
function natives.PAD.SET_CONTROL_LIGHT_EFFECT_COLOR(--[[int]] padIndex, --[[int]] red, --[[int]] green, --[[int]] blue) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PAD.SET_CONTROL_LIGHT_EFFECT_COLOR' due to disabled trusted mode")

	assert(type(padIndex) == "number", "Arg #1 (padIndex) must be a number.")
	assert(type(red) == "number", "Arg #2 (red) must be a number.")
	assert(type(green) == "number", "Arg #3 (green) must be a number.")
	assert(type(blue) == "number", "Arg #4 (blue) must be a number.")

	local result = native_call(0x8290252FFF36ACB5, padIndex, red, green, blue)
end
natives.pad.set_control_light_effect_color = natives.PAD.SET_CONTROL_LIGHT_EFFECT_COLOR

function natives.PAD.CLEAR_CONTROL_LIGHT_EFFECT(--[[int]] padIndex) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PAD.CLEAR_CONTROL_LIGHT_EFFECT' due to disabled trusted mode")

	assert(type(padIndex) == "number", "Arg #1 (padIndex) must be a number.")

	local result = native_call(0xCB0360EFEFB2580D, padIndex)
end
natives.pad.clear_control_light_effect = natives.PAD.CLEAR_CONTROL_LIGHT_EFFECT

--[[
padIndex always seems to be 0
duration in milliseconds 
frequency should range from about 10 (slow vibration) to 255 (very fast)
appears to be a hash collision, though it does do what it says

example:
SET_PAD_SHAKE(0, 100, 200);
]]
function natives.PAD.SET_CONTROL_SHAKE(--[[int]] padIndex, --[[int]] duration, --[[int]] frequency) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PAD.SET_CONTROL_SHAKE' due to disabled trusted mode")

	assert(type(padIndex) == "number", "Arg #1 (padIndex) must be a number.")
	assert(type(duration) == "number", "Arg #2 (duration) must be a number.")
	assert(type(frequency) == "number", "Arg #3 (frequency) must be a number.")

	local result = native_call(0x48B3886C1358D0D5, padIndex, duration, frequency)
end
natives.pad.set_control_shake = natives.PAD.SET_CONTROL_SHAKE

--[[
Does nothing (it's a nullsub).
]]
function natives.PAD.SET_CONTROL_TRIGGER_SHAKE(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3, --[[Any]] p4) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PAD.SET_CONTROL_TRIGGER_SHAKE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")

	local result = native_call(0x14D29BB12D47F68C, p0, p1, p2, p3, p4)
end
natives.pad.set_control_trigger_shake = natives.PAD.SET_CONTROL_TRIGGER_SHAKE

function natives.PAD.STOP_CONTROL_SHAKE(--[[int]] padIndex) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PAD.STOP_CONTROL_SHAKE' due to disabled trusted mode")

	assert(type(padIndex) == "number", "Arg #1 (padIndex) must be a number.")

	local result = native_call(0x38C16A305E8CDC8D, padIndex)
end
natives.pad.stop_control_shake = natives.PAD.STOP_CONTROL_SHAKE

function natives.PAD.SET_CONTROL_SHAKE_SUPPRESSED_ID(--[[int]] padIndex, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PAD.SET_CONTROL_SHAKE_SUPPRESSED_ID' due to disabled trusted mode")

	assert(type(padIndex) == "number", "Arg #1 (padIndex) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xF239400E16C23E08, padIndex, p1)
end
natives.pad.set_control_shake_suppressed_id = natives.PAD.SET_CONTROL_SHAKE_SUPPRESSED_ID

function natives.PAD.CLEAR_CONTROL_SHAKE_SUPPRESSED_ID(--[[int]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PAD.CLEAR_CONTROL_SHAKE_SUPPRESSED_ID' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xA0CEFCEA390AAB9B, p0)
end
natives.pad.clear_control_shake_suppressed_id = natives.PAD.CLEAR_CONTROL_SHAKE_SUPPRESSED_ID

function natives.PAD.IS_LOOK_INVERTED() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PAD.IS_LOOK_INVERTED' due to disabled trusted mode")

	local result = native_call(0x77B612531280010D)
	return result:__tointeger() ~= 0
end
natives.pad.is_look_inverted = natives.PAD.IS_LOOK_INVERTED

--[[
Used with IS_LOOK_INVERTED() and negates its affect.

--

Not sure how the person above got that description, but here's an actual example:

if (PAD::_GET_LAST_INPUT_METHOD(2)) {
    if (a_5) {
        if (PAD::IS_LOOK_INVERTED()) {
            a_3 *= -1;
        }
        if (PAD::_E1615EC03B3BB4FD()) {
            a_3 *= -1;
        }
    }
}
]]
function natives.PAD.IS_MOUSE_LOOK_INVERTED() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PAD.IS_MOUSE_LOOK_INVERTED' due to disabled trusted mode")

	local result = native_call(0xE1615EC03B3BB4FD)
	return result:__tointeger() ~= 0
end
natives.pad.is_mouse_look_inverted = natives.PAD.IS_MOUSE_LOOK_INVERTED

--[[
Returns the local player's targeting mode. See PLAYER::SET_PLAYER_TARGETING_MODE.
]]
function natives.PAD.GET_LOCAL_PLAYER_AIM_STATE() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PAD.GET_LOCAL_PLAYER_AIM_STATE' due to disabled trusted mode")

	local result = native_call(0xBB41AFBBBC0A0287)
	return result:__tointeger()
end
natives.pad.get_local_player_aim_state = natives.PAD.GET_LOCAL_PLAYER_AIM_STATE

--[[
Same behavior as GET_LOCAL_PLAYER_AIM_STATE but only used on the PC version.
]]
function natives.PAD.GET_LOCAL_PLAYER_GAMEPAD_AIM_STATE() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PAD.GET_LOCAL_PLAYER_GAMEPAD_AIM_STATE' due to disabled trusted mode")

	local result = native_call(0x59B9A7AF4C95133C)
	return result:__tointeger()
end
natives.pad.get_local_player_gamepad_aim_state = natives.PAD.GET_LOCAL_PLAYER_GAMEPAD_AIM_STATE

function natives.PAD.GET_IS_USING_ALTERNATE_HANDBRAKE() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PAD.GET_IS_USING_ALTERNATE_HANDBRAKE' due to disabled trusted mode")

	local result = native_call(0x25AAA32BDC98F2A3)
	return result:__tointeger() ~= 0
end
natives.pad.get_is_using_alternate_handbrake = natives.PAD.GET_IS_USING_ALTERNATE_HANDBRAKE

--[[
Returns profile setting 225.
]]
function natives.PAD.GET_IS_USING_ALTERNATE_DRIVEBY() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PAD.GET_IS_USING_ALTERNATE_DRIVEBY' due to disabled trusted mode")

	local result = native_call(0x0F70731BACCFBB96)
	return result:__tointeger() ~= 0
end
natives.pad.get_is_using_alternate_driveby = natives.PAD.GET_IS_USING_ALTERNATE_DRIVEBY

--[[
Returns profile setting 17.
]]
function natives.PAD.GET_ALLOW_MOVEMENT_WHILE_ZOOMED() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PAD.GET_ALLOW_MOVEMENT_WHILE_ZOOMED' due to disabled trusted mode")

	local result = native_call(0xFC859E2374407556)
	return result:__tointeger() ~= 0
end
natives.pad.get_allow_movement_while_zoomed = natives.PAD.GET_ALLOW_MOVEMENT_WHILE_ZOOMED

function natives.PAD.SET_PLAYERPAD_SHAKES_WHEN_CONTROLLER_DISABLED(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PAD.SET_PLAYERPAD_SHAKES_WHEN_CONTROLLER_DISABLED' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x798FDEB5B1575088, toggle)
end
natives.pad.set_playerpad_shakes_when_controller_disabled = natives.PAD.SET_PLAYERPAD_SHAKES_WHEN_CONTROLLER_DISABLED

--[[
padIndex: 0 (PLAYER_CONTROL), 1 (unk) and 2 (unk) used in the scripts.
]]
function natives.PAD.SET_INPUT_EXCLUSIVE(--[[int]] padIndex, --[[int]] control) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PAD.SET_INPUT_EXCLUSIVE' due to disabled trusted mode")

	assert(type(padIndex) == "number", "Arg #1 (padIndex) must be a number.")
	assert(type(control) == "number", "Arg #2 (control) must be a number.")

	local result = native_call(0xEDE476E5EE29EDB1, padIndex, control)
end
natives.pad.set_input_exclusive = natives.PAD.SET_INPUT_EXCLUSIVE

--[[
control values and meaning: https://pastebin.com/JEkxhZ7R 

padIndex: 0 (PLAYER_CONTROL), 1 (unk) and 2 (unk) used in the scripts.

Control values from the decompiled scripts: 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,
28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,53,5
4,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,
79,80,81,82,85,86,87,88,89,90,91,92,93,95,96,97,98,99,100,101,102,103,105,
107,108,109,110,111,112,113,114,115,116,117,118,119,123,126,129,130,131,132,
133,134,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,
153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,171,172
,177,187,188,189,190,195,196,199,200,201,202,203,205,207,208,209,211,212,213, 217,219,220,221,225,226,230,234,235,236,237,238,239,240,241,242,243,244,257,
261,262,263,264,265,270,271,272,273,274,278,279,280,281,282,283,284,285,286,
287,288,289,337.

Example: PAD::DISABLE_CONTROL_ACTION(2, 19, true) disables the switching UI from appearing both when using a keyboard and Xbox 360 controller. Needs to be executed each frame. 
 
Control group 1 and 0 gives the same results as 2. Same results for all players. 
]]
function natives.PAD.DISABLE_CONTROL_ACTION(--[[int]] padIndex, --[[int]] control, --[[BOOL]] disable) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PAD.DISABLE_CONTROL_ACTION' due to disabled trusted mode")

	assert(type(padIndex) == "number", "Arg #1 (padIndex) must be a number.")
	assert(type(control) == "number", "Arg #2 (control) must be a number.")
	assert(type(disable) == "boolean", "Arg #3 (disable) must be a boolean.")

	local result = native_call(0xFE99B66D079CF6BC, padIndex, control, disable)
end
natives.pad.disable_control_action = natives.PAD.DISABLE_CONTROL_ACTION

--[[
control values and meaning: https://pastebin.com/JEkxhZ7R 

padIndex: 0 (PLAYER_CONTROL), 1 (unk) and 2 (unk) used in the scripts.

Control values from the decompiled scripts: 
0,1,2,3,4,5,6,8,9,10,11,14,15,16,17,19,21,22,24,25,26,30,31,32,33,34,35,36,
37,44,46,47,59,60,65,68,69,70,71,72,73,74,75,76,79,80,81,82,86,95,98,99,100
,101,114,140,141,143,172,173,174,175,176,177,178,179,180,181,187,188,189,19
0,195,196,197,198,199,201,202,203,204,205,206,207,208,209,210,217,218,219,2
20,221,225,228,229,230,231,234,235,236,237,238,239,240,241,242,245,246,257,
261,262,263,264,286,287,288,289,337,338,339,340,341,342,343

INPUTGROUP_MOVE
INPUTGROUP_LOOK
INPUTGROUP_WHEEL
INPUTGROUP_CELLPHONE_NAVIGATE
INPUTGROUP_CELLPHONE_NAVIGATE_UD
INPUTGROUP_CELLPHONE_NAVIGATE_LR
INPUTGROUP_FRONTEND_DPAD_ALL
INPUTGROUP_FRONTEND_DPAD_UD
INPUTGROUP_FRONTEND_DPAD_LR
INPUTGROUP_FRONTEND_LSTICK_ALL
INPUTGROUP_FRONTEND_RSTICK_ALL
INPUTGROUP_FRONTEND_GENERIC_UD
INPUTGROUP_FRONTEND_GENERIC_LR
INPUTGROUP_FRONTEND_GENERIC_ALL
INPUTGROUP_FRONTEND_BUMPERS
INPUTGROUP_FRONTEND_TRIGGERS
INPUTGROUP_FRONTEND_STICKS
INPUTGROUP_SCRIPT_DPAD_ALL
INPUTGROUP_SCRIPT_DPAD_UD
INPUTGROUP_SCRIPT_DPAD_LR
INPUTGROUP_SCRIPT_LSTICK_ALL
INPUTGROUP_SCRIPT_RSTICK_ALL
INPUTGROUP_SCRIPT_BUMPERS
INPUTGROUP_SCRIPT_TRIGGERS
INPUTGROUP_WEAPON_WHEEL_CYCLE
INPUTGROUP_FLY
INPUTGROUP_SUB
INPUTGROUP_VEH_MOVE_ALL
INPUTGROUP_CURSOR
INPUTGROUP_CURSOR_SCROLL
INPUTGROUP_SNIPER_ZOOM_SECONDARY
INPUTGROUP_VEH_HYDRAULICS_CONTROL


Took those in IDA Pro.Not sure in which order they go
]]
function natives.PAD.ENABLE_CONTROL_ACTION(--[[int]] padIndex, --[[int]] control, --[[BOOL]] enable) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PAD.ENABLE_CONTROL_ACTION' due to disabled trusted mode")

	assert(type(padIndex) == "number", "Arg #1 (padIndex) must be a number.")
	assert(type(control) == "number", "Arg #2 (control) must be a number.")
	assert(type(enable) == "boolean", "Arg #3 (enable) must be a boolean.")

	local result = native_call(0x351220255D64C155, padIndex, control, enable)
end
natives.pad.enable_control_action = natives.PAD.ENABLE_CONTROL_ACTION

--[[
padIndex: 0 (PLAYER_CONTROL), 1 (unk) and 2 (unk) used in the scripts.
]]
function natives.PAD.DISABLE_ALL_CONTROL_ACTIONS(--[[int]] padIndex) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PAD.DISABLE_ALL_CONTROL_ACTIONS' due to disabled trusted mode")

	assert(type(padIndex) == "number", "Arg #1 (padIndex) must be a number.")

	local result = native_call(0x5F4B6931816E599B, padIndex)
end
natives.pad.disable_all_control_actions = natives.PAD.DISABLE_ALL_CONTROL_ACTIONS

--[[
padIndex: 0 (PLAYER_CONTROL), 1 (unk) and 2 (unk) used in the scripts.
]]
function natives.PAD.ENABLE_ALL_CONTROL_ACTIONS(--[[int]] padIndex) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PAD.ENABLE_ALL_CONTROL_ACTIONS' due to disabled trusted mode")

	assert(type(padIndex) == "number", "Arg #1 (padIndex) must be a number.")

	local result = native_call(0xA5FFE9B05F199DE7, padIndex)
end
natives.pad.enable_all_control_actions = natives.PAD.ENABLE_ALL_CONTROL_ACTIONS

--[[
Used in carsteal3 script with p0 = "Carsteal4_spycar".
]]
function natives.PAD.INIT_PC_SCRIPTED_CONTROLS(--[[const char*]] name) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PAD.INIT_PC_SCRIPTED_CONTROLS' due to disabled trusted mode")

	assert(type(name) == "string", "Arg #1 (name) must be a string.")

	local result = native_call(0x3D42B92563939375, name)
	return result:__tointeger() ~= 0
end
natives.pad.init_pc_scripted_controls = natives.PAD.INIT_PC_SCRIPTED_CONTROLS

--[[
Same as INIT_PC_SCRIPTED_CONTROLS
]]
function natives.PAD.SWITCH_PC_SCRIPTED_CONTROLS(--[[const char*]] name) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PAD.SWITCH_PC_SCRIPTED_CONTROLS' due to disabled trusted mode")

	assert(type(name) == "string", "Arg #1 (name) must be a string.")

	local result = native_call(0x4683149ED1DDE7A1, name)
	return result:__tointeger() ~= 0
end
natives.pad.switch_pc_scripted_controls = natives.PAD.SWITCH_PC_SCRIPTED_CONTROLS

function natives.PAD.SHUTDOWN_PC_SCRIPTED_CONTROLS() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PAD.SHUTDOWN_PC_SCRIPTED_CONTROLS' due to disabled trusted mode")

	local result = native_call(0x643ED62D5EA3BEBD)
end
natives.pad.shutdown_pc_scripted_controls = natives.PAD.SHUTDOWN_PC_SCRIPTED_CONTROLS

--[[
padIndex: 0 (PLAYER_CONTROL), 1 (unk) and 2 (unk) used in the scripts.

A*
]]
function natives.PAD.ALLOW_ALTERNATIVE_SCRIPT_CONTROLS_LAYOUT(--[[int]] padIndex) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PAD.ALLOW_ALTERNATIVE_SCRIPT_CONTROLS_LAYOUT' due to disabled trusted mode")

	assert(type(padIndex) == "number", "Arg #1 (padIndex) must be a number.")

	local result = native_call(0x7F4724035FDCA1DD, padIndex)
end
natives.pad.allow_alternative_script_controls_layout = natives.PAD.ALLOW_ALTERNATIVE_SCRIPT_CONTROLS_LAYOUT


natives.PATHFIND = {}
natives.pathfind = {}

--[[
When nodeEnabled is set to false, all nodes in the area get disabled.
`GET_VEHICLE_NODE_IS_SWITCHED_OFF` returns true afterwards.
If it's true, `GET_VEHICLE_NODE_IS_SWITCHED_OFF` returns false.
]]
function natives.PATHFIND.SET_ROADS_IN_AREA(--[[float]] x1, --[[float]] y1, --[[float]] z1, --[[float]] x2, --[[float]] y2, --[[float]] z2, --[[BOOL]] nodeEnabled, --[[BOOL]] unknown2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PATHFIND.SET_ROADS_IN_AREA' due to disabled trusted mode")

	assert(type(x1) == "number", "Arg #1 (x1) must be a number.")
	assert(type(y1) == "number", "Arg #2 (y1) must be a number.")
	assert(type(z1) == "number", "Arg #3 (z1) must be a number.")
	assert(type(x2) == "number", "Arg #4 (x2) must be a number.")
	assert(type(y2) == "number", "Arg #5 (y2) must be a number.")
	assert(type(z2) == "number", "Arg #6 (z2) must be a number.")
	assert(type(nodeEnabled) == "boolean", "Arg #7 (nodeEnabled) must be a boolean.")
	assert(type(unknown2) == "boolean", "Arg #8 (unknown2) must be a boolean.")

	local result = native_call(0xBF1A602B5BA52FEE, x1, y1, z1, x2, y2, z2, nodeEnabled, unknown2)
end
natives.pathfind.set_roads_in_area = natives.PATHFIND.SET_ROADS_IN_AREA

--[[
unknown3 is related to `SEND_SCRIPT_WORLD_STATE_EVENT > CNetworkRoadNodeWorldStateData` in networked environments.
See IS_POINT_IN_ANGLED_AREA for the definition of an angled area.
]]
function natives.PATHFIND.SET_ROADS_IN_ANGLED_AREA(--[[float]] x1, --[[float]] y1, --[[float]] z1, --[[float]] x2, --[[float]] y2, --[[float]] z2, --[[float]] width, --[[BOOL]] unknown1, --[[BOOL]] unknown2, --[[BOOL]] unknown3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PATHFIND.SET_ROADS_IN_ANGLED_AREA' due to disabled trusted mode")

	assert(type(x1) == "number", "Arg #1 (x1) must be a number.")
	assert(type(y1) == "number", "Arg #2 (y1) must be a number.")
	assert(type(z1) == "number", "Arg #3 (z1) must be a number.")
	assert(type(x2) == "number", "Arg #4 (x2) must be a number.")
	assert(type(y2) == "number", "Arg #5 (y2) must be a number.")
	assert(type(z2) == "number", "Arg #6 (z2) must be a number.")
	assert(type(width) == "number", "Arg #7 (width) must be a number.")
	assert(type(unknown1) == "boolean", "Arg #8 (unknown1) must be a boolean.")
	assert(type(unknown2) == "boolean", "Arg #9 (unknown2) must be a boolean.")
	assert(type(unknown3) == "boolean", "Arg #10 (unknown3) must be a boolean.")

	local result = native_call(0x1A5AA1208AF5DB59, x1, y1, z1, x2, y2, z2, width, unknown1, unknown2, unknown3)
end
natives.pathfind.set_roads_in_angled_area = natives.PATHFIND.SET_ROADS_IN_ANGLED_AREA

function natives.PATHFIND.SET_PED_PATHS_IN_AREA(--[[float]] x1, --[[float]] y1, --[[float]] z1, --[[float]] x2, --[[float]] y2, --[[float]] z2, --[[BOOL]] unknown, --[[Any]] p7) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PATHFIND.SET_PED_PATHS_IN_AREA' due to disabled trusted mode")

	assert(type(x1) == "number", "Arg #1 (x1) must be a number.")
	assert(type(y1) == "number", "Arg #2 (y1) must be a number.")
	assert(type(z1) == "number", "Arg #3 (z1) must be a number.")
	assert(type(x2) == "number", "Arg #4 (x2) must be a number.")
	assert(type(y2) == "number", "Arg #5 (y2) must be a number.")
	assert(type(z2) == "number", "Arg #6 (z2) must be a number.")
	assert(type(unknown) == "boolean", "Arg #7 (unknown) must be a boolean.")
	assert(type(p7) == "number", "Arg #8 (p7) must be a number.")

	local result = native_call(0x34F060F4BF92E018, x1, y1, z1, x2, y2, z2, unknown, p7)
end
natives.pathfind.set_ped_paths_in_area = natives.PATHFIND.SET_PED_PATHS_IN_AREA

--[[
Flags are:
1 = 1 = B02_IsFootpath
2 = 4 = !B15_InteractionUnk
4 = 0x20 = !B14_IsInterior
8 = 0x40 = !B07_IsWater
16 = 0x200 = B17_IsFlatGround
When onGround == true outPosition is a position located on the nearest pavement.

When a safe coord could not be found the result of a function is false and outPosition == Vector3.Zero.

In the scripts these flags are used: 0, 14, 12, 16, 20, 21, 28. 0 is most commonly used, then 16. 

16 works for me, 0 crashed the script.
]]
function natives.PATHFIND.GET_SAFE_COORD_FOR_PED(--[[float]] x, --[[float]] y, --[[float]] z, --[[BOOL]] onGround, --[[Vector3*]] outPosition, --[[int]] flags) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PATHFIND.GET_SAFE_COORD_FOR_PED' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(onGround) == "boolean", "Arg #4 (onGround) must be a boolean.")
	assert(type(outPosition) == "userdata", "Arg #5 (outPosition) must be a userdata.")
	assert(type(flags) == "number", "Arg #6 (flags) must be a number.")

	local result = native_call(0xB61C8E878A4199CA, x, y, z, onGround, outPosition, flags)
	return result:__tointeger() ~= 0
end
natives.pathfind.get_safe_coord_for_ped = natives.PATHFIND.GET_SAFE_COORD_FOR_PED

--[[
FYI: When falling through the map (or however you got under it) you will respawn when your player ped's height is <= -200.0 meters (I think you all know this) and when in a vehicle you will actually respawn at the closest vehicle node.

----------

Vector3 nodePos;
GET_CLOSEST_VEHICLE_NODE(x,y,z,&nodePos,...)

nodeType: 0 = main roads, 1 = any dry path, 3 = water
p5, p6 are always the same:
0x40400000 (3.0), 0
p5 can also be 100.0 and p6 can be 2.5:
PATHFIND::GET_CLOSEST_VEHICLE_NODE(a_0, &v_5, v_9, 100.0, 2.5)

gtaforums.com/topic/843561-pathfind-node-types
]]
function natives.PATHFIND.GET_CLOSEST_VEHICLE_NODE(--[[float]] x, --[[float]] y, --[[float]] z, --[[Vector3*]] outPosition, --[[int]] nodeType, --[[float]] p5, --[[float]] p6) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PATHFIND.GET_CLOSEST_VEHICLE_NODE' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(outPosition) == "userdata", "Arg #4 (outPosition) must be a userdata.")
	assert(type(nodeType) == "number", "Arg #5 (nodeType) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")
	assert(type(p6) == "number", "Arg #7 (p6) must be a number.")

	local result = native_call(0x240A18690AE96513, x, y, z, outPosition, nodeType, p5, p6)
	return result:__tointeger() ~= 0
end
natives.pathfind.get_closest_vehicle_node = natives.PATHFIND.GET_CLOSEST_VEHICLE_NODE

--[[
Get the closest vehicle node to a given position, unknown1 = 3.0, unknown2 = 0
]]
function natives.PATHFIND.GET_CLOSEST_MAJOR_VEHICLE_NODE(--[[float]] x, --[[float]] y, --[[float]] z, --[[Vector3*]] outPosition, --[[float]] unknown1, --[[int]] unknown2) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PATHFIND.GET_CLOSEST_MAJOR_VEHICLE_NODE' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(outPosition) == "userdata", "Arg #4 (outPosition) must be a userdata.")
	assert(type(unknown1) == "number", "Arg #5 (unknown1) must be a number.")
	assert(type(unknown2) == "number", "Arg #6 (unknown2) must be a number.")

	local result = native_call(0x2EABE3B06F58C1BE, x, y, z, outPosition, unknown1, unknown2)
	return result:__tointeger() ~= 0
end
natives.pathfind.get_closest_major_vehicle_node = natives.PATHFIND.GET_CLOSEST_MAJOR_VEHICLE_NODE

--[[
p5, p6 and p7 seems to be about the same as p4, p5 and p6 for GET_CLOSEST_VEHICLE_NODE. p6 and/or p7 has something to do with finding a node on the same path/road and same direction(at least for this native, something to do with the heading maybe). Edit this when you find out more.

nodeType: 0 = main roads, 1 = any dry path, 3 = water
p6 is always 3.0
p7 is always 0

gtaforums.com/topic/843561-pathfind-node-types

Example of usage, moving vehicle to closest path/road:
Vector3 coords = ENTITY::GET_ENTITY_COORDS(playerVeh, true);
Vector3 closestVehicleNodeCoords; 
float roadHeading; 
PATHFIND::GET_CLOSEST_VEHICLE_NODE_WITH_HEADING(coords.x, coords.y, coords.z, &closestVehicleNodeCoords, &roadHeading, 1, 3, 0); 
ENTITY::SET_ENTITY_HEADING(playerVeh, roadHeading);
ENTITY::SET_ENTITY_COORDS(playerVeh, closestVehicleNodeCoords.x, closestVehicleNodeCoords.y, closestVehicleNodeCoords.z, 1, 0, 0, 1);
VEHICLE::SET_VEHICLE_ON_GROUND_PROPERLY(playerVeh);

------------------------------------------------------------------
C# Example (ins1de) : pastebin.com/fxtMWAHD
]]
function natives.PATHFIND.GET_CLOSEST_VEHICLE_NODE_WITH_HEADING(--[[float]] x, --[[float]] y, --[[float]] z, --[[Vector3*]] outPosition, --[[float*]] outHeading, --[[int]] nodeType, --[[float]] p6, --[[int]] p7) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PATHFIND.GET_CLOSEST_VEHICLE_NODE_WITH_HEADING' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(outPosition) == "userdata", "Arg #4 (outPosition) must be a userdata.")
	assert(type(outHeading) == "userdata", "Arg #5 (outHeading) must be a userdata.")
	assert(type(nodeType) == "number", "Arg #6 (nodeType) must be a number.")
	assert(type(p6) == "number", "Arg #7 (p6) must be a number.")
	assert(type(p7) == "number", "Arg #8 (p7) must be a number.")

	local result = native_call(0xFF071FB798B803B0, x, y, z, outPosition, outHeading, nodeType, p6, p7)
	return result:__tointeger() ~= 0
end
natives.pathfind.get_closest_vehicle_node_with_heading = natives.PATHFIND.GET_CLOSEST_VEHICLE_NODE_WITH_HEADING

function natives.PATHFIND.GET_NTH_CLOSEST_VEHICLE_NODE(--[[float]] x, --[[float]] y, --[[float]] z, --[[int]] nthClosest, --[[Vector3*]] outPosition, --[[Any]] unknown1, --[[Any]] unknown2, --[[Any]] unknown3) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PATHFIND.GET_NTH_CLOSEST_VEHICLE_NODE' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(nthClosest) == "number", "Arg #4 (nthClosest) must be a number.")
	assert(type(outPosition) == "userdata", "Arg #5 (outPosition) must be a userdata.")
	assert(type(unknown1) == "number", "Arg #6 (unknown1) must be a number.")
	assert(type(unknown2) == "number", "Arg #7 (unknown2) must be a number.")
	assert(type(unknown3) == "number", "Arg #8 (unknown3) must be a number.")

	local result = native_call(0xE50E52416CCF948B, x, y, z, nthClosest, outPosition, unknown1, unknown2, unknown3)
	return result:__tointeger() ~= 0
end
natives.pathfind.get_nth_closest_vehicle_node = natives.PATHFIND.GET_NTH_CLOSEST_VEHICLE_NODE

--[[
Returns the id.
]]
function natives.PATHFIND.GET_NTH_CLOSEST_VEHICLE_NODE_ID(--[[float]] x, --[[float]] y, --[[float]] z, --[[int]] nth, --[[int]] nodetype, --[[float]] p5, --[[float]] p6) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PATHFIND.GET_NTH_CLOSEST_VEHICLE_NODE_ID' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(nth) == "number", "Arg #4 (nth) must be a number.")
	assert(type(nodetype) == "number", "Arg #5 (nodetype) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")
	assert(type(p6) == "number", "Arg #7 (p6) must be a number.")

	local result = native_call(0x22D7275A79FE8215, x, y, z, nth, nodetype, p5, p6)
	return result:__tointeger()
end
natives.pathfind.get_nth_closest_vehicle_node_id = natives.PATHFIND.GET_NTH_CLOSEST_VEHICLE_NODE_ID

--[[
Get the nth closest vehicle node and its heading. (unknown2 = 9, unknown3 = 3.0, unknown4 = 2.5)
]]
function natives.PATHFIND.GET_NTH_CLOSEST_VEHICLE_NODE_WITH_HEADING(--[[float]] x, --[[float]] y, --[[float]] z, --[[int]] nthClosest, --[[Vector3*]] outPosition, --[[float*]] outHeading, --[[Any*]] unknown1, --[[int]] unknown2, --[[float]] unknown3, --[[float]] unknown4) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PATHFIND.GET_NTH_CLOSEST_VEHICLE_NODE_WITH_HEADING' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(nthClosest) == "number", "Arg #4 (nthClosest) must be a number.")
	assert(type(outPosition) == "userdata", "Arg #5 (outPosition) must be a userdata.")
	assert(type(outHeading) == "userdata", "Arg #6 (outHeading) must be a userdata.")
	assert(type(unknown1) == "userdata", "Arg #7 (unknown1) must be a userdata.")
	assert(type(unknown2) == "number", "Arg #8 (unknown2) must be a number.")
	assert(type(unknown3) == "number", "Arg #9 (unknown3) must be a number.")
	assert(type(unknown4) == "number", "Arg #10 (unknown4) must be a number.")

	local result = native_call(0x80CA6A8B6C094CC4, x, y, z, nthClosest, outPosition, outHeading, unknown1, unknown2, unknown3, unknown4)
	return result:__tointeger() ~= 0
end
natives.pathfind.get_nth_closest_vehicle_node_with_heading = natives.PATHFIND.GET_NTH_CLOSEST_VEHICLE_NODE_WITH_HEADING

function natives.PATHFIND.GET_NTH_CLOSEST_VEHICLE_NODE_ID_WITH_HEADING(--[[float]] x, --[[float]] y, --[[float]] z, --[[int]] nthClosest, --[[Vector3*]] outPosition, --[[float*]] outHeading, --[[Any]] p6, --[[float]] p7, --[[float]] p8) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PATHFIND.GET_NTH_CLOSEST_VEHICLE_NODE_ID_WITH_HEADING' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(nthClosest) == "number", "Arg #4 (nthClosest) must be a number.")
	assert(type(outPosition) == "userdata", "Arg #5 (outPosition) must be a userdata.")
	assert(type(outHeading) == "userdata", "Arg #6 (outHeading) must be a userdata.")
	assert(type(p6) == "number", "Arg #7 (p6) must be a number.")
	assert(type(p7) == "number", "Arg #8 (p7) must be a number.")
	assert(type(p8) == "number", "Arg #9 (p8) must be a number.")

	local result = native_call(0x6448050E9C2A7207, x, y, z, nthClosest, outPosition, outHeading, p6, p7, p8)
	return result:__tointeger()
end
natives.pathfind.get_nth_closest_vehicle_node_id_with_heading = natives.PATHFIND.GET_NTH_CLOSEST_VEHICLE_NODE_ID_WITH_HEADING

--[[
See gtaforums.com/topic/843561-pathfind-node-types for node type info. 0 = paved road only, 1 = any road, 3 = water

p10 always equals 3.0
p11 always equals 0
]]
function natives.PATHFIND.GET_NTH_CLOSEST_VEHICLE_NODE_FAVOUR_DIRECTION(--[[float]] x, --[[float]] y, --[[float]] z, --[[float]] desiredX, --[[float]] desiredY, --[[float]] desiredZ, --[[int]] nthClosest, --[[Vector3*]] outPosition, --[[float*]] outHeading, --[[int]] nodetype, --[[float]] p10, --[[Any]] p11) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PATHFIND.GET_NTH_CLOSEST_VEHICLE_NODE_FAVOUR_DIRECTION' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(desiredX) == "number", "Arg #4 (desiredX) must be a number.")
	assert(type(desiredY) == "number", "Arg #5 (desiredY) must be a number.")
	assert(type(desiredZ) == "number", "Arg #6 (desiredZ) must be a number.")
	assert(type(nthClosest) == "number", "Arg #7 (nthClosest) must be a number.")
	assert(type(outPosition) == "userdata", "Arg #8 (outPosition) must be a userdata.")
	assert(type(outHeading) == "userdata", "Arg #9 (outHeading) must be a userdata.")
	assert(type(nodetype) == "number", "Arg #10 (nodetype) must be a number.")
	assert(type(p10) == "number", "Arg #11 (p10) must be a number.")
	assert(type(p11) == "number", "Arg #12 (p11) must be a number.")

	local result = native_call(0x45905BE8654AE067, x, y, z, desiredX, desiredY, desiredZ, nthClosest, outPosition, outHeading, nodetype, p10, p11)
	return result:__tointeger() ~= 0
end
natives.pathfind.get_nth_closest_vehicle_node_favour_direction = natives.PATHFIND.GET_NTH_CLOSEST_VEHICLE_NODE_FAVOUR_DIRECTION

--[[
MulleDK19: Gets the density and flags of the closest node to the specified position.
Density is a value between 0 and 15, indicating how busy the road is.
Flags is a bit field.
]]
function natives.PATHFIND.GET_VEHICLE_NODE_PROPERTIES(--[[float]] x, --[[float]] y, --[[float]] z, --[[int*]] density, --[[int*]] flags) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PATHFIND.GET_VEHICLE_NODE_PROPERTIES' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(density) == "userdata", "Arg #4 (density) must be a userdata.")
	assert(type(flags) == "userdata", "Arg #5 (flags) must be a userdata.")

	local result = native_call(0x0568566ACBB5DEDC, x, y, z, density, flags)
	return result:__tointeger() ~= 0
end
natives.pathfind.get_vehicle_node_properties = natives.PATHFIND.GET_VEHICLE_NODE_PROPERTIES

--[[
Returns true if the id is non zero.
]]
function natives.PATHFIND.IS_VEHICLE_NODE_ID_VALID(--[[int]] vehicleNodeId) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PATHFIND.IS_VEHICLE_NODE_ID_VALID' due to disabled trusted mode")

	assert(type(vehicleNodeId) == "number", "Arg #1 (vehicleNodeId) must be a number.")

	local result = native_call(0x1EAF30FCFBF5AF74, vehicleNodeId)
	return result:__tointeger() ~= 0
end
natives.pathfind.is_vehicle_node_id_valid = natives.PATHFIND.IS_VEHICLE_NODE_ID_VALID

--[[
Calling this with an invalid node id, will crash the game.
Note that IS_VEHICLE_NODE_ID_VALID simply checks if nodeId is not zero. It does not actually ensure that the id is valid.
Eg. IS_VEHICLE_NODE_ID_VALID(1) will return true, but will crash when calling GET_VEHICLE_NODE_POSITION().
]]
function natives.PATHFIND.GET_VEHICLE_NODE_POSITION(--[[int]] nodeId, --[[Vector3*]] outPosition) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PATHFIND.GET_VEHICLE_NODE_POSITION' due to disabled trusted mode")

	assert(type(nodeId) == "number", "Arg #1 (nodeId) must be a number.")
	assert(type(outPosition) == "userdata", "Arg #2 (outPosition) must be a userdata.")

	local result = native_call(0x703123E5E7D429C2, nodeId, outPosition)
end
natives.pathfind.get_vehicle_node_position = natives.PATHFIND.GET_VEHICLE_NODE_POSITION

--[[
Returns false for nodes that aren't used for GPS routes.
Example:
Nodes in Fort Zancudo and LSIA are false
]]
function natives.PATHFIND.GET_VEHICLE_NODE_IS_GPS_ALLOWED(--[[int]] nodeID) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PATHFIND.GET_VEHICLE_NODE_IS_GPS_ALLOWED' due to disabled trusted mode")

	assert(type(nodeID) == "number", "Arg #1 (nodeID) must be a number.")

	local result = native_call(0xA2AE5C478B96E3B6, nodeID)
	return result:__tointeger() ~= 0
end
natives.pathfind.get_vehicle_node_is_gps_allowed = natives.PATHFIND.GET_VEHICLE_NODE_IS_GPS_ALLOWED

--[[
Returns true when the node is Offroad. Alleys, some dirt roads, and carparks return true.
Normal roads where plenty of Peds spawn will return false
]]
function natives.PATHFIND.GET_VEHICLE_NODE_IS_SWITCHED_OFF(--[[int]] nodeID) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PATHFIND.GET_VEHICLE_NODE_IS_SWITCHED_OFF' due to disabled trusted mode")

	assert(type(nodeID) == "number", "Arg #1 (nodeID) must be a number.")

	local result = native_call(0x4F5070AA58F69279, nodeID)
	return result:__tointeger() ~= 0
end
natives.pathfind.get_vehicle_node_is_switched_off = natives.PATHFIND.GET_VEHICLE_NODE_IS_SWITCHED_OFF

--[[
p1 seems to be always 1.0f in the scripts
]]
function natives.PATHFIND.GET_CLOSEST_ROAD(--[[float]] x, --[[float]] y, --[[float]] z, --[[float]] p3, --[[int]] p4, --[[Vector3*]] p5, --[[Vector3*]] p6, --[[Any*]] p7, --[[Any*]] p8, --[[float*]] p9, --[[BOOL]] p10) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PATHFIND.GET_CLOSEST_ROAD' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "userdata", "Arg #6 (p5) must be a userdata.")
	assert(type(p6) == "userdata", "Arg #7 (p6) must be a userdata.")
	assert(type(p7) == "userdata", "Arg #8 (p7) must be a userdata.")
	assert(type(p8) == "userdata", "Arg #9 (p8) must be a userdata.")
	assert(type(p9) == "userdata", "Arg #10 (p9) must be a userdata.")
	assert(type(p10) == "boolean", "Arg #11 (p10) must be a boolean.")

	local result = native_call(0x132F52BBA570FE92, x, y, z, p3, p4, p5, p6, p7, p8, p9, p10)
	return result:__tointeger()
end
natives.pathfind.get_closest_road = natives.PATHFIND.GET_CLOSEST_ROAD

function natives.PATHFIND.SET_ALLOW_STREAM_PROLOGUE_NODES(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PATHFIND.SET_ALLOW_STREAM_PROLOGUE_NODES' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x228E5C6AD4D74BFD, toggle)
end
natives.pathfind.set_allow_stream_prologue_nodes = natives.PATHFIND.SET_ALLOW_STREAM_PROLOGUE_NODES

--[[
Activates Cayo Perico path nodes if passed `1`. GPS navigation will start working, maybe more stuff will change, not sure. It seems if you try to unload (pass `0`) when close to the island, your game might crash.
]]
function natives.PATHFIND.SET_ALLOW_STREAM_HEIST_ISLAND_NODES(--[[int]] type) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PATHFIND.SET_ALLOW_STREAM_HEIST_ISLAND_NODES' due to disabled trusted mode")

	assert(type(type) == "number", "Arg #1 (type) must be a number.")

	local result = native_call(0xF74B1FFA4A15FBEA, type)
end
natives.pathfind.set_allow_stream_heist_island_nodes = natives.PATHFIND.SET_ALLOW_STREAM_HEIST_ISLAND_NODES

function natives.PATHFIND.ARE_NODES_LOADED_FOR_AREA(--[[float]] x1, --[[float]] y1, --[[float]] x2, --[[float]] y2) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PATHFIND.ARE_NODES_LOADED_FOR_AREA' due to disabled trusted mode")

	assert(type(x1) == "number", "Arg #1 (x1) must be a number.")
	assert(type(y1) == "number", "Arg #2 (y1) must be a number.")
	assert(type(x2) == "number", "Arg #3 (x2) must be a number.")
	assert(type(y2) == "number", "Arg #4 (y2) must be a number.")

	local result = native_call(0xF7B79A50B905A30D, x1, y1, x2, y2)
	return result:__tointeger() ~= 0
end
natives.pathfind.are_nodes_loaded_for_area = natives.PATHFIND.ARE_NODES_LOADED_FOR_AREA

--[[
Used internally for long range tasks
]]
function natives.PATHFIND.REQUEST_PATH_NODES_IN_AREA_THIS_FRAME(--[[float]] x1, --[[float]] y1, --[[float]] x2, --[[float]] y2) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PATHFIND.REQUEST_PATH_NODES_IN_AREA_THIS_FRAME' due to disabled trusted mode")

	assert(type(x1) == "number", "Arg #1 (x1) must be a number.")
	assert(type(y1) == "number", "Arg #2 (y1) must be a number.")
	assert(type(x2) == "number", "Arg #3 (x2) must be a number.")
	assert(type(y2) == "number", "Arg #4 (y2) must be a number.")

	local result = native_call(0x07FB139B592FA687, x1, y1, x2, y2)
	return result:__tointeger() ~= 0
end
natives.pathfind.request_path_nodes_in_area_this_frame = natives.PATHFIND.REQUEST_PATH_NODES_IN_AREA_THIS_FRAME

function natives.PATHFIND.SET_ROADS_BACK_TO_ORIGINAL(--[[float]] p0, --[[float]] p1, --[[float]] p2, --[[float]] p3, --[[float]] p4, --[[float]] p5, --[[Any]] p6) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PATHFIND.SET_ROADS_BACK_TO_ORIGINAL' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")
	assert(type(p6) == "number", "Arg #7 (p6) must be a number.")

	local result = native_call(0x1EE7063B80FFC77C, p0, p1, p2, p3, p4, p5, p6)
end
natives.pathfind.set_roads_back_to_original = natives.PATHFIND.SET_ROADS_BACK_TO_ORIGINAL

--[[
See IS_POINT_IN_ANGLED_AREA for the definition of an angled area.
bool p7 - always 1
]]
function natives.PATHFIND.SET_ROADS_BACK_TO_ORIGINAL_IN_ANGLED_AREA(--[[float]] x1, --[[float]] y1, --[[float]] z1, --[[float]] x2, --[[float]] y2, --[[float]] z2, --[[float]] width, --[[Any]] p7) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PATHFIND.SET_ROADS_BACK_TO_ORIGINAL_IN_ANGLED_AREA' due to disabled trusted mode")

	assert(type(x1) == "number", "Arg #1 (x1) must be a number.")
	assert(type(y1) == "number", "Arg #2 (y1) must be a number.")
	assert(type(z1) == "number", "Arg #3 (z1) must be a number.")
	assert(type(x2) == "number", "Arg #4 (x2) must be a number.")
	assert(type(y2) == "number", "Arg #5 (y2) must be a number.")
	assert(type(z2) == "number", "Arg #6 (z2) must be a number.")
	assert(type(width) == "number", "Arg #7 (width) must be a number.")
	assert(type(p7) == "number", "Arg #8 (p7) must be a number.")

	local result = native_call(0x0027501B9F3B407E, x1, y1, z1, x2, y2, z2, width, p7)
end
natives.pathfind.set_roads_back_to_original_in_angled_area = natives.PATHFIND.SET_ROADS_BACK_TO_ORIGINAL_IN_ANGLED_AREA

function natives.PATHFIND.SET_AMBIENT_PED_RANGE_MULTIPLIER_THIS_FRAME(--[[float]] multiplier) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PATHFIND.SET_AMBIENT_PED_RANGE_MULTIPLIER_THIS_FRAME' due to disabled trusted mode")

	assert(type(multiplier) == "number", "Arg #1 (multiplier) must be a number.")

	local result = native_call(0x0B919E1FB47CC4E0, multiplier)
end
natives.pathfind.set_ambient_ped_range_multiplier_this_frame = natives.PATHFIND.SET_AMBIENT_PED_RANGE_MULTIPLIER_THIS_FRAME

function natives.PATHFIND.ADJUST_AMBIENT_PED_SPAWN_DENSITIES_THIS_FRAME(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3, --[[Any]] p4, --[[Any]] p5, --[[Any]] p6) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PATHFIND.ADJUST_AMBIENT_PED_SPAWN_DENSITIES_THIS_FRAME' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")
	assert(type(p6) == "number", "Arg #7 (p6) must be a number.")

	local result = native_call(0xAA76052DDA9BFC3E, p0, p1, p2, p3, p4, p5, p6)
end
natives.pathfind.adjust_ambient_ped_spawn_densities_this_frame = natives.PATHFIND.ADJUST_AMBIENT_PED_SPAWN_DENSITIES_THIS_FRAME

--[[
p6 is always 0
]]
function natives.PATHFIND.SET_PED_PATHS_BACK_TO_ORIGINAL(--[[float]] x1, --[[float]] y1, --[[float]] z1, --[[float]] x2, --[[float]] y2, --[[float]] z2, --[[Any]] p6) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PATHFIND.SET_PED_PATHS_BACK_TO_ORIGINAL' due to disabled trusted mode")

	assert(type(x1) == "number", "Arg #1 (x1) must be a number.")
	assert(type(y1) == "number", "Arg #2 (y1) must be a number.")
	assert(type(z1) == "number", "Arg #3 (z1) must be a number.")
	assert(type(x2) == "number", "Arg #4 (x2) must be a number.")
	assert(type(y2) == "number", "Arg #5 (y2) must be a number.")
	assert(type(z2) == "number", "Arg #6 (z2) must be a number.")
	assert(type(p6) == "number", "Arg #7 (p6) must be a number.")

	local result = native_call(0xE04B48F2CC926253, x1, y1, z1, x2, y2, z2, p6)
end
natives.pathfind.set_ped_paths_back_to_original = natives.PATHFIND.SET_PED_PATHS_BACK_TO_ORIGINAL

function natives.PATHFIND.GET_RANDOM_VEHICLE_NODE(--[[float]] x, --[[float]] y, --[[float]] z, --[[float]] radius, --[[BOOL]] p4, --[[BOOL]] p5, --[[BOOL]] p6, --[[Vector3*]] outPosition, --[[int*]] nodeId) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PATHFIND.GET_RANDOM_VEHICLE_NODE' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(radius) == "number", "Arg #4 (radius) must be a number.")
	assert(type(p4) == "boolean", "Arg #5 (p4) must be a boolean.")
	assert(type(p5) == "boolean", "Arg #6 (p5) must be a boolean.")
	assert(type(p6) == "boolean", "Arg #7 (p6) must be a boolean.")
	assert(type(outPosition) == "userdata", "Arg #8 (outPosition) must be a userdata.")
	assert(type(nodeId) == "userdata", "Arg #9 (nodeId) must be a userdata.")

	local result = native_call(0x93E0DB8440B73A7D, x, y, z, radius, p4, p5, p6, outPosition, nodeId)
	return result:__tointeger() ~= 0
end
natives.pathfind.get_random_vehicle_node = natives.PATHFIND.GET_RANDOM_VEHICLE_NODE

--[[
Determines the name of the street which is the closest to the given coordinates.

x,y,z - the coordinates of the street
streetName - returns a hash to the name of the street the coords are on
crossingRoad - if the coordinates are on an intersection, a hash to the name of the crossing road

Note: the names are returned as hashes, the strings can be returned using the function HUD::GET_STREET_NAME_FROM_HASH_KEY.
]]
function natives.PATHFIND.GET_STREET_NAME_AT_COORD(--[[float]] x, --[[float]] y, --[[float]] z, --[[Hash*]] streetName, --[[Hash*]] crossingRoad) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PATHFIND.GET_STREET_NAME_AT_COORD' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(streetName) == "userdata", "Arg #4 (streetName) must be a userdata.")
	assert(type(crossingRoad) == "userdata", "Arg #5 (crossingRoad) must be a userdata.")

	local result = native_call(0x2EB41072B4C1E4C0, x, y, z, streetName, crossingRoad)
end
natives.pathfind.get_street_name_at_coord = natives.PATHFIND.GET_STREET_NAME_AT_COORD

--[[
p3 is 0 in the only game script occurrence (trevor3) but 1 doesn't seem to make a difference

distToNxJunction seems to be the distance in metres * 10.0f

direction:
0 = This happens randomly during the drive for seemingly no reason but if you consider that this native is only used in trevor3, it seems to mean "Next frame, stop whatever's being said and tell the player the direction."
1 = Route is being calculated or the player is going in the wrong direction
2 = Please Proceed the Highlighted Route
3 = In (distToNxJunction) Turn Left
4 = In (distToNxJunction) Turn Right
5 = In (distToNxJunction) Keep Straight
6 = In (distToNxJunction) Turn Sharply To The Left
7 = In (distToNxJunction) Turn Sharply To The Right
8 = Route is being recalculated or the navmesh is confusing. This happens randomly during the drive but consistently at {2044.0358, 2996.6116, 44.9717} if you face towards the bar and the route needs you to turn right. In that particular case, it could be a bug with how the turn appears to be 270 deg. CCW instead of "right." Either way, this seems to be the engine saying "I don't know the route right now."

return value set to 0 always
]]
function natives.PATHFIND.GENERATE_DIRECTIONS_TO_COORD(--[[float]] x, --[[float]] y, --[[float]] z, --[[BOOL]] p3, --[[int*]] direction, --[[float*]] p5, --[[float*]] distToNxJunction) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PATHFIND.GENERATE_DIRECTIONS_TO_COORD' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(p3) == "boolean", "Arg #4 (p3) must be a boolean.")
	assert(type(direction) == "userdata", "Arg #5 (direction) must be a userdata.")
	assert(type(p5) == "userdata", "Arg #6 (p5) must be a userdata.")
	assert(type(distToNxJunction) == "userdata", "Arg #7 (distToNxJunction) must be a userdata.")

	local result = native_call(0xF90125F1F79ECDF8, x, y, z, p3, direction, p5, distToNxJunction)
	return result:__tointeger()
end
natives.pathfind.generate_directions_to_coord = natives.PATHFIND.GENERATE_DIRECTIONS_TO_COORD

function natives.PATHFIND.SET_IGNORE_NO_GPS_FLAG(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PATHFIND.SET_IGNORE_NO_GPS_FLAG' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x72751156E7678833, toggle)
end
natives.pathfind.set_ignore_no_gps_flag = natives.PATHFIND.SET_IGNORE_NO_GPS_FLAG

--[[
See: SET_BLIP_ROUTE
]]
function natives.PATHFIND.SET_IGNORE_NO_GPS_FLAG_UNTIL_FIRST_NORMAL_NODE(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PATHFIND.SET_IGNORE_NO_GPS_FLAG_UNTIL_FIRST_NORMAL_NODE' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x1FC289A0C3FF470F, toggle)
end
natives.pathfind.set_ignore_no_gps_flag_until_first_normal_node = natives.PATHFIND.SET_IGNORE_NO_GPS_FLAG_UNTIL_FIRST_NORMAL_NODE

function natives.PATHFIND.SET_GPS_DISABLED_ZONE(--[[float]] x1, --[[float]] y1, --[[float]] z1, --[[float]] x2, --[[float]] y2, --[[float]] z3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PATHFIND.SET_GPS_DISABLED_ZONE' due to disabled trusted mode")

	assert(type(x1) == "number", "Arg #1 (x1) must be a number.")
	assert(type(y1) == "number", "Arg #2 (y1) must be a number.")
	assert(type(z1) == "number", "Arg #3 (z1) must be a number.")
	assert(type(x2) == "number", "Arg #4 (x2) must be a number.")
	assert(type(y2) == "number", "Arg #5 (y2) must be a number.")
	assert(type(z3) == "number", "Arg #6 (z3) must be a number.")

	local result = native_call(0xDC20483CD3DD5201, x1, y1, z1, x2, y2, z3)
end
natives.pathfind.set_gps_disabled_zone = natives.PATHFIND.SET_GPS_DISABLED_ZONE

function natives.PATHFIND.GET_GPS_BLIP_ROUTE_LENGTH() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PATHFIND.GET_GPS_BLIP_ROUTE_LENGTH' due to disabled trusted mode")

	local result = native_call(0xBBB45C3CF5C8AA85)
	return result:__tointeger()
end
natives.pathfind.get_gps_blip_route_length = natives.PATHFIND.GET_GPS_BLIP_ROUTE_LENGTH

--[[
p3 can be 0, 1 or 2.
]]
function natives.PATHFIND.GET_POS_ALONG_GPS_TYPE_ROUTE(--[[Vector3*]] result, --[[BOOL]] p1, --[[float]] p2, --[[int]] p3) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PATHFIND.GET_POS_ALONG_GPS_TYPE_ROUTE' due to disabled trusted mode")

	assert(type(result) == "userdata", "Arg #1 (result) must be a userdata.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0xF3162836C28F9DA5, result, p1, p2, p3)
	return result:__tointeger() ~= 0
end
natives.pathfind.get_pos_along_gps_type_route = natives.PATHFIND.GET_POS_ALONG_GPS_TYPE_ROUTE

function natives.PATHFIND.GET_GPS_BLIP_ROUTE_FOUND() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PATHFIND.GET_GPS_BLIP_ROUTE_FOUND' due to disabled trusted mode")

	local result = native_call(0x869DAACBBE9FA006)
	return result:__tointeger() ~= 0
end
natives.pathfind.get_gps_blip_route_found = natives.PATHFIND.GET_GPS_BLIP_ROUTE_FOUND

function natives.PATHFIND.GET_ROAD_BOUNDARY_USING_HEADING(--[[float]] x, --[[float]] y, --[[float]] z, --[[float]] heading, --[[Vector3*]] outPosition) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PATHFIND.GET_ROAD_BOUNDARY_USING_HEADING' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(heading) == "number", "Arg #4 (heading) must be a number.")
	assert(type(outPosition) == "userdata", "Arg #5 (outPosition) must be a userdata.")

	local result = native_call(0xA0F8A7517A273C05, x, y, z, heading, outPosition)
	return result:__tointeger() ~= 0
end
natives.pathfind.get_road_boundary_using_heading = natives.PATHFIND.GET_ROAD_BOUNDARY_USING_HEADING

function natives.PATHFIND.GET_POSITION_BY_SIDE_OF_ROAD(--[[float]] x, --[[float]] y, --[[float]] z, --[[int]] p3, --[[Vector3*]] outPosition) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PATHFIND.GET_POSITION_BY_SIDE_OF_ROAD' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(outPosition) == "userdata", "Arg #5 (outPosition) must be a userdata.")

	local result = native_call(0x16F46FB18C8009E4, x, y, z, p3, outPosition)
	return result:__tointeger() ~= 0
end
natives.pathfind.get_position_by_side_of_road = natives.PATHFIND.GET_POSITION_BY_SIDE_OF_ROAD

--[[
Gets a value indicating whether the specified position is on a road.
The vehicle parameter is not implemented (ignored).

-MulleDK19
]]
function natives.PATHFIND.IS_POINT_ON_ROAD(--[[float]] x, --[[float]] y, --[[float]] z, --[[Vehicle]] vehicle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PATHFIND.IS_POINT_ON_ROAD' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(vehicle) == "number", "Arg #4 (vehicle) must be a number.")

	local result = native_call(0x125BF4ABFC536B09, x, y, z, vehicle)
	return result:__tointeger() ~= 0
end
natives.pathfind.is_point_on_road = natives.PATHFIND.IS_POINT_ON_ROAD

--[[
Gets the next zone that has been disabled using SET_GPS_DISABLED_ZONE_AT_INDEX.
]]
function natives.PATHFIND.GET_NEXT_GPS_DISABLED_ZONE_INDEX() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PATHFIND.GET_NEXT_GPS_DISABLED_ZONE_INDEX' due to disabled trusted mode")

	local result = native_call(0xD3A6A0EF48823A8C)
	return result:__tointeger()
end
natives.pathfind.get_next_gps_disabled_zone_index = natives.PATHFIND.GET_NEXT_GPS_DISABLED_ZONE_INDEX

--[[
Disables the GPS route displayed on the minimap while within a certain zone (area). When in a disabled zone and creating a waypoint, the GPS route is not shown on the minimap until you are outside of the zone. When disabled, the direct distance is shown on minimap opposed to distance to travel. Seems to only work before setting a waypoint.
You can clear the disabled zone with CLEAR_GPS_DISABLED_ZONE_AT_INDEX.

**Setting a waypoint at the same coordinate:**
Disabled Zone: https://i.imgur.com/P9VUuxM.png
Enabled Zone (normal): https://i.imgur.com/BPi24aw.png
]]
function natives.PATHFIND.SET_GPS_DISABLED_ZONE_AT_INDEX(--[[float]] x1, --[[float]] y1, --[[float]] z1, --[[float]] x2, --[[float]] y2, --[[float]] z2, --[[int]] index) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PATHFIND.SET_GPS_DISABLED_ZONE_AT_INDEX' due to disabled trusted mode")

	assert(type(x1) == "number", "Arg #1 (x1) must be a number.")
	assert(type(y1) == "number", "Arg #2 (y1) must be a number.")
	assert(type(z1) == "number", "Arg #3 (z1) must be a number.")
	assert(type(x2) == "number", "Arg #4 (x2) must be a number.")
	assert(type(y2) == "number", "Arg #5 (y2) must be a number.")
	assert(type(z2) == "number", "Arg #6 (z2) must be a number.")
	assert(type(index) == "number", "Arg #7 (index) must be a number.")

	local result = native_call(0xD0BC1C6FB18EE154, x1, y1, z1, x2, y2, z2, index)
end
natives.pathfind.set_gps_disabled_zone_at_index = natives.PATHFIND.SET_GPS_DISABLED_ZONE_AT_INDEX

--[[
Clears a disabled GPS route area from a certain index previously set using `SET_GPS_DISABLED_ZONE_AT_INDEX`.
]]
function natives.PATHFIND.CLEAR_GPS_DISABLED_ZONE_AT_INDEX(--[[int]] index) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PATHFIND.CLEAR_GPS_DISABLED_ZONE_AT_INDEX' due to disabled trusted mode")

	assert(type(index) == "number", "Arg #1 (index) must be a number.")

	local result = native_call(0x2801D0012266DF07, index)
end
natives.pathfind.clear_gps_disabled_zone_at_index = natives.PATHFIND.CLEAR_GPS_DISABLED_ZONE_AT_INDEX

function natives.PATHFIND.ADD_NAVMESH_REQUIRED_REGION(--[[float]] x, --[[float]] y, --[[float]] radius) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PATHFIND.ADD_NAVMESH_REQUIRED_REGION' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(radius) == "number", "Arg #3 (radius) must be a number.")

	local result = native_call(0x387EAD7EE42F6685, x, y, radius)
end
natives.pathfind.add_navmesh_required_region = natives.PATHFIND.ADD_NAVMESH_REQUIRED_REGION

function natives.PATHFIND.REMOVE_NAVMESH_REQUIRED_REGIONS() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PATHFIND.REMOVE_NAVMESH_REQUIRED_REGIONS' due to disabled trusted mode")

	local result = native_call(0x916F0A3CDEC3445E)
end
natives.pathfind.remove_navmesh_required_regions = natives.PATHFIND.REMOVE_NAVMESH_REQUIRED_REGIONS

function natives.PATHFIND.IS_NAVMESH_REQUIRED_REGION_IN_USE() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PATHFIND.IS_NAVMESH_REQUIRED_REGION_IN_USE' due to disabled trusted mode")

	local result = native_call(0x705A844002B39DC0)
	return result:__tointeger() ~= 0
end
natives.pathfind.is_navmesh_required_region_in_use = natives.PATHFIND.IS_NAVMESH_REQUIRED_REGION_IN_USE

--[[
Set toggle true to disable navmesh.
Set toggle false to enable navmesh.
]]
function natives.PATHFIND.DISABLE_NAVMESH_IN_AREA(--[[float]] x1, --[[float]] y1, --[[float]] z1, --[[float]] x2, --[[float]] y2, --[[float]] z2, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PATHFIND.DISABLE_NAVMESH_IN_AREA' due to disabled trusted mode")

	assert(type(x1) == "number", "Arg #1 (x1) must be a number.")
	assert(type(y1) == "number", "Arg #2 (y1) must be a number.")
	assert(type(z1) == "number", "Arg #3 (z1) must be a number.")
	assert(type(x2) == "number", "Arg #4 (x2) must be a number.")
	assert(type(y2) == "number", "Arg #5 (y2) must be a number.")
	assert(type(z2) == "number", "Arg #6 (z2) must be a number.")
	assert(type(toggle) == "boolean", "Arg #7 (toggle) must be a boolean.")

	local result = native_call(0x4C8872D8CDBE1B8B, x1, y1, z1, x2, y2, z2, toggle)
end
natives.pathfind.disable_navmesh_in_area = natives.PATHFIND.DISABLE_NAVMESH_IN_AREA

function natives.PATHFIND.ARE_ALL_NAVMESH_REGIONS_LOADED() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PATHFIND.ARE_ALL_NAVMESH_REGIONS_LOADED' due to disabled trusted mode")

	local result = native_call(0x8415D95B194A3AEA)
	return result:__tointeger() ~= 0
end
natives.pathfind.are_all_navmesh_regions_loaded = natives.PATHFIND.ARE_ALL_NAVMESH_REGIONS_LOADED

--[[
Returns whether navmesh for the region is loaded. The region is a rectangular prism defined by it's top left deepest corner to it's bottom right shallowest corner.

If you can re-word this so it makes more sense, please do. I'm horrible with words sometimes...
]]
function natives.PATHFIND.IS_NAVMESH_LOADED_IN_AREA(--[[float]] x1, --[[float]] y1, --[[float]] z1, --[[float]] x2, --[[float]] y2, --[[float]] z2) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PATHFIND.IS_NAVMESH_LOADED_IN_AREA' due to disabled trusted mode")

	assert(type(x1) == "number", "Arg #1 (x1) must be a number.")
	assert(type(y1) == "number", "Arg #2 (y1) must be a number.")
	assert(type(z1) == "number", "Arg #3 (z1) must be a number.")
	assert(type(x2) == "number", "Arg #4 (x2) must be a number.")
	assert(type(y2) == "number", "Arg #5 (y2) must be a number.")
	assert(type(z2) == "number", "Arg #6 (z2) must be a number.")

	local result = native_call(0xF813C7E63F9062A5, x1, y1, z1, x2, y2, z2)
	return result:__tointeger() ~= 0
end
natives.pathfind.is_navmesh_loaded_in_area = natives.PATHFIND.IS_NAVMESH_LOADED_IN_AREA

function natives.PATHFIND.GET_NUM_NAVMESHES_EXISTING_IN_AREA(--[[float]] x1, --[[float]] y1, --[[float]] z1, --[[float]] x2, --[[float]] y2, --[[float]] z2) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PATHFIND.GET_NUM_NAVMESHES_EXISTING_IN_AREA' due to disabled trusted mode")

	assert(type(x1) == "number", "Arg #1 (x1) must be a number.")
	assert(type(y1) == "number", "Arg #2 (y1) must be a number.")
	assert(type(z1) == "number", "Arg #3 (z1) must be a number.")
	assert(type(x2) == "number", "Arg #4 (x2) must be a number.")
	assert(type(y2) == "number", "Arg #5 (y2) must be a number.")
	assert(type(z2) == "number", "Arg #6 (z2) must be a number.")

	local result = native_call(0x01708E8DD3FF8C65, x1, y1, z1, x2, y2, z2)
	return result:__tointeger()
end
natives.pathfind.get_num_navmeshes_existing_in_area = natives.PATHFIND.GET_NUM_NAVMESHES_EXISTING_IN_AREA

function natives.PATHFIND.ADD_NAVMESH_BLOCKING_OBJECT(--[[float]] p0, --[[float]] p1, --[[float]] p2, --[[float]] p3, --[[float]] p4, --[[float]] p5, --[[float]] p6, --[[BOOL]] p7, --[[Any]] p8) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PATHFIND.ADD_NAVMESH_BLOCKING_OBJECT' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")
	assert(type(p6) == "number", "Arg #7 (p6) must be a number.")
	assert(type(p7) == "boolean", "Arg #8 (p7) must be a boolean.")
	assert(type(p8) == "number", "Arg #9 (p8) must be a number.")

	local result = native_call(0xFCD5C8E06E502F5A, p0, p1, p2, p3, p4, p5, p6, p7, p8)
	return result:__tointeger()
end
natives.pathfind.add_navmesh_blocking_object = natives.PATHFIND.ADD_NAVMESH_BLOCKING_OBJECT

function natives.PATHFIND.UPDATE_NAVMESH_BLOCKING_OBJECT(--[[Any]] p0, --[[float]] p1, --[[float]] p2, --[[float]] p3, --[[float]] p4, --[[float]] p5, --[[float]] p6, --[[float]] p7, --[[Any]] p8) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PATHFIND.UPDATE_NAVMESH_BLOCKING_OBJECT' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")
	assert(type(p6) == "number", "Arg #7 (p6) must be a number.")
	assert(type(p7) == "number", "Arg #8 (p7) must be a number.")
	assert(type(p8) == "number", "Arg #9 (p8) must be a number.")

	local result = native_call(0x109E99373F290687, p0, p1, p2, p3, p4, p5, p6, p7, p8)
end
natives.pathfind.update_navmesh_blocking_object = natives.PATHFIND.UPDATE_NAVMESH_BLOCKING_OBJECT

function natives.PATHFIND.REMOVE_NAVMESH_BLOCKING_OBJECT(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PATHFIND.REMOVE_NAVMESH_BLOCKING_OBJECT' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x46399A7895957C0E, p0)
end
natives.pathfind.remove_navmesh_blocking_object = natives.PATHFIND.REMOVE_NAVMESH_BLOCKING_OBJECT

function natives.PATHFIND.DOES_NAVMESH_BLOCKING_OBJECT_EXIST(--[[Any]] p0) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PATHFIND.DOES_NAVMESH_BLOCKING_OBJECT_EXIST' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x0EAEB0DB4B132399, p0)
	return result:__tointeger() ~= 0
end
natives.pathfind.does_navmesh_blocking_object_exist = natives.PATHFIND.DOES_NAVMESH_BLOCKING_OBJECT_EXIST

--[[
Returns CGameWorldHeightMap's maximum Z value at specified point (grid node).
]]
function natives.PATHFIND.GET_APPROX_HEIGHT_FOR_POINT(--[[float]] x, --[[float]] y) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PATHFIND.GET_APPROX_HEIGHT_FOR_POINT' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")

	local result = native_call(0x29C24BFBED8AB8FB, x, y)
	return result:__tonumber()
end
natives.pathfind.get_approx_height_for_point = natives.PATHFIND.GET_APPROX_HEIGHT_FOR_POINT

--[[
Returns CGameWorldHeightMap's maximum Z among all grid nodes that intersect with the specified rectangle.
]]
function natives.PATHFIND.GET_APPROX_HEIGHT_FOR_AREA(--[[float]] x1, --[[float]] y1, --[[float]] x2, --[[float]] y2) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PATHFIND.GET_APPROX_HEIGHT_FOR_AREA' due to disabled trusted mode")

	assert(type(x1) == "number", "Arg #1 (x1) must be a number.")
	assert(type(y1) == "number", "Arg #2 (y1) must be a number.")
	assert(type(x2) == "number", "Arg #3 (x2) must be a number.")
	assert(type(y2) == "number", "Arg #4 (y2) must be a number.")

	local result = native_call(0x8ABE8608576D9CE3, x1, y1, x2, y2)
	return result:__tonumber()
end
natives.pathfind.get_approx_height_for_area = natives.PATHFIND.GET_APPROX_HEIGHT_FOR_AREA

--[[
Returns CGameWorldHeightMap's minimum Z value at specified point (grid node).
]]
function natives.PATHFIND.GET_APPROX_FLOOR_FOR_POINT(--[[float]] x, --[[float]] y) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PATHFIND.GET_APPROX_FLOOR_FOR_POINT' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")

	local result = native_call(0x336511A34F2E5185, x, y)
	return result:__tonumber()
end
natives.pathfind.get_approx_floor_for_point = natives.PATHFIND.GET_APPROX_FLOOR_FOR_POINT

--[[
Returns CGameWorldHeightMap's minimum Z among all grid nodes that intersect with the specified rectangle.
]]
function natives.PATHFIND.GET_APPROX_FLOOR_FOR_AREA(--[[float]] x1, --[[float]] y1, --[[float]] x2, --[[float]] y2) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PATHFIND.GET_APPROX_FLOOR_FOR_AREA' due to disabled trusted mode")

	assert(type(x1) == "number", "Arg #1 (x1) must be a number.")
	assert(type(y1) == "number", "Arg #2 (y1) must be a number.")
	assert(type(x2) == "number", "Arg #3 (x2) must be a number.")
	assert(type(y2) == "number", "Arg #4 (y2) must be a number.")

	local result = native_call(0x3599D741C9AC6310, x1, y1, x2, y2)
	return result:__tonumber()
end
natives.pathfind.get_approx_floor_for_area = natives.PATHFIND.GET_APPROX_FLOOR_FOR_AREA

--[[
Calculates the travel distance between a set of points.

Doesn't seem to correlate with distance on gps sometimes.
This function returns the value 100000.0 over long distances, seems to be a failure mode result, potentially occurring when not all path nodes are loaded into pathfind.
]]
function natives.PATHFIND.CALCULATE_TRAVEL_DISTANCE_BETWEEN_POINTS(--[[float]] x1, --[[float]] y1, --[[float]] z1, --[[float]] x2, --[[float]] y2, --[[float]] z2) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PATHFIND.CALCULATE_TRAVEL_DISTANCE_BETWEEN_POINTS' due to disabled trusted mode")

	assert(type(x1) == "number", "Arg #1 (x1) must be a number.")
	assert(type(y1) == "number", "Arg #2 (y1) must be a number.")
	assert(type(z1) == "number", "Arg #3 (z1) must be a number.")
	assert(type(x2) == "number", "Arg #4 (x2) must be a number.")
	assert(type(y2) == "number", "Arg #5 (y2) must be a number.")
	assert(type(z2) == "number", "Arg #6 (z2) must be a number.")

	local result = native_call(0xADD95C7005C4A197, x1, y1, z1, x2, y2, z2)
	return result:__tonumber()
end
natives.pathfind.calculate_travel_distance_between_points = natives.PATHFIND.CALCULATE_TRAVEL_DISTANCE_BETWEEN_POINTS


natives.PED = {}
natives.ped = {}

--[[
https://alloc8or.re/gta5/doc/enums/ePedType.txt

Full list of peds by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/peds.json
]]
function natives.PED.CREATE_PED(--[[int]] pedType, --[[Hash]] modelHash, --[[float]] x, --[[float]] y, --[[float]] z, --[[float]] heading, --[[BOOL]] isNetwork, --[[BOOL]] bScriptHostPed) -- Returns Ped
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.CREATE_PED' due to disabled trusted mode")

	assert(type(pedType) == "number", "Arg #1 (pedType) must be a number.")
	assert(type(modelHash) == "number", "Arg #2 (modelHash) must be a number.")
	assert(type(x) == "number", "Arg #3 (x) must be a number.")
	assert(type(y) == "number", "Arg #4 (y) must be a number.")
	assert(type(z) == "number", "Arg #5 (z) must be a number.")
	assert(type(heading) == "number", "Arg #6 (heading) must be a number.")
	assert(type(isNetwork) == "boolean", "Arg #7 (isNetwork) must be a boolean.")
	assert(type(bScriptHostPed) == "boolean", "Arg #8 (bScriptHostPed) must be a boolean.")

	local result = native_call(0xD49F9B0955C367DE, pedType, modelHash, x, y, z, heading, isNetwork, bScriptHostPed)
	return result:__tointeger()
end
natives.ped.create_ped = natives.PED.CREATE_PED

--[[
Deletes the specified ped, then sets the handle pointed to by the pointer to NULL.
]]
function natives.PED.DELETE_PED(--[[Ped*]] ped) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.DELETE_PED' due to disabled trusted mode")

	assert(type(ped) == "userdata", "Arg #1 (ped) must be a userdata.")

	local result = native_call(0x9614299DCB53E54B, ped)
end
natives.ped.delete_ped = natives.PED.DELETE_PED

function natives.PED.CLONE_PED(--[[Ped]] ped, --[[BOOL]] isNetwork, --[[BOOL]] bScriptHostPed, --[[BOOL]] copyHeadBlendFlag) -- Returns Ped
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.CLONE_PED' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(isNetwork) == "boolean", "Arg #2 (isNetwork) must be a boolean.")
	assert(type(bScriptHostPed) == "boolean", "Arg #3 (bScriptHostPed) must be a boolean.")
	assert(type(copyHeadBlendFlag) == "boolean", "Arg #4 (copyHeadBlendFlag) must be a boolean.")

	local result = native_call(0xEF29A16337FACADB, ped, isNetwork, bScriptHostPed, copyHeadBlendFlag)
	return result:__tointeger()
end
natives.ped.clone_ped = natives.PED.CLONE_PED

function natives.PED.CLONE_PED_ALT(--[[Ped]] ped, --[[BOOL]] isNetwork, --[[BOOL]] bScriptHostPed, --[[BOOL]] copyHeadBlendFlag, --[[BOOL]] p4) -- Returns Ped
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.CLONE_PED_ALT' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(isNetwork) == "boolean", "Arg #2 (isNetwork) must be a boolean.")
	assert(type(bScriptHostPed) == "boolean", "Arg #3 (bScriptHostPed) must be a boolean.")
	assert(type(copyHeadBlendFlag) == "boolean", "Arg #4 (copyHeadBlendFlag) must be a boolean.")
	assert(type(p4) == "boolean", "Arg #5 (p4) must be a boolean.")

	local result = native_call(0x668FD40BCBA5DE48, ped, isNetwork, bScriptHostPed, copyHeadBlendFlag, p4)
	return result:__tointeger()
end
natives.ped.clone_ped_alt = natives.PED.CLONE_PED_ALT

--[[
Copies ped's components and props to targetPed.
]]
function natives.PED.CLONE_PED_TO_TARGET(--[[Ped]] ped, --[[Ped]] targetPed) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.CLONE_PED_TO_TARGET' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(targetPed) == "number", "Arg #2 (targetPed) must be a number.")

	local result = native_call(0xE952D6431689AD9A, ped, targetPed)
end
natives.ped.clone_ped_to_target = natives.PED.CLONE_PED_TO_TARGET

function natives.PED.CLONE_PED_TO_TARGET_ALT(--[[Ped]] ped, --[[Ped]] targetPed, --[[BOOL]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.CLONE_PED_TO_TARGET_ALT' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(targetPed) == "number", "Arg #2 (targetPed) must be a number.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")

	local result = native_call(0x148B08C2D2ACB884, ped, targetPed, p2)
end
natives.ped.clone_ped_to_target_alt = natives.PED.CLONE_PED_TO_TARGET_ALT

--[[
Gets a value indicating whether the specified ped is in the specified vehicle.

If 'atGetIn' is false, the function will not return true until the ped is sitting in the vehicle and is about to close the door. If it's true, the function returns true the moment the ped starts to get onto the seat (after opening the door). Eg. if false, and the ped is getting into a submersible, the function will not return true until the ped has descended down into the submersible and gotten into the seat, while if it's true, it'll return true the moment the hatch has been opened and the ped is about to descend into the submersible.
]]
function natives.PED.IS_PED_IN_VEHICLE(--[[Ped]] ped, --[[Vehicle]] vehicle, --[[BOOL]] atGetIn) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_IN_VEHICLE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(vehicle) == "number", "Arg #2 (vehicle) must be a number.")
	assert(type(atGetIn) == "boolean", "Arg #3 (atGetIn) must be a boolean.")

	local result = native_call(0xA3EE4A07279BB9DB, ped, vehicle, atGetIn)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_in_vehicle = natives.PED.IS_PED_IN_VEHICLE

function natives.PED.IS_PED_IN_MODEL(--[[Ped]] ped, --[[Hash]] modelHash) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_IN_MODEL' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(modelHash) == "number", "Arg #2 (modelHash) must be a number.")

	local result = native_call(0x796D90EFB19AA332, ped, modelHash)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_in_model = natives.PED.IS_PED_IN_MODEL

--[[
Gets a value indicating whether the specified ped is in any vehicle.

If 'atGetIn' is false, the function will not return true until the ped is sitting in the vehicle and is about to close the door. If it's true, the function returns true the moment the ped starts to get onto the seat (after opening the door). Eg. if false, and the ped is getting into a submersible, the function will not return true until the ped has descended down into the submersible and gotten into the seat, while if it's true, it'll return true the moment the hatch has been opened and the ped is about to descend into the submersible.
]]
function natives.PED.IS_PED_IN_ANY_VEHICLE(--[[Ped]] ped, --[[BOOL]] atGetIn) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_IN_ANY_VEHICLE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(atGetIn) == "boolean", "Arg #2 (atGetIn) must be a boolean.")

	local result = native_call(0x997ABD671D25CA0B, ped, atGetIn)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_in_any_vehicle = natives.PED.IS_PED_IN_ANY_VEHICLE

--[[
xyz - relative to the world origin.
]]
function natives.PED.IS_COP_PED_IN_AREA_3D(--[[float]] x1, --[[float]] y1, --[[float]] z1, --[[float]] x2, --[[float]] y2, --[[float]] z2) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_COP_PED_IN_AREA_3D' due to disabled trusted mode")

	assert(type(x1) == "number", "Arg #1 (x1) must be a number.")
	assert(type(y1) == "number", "Arg #2 (y1) must be a number.")
	assert(type(z1) == "number", "Arg #3 (z1) must be a number.")
	assert(type(x2) == "number", "Arg #4 (x2) must be a number.")
	assert(type(y2) == "number", "Arg #5 (y2) must be a number.")
	assert(type(z2) == "number", "Arg #6 (z2) must be a number.")

	local result = native_call(0x16EC4839969F9F5E, x1, y1, z1, x2, y2, z2)
	return result:__tointeger() ~= 0
end
natives.ped.is_cop_ped_in_area_3d = natives.PED.IS_COP_PED_IN_AREA_3D

--[[
Gets a value indicating whether this ped's health is below its injured threshold.

The default threshold is 100.
]]
function natives.PED.IS_PED_INJURED(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_INJURED' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x84A2DD9AC37C35C1, ped)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_injured = natives.PED.IS_PED_INJURED

--[[
Returns whether the specified ped is hurt.
]]
function natives.PED.IS_PED_HURT(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_HURT' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x5983BB449D7FDB12, ped)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_hurt = natives.PED.IS_PED_HURT

--[[
Gets a value indicating whether this ped's health is below its fatally injured threshold. The default threshold is 100.
If the handle is invalid, the function returns true.
]]
function natives.PED.IS_PED_FATALLY_INJURED(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_FATALLY_INJURED' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0xD839450756ED5A80, ped)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_fatally_injured = natives.PED.IS_PED_FATALLY_INJURED

--[[
Seems to consistently return true if the ped is dead.

p1 is always passed 1 in the scripts.

I suggest to remove "OR_DYING" part, because it does not detect dying phase.

That's what the devs call it, cry about it.

lol
]]
function natives.PED.IS_PED_DEAD_OR_DYING(--[[Ped]] ped, --[[BOOL]] p1) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_DEAD_OR_DYING' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0x3317DEDB88C95038, ped, p1)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_dead_or_dying = natives.PED.IS_PED_DEAD_OR_DYING

function natives.PED.IS_CONVERSATION_PED_DEAD(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_CONVERSATION_PED_DEAD' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0xE0A0AEC214B1FABA, ped)
	return result:__tointeger() ~= 0
end
natives.ped.is_conversation_ped_dead = natives.PED.IS_CONVERSATION_PED_DEAD

function natives.PED.IS_PED_AIMING_FROM_COVER(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_AIMING_FROM_COVER' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x3998B1276A3300E5, ped)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_aiming_from_cover = natives.PED.IS_PED_AIMING_FROM_COVER

--[[
Returns whether the specified ped is reloading.
]]
function natives.PED.IS_PED_RELOADING(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_RELOADING' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x24B100C68C645951, ped)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_reloading = natives.PED.IS_PED_RELOADING

--[[
Returns true if the given ped has a valid pointer to CPlayerInfo in its CPed class. That's all.
]]
function natives.PED.IS_PED_A_PLAYER(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_A_PLAYER' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x12534C348C6CB68B, ped)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_a_player = natives.PED.IS_PED_A_PLAYER

--[[
pedType: see CREATE_PED

Full list of peds by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/peds.json
]]
function natives.PED.CREATE_PED_INSIDE_VEHICLE(--[[Vehicle]] vehicle, --[[int]] pedType, --[[Hash]] modelHash, --[[int]] seat, --[[BOOL]] isNetwork, --[[BOOL]] bScriptHostPed) -- Returns Ped
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.CREATE_PED_INSIDE_VEHICLE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(pedType) == "number", "Arg #2 (pedType) must be a number.")
	assert(type(modelHash) == "number", "Arg #3 (modelHash) must be a number.")
	assert(type(seat) == "number", "Arg #4 (seat) must be a number.")
	assert(type(isNetwork) == "boolean", "Arg #5 (isNetwork) must be a boolean.")
	assert(type(bScriptHostPed) == "boolean", "Arg #6 (bScriptHostPed) must be a boolean.")

	local result = native_call(0x7DD959874C1FD534, vehicle, pedType, modelHash, seat, isNetwork, bScriptHostPed)
	return result:__tointeger()
end
natives.ped.create_ped_inside_vehicle = natives.PED.CREATE_PED_INSIDE_VEHICLE

function natives.PED.SET_PED_DESIRED_HEADING(--[[Ped]] ped, --[[float]] heading) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_DESIRED_HEADING' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(heading) == "number", "Arg #2 (heading) must be a number.")

	local result = native_call(0xAA5A7ECE2AA8FE70, ped, heading)
end
natives.ped.set_ped_desired_heading = natives.PED.SET_PED_DESIRED_HEADING

function natives.PED.FORCE_ALL_HEADING_VALUES_TO_ALIGN(--[[Ped]] ped) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.FORCE_ALL_HEADING_VALUES_TO_ALIGN' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0xFF287323B0E2C69A, ped)
end
natives.ped.force_all_heading_values_to_align = natives.PED.FORCE_ALL_HEADING_VALUES_TO_ALIGN

--[[
angle is ped's view cone
]]
function natives.PED.IS_PED_FACING_PED(--[[Ped]] ped, --[[Ped]] otherPed, --[[float]] angle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_FACING_PED' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(otherPed) == "number", "Arg #2 (otherPed) must be a number.")
	assert(type(angle) == "number", "Arg #3 (angle) must be a number.")

	local result = native_call(0xD71649DB0A545AA3, ped, otherPed, angle)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_facing_ped = natives.PED.IS_PED_FACING_PED

--[[
Notes: The function only returns true while the ped is: 
A.) Swinging a random melee attack (including pistol-whipping)

B.) Reacting to being hit by a melee attack (including pistol-whipping)

C.) Is locked-on to an enemy (arms up, strafing/skipping in the default fighting-stance, ready to dodge+counter). 

You don't have to be holding the melee-targetting button to be in this stance; you stay in it by default for a few seconds after swinging at someone. If you do a sprinting punch, it returns true for the duration of the punch animation and then returns false again, even if you've punched and made-angry many peds
]]
function natives.PED.IS_PED_IN_MELEE_COMBAT(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_IN_MELEE_COMBAT' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x4E209B2C1EAD5159, ped)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_in_melee_combat = natives.PED.IS_PED_IN_MELEE_COMBAT

--[[
Returns true if the ped doesn't do any movement. If the ped is being pushed forwards by using APPLY_FORCE_TO_ENTITY for example, the function returns false.
]]
function natives.PED.IS_PED_STOPPED(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_STOPPED' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x530944F6F4B8A214, ped)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_stopped = natives.PED.IS_PED_STOPPED

function natives.PED.IS_PED_SHOOTING_IN_AREA(--[[Ped]] ped, --[[float]] x1, --[[float]] y1, --[[float]] z1, --[[float]] x2, --[[float]] y2, --[[float]] z2, --[[BOOL]] p7, --[[BOOL]] p8) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_SHOOTING_IN_AREA' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(x1) == "number", "Arg #2 (x1) must be a number.")
	assert(type(y1) == "number", "Arg #3 (y1) must be a number.")
	assert(type(z1) == "number", "Arg #4 (z1) must be a number.")
	assert(type(x2) == "number", "Arg #5 (x2) must be a number.")
	assert(type(y2) == "number", "Arg #6 (y2) must be a number.")
	assert(type(z2) == "number", "Arg #7 (z2) must be a number.")
	assert(type(p7) == "boolean", "Arg #8 (p7) must be a boolean.")
	assert(type(p8) == "boolean", "Arg #9 (p8) must be a boolean.")

	local result = native_call(0x7E9DFE24AC1E58EF, ped, x1, y1, z1, x2, y2, z2, p7, p8)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_shooting_in_area = natives.PED.IS_PED_SHOOTING_IN_AREA

function natives.PED.IS_ANY_PED_SHOOTING_IN_AREA(--[[float]] x1, --[[float]] y1, --[[float]] z1, --[[float]] x2, --[[float]] y2, --[[float]] z2, --[[BOOL]] p6, --[[BOOL]] p7) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_ANY_PED_SHOOTING_IN_AREA' due to disabled trusted mode")

	assert(type(x1) == "number", "Arg #1 (x1) must be a number.")
	assert(type(y1) == "number", "Arg #2 (y1) must be a number.")
	assert(type(z1) == "number", "Arg #3 (z1) must be a number.")
	assert(type(x2) == "number", "Arg #4 (x2) must be a number.")
	assert(type(y2) == "number", "Arg #5 (y2) must be a number.")
	assert(type(z2) == "number", "Arg #6 (z2) must be a number.")
	assert(type(p6) == "boolean", "Arg #7 (p6) must be a boolean.")
	assert(type(p7) == "boolean", "Arg #8 (p7) must be a boolean.")

	local result = native_call(0xA0D3D71EA1086C55, x1, y1, z1, x2, y2, z2, p6, p7)
	return result:__tointeger() ~= 0
end
natives.ped.is_any_ped_shooting_in_area = natives.PED.IS_ANY_PED_SHOOTING_IN_AREA

--[[
Returns whether the specified ped is shooting.
]]
function natives.PED.IS_PED_SHOOTING(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_SHOOTING' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x34616828CD07F1A1, ped)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_shooting = natives.PED.IS_PED_SHOOTING

--[[
accuracy = 0-100, 100 being perfectly accurate
]]
function natives.PED.SET_PED_ACCURACY(--[[Ped]] ped, --[[int]] accuracy) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_ACCURACY' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(accuracy) == "number", "Arg #2 (accuracy) must be a number.")

	local result = native_call(0x7AEFB85C1D49DEB6, ped, accuracy)
end
natives.ped.set_ped_accuracy = natives.PED.SET_PED_ACCURACY

function natives.PED.GET_PED_ACCURACY(--[[Ped]] ped) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_PED_ACCURACY' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x37F4AD56ECBC0CD6, ped)
	return result:__tointeger()
end
natives.ped.get_ped_accuracy = natives.PED.GET_PED_ACCURACY

function natives.PED.SET_AMBIENT_LAW_PED_ACCURACY_MODIFIER(--[[float]] multiplier) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_AMBIENT_LAW_PED_ACCURACY_MODIFIER' due to disabled trusted mode")

	assert(type(multiplier) == "number", "Arg #1 (multiplier) must be a number.")

	local result = native_call(0x87DDEB611B329A9C, multiplier)
end
natives.ped.set_ambient_law_ped_accuracy_modifier = natives.PED.SET_AMBIENT_LAW_PED_ACCURACY_MODIFIER

function natives.PED.IS_PED_MODEL(--[[Ped]] ped, --[[Hash]] modelHash) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_MODEL' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(modelHash) == "number", "Arg #2 (modelHash) must be a number.")

	local result = native_call(0xC9D55B1A358A5BF7, ped, modelHash)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_model = natives.PED.IS_PED_MODEL

--[[
Forces the ped to fall back and kills it.

It doesn't really explode the ped's head but it kills the ped
]]
function natives.PED.EXPLODE_PED_HEAD(--[[Ped]] ped, --[[Hash]] weaponHash) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.EXPLODE_PED_HEAD' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(weaponHash) == "number", "Arg #2 (weaponHash) must be a number.")

	local result = native_call(0x2D05CED3A38D0F3A, ped, weaponHash)
end
natives.ped.explode_ped_head = natives.PED.EXPLODE_PED_HEAD

--[[
Judging purely from a quick disassembly, if the ped is in a vehicle, the ped will be deleted immediately. If not, it'll be marked as no longer needed. - very elegant..
]]
function natives.PED.REMOVE_PED_ELEGANTLY(--[[Ped*]] ped) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.REMOVE_PED_ELEGANTLY' due to disabled trusted mode")

	assert(type(ped) == "userdata", "Arg #1 (ped) must be a userdata.")

	local result = native_call(0xAC6D445B994DF95E, ped)
end
natives.ped.remove_ped_elegantly = natives.PED.REMOVE_PED_ELEGANTLY

--[[
Same as SET_PED_ARMOUR, but ADDS 'amount' to the armor the Ped already has.
]]
function natives.PED.ADD_ARMOUR_TO_PED(--[[Ped]] ped, --[[int]] amount) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.ADD_ARMOUR_TO_PED' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(amount) == "number", "Arg #2 (amount) must be a number.")

	local result = native_call(0x5BA652A0CD14DF2F, ped, amount)
end
natives.ped.add_armour_to_ped = natives.PED.ADD_ARMOUR_TO_PED

--[[
Sets the armor of the specified ped.

ped: The Ped to set the armor of.
amount: A value between 0 and 100 indicating the value to set the Ped's armor to.
]]
function natives.PED.SET_PED_ARMOUR(--[[Ped]] ped, --[[int]] amount) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_ARMOUR' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(amount) == "number", "Arg #2 (amount) must be a number.")

	local result = native_call(0xCEA04D83135264CC, ped, amount)
end
natives.ped.set_ped_armour = natives.PED.SET_PED_ARMOUR

--[[
Ped: The ped to warp.
vehicle: The vehicle to warp the ped into.
Seat_Index: [-1 is driver seat, -2 first free passenger seat]

Moreinfo of Seat Index
DriverSeat = -1
Passenger = 0
Left Rear = 1
RightRear = 2
]]
function natives.PED.SET_PED_INTO_VEHICLE(--[[Ped]] ped, --[[Vehicle]] vehicle, --[[int]] seatIndex) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_INTO_VEHICLE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(vehicle) == "number", "Arg #2 (vehicle) must be a number.")
	assert(type(seatIndex) == "number", "Arg #3 (seatIndex) must be a number.")

	local result = native_call(0xF75B0D629E1C063D, ped, vehicle, seatIndex)
end
natives.ped.set_ped_into_vehicle = natives.PED.SET_PED_INTO_VEHICLE

function natives.PED.SET_PED_ALLOW_VEHICLES_OVERRIDE(--[[Ped]] ped, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_ALLOW_VEHICLES_OVERRIDE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x3C028C636A414ED9, ped, toggle)
end
natives.ped.set_ped_allow_vehicles_override = natives.PED.SET_PED_ALLOW_VEHICLES_OVERRIDE

function natives.PED.CAN_CREATE_RANDOM_PED(--[[BOOL]] unk) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.CAN_CREATE_RANDOM_PED' due to disabled trusted mode")

	assert(type(unk) == "boolean", "Arg #1 (unk) must be a boolean.")

	local result = native_call(0x3E8349C08E4B82E4, unk)
	return result:__tointeger() ~= 0
end
natives.ped.can_create_random_ped = natives.PED.CAN_CREATE_RANDOM_PED

--[[
vb.net
Dim ped_handle As Integer
                    With Game.Player.Character
                        Dim pos As Vector3 = .Position + .ForwardVector * 3
                        ped_handle = Native.Function.Call(Of Integer)(Hash.CREATE_RANDOM_PED, pos.X, pos.Y, pos.Z)
                    End With

Creates a Ped at the specified location, returns the Ped Handle.  
Ped will not act until SET_PED_AS_NO_LONGER_NEEDED is called.
]]
function natives.PED.CREATE_RANDOM_PED(--[[float]] posX, --[[float]] posY, --[[float]] posZ) -- Returns Ped
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.CREATE_RANDOM_PED' due to disabled trusted mode")

	assert(type(posX) == "number", "Arg #1 (posX) must be a number.")
	assert(type(posY) == "number", "Arg #2 (posY) must be a number.")
	assert(type(posZ) == "number", "Arg #3 (posZ) must be a number.")

	local result = native_call(0xB4AC7D0CF06BFE8F, posX, posY, posZ)
	return result:__tointeger()
end
natives.ped.create_random_ped = natives.PED.CREATE_RANDOM_PED

function natives.PED.CREATE_RANDOM_PED_AS_DRIVER(--[[Vehicle]] vehicle, --[[BOOL]] returnHandle) -- Returns Ped
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.CREATE_RANDOM_PED_AS_DRIVER' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(returnHandle) == "boolean", "Arg #2 (returnHandle) must be a boolean.")

	local result = native_call(0x9B62392B474F44A0, vehicle, returnHandle)
	return result:__tointeger()
end
natives.ped.create_random_ped_as_driver = natives.PED.CREATE_RANDOM_PED_AS_DRIVER

function natives.PED.CAN_CREATE_RANDOM_DRIVER() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.CAN_CREATE_RANDOM_DRIVER' due to disabled trusted mode")

	local result = native_call(0xB8EB95E5B4E56978)
	return result:__tointeger() ~= 0
end
natives.ped.can_create_random_driver = natives.PED.CAN_CREATE_RANDOM_DRIVER

function natives.PED.CAN_CREATE_RANDOM_BIKE_RIDER() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.CAN_CREATE_RANDOM_BIKE_RIDER' due to disabled trusted mode")

	local result = native_call(0xEACEEDA81751915C)
	return result:__tointeger() ~= 0
end
natives.ped.can_create_random_bike_rider = natives.PED.CAN_CREATE_RANDOM_BIKE_RIDER

function natives.PED.SET_PED_MOVE_ANIMS_BLEND_OUT(--[[Ped]] ped) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_MOVE_ANIMS_BLEND_OUT' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x9E8C908F41584ECD, ped)
end
natives.ped.set_ped_move_anims_blend_out = natives.PED.SET_PED_MOVE_ANIMS_BLEND_OUT

function natives.PED.SET_PED_CAN_BE_DRAGGED_OUT(--[[Ped]] ped, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_CAN_BE_DRAGGED_OUT' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xC1670E958EEE24E5, ped, toggle)
end
natives.ped.set_ped_can_be_dragged_out = natives.PED.SET_PED_CAN_BE_DRAGGED_OUT

--[[
ntoggle was always false except in one instance (b678).

The one time this is set to true seems to do with when you fail the mission.
]]
function natives.PED.SET_PED_ALLOW_HURT_COMBAT_FOR_ALL_MISSION_PEDS(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_ALLOW_HURT_COMBAT_FOR_ALL_MISSION_PEDS' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0xF2BEBCDFAFDAA19E, toggle)
end
natives.ped.set_ped_allow_hurt_combat_for_all_mission_peds = natives.PED.SET_PED_ALLOW_HURT_COMBAT_FOR_ALL_MISSION_PEDS

--[[
Returns true/false if the ped is/isn't male.
]]
function natives.PED.IS_PED_MALE(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_MALE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x6D9F5FAA7488BA46, ped)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_male = natives.PED.IS_PED_MALE

--[[
Returns true/false if the ped is/isn't humanoid.
]]
function natives.PED.IS_PED_HUMAN(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_HUMAN' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0xB980061DA992779D, ped)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_human = natives.PED.IS_PED_HUMAN

--[[
Gets the vehicle the specified Ped is in. Returns 0 if the ped is/was not in a vehicle.
If the Ped is not in a vehicle and includeLastVehicle is true, the vehicle they were last in is returned.
]]
function natives.PED.GET_VEHICLE_PED_IS_IN(--[[Ped]] ped, --[[BOOL]] includeLastVehicle) -- Returns Vehicle
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_VEHICLE_PED_IS_IN' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(includeLastVehicle) == "boolean", "Arg #2 (includeLastVehicle) must be a boolean.")

	local result = native_call(0x9A9112A0FE9A4713, ped, includeLastVehicle)
	return result:__tointeger()
end
natives.ped.get_vehicle_ped_is_in = natives.PED.GET_VEHICLE_PED_IS_IN

--[[
Resets the value for the last vehicle driven by the Ped.
]]
function natives.PED.RESET_PED_LAST_VEHICLE(--[[Ped]] ped) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.RESET_PED_LAST_VEHICLE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0xBB8DE8CF6A8DD8BB, ped)
end
natives.ped.reset_ped_last_vehicle = natives.PED.RESET_PED_LAST_VEHICLE

function natives.PED.SET_PED_DENSITY_MULTIPLIER_THIS_FRAME(--[[float]] multiplier) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_DENSITY_MULTIPLIER_THIS_FRAME' due to disabled trusted mode")

	assert(type(multiplier) == "number", "Arg #1 (multiplier) must be a number.")

	local result = native_call(0x95E3D6257B166CF2, multiplier)
end
natives.ped.set_ped_density_multiplier_this_frame = natives.PED.SET_PED_DENSITY_MULTIPLIER_THIS_FRAME

function natives.PED.SET_SCENARIO_PED_DENSITY_MULTIPLIER_THIS_FRAME(--[[float]] p0, --[[float]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_SCENARIO_PED_DENSITY_MULTIPLIER_THIS_FRAME' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x7A556143A1C03898, p0, p1)
end
natives.ped.set_scenario_ped_density_multiplier_this_frame = natives.PED.SET_SCENARIO_PED_DENSITY_MULTIPLIER_THIS_FRAME

function natives.PED.SUPPRESS_AMBIENT_PED_AGGRESSIVE_CLEANUP_THIS_FRAME() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SUPPRESS_AMBIENT_PED_AGGRESSIVE_CLEANUP_THIS_FRAME' due to disabled trusted mode")

	local result = native_call(0x5A7F62FDA59759BD)
end
natives.ped.suppress_ambient_ped_aggressive_cleanup_this_frame = natives.PED.SUPPRESS_AMBIENT_PED_AGGRESSIVE_CLEANUP_THIS_FRAME

function natives.PED.SET_SCRIPTED_CONVERSION_COORD_THIS_FRAME(--[[float]] x, --[[float]] y, --[[float]] z) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_SCRIPTED_CONVERSION_COORD_THIS_FRAME' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")

	local result = native_call(0x5086C7843552CF85, x, y, z)
end
natives.ped.set_scripted_conversion_coord_this_frame = natives.PED.SET_SCRIPTED_CONVERSION_COORD_THIS_FRAME

--[[
The distance between these points, is the diagonal of a box (remember it's 3D).
]]
function natives.PED.SET_PED_NON_CREATION_AREA(--[[float]] x1, --[[float]] y1, --[[float]] z1, --[[float]] x2, --[[float]] y2, --[[float]] z2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_NON_CREATION_AREA' due to disabled trusted mode")

	assert(type(x1) == "number", "Arg #1 (x1) must be a number.")
	assert(type(y1) == "number", "Arg #2 (y1) must be a number.")
	assert(type(z1) == "number", "Arg #3 (z1) must be a number.")
	assert(type(x2) == "number", "Arg #4 (x2) must be a number.")
	assert(type(y2) == "number", "Arg #5 (y2) must be a number.")
	assert(type(z2) == "number", "Arg #6 (z2) must be a number.")

	local result = native_call(0xEE01041D559983EA, x1, y1, z1, x2, y2, z2)
end
natives.ped.set_ped_non_creation_area = natives.PED.SET_PED_NON_CREATION_AREA

function natives.PED.CLEAR_PED_NON_CREATION_AREA() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.CLEAR_PED_NON_CREATION_AREA' due to disabled trusted mode")

	local result = native_call(0x2E05208086BA0651)
end
natives.ped.clear_ped_non_creation_area = natives.PED.CLEAR_PED_NON_CREATION_AREA

function natives.PED.INSTANTLY_FILL_PED_POPULATION() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.INSTANTLY_FILL_PED_POPULATION' due to disabled trusted mode")

	local result = native_call(0x4759CC730F947C81)
end
natives.ped.instantly_fill_ped_population = natives.PED.INSTANTLY_FILL_PED_POPULATION

--[[
Same function call as PED::GET_MOUNT, aka just returns 0
]]
function natives.PED.IS_PED_ON_MOUNT(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_ON_MOUNT' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x460BC76A0E10655E, ped)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_on_mount = natives.PED.IS_PED_ON_MOUNT

--[[

Function just returns 0
void __fastcall ped__get_mount(NativeContext *a1)
{
  NativeContext *v1; // rbx@1

  v1 = a1;
  GetAddressOfPedFromScriptHandle(a1->Args->Arg1);
  v1->Returns->Item1= 0;
}
]]
function natives.PED.GET_MOUNT(--[[Ped]] ped) -- Returns Ped
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_MOUNT' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0xE7E11B8DCBED1058, ped)
	return result:__tointeger()
end
natives.ped.get_mount = natives.PED.GET_MOUNT

--[[
Gets a value indicating whether the specified ped is on top of any vehicle.

Return 1 when ped is on vehicle.
Return 0 when ped is not on a vehicle.

]]
function natives.PED.IS_PED_ON_VEHICLE(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_ON_VEHICLE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x67722AEB798E5FAB, ped)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_on_vehicle = natives.PED.IS_PED_ON_VEHICLE

function natives.PED.IS_PED_ON_SPECIFIC_VEHICLE(--[[Ped]] ped, --[[Vehicle]] vehicle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_ON_SPECIFIC_VEHICLE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(vehicle) == "number", "Arg #2 (vehicle) must be a number.")

	local result = native_call(0xEC5F66E459AF3BB2, ped, vehicle)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_on_specific_vehicle = natives.PED.IS_PED_ON_SPECIFIC_VEHICLE

--[[
Maximum possible amount of money on MP is 2000. ~JX

-----------------------------------------------------------------------------

Maximum amount that a ped can theoretically have is 65535 (0xFFFF) since the amount is stored as an unsigned short (uint16_t) value.
]]
function natives.PED.SET_PED_MONEY(--[[Ped]] ped, --[[int]] amount) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_MONEY' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(amount) == "number", "Arg #2 (amount) must be a number.")

	local result = native_call(0xA9C8960E8684C1B5, ped, amount)
end
natives.ped.set_ped_money = natives.PED.SET_PED_MONEY

function natives.PED.GET_PED_MONEY(--[[Ped]] ped) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_PED_MONEY' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x3F69145BBA87BAE7, ped)
	return result:__tointeger()
end
natives.ped.get_ped_money = natives.PED.GET_PED_MONEY

--[[
Related to Peds dropping pickup_health_snack; p0 is a value between [0.0, 1.0] that corresponds to drop rate
]]
function natives.PED.SET_HEALTH_SNACKS_CARRIED_BY_ALL_NEW_PEDS(--[[float]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_HEALTH_SNACKS_CARRIED_BY_ALL_NEW_PEDS' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xFF4803BC019852D9, p0, p1)
end
natives.ped.set_health_snacks_carried_by_all_new_peds = natives.PED.SET_HEALTH_SNACKS_CARRIED_BY_ALL_NEW_PEDS

function natives.PED.SET_AMBIENT_PEDS_DROP_MONEY(--[[BOOL]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_AMBIENT_PEDS_DROP_MONEY' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0x6B0E6172C9A4D902, p0)
end
natives.ped.set_ambient_peds_drop_money = natives.PED.SET_AMBIENT_PEDS_DROP_MONEY

function natives.PED.SET_BLOCKING_OF_NON_TEMPORARY_EVENTS_FOR_AMBIENT_PEDS_THIS_FRAME(--[[BOOL]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_BLOCKING_OF_NON_TEMPORARY_EVENTS_FOR_AMBIENT_PEDS_THIS_FRAME' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0x9911F4A24485F653, p0)
end
natives.ped.set_blocking_of_non_temporary_events_for_ambient_peds_this_frame = natives.PED.SET_BLOCKING_OF_NON_TEMPORARY_EVENTS_FOR_AMBIENT_PEDS_THIS_FRAME

--[[
Ped no longer takes critical damage modifiers if set to FALSE.
Example: Headshotting a player no longer one shots them. Instead they will take the same damage as a torso shot.
]]
function natives.PED.SET_PED_SUFFERS_CRITICAL_HITS(--[[Ped]] ped, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_SUFFERS_CRITICAL_HITS' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xEBD76F2359F190AC, ped, toggle)
end
natives.ped.set_ped_suffers_critical_hits = natives.PED.SET_PED_SUFFERS_CRITICAL_HITS

function natives.PED.SET_PED_UPPER_BODY_DAMAGE_ONLY(--[[Ped]] ped, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_UPPER_BODY_DAMAGE_ONLY' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xAFC976FD0580C7B3, ped, toggle)
end
natives.ped.set_ped_upper_body_damage_only = natives.PED.SET_PED_UPPER_BODY_DAMAGE_ONLY

--[[
Detect if ped is sitting in the specified vehicle
[True/False]
]]
function natives.PED.IS_PED_SITTING_IN_VEHICLE(--[[Ped]] ped, --[[Vehicle]] vehicle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_SITTING_IN_VEHICLE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(vehicle) == "number", "Arg #2 (vehicle) must be a number.")

	local result = native_call(0xA808AA1D79230FC2, ped, vehicle)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_sitting_in_vehicle = natives.PED.IS_PED_SITTING_IN_VEHICLE

--[[
Detect if ped is in any vehicle
[True/False]
]]
function natives.PED.IS_PED_SITTING_IN_ANY_VEHICLE(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_SITTING_IN_ANY_VEHICLE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x826AA586EDB9FEF8, ped)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_sitting_in_any_vehicle = natives.PED.IS_PED_SITTING_IN_ANY_VEHICLE

function natives.PED.IS_PED_ON_FOOT(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_ON_FOOT' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x01FEE67DB37F59B2, ped)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_on_foot = natives.PED.IS_PED_ON_FOOT

function natives.PED.IS_PED_ON_ANY_BIKE(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_ON_ANY_BIKE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x94495889E22C6479, ped)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_on_any_bike = natives.PED.IS_PED_ON_ANY_BIKE

function natives.PED.IS_PED_PLANTING_BOMB(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_PLANTING_BOMB' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0xC70B5FAE151982D8, ped)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_planting_bomb = natives.PED.IS_PED_PLANTING_BOMB

function natives.PED.GET_DEAD_PED_PICKUP_COORDS(--[[Ped]] ped, --[[float]] p1, --[[float]] p2) -- Returns Vector3
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_DEAD_PED_PICKUP_COORDS' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0xCD5003B097200F36, ped, p1, p2)
	return result:__tov3()
end
natives.ped.get_dead_ped_pickup_coords = natives.PED.GET_DEAD_PED_PICKUP_COORDS

function natives.PED.IS_PED_IN_ANY_BOAT(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_IN_ANY_BOAT' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x2E0E1C2B4F6CB339, ped)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_in_any_boat = natives.PED.IS_PED_IN_ANY_BOAT

function natives.PED.IS_PED_IN_ANY_SUB(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_IN_ANY_SUB' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0xFBFC01CCFB35D99E, ped)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_in_any_sub = natives.PED.IS_PED_IN_ANY_SUB

function natives.PED.IS_PED_IN_ANY_HELI(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_IN_ANY_HELI' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x298B91AE825E5705, ped)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_in_any_heli = natives.PED.IS_PED_IN_ANY_HELI

function natives.PED.IS_PED_IN_ANY_PLANE(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_IN_ANY_PLANE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x5FFF4CFC74D8FB80, ped)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_in_any_plane = natives.PED.IS_PED_IN_ANY_PLANE

function natives.PED.IS_PED_IN_FLYING_VEHICLE(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_IN_FLYING_VEHICLE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x9134873537FA419C, ped)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_in_flying_vehicle = natives.PED.IS_PED_IN_FLYING_VEHICLE

function natives.PED.SET_PED_DIES_IN_WATER(--[[Ped]] ped, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_DIES_IN_WATER' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x56CEF0AC79073BDE, ped, toggle)
end
natives.ped.set_ped_dies_in_water = natives.PED.SET_PED_DIES_IN_WATER

function natives.PED.GET_PED_DIES_IN_WATER(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_PED_DIES_IN_WATER' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x65671A4FB8218930, ped)
	return result:__tointeger() ~= 0
end
natives.ped.get_ped_dies_in_water = natives.PED.GET_PED_DIES_IN_WATER

function natives.PED.SET_PED_DIES_IN_SINKING_VEHICLE(--[[Ped]] ped, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_DIES_IN_SINKING_VEHICLE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xD718A22995E2B4BC, ped, toggle)
end
natives.ped.set_ped_dies_in_sinking_vehicle = natives.PED.SET_PED_DIES_IN_SINKING_VEHICLE

function natives.PED.GET_PED_ARMOUR(--[[Ped]] ped) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_PED_ARMOUR' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x9483AF821605B1D8, ped)
	return result:__tointeger()
end
natives.ped.get_ped_armour = natives.PED.GET_PED_ARMOUR

function natives.PED.SET_PED_STAY_IN_VEHICLE_WHEN_JACKED(--[[Ped]] ped, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_STAY_IN_VEHICLE_WHEN_JACKED' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xEDF4079F9D54C9A1, ped, toggle)
end
natives.ped.set_ped_stay_in_vehicle_when_jacked = natives.PED.SET_PED_STAY_IN_VEHICLE_WHEN_JACKED

function natives.PED.SET_PED_CAN_BE_SHOT_IN_VEHICLE(--[[Ped]] ped, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_CAN_BE_SHOT_IN_VEHICLE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xC7EF1BA83230BA07, ped, toggle)
end
natives.ped.set_ped_can_be_shot_in_vehicle = natives.PED.SET_PED_CAN_BE_SHOT_IN_VEHICLE

function natives.PED.GET_PED_LAST_DAMAGE_BONE(--[[Ped]] ped, --[[int*]] outBone) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_PED_LAST_DAMAGE_BONE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(outBone) == "userdata", "Arg #2 (outBone) must be a userdata.")

	local result = native_call(0xD75960F6BD9EA49C, ped, outBone)
	return result:__tointeger() ~= 0
end
natives.ped.get_ped_last_damage_bone = natives.PED.GET_PED_LAST_DAMAGE_BONE

function natives.PED.CLEAR_PED_LAST_DAMAGE_BONE(--[[Ped]] ped) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.CLEAR_PED_LAST_DAMAGE_BONE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x8EF6B7AC68E2F01B, ped)
end
natives.ped.clear_ped_last_damage_bone = natives.PED.CLEAR_PED_LAST_DAMAGE_BONE

function natives.PED.SET_AI_WEAPON_DAMAGE_MODIFIER(--[[float]] value) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_AI_WEAPON_DAMAGE_MODIFIER' due to disabled trusted mode")

	assert(type(value) == "number", "Arg #1 (value) must be a number.")

	local result = native_call(0x1B1E2A40A65B8521, value)
end
natives.ped.set_ai_weapon_damage_modifier = natives.PED.SET_AI_WEAPON_DAMAGE_MODIFIER

function natives.PED.RESET_AI_WEAPON_DAMAGE_MODIFIER() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.RESET_AI_WEAPON_DAMAGE_MODIFIER' due to disabled trusted mode")

	local result = native_call(0xEA16670E7BA4743C)
end
natives.ped.reset_ai_weapon_damage_modifier = natives.PED.RESET_AI_WEAPON_DAMAGE_MODIFIER

function natives.PED.SET_AI_MELEE_WEAPON_DAMAGE_MODIFIER(--[[float]] modifier) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_AI_MELEE_WEAPON_DAMAGE_MODIFIER' due to disabled trusted mode")

	assert(type(modifier) == "number", "Arg #1 (modifier) must be a number.")

	local result = native_call(0x66460DEDDD417254, modifier)
end
natives.ped.set_ai_melee_weapon_damage_modifier = natives.PED.SET_AI_MELEE_WEAPON_DAMAGE_MODIFIER

function natives.PED.RESET_AI_MELEE_WEAPON_DAMAGE_MODIFIER() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.RESET_AI_MELEE_WEAPON_DAMAGE_MODIFIER' due to disabled trusted mode")

	local result = native_call(0x46E56A7CD1D63C3F)
end
natives.ped.reset_ai_melee_weapon_damage_modifier = natives.PED.RESET_AI_MELEE_WEAPON_DAMAGE_MODIFIER

function natives.PED.SET_TREAT_AS_AMBIENT_PED_FOR_DRIVER_LOCKON(--[[Any]] p0, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_TREAT_AS_AMBIENT_PED_FOR_DRIVER_LOCKON' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0x2F3C3D9F50681DE4, p0, p1)
end
natives.ped.set_treat_as_ambient_ped_for_driver_lockon = natives.PED.SET_TREAT_AS_AMBIENT_PED_FOR_DRIVER_LOCKON

function natives.PED.SET_PED_CAN_BE_TARGETTED(--[[Ped]] ped, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_CAN_BE_TARGETTED' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x63F58F7C80513AAD, ped, toggle)
end
natives.ped.set_ped_can_be_targetted = natives.PED.SET_PED_CAN_BE_TARGETTED

function natives.PED.SET_PED_CAN_BE_TARGETTED_BY_TEAM(--[[Ped]] ped, --[[int]] team, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_CAN_BE_TARGETTED_BY_TEAM' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(team) == "number", "Arg #2 (team) must be a number.")
	assert(type(toggle) == "boolean", "Arg #3 (toggle) must be a boolean.")

	local result = native_call(0xBF1CA77833E58F2C, ped, team, toggle)
end
natives.ped.set_ped_can_be_targetted_by_team = natives.PED.SET_PED_CAN_BE_TARGETTED_BY_TEAM

function natives.PED.SET_PED_CAN_BE_TARGETTED_BY_PLAYER(--[[Ped]] ped, --[[Player]] player, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_CAN_BE_TARGETTED_BY_PLAYER' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(player) == "number", "Arg #2 (player) must be a number.")
	assert(type(toggle) == "boolean", "Arg #3 (toggle) must be a boolean.")

	local result = native_call(0x66B57B72E0836A76, ped, player, toggle)
end
natives.ped.set_ped_can_be_targetted_by_player = natives.PED.SET_PED_CAN_BE_TARGETTED_BY_PLAYER

function natives.PED.SET_ALLOW_LOCKON_TO_PED_IF_FRIENDLY(--[[Ped]] ped, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_ALLOW_LOCKON_TO_PED_IF_FRIENDLY' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x061CB768363D6424, ped, toggle)
end
natives.ped.set_allow_lockon_to_ped_if_friendly = natives.PED.SET_ALLOW_LOCKON_TO_PED_IF_FRIENDLY

function natives.PED.SET_USE_CAMERA_HEADING_FOR_DESIRED_DIRECTION_LOCK_ON_TEST(--[[Ped]] ped, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_USE_CAMERA_HEADING_FOR_DESIRED_DIRECTION_LOCK_ON_TEST' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xFD325494792302D7, ped, toggle)
end
natives.ped.set_use_camera_heading_for_desired_direction_lock_on_test = natives.PED.SET_USE_CAMERA_HEADING_FOR_DESIRED_DIRECTION_LOCK_ON_TEST

function natives.PED.IS_PED_IN_ANY_POLICE_VEHICLE(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_IN_ANY_POLICE_VEHICLE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x0BD04E29640C9C12, ped)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_in_any_police_vehicle = natives.PED.IS_PED_IN_ANY_POLICE_VEHICLE

function natives.PED.FORCE_PED_TO_OPEN_PARACHUTE(--[[Ped]] ped) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.FORCE_PED_TO_OPEN_PARACHUTE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x16E42E800B472221, ped)
end
natives.ped.force_ped_to_open_parachute = natives.PED.FORCE_PED_TO_OPEN_PARACHUTE

function natives.PED.IS_PED_IN_PARACHUTE_FREE_FALL(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_IN_PARACHUTE_FREE_FALL' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x7DCE8BDA0F1C1200, ped)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_in_parachute_free_fall = natives.PED.IS_PED_IN_PARACHUTE_FREE_FALL

function natives.PED.IS_PED_FALLING(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_FALLING' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0xFB92A102F1C4DFA3, ped)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_falling = natives.PED.IS_PED_FALLING

function natives.PED.IS_PED_JUMPING(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_JUMPING' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0xCEDABC5900A0BF97, ped)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_jumping = natives.PED.IS_PED_JUMPING

function natives.PED.IS_PED_LANDING(--[[Any]] p0) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_LANDING' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x412F1364FA066CFB, p0)
	return result:__tointeger()
end
natives.ped.is_ped_landing = natives.PED.IS_PED_LANDING

function natives.PED.IS_PED_DOING_A_BEAST_JUMP(--[[Any]] p0) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_DOING_A_BEAST_JUMP' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x451D05012CCEC234, p0)
	return result:__tointeger()
end
natives.ped.is_ped_doing_a_beast_jump = natives.PED.IS_PED_DOING_A_BEAST_JUMP

function natives.PED.IS_PED_CLIMBING(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_CLIMBING' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x53E8CB4F48BFE623, ped)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_climbing = natives.PED.IS_PED_CLIMBING

function natives.PED.IS_PED_VAULTING(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_VAULTING' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x117C70D1F5730B5E, ped)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_vaulting = natives.PED.IS_PED_VAULTING

function natives.PED.IS_PED_DIVING(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_DIVING' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x5527B8246FEF9B11, ped)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_diving = natives.PED.IS_PED_DIVING

function natives.PED.IS_PED_JUMPING_OUT_OF_VEHICLE(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_JUMPING_OUT_OF_VEHICLE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x433DDFFE2044B636, ped)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_jumping_out_of_vehicle = natives.PED.IS_PED_JUMPING_OUT_OF_VEHICLE

--[[
Returns true if the ped is currently opening a door (CTaskOpenDoor).
]]
function natives.PED.IS_PED_OPENING_DOOR(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_OPENING_DOOR' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x26AF0E8E30BD2A2C, ped)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_opening_door = natives.PED.IS_PED_OPENING_DOOR

--[[
Returns:

-1: Normal
0: Wearing parachute on back
1: Parachute opening
2: Parachute open
3: Falling to doom (e.g. after exiting parachute)

Normal means no parachute?
]]
function natives.PED.GET_PED_PARACHUTE_STATE(--[[Ped]] ped) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_PED_PARACHUTE_STATE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x79CFD9827CC979B6, ped)
	return result:__tointeger()
end
natives.ped.get_ped_parachute_state = natives.PED.GET_PED_PARACHUTE_STATE

--[[
-1: no landing
0: landing on both feet
1: stumbling
2: rolling
3: ragdoll
]]
function natives.PED.GET_PED_PARACHUTE_LANDING_TYPE(--[[Ped]] ped) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_PED_PARACHUTE_LANDING_TYPE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x8B9F1FC6AE8166C0, ped)
	return result:__tointeger()
end
natives.ped.get_ped_parachute_landing_type = natives.PED.GET_PED_PARACHUTE_LANDING_TYPE

function natives.PED.SET_PED_PARACHUTE_TINT_INDEX(--[[Ped]] ped, --[[int]] tintIndex) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_PARACHUTE_TINT_INDEX' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(tintIndex) == "number", "Arg #2 (tintIndex) must be a number.")

	local result = native_call(0x333FC8DB079B7186, ped, tintIndex)
end
natives.ped.set_ped_parachute_tint_index = natives.PED.SET_PED_PARACHUTE_TINT_INDEX

function natives.PED.GET_PED_PARACHUTE_TINT_INDEX(--[[Ped]] ped, --[[int*]] outTintIndex) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_PED_PARACHUTE_TINT_INDEX' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(outTintIndex) == "userdata", "Arg #2 (outTintIndex) must be a userdata.")

	local result = native_call(0xEAF5F7E5AE7C6C9D, ped, outTintIndex)
end
natives.ped.get_ped_parachute_tint_index = natives.PED.GET_PED_PARACHUTE_TINT_INDEX

function natives.PED.SET_PED_RESERVE_PARACHUTE_TINT_INDEX(--[[Ped]] ped, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_RESERVE_PARACHUTE_TINT_INDEX' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xE88DA0751C22A2AD, ped, p1)
end
natives.ped.set_ped_reserve_parachute_tint_index = natives.PED.SET_PED_RESERVE_PARACHUTE_TINT_INDEX

function natives.PED.CREATE_PARACHUTE_BAG_OBJECT(--[[Ped]] ped, --[[BOOL]] p1, --[[BOOL]] p2) -- Returns Object
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.CREATE_PARACHUTE_BAG_OBJECT' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")

	local result = native_call(0x8C4F3BF23B6237DB, ped, p1, p2)
	return result:__tointeger()
end
natives.ped.create_parachute_bag_object = natives.PED.CREATE_PARACHUTE_BAG_OBJECT

--[[
This is the SET_CHAR_DUCKING from GTA IV, that makes Peds duck. This function does nothing in GTA V. It cannot set the ped as ducking in vehicles, and IS_PED_DUCKING will always return false.
]]
function natives.PED.SET_PED_DUCKING(--[[Ped]] ped, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_DUCKING' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x030983CA930B692D, ped, toggle)
end
natives.ped.set_ped_ducking = natives.PED.SET_PED_DUCKING

function natives.PED.IS_PED_DUCKING(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_DUCKING' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0xD125AE748725C6BC, ped)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_ducking = natives.PED.IS_PED_DUCKING

function natives.PED.IS_PED_IN_ANY_TAXI(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_IN_ANY_TAXI' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x6E575D6A898AB852, ped)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_in_any_taxi = natives.PED.IS_PED_IN_ANY_TAXI

function natives.PED.SET_PED_ID_RANGE(--[[Ped]] ped, --[[float]] value) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_ID_RANGE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(value) == "number", "Arg #2 (value) must be a number.")

	local result = native_call(0xF107E836A70DCE05, ped, value)
end
natives.ped.set_ped_id_range = natives.PED.SET_PED_ID_RANGE

function natives.PED.SET_PED_HIGHLY_PERCEPTIVE(--[[Ped]] ped, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_HIGHLY_PERCEPTIVE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x52D59AB61DDC05DD, ped, toggle)
end
natives.ped.set_ped_highly_perceptive = natives.PED.SET_PED_HIGHLY_PERCEPTIVE

function natives.PED.SET_COP_PERCEPTION_OVERRIDES(--[[float]] seeingRange, --[[float]] seeingRangePeripheral, --[[float]] hearingRange, --[[float]] visualFieldMinAzimuthAngle, --[[float]] visualFieldMaxAzimuthAngle, --[[float]] fieldOfGazeMaxAngle, --[[float]] p6) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_COP_PERCEPTION_OVERRIDES' due to disabled trusted mode")

	assert(type(seeingRange) == "number", "Arg #1 (seeingRange) must be a number.")
	assert(type(seeingRangePeripheral) == "number", "Arg #2 (seeingRangePeripheral) must be a number.")
	assert(type(hearingRange) == "number", "Arg #3 (hearingRange) must be a number.")
	assert(type(visualFieldMinAzimuthAngle) == "number", "Arg #4 (visualFieldMinAzimuthAngle) must be a number.")
	assert(type(visualFieldMaxAzimuthAngle) == "number", "Arg #5 (visualFieldMaxAzimuthAngle) must be a number.")
	assert(type(fieldOfGazeMaxAngle) == "number", "Arg #6 (fieldOfGazeMaxAngle) must be a number.")
	assert(type(p6) == "number", "Arg #7 (p6) must be a number.")

	local result = native_call(0x2F074C904D85129E, seeingRange, seeingRangePeripheral, hearingRange, visualFieldMinAzimuthAngle, visualFieldMaxAzimuthAngle, fieldOfGazeMaxAngle, p6)
end
natives.ped.set_cop_perception_overrides = natives.PED.SET_COP_PERCEPTION_OVERRIDES

function natives.PED.SET_PED_INJURED_ON_GROUND_BEHAVIOUR(--[[Ped]] ped, --[[float]] unk) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_INJURED_ON_GROUND_BEHAVIOUR' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(unk) == "number", "Arg #2 (unk) must be a number.")

	local result = native_call(0xEC4B4B3B9908052A, ped, unk)
end
natives.ped.set_ped_injured_on_ground_behaviour = natives.PED.SET_PED_INJURED_ON_GROUND_BEHAVIOUR

function natives.PED.DISABLE_PED_INJURED_ON_GROUND_BEHAVIOUR(--[[Ped]] ped) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.DISABLE_PED_INJURED_ON_GROUND_BEHAVIOUR' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x733C87D4CE22BEA2, ped)
end
natives.ped.disable_ped_injured_on_ground_behaviour = natives.PED.DISABLE_PED_INJURED_ON_GROUND_BEHAVIOUR

function natives.PED.SET_PED_SEEING_RANGE(--[[Ped]] ped, --[[float]] value) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_SEEING_RANGE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(value) == "number", "Arg #2 (value) must be a number.")

	local result = native_call(0xF29CF591C4BF6CEE, ped, value)
end
natives.ped.set_ped_seeing_range = natives.PED.SET_PED_SEEING_RANGE

function natives.PED.SET_PED_HEARING_RANGE(--[[Ped]] ped, --[[float]] value) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_HEARING_RANGE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(value) == "number", "Arg #2 (value) must be a number.")

	local result = native_call(0x33A8F7F7D5F7F33C, ped, value)
end
natives.ped.set_ped_hearing_range = natives.PED.SET_PED_HEARING_RANGE

function natives.PED.SET_PED_VISUAL_FIELD_MIN_ANGLE(--[[Ped]] ped, --[[float]] value) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_VISUAL_FIELD_MIN_ANGLE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(value) == "number", "Arg #2 (value) must be a number.")

	local result = native_call(0x2DB492222FB21E26, ped, value)
end
natives.ped.set_ped_visual_field_min_angle = natives.PED.SET_PED_VISUAL_FIELD_MIN_ANGLE

function natives.PED.SET_PED_VISUAL_FIELD_MAX_ANGLE(--[[Ped]] ped, --[[float]] value) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_VISUAL_FIELD_MAX_ANGLE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(value) == "number", "Arg #2 (value) must be a number.")

	local result = native_call(0x70793BDCA1E854D4, ped, value)
end
natives.ped.set_ped_visual_field_max_angle = natives.PED.SET_PED_VISUAL_FIELD_MAX_ANGLE

--[[
This native refers to the field of vision the ped has below them, starting at 0 degrees. The angle value should be negative.
-90f should let the ped see 90 degrees below them, for example.
]]
function natives.PED.SET_PED_VISUAL_FIELD_MIN_ELEVATION_ANGLE(--[[Ped]] ped, --[[float]] angle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_VISUAL_FIELD_MIN_ELEVATION_ANGLE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(angle) == "number", "Arg #2 (angle) must be a number.")

	local result = native_call(0x7A276EB2C224D70F, ped, angle)
end
natives.ped.set_ped_visual_field_min_elevation_angle = natives.PED.SET_PED_VISUAL_FIELD_MIN_ELEVATION_ANGLE

--[[
This native refers to the field of vision the ped has above them, starting at 0 degrees. 90f would let the ped see enemies directly above of them.
]]
function natives.PED.SET_PED_VISUAL_FIELD_MAX_ELEVATION_ANGLE(--[[Ped]] ped, --[[float]] angle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_VISUAL_FIELD_MAX_ELEVATION_ANGLE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(angle) == "number", "Arg #2 (angle) must be a number.")

	local result = native_call(0x78D0B67629D75856, ped, angle)
end
natives.ped.set_ped_visual_field_max_elevation_angle = natives.PED.SET_PED_VISUAL_FIELD_MAX_ELEVATION_ANGLE

function natives.PED.SET_PED_VISUAL_FIELD_PERIPHERAL_RANGE(--[[Ped]] ped, --[[float]] range) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_VISUAL_FIELD_PERIPHERAL_RANGE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(range) == "number", "Arg #2 (range) must be a number.")

	local result = native_call(0x9C74B0BC831B753A, ped, range)
end
natives.ped.set_ped_visual_field_peripheral_range = natives.PED.SET_PED_VISUAL_FIELD_PERIPHERAL_RANGE

function natives.PED.SET_PED_VISUAL_FIELD_CENTER_ANGLE(--[[Ped]] ped, --[[float]] angle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_VISUAL_FIELD_CENTER_ANGLE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(angle) == "number", "Arg #2 (angle) must be a number.")

	local result = native_call(0x3B6405E8AB34A907, ped, angle)
end
natives.ped.set_ped_visual_field_center_angle = natives.PED.SET_PED_VISUAL_FIELD_CENTER_ANGLE

function natives.PED.GET_PED_VISUAL_FIELD_CENTER_ANGLE(--[[Ped]] ped) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_PED_VISUAL_FIELD_CENTER_ANGLE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0xEF2C71A32CAD5FBD, ped)
	return result:__tonumber()
end
natives.ped.get_ped_visual_field_center_angle = natives.PED.GET_PED_VISUAL_FIELD_CENTER_ANGLE

--[[
p1 is usually 0 in the scripts. action is either 0 or a pointer to "DEFAULT_ACTION".
]]
function natives.PED.SET_PED_STEALTH_MOVEMENT(--[[Ped]] ped, --[[BOOL]] p1, --[[const char*]] action) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_STEALTH_MOVEMENT' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(action) == "string", "Arg #3 (action) must be a string.")

	local result = native_call(0x88CBB5CEB96B7BD2, ped, p1, action)
end
natives.ped.set_ped_stealth_movement = natives.PED.SET_PED_STEALTH_MOVEMENT

--[[
Returns whether the entity is in stealth mode
]]
function natives.PED.GET_PED_STEALTH_MOVEMENT(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_PED_STEALTH_MOVEMENT' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x7C2AC9CA66575FBF, ped)
	return result:__tointeger() ~= 0
end
natives.ped.get_ped_stealth_movement = natives.PED.GET_PED_STEALTH_MOVEMENT

--[[
Creates a new ped group.
Groups can contain up to 8 peds.

The parameter is unused.

Returns a handle to the created group, or 0 if a group couldn't be created.
]]
function natives.PED.CREATE_GROUP(--[[int]] unused) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.CREATE_GROUP' due to disabled trusted mode")

	assert(type(unused) == "number", "Arg #1 (unused) must be a number.")

	local result = native_call(0x90370EBE0FEE1A3D, unused)
	return result:__tointeger()
end
natives.ped.create_group = natives.PED.CREATE_GROUP

function natives.PED.SET_PED_AS_GROUP_LEADER(--[[Ped]] ped, --[[int]] groupId) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_AS_GROUP_LEADER' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(groupId) == "number", "Arg #2 (groupId) must be a number.")

	local result = native_call(0x2A7819605465FBCE, ped, groupId)
end
natives.ped.set_ped_as_group_leader = natives.PED.SET_PED_AS_GROUP_LEADER

function natives.PED.SET_PED_AS_GROUP_MEMBER(--[[Ped]] ped, --[[int]] groupId) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_AS_GROUP_MEMBER' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(groupId) == "number", "Arg #2 (groupId) must be a number.")

	local result = native_call(0x9F3480FE65DB31B5, ped, groupId)
end
natives.ped.set_ped_as_group_member = natives.PED.SET_PED_AS_GROUP_MEMBER

--[[
This only will teleport the ped to the group leader if the group leader teleports (sets coords).

Only works in singleplayer
]]
function natives.PED.SET_PED_CAN_TELEPORT_TO_GROUP_LEADER(--[[Ped]] pedHandle, --[[int]] groupHandle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_CAN_TELEPORT_TO_GROUP_LEADER' due to disabled trusted mode")

	assert(type(pedHandle) == "number", "Arg #1 (pedHandle) must be a number.")
	assert(type(groupHandle) == "number", "Arg #2 (groupHandle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #3 (toggle) must be a boolean.")

	local result = native_call(0x2E2F4240B3F24647, pedHandle, groupHandle, toggle)
end
natives.ped.set_ped_can_teleport_to_group_leader = natives.PED.SET_PED_CAN_TELEPORT_TO_GROUP_LEADER

function natives.PED.REMOVE_GROUP(--[[int]] groupId) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.REMOVE_GROUP' due to disabled trusted mode")

	assert(type(groupId) == "number", "Arg #1 (groupId) must be a number.")

	local result = native_call(0x8EB2F69076AF7053, groupId)
end
natives.ped.remove_group = natives.PED.REMOVE_GROUP

function natives.PED.REMOVE_PED_FROM_GROUP(--[[Ped]] ped) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.REMOVE_PED_FROM_GROUP' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0xED74007FFB146BC2, ped)
end
natives.ped.remove_ped_from_group = natives.PED.REMOVE_PED_FROM_GROUP

function natives.PED.IS_PED_GROUP_MEMBER(--[[Ped]] ped, --[[int]] groupId) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_GROUP_MEMBER' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(groupId) == "number", "Arg #2 (groupId) must be a number.")

	local result = native_call(0x9BB01E3834671191, ped, groupId)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_group_member = natives.PED.IS_PED_GROUP_MEMBER

function natives.PED.IS_PED_HANGING_ON_TO_VEHICLE(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_HANGING_ON_TO_VEHICLE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x1C86D8AEF8254B78, ped)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_hanging_on_to_vehicle = natives.PED.IS_PED_HANGING_ON_TO_VEHICLE

--[[
Sets the range at which members will automatically leave the group.
]]
function natives.PED.SET_GROUP_SEPARATION_RANGE(--[[int]] groupHandle, --[[float]] separationRange) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_GROUP_SEPARATION_RANGE' due to disabled trusted mode")

	assert(type(groupHandle) == "number", "Arg #1 (groupHandle) must be a number.")
	assert(type(separationRange) == "number", "Arg #2 (separationRange) must be a number.")

	local result = native_call(0x4102C7858CFEE4E4, groupHandle, separationRange)
end
natives.ped.set_group_separation_range = natives.PED.SET_GROUP_SEPARATION_RANGE

--[[
Ped will stay on the ground after being stunned for at lest ms time. (in milliseconds)
]]
function natives.PED.SET_PED_MIN_GROUND_TIME_FOR_STUNGUN(--[[Ped]] ped, --[[int]] ms) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_MIN_GROUND_TIME_FOR_STUNGUN' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(ms) == "number", "Arg #2 (ms) must be a number.")

	local result = native_call(0xFA0675AB151073FA, ped, ms)
end
natives.ped.set_ped_min_ground_time_for_stungun = natives.PED.SET_PED_MIN_GROUND_TIME_FOR_STUNGUN

function natives.PED.IS_PED_PRONE(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_PRONE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0xD6A86331A537A7B9, ped)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_prone = natives.PED.IS_PED_PRONE

--[[
Checks to see if ped and target are in combat with eachother. Only goes one-way: if target is engaged in combat with ped but ped has not yet reacted, the function will return false until ped starts fighting back.

p1 is usually 0 in the scripts because it gets the ped id during the task sequence. For instance: PED::IS_PED_IN_COMBAT(l_42E[4/*14*/], PLAYER::PLAYER_PED_ID()) // armenian2.ct4: 43794
]]
function natives.PED.IS_PED_IN_COMBAT(--[[Ped]] ped, --[[Ped]] target) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_IN_COMBAT' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(target) == "number", "Arg #2 (target) must be a number.")

	local result = native_call(0x4859F1FC66A6278E, ped, target)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_in_combat = natives.PED.IS_PED_IN_COMBAT

function natives.PED.GET_PED_TARGET_FROM_COMBAT_PED(--[[Ped]] ped, --[[Any]] p1) -- Returns Entity
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_PED_TARGET_FROM_COMBAT_PED' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x32C27A11307B01CC, ped, p1)
	return result:__tointeger()
end
natives.ped.get_ped_target_from_combat_ped = natives.PED.GET_PED_TARGET_FROM_COMBAT_PED

function natives.PED.CAN_PED_IN_COMBAT_SEE_TARGET(--[[Ped]] ped, --[[Ped]] target) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.CAN_PED_IN_COMBAT_SEE_TARGET' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(target) == "number", "Arg #2 (target) must be a number.")

	local result = native_call(0xEAD42DE3610D0721, ped, target)
	return result:__tointeger() ~= 0
end
natives.ped.can_ped_in_combat_see_target = natives.PED.CAN_PED_IN_COMBAT_SEE_TARGET

function natives.PED.IS_PED_DOING_DRIVEBY(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_DOING_DRIVEBY' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0xB2C086CC1BF8F2BF, ped)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_doing_driveby = natives.PED.IS_PED_DOING_DRIVEBY

function natives.PED.IS_PED_JACKING(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_JACKING' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x4AE4FF911DFB61DA, ped)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_jacking = natives.PED.IS_PED_JACKING

function natives.PED.IS_PED_BEING_JACKED(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_BEING_JACKED' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x9A497FE2DF198913, ped)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_being_jacked = natives.PED.IS_PED_BEING_JACKED

--[[
p1 is always 0
]]
function natives.PED.IS_PED_BEING_STUNNED(--[[Ped]] ped, --[[int]] p1) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_BEING_STUNNED' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x4FBACCE3B4138EE8, ped, p1)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_being_stunned = natives.PED.IS_PED_BEING_STUNNED

function natives.PED.GET_PEDS_JACKER(--[[Ped]] ped) -- Returns Ped
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_PEDS_JACKER' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x9B128DC36C1E04CF, ped)
	return result:__tointeger()
end
natives.ped.get_peds_jacker = natives.PED.GET_PEDS_JACKER

function natives.PED.GET_JACK_TARGET(--[[Ped]] ped) -- Returns Ped
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_JACK_TARGET' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x5486A79D9FBD342D, ped)
	return result:__tointeger()
end
natives.ped.get_jack_target = natives.PED.GET_JACK_TARGET

function natives.PED.IS_PED_FLEEING(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_FLEEING' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0xBBCCE00B381F8482, ped)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_fleeing = natives.PED.IS_PED_FLEEING

--[[
p1 is nearly always 0 in the scripts. 
]]
function natives.PED.IS_PED_IN_COVER(--[[Ped]] ped, --[[BOOL]] exceptUseWeapon) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_IN_COVER' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(exceptUseWeapon) == "boolean", "Arg #2 (exceptUseWeapon) must be a boolean.")

	local result = native_call(0x60DFD0691A170B88, ped, exceptUseWeapon)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_in_cover = natives.PED.IS_PED_IN_COVER

function natives.PED.IS_PED_IN_COVER_FACING_LEFT(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_IN_COVER_FACING_LEFT' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x845333B3150583AB, ped)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_in_cover_facing_left = natives.PED.IS_PED_IN_COVER_FACING_LEFT

function natives.PED.IS_PED_IN_HIGH_COVER(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_IN_HIGH_COVER' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x6A03BF943D767C93, ped)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_in_high_cover = natives.PED.IS_PED_IN_HIGH_COVER

function natives.PED.IS_PED_GOING_INTO_COVER(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_GOING_INTO_COVER' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x9F65DBC537E59AD5, ped)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_going_into_cover = natives.PED.IS_PED_GOING_INTO_COVER

--[[
i could be time. Only example in the decompiled scripts uses it as -1.
]]
function natives.PED.SET_PED_PINNED_DOWN(--[[Ped]] ped, --[[BOOL]] pinned, --[[int]] i) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_PINNED_DOWN' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(pinned) == "boolean", "Arg #2 (pinned) must be a boolean.")
	assert(type(i) == "number", "Arg #3 (i) must be a number.")

	local result = native_call(0xAAD6D1ACF08F4612, ped, pinned, i)
	return result:__tointeger()
end
natives.ped.set_ped_pinned_down = natives.PED.SET_PED_PINNED_DOWN

function natives.PED.GET_SEAT_PED_IS_TRYING_TO_ENTER(--[[Ped]] ped) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_SEAT_PED_IS_TRYING_TO_ENTER' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x6F4C85ACD641BCD2, ped)
	return result:__tointeger()
end
natives.ped.get_seat_ped_is_trying_to_enter = natives.PED.GET_SEAT_PED_IS_TRYING_TO_ENTER

function natives.PED.GET_VEHICLE_PED_IS_TRYING_TO_ENTER(--[[Ped]] ped) -- Returns Vehicle
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_VEHICLE_PED_IS_TRYING_TO_ENTER' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x814FA8BE5449445D, ped)
	return result:__tointeger()
end
natives.ped.get_vehicle_ped_is_trying_to_enter = natives.PED.GET_VEHICLE_PED_IS_TRYING_TO_ENTER

--[[
Returns the Entity (Ped, Vehicle, or ?Object?) that killed the 'ped'

Is best to check if the Ped is dead before asking for its killer.
]]
function natives.PED.GET_PED_SOURCE_OF_DEATH(--[[Ped]] ped) -- Returns Entity
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_PED_SOURCE_OF_DEATH' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x93C8B64DEB84728C, ped)
	return result:__tointeger()
end
natives.ped.get_ped_source_of_death = natives.PED.GET_PED_SOURCE_OF_DEATH

--[[
Returns the hash of the weapon/model/object that killed the ped.
]]
function natives.PED.GET_PED_CAUSE_OF_DEATH(--[[Ped]] ped) -- Returns Hash
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_PED_CAUSE_OF_DEATH' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x16FFE42AB2D2DC59, ped)
	return result:__tointeger()
end
natives.ped.get_ped_cause_of_death = natives.PED.GET_PED_CAUSE_OF_DEATH

function natives.PED.GET_PED_TIME_OF_DEATH(--[[Ped]] ped) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_PED_TIME_OF_DEATH' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x1E98817B311AE98A, ped)
	return result:__tointeger()
end
natives.ped.get_ped_time_of_death = natives.PED.GET_PED_TIME_OF_DEATH

function natives.PED.COUNT_PEDS_IN_COMBAT_WITH_TARGET(--[[Ped]] ped) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.COUNT_PEDS_IN_COMBAT_WITH_TARGET' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x5407B7288D0478B7, ped)
	return result:__tointeger()
end
natives.ped.count_peds_in_combat_with_target = natives.PED.COUNT_PEDS_IN_COMBAT_WITH_TARGET

function natives.PED.COUNT_PEDS_IN_COMBAT_WITH_TARGET_WITHIN_RADIUS(--[[Ped]] ped, --[[float]] x, --[[float]] y, --[[float]] z, --[[float]] radius) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.COUNT_PEDS_IN_COMBAT_WITH_TARGET_WITHIN_RADIUS' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")
	assert(type(radius) == "number", "Arg #5 (radius) must be a number.")

	local result = native_call(0x336B3D200AB007CB, ped, x, y, z, radius)
	return result:__tointeger()
end
natives.ped.count_peds_in_combat_with_target_within_radius = natives.PED.COUNT_PEDS_IN_COMBAT_WITH_TARGET_WITHIN_RADIUS

function natives.PED.SET_PED_RELATIONSHIP_GROUP_DEFAULT_HASH(--[[Ped]] ped, --[[Hash]] hash) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_RELATIONSHIP_GROUP_DEFAULT_HASH' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(hash) == "number", "Arg #2 (hash) must be a number.")

	local result = native_call(0xADB3F206518799E8, ped, hash)
end
natives.ped.set_ped_relationship_group_default_hash = natives.PED.SET_PED_RELATIONSHIP_GROUP_DEFAULT_HASH

function natives.PED.SET_PED_RELATIONSHIP_GROUP_HASH(--[[Ped]] ped, --[[Hash]] hash) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_RELATIONSHIP_GROUP_HASH' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(hash) == "number", "Arg #2 (hash) must be a number.")

	local result = native_call(0xC80A74AC829DDD92, ped, hash)
end
natives.ped.set_ped_relationship_group_hash = natives.PED.SET_PED_RELATIONSHIP_GROUP_HASH

--[[
Sets the relationship between two groups. This should be called twice (once for each group).

Relationship types:
0 = Companion
1 = Respect
2 = Like
3 = Neutral
4 = Dislike
5 = Hate
255 = Pedestrians

Example:
PED::SET_RELATIONSHIP_BETWEEN_GROUPS(2, l_1017, 0xA49E591C);
PED::SET_RELATIONSHIP_BETWEEN_GROUPS(2, 0xA49E591C, l_1017);
]]
function natives.PED.SET_RELATIONSHIP_BETWEEN_GROUPS(--[[int]] relationship, --[[Hash]] group1, --[[Hash]] group2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_RELATIONSHIP_BETWEEN_GROUPS' due to disabled trusted mode")

	assert(type(relationship) == "number", "Arg #1 (relationship) must be a number.")
	assert(type(group1) == "number", "Arg #2 (group1) must be a number.")
	assert(type(group2) == "number", "Arg #3 (group2) must be a number.")

	local result = native_call(0xBF25EB89375A37AD, relationship, group1, group2)
end
natives.ped.set_relationship_between_groups = natives.PED.SET_RELATIONSHIP_BETWEEN_GROUPS

--[[
Clears the relationship between two groups. This should be called twice (once for each group).

Relationship types:
0 = Companion
1 = Respect
2 = Like
3 = Neutral
4 = Dislike
5 = Hate
255 = Pedestrians
(Credits: Inco)

Example:
PED::CLEAR_RELATIONSHIP_BETWEEN_GROUPS(2, l_1017, 0xA49E591C);
PED::CLEAR_RELATIONSHIP_BETWEEN_GROUPS(2, 0xA49E591C, l_1017);
]]
function natives.PED.CLEAR_RELATIONSHIP_BETWEEN_GROUPS(--[[int]] relationship, --[[Hash]] group1, --[[Hash]] group2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.CLEAR_RELATIONSHIP_BETWEEN_GROUPS' due to disabled trusted mode")

	assert(type(relationship) == "number", "Arg #1 (relationship) must be a number.")
	assert(type(group1) == "number", "Arg #2 (group1) must be a number.")
	assert(type(group2) == "number", "Arg #3 (group2) must be a number.")

	local result = native_call(0x5E29243FB56FC6D4, relationship, group1, group2)
end
natives.ped.clear_relationship_between_groups = natives.PED.CLEAR_RELATIONSHIP_BETWEEN_GROUPS

--[[
Can't select void. This function returns nothing. The hash of the created relationship group is output in the second parameter.
]]
function natives.PED.ADD_RELATIONSHIP_GROUP(--[[const char*]] name, --[[Hash*]] groupHash) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.ADD_RELATIONSHIP_GROUP' due to disabled trusted mode")

	assert(type(name) == "string", "Arg #1 (name) must be a string.")
	assert(type(groupHash) == "userdata", "Arg #2 (groupHash) must be a userdata.")

	local result = native_call(0xF372BC22FCB88606, name, groupHash)
	return result:__tointeger()
end
natives.ped.add_relationship_group = natives.PED.ADD_RELATIONSHIP_GROUP

function natives.PED.REMOVE_RELATIONSHIP_GROUP(--[[Hash]] groupHash) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.REMOVE_RELATIONSHIP_GROUP' due to disabled trusted mode")

	assert(type(groupHash) == "number", "Arg #1 (groupHash) must be a number.")

	local result = native_call(0xB6BA2444AB393DA2, groupHash)
end
natives.ped.remove_relationship_group = natives.PED.REMOVE_RELATIONSHIP_GROUP

function natives.PED.DOES_RELATIONSHIP_GROUP_EXIST(--[[Hash]] groupHash) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.DOES_RELATIONSHIP_GROUP_EXIST' due to disabled trusted mode")

	assert(type(groupHash) == "number", "Arg #1 (groupHash) must be a number.")

	local result = native_call(0xCC6E3B6BB69501F1, groupHash)
	return result:__tointeger() ~= 0
end
natives.ped.does_relationship_group_exist = natives.PED.DOES_RELATIONSHIP_GROUP_EXIST

--[[
Gets the relationship between two peds. This should be called twice (once for each ped).

Relationship types:
0 = Companion
1 = Respect
2 = Like
3 = Neutral
4 = Dislike
5 = Hate
255 = Pedestrians
(Credits: Inco)

Example:
PED::GET_RELATIONSHIP_BETWEEN_PEDS(2, l_1017, 0xA49E591C);
PED::GET_RELATIONSHIP_BETWEEN_PEDS(2, 0xA49E591C, l_1017);
]]
function natives.PED.GET_RELATIONSHIP_BETWEEN_PEDS(--[[Ped]] ped1, --[[Ped]] ped2) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_RELATIONSHIP_BETWEEN_PEDS' due to disabled trusted mode")

	assert(type(ped1) == "number", "Arg #1 (ped1) must be a number.")
	assert(type(ped2) == "number", "Arg #2 (ped2) must be a number.")

	local result = native_call(0xEBA5AD3A0EAF7121, ped1, ped2)
	return result:__tointeger()
end
natives.ped.get_relationship_between_peds = natives.PED.GET_RELATIONSHIP_BETWEEN_PEDS

function natives.PED.GET_PED_RELATIONSHIP_GROUP_DEFAULT_HASH(--[[Ped]] ped) -- Returns Hash
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_PED_RELATIONSHIP_GROUP_DEFAULT_HASH' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x42FDD0F017B1E38E, ped)
	return result:__tointeger()
end
natives.ped.get_ped_relationship_group_default_hash = natives.PED.GET_PED_RELATIONSHIP_GROUP_DEFAULT_HASH

function natives.PED.GET_PED_RELATIONSHIP_GROUP_HASH(--[[Ped]] ped) -- Returns Hash
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_PED_RELATIONSHIP_GROUP_HASH' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x7DBDD04862D95F04, ped)
	return result:__tointeger()
end
natives.ped.get_ped_relationship_group_hash = natives.PED.GET_PED_RELATIONSHIP_GROUP_HASH

--[[
Gets the relationship between two groups. This should be called twice (once for each group).

Relationship types:
0 = Companion
1 = Respect
2 = Like
3 = Neutral
4 = Dislike
5 = Hate
255 = Pedestrians

Example:
PED::GET_RELATIONSHIP_BETWEEN_GROUPS(l_1017, 0xA49E591C);
PED::GET_RELATIONSHIP_BETWEEN_GROUPS(0xA49E591C, l_1017);
]]
function natives.PED.GET_RELATIONSHIP_BETWEEN_GROUPS(--[[Hash]] group1, --[[Hash]] group2) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_RELATIONSHIP_BETWEEN_GROUPS' due to disabled trusted mode")

	assert(type(group1) == "number", "Arg #1 (group1) must be a number.")
	assert(type(group2) == "number", "Arg #2 (group2) must be a number.")

	local result = native_call(0x9E6B70061662AE5C, group1, group2)
	return result:__tointeger()
end
natives.ped.get_relationship_between_groups = natives.PED.GET_RELATIONSHIP_BETWEEN_GROUPS

function natives.PED.SET_RELATIONSHIP_GROUP_AFFECTS_WANTED_LEVEL(--[[Hash]] group, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_RELATIONSHIP_GROUP_AFFECTS_WANTED_LEVEL' due to disabled trusted mode")

	assert(type(group) == "number", "Arg #1 (group) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0x5615E0C5EB2BC6E2, group, p1)
end
natives.ped.set_relationship_group_affects_wanted_level = natives.PED.SET_RELATIONSHIP_GROUP_AFFECTS_WANTED_LEVEL

function natives.PED.TELL_GROUP_PEDS_IN_AREA_TO_ATTACK(--[[Ped]] ped, --[[Any]] p1, --[[float]] p2, --[[Hash]] hash, --[[Any]] p4, --[[Any]] p5) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.TELL_GROUP_PEDS_IN_AREA_TO_ATTACK' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(hash) == "number", "Arg #4 (hash) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")

	local result = native_call(0xAD27D957598E49E9, ped, p1, p2, hash, p4, p5)
end
natives.ped.tell_group_peds_in_area_to_attack = natives.PED.TELL_GROUP_PEDS_IN_AREA_TO_ATTACK

function natives.PED.SET_PED_CAN_BE_TARGETED_WITHOUT_LOS(--[[Ped]] ped, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_CAN_BE_TARGETED_WITHOUT_LOS' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x4328652AE5769C71, ped, toggle)
end
natives.ped.set_ped_can_be_targeted_without_los = natives.PED.SET_PED_CAN_BE_TARGETED_WITHOUT_LOS

function natives.PED.SET_PED_TO_INFORM_RESPECTED_FRIENDS(--[[Ped]] ped, --[[float]] radius, --[[int]] maxFriends) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_TO_INFORM_RESPECTED_FRIENDS' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(radius) == "number", "Arg #2 (radius) must be a number.")
	assert(type(maxFriends) == "number", "Arg #3 (maxFriends) must be a number.")

	local result = native_call(0x112942C6E708F70B, ped, radius, maxFriends)
end
natives.ped.set_ped_to_inform_respected_friends = natives.PED.SET_PED_TO_INFORM_RESPECTED_FRIENDS

function natives.PED.IS_PED_RESPONDING_TO_EVENT(--[[Ped]] ped, --[[Any]] event) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_RESPONDING_TO_EVENT' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(event) == "number", "Arg #2 (event) must be a number.")

	local result = native_call(0x625B774D75C87068, ped, event)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_responding_to_event = natives.PED.IS_PED_RESPONDING_TO_EVENT

function natives.PED.GET_POS_FROM_FIRED_EVENT(--[[Ped]] ped, --[[int]] eventType, --[[Any*]] outData) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_POS_FROM_FIRED_EVENT' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(eventType) == "number", "Arg #2 (eventType) must be a number.")
	assert(type(outData) == "userdata", "Arg #3 (outData) must be a userdata.")

	local result = native_call(0xBA656A3BB01BDEA3, ped, eventType, outData)
	return result:__tointeger() ~= 0
end
natives.ped.get_pos_from_fired_event = natives.PED.GET_POS_FROM_FIRED_EVENT

--[[
FIRING_PATTERN_BURST_FIRE = 0xD6FF6D61 ( 1073727030 )
FIRING_PATTERN_BURST_FIRE_IN_COVER = 0x026321F1 ( 40051185 )
FIRING_PATTERN_BURST_FIRE_DRIVEBY = 0xD31265F2 ( -753768974 )
FIRING_PATTERN_FROM_GROUND = 0x2264E5D6 ( 577037782 )
FIRING_PATTERN_DELAY_FIRE_BY_ONE_SEC = 0x7A845691 ( 2055493265 )
FIRING_PATTERN_FULL_AUTO = 0xC6EE6B4C ( -957453492 )
FIRING_PATTERN_SINGLE_SHOT = 0x5D60E4E0 ( 1566631136 )
FIRING_PATTERN_BURST_FIRE_PISTOL = 0xA018DB8A ( -1608983670 )
FIRING_PATTERN_BURST_FIRE_SMG = 0xD10DADEE ( 1863348768 )
FIRING_PATTERN_BURST_FIRE_RIFLE = 0x9C74B406 ( -1670073338 )
FIRING_PATTERN_BURST_FIRE_MG = 0xB573C5B4 ( -1250703948 )
FIRING_PATTERN_BURST_FIRE_PUMPSHOTGUN = 0x00BAC39B ( 12239771 )
FIRING_PATTERN_BURST_FIRE_HELI = 0x914E786F ( -1857128337 )
FIRING_PATTERN_BURST_FIRE_MICRO = 0x42EF03FD ( 1122960381 )
FIRING_PATTERN_SHORT_BURSTS = 0x1A92D7DF ( 445831135 )
FIRING_PATTERN_SLOW_FIRE_TANK = 0xE2CA3A71 ( -490063247 )

if anyone is interested firing pattern info: pastebin.com/Px036isB
]]
function natives.PED.SET_PED_FIRING_PATTERN(--[[Ped]] ped, --[[Hash]] patternHash) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_FIRING_PATTERN' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(patternHash) == "number", "Arg #2 (patternHash) must be a number.")

	local result = native_call(0x9AC577F5A12AD8A9, ped, patternHash)
end
natives.ped.set_ped_firing_pattern = natives.PED.SET_PED_FIRING_PATTERN

--[[
shootRate 0-1000
]]
function natives.PED.SET_PED_SHOOT_RATE(--[[Ped]] ped, --[[int]] shootRate) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_SHOOT_RATE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(shootRate) == "number", "Arg #2 (shootRate) must be a number.")

	local result = native_call(0x614DA022990752DC, ped, shootRate)
end
natives.ped.set_ped_shoot_rate = natives.PED.SET_PED_SHOOT_RATE

--[[
combatType can be between 0-14. See GET_COMBAT_FLOAT below for a list of possible parameters.
]]
function natives.PED.SET_COMBAT_FLOAT(--[[Ped]] ped, --[[int]] combatType, --[[float]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_COMBAT_FLOAT' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(combatType) == "number", "Arg #2 (combatType) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0xFF41B4B141ED981C, ped, combatType, p2)
end
natives.ped.set_combat_float = natives.PED.SET_COMBAT_FLOAT

--[[
p0: Ped Handle
p1: int i | 0 <= i <= 27

p1 probably refers to the attributes configured in combatbehavior.meta. There are 13. Example:

<BlindFireChance value="0.1"/>
<WeaponShootRateModifier value="1.0"/>
<TimeBetweenBurstsInCover value="1.25"/>
<BurstDurationInCover value="2.0"/>
<TimeBetweenPeeks value="10.0"/>
<WeaponAccuracy value="0.18"/>
<FightProficiency value="0.8"/>
<StrafeWhenMovingChance value="1.0"/>
<WalkWhenStrafingChance value="0.0"/>
<AttackWindowDistanceForCover value="55.0"/>
<TimeToInvalidateInjuredTarget value="9.0"/>
<TriggerChargeTime_Near value="4.0"/>
<TriggerChargeTime_Far value="10.0"/>

-------------Confirmed by editing combatbehavior.meta:
p1:
0=BlindFireChance
1=BurstDurationInCover
3=TimeBetweenBurstsInCover
4=TimeBetweenPeeks
5=StrafeWhenMovingChance
8=WalkWhenStrafingChance
11=AttackWindowDistanceForCover
12=TimeToInvalidateInjuredTarget
16=OptimalCoverDistance

]]
function natives.PED.GET_COMBAT_FLOAT(--[[Ped]] ped, --[[int]] p1) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_COMBAT_FLOAT' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x52DFF8A10508090A, ped, p1)
	return result:__tonumber()
end
natives.ped.get_combat_float = natives.PED.GET_COMBAT_FLOAT

--[[
p1 may be a BOOL representing whether or not the group even exists
]]
function natives.PED.GET_GROUP_SIZE(--[[int]] groupID, --[[Any*]] unknown, --[[int*]] sizeInMembers) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_GROUP_SIZE' due to disabled trusted mode")

	assert(type(groupID) == "number", "Arg #1 (groupID) must be a number.")
	assert(type(unknown) == "userdata", "Arg #2 (unknown) must be a userdata.")
	assert(type(sizeInMembers) == "userdata", "Arg #3 (sizeInMembers) must be a userdata.")

	local result = native_call(0x8DE69FE35CA09A45, groupID, unknown, sizeInMembers)
end
natives.ped.get_group_size = natives.PED.GET_GROUP_SIZE

function natives.PED.DOES_GROUP_EXIST(--[[int]] groupId) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.DOES_GROUP_EXIST' due to disabled trusted mode")

	assert(type(groupId) == "number", "Arg #1 (groupId) must be a number.")

	local result = native_call(0x7C6B0C22F9F40BBE, groupId)
	return result:__tointeger() ~= 0
end
natives.ped.does_group_exist = natives.PED.DOES_GROUP_EXIST

--[[
Returns the group id of which the specified ped is a member of.
]]
function natives.PED.GET_PED_GROUP_INDEX(--[[Ped]] ped) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_PED_GROUP_INDEX' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0xF162E133B4E7A675, ped)
	return result:__tointeger()
end
natives.ped.get_ped_group_index = natives.PED.GET_PED_GROUP_INDEX

function natives.PED.IS_PED_IN_GROUP(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_IN_GROUP' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x5891CAC5D4ACFF74, ped)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_in_group = natives.PED.IS_PED_IN_GROUP

function natives.PED.GET_PLAYER_PED_IS_FOLLOWING(--[[Ped]] ped) -- Returns Player
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_PLAYER_PED_IS_FOLLOWING' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x6A3975DEA89F9A17, ped)
	return result:__tointeger()
end
natives.ped.get_player_ped_is_following = natives.PED.GET_PLAYER_PED_IS_FOLLOWING

--[[
0: Default
1: Circle Around Leader
2: Alternative Circle Around Leader
3: Line, with Leader at center
]]
function natives.PED.SET_GROUP_FORMATION(--[[int]] groupId, --[[int]] formationType) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_GROUP_FORMATION' due to disabled trusted mode")

	assert(type(groupId) == "number", "Arg #1 (groupId) must be a number.")
	assert(type(formationType) == "number", "Arg #2 (formationType) must be a number.")

	local result = native_call(0xCE2F5FC3AF7E8C1E, groupId, formationType)
end
natives.ped.set_group_formation = natives.PED.SET_GROUP_FORMATION

function natives.PED.SET_GROUP_FORMATION_SPACING(--[[int]] groupId, --[[float]] x, --[[float]] y, --[[float]] z) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_GROUP_FORMATION_SPACING' due to disabled trusted mode")

	assert(type(groupId) == "number", "Arg #1 (groupId) must be a number.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")

	local result = native_call(0x1D9D45004C28C916, groupId, x, y, z)
end
natives.ped.set_group_formation_spacing = natives.PED.SET_GROUP_FORMATION_SPACING

function natives.PED.RESET_GROUP_FORMATION_DEFAULT_SPACING(--[[int]] groupHandle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.RESET_GROUP_FORMATION_DEFAULT_SPACING' due to disabled trusted mode")

	assert(type(groupHandle) == "number", "Arg #1 (groupHandle) must be a number.")

	local result = native_call(0x63DAB4CCB3273205, groupHandle)
end
natives.ped.reset_group_formation_default_spacing = natives.PED.RESET_GROUP_FORMATION_DEFAULT_SPACING

--[[
Gets ID of vehicle player using. It means it can get ID at any interaction with vehicle. Enter\exit for example. And that means it is faster than GET_VEHICLE_PED_IS_IN but less safe.
]]
function natives.PED.GET_VEHICLE_PED_IS_USING(--[[Ped]] ped) -- Returns Vehicle
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_VEHICLE_PED_IS_USING' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x6094AD011A2EA87D, ped)
	return result:__tointeger()
end
natives.ped.get_vehicle_ped_is_using = natives.PED.GET_VEHICLE_PED_IS_USING

function natives.PED.GET_VEHICLE_PED_IS_ENTERING(--[[Ped]] ped) -- Returns Vehicle
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_VEHICLE_PED_IS_ENTERING' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0xF92691AED837A5FC, ped)
	return result:__tointeger()
end
natives.ped.get_vehicle_ped_is_entering = natives.PED.GET_VEHICLE_PED_IS_ENTERING

--[[
enable or disable the gravity of a ped

Examples:
PED::SET_PED_GRAVITY(PLAYER::PLAYER_PED_ID(), 0x00000001);
PED::SET_PED_GRAVITY(Local_289[iVar0 /*20*/], 0x00000001);
]]
function natives.PED.SET_PED_GRAVITY(--[[Ped]] ped, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_GRAVITY' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x9FF447B6B6AD960A, ped, toggle)
end
natives.ped.set_ped_gravity = natives.PED.SET_PED_GRAVITY

--[[
damages a ped with the given amount
]]
function natives.PED.APPLY_DAMAGE_TO_PED(--[[Ped]] ped, --[[int]] damageAmount, --[[BOOL]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.APPLY_DAMAGE_TO_PED' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(damageAmount) == "number", "Arg #2 (damageAmount) must be a number.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x697157CED63F18D4, ped, damageAmount, p2, p3)
end
natives.ped.apply_damage_to_ped = natives.PED.APPLY_DAMAGE_TO_PED

function natives.PED.GET_TIME_PED_DAMAGED_BY_WEAPON(--[[Ped]] ped, --[[Hash]] weaponHash) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_TIME_PED_DAMAGED_BY_WEAPON' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(weaponHash) == "number", "Arg #2 (weaponHash) must be a number.")

	local result = native_call(0x36B77BB84687C318, ped, weaponHash)
	return result:__tointeger()
end
natives.ped.get_time_ped_damaged_by_weapon = natives.PED.GET_TIME_PED_DAMAGED_BY_WEAPON

function natives.PED.SET_PED_ALLOWED_TO_DUCK(--[[Ped]] ped, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_ALLOWED_TO_DUCK' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xDA1F1B7BE1A8766F, ped, toggle)
end
natives.ped.set_ped_allowed_to_duck = natives.PED.SET_PED_ALLOWED_TO_DUCK

function natives.PED.SET_PED_NEVER_LEAVES_GROUP(--[[Ped]] ped, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_NEVER_LEAVES_GROUP' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x3DBFC55D5C9BB447, ped, toggle)
end
natives.ped.set_ped_never_leaves_group = natives.PED.SET_PED_NEVER_LEAVES_GROUP

--[[
https://alloc8or.re/gta5/doc/enums/ePedType.txt
]]
function natives.PED.GET_PED_TYPE(--[[Ped]] ped) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_PED_TYPE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0xFF059E1E4C01E63C, ped)
	return result:__tointeger()
end
natives.ped.get_ped_type = natives.PED.GET_PED_TYPE

--[[
Turns the desired ped into a cop. If you use this on the player ped, you will become almost invisible to cops dispatched for you. You will also report your own crimes, get a generic cop voice, get a cop-vision-cone on the radar, and you will be unable to shoot at other cops. SWAT and Army will still shoot at you. Toggling ped as "false" has no effect; you must change p0's ped model to disable the effect.
]]
function natives.PED.SET_PED_AS_COP(--[[Ped]] ped, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_AS_COP' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xBB03C38DD3FB7FFD, ped, toggle)
end
natives.ped.set_ped_as_cop = natives.PED.SET_PED_AS_COP

function natives.PED.SET_PED_HEALTH_PENDING_LAST_DAMAGE_EVENT_OVERRIDE_FLAG(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_HEALTH_PENDING_LAST_DAMAGE_EVENT_OVERRIDE_FLAG' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0xB3352E018D6F89DF, toggle)
end
natives.ped.set_ped_health_pending_last_damage_event_override_flag = natives.PED.SET_PED_HEALTH_PENDING_LAST_DAMAGE_EVENT_OVERRIDE_FLAG

--[[
sets the maximum health of a ped

I think it's never been used in any script
]]
function natives.PED.SET_PED_MAX_HEALTH(--[[Ped]] ped, --[[int]] value) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_MAX_HEALTH' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(value) == "number", "Arg #2 (value) must be a number.")

	local result = native_call(0xF5F6378C4F3419D3, ped, value)
end
natives.ped.set_ped_max_health = natives.PED.SET_PED_MAX_HEALTH

function natives.PED.GET_PED_MAX_HEALTH(--[[Ped]] ped) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_PED_MAX_HEALTH' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x4700A416E8324EF3, ped)
	return result:__tointeger()
end
natives.ped.get_ped_max_health = natives.PED.GET_PED_MAX_HEALTH

function natives.PED.SET_PED_MAX_TIME_IN_WATER(--[[Ped]] ped, --[[float]] value) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_MAX_TIME_IN_WATER' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(value) == "number", "Arg #2 (value) must be a number.")

	local result = native_call(0x43C851690662113D, ped, value)
end
natives.ped.set_ped_max_time_in_water = natives.PED.SET_PED_MAX_TIME_IN_WATER

function natives.PED.SET_PED_MAX_TIME_UNDERWATER(--[[Ped]] ped, --[[float]] value) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_MAX_TIME_UNDERWATER' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(value) == "number", "Arg #2 (value) must be a number.")

	local result = native_call(0x6BA428C528D9E522, ped, value)
end
natives.ped.set_ped_max_time_underwater = natives.PED.SET_PED_MAX_TIME_UNDERWATER

function natives.PED.SET_CORPSE_RAGDOLL_FRICTION(--[[Ped]] ped, --[[float]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_CORPSE_RAGDOLL_FRICTION' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x2735233A786B1BEF, ped, p1)
end
natives.ped.set_corpse_ragdoll_friction = natives.PED.SET_CORPSE_RAGDOLL_FRICTION

--[[
seatIndex must be <= 2
]]
function natives.PED.SET_PED_VEHICLE_FORCED_SEAT_USAGE(--[[Ped]] ped, --[[Vehicle]] vehicle, --[[int]] seatIndex, --[[int]] flags, --[[Any]] p4) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_VEHICLE_FORCED_SEAT_USAGE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(vehicle) == "number", "Arg #2 (vehicle) must be a number.")
	assert(type(seatIndex) == "number", "Arg #3 (seatIndex) must be a number.")
	assert(type(flags) == "number", "Arg #4 (flags) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")

	local result = native_call(0x952F06BEECD775CC, ped, vehicle, seatIndex, flags, p4)
end
natives.ped.set_ped_vehicle_forced_seat_usage = natives.PED.SET_PED_VEHICLE_FORCED_SEAT_USAGE

function natives.PED.CLEAR_ALL_PED_VEHICLE_FORCED_SEAT_USAGE(--[[Ped]] ped) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.CLEAR_ALL_PED_VEHICLE_FORCED_SEAT_USAGE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0xE6CA85E7259CE16B, ped)
end
natives.ped.clear_all_ped_vehicle_forced_seat_usage = natives.PED.CLEAR_ALL_PED_VEHICLE_FORCED_SEAT_USAGE

--[[
This native does absolutely nothing, just a nullsub
]]
function natives.PED.SET_PED_CAN_BE_KNOCKED_OFF_BIKE(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_CAN_BE_KNOCKED_OFF_BIKE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xB282749D5E028163, p0, p1)
end
natives.ped.set_ped_can_be_knocked_off_bike = natives.PED.SET_PED_CAN_BE_KNOCKED_OFF_BIKE

--[[
state: https://alloc8or.re/gta5/doc/enums/eKnockOffVehicle.txt
]]
function natives.PED.SET_PED_CAN_BE_KNOCKED_OFF_VEHICLE(--[[Ped]] ped, --[[int]] state) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_CAN_BE_KNOCKED_OFF_VEHICLE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(state) == "number", "Arg #2 (state) must be a number.")

	local result = native_call(0x7A6535691B477C48, ped, state)
end
natives.ped.set_ped_can_be_knocked_off_vehicle = natives.PED.SET_PED_CAN_BE_KNOCKED_OFF_VEHICLE

function natives.PED.CAN_KNOCK_PED_OFF_VEHICLE(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.CAN_KNOCK_PED_OFF_VEHICLE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x51AC07A44D4F5B8A, ped)
	return result:__tointeger() ~= 0
end
natives.ped.can_knock_ped_off_vehicle = natives.PED.CAN_KNOCK_PED_OFF_VEHICLE

function natives.PED.KNOCK_PED_OFF_VEHICLE(--[[Ped]] ped) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.KNOCK_PED_OFF_VEHICLE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x45BBCBA77C29A841, ped)
end
natives.ped.knock_ped_off_vehicle = natives.PED.KNOCK_PED_OFF_VEHICLE

function natives.PED.SET_PED_COORDS_NO_GANG(--[[Ped]] ped, --[[float]] posX, --[[float]] posY, --[[float]] posZ) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_COORDS_NO_GANG' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(posX) == "number", "Arg #2 (posX) must be a number.")
	assert(type(posY) == "number", "Arg #3 (posY) must be a number.")
	assert(type(posZ) == "number", "Arg #4 (posZ) must be a number.")

	local result = native_call(0x87052FE446E07247, ped, posX, posY, posZ)
end
natives.ped.set_ped_coords_no_gang = natives.PED.SET_PED_COORDS_NO_GANG

--[[
from fm_mission_controller.c4 (variable names changed for clarity):

int groupID = PLAYER::GET_PLAYER_GROUP(PLAYER::PLAYER_ID());
PED::GET_GROUP_SIZE(group, &unused, &groupSize);
if (groupSize >= 1) {
. . . . for (int memberNumber = 0; memberNumber < groupSize; memberNumber++) {
. . . . . . . . Ped ped1 = PED::GET_PED_AS_GROUP_MEMBER(groupID, memberNumber);
. . . . . . . . //and so on
]]
function natives.PED.GET_PED_AS_GROUP_MEMBER(--[[int]] groupID, --[[int]] memberNumber) -- Returns Ped
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_PED_AS_GROUP_MEMBER' due to disabled trusted mode")

	assert(type(groupID) == "number", "Arg #1 (groupID) must be a number.")
	assert(type(memberNumber) == "number", "Arg #2 (memberNumber) must be a number.")

	local result = native_call(0x51455483CF23ED97, groupID, memberNumber)
	return result:__tointeger()
end
natives.ped.get_ped_as_group_member = natives.PED.GET_PED_AS_GROUP_MEMBER

function natives.PED.GET_PED_AS_GROUP_LEADER(--[[int]] groupID) -- Returns Ped
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_PED_AS_GROUP_LEADER' due to disabled trusted mode")

	assert(type(groupID) == "number", "Arg #1 (groupID) must be a number.")

	local result = native_call(0x5CCE68DBD5FE93EC, groupID)
	return result:__tointeger()
end
natives.ped.get_ped_as_group_leader = natives.PED.GET_PED_AS_GROUP_LEADER

function natives.PED.SET_PED_KEEP_TASK(--[[Ped]] ped, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_KEEP_TASK' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x971D38760FBC02EF, ped, toggle)
end
natives.ped.set_ped_keep_task = natives.PED.SET_PED_KEEP_TASK

function natives.PED.SET_PED_ALLOW_MINOR_REACTIONS_AS_MISSION_PED(--[[Ped]] ped, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_ALLOW_MINOR_REACTIONS_AS_MISSION_PED' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x49E50BDB8BA4DAB2, ped, toggle)
end
natives.ped.set_ped_allow_minor_reactions_as_mission_ped = natives.PED.SET_PED_ALLOW_MINOR_REACTIONS_AS_MISSION_PED

function natives.PED.IS_PED_SWIMMING(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_SWIMMING' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x9DE327631295B4C2, ped)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_swimming = natives.PED.IS_PED_SWIMMING

function natives.PED.IS_PED_SWIMMING_UNDER_WATER(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_SWIMMING_UNDER_WATER' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0xC024869A53992F34, ped)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_swimming_under_water = natives.PED.IS_PED_SWIMMING_UNDER_WATER

--[[
teleports ped to coords along with the vehicle ped is in
]]
function natives.PED.SET_PED_COORDS_KEEP_VEHICLE(--[[Ped]] ped, --[[float]] posX, --[[float]] posY, --[[float]] posZ) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_COORDS_KEEP_VEHICLE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(posX) == "number", "Arg #2 (posX) must be a number.")
	assert(type(posY) == "number", "Arg #3 (posY) must be a number.")
	assert(type(posZ) == "number", "Arg #4 (posZ) must be a number.")

	local result = native_call(0x9AFEFF481A85AB2E, ped, posX, posY, posZ)
end
natives.ped.set_ped_coords_keep_vehicle = natives.PED.SET_PED_COORDS_KEEP_VEHICLE

function natives.PED.SET_PED_DIES_IN_VEHICLE(--[[Ped]] ped, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_DIES_IN_VEHICLE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x2A30922C90C9B42C, ped, toggle)
end
natives.ped.set_ped_dies_in_vehicle = natives.PED.SET_PED_DIES_IN_VEHICLE

function natives.PED.SET_CREATE_RANDOM_COPS(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_CREATE_RANDOM_COPS' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x102E68B2024D536D, toggle)
end
natives.ped.set_create_random_cops = natives.PED.SET_CREATE_RANDOM_COPS

function natives.PED.SET_CREATE_RANDOM_COPS_NOT_ON_SCENARIOS(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_CREATE_RANDOM_COPS_NOT_ON_SCENARIOS' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x8A4986851C4EF6E7, toggle)
end
natives.ped.set_create_random_cops_not_on_scenarios = natives.PED.SET_CREATE_RANDOM_COPS_NOT_ON_SCENARIOS

function natives.PED.SET_CREATE_RANDOM_COPS_ON_SCENARIOS(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_CREATE_RANDOM_COPS_ON_SCENARIOS' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x444CB7D7DBE6973D, toggle)
end
natives.ped.set_create_random_cops_on_scenarios = natives.PED.SET_CREATE_RANDOM_COPS_ON_SCENARIOS

function natives.PED.CAN_CREATE_RANDOM_COPS() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.CAN_CREATE_RANDOM_COPS' due to disabled trusted mode")

	local result = native_call(0x5EE2CAFF7F17770D)
	return result:__tointeger() ~= 0
end
natives.ped.can_create_random_cops = natives.PED.CAN_CREATE_RANDOM_COPS

function natives.PED.SET_PED_AS_ENEMY(--[[Ped]] ped, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_AS_ENEMY' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x02A0C9720B854BFA, ped, toggle)
end
natives.ped.set_ped_as_enemy = natives.PED.SET_PED_AS_ENEMY

function natives.PED.SET_PED_CAN_SMASH_GLASS(--[[Ped]] ped, --[[BOOL]] p1, --[[BOOL]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_CAN_SMASH_GLASS' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")

	local result = native_call(0x1CCE141467FF42A2, ped, p1, p2)
end
natives.ped.set_ped_can_smash_glass = natives.PED.SET_PED_CAN_SMASH_GLASS

function natives.PED.IS_PED_IN_ANY_TRAIN(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_IN_ANY_TRAIN' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x6F972C1AB75A1ED0, ped)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_in_any_train = natives.PED.IS_PED_IN_ANY_TRAIN

function natives.PED.IS_PED_GETTING_INTO_A_VEHICLE(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_GETTING_INTO_A_VEHICLE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0xBB062B2B5722478E, ped)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_getting_into_a_vehicle = natives.PED.IS_PED_GETTING_INTO_A_VEHICLE

function natives.PED.IS_PED_TRYING_TO_ENTER_A_LOCKED_VEHICLE(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_TRYING_TO_ENTER_A_LOCKED_VEHICLE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x44D28D5DDFE5F68C, ped)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_trying_to_enter_a_locked_vehicle = natives.PED.IS_PED_TRYING_TO_ENTER_A_LOCKED_VEHICLE

--[[
ped can not pull out a weapon when true
]]
function natives.PED.SET_ENABLE_HANDCUFFS(--[[Ped]] ped, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_ENABLE_HANDCUFFS' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xDF1AF8B5D56542FA, ped, toggle)
end
natives.ped.set_enable_handcuffs = natives.PED.SET_ENABLE_HANDCUFFS

--[[
Used with SET_ENABLE_HANDCUFFS in decompiled scripts. From my observations, I have noticed that while being ragdolled you are not able to get up but you can still run. Your legs can also bend.
]]
function natives.PED.SET_ENABLE_BOUND_ANKLES(--[[Ped]] ped, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_ENABLE_BOUND_ANKLES' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xC52E0F855C58FC2E, ped, toggle)
end
natives.ped.set_enable_bound_ankles = natives.PED.SET_ENABLE_BOUND_ANKLES

--[[
Enables diving motion when underwater.
]]
function natives.PED.SET_ENABLE_SCUBA(--[[Ped]] ped, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_ENABLE_SCUBA' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xF99F62004024D506, ped, toggle)
end
natives.ped.set_enable_scuba = natives.PED.SET_ENABLE_SCUBA

--[[
Setting ped to true allows the ped to shoot "friendlies".

p2 set to true when toggle is also true seams to make peds permanently unable to aim at, even if you set p2 back to false.

p1 = false & p2 = false for unable to aim at.
p1 = true & p2 = false for able to aim at. 
]]
function natives.PED.SET_CAN_ATTACK_FRIENDLY(--[[Ped]] ped, --[[BOOL]] toggle, --[[BOOL]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_CAN_ATTACK_FRIENDLY' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")

	local result = native_call(0xB3B1CB349FF9C75D, ped, toggle, p2)
end
natives.ped.set_can_attack_friendly = natives.PED.SET_CAN_ATTACK_FRIENDLY

--[[
Returns the ped's alertness (0-3).

Values : 

0 : Neutral
1 : Heard something (gun shot, hit, etc)
2 : Knows (the origin of the event)
3 : Fully alerted (is facing the event?)

If the Ped does not exist, returns -1.
]]
function natives.PED.GET_PED_ALERTNESS(--[[Ped]] ped) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_PED_ALERTNESS' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0xF6AA118530443FD2, ped)
	return result:__tointeger()
end
natives.ped.get_ped_alertness = natives.PED.GET_PED_ALERTNESS

--[[
value ranges from 0 to 3.
]]
function natives.PED.SET_PED_ALERTNESS(--[[Ped]] ped, --[[int]] value) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_ALERTNESS' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(value) == "number", "Arg #2 (value) must be a number.")

	local result = native_call(0xDBA71115ED9941A6, ped, value)
end
natives.ped.set_ped_alertness = natives.PED.SET_PED_ALERTNESS

function natives.PED.SET_PED_GET_OUT_UPSIDE_DOWN_VEHICLE(--[[Ped]] ped, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_GET_OUT_UPSIDE_DOWN_VEHICLE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xBC0ED94165A48BC2, ped, toggle)
end
natives.ped.set_ped_get_out_upside_down_vehicle = natives.PED.SET_PED_GET_OUT_UPSIDE_DOWN_VEHICLE

--[[
transitionSpeed is the time in seconds it takes to transition from one movement clipset to another.	ransitionSpeed is usually 1.0f

List of movement clipsets:
Thanks to elsewhat for list.

 "ANIM_GROUP_MOVE_BALLISTIC"
 "ANIM_GROUP_MOVE_LEMAR_ALLEY"
 "clipset@move@trash_fast_turn"
 "FEMALE_FAST_RUNNER"
 "missfbi4prepp1_garbageman"
 "move_characters@franklin@fire"
 "move_characters@Jimmy@slow@"
 "move_characters@michael@fire"
 "move_f@flee@a"
 "move_f@scared"
 "move_f@sexy@a"
 "move_heist_lester"
 "move_injured_generic"
 "move_lester_CaneUp"
 "move_m@bag"
 "MOVE_M@BAIL_BOND_NOT_TAZERED"
 "MOVE_M@BAIL_BOND_TAZERED"
 "move_m@brave"
 "move_m@casual@d"
 "move_m@drunk@moderatedrunk"
 "MOVE_M@DRUNK@MODERATEDRUNK"
 "MOVE_M@DRUNK@MODERATEDRUNK_HEAD_UP"
 "MOVE_M@DRUNK@SLIGHTLYDRUNK"
 "MOVE_M@DRUNK@VERYDRUNK"
 "move_m@fire"
 "move_m@gangster@var_e"
 "move_m@gangster@var_f"
 "move_m@gangster@var_i"
 "move_m@JOG@"
 "MOVE_M@PRISON_GAURD"
 "MOVE_P_M_ONE"
 "MOVE_P_M_ONE_BRIEFCASE"
 "move_p_m_zero_janitor"
 "move_p_m_zero_slow"
 "move_ped_bucket"
 "move_ped_crouched"
 "move_ped_mop"
 "MOVE_M@FEMME@"
 "MOVE_F@FEMME@"
 "MOVE_M@GANGSTER@NG"
 "MOVE_F@GANGSTER@NG"
 "MOVE_M@POSH@"
 "MOVE_F@POSH@"
 "MOVE_M@TOUGH_GUY@"
 "MOVE_F@TOUGH_GUY@"

~ NotCrunchyTaco

Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json
]]
function natives.PED.SET_PED_MOVEMENT_CLIPSET(--[[Ped]] ped, --[[const char*]] clipSet, --[[float]] transitionSpeed) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_MOVEMENT_CLIPSET' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(clipSet) == "string", "Arg #2 (clipSet) must be a string.")
	assert(type(transitionSpeed) == "number", "Arg #3 (transitionSpeed) must be a number.")

	local result = native_call(0xAF8A94EDE7712BEF, ped, clipSet, transitionSpeed)
end
natives.ped.set_ped_movement_clipset = natives.PED.SET_PED_MOVEMENT_CLIPSET

--[[
If p1 is 0.0, I believe you are back to normal. 
If p1 is 1.0, it looks like you can only rotate the ped, not walk.

Using the following code to reset back to normal
PED::RESET_PED_MOVEMENT_CLIPSET(PLAYER::PLAYER_PED_ID(), 0.0);
]]
function natives.PED.RESET_PED_MOVEMENT_CLIPSET(--[[Ped]] ped, --[[float]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.RESET_PED_MOVEMENT_CLIPSET' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xAA74EC0CB0AAEA2C, ped, p1)
end
natives.ped.reset_ped_movement_clipset = natives.PED.RESET_PED_MOVEMENT_CLIPSET

--[[
Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json
]]
function natives.PED.SET_PED_STRAFE_CLIPSET(--[[Ped]] ped, --[[const char*]] clipSet) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_STRAFE_CLIPSET' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(clipSet) == "string", "Arg #2 (clipSet) must be a string.")

	local result = native_call(0x29A28F3F8CF6D854, ped, clipSet)
end
natives.ped.set_ped_strafe_clipset = natives.PED.SET_PED_STRAFE_CLIPSET

function natives.PED.RESET_PED_STRAFE_CLIPSET(--[[Ped]] ped) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.RESET_PED_STRAFE_CLIPSET' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x20510814175EA477, ped)
end
natives.ped.reset_ped_strafe_clipset = natives.PED.RESET_PED_STRAFE_CLIPSET

function natives.PED.SET_PED_WEAPON_MOVEMENT_CLIPSET(--[[Ped]] ped, --[[const char*]] clipSet) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_WEAPON_MOVEMENT_CLIPSET' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(clipSet) == "string", "Arg #2 (clipSet) must be a string.")

	local result = native_call(0x2622E35B77D3ACA2, ped, clipSet)
end
natives.ped.set_ped_weapon_movement_clipset = natives.PED.SET_PED_WEAPON_MOVEMENT_CLIPSET

function natives.PED.RESET_PED_WEAPON_MOVEMENT_CLIPSET(--[[Ped]] ped) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.RESET_PED_WEAPON_MOVEMENT_CLIPSET' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x97B0DB5B4AA74E77, ped)
end
natives.ped.reset_ped_weapon_movement_clipset = natives.PED.RESET_PED_WEAPON_MOVEMENT_CLIPSET

function natives.PED.SET_PED_DRIVE_BY_CLIPSET_OVERRIDE(--[[Ped]] ped, --[[const char*]] clipset) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_DRIVE_BY_CLIPSET_OVERRIDE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(clipset) == "string", "Arg #2 (clipset) must be a string.")

	local result = native_call(0xED34AB6C5CB36520, ped, clipset)
end
natives.ped.set_ped_drive_by_clipset_override = natives.PED.SET_PED_DRIVE_BY_CLIPSET_OVERRIDE

function natives.PED.CLEAR_PED_DRIVE_BY_CLIPSET_OVERRIDE(--[[Ped]] ped) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.CLEAR_PED_DRIVE_BY_CLIPSET_OVERRIDE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x4AFE3690D7E0B5AC, ped)
end
natives.ped.clear_ped_drive_by_clipset_override = natives.PED.CLEAR_PED_DRIVE_BY_CLIPSET_OVERRIDE

--[[
Found in the b617d scripts:
PED::_9DBA107B4937F809(v_7, "trevor_heist_cover_2h");
]]
function natives.PED.SET_PED_MOTION_IN_COVER_CLIPSET_OVERRIDE(--[[Ped]] ped, --[[const char*]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_MOTION_IN_COVER_CLIPSET_OVERRIDE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(p1) == "string", "Arg #2 (p1) must be a string.")

	local result = native_call(0x9DBA107B4937F809, ped, p1)
end
natives.ped.set_ped_motion_in_cover_clipset_override = natives.PED.SET_PED_MOTION_IN_COVER_CLIPSET_OVERRIDE

function natives.PED.CLEAR_PED_MOTION_IN_COVER_CLIPSET_OVERRIDE(--[[Ped]] ped) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.CLEAR_PED_MOTION_IN_COVER_CLIPSET_OVERRIDE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0xC79196DCB36F6121, ped)
end
natives.ped.clear_ped_motion_in_cover_clipset_override = natives.PED.CLEAR_PED_MOTION_IN_COVER_CLIPSET_OVERRIDE

function natives.PED.CLEAR_PED_FALL_UPPER_BODY_CLIPSET_OVERRIDE(--[[Ped]] ped) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.CLEAR_PED_FALL_UPPER_BODY_CLIPSET_OVERRIDE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x80054D7FCC70EEC6, ped)
end
natives.ped.clear_ped_fall_upper_body_clipset_override = natives.PED.CLEAR_PED_FALL_UPPER_BODY_CLIPSET_OVERRIDE

--[[
PED::SET_PED_IN_VEHICLE_CONTEXT(l_128, MISC::GET_HASH_KEY("MINI_PROSTITUTE_LOW_PASSENGER"));
PED::SET_PED_IN_VEHICLE_CONTEXT(l_128, MISC::GET_HASH_KEY("MINI_PROSTITUTE_LOW_RESTRICTED_PASSENGER"));
PED::SET_PED_IN_VEHICLE_CONTEXT(l_3212, MISC::GET_HASH_KEY("MISS_FAMILY1_JIMMY_SIT"));
PED::SET_PED_IN_VEHICLE_CONTEXT(l_3212, MISC::GET_HASH_KEY("MISS_FAMILY1_JIMMY_SIT_REAR"));
PED::SET_PED_IN_VEHICLE_CONTEXT(l_95, MISC::GET_HASH_KEY("MISS_FAMILY2_JIMMY_BICYCLE"));
PED::SET_PED_IN_VEHICLE_CONTEXT(num3, MISC::GET_HASH_KEY("MISSFBI2_MICHAEL_DRIVEBY"));
PED::SET_PED_IN_VEHICLE_CONTEXT(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("MISS_ARMENIAN3_FRANKLIN_TENSE"));
PED::SET_PED_IN_VEHICLE_CONTEXT(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("MISSFBI5_TREVOR_DRIVING"));
]]
function natives.PED.SET_PED_IN_VEHICLE_CONTEXT(--[[Ped]] ped, --[[Hash]] context) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_IN_VEHICLE_CONTEXT' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(context) == "number", "Arg #2 (context) must be a number.")

	local result = native_call(0x530071295899A8C6, ped, context)
end
natives.ped.set_ped_in_vehicle_context = natives.PED.SET_PED_IN_VEHICLE_CONTEXT

function natives.PED.RESET_PED_IN_VEHICLE_CONTEXT(--[[Ped]] ped) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.RESET_PED_IN_VEHICLE_CONTEXT' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x22EF8FF8778030EB, ped)
end
natives.ped.reset_ped_in_vehicle_context = natives.PED.RESET_PED_IN_VEHICLE_CONTEXT

--[[
Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
]]
function natives.PED.IS_SCRIPTED_SCENARIO_PED_USING_CONDITIONAL_ANIM(--[[Ped]] ped, --[[const char*]] animDict, --[[const char*]] anim) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_SCRIPTED_SCENARIO_PED_USING_CONDITIONAL_ANIM' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(animDict) == "string", "Arg #2 (animDict) must be a string.")
	assert(type(anim) == "string", "Arg #3 (anim) must be a string.")

	local result = native_call(0x6EC47A344923E1ED, ped, animDict, anim)
	return result:__tointeger() ~= 0
end
natives.ped.is_scripted_scenario_ped_using_conditional_anim = natives.PED.IS_SCRIPTED_SCENARIO_PED_USING_CONDITIONAL_ANIM

--[[
Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json

Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json
]]
function natives.PED.SET_PED_ALTERNATE_WALK_ANIM(--[[Ped]] ped, --[[const char*]] animDict, --[[const char*]] animName, --[[float]] p3, --[[BOOL]] p4) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_ALTERNATE_WALK_ANIM' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(animDict) == "string", "Arg #2 (animDict) must be a string.")
	assert(type(animName) == "string", "Arg #3 (animName) must be a string.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "boolean", "Arg #5 (p4) must be a boolean.")

	local result = native_call(0x6C60394CB4F75E9A, ped, animDict, animName, p3, p4)
end
natives.ped.set_ped_alternate_walk_anim = natives.PED.SET_PED_ALTERNATE_WALK_ANIM

function natives.PED.CLEAR_PED_ALTERNATE_WALK_ANIM(--[[Ped]] ped, --[[float]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.CLEAR_PED_ALTERNATE_WALK_ANIM' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x8844BBFCE30AA9E9, ped, p1)
end
natives.ped.clear_ped_alternate_walk_anim = natives.PED.CLEAR_PED_ALTERNATE_WALK_ANIM

--[[
stance:
0 = idle
1 = walk
2 = running

p5 = usually set to true

Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json

Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json
]]
function natives.PED.SET_PED_ALTERNATE_MOVEMENT_ANIM(--[[Ped]] ped, --[[int]] stance, --[[const char*]] animDictionary, --[[const char*]] animationName, --[[float]] p4, --[[BOOL]] p5) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_ALTERNATE_MOVEMENT_ANIM' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(stance) == "number", "Arg #2 (stance) must be a number.")
	assert(type(animDictionary) == "string", "Arg #3 (animDictionary) must be a string.")
	assert(type(animationName) == "string", "Arg #4 (animationName) must be a string.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "boolean", "Arg #6 (p5) must be a boolean.")

	local result = native_call(0x90A43CC281FFAB46, ped, stance, animDictionary, animationName, p4, p5)
end
natives.ped.set_ped_alternate_movement_anim = natives.PED.SET_PED_ALTERNATE_MOVEMENT_ANIM

function natives.PED.CLEAR_PED_ALTERNATE_MOVEMENT_ANIM(--[[Ped]] ped, --[[int]] stance, --[[float]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.CLEAR_PED_ALTERNATE_MOVEMENT_ANIM' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(stance) == "number", "Arg #2 (stance) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0xD8D19675ED5FBDCE, ped, stance, p2)
end
natives.ped.clear_ped_alternate_movement_anim = natives.PED.CLEAR_PED_ALTERNATE_MOVEMENT_ANIM

--[[
From the scripts:
PED::SET_PED_GESTURE_GROUP(PLAYER::PLAYER_PED_ID(),
"ANIM_GROUP_GESTURE_MISS_FRA0");
PED::SET_PED_GESTURE_GROUP(PLAYER::PLAYER_PED_ID(),
"ANIM_GROUP_GESTURE_MISS_DocksSetup1");
]]
function natives.PED.SET_PED_GESTURE_GROUP(--[[Ped]] ped, --[[const char*]] animGroupGesture) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_GESTURE_GROUP' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(animGroupGesture) == "string", "Arg #2 (animGroupGesture) must be a string.")

	local result = native_call(0xDDF803377F94AAA8, ped, animGroupGesture)
end
natives.ped.set_ped_gesture_group = natives.PED.SET_PED_GESTURE_GROUP

--[[
Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
]]
function natives.PED.GET_ANIM_INITIAL_OFFSET_POSITION(--[[const char*]] animDict, --[[const char*]] animName, --[[float]] x, --[[float]] y, --[[float]] z, --[[float]] xRot, --[[float]] yRot, --[[float]] zRot, --[[float]] p8, --[[int]] p9) -- Returns Vector3
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_ANIM_INITIAL_OFFSET_POSITION' due to disabled trusted mode")

	assert(type(animDict) == "string", "Arg #1 (animDict) must be a string.")
	assert(type(animName) == "string", "Arg #2 (animName) must be a string.")
	assert(type(x) == "number", "Arg #3 (x) must be a number.")
	assert(type(y) == "number", "Arg #4 (y) must be a number.")
	assert(type(z) == "number", "Arg #5 (z) must be a number.")
	assert(type(xRot) == "number", "Arg #6 (xRot) must be a number.")
	assert(type(yRot) == "number", "Arg #7 (yRot) must be a number.")
	assert(type(zRot) == "number", "Arg #8 (zRot) must be a number.")
	assert(type(p8) == "number", "Arg #9 (p8) must be a number.")
	assert(type(p9) == "number", "Arg #10 (p9) must be a number.")

	local result = native_call(0xBE22B26DD764C040, animDict, animName, x, y, z, xRot, yRot, zRot, p8, p9)
	return result:__tov3()
end
natives.ped.get_anim_initial_offset_position = natives.PED.GET_ANIM_INITIAL_OFFSET_POSITION

--[[
Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
]]
function natives.PED.GET_ANIM_INITIAL_OFFSET_ROTATION(--[[const char*]] animDict, --[[const char*]] animName, --[[float]] x, --[[float]] y, --[[float]] z, --[[float]] xRot, --[[float]] yRot, --[[float]] zRot, --[[float]] p8, --[[int]] p9) -- Returns Vector3
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_ANIM_INITIAL_OFFSET_ROTATION' due to disabled trusted mode")

	assert(type(animDict) == "string", "Arg #1 (animDict) must be a string.")
	assert(type(animName) == "string", "Arg #2 (animName) must be a string.")
	assert(type(x) == "number", "Arg #3 (x) must be a number.")
	assert(type(y) == "number", "Arg #4 (y) must be a number.")
	assert(type(z) == "number", "Arg #5 (z) must be a number.")
	assert(type(xRot) == "number", "Arg #6 (xRot) must be a number.")
	assert(type(yRot) == "number", "Arg #7 (yRot) must be a number.")
	assert(type(zRot) == "number", "Arg #8 (zRot) must be a number.")
	assert(type(p8) == "number", "Arg #9 (p8) must be a number.")
	assert(type(p9) == "number", "Arg #10 (p9) must be a number.")

	local result = native_call(0x4B805E6046EE9E47, animDict, animName, x, y, z, xRot, yRot, zRot, p8, p9)
	return result:__tov3()
end
natives.ped.get_anim_initial_offset_rotation = natives.PED.GET_ANIM_INITIAL_OFFSET_ROTATION

--[[
Ids
0 - Head
1 - Beard
2 - Hair
3 - Torso
4 - Legs
5 - Hands
6 - Foot
7 - ------
8 - Accessories 1
9 - Accessories 2
10- Decals
11 - Auxiliary parts for torso
]]
function natives.PED.GET_PED_DRAWABLE_VARIATION(--[[Ped]] ped, --[[int]] componentId) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_PED_DRAWABLE_VARIATION' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(componentId) == "number", "Arg #2 (componentId) must be a number.")

	local result = native_call(0x67F3780DD425D4FC, ped, componentId)
	return result:__tointeger()
end
natives.ped.get_ped_drawable_variation = natives.PED.GET_PED_DRAWABLE_VARIATION

--[[
List of component/props ID
gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
]]
function natives.PED.GET_NUMBER_OF_PED_DRAWABLE_VARIATIONS(--[[Ped]] ped, --[[int]] componentId) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_NUMBER_OF_PED_DRAWABLE_VARIATIONS' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(componentId) == "number", "Arg #2 (componentId) must be a number.")

	local result = native_call(0x27561561732A7842, ped, componentId)
	return result:__tointeger()
end
natives.ped.get_number_of_ped_drawable_variations = natives.PED.GET_NUMBER_OF_PED_DRAWABLE_VARIATIONS

--[[
List of component/props ID
gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
]]
function natives.PED.GET_PED_TEXTURE_VARIATION(--[[Ped]] ped, --[[int]] componentId) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_PED_TEXTURE_VARIATION' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(componentId) == "number", "Arg #2 (componentId) must be a number.")

	local result = native_call(0x04A355E041E004E6, ped, componentId)
	return result:__tointeger()
end
natives.ped.get_ped_texture_variation = natives.PED.GET_PED_TEXTURE_VARIATION

--[[
List of component/props ID
gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
]]
function natives.PED.GET_NUMBER_OF_PED_TEXTURE_VARIATIONS(--[[Ped]] ped, --[[int]] componentId, --[[int]] drawableId) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_NUMBER_OF_PED_TEXTURE_VARIATIONS' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(componentId) == "number", "Arg #2 (componentId) must be a number.")
	assert(type(drawableId) == "number", "Arg #3 (drawableId) must be a number.")

	local result = native_call(0x8F7156A3142A6BAD, ped, componentId, drawableId)
	return result:__tointeger()
end
natives.ped.get_number_of_ped_texture_variations = natives.PED.GET_NUMBER_OF_PED_TEXTURE_VARIATIONS

--[[
List of component/props ID
gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
]]
function natives.PED.GET_NUMBER_OF_PED_PROP_DRAWABLE_VARIATIONS(--[[Ped]] ped, --[[int]] propId) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_NUMBER_OF_PED_PROP_DRAWABLE_VARIATIONS' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(propId) == "number", "Arg #2 (propId) must be a number.")

	local result = native_call(0x5FAF9754E789FB47, ped, propId)
	return result:__tointeger()
end
natives.ped.get_number_of_ped_prop_drawable_variations = natives.PED.GET_NUMBER_OF_PED_PROP_DRAWABLE_VARIATIONS

--[[
Need to check behavior when drawableId = -1

- Doofy.Ass
Why this function doesn't work and return nill value?
GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS(PLAYER.PLAYER_PED_ID(), 0, 5)

tick: scripts/addins/menu_execute.lua:51: attempt to call field 'GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS' (a nil value)


List of component/props ID
gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
]]
function natives.PED.GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS(--[[Ped]] ped, --[[int]] propId, --[[int]] drawableId) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(propId) == "number", "Arg #2 (propId) must be a number.")
	assert(type(drawableId) == "number", "Arg #3 (drawableId) must be a number.")

	local result = native_call(0xA6E7F1CEB523E171, ped, propId, drawableId)
	return result:__tointeger()
end
natives.ped.get_number_of_ped_prop_texture_variations = natives.PED.GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS

--[[
List of component/props ID
gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
]]
function natives.PED.GET_PED_PALETTE_VARIATION(--[[Ped]] ped, --[[int]] componentId) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_PED_PALETTE_VARIATION' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(componentId) == "number", "Arg #2 (componentId) must be a number.")

	local result = native_call(0xE3DD5F2A84B42281, ped, componentId)
	return result:__tointeger()
end
natives.ped.get_ped_palette_variation = natives.PED.GET_PED_PALETTE_VARIATION

function natives.PED.GET_MP_OUTFIT_DATA_FROM_METADATA(--[[Any*]] p0, --[[Any*]] p1) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_MP_OUTFIT_DATA_FROM_METADATA' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")
	assert(type(p1) == "userdata", "Arg #2 (p1) must be a userdata.")

	local result = native_call(0x9E30E91FB03A2CAF, p0, p1)
	return result:__tointeger() ~= 0
end
natives.ped.get_mp_outfit_data_from_metadata = natives.PED.GET_MP_OUTFIT_DATA_FROM_METADATA

function natives.PED.GET_FM_MALE_SHOP_PED_APPAREL_ITEM_INDEX(--[[Any]] p0) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_FM_MALE_SHOP_PED_APPAREL_ITEM_INDEX' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x1E77FA7A62EE6C4C, p0)
	return result:__tointeger()
end
natives.ped.get_fm_male_shop_ped_apparel_item_index = natives.PED.GET_FM_MALE_SHOP_PED_APPAREL_ITEM_INDEX

function natives.PED.GET_FM_FEMALE_SHOP_PED_APPAREL_ITEM_INDEX(--[[Any]] p0) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_FM_FEMALE_SHOP_PED_APPAREL_ITEM_INDEX' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xF033419D1B81FAE8, p0)
	return result:__tointeger()
end
natives.ped.get_fm_female_shop_ped_apparel_item_index = natives.PED.GET_FM_FEMALE_SHOP_PED_APPAREL_ITEM_INDEX

--[[
Checks if the component variation is valid, this works great for randomizing components using loops.

List of component/props ID
gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html

Full list of ped components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedComponentVariations.json
]]
function natives.PED.IS_PED_COMPONENT_VARIATION_VALID(--[[Ped]] ped, --[[int]] componentId, --[[int]] drawableId, --[[int]] textureId) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_COMPONENT_VARIATION_VALID' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(componentId) == "number", "Arg #2 (componentId) must be a number.")
	assert(type(drawableId) == "number", "Arg #3 (drawableId) must be a number.")
	assert(type(textureId) == "number", "Arg #4 (textureId) must be a number.")

	local result = native_call(0xE825F6B6CEA7671D, ped, componentId, drawableId, textureId)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_component_variation_valid = natives.PED.IS_PED_COMPONENT_VARIATION_VALID

--[[
paletteId: 0 to 3.

componentId:
enum ePedVarComp
{
	PV_COMP_INVALID = -1,
	PV_COMP_HEAD,
	PV_COMP_BERD,
	PV_COMP_HAIR,
	PV_COMP_UPPR,
	PV_COMP_LOWR,
	PV_COMP_HAND,
	PV_COMP_FEET,
	PV_COMP_TEEF,
	PV_COMP_ACCS,
	PV_COMP_TASK,
	PV_COMP_DECL,
	PV_COMP_JBIB,
	PV_COMP_MAX
};

Examples: https://gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html

Full list of ped components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedComponentVariations.json
]]
function natives.PED.SET_PED_COMPONENT_VARIATION(--[[Ped]] ped, --[[int]] componentId, --[[int]] drawableId, --[[int]] textureId, --[[int]] paletteId) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_COMPONENT_VARIATION' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(componentId) == "number", "Arg #2 (componentId) must be a number.")
	assert(type(drawableId) == "number", "Arg #3 (drawableId) must be a number.")
	assert(type(textureId) == "number", "Arg #4 (textureId) must be a number.")
	assert(type(paletteId) == "number", "Arg #5 (paletteId) must be a number.")

	local result = native_call(0x262B14F48D29DE80, ped, componentId, drawableId, textureId, paletteId)
end
natives.ped.set_ped_component_variation = natives.PED.SET_PED_COMPONENT_VARIATION

--[[
p1 is always 0 in R* scripts.

List of component/props ID
gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
]]
function natives.PED.SET_PED_RANDOM_COMPONENT_VARIATION(--[[Ped]] ped, --[[int]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_RANDOM_COMPONENT_VARIATION' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xC8A9481A01E63C28, ped, p1)
end
natives.ped.set_ped_random_component_variation = natives.PED.SET_PED_RANDOM_COMPONENT_VARIATION

--[[
List of component/props ID
gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
]]
function natives.PED.SET_PED_RANDOM_PROPS(--[[Ped]] ped) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_RANDOM_PROPS' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0xC44AA05345C992C6, ped)
end
natives.ped.set_ped_random_props = natives.PED.SET_PED_RANDOM_PROPS

--[[
Sets Ped Default Clothes
]]
function natives.PED.SET_PED_DEFAULT_COMPONENT_VARIATION(--[[Ped]] ped) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_DEFAULT_COMPONENT_VARIATION' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x45EEE61580806D63, ped)
end
natives.ped.set_ped_default_component_variation = natives.PED.SET_PED_DEFAULT_COMPONENT_VARIATION

function natives.PED.SET_PED_BLEND_FROM_PARENTS(--[[Ped]] ped, --[[Any]] p1, --[[Any]] p2, --[[float]] p3, --[[float]] p4) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_BLEND_FROM_PARENTS' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")

	local result = native_call(0x137BBD05230DB22D, ped, p1, p2, p3, p4)
end
natives.ped.set_ped_blend_from_parents = natives.PED.SET_PED_BLEND_FROM_PARENTS

--[[
The "shape" parameters control the shape of the ped's face. The "skin" parameters control the skin tone. ShapeMix and skinMix control how much the first and second IDs contribute,(typically mother and father.) ThirdMix overrides the others in favor of the third IDs. IsParent is set for "children" of the player character's grandparents during old-gen character creation. It has unknown effect otherwise.

The IDs start at zero and go Male Non-DLC, Female Non-DLC, Male DLC, and Female DLC.

!!!Can someone add working example for this???

try this:
       headBlendData headData;
       GET_PED_HEAD_BLEND_DATA(PLAYER_PED_ID(), &headData);

       SET_PED_HEAD_BLEND_DATA(PLAYER_PED_ID(), headData.shapeFirst, headData.shapeSecond, headData.shapeThird, headData.skinFirst, headData.skinSecond
          , headData.skinThird, headData.shapeMix, headData.skinMix, headData.skinThird, 0);


For more info please refer to this topic. 
gtaforums.com/topic/858970-all-gtao-face-ids-pedset-ped-head-blend-data-explained
]]
function natives.PED.SET_PED_HEAD_BLEND_DATA(--[[Ped]] ped, --[[int]] shapeFirstID, --[[int]] shapeSecondID, --[[int]] shapeThirdID, --[[int]] skinFirstID, --[[int]] skinSecondID, --[[int]] skinThirdID, --[[float]] shapeMix, --[[float]] skinMix, --[[float]] thirdMix, --[[BOOL]] isParent) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_HEAD_BLEND_DATA' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(shapeFirstID) == "number", "Arg #2 (shapeFirstID) must be a number.")
	assert(type(shapeSecondID) == "number", "Arg #3 (shapeSecondID) must be a number.")
	assert(type(shapeThirdID) == "number", "Arg #4 (shapeThirdID) must be a number.")
	assert(type(skinFirstID) == "number", "Arg #5 (skinFirstID) must be a number.")
	assert(type(skinSecondID) == "number", "Arg #6 (skinSecondID) must be a number.")
	assert(type(skinThirdID) == "number", "Arg #7 (skinThirdID) must be a number.")
	assert(type(shapeMix) == "number", "Arg #8 (shapeMix) must be a number.")
	assert(type(skinMix) == "number", "Arg #9 (skinMix) must be a number.")
	assert(type(thirdMix) == "number", "Arg #10 (thirdMix) must be a number.")
	assert(type(isParent) == "boolean", "Arg #11 (isParent) must be a boolean.")

	local result = native_call(0x9414E18B9434C2FE, ped, shapeFirstID, shapeSecondID, shapeThirdID, skinFirstID, skinSecondID, skinThirdID, shapeMix, skinMix, thirdMix, isParent)
end
natives.ped.set_ped_head_blend_data = natives.PED.SET_PED_HEAD_BLEND_DATA

--[[
The pointer is to a padded struct that matches the arguments to SET_PED_HEAD_BLEND_DATA(...). There are 4 bytes of padding after each field.
pass this struct in the second parameter 
struct headBlendData
{
    int shapeFirst;
    int padding1;
    int shapeSecond;
    int padding2;
    int shapeThird;
    int padding3;
    int skinFirst;
    int padding4;
    int skinSecond;
    int padding5;
    int skinThird;
    int padding6;
    float shapeMix;
    int padding7;
    float skinMix;
    int padding8;
    float thirdMix;
    int padding9;
    bool isParent;
};
]]
function natives.PED.GET_PED_HEAD_BLEND_DATA(--[[Ped]] ped, --[[Any*]] headBlendData) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_PED_HEAD_BLEND_DATA' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(headBlendData) == "userdata", "Arg #2 (headBlendData) must be a userdata.")

	local result = native_call(0x2746BD9D88C5C5D0, ped, headBlendData)
	return result:__tointeger() ~= 0
end
natives.ped.get_ped_head_blend_data = natives.PED.GET_PED_HEAD_BLEND_DATA

--[[
See SET_PED_HEAD_BLEND_DATA().
]]
function natives.PED.UPDATE_PED_HEAD_BLEND_DATA(--[[Ped]] ped, --[[float]] shapeMix, --[[float]] skinMix, --[[float]] thirdMix) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.UPDATE_PED_HEAD_BLEND_DATA' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(shapeMix) == "number", "Arg #2 (shapeMix) must be a number.")
	assert(type(skinMix) == "number", "Arg #3 (skinMix) must be a number.")
	assert(type(thirdMix) == "number", "Arg #4 (thirdMix) must be a number.")

	local result = native_call(0x723538F61C647C5A, ped, shapeMix, skinMix, thirdMix)
end
natives.ped.update_ped_head_blend_data = natives.PED.UPDATE_PED_HEAD_BLEND_DATA

--[[
Used for freemode (online) characters.

For some reason, the scripts use a rounded float for the index.
Indexes:
1. black
2. very light blue/green
3. dark blue
4. brown
5. darker brown
6. light brown
7. blue
8. light blue
9. pink
10. yellow
11. purple
12. black
13. dark green
14. light brown
15. yellow/black pattern
16. light colored spiral pattern
17. shiny red
18. shiny half blue/half red
19. half black/half light blue
20. white/red perimter
21. green snake
22. red snake
23. dark blue snake
24. dark yellow
25. bright yellow
26. all black
28. red small pupil
29. devil blue/black
30. white small pupil
31. glossed over
]]
function natives.PED.SET_HEAD_BLEND_EYE_COLOR(--[[Ped]] ped, --[[int]] index) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_HEAD_BLEND_EYE_COLOR' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(index) == "number", "Arg #2 (index) must be a number.")

	local result = native_call(0x50B56988B170AFDF, ped, index)
end
natives.ped.set_head_blend_eye_color = natives.PED.SET_HEAD_BLEND_EYE_COLOR

--[[
A getter for _SET_PED_EYE_COLOR. Returns -1 if fails to get.
]]
function natives.PED.GET_HEAD_BLEND_EYE_COLOR(--[[Ped]] ped) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_HEAD_BLEND_EYE_COLOR' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x76BBA2CEE66D47E9, ped)
	return result:__tointeger()
end
natives.ped.get_head_blend_eye_color = natives.PED.GET_HEAD_BLEND_EYE_COLOR

--[[
OverlayID ranges from 0 to 12, index from 0 to _GET_NUM_OVERLAY_VALUES(overlayID)-1, and opacity from 0.0 to 1.0. 

overlayID       Part                  Index, to disable
0               Blemishes             0 - 23, 255
1               Facial Hair           0 - 28, 255
2               Eyebrows              0 - 33, 255
3               Ageing                0 - 14, 255
4               Makeup                0 - 74, 255
5               Blush                 0 - 6, 255
6               Complexion            0 - 11, 255
7               Sun Damage            0 - 10, 255
8               Lipstick              0 - 9, 255
9               Moles/Freckles        0 - 17, 255
10              Chest Hair            0 - 16, 255
11              Body Blemishes        0 - 11, 255
12              Add Body Blemishes    0 - 1, 255
]]
function natives.PED.SET_PED_HEAD_OVERLAY(--[[Ped]] ped, --[[int]] overlayID, --[[int]] index, --[[float]] opacity) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_HEAD_OVERLAY' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(overlayID) == "number", "Arg #2 (overlayID) must be a number.")
	assert(type(index) == "number", "Arg #3 (index) must be a number.")
	assert(type(opacity) == "number", "Arg #4 (opacity) must be a number.")

	local result = native_call(0x48F44967FA05CC1E, ped, overlayID, index, opacity)
end
natives.ped.set_ped_head_overlay = natives.PED.SET_PED_HEAD_OVERLAY

--[[
Likely a char, if that overlay is not set, e.i. "None" option, returns 255;

This might be the once removed native GET_PED_HEAD_OVERLAY.
]]
function natives.PED.GET_PED_HEAD_OVERLAY(--[[Ped]] ped, --[[int]] overlayID) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_PED_HEAD_OVERLAY' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(overlayID) == "number", "Arg #2 (overlayID) must be a number.")

	local result = native_call(0xA60EF3B6461A4D43, ped, overlayID)
	return result:__tointeger()
end
natives.ped.get_ped_head_overlay = natives.PED.GET_PED_HEAD_OVERLAY

--[[
Used with freemode (online) characters.
]]
function natives.PED.GET_PED_HEAD_OVERLAY_NUM(--[[int]] overlayID) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_PED_HEAD_OVERLAY_NUM' due to disabled trusted mode")

	assert(type(overlayID) == "number", "Arg #1 (overlayID) must be a number.")

	local result = native_call(0xCF1CE768BB43480E, overlayID)
	return result:__tointeger()
end
natives.ped.get_ped_head_overlay_num = natives.PED.GET_PED_HEAD_OVERLAY_NUM

--[[
Used for freemode (online) characters.

ColorType is 1 for eyebrows, beards, and chest hair; 2 for blush and lipstick; and 0 otherwise, though not called in those cases.

Called after SET_PED_HEAD_OVERLAY().
]]
function natives.PED.SET_PED_HEAD_OVERLAY_TINT(--[[Ped]] ped, --[[int]] overlayID, --[[int]] colorType, --[[int]] colorID, --[[int]] secondColorID) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_HEAD_OVERLAY_TINT' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(overlayID) == "number", "Arg #2 (overlayID) must be a number.")
	assert(type(colorType) == "number", "Arg #3 (colorType) must be a number.")
	assert(type(colorID) == "number", "Arg #4 (colorID) must be a number.")
	assert(type(secondColorID) == "number", "Arg #5 (secondColorID) must be a number.")

	local result = native_call(0x497BF74A7B9CB952, ped, overlayID, colorType, colorID, secondColorID)
end
natives.ped.set_ped_head_overlay_tint = natives.PED.SET_PED_HEAD_OVERLAY_TINT

--[[
Used for freemode (online) characters.
]]
function natives.PED.SET_PED_HAIR_TINT(--[[Ped]] ped, --[[int]] colorID, --[[int]] highlightColorID) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_HAIR_TINT' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(colorID) == "number", "Arg #2 (colorID) must be a number.")
	assert(type(highlightColorID) == "number", "Arg #3 (highlightColorID) must be a number.")

	local result = native_call(0x4CFFC65454C93A49, ped, colorID, highlightColorID)
end
natives.ped.set_ped_hair_tint = natives.PED.SET_PED_HAIR_TINT

--[[
Used for freemode (online) characters.
]]
function natives.PED.GET_NUM_PED_HAIR_TINTS() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_NUM_PED_HAIR_TINTS' due to disabled trusted mode")

	local result = native_call(0xE5C0CF872C2AD150)
	return result:__tointeger()
end
natives.ped.get_num_ped_hair_tints = natives.PED.GET_NUM_PED_HAIR_TINTS

function natives.PED.GET_NUM_PED_MAKEUP_TINTS() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_NUM_PED_MAKEUP_TINTS' due to disabled trusted mode")

	local result = native_call(0xD1F7CA1535D22818)
	return result:__tointeger()
end
natives.ped.get_num_ped_makeup_tints = natives.PED.GET_NUM_PED_MAKEUP_TINTS

--[[
Input: Haircolor index, value between 0 and 63 (inclusive).
Output: RGB values for the haircolor specified in the input.

This is used with the hair color swatches scaleform.
Use `_0x013E5CFC38CD5387` to get the makeup colors.
]]
function natives.PED.GET_PED_HAIR_TINT_COLOR(--[[int]] hairColorIndex, --[[int*]] outR, --[[int*]] outG, --[[int*]] outB) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_PED_HAIR_TINT_COLOR' due to disabled trusted mode")

	assert(type(hairColorIndex) == "number", "Arg #1 (hairColorIndex) must be a number.")
	assert(type(outR) == "userdata", "Arg #2 (outR) must be a userdata.")
	assert(type(outG) == "userdata", "Arg #3 (outG) must be a userdata.")
	assert(type(outB) == "userdata", "Arg #4 (outB) must be a userdata.")

	local result = native_call(0x4852FC386E2E1BB5, hairColorIndex, outR, outG, outB)
end
natives.ped.get_ped_hair_tint_color = natives.PED.GET_PED_HAIR_TINT_COLOR

--[[
Input: Makeup color index, value between 0 and 63 (inclusive).
Output: RGB values for the makeup color specified in the input.

This is used with the makeup color swatches scaleform.
Use `_0x4852FC386E2E1BB5` to get the hair colors.
]]
function natives.PED.GET_PED_MAKEUP_TINT_COLOR(--[[int]] makeupColorIndex, --[[int*]] outR, --[[int*]] outG, --[[int*]] outB) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_PED_MAKEUP_TINT_COLOR' due to disabled trusted mode")

	assert(type(makeupColorIndex) == "number", "Arg #1 (makeupColorIndex) must be a number.")
	assert(type(outR) == "userdata", "Arg #2 (outR) must be a userdata.")
	assert(type(outG) == "userdata", "Arg #3 (outG) must be a userdata.")
	assert(type(outB) == "userdata", "Arg #4 (outB) must be a userdata.")

	local result = native_call(0x013E5CFC38CD5387, makeupColorIndex, outR, outG, outB)
end
natives.ped.get_ped_makeup_tint_color = natives.PED.GET_PED_MAKEUP_TINT_COLOR

function natives.PED.IS_PED_HAIR_TINT_FOR_CREATOR(--[[int]] colorId) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_HAIR_TINT_FOR_CREATOR' due to disabled trusted mode")

	assert(type(colorId) == "number", "Arg #1 (colorId) must be a number.")

	local result = native_call(0xED6D8E27A43B8CDE, colorId)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_hair_tint_for_creator = natives.PED.IS_PED_HAIR_TINT_FOR_CREATOR

function natives.PED.GET_DEFAULT_SECONDARY_TINT_FOR_CREATOR(--[[int]] colorId) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_DEFAULT_SECONDARY_TINT_FOR_CREATOR' due to disabled trusted mode")

	assert(type(colorId) == "number", "Arg #1 (colorId) must be a number.")

	local result = native_call(0xEA9960D07DADCF10, colorId)
	return result:__tointeger()
end
natives.ped.get_default_secondary_tint_for_creator = natives.PED.GET_DEFAULT_SECONDARY_TINT_FOR_CREATOR

function natives.PED.IS_PED_LIPSTICK_TINT_FOR_CREATOR(--[[int]] colorId) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_LIPSTICK_TINT_FOR_CREATOR' due to disabled trusted mode")

	assert(type(colorId) == "number", "Arg #1 (colorId) must be a number.")

	local result = native_call(0x3E802F11FBE27674, colorId)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_lipstick_tint_for_creator = natives.PED.IS_PED_LIPSTICK_TINT_FOR_CREATOR

function natives.PED.IS_PED_BLUSH_TINT_FOR_CREATOR(--[[int]] colorId) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_BLUSH_TINT_FOR_CREATOR' due to disabled trusted mode")

	assert(type(colorId) == "number", "Arg #1 (colorId) must be a number.")

	local result = native_call(0xF41B5D290C99A3D6, colorId)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_blush_tint_for_creator = natives.PED.IS_PED_BLUSH_TINT_FOR_CREATOR

function natives.PED.IS_PED_HAIR_TINT_FOR_BARBER(--[[int]] colorID) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_HAIR_TINT_FOR_BARBER' due to disabled trusted mode")

	assert(type(colorID) == "number", "Arg #1 (colorID) must be a number.")

	local result = native_call(0xE0D36E5D9E99CC21, colorID)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_hair_tint_for_barber = natives.PED.IS_PED_HAIR_TINT_FOR_BARBER

function natives.PED.GET_DEFAULT_SECONDARY_TINT_FOR_BARBER(--[[int]] colorID) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_DEFAULT_SECONDARY_TINT_FOR_BARBER' due to disabled trusted mode")

	assert(type(colorID) == "number", "Arg #1 (colorID) must be a number.")

	local result = native_call(0xAAA6A3698A69E048, colorID)
	return result:__tointeger()
end
natives.ped.get_default_secondary_tint_for_barber = natives.PED.GET_DEFAULT_SECONDARY_TINT_FOR_BARBER

function natives.PED.IS_PED_LIPSTICK_TINT_FOR_BARBER(--[[int]] colorID) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_LIPSTICK_TINT_FOR_BARBER' due to disabled trusted mode")

	assert(type(colorID) == "number", "Arg #1 (colorID) must be a number.")

	local result = native_call(0x0525A2C2562F3CD4, colorID)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_lipstick_tint_for_barber = natives.PED.IS_PED_LIPSTICK_TINT_FOR_BARBER

function natives.PED.IS_PED_BLUSH_TINT_FOR_BARBER(--[[int]] colorID) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_BLUSH_TINT_FOR_BARBER' due to disabled trusted mode")

	assert(type(colorID) == "number", "Arg #1 (colorID) must be a number.")

	local result = native_call(0x604E810189EE3A59, colorID)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_blush_tint_for_barber = natives.PED.IS_PED_BLUSH_TINT_FOR_BARBER

function natives.PED.IS_PED_BLUSH_FACEPAINT_TINT_FOR_BARBER(--[[int]] colorId) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_BLUSH_FACEPAINT_TINT_FOR_BARBER' due to disabled trusted mode")

	assert(type(colorId) == "number", "Arg #1 (colorId) must be a number.")

	local result = native_call(0x09E7ECA981D9B210, colorId)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_blush_facepaint_tint_for_barber = natives.PED.IS_PED_BLUSH_FACEPAINT_TINT_FOR_BARBER

function natives.PED.GET_TINT_INDEX_FOR_LAST_GEN_HAIR_TEXTURE(--[[Hash]] modelHash, --[[int]] drawableId, --[[int]] textureId) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_TINT_INDEX_FOR_LAST_GEN_HAIR_TEXTURE' due to disabled trusted mode")

	assert(type(modelHash) == "number", "Arg #1 (modelHash) must be a number.")
	assert(type(drawableId) == "number", "Arg #2 (drawableId) must be a number.")
	assert(type(textureId) == "number", "Arg #3 (textureId) must be a number.")

	local result = native_call(0xC56FBF2F228E1DAC, modelHash, drawableId, textureId)
	return result:__tointeger()
end
natives.ped.get_tint_index_for_last_gen_hair_texture = natives.PED.GET_TINT_INDEX_FOR_LAST_GEN_HAIR_TEXTURE

--[[
Sets the various freemode face features, e.g. nose length, chin shape. Scale ranges from -1.0 to 1.0.



0 - Nose Width (Thin/Wide)

1 - Nose Peak (Up/Down)

2 - Nose Length (Long/Short)

3 - Nose Bone Curveness (Crooked/Curved)

4 - Nose Tip (Up/Down)

5 - Nose Bone Twist (Left/Right)

6 - Eyebrow (Up/Down)

7 - Eyebrow (In/Out)

8 - Cheek Bones (Up/Down)

9 - Cheek Sideways Bone Size (In/Out)

10 - Cheek Bones Width (Puffed/Gaunt)

11 - Eye Opening (Both) (Wide/Squinted)

12 - Lip Thickness (Both) (Fat/Thin)

13 - Jaw Bone Width (Narrow/Wide)

14 - Jaw Bone Shape (Round/Square)

15 - Chin Bone (Up/Down)

16 - Chin Bone Length (In/Out or Backward/Forward)

17 - Chin Bone Shape (Pointed/Square)

18 - Chin Hole (Chin Bum)

19 - Neck Thickness (Thin/Thick)
]]
function natives.PED.SET_PED_MICRO_MORPH(--[[Ped]] ped, --[[int]] index, --[[float]] scale) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_MICRO_MORPH' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(index) == "number", "Arg #2 (index) must be a number.")
	assert(type(scale) == "number", "Arg #3 (scale) must be a number.")

	local result = native_call(0x71A5C1DBA060049E, ped, index, scale)
end
natives.ped.set_ped_micro_morph = natives.PED.SET_PED_MICRO_MORPH

function natives.PED.HAS_PED_HEAD_BLEND_FINISHED(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.HAS_PED_HEAD_BLEND_FINISHED' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x654CD0A825161131, ped)
	return result:__tointeger() ~= 0
end
natives.ped.has_ped_head_blend_finished = natives.PED.HAS_PED_HEAD_BLEND_FINISHED

function natives.PED.FINALIZE_HEAD_BLEND(--[[Ped]] ped) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.FINALIZE_HEAD_BLEND' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x4668D80430D6C299, ped)
end
natives.ped.finalize_head_blend = natives.PED.FINALIZE_HEAD_BLEND

--[[
p4 seems to vary from 0 to 3.
Preview: https://gfycat.com/MaleRareAmazonparrot
]]
function natives.PED.SET_HEAD_BLEND_PALETTE_COLOR(--[[Ped]] ped, --[[int]] r, --[[int]] g, --[[int]] b, --[[int]] id) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_HEAD_BLEND_PALETTE_COLOR' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(r) == "number", "Arg #2 (r) must be a number.")
	assert(type(g) == "number", "Arg #3 (g) must be a number.")
	assert(type(b) == "number", "Arg #4 (b) must be a number.")
	assert(type(id) == "number", "Arg #5 (id) must be a number.")

	local result = native_call(0xCC9682B8951C5229, ped, r, g, b, id)
end
natives.ped.set_head_blend_palette_color = natives.PED.SET_HEAD_BLEND_PALETTE_COLOR

function natives.PED.DISABLE_HEAD_BLEND_PALETTE_COLOR(--[[Ped]] ped) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.DISABLE_HEAD_BLEND_PALETTE_COLOR' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0xA21C118553BBDF02, ped)
end
natives.ped.disable_head_blend_palette_color = natives.PED.DISABLE_HEAD_BLEND_PALETTE_COLOR

--[[
Type equals 0 for male non-dlc, 1 for female non-dlc, 2 for male dlc, and 3 for female dlc.

Used when calling SET_PED_HEAD_BLEND_DATA.
]]
function natives.PED.GET_PED_HEAD_BLEND_FIRST_INDEX(--[[int]] type) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_PED_HEAD_BLEND_FIRST_INDEX' due to disabled trusted mode")

	assert(type(type) == "number", "Arg #1 (type) must be a number.")

	local result = native_call(0x68D353AB88B97E0C, type)
	return result:__tointeger()
end
natives.ped.get_ped_head_blend_first_index = natives.PED.GET_PED_HEAD_BLEND_FIRST_INDEX

--[[
Type equals 0 for male non-dlc, 1 for female non-dlc, 2 for male dlc, and 3 for female dlc.
]]
function natives.PED.GET_PED_HEAD_BLEND_NUM_HEADS(--[[int]] type) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_PED_HEAD_BLEND_NUM_HEADS' due to disabled trusted mode")

	assert(type(type) == "number", "Arg #1 (type) must be a number.")

	local result = native_call(0x5EF37013A6539C9D, type)
	return result:__tointeger()
end
natives.ped.get_ped_head_blend_num_heads = natives.PED.GET_PED_HEAD_BLEND_NUM_HEADS

--[[
from extreme3.c4
PED::_39D55A620FCB6A3A(PLAYER::PLAYER_PED_ID(), 8, PED::GET_PED_DRAWABLE_VARIATION(PLAYER::PLAYER_PED_ID(), 8), PED::GET_PED_TEXTURE_VARIATION(PLAYER::PLAYER_PED_ID(), 8));

p1 is probably componentId
]]
function natives.PED.SET_PED_PRELOAD_VARIATION_DATA(--[[Ped]] ped, --[[int]] slot, --[[int]] drawableId, --[[int]] textureId) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_PRELOAD_VARIATION_DATA' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(slot) == "number", "Arg #2 (slot) must be a number.")
	assert(type(drawableId) == "number", "Arg #3 (drawableId) must be a number.")
	assert(type(textureId) == "number", "Arg #4 (textureId) must be a number.")

	local result = native_call(0x39D55A620FCB6A3A, ped, slot, drawableId, textureId)
	return result:__tointeger()
end
natives.ped.set_ped_preload_variation_data = natives.PED.SET_PED_PRELOAD_VARIATION_DATA

function natives.PED.HAS_PED_PRELOAD_VARIATION_DATA_FINISHED(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.HAS_PED_PRELOAD_VARIATION_DATA_FINISHED' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x66680A92700F43DF, ped)
	return result:__tointeger() ~= 0
end
natives.ped.has_ped_preload_variation_data_finished = natives.PED.HAS_PED_PRELOAD_VARIATION_DATA_FINISHED

function natives.PED.RELEASE_PED_PRELOAD_VARIATION_DATA(--[[Ped]] ped) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.RELEASE_PED_PRELOAD_VARIATION_DATA' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x5AAB586FFEC0FD96, ped)
end
natives.ped.release_ped_preload_variation_data = natives.PED.RELEASE_PED_PRELOAD_VARIATION_DATA

--[[
List of component/props ID
gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
]]
function natives.PED.SET_PED_PRELOAD_PROP_DATA(--[[Ped]] ped, --[[int]] componentId, --[[int]] drawableId, --[[int]] TextureId) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_PRELOAD_PROP_DATA' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(componentId) == "number", "Arg #2 (componentId) must be a number.")
	assert(type(drawableId) == "number", "Arg #3 (drawableId) must be a number.")
	assert(type(TextureId) == "number", "Arg #4 (TextureId) must be a number.")

	local result = native_call(0x2B16A3BFF1FBCE49, ped, componentId, drawableId, TextureId)
	return result:__tointeger() ~= 0
end
natives.ped.set_ped_preload_prop_data = natives.PED.SET_PED_PRELOAD_PROP_DATA

function natives.PED.HAS_PED_PRELOAD_PROP_DATA_FINISHED(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.HAS_PED_PRELOAD_PROP_DATA_FINISHED' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x784002A632822099, ped)
	return result:__tointeger() ~= 0
end
natives.ped.has_ped_preload_prop_data_finished = natives.PED.HAS_PED_PRELOAD_PROP_DATA_FINISHED

function natives.PED.RELEASE_PED_PRELOAD_PROP_DATA(--[[Ped]] ped) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.RELEASE_PED_PRELOAD_PROP_DATA' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0xF79F9DEF0AADE61A, ped)
end
natives.ped.release_ped_preload_prop_data = natives.PED.RELEASE_PED_PRELOAD_PROP_DATA

--[[
List of component/props ID
gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
]]
function natives.PED.GET_PED_PROP_INDEX(--[[Ped]] ped, --[[int]] componentId) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_PED_PROP_INDEX' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(componentId) == "number", "Arg #2 (componentId) must be a number.")

	local result = native_call(0x898CC20EA75BACD8, ped, componentId)
	return result:__tointeger()
end
natives.ped.get_ped_prop_index = natives.PED.GET_PED_PROP_INDEX

--[[
ComponentId can be set to various things based on what category you're wanting to set
enum PedPropsData
{
    PED_PROP_HATS = 0,
    PED_PROP_GLASSES = 1,
 PED_PROP_EARS = 2,
    PED_PROP_WATCHES = 3,
};
Usage: SET_PED_PROP_INDEX(playerPed, PED_PROP_HATS, GET_NUMBER_OF_PED_PROP_DRAWABLE_VARIATIONS(playerPed, PED_PROP_HATS), GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS(playerPed, PED_PROP_HATS, 0), TRUE);

List of component/props ID
gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
]]
function natives.PED.SET_PED_PROP_INDEX(--[[Ped]] ped, --[[int]] componentId, --[[int]] drawableId, --[[int]] TextureId, --[[BOOL]] attach) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_PROP_INDEX' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(componentId) == "number", "Arg #2 (componentId) must be a number.")
	assert(type(drawableId) == "number", "Arg #3 (drawableId) must be a number.")
	assert(type(TextureId) == "number", "Arg #4 (TextureId) must be a number.")
	assert(type(attach) == "boolean", "Arg #5 (attach) must be a boolean.")

	local result = native_call(0x93376B65A266EB5F, ped, componentId, drawableId, TextureId, attach)
end
natives.ped.set_ped_prop_index = natives.PED.SET_PED_PROP_INDEX

--[[
List of component/props ID
gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
]]
function natives.PED.KNOCK_OFF_PED_PROP(--[[Ped]] ped, --[[BOOL]] p1, --[[BOOL]] p2, --[[BOOL]] p3, --[[BOOL]] p4) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.KNOCK_OFF_PED_PROP' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")
	assert(type(p3) == "boolean", "Arg #4 (p3) must be a boolean.")
	assert(type(p4) == "boolean", "Arg #5 (p4) must be a boolean.")

	local result = native_call(0x6FD7816A36615F48, ped, p1, p2, p3, p4)
end
natives.ped.knock_off_ped_prop = natives.PED.KNOCK_OFF_PED_PROP

--[[
List of component/props ID
gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
]]
function natives.PED.CLEAR_PED_PROP(--[[Ped]] ped, --[[int]] propId) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.CLEAR_PED_PROP' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(propId) == "number", "Arg #2 (propId) must be a number.")

	local result = native_call(0x0943E5B8E078E76E, ped, propId)
end
natives.ped.clear_ped_prop = natives.PED.CLEAR_PED_PROP

--[[
List of component/props ID
gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
]]
function natives.PED.CLEAR_ALL_PED_PROPS(--[[Ped]] ped) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.CLEAR_ALL_PED_PROPS' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0xCD8A7537A9B52F06, ped)
end
natives.ped.clear_all_ped_props = natives.PED.CLEAR_ALL_PED_PROPS

function natives.PED.DROP_AMBIENT_PROP(--[[Ped]] ped) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.DROP_AMBIENT_PROP' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0xAFF4710E2A0A6C12, ped)
end
natives.ped.drop_ambient_prop = natives.PED.DROP_AMBIENT_PROP

--[[
List of component/props ID
gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
]]
function natives.PED.GET_PED_PROP_TEXTURE_INDEX(--[[Ped]] ped, --[[int]] componentId) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_PED_PROP_TEXTURE_INDEX' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(componentId) == "number", "Arg #2 (componentId) must be a number.")

	local result = native_call(0xE131A28626F81AB2, ped, componentId)
	return result:__tointeger()
end
natives.ped.get_ped_prop_texture_index = natives.PED.GET_PED_PROP_TEXTURE_INDEX

function natives.PED.CLEAR_PED_PARACHUTE_PACK_VARIATION(--[[Ped]] ped) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.CLEAR_PED_PARACHUTE_PACK_VARIATION' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x1280804F7CFD2D6C, ped)
end
natives.ped.clear_ped_parachute_pack_variation = natives.PED.CLEAR_PED_PARACHUTE_PACK_VARIATION

--[[
This native sets a scuba mask for freemode models and an oxygen bottle for player_* models. It works on freemode and player_* models.
]]
function natives.PED.SET_PED_SCUBA_GEAR_VARIATION(--[[Ped]] ped) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_SCUBA_GEAR_VARIATION' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x36C6984C3ED0C911, ped)
end
natives.ped.set_ped_scuba_gear_variation = natives.PED.SET_PED_SCUBA_GEAR_VARIATION

--[[
Removes the scubagear (for mp male: component id: 8, drawableId: 123, textureId: any) from peds. Does not play the 'remove scuba gear' animation, but instantly removes it.
]]
function natives.PED.CLEAR_PED_SCUBA_GEAR_VARIATION(--[[Ped]] ped) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.CLEAR_PED_SCUBA_GEAR_VARIATION' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0xB50EB4CCB29704AC, ped)
end
natives.ped.clear_ped_scuba_gear_variation = natives.PED.CLEAR_PED_SCUBA_GEAR_VARIATION

function natives.PED.IS_USING_PED_SCUBA_GEAR_VARIATION(--[[Any]] p0) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_USING_PED_SCUBA_GEAR_VARIATION' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xFEC9A3B1820F3331, p0)
	return result:__tointeger() ~= 0
end
natives.ped.is_using_ped_scuba_gear_variation = natives.PED.IS_USING_PED_SCUBA_GEAR_VARIATION

--[[
works with TASK::TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS to make a ped completely oblivious to all events going on around him
]]
function natives.PED.SET_BLOCKING_OF_NON_TEMPORARY_EVENTS(--[[Ped]] ped, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_BLOCKING_OF_NON_TEMPORARY_EVENTS' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x9F8AA94D6D97DBF4, ped, toggle)
end
natives.ped.set_blocking_of_non_temporary_events = natives.PED.SET_BLOCKING_OF_NON_TEMPORARY_EVENTS

function natives.PED.SET_PED_BOUNDS_ORIENTATION(--[[Ped]] ped, --[[float]] p1, --[[float]] p2, --[[float]] p3, --[[float]] p4, --[[float]] p5) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_BOUNDS_ORIENTATION' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")

	local result = native_call(0x4F5F651ACCC9C4CF, ped, p1, p2, p3, p4, p5)
end
natives.ped.set_ped_bounds_orientation = natives.PED.SET_PED_BOUNDS_ORIENTATION

--[[
PED::REGISTER_TARGET(l_216, PLAYER::PLAYER_PED_ID()); from re_prisonbreak.txt.

l_216 = RECSBRobber1
]]
function natives.PED.REGISTER_TARGET(--[[Ped]] ped, --[[Ped]] target) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.REGISTER_TARGET' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(target) == "number", "Arg #2 (target) must be a number.")

	local result = native_call(0x2F25D9AEFA34FBA2, ped, target)
end
natives.ped.register_target = natives.PED.REGISTER_TARGET

--[[
Based on TASK_COMBAT_HATED_TARGETS_AROUND_PED, the parameters are likely similar (PedHandle, and area to attack in).
]]
function natives.PED.REGISTER_HATED_TARGETS_AROUND_PED(--[[Ped]] ped, --[[float]] radius) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.REGISTER_HATED_TARGETS_AROUND_PED' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(radius) == "number", "Arg #2 (radius) must be a number.")

	local result = native_call(0x9222F300BF8354FE, ped, radius)
end
natives.ped.register_hated_targets_around_ped = natives.PED.REGISTER_HATED_TARGETS_AROUND_PED

--[[
Gets a random ped in the x/y/zRadius near the x/y/z coordinates passed. 

Ped Types:
Any = -1
Player = 1
Male = 4 
Female = 5 
Cop = 6
Human = 26
SWAT = 27 
Animal = 28
Army = 29
]]
function natives.PED.GET_RANDOM_PED_AT_COORD(--[[float]] x, --[[float]] y, --[[float]] z, --[[float]] xRadius, --[[float]] yRadius, --[[float]] zRadius, --[[int]] pedType) -- Returns Ped
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_RANDOM_PED_AT_COORD' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(xRadius) == "number", "Arg #4 (xRadius) must be a number.")
	assert(type(yRadius) == "number", "Arg #5 (yRadius) must be a number.")
	assert(type(zRadius) == "number", "Arg #6 (zRadius) must be a number.")
	assert(type(pedType) == "number", "Arg #7 (pedType) must be a number.")

	local result = native_call(0x876046A8E3A4B71C, x, y, z, xRadius, yRadius, zRadius, pedType)
	return result:__tointeger()
end
natives.ped.get_random_ped_at_coord = natives.PED.GET_RANDOM_PED_AT_COORD

--[[
Gets the closest ped in a radius.

Ped Types:
Any ped = -1
Player = 1
Male = 4 
Female = 5 
Cop = 6
Human = 26
SWAT = 27 
Animal = 28
Army = 29

------------------
P4 P5 P7 P8
1  0  x  x  = return nearest walking Ped
1  x  0  x  = return nearest walking Ped
x  1  1  x  = return Ped you are using
0  0  x  x  = no effect
0  x  0  x  = no effect

x = can be 1 or 0. Does not have any obvious changes.

This function does not return ped who is:
1. Standing still
2. Driving
3. Fleeing
4. Attacking

This function only work if the ped is:
1. walking normally.
2. waiting to cross a road.

Note: PED::GET_PED_NEARBY_PEDS works for more peds.
]]
function natives.PED.GET_CLOSEST_PED(--[[float]] x, --[[float]] y, --[[float]] z, --[[float]] radius, --[[BOOL]] p4, --[[BOOL]] p5, --[[Ped*]] outPed, --[[BOOL]] p7, --[[BOOL]] p8, --[[int]] pedType) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_CLOSEST_PED' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(radius) == "number", "Arg #4 (radius) must be a number.")
	assert(type(p4) == "boolean", "Arg #5 (p4) must be a boolean.")
	assert(type(p5) == "boolean", "Arg #6 (p5) must be a boolean.")
	assert(type(outPed) == "userdata", "Arg #7 (outPed) must be a userdata.")
	assert(type(p7) == "boolean", "Arg #8 (p7) must be a boolean.")
	assert(type(p8) == "boolean", "Arg #9 (p8) must be a boolean.")
	assert(type(pedType) == "number", "Arg #10 (pedType) must be a number.")

	local result = native_call(0xC33AB876A77F8164, x, y, z, radius, p4, p5, outPed, p7, p8, pedType)
	return result:__tointeger() ~= 0
end
natives.ped.get_closest_ped = natives.PED.GET_CLOSEST_PED

--[[
Sets a value indicating whether scenario peds should be returned by the next call to a command that returns peds. Eg. GET_CLOSEST_PED.
]]
function natives.PED.SET_SCENARIO_PEDS_TO_BE_RETURNED_BY_NEXT_COMMAND(--[[BOOL]] value) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_SCENARIO_PEDS_TO_BE_RETURNED_BY_NEXT_COMMAND' due to disabled trusted mode")

	assert(type(value) == "boolean", "Arg #1 (value) must be a boolean.")

	local result = native_call(0x14F19A8782C8071E, value)
end
natives.ped.set_scenario_peds_to_be_returned_by_next_command = natives.PED.SET_SCENARIO_PEDS_TO_BE_RETURNED_BY_NEXT_COMMAND

function natives.PED.GET_CAN_PED_BE_GRABBED_BY_SCRIPT(--[[Ped]] ped, --[[BOOL]] p1, --[[BOOL]] p2, --[[BOOL]] p3, --[[BOOL]] p4, --[[BOOL]] p5, --[[BOOL]] p6, --[[BOOL]] p7, --[[Any]] p8) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_CAN_PED_BE_GRABBED_BY_SCRIPT' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")
	assert(type(p3) == "boolean", "Arg #4 (p3) must be a boolean.")
	assert(type(p4) == "boolean", "Arg #5 (p4) must be a boolean.")
	assert(type(p5) == "boolean", "Arg #6 (p5) must be a boolean.")
	assert(type(p6) == "boolean", "Arg #7 (p6) must be a boolean.")
	assert(type(p7) == "boolean", "Arg #8 (p7) must be a boolean.")
	assert(type(p8) == "number", "Arg #9 (p8) must be a number.")

	local result = native_call(0x03EA03AF85A85CB7, ped, p1, p2, p3, p4, p5, p6, p7, p8)
	return result:__tointeger() ~= 0
end
natives.ped.get_can_ped_be_grabbed_by_script = natives.PED.GET_CAN_PED_BE_GRABBED_BY_SCRIPT

--[[
Scripts use 0.2, 0.5 and 1.0. Value must be >= 0.0 && <= 1.0
]]
function natives.PED.SET_DRIVER_RACING_MODIFIER(--[[Ped]] driver, --[[float]] modifier) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_DRIVER_RACING_MODIFIER' due to disabled trusted mode")

	assert(type(driver) == "number", "Arg #1 (driver) must be a number.")
	assert(type(modifier) == "number", "Arg #2 (modifier) must be a number.")

	local result = native_call(0xDED5AF5A0EA4B297, driver, modifier)
end
natives.ped.set_driver_racing_modifier = natives.PED.SET_DRIVER_RACING_MODIFIER

--[[
The function specifically verifies the value is equal to, or less than 1.0f. If it is greater than 1.0f, the function does nothing at all.
]]
function natives.PED.SET_DRIVER_ABILITY(--[[Ped]] driver, --[[float]] ability) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_DRIVER_ABILITY' due to disabled trusted mode")

	assert(type(driver) == "number", "Arg #1 (driver) must be a number.")
	assert(type(ability) == "number", "Arg #2 (ability) must be a number.")

	local result = native_call(0xB195FFA8042FC5C3, driver, ability)
end
natives.ped.set_driver_ability = natives.PED.SET_DRIVER_ABILITY

--[[
range 0.0f - 1.0f
]]
function natives.PED.SET_DRIVER_AGGRESSIVENESS(--[[Ped]] driver, --[[float]] aggressiveness) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_DRIVER_AGGRESSIVENESS' due to disabled trusted mode")

	assert(type(driver) == "number", "Arg #1 (driver) must be a number.")
	assert(type(aggressiveness) == "number", "Arg #2 (aggressiveness) must be a number.")

	local result = native_call(0xA731F608CA104E3C, driver, aggressiveness)
end
natives.ped.set_driver_aggressiveness = natives.PED.SET_DRIVER_AGGRESSIVENESS

--[[
Prevents the ped from going limp.

[Example: Can prevent peds from falling when standing on moving vehicles.]
]]
function natives.PED.CAN_PED_RAGDOLL(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.CAN_PED_RAGDOLL' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x128F79EDCECE4FD5, ped)
	return result:__tointeger() ~= 0
end
natives.ped.can_ped_ragdoll = natives.PED.CAN_PED_RAGDOLL

--[[
p4/p5: Unused in TU27
Ragdoll Types:
**0**: CTaskNMRelax
**1**: CTaskNMScriptControl: Hardcoded not to work in networked environments.
**Else**: CTaskNMBalance
time1- Time(ms) Ped is in ragdoll mode; only applies to ragdoll types 0 and not 1.

time2- Unknown time, in milliseconds

ragdollType-
0 : Normal ragdoll
1 : Falls with stiff legs/body
2 : Narrow leg stumble(may not fall)
3 : Wide leg stumble(may not fall)

p4, p5, p6- No idea. In R*'s scripts they are usually either "true, true, false" or "false, false, false".




EDIT 3/11/16: unclear what 'mircoseconds' mean-- a microsecond is 1000x a ms, so time2 must be 1000x time1?  more testing needed.  -sob

Edit Mar 21, 2017: removed part about time2 being the microseconds version of time1. this just isn't correct. time2 is in milliseconds, and time1 and time2 don't seem to be connected in any way.
]]
function natives.PED.SET_PED_TO_RAGDOLL(--[[Ped]] ped, --[[int]] time1, --[[int]] time2, --[[int]] ragdollType, --[[BOOL]] p4, --[[BOOL]] p5, --[[BOOL]] p6) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_TO_RAGDOLL' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(time1) == "number", "Arg #2 (time1) must be a number.")
	assert(type(time2) == "number", "Arg #3 (time2) must be a number.")
	assert(type(ragdollType) == "number", "Arg #4 (ragdollType) must be a number.")
	assert(type(p4) == "boolean", "Arg #5 (p4) must be a boolean.")
	assert(type(p5) == "boolean", "Arg #6 (p5) must be a boolean.")
	assert(type(p6) == "boolean", "Arg #7 (p6) must be a boolean.")

	local result = native_call(0xAE99FB955581844A, ped, time1, time2, ragdollType, p4, p5, p6)
	return result:__tointeger() ~= 0
end
natives.ped.set_ped_to_ragdoll = natives.PED.SET_PED_TO_RAGDOLL

--[[
Return variable is never used in R*'s scripts.

Not sure what p2 does. It seems like it would be a time judging by it's usage in R*'s scripts, but didn't seem to affect anything in my testings.

x, y, and z are coordinates, most likely to where the ped will fall.

p7 is probably the force of the fall, but untested, so I left the variable name the same.

p8 to p13 are always 0f in R*'s scripts.

(Simplified) Example of the usage of the function from R*'s scripts:
ped::set_ped_to_ragdoll_with_fall(ped, 1500, 2000, 1, -entity::get_entity_forward_vector(ped), 1f, 0f, 0f, 0f, 0f, 0f, 0f);

]]
function natives.PED.SET_PED_TO_RAGDOLL_WITH_FALL(--[[Ped]] ped, --[[int]] time, --[[int]] p2, --[[int]] ragdollType, --[[float]] x, --[[float]] y, --[[float]] z, --[[float]] p7, --[[float]] p8, --[[float]] p9, --[[float]] p10, --[[float]] p11, --[[float]] p12, --[[float]] p13) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_TO_RAGDOLL_WITH_FALL' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(time) == "number", "Arg #2 (time) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(ragdollType) == "number", "Arg #4 (ragdollType) must be a number.")
	assert(type(x) == "number", "Arg #5 (x) must be a number.")
	assert(type(y) == "number", "Arg #6 (y) must be a number.")
	assert(type(z) == "number", "Arg #7 (z) must be a number.")
	assert(type(p7) == "number", "Arg #8 (p7) must be a number.")
	assert(type(p8) == "number", "Arg #9 (p8) must be a number.")
	assert(type(p9) == "number", "Arg #10 (p9) must be a number.")
	assert(type(p10) == "number", "Arg #11 (p10) must be a number.")
	assert(type(p11) == "number", "Arg #12 (p11) must be a number.")
	assert(type(p12) == "number", "Arg #13 (p12) must be a number.")
	assert(type(p13) == "number", "Arg #14 (p13) must be a number.")

	local result = native_call(0xD76632D99E4966C8, ped, time, p2, ragdollType, x, y, z, p7, p8, p9, p10, p11, p12, p13)
	return result:__tointeger() ~= 0
end
natives.ped.set_ped_to_ragdoll_with_fall = natives.PED.SET_PED_TO_RAGDOLL_WITH_FALL

--[[
Causes Ped to ragdoll on collision with any object (e.g Running into trashcan). If applied to player you will sometimes trip on the sidewalk.
]]
function natives.PED.SET_PED_RAGDOLL_ON_COLLISION(--[[Ped]] ped, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_RAGDOLL_ON_COLLISION' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xF0A4F1BBF4FA7497, ped, toggle)
end
natives.ped.set_ped_ragdoll_on_collision = natives.PED.SET_PED_RAGDOLL_ON_COLLISION

--[[
If the ped handle passed through the parenthesis is in a ragdoll state this will return true.
]]
function natives.PED.IS_PED_RAGDOLL(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_RAGDOLL' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x47E4E977581C5B55, ped)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_ragdoll = natives.PED.IS_PED_RAGDOLL

function natives.PED.IS_PED_RUNNING_RAGDOLL_TASK(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_RUNNING_RAGDOLL_TASK' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0xE3B6097CC25AA69E, ped)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_running_ragdoll_task = natives.PED.IS_PED_RUNNING_RAGDOLL_TASK

function natives.PED.SET_PED_RAGDOLL_FORCE_FALL(--[[Ped]] ped) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_RAGDOLL_FORCE_FALL' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x01F6594B923B9251, ped)
end
natives.ped.set_ped_ragdoll_force_fall = natives.PED.SET_PED_RAGDOLL_FORCE_FALL

function natives.PED.RESET_PED_RAGDOLL_TIMER(--[[Ped]] ped) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.RESET_PED_RAGDOLL_TIMER' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x9FA4664CF62E47E8, ped)
end
natives.ped.reset_ped_ragdoll_timer = natives.PED.RESET_PED_RAGDOLL_TIMER

function natives.PED.SET_PED_CAN_RAGDOLL(--[[Ped]] ped, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_CAN_RAGDOLL' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xB128377056A54E2A, ped, toggle)
end
natives.ped.set_ped_can_ragdoll = natives.PED.SET_PED_CAN_RAGDOLL

function natives.PED.IS_PED_RUNNING_MELEE_TASK(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_RUNNING_MELEE_TASK' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0xD1871251F3B5ACD7, ped)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_running_melee_task = natives.PED.IS_PED_RUNNING_MELEE_TASK

function natives.PED.IS_PED_RUNNING_MOBILE_PHONE_TASK(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_RUNNING_MOBILE_PHONE_TASK' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x2AFE52F782F25775, ped)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_running_mobile_phone_task = natives.PED.IS_PED_RUNNING_MOBILE_PHONE_TASK

function natives.PED.IS_MOBILE_PHONE_TO_PED_EAR(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_MOBILE_PHONE_TO_PED_EAR' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0xA3F3564A5B3646C0, ped)
	return result:__tointeger() ~= 0
end
natives.ped.is_mobile_phone_to_ped_ear = natives.PED.IS_MOBILE_PHONE_TO_PED_EAR

--[[
Works for both player and peds, but some flags don't seem to work for the player (1, for example)

1 - Blocks ragdolling when shot.
2 - Blocks ragdolling when hit by a vehicle. The ped still might play a falling animation.
4 - Blocks ragdolling when set on fire.

-----------------------------------------------------------------------

There seem to be 26 flags
]]
function natives.PED.SET_RAGDOLL_BLOCKING_FLAGS(--[[Ped]] ped, --[[int]] flags) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_RAGDOLL_BLOCKING_FLAGS' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(flags) == "number", "Arg #2 (flags) must be a number.")

	local result = native_call(0x26695EC767728D84, ped, flags)
end
natives.ped.set_ragdoll_blocking_flags = natives.PED.SET_RAGDOLL_BLOCKING_FLAGS

--[[
There seem to be 26 flags
]]
function natives.PED.CLEAR_RAGDOLL_BLOCKING_FLAGS(--[[Ped]] ped, --[[int]] flags) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.CLEAR_RAGDOLL_BLOCKING_FLAGS' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(flags) == "number", "Arg #2 (flags) must be a number.")

	local result = native_call(0xD86D101FCFD00A4B, ped, flags)
end
natives.ped.clear_ragdoll_blocking_flags = natives.PED.CLEAR_RAGDOLL_BLOCKING_FLAGS

function natives.PED.SET_PED_ANGLED_DEFENSIVE_AREA(--[[Ped]] ped, --[[float]] p1, --[[float]] p2, --[[float]] p3, --[[float]] p4, --[[float]] p5, --[[float]] p6, --[[float]] p7, --[[BOOL]] p8, --[[BOOL]] p9) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_ANGLED_DEFENSIVE_AREA' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")
	assert(type(p6) == "number", "Arg #7 (p6) must be a number.")
	assert(type(p7) == "number", "Arg #8 (p7) must be a number.")
	assert(type(p8) == "boolean", "Arg #9 (p8) must be a boolean.")
	assert(type(p9) == "boolean", "Arg #10 (p9) must be a boolean.")

	local result = native_call(0xC7F76DF27A5045A1, ped, p1, p2, p3, p4, p5, p6, p7, p8, p9)
end
natives.ped.set_ped_angled_defensive_area = natives.PED.SET_PED_ANGLED_DEFENSIVE_AREA

function natives.PED.SET_PED_SPHERE_DEFENSIVE_AREA(--[[Ped]] ped, --[[float]] x, --[[float]] y, --[[float]] z, --[[float]] radius, --[[BOOL]] p5, --[[BOOL]] p6) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_SPHERE_DEFENSIVE_AREA' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")
	assert(type(radius) == "number", "Arg #5 (radius) must be a number.")
	assert(type(p5) == "boolean", "Arg #6 (p5) must be a boolean.")
	assert(type(p6) == "boolean", "Arg #7 (p6) must be a boolean.")

	local result = native_call(0x9D3151A373974804, ped, x, y, z, radius, p5, p6)
end
natives.ped.set_ped_sphere_defensive_area = natives.PED.SET_PED_SPHERE_DEFENSIVE_AREA

function natives.PED.SET_PED_DEFENSIVE_SPHERE_ATTACHED_TO_PED(--[[Ped]] ped, --[[Ped]] target, --[[float]] xOffset, --[[float]] yOffset, --[[float]] zOffset, --[[float]] radius, --[[BOOL]] p6) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_DEFENSIVE_SPHERE_ATTACHED_TO_PED' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(target) == "number", "Arg #2 (target) must be a number.")
	assert(type(xOffset) == "number", "Arg #3 (xOffset) must be a number.")
	assert(type(yOffset) == "number", "Arg #4 (yOffset) must be a number.")
	assert(type(zOffset) == "number", "Arg #5 (zOffset) must be a number.")
	assert(type(radius) == "number", "Arg #6 (radius) must be a number.")
	assert(type(p6) == "boolean", "Arg #7 (p6) must be a boolean.")

	local result = native_call(0xF9B8F91AAD3B953E, ped, target, xOffset, yOffset, zOffset, radius, p6)
end
natives.ped.set_ped_defensive_sphere_attached_to_ped = natives.PED.SET_PED_DEFENSIVE_SPHERE_ATTACHED_TO_PED

function natives.PED.SET_PED_DEFENSIVE_SPHERE_ATTACHED_TO_VEHICLE(--[[Ped]] ped, --[[Vehicle]] target, --[[float]] xOffset, --[[float]] yOffset, --[[float]] zOffset, --[[float]] radius, --[[BOOL]] p6) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_DEFENSIVE_SPHERE_ATTACHED_TO_VEHICLE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(target) == "number", "Arg #2 (target) must be a number.")
	assert(type(xOffset) == "number", "Arg #3 (xOffset) must be a number.")
	assert(type(yOffset) == "number", "Arg #4 (yOffset) must be a number.")
	assert(type(zOffset) == "number", "Arg #5 (zOffset) must be a number.")
	assert(type(radius) == "number", "Arg #6 (radius) must be a number.")
	assert(type(p6) == "boolean", "Arg #7 (p6) must be a boolean.")

	local result = native_call(0xE4723DB6E736CCFF, ped, target, xOffset, yOffset, zOffset, radius, p6)
end
natives.ped.set_ped_defensive_sphere_attached_to_vehicle = natives.PED.SET_PED_DEFENSIVE_SPHERE_ATTACHED_TO_VEHICLE

function natives.PED.SET_PED_DEFENSIVE_AREA_ATTACHED_TO_PED(--[[Ped]] ped, --[[Ped]] attachPed, --[[float]] p2, --[[float]] p3, --[[float]] p4, --[[float]] p5, --[[float]] p6, --[[float]] p7, --[[float]] p8, --[[BOOL]] p9, --[[BOOL]] p10) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_DEFENSIVE_AREA_ATTACHED_TO_PED' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(attachPed) == "number", "Arg #2 (attachPed) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")
	assert(type(p6) == "number", "Arg #7 (p6) must be a number.")
	assert(type(p7) == "number", "Arg #8 (p7) must be a number.")
	assert(type(p8) == "number", "Arg #9 (p8) must be a number.")
	assert(type(p9) == "boolean", "Arg #10 (p9) must be a boolean.")
	assert(type(p10) == "boolean", "Arg #11 (p10) must be a boolean.")

	local result = native_call(0x4EF47FE21698A8B6, ped, attachPed, p2, p3, p4, p5, p6, p7, p8, p9, p10)
end
natives.ped.set_ped_defensive_area_attached_to_ped = natives.PED.SET_PED_DEFENSIVE_AREA_ATTACHED_TO_PED

function natives.PED.SET_PED_DEFENSIVE_AREA_DIRECTION(--[[Ped]] ped, --[[float]] p1, --[[float]] p2, --[[float]] p3, --[[BOOL]] p4) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_DEFENSIVE_AREA_DIRECTION' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "boolean", "Arg #5 (p4) must be a boolean.")

	local result = native_call(0x413C6C763A4AFFAD, ped, p1, p2, p3, p4)
end
natives.ped.set_ped_defensive_area_direction = natives.PED.SET_PED_DEFENSIVE_AREA_DIRECTION

--[[
Ped will no longer get angry when you stay near him.
]]
function natives.PED.REMOVE_PED_DEFENSIVE_AREA(--[[Ped]] ped, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.REMOVE_PED_DEFENSIVE_AREA' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x74D4E028107450A9, ped, toggle)
end
natives.ped.remove_ped_defensive_area = natives.PED.REMOVE_PED_DEFENSIVE_AREA

function natives.PED.GET_PED_DEFENSIVE_AREA_POSITION(--[[Ped]] ped, --[[BOOL]] p1) -- Returns Vector3
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_PED_DEFENSIVE_AREA_POSITION' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0x3C06B8786DD94CD1, ped, p1)
	return result:__tov3()
end
natives.ped.get_ped_defensive_area_position = natives.PED.GET_PED_DEFENSIVE_AREA_POSITION

function natives.PED.IS_PED_DEFENSIVE_AREA_ACTIVE(--[[Ped]] ped, --[[BOOL]] p1) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_DEFENSIVE_AREA_ACTIVE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0xBA63D9FE45412247, ped, p1)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_defensive_area_active = natives.PED.IS_PED_DEFENSIVE_AREA_ACTIVE

function natives.PED.SET_PED_PREFERRED_COVER_SET(--[[Ped]] ped, --[[Any]] itemSet) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_PREFERRED_COVER_SET' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(itemSet) == "number", "Arg #2 (itemSet) must be a number.")

	local result = native_call(0x8421EB4DA7E391B9, ped, itemSet)
end
natives.ped.set_ped_preferred_cover_set = natives.PED.SET_PED_PREFERRED_COVER_SET

function natives.PED.REMOVE_PED_PREFERRED_COVER_SET(--[[Ped]] ped) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.REMOVE_PED_PREFERRED_COVER_SET' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0xFDDB234CF74073D9, ped)
end
natives.ped.remove_ped_preferred_cover_set = natives.PED.REMOVE_PED_PREFERRED_COVER_SET

--[[
It will revive/cure the injured ped. The condition is ped must not be dead.

Upon setting and converting the health int, found, if health falls below 5, the ped will lay on the ground in pain(Maximum default health is 100).

This function is well suited there.
]]
function natives.PED.REVIVE_INJURED_PED(--[[Ped]] ped) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.REVIVE_INJURED_PED' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x8D8ACD8388CD99CE, ped)
end
natives.ped.revive_injured_ped = natives.PED.REVIVE_INJURED_PED

--[[
This function will simply bring the dead person back to life.

Try not to use it alone, since using this function alone, will make peds fall through ground in hell(well for the most of the times).

Instead, before calling this function, you may want to declare the position, where your Resurrected ped to be spawn at.(For instance, Around 2 floats of Player's current position.) 

Also, disabling any assigned task immediately helped in the number of scenarios, where If you want peds to perform certain decided tasks.
]]
function natives.PED.RESURRECT_PED(--[[Ped]] ped) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.RESURRECT_PED' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x71BC8E838B9C6035, ped)
end
natives.ped.resurrect_ped = natives.PED.RESURRECT_PED

--[[
NOTE: Debugging functions are not present in the retail version of the game.

*untested but char *name could also be a hash for a localized string
]]
function natives.PED.SET_PED_NAME_DEBUG(--[[Ped]] ped, --[[const char*]] name) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_NAME_DEBUG' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(name) == "string", "Arg #2 (name) must be a string.")

	local result = native_call(0x98EFA132A4117BE1, ped, name)
end
natives.ped.set_ped_name_debug = natives.PED.SET_PED_NAME_DEBUG

--[[
Gets the offset the specified ped has moved since the previous tick.

If worldSpace is false, the returned offset is relative to the ped. That is, if the ped has moved 1 meter right and 5 meters forward, it'll return 1,5,0.

If worldSpace is true, the returned offset is relative to the world. That is, if the ped has moved 1 meter on the X axis and 5 meters on the Y axis, it'll return 1,5,0.
]]
function natives.PED.GET_PED_EXTRACTED_DISPLACEMENT(--[[Ped]] ped, --[[BOOL]] worldSpace) -- Returns Vector3
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_PED_EXTRACTED_DISPLACEMENT' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(worldSpace) == "boolean", "Arg #2 (worldSpace) must be a boolean.")

	local result = native_call(0xE0AF41401ADF87E3, ped, worldSpace)
	return result:__tov3()
end
natives.ped.get_ped_extracted_displacement = natives.PED.GET_PED_EXTRACTED_DISPLACEMENT

function natives.PED.SET_PED_DIES_WHEN_INJURED(--[[Ped]] ped, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_DIES_WHEN_INJURED' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x5BA7919BED300023, ped, toggle)
end
natives.ped.set_ped_dies_when_injured = natives.PED.SET_PED_DIES_WHEN_INJURED

function natives.PED.SET_PED_ENABLE_WEAPON_BLOCKING(--[[Ped]] ped, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_ENABLE_WEAPON_BLOCKING' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x97A790315D3831FD, ped, toggle)
end
natives.ped.set_ped_enable_weapon_blocking = natives.PED.SET_PED_ENABLE_WEAPON_BLOCKING

--[[
p1 was always 1 (true).

Kicks the ped from the current vehicle and keeps the rendering-focus on this ped (also disables its collision). If doing this for your player ped, you'll still be able to drive the vehicle.

Actual name begins with 'S'
]]
function natives.PED.SPECIAL_FUNCTION_DO_NOT_USE(--[[Ped]] ped, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SPECIAL_FUNCTION_DO_NOT_USE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0xF9ACF4A08098EA25, ped, p1)
end
natives.ped.special_function_do_not_use = natives.PED.SPECIAL_FUNCTION_DO_NOT_USE

function natives.PED.RESET_PED_VISIBLE_DAMAGE(--[[Ped]] ped) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.RESET_PED_VISIBLE_DAMAGE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x3AC1F7B898F30C05, ped)
end
natives.ped.reset_ped_visible_damage = natives.PED.RESET_PED_VISIBLE_DAMAGE

function natives.PED.APPLY_PED_BLOOD_DAMAGE_BY_ZONE(--[[Ped]] ped, --[[Any]] p1, --[[float]] p2, --[[float]] p3, --[[Any]] p4) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.APPLY_PED_BLOOD_DAMAGE_BY_ZONE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")

	local result = native_call(0x816F6981C60BF53B, ped, p1, p2, p3, p4)
end
natives.ped.apply_ped_blood_damage_by_zone = natives.PED.APPLY_PED_BLOOD_DAMAGE_BY_ZONE

--[[
woundTypes:
- soak_splat
- wound_sheet
- BulletSmall
- BulletLarge
- ShotgunSmall
- ShotgunSmallMonolithic
- ShotgunLarge
- ShotgunLargeMonolithic
- NonFatalHeadshot
- stab
- BasicSlash
- Scripted_Ped_Splash_Back
- BackSplash
]]
function natives.PED.APPLY_PED_BLOOD(--[[Ped]] ped, --[[int]] boneIndex, --[[float]] xRot, --[[float]] yRot, --[[float]] zRot, --[[const char*]] woundType) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.APPLY_PED_BLOOD' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(boneIndex) == "number", "Arg #2 (boneIndex) must be a number.")
	assert(type(xRot) == "number", "Arg #3 (xRot) must be a number.")
	assert(type(yRot) == "number", "Arg #4 (yRot) must be a number.")
	assert(type(zRot) == "number", "Arg #5 (zRot) must be a number.")
	assert(type(woundType) == "string", "Arg #6 (woundType) must be a string.")

	local result = native_call(0x83F7E01C7B769A26, ped, boneIndex, xRot, yRot, zRot, woundType)
end
natives.ped.apply_ped_blood = natives.PED.APPLY_PED_BLOOD

function natives.PED.APPLY_PED_BLOOD_BY_ZONE(--[[Ped]] ped, --[[int]] p1, --[[float]] p2, --[[float]] p3, --[[const char*]] p4) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.APPLY_PED_BLOOD_BY_ZONE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "string", "Arg #5 (p4) must be a string.")

	local result = native_call(0x3311E47B91EDCBBC, ped, p1, p2, p3, p4)
end
natives.ped.apply_ped_blood_by_zone = natives.PED.APPLY_PED_BLOOD_BY_ZONE

function natives.PED.APPLY_PED_BLOOD_SPECIFIC(--[[Ped]] ped, --[[int]] p1, --[[float]] p2, --[[float]] p3, --[[float]] p4, --[[float]] p5, --[[int]] p6, --[[float]] p7, --[[const char*]] p8) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.APPLY_PED_BLOOD_SPECIFIC' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")
	assert(type(p6) == "number", "Arg #7 (p6) must be a number.")
	assert(type(p7) == "number", "Arg #8 (p7) must be a number.")
	assert(type(p8) == "string", "Arg #9 (p8) must be a string.")

	local result = native_call(0xEF0D582CBF2D9B0F, ped, p1, p2, p3, p4, p5, p6, p7, p8)
end
natives.ped.apply_ped_blood_specific = natives.PED.APPLY_PED_BLOOD_SPECIFIC

--[[
enum eDamageZone
{
	DZ_Torso = 0,
	DZ_Head,
	DZ_LeftArm,
	DZ_RightArm,
	DZ_LeftLeg,
	DZ_RightLeg,
};

Decal Names:
scar
blushing
cs_flush_anger
cs_flush_anger_face
bruise
bruise_large
herpes
ArmorBullet
basic_dirt_cloth
basic_dirt_skin
cs_trev1_dirt

APPLY_PED_DAMAGE_DECAL(ped, 1, 0.5f, 0.513f, 0f, 1f, unk, 0, 0, "blushing");
]]
function natives.PED.APPLY_PED_DAMAGE_DECAL(--[[Ped]] ped, --[[int]] damageZone, --[[float]] xOffset, --[[float]] yOffset, --[[float]] heading, --[[float]] scale, --[[float]] alpha, --[[int]] variation, --[[BOOL]] fadeIn, --[[const char*]] decalName) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.APPLY_PED_DAMAGE_DECAL' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(damageZone) == "number", "Arg #2 (damageZone) must be a number.")
	assert(type(xOffset) == "number", "Arg #3 (xOffset) must be a number.")
	assert(type(yOffset) == "number", "Arg #4 (yOffset) must be a number.")
	assert(type(heading) == "number", "Arg #5 (heading) must be a number.")
	assert(type(scale) == "number", "Arg #6 (scale) must be a number.")
	assert(type(alpha) == "number", "Arg #7 (alpha) must be a number.")
	assert(type(variation) == "number", "Arg #8 (variation) must be a number.")
	assert(type(fadeIn) == "boolean", "Arg #9 (fadeIn) must be a boolean.")
	assert(type(decalName) == "string", "Arg #10 (decalName) must be a string.")

	local result = native_call(0x397C38AA7B4A5F83, ped, damageZone, xOffset, yOffset, heading, scale, alpha, variation, fadeIn, decalName)
end
natives.ped.apply_ped_damage_decal = natives.PED.APPLY_PED_DAMAGE_DECAL

--[[
Damage Packs:

"SCR_TrevorTreeBang"
"HOSPITAL_0"
"HOSPITAL_1"
"HOSPITAL_2"
"HOSPITAL_3"
"HOSPITAL_4"
"HOSPITAL_5"
"HOSPITAL_6"
"HOSPITAL_7"
"HOSPITAL_8"
"HOSPITAL_9"
"SCR_Dumpster"
"BigHitByVehicle"
"SCR_Finale_Michael_Face"
"SCR_Franklin_finb"
"SCR_Finale_Michael"
"SCR_Franklin_finb2"
"Explosion_Med"
"SCR_Torture"
"SCR_TracySplash"
"Skin_Melee_0"

Additional damage packs:

gist.github.com/alexguirre/f3f47f75ddcf617f416f3c8a55ae2227
Full list of ped damage packs by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedDamagePacks.json
]]
function natives.PED.APPLY_PED_DAMAGE_PACK(--[[Ped]] ped, --[[const char*]] damagePack, --[[float]] damage, --[[float]] mult) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.APPLY_PED_DAMAGE_PACK' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(damagePack) == "string", "Arg #2 (damagePack) must be a string.")
	assert(type(damage) == "number", "Arg #3 (damage) must be a number.")
	assert(type(mult) == "number", "Arg #4 (mult) must be a number.")

	local result = native_call(0x46DF918788CB093F, ped, damagePack, damage, mult)
end
natives.ped.apply_ped_damage_pack = natives.PED.APPLY_PED_DAMAGE_PACK

function natives.PED.CLEAR_PED_BLOOD_DAMAGE(--[[Ped]] ped) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.CLEAR_PED_BLOOD_DAMAGE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x8FE22675A5A45817, ped)
end
natives.ped.clear_ped_blood_damage = natives.PED.CLEAR_PED_BLOOD_DAMAGE

--[[
Somehow related to changing ped's clothes.
]]
function natives.PED.CLEAR_PED_BLOOD_DAMAGE_BY_ZONE(--[[Ped]] ped, --[[int]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.CLEAR_PED_BLOOD_DAMAGE_BY_ZONE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x56E3B78C5408D9F4, ped, p1)
end
natives.ped.clear_ped_blood_damage_by_zone = natives.PED.CLEAR_PED_BLOOD_DAMAGE_BY_ZONE

function natives.PED.HIDE_PED_BLOOD_DAMAGE_BY_ZONE(--[[Ped]] ped, --[[Any]] p1, --[[BOOL]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.HIDE_PED_BLOOD_DAMAGE_BY_ZONE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")

	local result = native_call(0x62AB793144DE75DC, ped, p1, p2)
end
natives.ped.hide_ped_blood_damage_by_zone = natives.PED.HIDE_PED_BLOOD_DAMAGE_BY_ZONE

--[[
p1: from 0 to 5 in the b617d scripts.
p2: "blushing" and "ALL" found in the b617d scripts.
]]
function natives.PED.CLEAR_PED_DAMAGE_DECAL_BY_ZONE(--[[Ped]] ped, --[[int]] p1, --[[const char*]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.CLEAR_PED_DAMAGE_DECAL_BY_ZONE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "string", "Arg #3 (p2) must be a string.")

	local result = native_call(0x523C79AEEFCC4A2A, ped, p1, p2)
end
natives.ped.clear_ped_damage_decal_by_zone = natives.PED.CLEAR_PED_DAMAGE_DECAL_BY_ZONE

function natives.PED.GET_PED_DECORATIONS_STATE(--[[Ped]] ped) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_PED_DECORATIONS_STATE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x71EAB450D86954A1, ped)
	return result:__tointeger()
end
natives.ped.get_ped_decorations_state = natives.PED.GET_PED_DECORATIONS_STATE

function natives.PED.MARK_PED_DECORATIONS_AS_CLONED_FROM_LOCAL_PLAYER(--[[Ped]] ped, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.MARK_PED_DECORATIONS_AS_CLONED_FROM_LOCAL_PLAYER' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0x2B694AFCF64E6994, ped, p1)
end
natives.ped.mark_ped_decorations_as_cloned_from_local_player = natives.PED.MARK_PED_DECORATIONS_AS_CLONED_FROM_LOCAL_PLAYER

--[[
It clears the wetness of the selected Ped/Player. Clothes have to be wet to notice the difference.
]]
function natives.PED.CLEAR_PED_WETNESS(--[[Ped]] ped) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.CLEAR_PED_WETNESS' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x9C720776DAA43E7E, ped)
end
natives.ped.clear_ped_wetness = natives.PED.CLEAR_PED_WETNESS

--[[
It adds the wetness level to the player clothing/outfit. As if player just got out from water surface.


]]
function natives.PED.SET_PED_WETNESS_HEIGHT(--[[Ped]] ped, --[[float]] height) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_WETNESS_HEIGHT' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(height) == "number", "Arg #2 (height) must be a number.")

	local result = native_call(0x44CB6447D2571AA0, ped, height)
end
natives.ped.set_ped_wetness_height = natives.PED.SET_PED_WETNESS_HEIGHT

--[[
combined with PED::SET_PED_WETNESS_HEIGHT(), this native makes the ped drenched in water up to the height specified in the other function
]]
function natives.PED.SET_PED_WETNESS_ENABLED_THIS_FRAME(--[[Ped]] ped) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_WETNESS_ENABLED_THIS_FRAME' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0xB5485E4907B53019, ped)
end
natives.ped.set_ped_wetness_enabled_this_frame = natives.PED.SET_PED_WETNESS_ENABLED_THIS_FRAME

function natives.PED.CLEAR_PED_ENV_DIRT(--[[Ped]] ped) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.CLEAR_PED_ENV_DIRT' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x6585D955A68452A5, ped)
end
natives.ped.clear_ped_env_dirt = natives.PED.CLEAR_PED_ENV_DIRT

--[[
Sweat is set to 100.0 or 0.0 in the decompiled scripts.
]]
function natives.PED.SET_PED_SWEAT(--[[Ped]] ped, --[[float]] sweat) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_SWEAT' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(sweat) == "number", "Arg #2 (sweat) must be a number.")

	local result = native_call(0x27B0405F59637D1F, ped, sweat)
end
natives.ped.set_ped_sweat = natives.PED.SET_PED_SWEAT

--[[
Applies an Item from a PedDecorationCollection to a ped. These include tattoos and shirt decals.

collection - PedDecorationCollection filename hash
overlay - Item name hash

Example:
Entry inside "mpbeach_overlays.xml" -
<Item>
  <uvPos x="0.500000" y="0.500000" />
  <scale x="0.600000" y="0.500000" />
  <rotation value="0.000000" />
  <nameHash>FM_Hair_Fuzz</nameHash>
  <txdHash>mp_hair_fuzz</txdHash>
  <txtHash>mp_hair_fuzz</txtHash>
  <zone>ZONE_HEAD</zone>
  <type>TYPE_TATTOO</type>
  <faction>FM</faction>
  <garment>All</garment>
  <gender>GENDER_DONTCARE</gender>
  <award />
  <awardLevel />
</Item>

Code:
PED::_0x5F5D1665E352A839(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("mpbeach_overlays"), MISC::GET_HASH_KEY("fm_hair_fuzz"))

Full list of ped overlays / decorations by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedOverlayCollections.json
]]
function natives.PED.ADD_PED_DECORATION_FROM_HASHES(--[[Ped]] ped, --[[Hash]] collection, --[[Hash]] overlay) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.ADD_PED_DECORATION_FROM_HASHES' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(collection) == "number", "Arg #2 (collection) must be a number.")
	assert(type(overlay) == "number", "Arg #3 (overlay) must be a number.")

	local result = native_call(0x5F5D1665E352A839, ped, collection, overlay)
end
natives.ped.add_ped_decoration_from_hashes = natives.PED.ADD_PED_DECORATION_FROM_HASHES

--[[
Full list of ped overlays / decorations by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedOverlayCollections.json
]]
function natives.PED.ADD_PED_DECORATION_FROM_HASHES_IN_CORONA(--[[Ped]] ped, --[[Hash]] collection, --[[Hash]] overlay) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.ADD_PED_DECORATION_FROM_HASHES_IN_CORONA' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(collection) == "number", "Arg #2 (collection) must be a number.")
	assert(type(overlay) == "number", "Arg #3 (overlay) must be a number.")

	local result = native_call(0x5619BFA07CFD7833, ped, collection, overlay)
end
natives.ped.add_ped_decoration_from_hashes_in_corona = natives.PED.ADD_PED_DECORATION_FROM_HASHES_IN_CORONA

--[[
Returns the zoneID for the overlay if it is a member of collection.
enum ePedDecorationZone
{
	ZONE_TORSO = 0,
	ZONE_HEAD = 1,
	ZONE_LEFT_ARM = 2,
	ZONE_RIGHT_ARM = 3,
	ZONE_LEFT_LEG = 4,
	ZONE_RIGHT_LEG = 5,
	ZONE_MEDALS = 6,
	ZONE_INVALID = 7
};

Full list of ped overlays / decorations by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedOverlayCollections.json
]]
function natives.PED.GET_PED_DECORATION_ZONE_FROM_HASHES(--[[Hash]] collection, --[[Hash]] overlay) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_PED_DECORATION_ZONE_FROM_HASHES' due to disabled trusted mode")

	assert(type(collection) == "number", "Arg #1 (collection) must be a number.")
	assert(type(overlay) == "number", "Arg #2 (overlay) must be a number.")

	local result = native_call(0x9FD452BFBE7A7A8B, collection, overlay)
	return result:__tointeger()
end
natives.ped.get_ped_decoration_zone_from_hashes = natives.PED.GET_PED_DECORATION_ZONE_FROM_HASHES

function natives.PED.CLEAR_PED_DECORATIONS(--[[Ped]] ped) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.CLEAR_PED_DECORATIONS' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x0E5173C163976E38, ped)
end
natives.ped.clear_ped_decorations = natives.PED.CLEAR_PED_DECORATIONS

function natives.PED.CLEAR_PED_DECORATIONS_LEAVE_SCARS(--[[Ped]] ped) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.CLEAR_PED_DECORATIONS_LEAVE_SCARS' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0xE3B27E70CEAB9F0C, ped)
end
natives.ped.clear_ped_decorations_leave_scars = natives.PED.CLEAR_PED_DECORATIONS_LEAVE_SCARS

--[[
Despite this function's name, it simply returns whether the specified handle is a Ped.
]]
function natives.PED.WAS_PED_SKELETON_UPDATED(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.WAS_PED_SKELETON_UPDATED' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x11B499C1E0FF8559, ped)
	return result:__tointeger() ~= 0
end
natives.ped.was_ped_skeleton_updated = natives.PED.WAS_PED_SKELETON_UPDATED

--[[
Gets the position of the specified bone of the specified ped.

ped: The ped to get the position of a bone from.
boneId: The ID of the bone to get the position from. This is NOT the index.
offsetX: The X-component of the offset to add to the position relative to the bone's rotation.
offsetY: The Y-component of the offset to add to the position relative to the bone's rotation.
offsetZ: The Z-component of the offset to add to the position relative to the bone's rotation.
]]
function natives.PED.GET_PED_BONE_COORDS(--[[Ped]] ped, --[[int]] boneId, --[[float]] offsetX, --[[float]] offsetY, --[[float]] offsetZ) -- Returns Vector3
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_PED_BONE_COORDS' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(boneId) == "number", "Arg #2 (boneId) must be a number.")
	assert(type(offsetX) == "number", "Arg #3 (offsetX) must be a number.")
	assert(type(offsetY) == "number", "Arg #4 (offsetY) must be a number.")
	assert(type(offsetZ) == "number", "Arg #5 (offsetZ) must be a number.")

	local result = native_call(0x17C07FC640E86B4E, ped, boneId, offsetX, offsetY, offsetZ)
	return result:__tov3()
end
natives.ped.get_ped_bone_coords = natives.PED.GET_PED_BONE_COORDS

--[[
Creates a new NaturalMotion message.

startImmediately: If set to true, the character will perform the message the moment it receives it by GIVE_PED_NM_MESSAGE. If false, the Ped will get the message but won't perform it yet. While it's a boolean value, if negative, the message will not be initialized.
messageId: The ID of the NaturalMotion message.

If a message already exists, this function does nothing. A message exists until the point it has been successfully dispatched by GIVE_PED_NM_MESSAGE.
]]
function natives.PED.CREATE_NM_MESSAGE(--[[BOOL]] startImmediately, --[[int]] messageId) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.CREATE_NM_MESSAGE' due to disabled trusted mode")

	assert(type(startImmediately) == "boolean", "Arg #1 (startImmediately) must be a boolean.")
	assert(type(messageId) == "number", "Arg #2 (messageId) must be a number.")

	local result = native_call(0x418EF2A1BCE56685, startImmediately, messageId)
end
natives.ped.create_nm_message = natives.PED.CREATE_NM_MESSAGE

--[[
Sends the message that was created by a call to CREATE_NM_MESSAGE to the specified Ped.

If a message hasn't been created already, this function does nothing.
If the Ped is not ragdolled with Euphoria enabled, this function does nothing.
The following call can be used to ragdoll the Ped with Euphoria enabled: SET_PED_TO_RAGDOLL(ped, 4000, 5000, 1, 1, 1, 0);

Call order:
SET_PED_TO_RAGDOLL
CREATE_NM_MESSAGE
GIVE_PED_NM_MESSAGE

Multiple messages can be chained. Eg. to make the ped stagger and swing his arms around, the following calls can be made:
SET_PED_TO_RAGDOLL(ped, 4000, 5000, 1, 1, 1, 0);
CREATE_NM_MESSAGE(true, 0); // stopAllBehaviours - Stop all other behaviours, in case the Ped is already doing some Euphoria stuff.
GIVE_PED_NM_MESSAGE(ped); // Dispatch message to Ped.
CREATE_NM_MESSAGE(true, 1151); // staggerFall - Attempt to walk while falling.
GIVE_PED_NM_MESSAGE(ped); // Dispatch message to Ped.
CREATE_NM_MESSAGE(true, 372); // armsWindmill - Swing arms around.
GIVE_PED_NM_MESSAGE(ped); // Dispatch message to Ped.
]]
function natives.PED.GIVE_PED_NM_MESSAGE(--[[Ped]] ped) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GIVE_PED_NM_MESSAGE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0xB158DFCCC56E5C5B, ped)
end
natives.ped.give_ped_nm_message = natives.PED.GIVE_PED_NM_MESSAGE

function natives.PED.ADD_SCENARIO_BLOCKING_AREA(--[[float]] x1, --[[float]] y1, --[[float]] z1, --[[float]] x2, --[[float]] y2, --[[float]] z2, --[[BOOL]] p6, --[[BOOL]] p7, --[[BOOL]] p8, --[[BOOL]] p9) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.ADD_SCENARIO_BLOCKING_AREA' due to disabled trusted mode")

	assert(type(x1) == "number", "Arg #1 (x1) must be a number.")
	assert(type(y1) == "number", "Arg #2 (y1) must be a number.")
	assert(type(z1) == "number", "Arg #3 (z1) must be a number.")
	assert(type(x2) == "number", "Arg #4 (x2) must be a number.")
	assert(type(y2) == "number", "Arg #5 (y2) must be a number.")
	assert(type(z2) == "number", "Arg #6 (z2) must be a number.")
	assert(type(p6) == "boolean", "Arg #7 (p6) must be a boolean.")
	assert(type(p7) == "boolean", "Arg #8 (p7) must be a boolean.")
	assert(type(p8) == "boolean", "Arg #9 (p8) must be a boolean.")
	assert(type(p9) == "boolean", "Arg #10 (p9) must be a boolean.")

	local result = native_call(0x1B5C85C612E5256E, x1, y1, z1, x2, y2, z2, p6, p7, p8, p9)
	return result:__tointeger()
end
natives.ped.add_scenario_blocking_area = natives.PED.ADD_SCENARIO_BLOCKING_AREA

function natives.PED.REMOVE_SCENARIO_BLOCKING_AREAS() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.REMOVE_SCENARIO_BLOCKING_AREAS' due to disabled trusted mode")

	local result = native_call(0xD37401D78A929A49)
end
natives.ped.remove_scenario_blocking_areas = natives.PED.REMOVE_SCENARIO_BLOCKING_AREAS

function natives.PED.REMOVE_SCENARIO_BLOCKING_AREA(--[[Any]] p0, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.REMOVE_SCENARIO_BLOCKING_AREA' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0x31D16B74C6E29D66, p0, p1)
end
natives.ped.remove_scenario_blocking_area = natives.PED.REMOVE_SCENARIO_BLOCKING_AREA

function natives.PED.SET_SCENARIO_PEDS_SPAWN_IN_SPHERE_AREA(--[[float]] x, --[[float]] y, --[[float]] z, --[[float]] range, --[[int]] p4) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_SCENARIO_PEDS_SPAWN_IN_SPHERE_AREA' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(range) == "number", "Arg #4 (range) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")

	local result = native_call(0x28157D43CF600981, x, y, z, range, p4)
end
natives.ped.set_scenario_peds_spawn_in_sphere_area = natives.PED.SET_SCENARIO_PEDS_SPAWN_IN_SPHERE_AREA

function natives.PED.DOES_SCENARIO_BLOCKING_AREA_EXISTS(--[[float]] x1, --[[float]] y1, --[[float]] z1, --[[float]] x2, --[[float]] y2, --[[float]] z2) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.DOES_SCENARIO_BLOCKING_AREA_EXISTS' due to disabled trusted mode")

	assert(type(x1) == "number", "Arg #1 (x1) must be a number.")
	assert(type(y1) == "number", "Arg #2 (y1) must be a number.")
	assert(type(z1) == "number", "Arg #3 (z1) must be a number.")
	assert(type(x2) == "number", "Arg #4 (x2) must be a number.")
	assert(type(y2) == "number", "Arg #5 (y2) must be a number.")
	assert(type(z2) == "number", "Arg #6 (z2) must be a number.")

	local result = native_call(0x8A24B067D175A7BD, x1, y1, z1, x2, y2, z2)
	return result:__tointeger() ~= 0
end
natives.ped.does_scenario_blocking_area_exists = natives.PED.DOES_SCENARIO_BLOCKING_AREA_EXISTS

--[[
Full list of ped scenarios by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenariosCompact.json
]]
function natives.PED.IS_PED_USING_SCENARIO(--[[Ped]] ped, --[[const char*]] scenario) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_USING_SCENARIO' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(scenario) == "string", "Arg #2 (scenario) must be a string.")

	local result = native_call(0x1BF094736DD62C2E, ped, scenario)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_using_scenario = natives.PED.IS_PED_USING_SCENARIO

function natives.PED.IS_PED_USING_ANY_SCENARIO(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_USING_ANY_SCENARIO' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x57AB4A3080F85143, ped)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_using_any_scenario = natives.PED.IS_PED_USING_ANY_SCENARIO

function natives.PED.SET_PED_PANIC_EXIT_SCENARIO(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_PANIC_EXIT_SCENARIO' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0xFE07FF6495D52E2A, p0, p1, p2, p3)
	return result:__tointeger()
end
natives.ped.set_ped_panic_exit_scenario = natives.PED.SET_PED_PANIC_EXIT_SCENARIO

function natives.PED.TOGGLE_SCENARIO_PED_COWER_IN_PLACE(--[[Ped]] ped, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.TOGGLE_SCENARIO_PED_COWER_IN_PLACE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x9A77DFD295E29B09, ped, toggle)
end
natives.ped.toggle_scenario_ped_cower_in_place = natives.PED.TOGGLE_SCENARIO_PED_COWER_IN_PLACE

function natives.PED.TRIGGER_PED_SCENARIO_PANICEXITTOFLEE(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.TRIGGER_PED_SCENARIO_PANICEXITTOFLEE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x25361A96E0F7E419, p0, p1, p2, p3)
	return result:__tointeger()
end
natives.ped.trigger_ped_scenario_panicexittoflee = natives.PED.TRIGGER_PED_SCENARIO_PANICEXITTOFLEE

function natives.PED.SET_PED_SHOULD_PLAY_DIRECTED_NORMAL_SCENARIO_EXIT(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_SHOULD_PLAY_DIRECTED_NORMAL_SCENARIO_EXIT' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0xEC6935EBE0847B90, p0, p1, p2, p3)
	return result:__tointeger()
end
natives.ped.set_ped_should_play_directed_normal_scenario_exit = natives.PED.SET_PED_SHOULD_PLAY_DIRECTED_NORMAL_SCENARIO_EXIT

function natives.PED.SET_PED_SHOULD_PLAY_NORMAL_SCENARIO_EXIT(--[[Ped]] ped) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_SHOULD_PLAY_NORMAL_SCENARIO_EXIT' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0xA3A9299C4F2ADB98, ped)
end
natives.ped.set_ped_should_play_normal_scenario_exit = natives.PED.SET_PED_SHOULD_PLAY_NORMAL_SCENARIO_EXIT

function natives.PED.SET_PED_SHOULD_PLAY_IMMEDIATE_SCENARIO_EXIT(--[[Ped]] ped) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_SHOULD_PLAY_IMMEDIATE_SCENARIO_EXIT' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0xF1C03A5352243A30, ped)
end
natives.ped.set_ped_should_play_immediate_scenario_exit = natives.PED.SET_PED_SHOULD_PLAY_IMMEDIATE_SCENARIO_EXIT

function natives.PED.SET_PED_SHOULD_PLAY_FLEE_SCENARIO_EXIT(--[[Ped]] ped, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_SHOULD_PLAY_FLEE_SCENARIO_EXIT' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0xEEED8FAFEC331A70, ped, p1, p2, p3)
	return result:__tointeger()
end
natives.ped.set_ped_should_play_flee_scenario_exit = natives.PED.SET_PED_SHOULD_PLAY_FLEE_SCENARIO_EXIT

function natives.PED.SET_PED_SHOULD_IGNORE_SCENARIO_EXIT_COLLISION_CHECKS(--[[Ped]] ped, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_SHOULD_IGNORE_SCENARIO_EXIT_COLLISION_CHECKS' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0x425AECF167663F48, ped, p1)
end
natives.ped.set_ped_should_ignore_scenario_exit_collision_checks = natives.PED.SET_PED_SHOULD_IGNORE_SCENARIO_EXIT_COLLISION_CHECKS

function natives.PED.SET_PED_SHOULD_IGNORE_SCENARIO_NAV_CHECKS(--[[Any]] p0, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_SHOULD_IGNORE_SCENARIO_NAV_CHECKS' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0x5B6010B3CBC29095, p0, p1)
end
natives.ped.set_ped_should_ignore_scenario_nav_checks = natives.PED.SET_PED_SHOULD_IGNORE_SCENARIO_NAV_CHECKS

function natives.PED.SET_PED_SHOULD_PROBE_FOR_SCENARIO_EXITS_IN_ONE_FRAME(--[[Any]] p0, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_SHOULD_PROBE_FOR_SCENARIO_EXITS_IN_ONE_FRAME' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0xCEDA60A74219D064, p0, p1)
end
natives.ped.set_ped_should_probe_for_scenario_exits_in_one_frame = natives.PED.SET_PED_SHOULD_PROBE_FOR_SCENARIO_EXITS_IN_ONE_FRAME

function natives.PED.IS_PED_GESTURING(--[[Any]] p0) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_GESTURING' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xC30BDAEE47256C13, p0)
	return result:__tointeger()
end
natives.ped.is_ped_gesturing = natives.PED.IS_PED_GESTURING

--[[
Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
]]
function natives.PED.PLAY_FACIAL_ANIM(--[[Ped]] ped, --[[const char*]] animName, --[[const char*]] animDict) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.PLAY_FACIAL_ANIM' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(animName) == "string", "Arg #2 (animName) must be a string.")
	assert(type(animDict) == "string", "Arg #3 (animDict) must be a string.")

	local result = native_call(0xE1E65CA8AC9C00ED, ped, animName, animDict)
end
natives.ped.play_facial_anim = natives.PED.PLAY_FACIAL_ANIM

--[[
Clipsets:
facials@gen_female@base
facials@gen_male@base
facials@p_m_zero@base

Typically followed with SET_FACIAL_IDLE_ANIM_OVERRIDE:
mood_drunk_1
mood_stressed_1
mood_happy_1
mood_talking_1

]]
function natives.PED.SET_FACIAL_CLIPSET(--[[Ped]] ped, --[[const char*]] animDict) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_FACIAL_CLIPSET' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(animDict) == "string", "Arg #2 (animDict) must be a string.")

	local result = native_call(0x5687C7F05B39E401, ped, animDict)
end
natives.ped.set_facial_clipset = natives.PED.SET_FACIAL_CLIPSET

--[[
Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
]]
function natives.PED.SET_FACIAL_IDLE_ANIM_OVERRIDE(--[[Ped]] ped, --[[const char*]] animName, --[[const char*]] animDict) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_FACIAL_IDLE_ANIM_OVERRIDE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(animName) == "string", "Arg #2 (animName) must be a string.")
	assert(type(animDict) == "string", "Arg #3 (animDict) must be a string.")

	local result = native_call(0xFFC24B988B938B38, ped, animName, animDict)
end
natives.ped.set_facial_idle_anim_override = natives.PED.SET_FACIAL_IDLE_ANIM_OVERRIDE

function natives.PED.CLEAR_FACIAL_IDLE_ANIM_OVERRIDE(--[[Ped]] ped) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.CLEAR_FACIAL_IDLE_ANIM_OVERRIDE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x726256CC1EEB182F, ped)
end
natives.ped.clear_facial_idle_anim_override = natives.PED.CLEAR_FACIAL_IDLE_ANIM_OVERRIDE

function natives.PED.SET_PED_CAN_PLAY_GESTURE_ANIMS(--[[Ped]] ped, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_CAN_PLAY_GESTURE_ANIMS' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xBAF20C5432058024, ped, toggle)
end
natives.ped.set_ped_can_play_gesture_anims = natives.PED.SET_PED_CAN_PLAY_GESTURE_ANIMS

--[[
p2 usually 0
]]
function natives.PED.SET_PED_CAN_PLAY_VISEME_ANIMS(--[[Ped]] ped, --[[BOOL]] toggle, --[[BOOL]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_CAN_PLAY_VISEME_ANIMS' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")

	local result = native_call(0xF833DDBA3B104D43, ped, toggle, p2)
end
natives.ped.set_ped_can_play_viseme_anims = natives.PED.SET_PED_CAN_PLAY_VISEME_ANIMS

function natives.PED.SET_PED_IS_IGNORED_BY_AUTO_OPEN_DOORS(--[[Ped]] ped, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_IS_IGNORED_BY_AUTO_OPEN_DOORS' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0x33A60D8BDD6E508C, ped, p1)
end
natives.ped.set_ped_is_ignored_by_auto_open_doors = natives.PED.SET_PED_IS_IGNORED_BY_AUTO_OPEN_DOORS

function natives.PED.SET_PED_CAN_PLAY_AMBIENT_ANIMS(--[[Ped]] ped, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_CAN_PLAY_AMBIENT_ANIMS' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x6373D1349925A70E, ped, toggle)
end
natives.ped.set_ped_can_play_ambient_anims = natives.PED.SET_PED_CAN_PLAY_AMBIENT_ANIMS

function natives.PED.SET_PED_CAN_PLAY_AMBIENT_BASE_ANIMS(--[[Ped]] ped, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_CAN_PLAY_AMBIENT_BASE_ANIMS' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x0EB0585D15254740, ped, toggle)
end
natives.ped.set_ped_can_play_ambient_base_anims = natives.PED.SET_PED_CAN_PLAY_AMBIENT_BASE_ANIMS

function natives.PED.TRIGGER_IDLE_ANIMATION_ON_PED(--[[Ped]] ped) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.TRIGGER_IDLE_ANIMATION_ON_PED' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0xC2EE020F5FB4DB53, ped)
end
natives.ped.trigger_idle_animation_on_ped = natives.PED.TRIGGER_IDLE_ANIMATION_ON_PED

function natives.PED.SET_PED_CAN_ARM_IK(--[[Ped]] ped, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_CAN_ARM_IK' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x6C3B4D6D13B4C841, ped, toggle)
end
natives.ped.set_ped_can_arm_ik = natives.PED.SET_PED_CAN_ARM_IK

function natives.PED.SET_PED_CAN_HEAD_IK(--[[Ped]] ped, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_CAN_HEAD_IK' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xC11C18092C5530DC, ped, toggle)
end
natives.ped.set_ped_can_head_ik = natives.PED.SET_PED_CAN_HEAD_IK

function natives.PED.SET_PED_CAN_LEG_IK(--[[Ped]] ped, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_CAN_LEG_IK' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x73518ECE2485412B, ped, toggle)
end
natives.ped.set_ped_can_leg_ik = natives.PED.SET_PED_CAN_LEG_IK

function natives.PED.SET_PED_CAN_TORSO_IK(--[[Ped]] ped, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_CAN_TORSO_IK' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xF2B7106D37947CE0, ped, toggle)
end
natives.ped.set_ped_can_torso_ik = natives.PED.SET_PED_CAN_TORSO_IK

function natives.PED.SET_PED_CAN_TORSO_REACT_IK(--[[Ped]] ped, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_CAN_TORSO_REACT_IK' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0xF5846EDB26A98A24, ped, p1)
end
natives.ped.set_ped_can_torso_react_ik = natives.PED.SET_PED_CAN_TORSO_REACT_IK

function natives.PED.SET_PED_CAN_TORSO_VEHICLE_IK(--[[Ped]] ped, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_CAN_TORSO_VEHICLE_IK' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0x6647C5F6F5792496, ped, p1)
end
natives.ped.set_ped_can_torso_vehicle_ik = natives.PED.SET_PED_CAN_TORSO_VEHICLE_IK

function natives.PED.SET_PED_CAN_USE_AUTO_CONVERSATION_LOOKAT(--[[Ped]] ped, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_CAN_USE_AUTO_CONVERSATION_LOOKAT' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xEC4686EC06434678, ped, toggle)
end
natives.ped.set_ped_can_use_auto_conversation_lookat = natives.PED.SET_PED_CAN_USE_AUTO_CONVERSATION_LOOKAT

function natives.PED.IS_PED_HEADTRACKING_PED(--[[Ped]] ped1, --[[Ped]] ped2) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_HEADTRACKING_PED' due to disabled trusted mode")

	assert(type(ped1) == "number", "Arg #1 (ped1) must be a number.")
	assert(type(ped2) == "number", "Arg #2 (ped2) must be a number.")

	local result = native_call(0x5CD3CB88A7F8850D, ped1, ped2)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_headtracking_ped = natives.PED.IS_PED_HEADTRACKING_PED

function natives.PED.IS_PED_HEADTRACKING_ENTITY(--[[Ped]] ped, --[[Entity]] entity) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_HEADTRACKING_ENTITY' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(entity) == "number", "Arg #2 (entity) must be a number.")

	local result = native_call(0x813A0A7C9D2E831F, ped, entity)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_headtracking_entity = natives.PED.IS_PED_HEADTRACKING_ENTITY

--[[
This is only called once in the scripts.

sub_1CD9(&l_49, 0, getElem(3, &l_34, 4), "MICHAEL", 0, 1);
                    sub_1CA8("WORLD_HUMAN_SMOKING", 2);
                    PED::SET_PED_PRIMARY_LOOKAT(getElem(3, &l_34, 4), PLAYER::PLAYER_PED_ID());
]]
function natives.PED.SET_PED_PRIMARY_LOOKAT(--[[Ped]] ped, --[[Ped]] lookAt) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_PRIMARY_LOOKAT' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(lookAt) == "number", "Arg #2 (lookAt) must be a number.")

	local result = native_call(0xCD17B554996A8D9E, ped, lookAt)
end
natives.ped.set_ped_primary_lookat = natives.PED.SET_PED_PRIMARY_LOOKAT

function natives.PED.SET_PED_CLOTH_PIN_FRAMES(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_CLOTH_PIN_FRAMES' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x78C4E9961DB3EB5B, p0, p1)
end
natives.ped.set_ped_cloth_pin_frames = natives.PED.SET_PED_CLOTH_PIN_FRAMES

function natives.PED.SET_PED_CLOTH_PACKAGE_INDEX(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_CLOTH_PACKAGE_INDEX' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x82A3D6D9CC2CB8E3, p0, p1)
end
natives.ped.set_ped_cloth_package_index = natives.PED.SET_PED_CLOTH_PACKAGE_INDEX

function natives.PED.SET_PED_CLOTH_PRONE(--[[Any]] p0, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_CLOTH_PRONE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0xA660FAF550EB37E5, p0, p1)
end
natives.ped.set_ped_cloth_prone = natives.PED.SET_PED_CLOTH_PRONE

--[[
enum ePedConfigFlags
{
	_CPED_CONFIG_FLAG_0x67D1A445 = 0,
	_CPED_CONFIG_FLAG_0xC63DE95E = 1,
	CPED_CONFIG_FLAG_NoCriticalHits = 2,
	CPED_CONFIG_FLAG_DrownsInWater = 3,
	CPED_CONFIG_FLAG_DisableReticuleFixedLockon = 4,
	_CPED_CONFIG_FLAG_0x37D196F4 = 5,
	_CPED_CONFIG_FLAG_0xE2462399 = 6,
	CPED_CONFIG_FLAG_UpperBodyDamageAnimsOnly = 7,
	_CPED_CONFIG_FLAG_0xEDDEB838 = 8,
	_CPED_CONFIG_FLAG_0xB398B6FD = 9,
	_CPED_CONFIG_FLAG_0xF6664E68 = 10,
	_CPED_CONFIG_FLAG_0xA05E7CA3 = 11,
	_CPED_CONFIG_FLAG_0xCE394045 = 12,
	CPED_CONFIG_FLAG_NeverLeavesGroup = 13,
	_CPED_CONFIG_FLAG_0xCD8D1411 = 14,
	_CPED_CONFIG_FLAG_0xB031F1A9 = 15,
	_CPED_CONFIG_FLAG_0xFE65BEE3 = 16,
	CPED_CONFIG_FLAG_BlockNonTemporaryEvents = 17,
	_CPED_CONFIG_FLAG_0x380165BD = 18,
	_CPED_CONFIG_FLAG_0x07C045C7 = 19,
	_CPED_CONFIG_FLAG_0x583B5E2D = 20,
	_CPED_CONFIG_FLAG_0x475EDA58 = 21,
	_CPED_CONFIG_FLAG_0x8629D05B = 22,
	_CPED_CONFIG_FLAG_0x1522968B = 23,
	CPED_CONFIG_FLAG_IgnoreSeenMelee = 24,
	_CPED_CONFIG_FLAG_0x4CC09C4B = 25,
	_CPED_CONFIG_FLAG_0x034F3053 = 26,
	_CPED_CONFIG_FLAG_0xD91BA7CC = 27,
	_CPED_CONFIG_FLAG_0x5C8DC66E = 28,
	_CPED_CONFIG_FLAG_0x8902EAA0 = 29,
	_CPED_CONFIG_FLAG_0x6580B9D2 = 30,
	_CPED_CONFIG_FLAG_0x0EF7A297 = 31,
	_CPED_CONFIG_FLAG_CanFlyThruWindscreen = 32, // 0x6BF86E5B
	CPED_CONFIG_FLAG_DieWhenRagdoll = 33,
	CPED_CONFIG_FLAG_HasHelmet = 34,
	CPED_CONFIG_FLAG_UseHelmet = 35,
	_CPED_CONFIG_FLAG_0xEEB3D630 = 36,
	_CPED_CONFIG_FLAG_0xB130D17B = 37,
	_CPED_CONFIG_FLAG_0x5F071200 = 38,
	CPED_CONFIG_FLAG_DisableEvasiveDives = 39,
	_CPED_CONFIG_FLAG_0xC287AAFF = 40,
	_CPED_CONFIG_FLAG_0x203328CC = 41,
	CPED_CONFIG_FLAG_DontInfluenceWantedLevel = 42,
	CPED_CONFIG_FLAG_DisablePlayerLockon = 43,
	CPED_CONFIG_FLAG_DisableLockonToRandomPeds = 44,
	_CPED_CONFIG_FLAG_0xEC4A8ACF = 45,
	_CPED_CONFIG_FLAG_0xDB115BFA = 46,
	CPED_CONFIG_FLAG_PedBeingDeleted = 47,
	CPED_CONFIG_FLAG_BlockWeaponSwitching = 48,
	_CPED_CONFIG_FLAG_0xF8E99565 = 49,
	_CPED_CONFIG_FLAG_0xDD17FEE6 = 50,
	_CPED_CONFIG_FLAG_0x7ED9B2C9 = 51,
	_CPED_CONFIG_FLAG_NoCollison = 52, // 0x655E8618
	_CPED_CONFIG_FLAG_0x5A6C1F6E = 53,
	_CPED_CONFIG_FLAG_0xD749FC41 = 54,
	_CPED_CONFIG_FLAG_0x357F63F3 = 55,
	_CPED_CONFIG_FLAG_0xC5E60961 = 56,
	_CPED_CONFIG_FLAG_0x29275C3E = 57,
	CPED_CONFIG_FLAG_IsFiring = 58,
	CPED_CONFIG_FLAG_WasFiring = 59,
	CPED_CONFIG_FLAG_IsStanding = 60,
	CPED_CONFIG_FLAG_WasStanding = 61,
	CPED_CONFIG_FLAG_InVehicle = 62,
	CPED_CONFIG_FLAG_OnMount = 63,
	CPED_CONFIG_FLAG_AttachedToVehicle = 64,
	CPED_CONFIG_FLAG_IsSwimming = 65,
	CPED_CONFIG_FLAG_WasSwimming = 66,
	CPED_CONFIG_FLAG_IsSkiing = 67,
	CPED_CONFIG_FLAG_IsSitting = 68,
	CPED_CONFIG_FLAG_KilledByStealth = 69,
	CPED_CONFIG_FLAG_KilledByTakedown = 70,
	CPED_CONFIG_FLAG_Knockedout = 71,
	_CPED_CONFIG_FLAG_0x3E3C4560 = 72,
	_CPED_CONFIG_FLAG_0x2994C7B7 = 73,
	_CPED_CONFIG_FLAG_0x6D59D275 = 74,
	CPED_CONFIG_FLAG_UsingCoverPoint = 75,
	CPED_CONFIG_FLAG_IsInTheAir = 76,
	_CPED_CONFIG_FLAG_0x2D493FB7 = 77,
	CPED_CONFIG_FLAG_IsAimingGun = 78,
	_CPED_CONFIG_FLAG_0x14D69875 = 79,
	_CPED_CONFIG_FLAG_0x40B05311 = 80,
	_CPED_CONFIG_FLAG_0x8B230BC5 = 81,
	_CPED_CONFIG_FLAG_0xC74E5842 = 82,
	_CPED_CONFIG_FLAG_0x9EA86147 = 83,
	_CPED_CONFIG_FLAG_0x674C746C = 84,
	_CPED_CONFIG_FLAG_0x3E56A8C2 = 85,
	_CPED_CONFIG_FLAG_0xC144A1EF = 86,
	_CPED_CONFIG_FLAG_0x0548512D = 87,
	_CPED_CONFIG_FLAG_0x31C93909 = 88,
	_CPED_CONFIG_FLAG_0xA0269315 = 89,
	_CPED_CONFIG_FLAG_0xD4D59D4D = 90,
	_CPED_CONFIG_FLAG_0x411D4420 = 91,
	_CPED_CONFIG_FLAG_0xDF4AEF0D = 92,
	CPED_CONFIG_FLAG_ForcePedLoadCover = 93,
	_CPED_CONFIG_FLAG_0x300E4CD3 = 94,
	_CPED_CONFIG_FLAG_0xF1C5BF04 = 95,
	_CPED_CONFIG_FLAG_0x89C2EF13 = 96,
	CPED_CONFIG_FLAG_VaultFromCover = 97,
	_CPED_CONFIG_FLAG_0x02A852C8 = 98,
	_CPED_CONFIG_FLAG_0x3D9407F1 = 99,
	_CPED_CONFIG_FLAG_IsDrunk = 100, // 0x319B4558
	CPED_CONFIG_FLAG_ForcedAim = 101,
	_CPED_CONFIG_FLAG_0xB942D71A = 102,
	_CPED_CONFIG_FLAG_0xD26C55A8 = 103,
	_CPED_CONFIG_FLAG_0xB89E703B = 104,
	CPED_CONFIG_FLAG_ForceReload = 105,
	_CPED_CONFIG_FLAG_0xD9E73DA2 = 106,
	_CPED_CONFIG_FLAG_0xFF71DC2C = 107,
	_CPED_CONFIG_FLAG_0x1E27E8D8 = 108,
	_CPED_CONFIG_FLAG_0xF2C53966 = 109,
	_CPED_CONFIG_FLAG_0xC4DBE247 = 110,
	_CPED_CONFIG_FLAG_0x83C0A4BF = 111,
	_CPED_CONFIG_FLAG_0x0E0FAF8C = 112,
	_CPED_CONFIG_FLAG_0x26616660 = 113,
	_CPED_CONFIG_FLAG_0x43B80B79 = 114,
	_CPED_CONFIG_FLAG_0x0D2A9309 = 115,
	_CPED_CONFIG_FLAG_0x12C1C983 = 116,
	CPED_CONFIG_FLAG_BumpedByPlayer = 117,
	_CPED_CONFIG_FLAG_0xE586D504 = 118,
	_CPED_CONFIG_FLAG_0x52374204 = 119,
	CPED_CONFIG_FLAG_IsHandCuffed = 120,
	CPED_CONFIG_FLAG_IsAnkleCuffed = 121,
	CPED_CONFIG_FLAG_DisableMelee = 122,
	_CPED_CONFIG_FLAG_0xFE714397 = 123,
	_CPED_CONFIG_FLAG_0xB3E660BD = 124,
	_CPED_CONFIG_FLAG_0x5FED6BFD = 125,
	_CPED_CONFIG_FLAG_0xC9D6F66F = 126,
	_CPED_CONFIG_FLAG_0x519BC986 = 127,
	CPED_CONFIG_FLAG_CanBeAgitated = 128,
	_CPED_CONFIG_FLAG_0x9A4B617C = 129,
	_CPED_CONFIG_FLAG_0xDAB70E9F = 130,
	_CPED_CONFIG_FLAG_0xE569438A = 131,
	_CPED_CONFIG_FLAG_0xBBC77D6D = 132,
	_CPED_CONFIG_FLAG_0xCB59EF0F = 133,
	_CPED_CONFIG_FLAG_0x8C5EA971 = 134,
	CPED_CONFIG_FLAG_IsScuba = 135,
	CPED_CONFIG_FLAG_WillArrestRatherThanJack = 136,
	_CPED_CONFIG_FLAG_0xDCE59B58 = 137,
	CPED_CONFIG_FLAG_RidingTrain = 138,
	CPED_CONFIG_FLAG_ArrestResult = 139,
	CPED_CONFIG_FLAG_CanAttackFriendly = 140,
	_CPED_CONFIG_FLAG_0x98A4BE43 = 141,
	_CPED_CONFIG_FLAG_0x6901E731 = 142,
	_CPED_CONFIG_FLAG_0x9EC9BF6C = 143,
	_CPED_CONFIG_FLAG_0x42841A8F = 144,
	CPED_CONFIG_FLAG_ShootingAnimFlag = 145,
	CPED_CONFIG_FLAG_DisableLadderClimbing = 146,
	CPED_CONFIG_FLAG_StairsDetected = 147,
	CPED_CONFIG_FLAG_SlopeDetected = 148,
	_CPED_CONFIG_FLAG_0x1A15670B = 149,
	_CPED_CONFIG_FLAG_0x61786EE5 = 150,
	_CPED_CONFIG_FLAG_0xCB9186BD = 151,
	_CPED_CONFIG_FLAG_0xF0710152 = 152,
	_CPED_CONFIG_FLAG_0x43DFE310 = 153,
	_CPED_CONFIG_FLAG_0xC43C624E = 154,
	CPED_CONFIG_FLAG_CanPerformArrest = 155,
	CPED_CONFIG_FLAG_CanPerformUncuff = 156,
	CPED_CONFIG_FLAG_CanBeArrested = 157,
	_CPED_CONFIG_FLAG_0xF7960FF5 = 158,
	_CPED_CONFIG_FLAG_0x59564113 = 159,
	_CPED_CONFIG_FLAG_0x0C6C3099 = 160,
	_CPED_CONFIG_FLAG_0x645F927A = 161,
	_CPED_CONFIG_FLAG_0xA86549B9 = 162,
	_CPED_CONFIG_FLAG_0x8AAF337A = 163,
	_CPED_CONFIG_FLAG_0x13BAA6E7 = 164,
	_CPED_CONFIG_FLAG_0x5FB9D1F5 = 165,
	CPED_CONFIG_FLAG_IsInjured = 166,
	_CPED_CONFIG_FLAG_0x6398A20B = 167,
	_CPED_CONFIG_FLAG_0xD8072639 = 168,
	_CPED_CONFIG_FLAG_0xA05B1845 = 169,
	_CPED_CONFIG_FLAG_0x83F6D220 = 170,
	_CPED_CONFIG_FLAG_0xD8430331 = 171,
	_CPED_CONFIG_FLAG_0x4B547520 = 172,
	_CPED_CONFIG_FLAG_0xE66E1406 = 173,
	_CPED_CONFIG_FLAG_0x1C4BFE0C = 174,
	_CPED_CONFIG_FLAG_0x90008BFA = 175,
	_CPED_CONFIG_FLAG_0x07C7A910 = 176,
	_CPED_CONFIG_FLAG_0xF15F8191 = 177,
	_CPED_CONFIG_FLAG_0xCE4E8BE2 = 178,
	_CPED_CONFIG_FLAG_0x1D46E4F2 = 179,
	CPED_CONFIG_FLAG_IsInCustody = 180,
	_CPED_CONFIG_FLAG_0xE4FD9B3A = 181,
	_CPED_CONFIG_FLAG_0x67AE0812 = 182,
	CPED_CONFIG_FLAG_IsAgitated = 183,
	CPED_CONFIG_FLAG_PreventAutoShuffleToDriversSeat = 184,
	_CPED_CONFIG_FLAG_0x7B2D325E = 185,
	CPED_CONFIG_FLAG_EnableWeaponBlocking = 186,
	CPED_CONFIG_FLAG_HasHurtStarted = 187,
	CPED_CONFIG_FLAG_DisableHurt = 188,
	CPED_CONFIG_FLAG_PlayerIsWeird = 189,
	_CPED_CONFIG_FLAG_0x32FC208B = 190,
	_CPED_CONFIG_FLAG_0x0C296E5A = 191,
	_CPED_CONFIG_FLAG_0xE63B73EC = 192,
	_CPED_CONFIG_FLAG_0x04E9CC80 = 193,
	CPED_CONFIG_FLAG_UsingScenario = 194,
	CPED_CONFIG_FLAG_VisibleOnScreen = 195,
	_CPED_CONFIG_FLAG_0xD88C58A1 = 196,
	_CPED_CONFIG_FLAG_0x5A3DCF43 = 197,
	_CPED_CONFIG_FLAG_0xEA02B420 = 198,
	_CPED_CONFIG_FLAG_0x3F559CFF = 199,
	_CPED_CONFIG_FLAG_0x8C55D029 = 200,
	_CPED_CONFIG_FLAG_0x5E6466F6 = 201,
	_CPED_CONFIG_FLAG_0xEB5AD706 = 202,
	_CPED_CONFIG_FLAG_0x0EDDDDE7 = 203,
	_CPED_CONFIG_FLAG_0xA64F7B1D = 204,
	_CPED_CONFIG_FLAG_0x48532CBA = 205,
	_CPED_CONFIG_FLAG_0xAA25A9E7 = 206,
	_CPED_CONFIG_FLAG_0x415B26B9 = 207,
	CPED_CONFIG_FLAG_DisableExplosionReactions = 208,
	CPED_CONFIG_FLAG_DodgedPlayer = 209,
	_CPED_CONFIG_FLAG_0x67405504 = 210,
	_CPED_CONFIG_FLAG_0x75DDD68C = 211,
	_CPED_CONFIG_FLAG_0x2AD879B4 = 212,
	_CPED_CONFIG_FLAG_0x51486F91 = 213,
	_CPED_CONFIG_FLAG_0x32F79E21 = 214,
	_CPED_CONFIG_FLAG_0xBF099213 = 215,
	_CPED_CONFIG_FLAG_0x054AC8E2 = 216,
	_CPED_CONFIG_FLAG_0x14E495CC = 217,
	_CPED_CONFIG_FLAG_0x3C7DF9DF = 218,
	_CPED_CONFIG_FLAG_0x848FFEF2 = 219,
	CPED_CONFIG_FLAG_DontEnterLeadersVehicle = 220,
	_CPED_CONFIG_FLAG_0x2618E1CF = 221,
	_CPED_CONFIG_FLAG_0x84F722FA = 222,
	_CPED_CONFIG_FLAG_Shrink = 223, // 0xD1B87B1F
	_CPED_CONFIG_FLAG_0x728AA918 = 224,
	CPED_CONFIG_FLAG_DisablePotentialToBeWalkedIntoResponse = 225,
	CPED_CONFIG_FLAG_DisablePedAvoidance = 226,
	_CPED_CONFIG_FLAG_0x59E91185 = 227,
	_CPED_CONFIG_FLAG_0x1EA7225F = 228,
	CPED_CONFIG_FLAG_DisablePanicInVehicle = 229,
	_CPED_CONFIG_FLAG_0x6DCA7D88 = 230,
	_CPED_CONFIG_FLAG_0xFC3E572D = 231,
	_CPED_CONFIG_FLAG_0x08E9F9CF = 232,
	_CPED_CONFIG_FLAG_0x2D3BA52D = 233,
	_CPED_CONFIG_FLAG_0xFD2F53EA = 234,
	_CPED_CONFIG_FLAG_0x31A1B03B = 235,
	CPED_CONFIG_FLAG_IsHoldingProp = 236,
	CPED_CONFIG_FLAG_BlocksPathingWhenDead = 237,
	_CPED_CONFIG_FLAG_0xCE57C9A3 = 238,
	_CPED_CONFIG_FLAG_0x26149198 = 239,
	_CPED_CONFIG_FLAG_0x1B33B598 = 240,
	_CPED_CONFIG_FLAG_0x719B6E87 = 241,
	_CPED_CONFIG_FLAG_0x13E8E8E8 = 242,
	_CPED_CONFIG_FLAG_0xF29739AE = 243,
	_CPED_CONFIG_FLAG_0xABEA8A74 = 244,
	_CPED_CONFIG_FLAG_0xB60EA2BA = 245,
	_CPED_CONFIG_FLAG_0x536B0950 = 246,
	_CPED_CONFIG_FLAG_0x0C754ACA = 247,
	CPED_CONFIG_FLAG_CanPlayInCarIdles = 248,
	_CPED_CONFIG_FLAG_0x12659168 = 249,
	_CPED_CONFIG_FLAG_0x1BDF2F04 = 250,
	_CPED_CONFIG_FLAG_0x7728FAA3 = 251,
	_CPED_CONFIG_FLAG_0x6A807ED8 = 252,
	CPED_CONFIG_FLAG_OnStairs = 253,
	_CPED_CONFIG_FLAG_0xE1A2F73F = 254,
	_CPED_CONFIG_FLAG_0x5B3697C8 = 255,
	_CPED_CONFIG_FLAG_0xF1EB20A9 = 256,
	_CPED_CONFIG_FLAG_0x8B7DF407 = 257,
	_CPED_CONFIG_FLAG_0x329DCF1A = 258,
	_CPED_CONFIG_FLAG_0x8D90DD1B = 259,
	_CPED_CONFIG_FLAG_0xB8A292B7 = 260,
	_CPED_CONFIG_FLAG_0x8374B087 = 261,
	_CPED_CONFIG_FLAG_0x2AF558F0 = 262,
	_CPED_CONFIG_FLAG_0x82251455 = 263,
	_CPED_CONFIG_FLAG_0x30CF498B = 264,
	_CPED_CONFIG_FLAG_0xE1CD50AF = 265,
	_CPED_CONFIG_FLAG_0x72E4AE48 = 266,
	_CPED_CONFIG_FLAG_0xC2657EA1 = 267,
	_CPED_CONFIG_FLAG_0x29FF6030 = 268,
	_CPED_CONFIG_FLAG_0x8248A5EC = 269,
	CPED_CONFIG_FLAG_OnStairSlope = 270,
	_CPED_CONFIG_FLAG_0xA0897933 = 271,
	CPED_CONFIG_FLAG_DontBlipCop = 272,
	CPED_CONFIG_FLAG_ClimbedShiftedFence = 273,
	_CPED_CONFIG_FLAG_0xF7823618 = 274,
	_CPED_CONFIG_FLAG_0xDC305CCE = 275,
	CPED_CONFIG_FLAG_EdgeDetected = 276,
	_CPED_CONFIG_FLAG_0x92B67896 = 277,
	_CPED_CONFIG_FLAG_0xCAD677C9 = 278,
	CPED_CONFIG_FLAG_AvoidTearGas = 279,
	_CPED_CONFIG_FLAG_0x5276AC7B = 280,
	_CPED_CONFIG_FLAG_NoWrithe = 281, // 0x1032692A
	_CPED_CONFIG_FLAG_0xDA23E7F1 = 282,
	_CPED_CONFIG_FLAG_0x9139724D = 283,
	_CPED_CONFIG_FLAG_0xA1457461 = 284,
	_CPED_CONFIG_FLAG_0x4186E095 = 285,
	_CPED_CONFIG_FLAG_0xAC68E2EB = 286,
	CPED_CONFIG_FLAG_RagdollingOnBoat = 287,
	CPED_CONFIG_FLAG_HasBrandishedWeapon = 288,
	_CPED_CONFIG_FLAG_0x1B9EE8A1 = 289,
	_CPED_CONFIG_FLAG_0xF3F5758C = 290,
	_CPED_CONFIG_FLAG_0x2A9307F1 = 291,
	_CPED_CONFIG_FLAG_FreezePosition = 292, // 0x7403D216
	_CPED_CONFIG_FLAG_0xA06A3C6C = 293,
	CPED_CONFIG_FLAG_DisableShockingEvents = 294,
	_CPED_CONFIG_FLAG_0xF8DA25A5 = 295,
	_CPED_CONFIG_FLAG_0x7EF55802 = 296,
	_CPED_CONFIG_FLAG_0xB31F1187 = 297,
	_CPED_CONFIG_FLAG_0x84315402 = 298,
	_CPED_CONFIG_FLAG_0x0FD69867 = 299,
	_CPED_CONFIG_FLAG_0xC7829B67 = 300,
	CPED_CONFIG_FLAG_DisablePedConstraints = 301,
	_CPED_CONFIG_FLAG_0x6D23CF25 = 302,
	_CPED_CONFIG_FLAG_0x2ADA871B = 303,
	_CPED_CONFIG_FLAG_0x47BC8A58 = 304,
	_CPED_CONFIG_FLAG_0xEB692FA5 = 305,
	_CPED_CONFIG_FLAG_0x4A133C50 = 306,
	_CPED_CONFIG_FLAG_0xC58099C3 = 307,
	_CPED_CONFIG_FLAG_0xF3D76D41 = 308,
	_CPED_CONFIG_FLAG_0xB0EEE9F2 = 309,
	CPED_CONFIG_FLAG_IsInCluster = 310,
	_CPED_CONFIG_FLAG_0x0FA153EF = 311,
	_CPED_CONFIG_FLAG_0xD73F5CD3 = 312,
	_CPED_CONFIG_FLAG_0xD4136C22 = 313,
	_CPED_CONFIG_FLAG_0xE404CA6B = 314,
	_CPED_CONFIG_FLAG_0xB9597446 = 315,
	_CPED_CONFIG_FLAG_0xD5C98277 = 316,
	_CPED_CONFIG_FLAG_0xD5060A9C = 317,
	_CPED_CONFIG_FLAG_0x3E5F1CBB = 318,
	_CPED_CONFIG_FLAG_0xD8BE1D54 = 319,
	_CPED_CONFIG_FLAG_0x0B1F191F = 320,
	_CPED_CONFIG_FLAG_0xC995167A = 321,
	CPED_CONFIG_FLAG_HasHighHeels = 322,
	_CPED_CONFIG_FLAG_0x86B01E54 = 323,
	_CPED_CONFIG_FLAG_0x3A56FE15 = 324,
	_CPED_CONFIG_FLAG_0xC03B736C = 325, // SpawnedAtScenario?
	_CPED_CONFIG_FLAG_0xBBF47729 = 326,
	_CPED_CONFIG_FLAG_0x22B668A8 = 327,
	_CPED_CONFIG_FLAG_0x2624D4D4 = 328,
	CPED_CONFIG_FLAG_DisableTalkTo = 329,
	CPED_CONFIG_FLAG_DontBlip = 330,
	CPED_CONFIG_FLAG_IsSwitchingWeapon = 331,
	_CPED_CONFIG_FLAG_0x630F55F3 = 332,
	_CPED_CONFIG_FLAG_0x150468FD = 333,
	_CPED_CONFIG_FLAG_0x914EBD6B = 334,
	_CPED_CONFIG_FLAG_0x79AF3B6D = 335,
	_CPED_CONFIG_FLAG_0x75C7A632 = 336,
	_CPED_CONFIG_FLAG_0x52D530E2 = 337,
	_CPED_CONFIG_FLAG_0xDB2A90E0 = 338,
	_CPED_CONFIG_FLAG_0x5922763D = 339,
	_CPED_CONFIG_FLAG_0x12ADB567 = 340,
	_CPED_CONFIG_FLAG_0x105C8518 = 341,
	_CPED_CONFIG_FLAG_0x106F703D = 342,
	_CPED_CONFIG_FLAG_0xED152C3E = 343,
	_CPED_CONFIG_FLAG_0xA0EFE6A8 = 344,
	_CPED_CONFIG_FLAG_0xBF348C82 = 345,
	_CPED_CONFIG_FLAG_0xCDDFE830 = 346,
	_CPED_CONFIG_FLAG_0x7B59BD9B = 347,
	_CPED_CONFIG_FLAG_0x0124C788 = 348,
	CPED_CONFIG_FLAG_EquipJetpack = 349,
	_CPED_CONFIG_FLAG_0x08D361A5 = 350,
	_CPED_CONFIG_FLAG_0xE13D1F7C = 351,
	_CPED_CONFIG_FLAG_0x40E25FB9 = 352,
	_CPED_CONFIG_FLAG_0x930629D9 = 353,
	_CPED_CONFIG_FLAG_0xECCF0C7F = 354,
	_CPED_CONFIG_FLAG_0xB6E9613B = 355,
	_CPED_CONFIG_FLAG_0x490C0478 = 356,
	_CPED_CONFIG_FLAG_0xE8865BEA = 357,
	_CPED_CONFIG_FLAG_0xF3C34A29 = 358,
	CPED_CONFIG_FLAG_IsDuckingInVehicle = 359,
	_CPED_CONFIG_FLAG_0xF660E115 = 360,
	_CPED_CONFIG_FLAG_0xAB0E6DED = 361,
	CPED_CONFIG_FLAG_HasReserveParachute = 362,
	CPED_CONFIG_FLAG_UseReserveParachute = 363,
	_CPED_CONFIG_FLAG_0x5C5D9CD3 = 364,
	_CPED_CONFIG_FLAG_0x8F7701F3 = 365,
	_CPED_CONFIG_FLAG_0xBC4436AD = 366,
	_CPED_CONFIG_FLAG_0xD7E07D37 = 367,
	_CPED_CONFIG_FLAG_0x03C4FD24 = 368,
	_CPED_CONFIG_FLAG_0x7675789A = 369,
	_CPED_CONFIG_FLAG_0xB7288A88 = 370,
	_CPED_CONFIG_FLAG_0xC06B6291 = 371,
	_CPED_CONFIG_FLAG_0x95A4A805 = 372,
	_CPED_CONFIG_FLAG_0xA8E9A042 = 373,
	CPED_CONFIG_FLAG_NeverLeaveTrain = 374,
	_CPED_CONFIG_FLAG_0xBAC674B3 = 375,
	_CPED_CONFIG_FLAG_0x147F1FFB = 376,
	_CPED_CONFIG_FLAG_0x4376DD79 = 377,
	_CPED_CONFIG_FLAG_0xCD3DB518 = 378,
	_CPED_CONFIG_FLAG_0xFE4BA4B6 = 379,
	_CPED_CONFIG_FLAG_0x5DF03A55 = 380,
	_CPED_CONFIG_FLAG_0xBCD816CD = 381,
	_CPED_CONFIG_FLAG_0xCF02DD69 = 382,
	_CPED_CONFIG_FLAG_0xF73AFA2E = 383,
	_CPED_CONFIG_FLAG_0x80B9A9D0 = 384,
	_CPED_CONFIG_FLAG_0xF601F7EE = 385,
	_CPED_CONFIG_FLAG_0xA91350FC = 386,
	_CPED_CONFIG_FLAG_0x3AB23B96 = 387,
	CPED_CONFIG_FLAG_IsClimbingLadder = 388,
	CPED_CONFIG_FLAG_HasBareFeet = 389,
	_CPED_CONFIG_FLAG_0xB4B1CD4C = 390,
	_CPED_CONFIG_FLAG_0x5459AFB8 = 391,
	_CPED_CONFIG_FLAG_0x54F27667 = 392,
	_CPED_CONFIG_FLAG_0xC11D3E8F = 393,
	_CPED_CONFIG_FLAG_0x5419EB3E = 394,
	_CPED_CONFIG_FLAG_0x82D8DBB4 = 395,
	_CPED_CONFIG_FLAG_0x33B02D2F = 396,
	_CPED_CONFIG_FLAG_0xAE66176D = 397,
	_CPED_CONFIG_FLAG_0xA2692593 = 398,
	_CPED_CONFIG_FLAG_0x714C7E31 = 399,
	_CPED_CONFIG_FLAG_0xEC488AC7 = 400,
	_CPED_CONFIG_FLAG_0xAE398504 = 401,
	_CPED_CONFIG_FLAG_0xABC58D72 = 402,
	_CPED_CONFIG_FLAG_0x5E5B9591 = 403,
	_CPED_CONFIG_FLAG_0x6BA1091E = 404,
	_CPED_CONFIG_FLAG_0x77840177 = 405,
	_CPED_CONFIG_FLAG_0x1C7ACAC4 = 406,
	_CPED_CONFIG_FLAG_0x124420E9 = 407,
	_CPED_CONFIG_FLAG_0x75A65587 = 408,
	_CPED_CONFIG_FLAG_0xDFD2D55B = 409,
	_CPED_CONFIG_FLAG_0xBDD39919 = 410,
	_CPED_CONFIG_FLAG_0x43DEC267 = 411,
	_CPED_CONFIG_FLAG_0xE42B7797 = 412,
	CPED_CONFIG_FLAG_IsHolsteringWeapon = 413,
	_CPED_CONFIG_FLAG_0x4F8149F5 = 414,
	_CPED_CONFIG_FLAG_0xDD9ECA7A = 415,
	_CPED_CONFIG_FLAG_0x9E7EF9D2 = 416,
	_CPED_CONFIG_FLAG_0x2C6ED942 = 417,
	CPED_CONFIG_FLAG_IsSwitchingHelmetVisor = 418,
	_CPED_CONFIG_FLAG_0xA488727D = 419,
	_CPED_CONFIG_FLAG_0xCFF5F6DE = 420,
	_CPED_CONFIG_FLAG_0x6D614599 = 421,
	CPED_CONFIG_FLAG_DisableVehicleCombat = 422,
	_CPED_CONFIG_FLAG_0xFE401D26 = 423,
	CPED_CONFIG_FLAG_FallsLikeAircraft = 424,
	_CPED_CONFIG_FLAG_0x2B42AE82 = 425,
	_CPED_CONFIG_FLAG_0x7A95734F = 426,
	_CPED_CONFIG_FLAG_0xDF4D8617 = 427,
	_CPED_CONFIG_FLAG_0x578F1F14 = 428,
	CPED_CONFIG_FLAG_DisableStartEngine = 429,
	CPED_CONFIG_FLAG_IgnoreBeingOnFire = 430,
	_CPED_CONFIG_FLAG_0x153C9500 = 431,
	_CPED_CONFIG_FLAG_0xCB7A632E = 432,
	_CPED_CONFIG_FLAG_0xDE727981 = 433,
	CPED_CONFIG_FLAG_DisableHomingMissileLockon = 434,
	_CPED_CONFIG_FLAG_0x12BBB935 = 435,
	_CPED_CONFIG_FLAG_0xAD0A1277 = 436,
	_CPED_CONFIG_FLAG_0xEA6AA46A = 437,
	CPED_CONFIG_FLAG_DisableHelmetArmor = 438,
	_CPED_CONFIG_FLAG_0xCB7F3A1E = 439,
	_CPED_CONFIG_FLAG_0x50178878 = 440,
	_CPED_CONFIG_FLAG_0x051B4F0D = 441,
	_CPED_CONFIG_FLAG_0x2FC3DECC = 442,
	_CPED_CONFIG_FLAG_0xC0030B0B = 443,
	_CPED_CONFIG_FLAG_0xBBDAF1E9 = 444,
	_CPED_CONFIG_FLAG_0x944FE59C = 445,
	_CPED_CONFIG_FLAG_0x506FBA39 = 446,
	_CPED_CONFIG_FLAG_0xDD45FE84 = 447,
	_CPED_CONFIG_FLAG_0xE698AE75 = 448,
	_CPED_CONFIG_FLAG_0x199633F8 = 449,
	CPED_CONFIG_FLAG_PedIsArresting = 450,
	CPED_CONFIG_FLAG_IsDecoyPed = 451,
	_CPED_CONFIG_FLAG_0x3A251D83 = 452,
	_CPED_CONFIG_FLAG_0xA56F6986 = 453,
	_CPED_CONFIG_FLAG_0x1D19C622 = 454,
	_CPED_CONFIG_FLAG_0xB68D3EAB = 455,
	CPED_CONFIG_FLAG_CanBeIncapacitated = 456,
	_CPED_CONFIG_FLAG_0x4BD5EBAD = 457,
	_CPED_CONFIG_FLAG_0xFCC5EBC5 = 458
};
]]
function natives.PED.SET_PED_CONFIG_FLAG(--[[Ped]] ped, --[[int]] flagId, --[[BOOL]] value) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_CONFIG_FLAG' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(flagId) == "number", "Arg #2 (flagId) must be a number.")
	assert(type(value) == "boolean", "Arg #3 (value) must be a boolean.")

	local result = native_call(0x1913FE4CBF41C463, ped, flagId, value)
end
natives.ped.set_ped_config_flag = natives.PED.SET_PED_CONFIG_FLAG

--[[
PED::SET_PED_RESET_FLAG(PLAYER::PLAYER_PED_ID(), 240, 1);
Known values:
PRF_PreventGoingIntoStillInVehicleState = 236 *(fanatic2.c)*
]]
function natives.PED.SET_PED_RESET_FLAG(--[[Ped]] ped, --[[int]] flagId, --[[BOOL]] doReset) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_RESET_FLAG' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(flagId) == "number", "Arg #2 (flagId) must be a number.")
	assert(type(doReset) == "boolean", "Arg #3 (doReset) must be a boolean.")

	local result = native_call(0xC1E8A365BF3B29F2, ped, flagId, doReset)
end
natives.ped.set_ped_reset_flag = natives.PED.SET_PED_RESET_FLAG

--[[
See SET_PED_CONFIG_FLAG
]]
function natives.PED.GET_PED_CONFIG_FLAG(--[[Ped]] ped, --[[int]] flagId, --[[BOOL]] p2) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_PED_CONFIG_FLAG' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(flagId) == "number", "Arg #2 (flagId) must be a number.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")

	local result = native_call(0x7EE53118C892B513, ped, flagId, p2)
	return result:__tointeger() ~= 0
end
natives.ped.get_ped_config_flag = natives.PED.GET_PED_CONFIG_FLAG

function natives.PED.GET_PED_RESET_FLAG(--[[Ped]] ped, --[[int]] flagId) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_PED_RESET_FLAG' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(flagId) == "number", "Arg #2 (flagId) must be a number.")

	local result = native_call(0xAF9E59B1B1FBF2A0, ped, flagId)
	return result:__tointeger() ~= 0
end
natives.ped.get_ped_reset_flag = natives.PED.GET_PED_RESET_FLAG

function natives.PED.SET_PED_GROUP_MEMBER_PASSENGER_INDEX(--[[Ped]] ped, --[[int]] index) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_GROUP_MEMBER_PASSENGER_INDEX' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(index) == "number", "Arg #2 (index) must be a number.")

	local result = native_call(0x0BDDB8D9EC6BCF3C, ped, index)
end
natives.ped.set_ped_group_member_passenger_index = natives.PED.SET_PED_GROUP_MEMBER_PASSENGER_INDEX

function natives.PED.SET_PED_CAN_EVASIVE_DIVE(--[[Ped]] ped, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_CAN_EVASIVE_DIVE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x6B7A646C242A7059, ped, toggle)
end
natives.ped.set_ped_can_evasive_dive = natives.PED.SET_PED_CAN_EVASIVE_DIVE

--[[
Presumably returns the Entity that the Ped is currently diving out of the way of.

var num3;
    if (PED::IS_PED_EVASIVE_DIVING(A_0, &num3) != 0)
        if (ENTITY::IS_ENTITY_A_VEHICLE(num3) != 0)
]]
function natives.PED.IS_PED_EVASIVE_DIVING(--[[Ped]] ped, --[[Entity*]] evadingEntity) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_EVASIVE_DIVING' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(evadingEntity) == "userdata", "Arg #2 (evadingEntity) must be a userdata.")

	local result = native_call(0x414641C26E105898, ped, evadingEntity)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_evasive_diving = natives.PED.IS_PED_EVASIVE_DIVING

function natives.PED.SET_PED_SHOOTS_AT_COORD(--[[Ped]] ped, --[[float]] x, --[[float]] y, --[[float]] z, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_SHOOTS_AT_COORD' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")
	assert(type(toggle) == "boolean", "Arg #5 (toggle) must be a boolean.")

	local result = native_call(0x96A05E4FB321B1BA, ped, x, y, z, toggle)
end
natives.ped.set_ped_shoots_at_coord = natives.PED.SET_PED_SHOOTS_AT_COORD

--[[
Full list of peds by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/peds.json
]]
function natives.PED.SET_PED_MODEL_IS_SUPPRESSED(--[[Hash]] modelHash, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_MODEL_IS_SUPPRESSED' due to disabled trusted mode")

	assert(type(modelHash) == "number", "Arg #1 (modelHash) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xE163A4BCE4DE6F11, modelHash, toggle)
end
natives.ped.set_ped_model_is_suppressed = natives.PED.SET_PED_MODEL_IS_SUPPRESSED

function natives.PED.STOP_ANY_PED_MODEL_BEING_SUPPRESSED() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.STOP_ANY_PED_MODEL_BEING_SUPPRESSED' due to disabled trusted mode")

	local result = native_call(0xB47BD05FA66B40CF)
end
natives.ped.stop_any_ped_model_being_suppressed = natives.PED.STOP_ANY_PED_MODEL_BEING_SUPPRESSED

function natives.PED.SET_PED_CAN_BE_TARGETED_WHEN_INJURED(--[[Ped]] ped, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_CAN_BE_TARGETED_WHEN_INJURED' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x638C03B0F9878F57, ped, toggle)
end
natives.ped.set_ped_can_be_targeted_when_injured = natives.PED.SET_PED_CAN_BE_TARGETED_WHEN_INJURED

function natives.PED.SET_PED_GENERATES_DEAD_BODY_EVENTS(--[[Ped]] ped, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_GENERATES_DEAD_BODY_EVENTS' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x7FB17BA2E7DECA5B, ped, toggle)
end
natives.ped.set_ped_generates_dead_body_events = natives.PED.SET_PED_GENERATES_DEAD_BODY_EVENTS

function natives.PED.BLOCK_PED_FROM_GENERATING_DEAD_BODY_EVENTS_WHEN_DEAD(--[[Ped]] ped, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.BLOCK_PED_FROM_GENERATING_DEAD_BODY_EVENTS_WHEN_DEAD' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xE43A13C9E4CCCBCF, ped, toggle)
end
natives.ped.block_ped_from_generating_dead_body_events_when_dead = natives.PED.BLOCK_PED_FROM_GENERATING_DEAD_BODY_EVENTS_WHEN_DEAD

function natives.PED.SET_PED_WILL_ONLY_ATTACK_WANTED_PLAYER(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_WILL_ONLY_ATTACK_WANTED_PLAYER' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x3E9679C1DFCF422C, p0, p1)
end
natives.ped.set_ped_will_only_attack_wanted_player = natives.PED.SET_PED_WILL_ONLY_ATTACK_WANTED_PLAYER

function natives.PED.SET_PED_CAN_RAGDOLL_FROM_PLAYER_IMPACT(--[[Ped]] ped, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_CAN_RAGDOLL_FROM_PLAYER_IMPACT' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xDF993EE5E90ABA25, ped, toggle)
end
natives.ped.set_ped_can_ragdoll_from_player_impact = natives.PED.SET_PED_CAN_RAGDOLL_FROM_PLAYER_IMPACT

--[[
PoliceMotorcycleHelmet   1024    
RegularMotorcycleHelmet   4096    
FiremanHelmet 16384   
PilotHeadset  32768   
PilotHelmet   65536
--
p2 is generally 4096 or 16384 in the scripts. p1 varies between 1 and 0.
]]
function natives.PED.GIVE_PED_HELMET(--[[Ped]] ped, --[[BOOL]] cannotRemove, --[[int]] helmetFlag, --[[int]] textureIndex) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GIVE_PED_HELMET' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(cannotRemove) == "boolean", "Arg #2 (cannotRemove) must be a boolean.")
	assert(type(helmetFlag) == "number", "Arg #3 (helmetFlag) must be a number.")
	assert(type(textureIndex) == "number", "Arg #4 (textureIndex) must be a number.")

	local result = native_call(0x54C7C4A94367717E, ped, cannotRemove, helmetFlag, textureIndex)
end
natives.ped.give_ped_helmet = natives.PED.GIVE_PED_HELMET

function natives.PED.REMOVE_PED_HELMET(--[[Ped]] ped, --[[BOOL]] instantly) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.REMOVE_PED_HELMET' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(instantly) == "boolean", "Arg #2 (instantly) must be a boolean.")

	local result = native_call(0xA7B2458D0AD6DED8, ped, instantly)
end
natives.ped.remove_ped_helmet = natives.PED.REMOVE_PED_HELMET

function natives.PED.IS_PED_TAKING_OFF_HELMET(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_TAKING_OFF_HELMET' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x14590DDBEDB1EC85, ped)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_taking_off_helmet = natives.PED.IS_PED_TAKING_OFF_HELMET

function natives.PED.SET_PED_HELMET(--[[Ped]] ped, --[[BOOL]] canWearHelmet) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_HELMET' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(canWearHelmet) == "boolean", "Arg #2 (canWearHelmet) must be a boolean.")

	local result = native_call(0x560A43136EB58105, ped, canWearHelmet)
end
natives.ped.set_ped_helmet = natives.PED.SET_PED_HELMET

function natives.PED.SET_PED_HELMET_FLAG(--[[Ped]] ped, --[[int]] helmetFlag) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_HELMET_FLAG' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(helmetFlag) == "number", "Arg #2 (helmetFlag) must be a number.")

	local result = native_call(0xC0E78D5C2CE3EB25, ped, helmetFlag)
end
natives.ped.set_ped_helmet_flag = natives.PED.SET_PED_HELMET_FLAG

--[[
List of component/props ID
gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
]]
function natives.PED.SET_PED_HELMET_PROP_INDEX(--[[Ped]] ped, --[[int]] propIndex, --[[BOOL]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_HELMET_PROP_INDEX' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(propIndex) == "number", "Arg #2 (propIndex) must be a number.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")

	local result = native_call(0x26D83693ED99291C, ped, propIndex, p2)
end
natives.ped.set_ped_helmet_prop_index = natives.PED.SET_PED_HELMET_PROP_INDEX

function natives.PED.SET_PED_HELMET_VISOR_PROP_INDICES(--[[Ped]] ped, --[[BOOL]] p1, --[[int]] p2, --[[int]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_HELMET_VISOR_PROP_INDICES' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x3F7325574E41B44D, ped, p1, p2, p3)
end
natives.ped.set_ped_helmet_visor_prop_indices = natives.PED.SET_PED_HELMET_VISOR_PROP_INDICES

function natives.PED.IS_PED_HELMET_VISOR_UP(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_HELMET_VISOR_UP' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0xB9496CE47546DB2C, ped)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_helmet_visor_up = natives.PED.IS_PED_HELMET_VISOR_UP

function natives.PED.SET_PED_HELMET_TEXTURE_INDEX(--[[Ped]] ped, --[[int]] textureIndex) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_HELMET_TEXTURE_INDEX' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(textureIndex) == "number", "Arg #2 (textureIndex) must be a number.")

	local result = native_call(0xF1550C4BD22582E2, ped, textureIndex)
end
natives.ped.set_ped_helmet_texture_index = natives.PED.SET_PED_HELMET_TEXTURE_INDEX

--[[
Returns true if the ped passed through the parenthesis is wearing a helmet.
]]
function natives.PED.IS_PED_WEARING_HELMET(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_WEARING_HELMET' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0xF33BDFE19B309B19, ped)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_wearing_helmet = natives.PED.IS_PED_WEARING_HELMET

function natives.PED.CLEAR_PED_STORED_HAT_PROP(--[[Ped]] ped) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.CLEAR_PED_STORED_HAT_PROP' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x687C0B594907D2E8, ped)
end
natives.ped.clear_ped_stored_hat_prop = natives.PED.CLEAR_PED_STORED_HAT_PROP

function natives.PED.GET_PED_HELMET_STORED_HAT_PROP_INDEX(--[[Ped]] ped) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_PED_HELMET_STORED_HAT_PROP_INDEX' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x451294E859ECC018, ped)
	return result:__tointeger()
end
natives.ped.get_ped_helmet_stored_hat_prop_index = natives.PED.GET_PED_HELMET_STORED_HAT_PROP_INDEX

function natives.PED.GET_PED_HELMET_STORED_HAT_TEX_INDEX(--[[Ped]] ped) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_PED_HELMET_STORED_HAT_TEX_INDEX' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x9D728C1E12BF5518, ped)
	return result:__tointeger()
end
natives.ped.get_ped_helmet_stored_hat_tex_index = natives.PED.GET_PED_HELMET_STORED_HAT_TEX_INDEX

function natives.PED.IS_CURRENT_HEAD_PROP_A_HELMET(--[[Any]] p0) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_CURRENT_HEAD_PROP_A_HELMET' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xF2385935BFFD4D92, p0)
	return result:__tointeger() ~= 0
end
natives.ped.is_current_head_prop_a_helmet = natives.PED.IS_CURRENT_HEAD_PROP_A_HELMET

function natives.PED.SET_PED_TO_LOAD_COVER(--[[Ped]] ped, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_TO_LOAD_COVER' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x332B562EEDA62399, ped, toggle)
end
natives.ped.set_ped_to_load_cover = natives.PED.SET_PED_TO_LOAD_COVER

--[[
It simply makes the said ped to cower behind cover object(wall, desk, car)

Peds flee attributes must be set to not to flee, first. Else, most of the peds, will just flee from gunshot sounds or any other panic situations.
]]
function natives.PED.SET_PED_CAN_COWER_IN_COVER(--[[Ped]] ped, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_CAN_COWER_IN_COVER' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xCB7553CDCEF4A735, ped, toggle)
end
natives.ped.set_ped_can_cower_in_cover = natives.PED.SET_PED_CAN_COWER_IN_COVER

function natives.PED.SET_PED_CAN_PEEK_IN_COVER(--[[Ped]] ped, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_CAN_PEEK_IN_COVER' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xC514825C507E3736, ped, toggle)
end
natives.ped.set_ped_can_peek_in_cover = natives.PED.SET_PED_CAN_PEEK_IN_COVER

--[[
This native does absolutely nothing, just a nullsub
]]
function natives.PED.SET_PED_PLAYS_HEAD_ON_HORN_ANIM_WHEN_DIES_IN_VEHICLE(--[[Ped]] ped, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_PLAYS_HEAD_ON_HORN_ANIM_WHEN_DIES_IN_VEHICLE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x94D94BF1A75AED3D, ped, toggle)
end
natives.ped.set_ped_plays_head_on_horn_anim_when_dies_in_vehicle = natives.PED.SET_PED_PLAYS_HEAD_ON_HORN_ANIM_WHEN_DIES_IN_VEHICLE

--[[
"IK" stands for "Inverse kinematics." I assume this has something to do with how the ped uses his legs to balance. In the scripts, the second parameter is always an int with a value of 2, 0, or sometimes 1
]]
function natives.PED.SET_PED_LEG_IK_MODE(--[[Ped]] ped, --[[int]] mode) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_LEG_IK_MODE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(mode) == "number", "Arg #2 (mode) must be a number.")

	local result = native_call(0xC396F5B86FF9FEBD, ped, mode)
end
natives.ped.set_ped_leg_ik_mode = natives.PED.SET_PED_LEG_IK_MODE

function natives.PED.SET_PED_MOTION_BLUR(--[[Ped]] ped, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_MOTION_BLUR' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x0A986918B102B448, ped, toggle)
end
natives.ped.set_ped_motion_blur = natives.PED.SET_PED_MOTION_BLUR

function natives.PED.SET_PED_CAN_SWITCH_WEAPON(--[[Ped]] ped, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_CAN_SWITCH_WEAPON' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xED7F7EFE9FABF340, ped, toggle)
end
natives.ped.set_ped_can_switch_weapon = natives.PED.SET_PED_CAN_SWITCH_WEAPON

function natives.PED.SET_PED_DIES_INSTANTLY_IN_WATER(--[[Ped]] ped, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_DIES_INSTANTLY_IN_WATER' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xEEB64139BA29A7CF, ped, toggle)
end
natives.ped.set_ped_dies_instantly_in_water = natives.PED.SET_PED_DIES_INSTANTLY_IN_WATER

--[[
Only appears in lamar1 script.
]]
function natives.PED.SET_LADDER_CLIMB_INPUT_STATE(--[[Ped]] ped, --[[int]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_LADDER_CLIMB_INPUT_STATE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x1A330D297AAC6BC1, ped, p1)
end
natives.ped.set_ladder_climb_input_state = natives.PED.SET_LADDER_CLIMB_INPUT_STATE

function natives.PED.STOP_PED_WEAPON_FIRING_WHEN_DROPPED(--[[Ped]] ped) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.STOP_PED_WEAPON_FIRING_WHEN_DROPPED' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0xC158D28142A34608, ped)
end
natives.ped.stop_ped_weapon_firing_when_dropped = natives.PED.STOP_PED_WEAPON_FIRING_WHEN_DROPPED

function natives.PED.SET_SCRIPTED_ANIM_SEAT_OFFSET(--[[Ped]] ped, --[[float]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_SCRIPTED_ANIM_SEAT_OFFSET' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x5917BBA32D06C230, ped, p1)
end
natives.ped.set_scripted_anim_seat_offset = natives.PED.SET_SCRIPTED_ANIM_SEAT_OFFSET

--[[
enum eCombatMovement // 0x4F456B61
{
	CM_Stationary,
	CM_Defensive,
	CM_WillAdvance,
	CM_WillRetreat
};
]]
function natives.PED.SET_PED_COMBAT_MOVEMENT(--[[Ped]] ped, --[[int]] combatMovement) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_COMBAT_MOVEMENT' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(combatMovement) == "number", "Arg #2 (combatMovement) must be a number.")

	local result = native_call(0x4D9CA1009AFBD057, ped, combatMovement)
end
natives.ped.set_ped_combat_movement = natives.PED.SET_PED_COMBAT_MOVEMENT

--[[
See SET_PED_COMBAT_MOVEMENT
]]
function natives.PED.GET_PED_COMBAT_MOVEMENT(--[[Ped]] ped) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_PED_COMBAT_MOVEMENT' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0xDEA92412FCAEB3F5, ped)
	return result:__tointeger()
end
natives.ped.get_ped_combat_movement = natives.PED.GET_PED_COMBAT_MOVEMENT

--[[
enum eCombatAbility // 0xE793438C
{
	CA_Poor,
	CA_Average,
	CA_Professional,
	CA_NumTypes
};
]]
function natives.PED.SET_PED_COMBAT_ABILITY(--[[Ped]] ped, --[[int]] abilityLevel) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_COMBAT_ABILITY' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(abilityLevel) == "number", "Arg #2 (abilityLevel) must be a number.")

	local result = native_call(0xC7622C0D36B2FDA8, ped, abilityLevel)
end
natives.ped.set_ped_combat_ability = natives.PED.SET_PED_COMBAT_ABILITY

--[[
enum eCombatRange // 0xB69160F5
{
	CR_Near,
	CR_Medium,
	CR_Far,
	CR_VeryFar,
	CR_NumRanges
};
]]
function natives.PED.SET_PED_COMBAT_RANGE(--[[Ped]] ped, --[[int]] combatRange) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_COMBAT_RANGE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(combatRange) == "number", "Arg #2 (combatRange) must be a number.")

	local result = native_call(0x3C606747B23E497B, ped, combatRange)
end
natives.ped.set_ped_combat_range = natives.PED.SET_PED_COMBAT_RANGE

--[[
See SET_PED_COMBAT_RANGE
]]
function natives.PED.GET_PED_COMBAT_RANGE(--[[Ped]] ped) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_PED_COMBAT_RANGE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0xF9D9F7F2DB8E2FA0, ped)
	return result:__tointeger()
end
natives.ped.get_ped_combat_range = natives.PED.GET_PED_COMBAT_RANGE

--[[
enum eCombatAttributes // 0x0E8E7201
{
	BF_CanUseCover = 0,
	BF_CanUseVehicles = 1,
	BF_CanDoDrivebys = 2,
	BF_CanLeaveVehicle = 3,
	BF_CanUseDynamicStrafeDecisions = 4,
	BF_AlwaysFight = 5,
	BF_0x66BB9FCC = 6,
	BF_0x6837DA41 = 7,
	BF_0xB4A13A5A = 8,
	BF_0xEE326AAD = 9,
	BF_0x7DF2CCFA = 10,
	BF_0x0036D422 = 11,
	BF_BlindFireWhenInCover = 12,
	BF_Aggressive = 13,
	BF_CanInvestigate = 14,
	BF_HasRadio = 15,
	BF_0x6BDE28D1 = 16,
	BF_AlwaysFlee = 17,
	BF_0x7852797D = 18,
	BF_0x33497B95 = 19,
	BF_CanTauntInVehicle = 20,
	BF_CanChaseTargetOnFoot = 21,
	BF_WillDragInjuredPedsToSafety = 22,
	BF_0xCD7168B8 = 23,
	BF_UseProximityFiringRate = 24,
	BF_0x48F914F8 = 25,
	BF_0x2EA543D0 = 26,
	BF_PerfectAccuracy = 27,
	BF_CanUseFrustratedAdvance = 28,
	BF_0x3D131AC1 = 29,
	BF_0x3AD95F27 = 30,
	BF_MaintainMinDistanceToTarget = 31,
	BF_0xEAD68AD2 = 32,
	BF_0xA206C2E0 = 33,
	BF_CanUsePeekingVariations = 34,
	BF_0xA5715184 = 35,
	BF_0xD5265533 = 36,
	BF_0x2B84C2BF = 37,
	BF_DisableBulletReactions = 38,
	BF_CanBust = 39,
	BF_0xAA525726 = 40,
	BF_CanCommandeerVehicles = 41,
	BF_CanFlank = 42,
	BF_SwitchToAdvanceIfCantFindCover = 43,
	BF_SwitchToDefensiveIfInCover = 44,
	BF_0xEB4786A0 = 45,
	BF_CanFightArmedPedsWhenNotArmed = 46,
	BF_0xA08E9402 = 47,
	BF_0x952EAD7D = 48,
	BF_UseEnemyAccuracyScaling = 49,
	BF_CanCharge = 50,
	BF_0xDA8C2BD3 = 51,
	BF_0x6562F017 = 52,
	BF_0xA2C3D53B = 53,
	BF_AlwaysEquipBestWeapon = 54,
	BF_CanSeeUnderwaterPeds = 55,
	BF_0xF619486B = 56,
	BF_0x61EB63A3 = 57,
	BF_DisableFleeFromCombat = 58,
	BF_0x8976D12B = 59,
	BF_CanThrowSmokeGrenade = 60,
	BF_NonMissionPedsFleeFromThisPedUnlessArmed = 61,
	BF_0x5452A10C = 62,
	BF_FleesFromInvincibleOpponents = 63,
	BF_DisableBlockFromPursueDuringVehicleChase = 64,
	BF_DisableSpinOutDuringVehicleChase = 65,
	BF_DisableCruiseInFrontDuringBlockDuringVehicleChase = 66,
	BF_0x0B404731 = 67,
	BF_DisableReactToBuddyShot = 68,
	BF_0x7FFD6AEB = 69,
	BF_0x51F4AEF8 = 70,
	BF_PermitChargeBeyondDefensiveArea = 71,
	BF_0x63E0A8E2 = 72,
	BF_0xDF974436 = 73,
	BF_0x556C080B = 74,
	BF_0xA4D50035 = 75,
	BF_SetDisableShoutTargetPositionOnCombatStart = 76,
	BF_DisableRespondedToThreatBroadcast = 77,
	BF_0xCBB01765 = 78,
	BF_0x4F862ED4 = 79,
	BF_0xEF9C7C40 = 80,
	BF_0xE51B494F = 81,
	BF_0x054D0199 = 82,
	BF_0xD36BCE94 = 83,
	BF_0xFB11F690 = 84,
	BF_0xD208A9AD = 85,
	BF_AllowDogFighting = 86,
	BF_0x07A6E531 = 87,
	BF_0x34F9317B = 88,
	BF_0x4240F5A9 = 89,
	BF_0xEE129DBD = 90,
	BF_0x053AEAD9 = 91
};
]]
function natives.PED.SET_PED_COMBAT_ATTRIBUTES(--[[Ped]] ped, --[[int]] attributeId, --[[BOOL]] enabled) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_COMBAT_ATTRIBUTES' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(attributeId) == "number", "Arg #2 (attributeId) must be a number.")
	assert(type(enabled) == "boolean", "Arg #3 (enabled) must be a boolean.")

	local result = native_call(0x9F7794730795E019, ped, attributeId, enabled)
end
natives.ped.set_ped_combat_attributes = natives.PED.SET_PED_COMBAT_ATTRIBUTES

--[[
enum eTargetLossResponseType
{
	TLR_ExitTask,
	TLR_NeverLoseTarget,
	TLR_SearchForTarget
};
]]
function natives.PED.SET_PED_TARGET_LOSS_RESPONSE(--[[Ped]] ped, --[[int]] responseType) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_TARGET_LOSS_RESPONSE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(responseType) == "number", "Arg #2 (responseType) must be a number.")

	local result = native_call(0x0703B9079823DA4A, ped, responseType)
end
natives.ped.set_ped_target_loss_response = natives.PED.SET_PED_TARGET_LOSS_RESPONSE

function natives.PED.IS_PED_PERFORMING_MELEE_ACTION(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_PERFORMING_MELEE_ACTION' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0xDCCA191DF9980FD7, ped)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_performing_melee_action = natives.PED.IS_PED_PERFORMING_MELEE_ACTION

function natives.PED.IS_PED_PERFORMING_STEALTH_KILL(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_PERFORMING_STEALTH_KILL' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0xFD4CCDBCC59941B7, ped)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_performing_stealth_kill = natives.PED.IS_PED_PERFORMING_STEALTH_KILL

function natives.PED.IS_PED_PERFORMING_A_COUNTER_ATTACK(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_PERFORMING_A_COUNTER_ATTACK' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0xEBD0EDBA5BE957CF, ped)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_performing_a_counter_attack = natives.PED.IS_PED_PERFORMING_A_COUNTER_ATTACK

function natives.PED.IS_PED_BEING_STEALTH_KILLED(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_BEING_STEALTH_KILLED' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x863B23EFDE9C5DF2, ped)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_being_stealth_killed = natives.PED.IS_PED_BEING_STEALTH_KILLED

function natives.PED.GET_MELEE_TARGET_FOR_PED(--[[Ped]] ped) -- Returns Ped
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_MELEE_TARGET_FOR_PED' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x18A3E9EE1297FD39, ped)
	return result:__tointeger()
end
natives.ped.get_melee_target_for_ped = natives.PED.GET_MELEE_TARGET_FOR_PED

function natives.PED.WAS_PED_KILLED_BY_STEALTH(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.WAS_PED_KILLED_BY_STEALTH' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0xF9800AA1A771B000, ped)
	return result:__tointeger() ~= 0
end
natives.ped.was_ped_killed_by_stealth = natives.PED.WAS_PED_KILLED_BY_STEALTH

function natives.PED.WAS_PED_KILLED_BY_TAKEDOWN(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.WAS_PED_KILLED_BY_TAKEDOWN' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x7F08E26039C7347C, ped)
	return result:__tointeger() ~= 0
end
natives.ped.was_ped_killed_by_takedown = natives.PED.WAS_PED_KILLED_BY_TAKEDOWN

function natives.PED.WAS_PED_KNOCKED_OUT(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.WAS_PED_KNOCKED_OUT' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x61767F73EACEED21, ped)
	return result:__tointeger() ~= 0
end
natives.ped.was_ped_knocked_out = natives.PED.WAS_PED_KNOCKED_OUT

--[[
bit 1 (0x2) = use vehicle
bit 15 (0x8000) = force cower
]]
function natives.PED.SET_PED_FLEE_ATTRIBUTES(--[[Ped]] ped, --[[int]] attributeFlags, --[[BOOL]] enable) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_FLEE_ATTRIBUTES' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(attributeFlags) == "number", "Arg #2 (attributeFlags) must be a number.")
	assert(type(enable) == "boolean", "Arg #3 (enable) must be a boolean.")

	local result = native_call(0x70A2D1137C8ED7C9, ped, attributeFlags, enable)
end
natives.ped.set_ped_flee_attributes = natives.PED.SET_PED_FLEE_ATTRIBUTES

--[[
p1: Only "CODE_HUMAN_STAND_COWER" found in the b617d scripts.
]]
function natives.PED.SET_PED_COWER_HASH(--[[Ped]] ped, --[[const char*]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_COWER_HASH' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(p1) == "string", "Arg #2 (p1) must be a string.")

	local result = native_call(0xA549131166868ED3, ped, p1)
end
natives.ped.set_ped_cower_hash = natives.PED.SET_PED_COWER_HASH

function natives.PED.SET_PED_STEERS_AROUND_DEAD_BODIES(--[[Ped]] ped, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_STEERS_AROUND_DEAD_BODIES' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x2016C603D6B8987C, ped, toggle)
end
natives.ped.set_ped_steers_around_dead_bodies = natives.PED.SET_PED_STEERS_AROUND_DEAD_BODIES

function natives.PED.SET_PED_STEERS_AROUND_PEDS(--[[Ped]] ped, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_STEERS_AROUND_PEDS' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x46F2193B3AD1D891, ped, toggle)
end
natives.ped.set_ped_steers_around_peds = natives.PED.SET_PED_STEERS_AROUND_PEDS

function natives.PED.SET_PED_STEERS_AROUND_OBJECTS(--[[Ped]] ped, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_STEERS_AROUND_OBJECTS' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x1509C089ADC208BF, ped, toggle)
end
natives.ped.set_ped_steers_around_objects = natives.PED.SET_PED_STEERS_AROUND_OBJECTS

function natives.PED.SET_PED_STEERS_AROUND_VEHICLES(--[[Ped]] ped, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_STEERS_AROUND_VEHICLES' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xEB6FB9D48DDE23EC, ped, toggle)
end
natives.ped.set_ped_steers_around_vehicles = natives.PED.SET_PED_STEERS_AROUND_VEHICLES

function natives.PED.SET_PED_IS_AVOIDED_BY_OTHERS(--[[Any]] p0, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_IS_AVOIDED_BY_OTHERS' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0xA9B61A329BFDCBEA, p0, p1)
end
natives.ped.set_ped_is_avoided_by_others = natives.PED.SET_PED_IS_AVOIDED_BY_OTHERS

function natives.PED.SET_PED_INCREASED_AVOIDANCE_RADIUS(--[[Ped]] ped) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_INCREASED_AVOIDANCE_RADIUS' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x570389D1C3DE3C6B, ped)
end
natives.ped.set_ped_increased_avoidance_radius = natives.PED.SET_PED_INCREASED_AVOIDANCE_RADIUS

function natives.PED.SET_PED_BLOCKS_PATHING_WHEN_DEAD(--[[Ped]] ped, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_BLOCKS_PATHING_WHEN_DEAD' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x576594E8D64375E2, ped, toggle)
end
natives.ped.set_ped_blocks_pathing_when_dead = natives.PED.SET_PED_BLOCKS_PATHING_WHEN_DEAD

function natives.PED.SET_PED_NO_TIME_DELAY_BEFORE_SHOT(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_NO_TIME_DELAY_BEFORE_SHOT' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xA52D5247A4227E14, p0)
end
natives.ped.set_ped_no_time_delay_before_shot = natives.PED.SET_PED_NO_TIME_DELAY_BEFORE_SHOT

function natives.PED.IS_ANY_PED_NEAR_POINT(--[[float]] x, --[[float]] y, --[[float]] z, --[[float]] radius) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_ANY_PED_NEAR_POINT' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(radius) == "number", "Arg #4 (radius) must be a number.")

	local result = native_call(0x083961498679DC9F, x, y, z, radius)
	return result:__tointeger() ~= 0
end
natives.ped.is_any_ped_near_point = natives.PED.IS_ANY_PED_NEAR_POINT

function natives.PED.FORCE_PED_AI_AND_ANIMATION_UPDATE(--[[Ped]] ped, --[[BOOL]] p1, --[[BOOL]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.FORCE_PED_AI_AND_ANIMATION_UPDATE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")

	local result = native_call(0x2208438012482A1A, ped, p1, p2)
end
natives.ped.force_ped_ai_and_animation_update = natives.PED.FORCE_PED_AI_AND_ANIMATION_UPDATE

function natives.PED.IS_PED_HEADING_TOWARDS_POSITION(--[[Ped]] ped, --[[float]] x, --[[float]] y, --[[float]] z, --[[float]] p4) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_HEADING_TOWARDS_POSITION' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")

	local result = native_call(0xFCF37A457CB96DC0, ped, x, y, z, p4)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_heading_towards_position = natives.PED.IS_PED_HEADING_TOWARDS_POSITION

function natives.PED.REQUEST_PED_VISIBILITY_TRACKING(--[[Ped]] ped) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.REQUEST_PED_VISIBILITY_TRACKING' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x7D7A2E43E74E2EB8, ped)
end
natives.ped.request_ped_visibility_tracking = natives.PED.REQUEST_PED_VISIBILITY_TRACKING

function natives.PED.REQUEST_PED_VEHICLE_VISIBILITY_TRACKING(--[[Ped]] ped, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.REQUEST_PED_VEHICLE_VISIBILITY_TRACKING' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0x2BC338A7B21F4608, ped, p1)
end
natives.ped.request_ped_vehicle_visibility_tracking = natives.PED.REQUEST_PED_VEHICLE_VISIBILITY_TRACKING

function natives.PED.REQUEST_PED_RESTRICTED_VEHICLE_VISIBILITY_TRACKING(--[[Ped]] ped, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.REQUEST_PED_RESTRICTED_VEHICLE_VISIBILITY_TRACKING' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0xCD018C591F94CB43, ped, p1)
end
natives.ped.request_ped_restricted_vehicle_visibility_tracking = natives.PED.REQUEST_PED_RESTRICTED_VEHICLE_VISIBILITY_TRACKING

function natives.PED.REQUEST_PED_USE_SMALL_BBOX_VISIBILITY_TRACKING(--[[Ped]] ped, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.REQUEST_PED_USE_SMALL_BBOX_VISIBILITY_TRACKING' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0x75BA1CB3B7D40CAF, ped, p1)
end
natives.ped.request_ped_use_small_bbox_visibility_tracking = natives.PED.REQUEST_PED_USE_SMALL_BBOX_VISIBILITY_TRACKING

--[[
returns whether or not a ped is visible within your FOV, not this check auto's to false after a certain distance.


Target needs to be tracked.. won't work otherwise.
]]
function natives.PED.IS_TRACKED_PED_VISIBLE(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_TRACKED_PED_VISIBLE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x91C8E617F64188AC, ped)
	return result:__tointeger() ~= 0
end
natives.ped.is_tracked_ped_visible = natives.PED.IS_TRACKED_PED_VISIBLE

function natives.PED.GET_TRACKED_PED_PIXELCOUNT(--[[Ped]] ped) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_TRACKED_PED_PIXELCOUNT' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x511F1A683387C7E2, ped)
	return result:__tointeger()
end
natives.ped.get_tracked_ped_pixelcount = natives.PED.GET_TRACKED_PED_PIXELCOUNT

function natives.PED.IS_PED_TRACKED(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_TRACKED' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x4C5E1F087CD10BB7, ped)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_tracked = natives.PED.IS_PED_TRACKED

function natives.PED.HAS_PED_RECEIVED_EVENT(--[[Ped]] ped, --[[int]] eventId) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.HAS_PED_RECEIVED_EVENT' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(eventId) == "number", "Arg #2 (eventId) must be a number.")

	local result = native_call(0x8507BCB710FA6DC0, ped, eventId)
	return result:__tointeger() ~= 0
end
natives.ped.has_ped_received_event = natives.PED.HAS_PED_RECEIVED_EVENT

function natives.PED.CAN_PED_SEE_HATED_PED(--[[Ped]] ped1, --[[Ped]] ped2) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.CAN_PED_SEE_HATED_PED' due to disabled trusted mode")

	assert(type(ped1) == "number", "Arg #1 (ped1) must be a number.")
	assert(type(ped2) == "number", "Arg #2 (ped2) must be a number.")

	local result = native_call(0x6CD5A433374D4CFB, ped1, ped2)
	return result:__tointeger() ~= 0
end
natives.ped.can_ped_see_hated_ped = natives.PED.CAN_PED_SEE_HATED_PED

function natives.PED.CAN_PED_SHUFFLE_TO_OR_FROM_TURRET_SEAT(--[[Ped]] ped, --[[int*]] p1) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.CAN_PED_SHUFFLE_TO_OR_FROM_TURRET_SEAT' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(p1) == "userdata", "Arg #2 (p1) must be a userdata.")

	local result = native_call(0x9C6A6C19B6C0C496, ped, p1)
	return result:__tointeger() ~= 0
end
natives.ped.can_ped_shuffle_to_or_from_turret_seat = natives.PED.CAN_PED_SHUFFLE_TO_OR_FROM_TURRET_SEAT

function natives.PED.CAN_PED_SHUFFLE_TO_OR_FROM_EXTRA_SEAT(--[[Ped]] ped, --[[int*]] p1) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.CAN_PED_SHUFFLE_TO_OR_FROM_EXTRA_SEAT' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(p1) == "userdata", "Arg #2 (p1) must be a userdata.")

	local result = native_call(0x2DFC81C9B9608549, ped, p1)
	return result:__tointeger() ~= 0
end
natives.ped.can_ped_shuffle_to_or_from_extra_seat = natives.PED.CAN_PED_SHUFFLE_TO_OR_FROM_EXTRA_SEAT

--[[
no bone= -1

boneIds:
        SKEL_ROOT = 0x0,
   SKEL_Pelvis = 0x2e28,
 SKEL_L_Thigh = 0xe39f,
    SKEL_L_Calf = 0xf9bb,
 SKEL_L_Foot = 0x3779,
 SKEL_L_Toe0 = 0x83c,
  IK_L_Foot = 0xfedd,
   PH_L_Foot = 0xe175,
   MH_L_Knee = 0xb3fe,
   SKEL_R_Thigh = 0xca72,
    SKEL_R_Calf = 0x9000,
 SKEL_R_Foot = 0xcc4d,
 SKEL_R_Toe0 = 0x512d,
 IK_R_Foot = 0x8aae,
   PH_R_Foot = 0x60e6,
   MH_R_Knee = 0x3fcf,
   RB_L_ThighRoll = 0x5c57,
  RB_R_ThighRoll = 0x192a,
  SKEL_Spine_Root = 0xe0fd,
 SKEL_Spine0 = 0x5c01,
 SKEL_Spine1 = 0x60f0,
 SKEL_Spine2 = 0x60f1,
 SKEL_Spine3 = 0x60f2,
 SKEL_L_Clavicle = 0xfcd9,
 SKEL_L_UpperArm = 0xb1c5,
 SKEL_L_Forearm = 0xeeeb,
  SKEL_L_Hand = 0x49d9,
 SKEL_L_Finger00 = 0x67f2,
 SKEL_L_Finger01 = 0xff9,
  SKEL_L_Finger02 = 0xffa,
  SKEL_L_Finger10 = 0x67f3,
 SKEL_L_Finger11 = 0x1049,
 SKEL_L_Finger12 = 0x104a,
 SKEL_L_Finger20 = 0x67f4,
 SKEL_L_Finger21 = 0x1059,
 SKEL_L_Finger22 = 0x105a,
 SKEL_L_Finger30 = 0x67f5,
 SKEL_L_Finger31 = 0x1029,
 SKEL_L_Finger32 = 0x102a,
 SKEL_L_Finger40 = 0x67f6,
 SKEL_L_Finger41 = 0x1039,
 SKEL_L_Finger42 = 0x103a,
 PH_L_Hand = 0xeb95,
   IK_L_Hand = 0x8cbd,
   RB_L_ForeArmRoll = 0xee4f,
    RB_L_ArmRoll = 0x1470,
    MH_L_Elbow = 0x58b7,
  SKEL_R_Clavicle = 0x29d2,
 SKEL_R_UpperArm = 0x9d4d,
 SKEL_R_Forearm = 0x6e5c,
  SKEL_R_Hand = 0xdead,
 SKEL_R_Finger00 = 0xe5f2,
 SKEL_R_Finger01 = 0xfa10,
 SKEL_R_Finger02 = 0xfa11,
 SKEL_R_Finger10 = 0xe5f3,
 SKEL_R_Finger11 = 0xfa60,
 SKEL_R_Finger12 = 0xfa61,
 SKEL_R_Finger20 = 0xe5f4,
 SKEL_R_Finger21 = 0xfa70,
 SKEL_R_Finger22 = 0xfa71,
 SKEL_R_Finger30 = 0xe5f5,
 SKEL_R_Finger31 = 0xfa40,
 SKEL_R_Finger32 = 0xfa41,
 SKEL_R_Finger40 = 0xe5f6,
 SKEL_R_Finger41 = 0xfa50,
 SKEL_R_Finger42 = 0xfa51,
 PH_R_Hand = 0x6f06,
   IK_R_Hand = 0x188e,
   RB_R_ForeArmRoll = 0xab22,
    RB_R_ArmRoll = 0x90ff,
    MH_R_Elbow = 0xbb0,
   SKEL_Neck_1 = 0x9995,
 SKEL_Head = 0x796e,
   IK_Head = 0x322c,
 FACIAL_facialRoot = 0xfe2c,
   FB_L_Brow_Out_000 = 0xe3db,
   FB_L_Lid_Upper_000 = 0xb2b6,
  FB_L_Eye_000 = 0x62ac,
    FB_L_CheekBone_000 = 0x542e,
  FB_L_Lip_Corner_000 = 0x74ac,
 FB_R_Lid_Upper_000 = 0xaa10,
  FB_R_Eye_000 = 0x6b52,
    FB_R_CheekBone_000 = 0x4b88,
  FB_R_Brow_Out_000 = 0x54c,
    FB_R_Lip_Corner_000 = 0x2ba6,
 FB_Brow_Centre_000 = 0x9149,
  FB_UpperLipRoot_000 = 0x4ed2,
 FB_UpperLip_000 = 0xf18f,
 FB_L_Lip_Top_000 = 0x4f37,
    FB_R_Lip_Top_000 = 0x4537,
    FB_Jaw_000 = 0xb4a0,
  FB_LowerLipRoot_000 = 0x4324,
 FB_LowerLip_000 = 0x508f,
 FB_L_Lip_Bot_000 = 0xb93b,
    FB_R_Lip_Bot_000 = 0xc33b,
    FB_Tongue_000 = 0xb987,
   RB_Neck_1 = 0x8b93,
   IK_Root = 0xdd1c
]]
function natives.PED.GET_PED_BONE_INDEX(--[[Ped]] ped, --[[int]] boneId) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_PED_BONE_INDEX' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(boneId) == "number", "Arg #2 (boneId) must be a number.")

	local result = native_call(0x3F428D08BE5AAE31, ped, boneId)
	return result:__tointeger()
end
natives.ped.get_ped_bone_index = natives.PED.GET_PED_BONE_INDEX

function natives.PED.GET_PED_RAGDOLL_BONE_INDEX(--[[Ped]] ped, --[[int]] bone) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_PED_RAGDOLL_BONE_INDEX' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(bone) == "number", "Arg #2 (bone) must be a number.")

	local result = native_call(0x2057EF813397A772, ped, bone)
	return result:__tointeger()
end
natives.ped.get_ped_ragdoll_bone_index = natives.PED.GET_PED_RAGDOLL_BONE_INDEX

--[[
Values look to be between 0.0 and 1.0
From decompiled scripts: 0.0, 0.6, 0.65, 0.8, 1.0

You are correct, just looked in IDA it breaks from the function if it's less than 0.0f or greater than 1.0f.
]]
function natives.PED.SET_PED_ENVEFF_SCALE(--[[Ped]] ped, --[[float]] value) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_ENVEFF_SCALE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(value) == "number", "Arg #2 (value) must be a number.")

	local result = native_call(0xBF29516833893561, ped, value)
end
natives.ped.set_ped_enveff_scale = natives.PED.SET_PED_ENVEFF_SCALE

function natives.PED.GET_PED_ENVEFF_SCALE(--[[Ped]] ped) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_PED_ENVEFF_SCALE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x9C14D30395A51A3C, ped)
	return result:__tonumber()
end
natives.ped.get_ped_enveff_scale = natives.PED.GET_PED_ENVEFF_SCALE

function natives.PED.SET_ENABLE_PED_ENVEFF_SCALE(--[[Ped]] ped, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_ENABLE_PED_ENVEFF_SCALE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xD2C5AA0C0E8D0F1E, ped, toggle)
end
natives.ped.set_enable_ped_enveff_scale = natives.PED.SET_ENABLE_PED_ENVEFF_SCALE

--[[
In agency_heist3b.c4, its like this 90% of the time:

PED::_110F526AB784111F(ped, 0.099);
PED::SET_PED_ENVEFF_SCALE(ped, 1.0);
PED::_D69411AA0CEBF9E9(ped, 87, 81, 68);
PED::SET_ENABLE_PED_ENVEFF_SCALE(ped, 1);

and its like this 10% of the time:

PED::_110F526AB784111F(ped, 0.2);
PED::SET_PED_ENVEFF_SCALE(ped, 0.65);
PED::_D69411AA0CEBF9E9(ped, 74, 69, 60);
PED::SET_ENABLE_PED_ENVEFF_SCALE(ped, 1);
]]
function natives.PED.SET_PED_ENVEFF_CPV_ADD(--[[Ped]] ped, --[[float]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_ENVEFF_CPV_ADD' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x110F526AB784111F, ped, p1)
end
natives.ped.set_ped_enveff_cpv_add = natives.PED.SET_PED_ENVEFF_CPV_ADD

--[[
Something related to the environmental effects natives.
In the "agency_heist3b" script, p1 - p3 are always under 100 - usually they are {87, 81, 68}. If SET_PED_ENVEFF_SCALE is set to 0.65 (instead of the usual 1.0), they use {74, 69, 60}
]]
function natives.PED.SET_PED_ENVEFF_COLOR_MODULATOR(--[[Ped]] ped, --[[int]] p1, --[[int]] p2, --[[int]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_ENVEFF_COLOR_MODULATOR' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0xD69411AA0CEBF9E9, ped, p1, p2, p3)
end
natives.ped.set_ped_enveff_color_modulator = natives.PED.SET_PED_ENVEFF_COLOR_MODULATOR

--[[
intensity: 0.0f - 1.0f

This native sets the emissive intensity for the given ped. It is used for different 'glow' levels on illuminated clothing.
]]
function natives.PED.SET_PED_EMISSIVE_SCALE(--[[Ped]] ped, --[[float]] intensity) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_EMISSIVE_SCALE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(intensity) == "number", "Arg #2 (intensity) must be a number.")

	local result = native_call(0x4E90D746056E273D, ped, intensity)
end
natives.ped.set_ped_emissive_scale = natives.PED.SET_PED_EMISSIVE_SCALE

--[[
Use 0x4E90D746056E273D to set the illuminated clothing glow intensity for a specific ped.
Returns a float between 0.0 and 1.0 representing the current illuminated clothing glow intensity.
]]
function natives.PED.GET_PED_EMISSIVE_SCALE(--[[Ped]] ped) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_PED_EMISSIVE_SCALE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x1461B28A06717D68, ped)
	return result:__tonumber()
end
natives.ped.get_ped_emissive_scale = natives.PED.GET_PED_EMISSIVE_SCALE

function natives.PED.IS_PED_SHADER_READY(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_SHADER_READY' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x81AA517FBBA05D39, ped)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_shader_ready = natives.PED.IS_PED_SHADER_READY

function natives.PED.SET_PED_ENABLE_CREW_EMBLEM(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_ENABLE_CREW_EMBLEM' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xE906EC930F5FE7C8, p0, p1)
end
natives.ped.set_ped_enable_crew_emblem = natives.PED.SET_PED_ENABLE_CREW_EMBLEM

--[[
This native does absolutely nothing, just a nullsub
]]
function natives.PED.REQUEST_RAGDOLL_BOUNDS_UPDATE(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.REQUEST_RAGDOLL_BOUNDS_UPDATE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x1216E0BFA72CC703, p0, p1)
end
natives.ped.request_ragdoll_bounds_update = natives.PED.REQUEST_RAGDOLL_BOUNDS_UPDATE

--[[
Enable/disable ped shadow (ambient occlusion). https://gfycat.com/thankfulesteemedgecko
]]
function natives.PED.SET_PED_AO_BLOB_RENDERING(--[[Ped]] ped, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_AO_BLOB_RENDERING' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x2B5AA717A181FB4C, ped, toggle)
end
natives.ped.set_ped_ao_blob_rendering = natives.PED.SET_PED_AO_BLOB_RENDERING

function natives.PED.IS_PED_SHELTERED(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_SHELTERED' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0xB8B52E498014F5B0, ped)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_sheltered = natives.PED.IS_PED_SHELTERED

--[[
p6 always 2 (but it doesnt seem to matter...)

roll and pitch 0
yaw to Ped.rotation
]]
function natives.PED.CREATE_SYNCHRONIZED_SCENE(--[[float]] x, --[[float]] y, --[[float]] z, --[[float]] roll, --[[float]] pitch, --[[float]] yaw, --[[int]] p6) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.CREATE_SYNCHRONIZED_SCENE' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(roll) == "number", "Arg #4 (roll) must be a number.")
	assert(type(pitch) == "number", "Arg #5 (pitch) must be a number.")
	assert(type(yaw) == "number", "Arg #6 (yaw) must be a number.")
	assert(type(p6) == "number", "Arg #7 (p6) must be a number.")

	local result = native_call(0x8C18E0F9080ADD73, x, y, z, roll, pitch, yaw, p6)
	return result:__tointeger()
end
natives.ped.create_synchronized_scene = natives.PED.CREATE_SYNCHRONIZED_SCENE

function natives.PED.CREATE_SYNCHRONIZED_SCENE_AT_MAP_OBJECT(--[[float]] x, --[[float]] y, --[[float]] z, --[[float]] radius, --[[Hash]] object) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.CREATE_SYNCHRONIZED_SCENE_AT_MAP_OBJECT' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(radius) == "number", "Arg #4 (radius) must be a number.")
	assert(type(object) == "number", "Arg #5 (object) must be a number.")

	local result = native_call(0x62EC273D00187DCA, x, y, z, radius, object)
	return result:__tointeger()
end
natives.ped.create_synchronized_scene_at_map_object = natives.PED.CREATE_SYNCHRONIZED_SCENE_AT_MAP_OBJECT

--[[
Returns true if a synchronized scene is running
]]
function natives.PED.IS_SYNCHRONIZED_SCENE_RUNNING(--[[int]] sceneId) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_SYNCHRONIZED_SCENE_RUNNING' due to disabled trusted mode")

	assert(type(sceneId) == "number", "Arg #1 (sceneId) must be a number.")

	local result = native_call(0x25D39B935A038A26, sceneId)
	return result:__tointeger() ~= 0
end
natives.ped.is_synchronized_scene_running = natives.PED.IS_SYNCHRONIZED_SCENE_RUNNING

function natives.PED.SET_SYNCHRONIZED_SCENE_ORIGIN(--[[int]] sceneID, --[[float]] x, --[[float]] y, --[[float]] z, --[[float]] roll, --[[float]] pitch, --[[float]] yaw, --[[BOOL]] p7) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_SYNCHRONIZED_SCENE_ORIGIN' due to disabled trusted mode")

	assert(type(sceneID) == "number", "Arg #1 (sceneID) must be a number.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")
	assert(type(roll) == "number", "Arg #5 (roll) must be a number.")
	assert(type(pitch) == "number", "Arg #6 (pitch) must be a number.")
	assert(type(yaw) == "number", "Arg #7 (yaw) must be a number.")
	assert(type(p7) == "boolean", "Arg #8 (p7) must be a boolean.")

	local result = native_call(0x6ACF6B7225801CD7, sceneID, x, y, z, roll, pitch, yaw, p7)
end
natives.ped.set_synchronized_scene_origin = natives.PED.SET_SYNCHRONIZED_SCENE_ORIGIN

function natives.PED.SET_SYNCHRONIZED_SCENE_PHASE(--[[int]] sceneID, --[[float]] phase) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_SYNCHRONIZED_SCENE_PHASE' due to disabled trusted mode")

	assert(type(sceneID) == "number", "Arg #1 (sceneID) must be a number.")
	assert(type(phase) == "number", "Arg #2 (phase) must be a number.")

	local result = native_call(0x734292F4F0ABF6D0, sceneID, phase)
end
natives.ped.set_synchronized_scene_phase = natives.PED.SET_SYNCHRONIZED_SCENE_PHASE

function natives.PED.GET_SYNCHRONIZED_SCENE_PHASE(--[[int]] sceneID) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_SYNCHRONIZED_SCENE_PHASE' due to disabled trusted mode")

	assert(type(sceneID) == "number", "Arg #1 (sceneID) must be a number.")

	local result = native_call(0xE4A310B1D7FA73CC, sceneID)
	return result:__tonumber()
end
natives.ped.get_synchronized_scene_phase = natives.PED.GET_SYNCHRONIZED_SCENE_PHASE

function natives.PED.SET_SYNCHRONIZED_SCENE_RATE(--[[int]] sceneID, --[[float]] rate) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_SYNCHRONIZED_SCENE_RATE' due to disabled trusted mode")

	assert(type(sceneID) == "number", "Arg #1 (sceneID) must be a number.")
	assert(type(rate) == "number", "Arg #2 (rate) must be a number.")

	local result = native_call(0xB6C49F8A5E295A5D, sceneID, rate)
end
natives.ped.set_synchronized_scene_rate = natives.PED.SET_SYNCHRONIZED_SCENE_RATE

function natives.PED.GET_SYNCHRONIZED_SCENE_RATE(--[[int]] sceneID) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_SYNCHRONIZED_SCENE_RATE' due to disabled trusted mode")

	assert(type(sceneID) == "number", "Arg #1 (sceneID) must be a number.")

	local result = native_call(0xD80932D577274D40, sceneID)
	return result:__tonumber()
end
natives.ped.get_synchronized_scene_rate = natives.PED.GET_SYNCHRONIZED_SCENE_RATE

function natives.PED.SET_SYNCHRONIZED_SCENE_LOOPED(--[[int]] sceneID, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_SYNCHRONIZED_SCENE_LOOPED' due to disabled trusted mode")

	assert(type(sceneID) == "number", "Arg #1 (sceneID) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xD9A897A4C6C2974F, sceneID, toggle)
end
natives.ped.set_synchronized_scene_looped = natives.PED.SET_SYNCHRONIZED_SCENE_LOOPED

function natives.PED.IS_SYNCHRONIZED_SCENE_LOOPED(--[[int]] sceneID) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_SYNCHRONIZED_SCENE_LOOPED' due to disabled trusted mode")

	assert(type(sceneID) == "number", "Arg #1 (sceneID) must be a number.")

	local result = native_call(0x62522002E0C391BA, sceneID)
	return result:__tointeger() ~= 0
end
natives.ped.is_synchronized_scene_looped = natives.PED.IS_SYNCHRONIZED_SCENE_LOOPED

function natives.PED.SET_SYNCHRONIZED_SCENE_HOLD_LAST_FRAME(--[[int]] sceneID, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_SYNCHRONIZED_SCENE_HOLD_LAST_FRAME' due to disabled trusted mode")

	assert(type(sceneID) == "number", "Arg #1 (sceneID) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x394B9CD12435C981, sceneID, toggle)
end
natives.ped.set_synchronized_scene_hold_last_frame = natives.PED.SET_SYNCHRONIZED_SCENE_HOLD_LAST_FRAME

function natives.PED.IS_SYNCHRONIZED_SCENE_HOLD_LAST_FRAME(--[[int]] sceneID) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_SYNCHRONIZED_SCENE_HOLD_LAST_FRAME' due to disabled trusted mode")

	assert(type(sceneID) == "number", "Arg #1 (sceneID) must be a number.")

	local result = native_call(0x7F2F4F13AC5257EF, sceneID)
	return result:__tointeger() ~= 0
end
natives.ped.is_synchronized_scene_hold_last_frame = natives.PED.IS_SYNCHRONIZED_SCENE_HOLD_LAST_FRAME

function natives.PED.ATTACH_SYNCHRONIZED_SCENE_TO_ENTITY(--[[int]] sceneID, --[[Entity]] entity, --[[int]] boneIndex) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.ATTACH_SYNCHRONIZED_SCENE_TO_ENTITY' due to disabled trusted mode")

	assert(type(sceneID) == "number", "Arg #1 (sceneID) must be a number.")
	assert(type(entity) == "number", "Arg #2 (entity) must be a number.")
	assert(type(boneIndex) == "number", "Arg #3 (boneIndex) must be a number.")

	local result = native_call(0x272E4723B56A3B96, sceneID, entity, boneIndex)
end
natives.ped.attach_synchronized_scene_to_entity = natives.PED.ATTACH_SYNCHRONIZED_SCENE_TO_ENTITY

function natives.PED.DETACH_SYNCHRONIZED_SCENE(--[[int]] sceneID) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.DETACH_SYNCHRONIZED_SCENE' due to disabled trusted mode")

	assert(type(sceneID) == "number", "Arg #1 (sceneID) must be a number.")

	local result = native_call(0x6D38F1F04CBB37EA, sceneID)
end
natives.ped.detach_synchronized_scene = natives.PED.DETACH_SYNCHRONIZED_SCENE

function natives.PED.TAKE_OWNERSHIP_OF_SYNCHRONIZED_SCENE(--[[int]] scene) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.TAKE_OWNERSHIP_OF_SYNCHRONIZED_SCENE' due to disabled trusted mode")

	assert(type(scene) == "number", "Arg #1 (scene) must be a number.")

	local result = native_call(0xCD9CC7E200A52A6F, scene)
end
natives.ped.take_ownership_of_synchronized_scene = natives.PED.TAKE_OWNERSHIP_OF_SYNCHRONIZED_SCENE

--[[
Regarding p2, p3 and p4: Most common is 0, 0, 0); followed by 0, 1, 0); and 1, 1, 0); in R* scripts. p4 is very rarely something other than 0.

enum eMotionState // 0x92A659FE
{
	MotionState_None = 0xEE717723,
	MotionState_Idle = 0x9072A713,
	MotionState_Walk = 0xD827C3DB,
	MotionState_Run = 0xFFF7E7A4,
	MotionState_Sprint = 0xBD8817DB,
	MotionState_Crouch_Idle = 0x43FB099E,
	MotionState_Crouch_Walk = 0x08C31A98,
	MotionState_Crouch_Run = 0x3593CF09,
	MotionState_DoNothing = 0x0EC17E58,
	MotionState_AnimatedVelocity = 0x551AAC43,
	MotionState_InVehicle = 0x94D9D58D,
	MotionState_Aiming = 0x3F67C6AF,
	MotionState_Diving_Idle = 0x4848CDED,
	MotionState_Diving_Swim = 0x916E828C,
	MotionState_Swimming_TreadWater = 0xD1BF11C7,
	MotionState_Dead = 0x0DBB071C,
	MotionState_Stealth_Idle = 0x422D7A25,
	MotionState_Stealth_Walk = 0x042AB6A2,
	MotionState_Stealth_Run = 0xFB0B79E1,
	MotionState_Parachuting = 0xBAC0F10B,
	MotionState_ActionMode_Idle = 0xDA40A0DC,
	MotionState_ActionMode_Walk = 0xD2905EA7,
	MotionState_ActionMode_Run = 0x31BADE14,
	MotionState_Jetpack = 0x535E6A5E
};
]]
function natives.PED.FORCE_PED_MOTION_STATE(--[[Ped]] ped, --[[Hash]] motionStateHash, --[[BOOL]] p2, --[[int]] p3, --[[BOOL]] p4) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.FORCE_PED_MOTION_STATE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(motionStateHash) == "number", "Arg #2 (motionStateHash) must be a number.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "boolean", "Arg #5 (p4) must be a boolean.")

	local result = native_call(0xF28965D04F570DCA, ped, motionStateHash, p2, p3, p4)
	return result:__tointeger() ~= 0
end
natives.ped.force_ped_motion_state = natives.PED.FORCE_PED_MOTION_STATE

function natives.PED.GET_PED_CURRENT_MOVE_BLEND_RATIO(--[[Ped]] ped, --[[float*]] speedX, --[[float*]] speedY) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_PED_CURRENT_MOVE_BLEND_RATIO' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(speedX) == "userdata", "Arg #2 (speedX) must be a userdata.")
	assert(type(speedY) == "userdata", "Arg #3 (speedY) must be a userdata.")

	local result = native_call(0xF60165E1D2C5370B, ped, speedX, speedY)
	return result:__tointeger() ~= 0
end
natives.ped.get_ped_current_move_blend_ratio = natives.PED.GET_PED_CURRENT_MOVE_BLEND_RATIO

function natives.PED.SET_PED_MAX_MOVE_BLEND_RATIO(--[[Ped]] ped, --[[float]] value) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_MAX_MOVE_BLEND_RATIO' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(value) == "number", "Arg #2 (value) must be a number.")

	local result = native_call(0x433083750C5E064A, ped, value)
end
natives.ped.set_ped_max_move_blend_ratio = natives.PED.SET_PED_MAX_MOVE_BLEND_RATIO

function natives.PED.SET_PED_MIN_MOVE_BLEND_RATIO(--[[Ped]] ped, --[[float]] value) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_MIN_MOVE_BLEND_RATIO' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(value) == "number", "Arg #2 (value) must be a number.")

	local result = native_call(0x01A898D26E2333DD, ped, value)
end
natives.ped.set_ped_min_move_blend_ratio = natives.PED.SET_PED_MIN_MOVE_BLEND_RATIO

--[[
Min: 0.00
Max: 10.00

Can be used in combo with fast run cheat.

When value is set to 10.00:
Sprinting without fast run cheat: 66 m/s
Sprinting with fast run cheat: 77 m/s

Needs to be looped!

Note: According to IDA for the Xbox360 xex, when they check bgt they seem to have the min to 0.0f, but the max set to 1.15f not 10.0f.
]]
function natives.PED.SET_PED_MOVE_RATE_OVERRIDE(--[[Ped]] ped, --[[float]] value) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_MOVE_RATE_OVERRIDE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(value) == "number", "Arg #2 (value) must be a number.")

	local result = native_call(0x085BF80FA50A39D1, ped, value)
end
natives.ped.set_ped_move_rate_override = natives.PED.SET_PED_MOVE_RATE_OVERRIDE

function natives.PED.SET_PED_MOVE_RATE_IN_WATER_OVERRIDE(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_MOVE_RATE_IN_WATER_OVERRIDE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x0B3E35AC043707D9, p0, p1)
end
natives.ped.set_ped_move_rate_in_water_override = natives.PED.SET_PED_MOVE_RATE_IN_WATER_OVERRIDE

--[[
Checks if the specified unknown flag is set in the ped's model.
The engine itself seems to exclusively check for flags 1 and 4 (Might be inlined code of the check that checks for other flags).
Game scripts exclusively check for flags 1 and 4.
]]
function natives.PED.PED_HAS_SEXINESS_FLAG_SET(--[[Ped]] ped, --[[int]] flag) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.PED_HAS_SEXINESS_FLAG_SET' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(flag) == "number", "Arg #2 (flag) must be a number.")

	local result = native_call(0x46B05BCAE43856B0, ped, flag)
	return result:__tointeger() ~= 0
end
natives.ped.ped_has_sexiness_flag_set = natives.PED.PED_HAS_SEXINESS_FLAG_SET

--[[
Returns size of array, passed into the second variable.

See below for usage information.

This function actually requires a struct, where the first value is the maximum number of elements to return.  Here is a sample of how I was able to get it to work correctly, without yet knowing the struct format.

//Setup the array
 const int numElements = 10;
   const int arrSize = numElements * 2 + 2;
  Any veh[arrSize];
 //0 index is the size of the array
    veh[0] = numElements;

   int count = PED::GET_PED_NEARBY_VEHICLES(PLAYER::PLAYER_PED_ID(), veh);

 if (veh != NULL)
  {
     //Simple loop to go through results
       for (int i = 0; i < count; i++)
        {
         int offsettedID = i * 2 + 2;
          //Make sure it exists
         if (veh[offsettedID] != NULL && ENTITY::DOES_ENTITY_EXIST(veh[offsettedID]))
          {
             //Do something
            }
     }
 }  
]]
function natives.PED.GET_PED_NEARBY_VEHICLES(--[[Ped]] ped, --[[Any*]] sizeAndVehs) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_PED_NEARBY_VEHICLES' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(sizeAndVehs) == "userdata", "Arg #2 (sizeAndVehs) must be a userdata.")

	local result = native_call(0xCFF869CBFA210D82, ped, sizeAndVehs)
	return result:__tointeger()
end
natives.ped.get_ped_nearby_vehicles = natives.PED.GET_PED_NEARBY_VEHICLES

--[[
sizeAndPeds - is a pointer to an array. The array is filled with peds found nearby the ped supplied to the first argument.
ignore - ped type to ignore

Return value is the number of peds found and added to the array passed.

-----------------------------------

To make this work in most menu bases at least in C++ do it like so,

 Formatted Example: pastebin.com/D8an9wwp

-----------------------------------

Example: gtaforums.com/topic/789788-function-args-to-pedget-ped-nearby-peds/?p=1067386687
]]
function natives.PED.GET_PED_NEARBY_PEDS(--[[Ped]] ped, --[[Any*]] sizeAndPeds, --[[int]] ignore) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_PED_NEARBY_PEDS' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(sizeAndPeds) == "userdata", "Arg #2 (sizeAndPeds) must be a userdata.")
	assert(type(ignore) == "number", "Arg #3 (ignore) must be a number.")

	local result = native_call(0x23F8F5FC7E8C4A6B, ped, sizeAndPeds, ignore)
	return result:__tointeger()
end
natives.ped.get_ped_nearby_peds = natives.PED.GET_PED_NEARBY_PEDS

function natives.PED.HAVE_ALL_STREAMING_REQUESTS_COMPLETED(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.HAVE_ALL_STREAMING_REQUESTS_COMPLETED' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x7350823473013C02, ped)
	return result:__tointeger() ~= 0
end
natives.ped.have_all_streaming_requests_completed = natives.PED.HAVE_ALL_STREAMING_REQUESTS_COMPLETED

function natives.PED.IS_PED_USING_ACTION_MODE(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_USING_ACTION_MODE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x00E73468D085F745, ped)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_using_action_mode = natives.PED.IS_PED_USING_ACTION_MODE

--[[
p2 is usually -1 in the scripts. action is either 0 or "DEFAULT_ACTION".
]]
function natives.PED.SET_PED_USING_ACTION_MODE(--[[Ped]] ped, --[[BOOL]] p1, --[[int]] p2, --[[const char*]] action) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_USING_ACTION_MODE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(action) == "string", "Arg #4 (action) must be a string.")

	local result = native_call(0xD75ACCF5E0FB5367, ped, p1, p2, action)
end
natives.ped.set_ped_using_action_mode = natives.PED.SET_PED_USING_ACTION_MODE

--[[
name: "MP_FEMALE_ACTION" found multiple times in the b617d scripts.
]]
function natives.PED.SET_MOVEMENT_MODE_OVERRIDE(--[[Ped]] ped, --[[const char*]] name) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_MOVEMENT_MODE_OVERRIDE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(name) == "string", "Arg #2 (name) must be a string.")

	local result = native_call(0x781DE8FA214E87D2, ped, name)
end
natives.ped.set_movement_mode_override = natives.PED.SET_MOVEMENT_MODE_OVERRIDE

--[[
Overrides the ped's collision capsule radius for the current tick.
Must be called every tick to be effective.

Setting this to 0.001 will allow warping through some objects.
]]
function natives.PED.SET_PED_CAPSULE(--[[Ped]] ped, --[[float]] value) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_CAPSULE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(value) == "number", "Arg #2 (value) must be a number.")

	local result = native_call(0x364DF566EC833DE2, ped, value)
end
natives.ped.set_ped_capsule = natives.PED.SET_PED_CAPSULE

--[[
gtaforums.com/topic/885580-ped-headshotmugshot-txd/
]]
function natives.PED.REGISTER_PEDHEADSHOT(--[[Ped]] ped) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.REGISTER_PEDHEADSHOT' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x4462658788425076, ped)
	return result:__tointeger()
end
natives.ped.register_pedheadshot = natives.PED.REGISTER_PEDHEADSHOT

function natives.PED.REGISTER_PEDHEADSHOT_HIRES(--[[Ped]] ped) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.REGISTER_PEDHEADSHOT_HIRES' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0xBA8805A1108A2515, ped)
	return result:__tointeger()
end
natives.ped.register_pedheadshot_hires = natives.PED.REGISTER_PEDHEADSHOT_HIRES

--[[
Similar to REGISTER_PEDHEADSHOT but creates a transparent background instead of black. Example: https://i.imgur.com/iHz8ztn.png
]]
function natives.PED.REGISTER_PEDHEADSHOT_TRANSPARENT(--[[Ped]] ped) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.REGISTER_PEDHEADSHOT_TRANSPARENT' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x953563CE563143AF, ped)
	return result:__tointeger()
end
natives.ped.register_pedheadshot_transparent = natives.PED.REGISTER_PEDHEADSHOT_TRANSPARENT

--[[
gtaforums.com/topic/885580-ped-headshotmugshot-txd/
]]
function natives.PED.UNREGISTER_PEDHEADSHOT(--[[int]] id) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.UNREGISTER_PEDHEADSHOT' due to disabled trusted mode")

	assert(type(id) == "number", "Arg #1 (id) must be a number.")

	local result = native_call(0x96B1361D9B24C2FF, id)
end
natives.ped.unregister_pedheadshot = natives.PED.UNREGISTER_PEDHEADSHOT

--[[
gtaforums.com/topic/885580-ped-headshotmugshot-txd/
]]
function natives.PED.IS_PEDHEADSHOT_VALID(--[[int]] id) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PEDHEADSHOT_VALID' due to disabled trusted mode")

	assert(type(id) == "number", "Arg #1 (id) must be a number.")

	local result = native_call(0xA0A9668F158129A2, id)
	return result:__tointeger() ~= 0
end
natives.ped.is_pedheadshot_valid = natives.PED.IS_PEDHEADSHOT_VALID

--[[
gtaforums.com/topic/885580-ped-headshotmugshot-txd/
]]
function natives.PED.IS_PEDHEADSHOT_READY(--[[int]] id) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PEDHEADSHOT_READY' due to disabled trusted mode")

	assert(type(id) == "number", "Arg #1 (id) must be a number.")

	local result = native_call(0x7085228842B13A67, id)
	return result:__tointeger() ~= 0
end
natives.ped.is_pedheadshot_ready = natives.PED.IS_PEDHEADSHOT_READY

--[[
gtaforums.com/topic/885580-ped-headshotmugshot-txd/
]]
function natives.PED.GET_PEDHEADSHOT_TXD_STRING(--[[int]] id) -- Returns const char*
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_PEDHEADSHOT_TXD_STRING' due to disabled trusted mode")

	assert(type(id) == "number", "Arg #1 (id) must be a number.")

	local result = native_call(0xDB4EACD4AD0A5D6B, id)
	return result:__tostring(true)
end
natives.ped.get_pedheadshot_txd_string = natives.PED.GET_PEDHEADSHOT_TXD_STRING

function natives.PED.REQUEST_PEDHEADSHOT_IMG_UPLOAD(--[[int]] id) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.REQUEST_PEDHEADSHOT_IMG_UPLOAD' due to disabled trusted mode")

	assert(type(id) == "number", "Arg #1 (id) must be a number.")

	local result = native_call(0xF0DAEF2F545BEE25, id)
	return result:__tointeger() ~= 0
end
natives.ped.request_pedheadshot_img_upload = natives.PED.REQUEST_PEDHEADSHOT_IMG_UPLOAD

function natives.PED.RELEASE_PEDHEADSHOT_IMG_UPLOAD(--[[int]] id) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.RELEASE_PEDHEADSHOT_IMG_UPLOAD' due to disabled trusted mode")

	assert(type(id) == "number", "Arg #1 (id) must be a number.")

	local result = native_call(0x5D517B27CF6ECD04, id)
end
natives.ped.release_pedheadshot_img_upload = natives.PED.RELEASE_PEDHEADSHOT_IMG_UPLOAD

function natives.PED.IS_PEDHEADSHOT_IMG_UPLOAD_AVAILABLE() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PEDHEADSHOT_IMG_UPLOAD_AVAILABLE' due to disabled trusted mode")

	local result = native_call(0xEBB376779A760AA8)
	return result:__tointeger() ~= 0
end
natives.ped.is_pedheadshot_img_upload_available = natives.PED.IS_PEDHEADSHOT_IMG_UPLOAD_AVAILABLE

function natives.PED.HAS_PEDHEADSHOT_IMG_UPLOAD_FAILED() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.HAS_PEDHEADSHOT_IMG_UPLOAD_FAILED' due to disabled trusted mode")

	local result = native_call(0x876928DDDFCCC9CD)
	return result:__tointeger() ~= 0
end
natives.ped.has_pedheadshot_img_upload_failed = natives.PED.HAS_PEDHEADSHOT_IMG_UPLOAD_FAILED

function natives.PED.HAS_PEDHEADSHOT_IMG_UPLOAD_SUCCEEDED() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.HAS_PEDHEADSHOT_IMG_UPLOAD_SUCCEEDED' due to disabled trusted mode")

	local result = native_call(0xE8A169E666CBC541)
	return result:__tointeger() ~= 0
end
natives.ped.has_pedheadshot_img_upload_succeeded = natives.PED.HAS_PEDHEADSHOT_IMG_UPLOAD_SUCCEEDED

function natives.PED.SET_PED_HEATSCALE_OVERRIDE(--[[Ped]] ped, --[[float]] heatScale) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_HEATSCALE_OVERRIDE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(heatScale) == "number", "Arg #2 (heatScale) must be a number.")

	local result = native_call(0xC1F6EBF9A3D55538, ped, heatScale)
end
natives.ped.set_ped_heatscale_override = natives.PED.SET_PED_HEATSCALE_OVERRIDE

function natives.PED.DISABLE_PED_HEATSCALE_OVERRIDE(--[[Ped]] ped) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.DISABLE_PED_HEATSCALE_OVERRIDE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x600048C60D5C2C51, ped)
end
natives.ped.disable_ped_heatscale_override = natives.PED.DISABLE_PED_HEATSCALE_OVERRIDE

function natives.PED.SPAWNPOINTS_START_SEARCH(--[[float]] p0, --[[float]] p1, --[[float]] p2, --[[float]] p3, --[[float]] p4, --[[int]] interiorFlags, --[[float]] scale, --[[int]] duration) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SPAWNPOINTS_START_SEARCH' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(interiorFlags) == "number", "Arg #6 (interiorFlags) must be a number.")
	assert(type(scale) == "number", "Arg #7 (scale) must be a number.")
	assert(type(duration) == "number", "Arg #8 (duration) must be a number.")

	local result = native_call(0x2DF9038C90AD5264, p0, p1, p2, p3, p4, interiorFlags, scale, duration)
end
natives.ped.spawnpoints_start_search = natives.PED.SPAWNPOINTS_START_SEARCH

function natives.PED.SPAWNPOINTS_START_SEARCH_IN_ANGLED_AREA(--[[float]] x1, --[[float]] y1, --[[float]] z1, --[[float]] x2, --[[float]] y2, --[[float]] z2, --[[float]] width, --[[int]] interiorFlags, --[[float]] scale, --[[int]] duration) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SPAWNPOINTS_START_SEARCH_IN_ANGLED_AREA' due to disabled trusted mode")

	assert(type(x1) == "number", "Arg #1 (x1) must be a number.")
	assert(type(y1) == "number", "Arg #2 (y1) must be a number.")
	assert(type(z1) == "number", "Arg #3 (z1) must be a number.")
	assert(type(x2) == "number", "Arg #4 (x2) must be a number.")
	assert(type(y2) == "number", "Arg #5 (y2) must be a number.")
	assert(type(z2) == "number", "Arg #6 (z2) must be a number.")
	assert(type(width) == "number", "Arg #7 (width) must be a number.")
	assert(type(interiorFlags) == "number", "Arg #8 (interiorFlags) must be a number.")
	assert(type(scale) == "number", "Arg #9 (scale) must be a number.")
	assert(type(duration) == "number", "Arg #10 (duration) must be a number.")

	local result = native_call(0xB2AFF10216DEFA2F, x1, y1, z1, x2, y2, z2, width, interiorFlags, scale, duration)
end
natives.ped.spawnpoints_start_search_in_angled_area = natives.PED.SPAWNPOINTS_START_SEARCH_IN_ANGLED_AREA

function natives.PED.SPAWNPOINTS_CANCEL_SEARCH() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SPAWNPOINTS_CANCEL_SEARCH' due to disabled trusted mode")

	local result = native_call(0xFEE4A5459472A9F8)
end
natives.ped.spawnpoints_cancel_search = natives.PED.SPAWNPOINTS_CANCEL_SEARCH

function natives.PED.SPAWNPOINTS_IS_SEARCH_ACTIVE() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SPAWNPOINTS_IS_SEARCH_ACTIVE' due to disabled trusted mode")

	local result = native_call(0x3C67506996001F5E)
	return result:__tointeger() ~= 0
end
natives.ped.spawnpoints_is_search_active = natives.PED.SPAWNPOINTS_IS_SEARCH_ACTIVE

function natives.PED.SPAWNPOINTS_IS_SEARCH_COMPLETE() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SPAWNPOINTS_IS_SEARCH_COMPLETE' due to disabled trusted mode")

	local result = native_call(0xA586FBEB32A53DBB)
	return result:__tointeger() ~= 0
end
natives.ped.spawnpoints_is_search_complete = natives.PED.SPAWNPOINTS_IS_SEARCH_COMPLETE

function natives.PED.SPAWNPOINTS_IS_SEARCH_FAILED() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SPAWNPOINTS_IS_SEARCH_FAILED' due to disabled trusted mode")

	local result = native_call(0xF445DE8DA80A1792)
	return result:__tointeger() ~= 0
end
natives.ped.spawnpoints_is_search_failed = natives.PED.SPAWNPOINTS_IS_SEARCH_FAILED

function natives.PED.SPAWNPOINTS_GET_NUM_SEARCH_RESULTS() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SPAWNPOINTS_GET_NUM_SEARCH_RESULTS' due to disabled trusted mode")

	local result = native_call(0xA635C11B8C44AFC2)
	return result:__tointeger()
end
natives.ped.spawnpoints_get_num_search_results = natives.PED.SPAWNPOINTS_GET_NUM_SEARCH_RESULTS

function natives.PED.SPAWNPOINTS_GET_SEARCH_RESULT(--[[int]] randomInt, --[[float*]] x, --[[float*]] y, --[[float*]] z) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SPAWNPOINTS_GET_SEARCH_RESULT' due to disabled trusted mode")

	assert(type(randomInt) == "number", "Arg #1 (randomInt) must be a number.")
	assert(type(x) == "userdata", "Arg #2 (x) must be a userdata.")
	assert(type(y) == "userdata", "Arg #3 (y) must be a userdata.")
	assert(type(z) == "userdata", "Arg #4 (z) must be a userdata.")

	local result = native_call(0x280C7E3AC7F56E90, randomInt, x, y, z)
end
natives.ped.spawnpoints_get_search_result = natives.PED.SPAWNPOINTS_GET_SEARCH_RESULT

function natives.PED.SPAWNPOINTS_GET_SEARCH_RESULT_FLAGS(--[[int]] p0, --[[int*]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SPAWNPOINTS_GET_SEARCH_RESULT_FLAGS' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "userdata", "Arg #2 (p1) must be a userdata.")

	local result = native_call(0xB782F8238512BAD5, p0, p1)
end
natives.ped.spawnpoints_get_search_result_flags = natives.PED.SPAWNPOINTS_GET_SEARCH_RESULT_FLAGS

function natives.PED.SET_IK_TARGET(--[[Ped]] ped, --[[int]] ikIndex, --[[Entity]] entityLookAt, --[[int]] boneLookAt, --[[float]] offsetX, --[[float]] offsetY, --[[float]] offsetZ, --[[Any]] p7, --[[int]] blendInDuration, --[[int]] blendOutDuration) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_IK_TARGET' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(ikIndex) == "number", "Arg #2 (ikIndex) must be a number.")
	assert(type(entityLookAt) == "number", "Arg #3 (entityLookAt) must be a number.")
	assert(type(boneLookAt) == "number", "Arg #4 (boneLookAt) must be a number.")
	assert(type(offsetX) == "number", "Arg #5 (offsetX) must be a number.")
	assert(type(offsetY) == "number", "Arg #6 (offsetY) must be a number.")
	assert(type(offsetZ) == "number", "Arg #7 (offsetZ) must be a number.")
	assert(type(p7) == "number", "Arg #8 (p7) must be a number.")
	assert(type(blendInDuration) == "number", "Arg #9 (blendInDuration) must be a number.")
	assert(type(blendOutDuration) == "number", "Arg #10 (blendOutDuration) must be a number.")

	local result = native_call(0xC32779C16FCEECD9, ped, ikIndex, entityLookAt, boneLookAt, offsetX, offsetY, offsetZ, p7, blendInDuration, blendOutDuration)
end
natives.ped.set_ik_target = natives.PED.SET_IK_TARGET

function natives.PED.FORCE_INSTANT_LEG_IK_SETUP(--[[Ped]] ped) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.FORCE_INSTANT_LEG_IK_SETUP' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0xED3C76ADFA6D07C4, ped)
end
natives.ped.force_instant_leg_ik_setup = natives.PED.FORCE_INSTANT_LEG_IK_SETUP

function natives.PED.REQUEST_ACTION_MODE_ASSET(--[[const char*]] asset) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.REQUEST_ACTION_MODE_ASSET' due to disabled trusted mode")

	assert(type(asset) == "string", "Arg #1 (asset) must be a string.")

	local result = native_call(0x290E2780BB7AA598, asset)
end
natives.ped.request_action_mode_asset = natives.PED.REQUEST_ACTION_MODE_ASSET

function natives.PED.HAS_ACTION_MODE_ASSET_LOADED(--[[const char*]] asset) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.HAS_ACTION_MODE_ASSET_LOADED' due to disabled trusted mode")

	assert(type(asset) == "string", "Arg #1 (asset) must be a string.")

	local result = native_call(0xE4B5F4BF2CB24E65, asset)
	return result:__tointeger() ~= 0
end
natives.ped.has_action_mode_asset_loaded = natives.PED.HAS_ACTION_MODE_ASSET_LOADED

function natives.PED.REMOVE_ACTION_MODE_ASSET(--[[const char*]] asset) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.REMOVE_ACTION_MODE_ASSET' due to disabled trusted mode")

	assert(type(asset) == "string", "Arg #1 (asset) must be a string.")

	local result = native_call(0x13E940F88470FA51, asset)
end
natives.ped.remove_action_mode_asset = natives.PED.REMOVE_ACTION_MODE_ASSET

function natives.PED.REQUEST_STEALTH_MODE_ASSET(--[[const char*]] asset) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.REQUEST_STEALTH_MODE_ASSET' due to disabled trusted mode")

	assert(type(asset) == "string", "Arg #1 (asset) must be a string.")

	local result = native_call(0x2A0A62FCDEE16D4F, asset)
end
natives.ped.request_stealth_mode_asset = natives.PED.REQUEST_STEALTH_MODE_ASSET

function natives.PED.HAS_STEALTH_MODE_ASSET_LOADED(--[[const char*]] asset) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.HAS_STEALTH_MODE_ASSET_LOADED' due to disabled trusted mode")

	assert(type(asset) == "string", "Arg #1 (asset) must be a string.")

	local result = native_call(0xE977FC5B08AF3441, asset)
	return result:__tointeger() ~= 0
end
natives.ped.has_stealth_mode_asset_loaded = natives.PED.HAS_STEALTH_MODE_ASSET_LOADED

function natives.PED.REMOVE_STEALTH_MODE_ASSET(--[[const char*]] asset) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.REMOVE_STEALTH_MODE_ASSET' due to disabled trusted mode")

	assert(type(asset) == "string", "Arg #1 (asset) must be a string.")

	local result = native_call(0x9219857D21F0E842, asset)
end
natives.ped.remove_stealth_mode_asset = natives.PED.REMOVE_STEALTH_MODE_ASSET

function natives.PED.SET_PED_LOD_MULTIPLIER(--[[Ped]] ped, --[[float]] multiplier) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_LOD_MULTIPLIER' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(multiplier) == "number", "Arg #2 (multiplier) must be a number.")

	local result = native_call(0xDC2C5C242AAC342B, ped, multiplier)
end
natives.ped.set_ped_lod_multiplier = natives.PED.SET_PED_LOD_MULTIPLIER

function natives.PED.SET_PED_CAN_LOSE_PROPS_ON_DAMAGE(--[[Ped]] ped, --[[BOOL]] toggle, --[[int]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_CAN_LOSE_PROPS_ON_DAMAGE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0xE861D0B05C7662B8, ped, toggle, p2)
end
natives.ped.set_ped_can_lose_props_on_damage = natives.PED.SET_PED_CAN_LOSE_PROPS_ON_DAMAGE

function natives.PED.SET_FORCE_FOOTSTEP_UPDATE(--[[Ped]] ped, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_FORCE_FOOTSTEP_UPDATE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x129466ED55140F8D, ped, toggle)
end
natives.ped.set_force_footstep_update = natives.PED.SET_FORCE_FOOTSTEP_UPDATE

function natives.PED.SET_FORCE_STEP_TYPE(--[[Ped]] ped, --[[BOOL]] p1, --[[int]] type, --[[int]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_FORCE_STEP_TYPE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(type) == "number", "Arg #3 (type) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0xCB968B53FC7F916D, ped, p1, type, p3)
end
natives.ped.set_force_step_type = natives.PED.SET_FORCE_STEP_TYPE

function natives.PED.IS_ANY_HOSTILE_PED_NEAR_POINT(--[[Ped]] ped, --[[float]] x, --[[float]] y, --[[float]] z, --[[float]] radius) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_ANY_HOSTILE_PED_NEAR_POINT' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")
	assert(type(radius) == "number", "Arg #5 (radius) must be a number.")

	local result = native_call(0x68772DB2B2526F9F, ped, x, y, z, radius)
	return result:__tointeger() ~= 0
end
natives.ped.is_any_hostile_ped_near_point = natives.PED.IS_ANY_HOSTILE_PED_NEAR_POINT

--[[
Toggles config flag CPED_CONFIG_FLAG_CanPlayInCarIdles.
]]
function natives.PED.SET_PED_CAN_PLAY_IN_CAR_IDLES(--[[Ped]] ped, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_CAN_PLAY_IN_CAR_IDLES' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x820E9892A77E97CD, ped, toggle)
end
natives.ped.set_ped_can_play_in_car_idles = natives.PED.SET_PED_CAN_PLAY_IN_CAR_IDLES

function natives.PED.IS_TARGET_PED_IN_PERCEPTION_AREA(--[[Ped]] ped, --[[Ped]] targetPed, --[[float]] p2, --[[float]] p3, --[[float]] p4, --[[float]] p5) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_TARGET_PED_IN_PERCEPTION_AREA' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(targetPed) == "number", "Arg #2 (targetPed) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")

	local result = native_call(0x06087579E7AA85A9, ped, targetPed, p2, p3, p4, p5)
	return result:__tointeger() ~= 0
end
natives.ped.is_target_ped_in_perception_area = natives.PED.IS_TARGET_PED_IN_PERCEPTION_AREA

--[[
Min and max are usually 100.0 and 200.0
]]
function natives.PED.SET_POP_CONTROL_SPHERE_THIS_FRAME(--[[float]] x, --[[float]] y, --[[float]] z, --[[float]] min, --[[float]] max) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_POP_CONTROL_SPHERE_THIS_FRAME' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(min) == "number", "Arg #4 (min) must be a number.")
	assert(type(max) == "number", "Arg #5 (max) must be a number.")

	local result = native_call(0xD8C3BE3EE94CAF2D, x, y, z, min, max)
end
natives.ped.set_pop_control_sphere_this_frame = natives.PED.SET_POP_CONTROL_SPHERE_THIS_FRAME

function natives.PED.FORCE_ZERO_MASS_IN_COLLISIONS(--[[Ped]] ped) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.FORCE_ZERO_MASS_IN_COLLISIONS' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0xD33DAA36272177C4, ped)
end
natives.ped.force_zero_mass_in_collisions = natives.PED.FORCE_ZERO_MASS_IN_COLLISIONS

function natives.PED.SET_DISABLE_HIGH_FALL_DEATH(--[[Ped]] ped, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_DISABLE_HIGH_FALL_DEATH' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x711794453CFD692B, ped, toggle)
end
natives.ped.set_disable_high_fall_death = natives.PED.SET_DISABLE_HIGH_FALL_DEATH

function natives.PED.SET_PED_PHONE_PALETTE_IDX(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_PHONE_PALETTE_IDX' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x83A169EABCDB10A2, p0, p1)
end
natives.ped.set_ped_phone_palette_idx = natives.PED.SET_PED_PHONE_PALETTE_IDX

function natives.PED.SET_PED_STEER_BIAS(--[[Ped]] ped, --[[float]] value) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_STEER_BIAS' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(value) == "number", "Arg #2 (value) must be a number.")

	local result = native_call(0x288DF530C92DAD6F, ped, value)
end
natives.ped.set_ped_steer_bias = natives.PED.SET_PED_STEER_BIAS

function natives.PED.IS_PED_SWITCHING_WEAPON(--[[Ped]] Ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.IS_PED_SWITCHING_WEAPON' due to disabled trusted mode")

	assert(type(Ped) == "number", "Arg #1 (Ped) must be a number.")

	local result = native_call(0x3795688A307E1EB6, Ped)
	return result:__tointeger() ~= 0
end
natives.ped.is_ped_switching_weapon = natives.PED.IS_PED_SWITCHING_WEAPON

function natives.PED.SET_PED_TREATED_AS_FRIENDLY(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_PED_TREATED_AS_FRIENDLY' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0x0F62619393661D6E, p0, p1, p2)
end
natives.ped.set_ped_treated_as_friendly = natives.PED.SET_PED_TREATED_AS_FRIENDLY

function natives.PED.SET_DISABLE_PED_MAP_COLLISION(--[[Ped]] ped) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_DISABLE_PED_MAP_COLLISION' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0xDFE68C4B787E1BFB, ped)
end
natives.ped.set_disable_ped_map_collision = natives.PED.SET_DISABLE_PED_MAP_COLLISION

function natives.PED.ENABLE_MP_LIGHT(--[[Ped]] ped, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.ENABLE_MP_LIGHT' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xEE2476B9EE4A094F, ped, toggle)
end
natives.ped.enable_mp_light = natives.PED.ENABLE_MP_LIGHT

function natives.PED.GET_MP_LIGHT_ENABLED(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.GET_MP_LIGHT_ENABLED' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x88274C11CF0D866D, ped)
	return result:__tointeger() ~= 0
end
natives.ped.get_mp_light_enabled = natives.PED.GET_MP_LIGHT_ENABLED

function natives.PED.CLEAR_COVER_POINT_FOR_PED(--[[Ped]] ped) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.CLEAR_COVER_POINT_FOR_PED' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x637822DC2AFEEBF8, ped)
end
natives.ped.clear_cover_point_for_ped = natives.PED.CLEAR_COVER_POINT_FOR_PED

function natives.PED.SET_ALLOW_STUNT_JUMP_CAMERA(--[[Ped]] ped, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PED.SET_ALLOW_STUNT_JUMP_CAMERA' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xFAB944D4D481ACCB, ped, toggle)
end
natives.ped.set_allow_stunt_jump_camera = natives.PED.SET_ALLOW_STUNT_JUMP_CAMERA


natives.PHYSICS = {}
natives.physics = {}

--[[
Creates a rope at the specific position, that extends in the specified direction when not attached to any entities.
__

Add_Rope(pos.x,pos.y,pos.z,0.0,0.0,0.0,20.0,4,20.0,1.0,0.0,false,false,false,5.0,false,NULL)

When attached, Position<vector> does not matter
When attached, Angle<vector> does not matter

Rope Type:
4 and bellow is a thick rope
5 and up are small metal wires
0 crashes the game

Max_length - Rope is forced to this length, generally best to keep this the same as your rope length.

windingSpeed - Speed the Rope is being winded, using native START_ROPE_WINDING. Set positive for winding and negative for unwinding.

Rigid - If max length is zero, and this is set to false the rope will become rigid (it will force a specific distance, what ever length is, between the objects).

breakable - Whether or not shooting the rope will break it.

unkPtr - unknown ptr, always 0 in orig scripts
__

Lengths can be calculated like so:

float distance = abs(x1 - x2) + abs(y1 - y2) + abs(z1 - z2); // Rope length


NOTES:

Rope does NOT interact with anything you attach it to, in some cases it make interact with the world AFTER it breaks (seems to occur if you set the type to -1).

Rope will sometimes contract and fall to the ground like you'd expect it to, but since it doesn't interact with the world the effect is just jaring.
]]
function natives.PHYSICS.ADD_ROPE(--[[float]] x, --[[float]] y, --[[float]] z, --[[float]] rotX, --[[float]] rotY, --[[float]] rotZ, --[[float]] length, --[[int]] ropeType, --[[float]] maxLength, --[[float]] minLength, --[[float]] windingSpeed, --[[BOOL]] p11, --[[BOOL]] p12, --[[BOOL]] rigid, --[[float]] p14, --[[BOOL]] breakWhenShot, --[[Any*]] unkPtr) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PHYSICS.ADD_ROPE' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(rotX) == "number", "Arg #4 (rotX) must be a number.")
	assert(type(rotY) == "number", "Arg #5 (rotY) must be a number.")
	assert(type(rotZ) == "number", "Arg #6 (rotZ) must be a number.")
	assert(type(length) == "number", "Arg #7 (length) must be a number.")
	assert(type(ropeType) == "number", "Arg #8 (ropeType) must be a number.")
	assert(type(maxLength) == "number", "Arg #9 (maxLength) must be a number.")
	assert(type(minLength) == "number", "Arg #10 (minLength) must be a number.")
	assert(type(windingSpeed) == "number", "Arg #11 (windingSpeed) must be a number.")
	assert(type(p11) == "boolean", "Arg #12 (p11) must be a boolean.")
	assert(type(p12) == "boolean", "Arg #13 (p12) must be a boolean.")
	assert(type(rigid) == "boolean", "Arg #14 (rigid) must be a boolean.")
	assert(type(p14) == "number", "Arg #15 (p14) must be a number.")
	assert(type(breakWhenShot) == "boolean", "Arg #16 (breakWhenShot) must be a boolean.")
	assert(type(unkPtr) == "userdata", "Arg #17 (unkPtr) must be a userdata.")

	local result = native_call(0xE832D760399EB220, x, y, z, rotX, rotY, rotZ, length, ropeType, maxLength, minLength, windingSpeed, p11, p12, rigid, p14, breakWhenShot, unkPtr)
	return result:__tointeger()
end
natives.physics.add_rope = natives.PHYSICS.ADD_ROPE

function natives.PHYSICS.DELETE_ROPE(--[[int*]] ropeId) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PHYSICS.DELETE_ROPE' due to disabled trusted mode")

	assert(type(ropeId) == "userdata", "Arg #1 (ropeId) must be a userdata.")

	local result = native_call(0x52B4829281364649, ropeId)
end
natives.physics.delete_rope = natives.PHYSICS.DELETE_ROPE

function natives.PHYSICS.DELETE_CHILD_ROPE(--[[int]] ropeId) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PHYSICS.DELETE_CHILD_ROPE' due to disabled trusted mode")

	assert(type(ropeId) == "number", "Arg #1 (ropeId) must be a number.")

	local result = native_call(0xAA5D6B1888E4DB20, ropeId)
end
natives.physics.delete_child_rope = natives.PHYSICS.DELETE_CHILD_ROPE

function natives.PHYSICS.DOES_ROPE_EXIST(--[[int*]] ropeId) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PHYSICS.DOES_ROPE_EXIST' due to disabled trusted mode")

	assert(type(ropeId) == "userdata", "Arg #1 (ropeId) must be a userdata.")

	local result = native_call(0xFD5448BE3111ED96, ropeId)
	return result:__tointeger() ~= 0
end
natives.physics.does_rope_exist = natives.PHYSICS.DOES_ROPE_EXIST

function natives.PHYSICS.ROPE_DRAW_ENABLED(--[[int*]] ropeId, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PHYSICS.ROPE_DRAW_ENABLED' due to disabled trusted mode")

	assert(type(ropeId) == "userdata", "Arg #1 (ropeId) must be a userdata.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0xA1AE736541B0FCA3, ropeId, p1)
end
natives.physics.rope_draw_enabled = natives.PHYSICS.ROPE_DRAW_ENABLED

function natives.PHYSICS.ROPE_DRAW_SHADOW_ENABLED(--[[int*]] ropeId, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PHYSICS.ROPE_DRAW_SHADOW_ENABLED' due to disabled trusted mode")

	assert(type(ropeId) == "userdata", "Arg #1 (ropeId) must be a userdata.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xF159A63806BB5BA8, ropeId, toggle)
end
natives.physics.rope_draw_shadow_enabled = natives.PHYSICS.ROPE_DRAW_SHADOW_ENABLED

--[[
Rope presets can be found in the gamefiles. One example is "ropeFamily3", it is NOT a hash but rather a string.
]]
function natives.PHYSICS.LOAD_ROPE_DATA(--[[int]] ropeId, --[[const char*]] rope_preset) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PHYSICS.LOAD_ROPE_DATA' due to disabled trusted mode")

	assert(type(ropeId) == "number", "Arg #1 (ropeId) must be a number.")
	assert(type(rope_preset) == "string", "Arg #2 (rope_preset) must be a string.")

	local result = native_call(0xCBB203C04D1ABD27, ropeId, rope_preset)
end
natives.physics.load_rope_data = natives.PHYSICS.LOAD_ROPE_DATA

function natives.PHYSICS.PIN_ROPE_VERTEX(--[[int]] ropeId, --[[int]] vertex, --[[float]] x, --[[float]] y, --[[float]] z) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PHYSICS.PIN_ROPE_VERTEX' due to disabled trusted mode")

	assert(type(ropeId) == "number", "Arg #1 (ropeId) must be a number.")
	assert(type(vertex) == "number", "Arg #2 (vertex) must be a number.")
	assert(type(x) == "number", "Arg #3 (x) must be a number.")
	assert(type(y) == "number", "Arg #4 (y) must be a number.")
	assert(type(z) == "number", "Arg #5 (z) must be a number.")

	local result = native_call(0x2B320CF14146B69A, ropeId, vertex, x, y, z)
end
natives.physics.pin_rope_vertex = natives.PHYSICS.PIN_ROPE_VERTEX

function natives.PHYSICS.UNPIN_ROPE_VERTEX(--[[int]] ropeId, --[[int]] vertex) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PHYSICS.UNPIN_ROPE_VERTEX' due to disabled trusted mode")

	assert(type(ropeId) == "number", "Arg #1 (ropeId) must be a number.")
	assert(type(vertex) == "number", "Arg #2 (vertex) must be a number.")

	local result = native_call(0x4B5AE2EEE4A8F180, ropeId, vertex)
end
natives.physics.unpin_rope_vertex = natives.PHYSICS.UNPIN_ROPE_VERTEX

function natives.PHYSICS.GET_ROPE_VERTEX_COUNT(--[[int]] ropeId) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PHYSICS.GET_ROPE_VERTEX_COUNT' due to disabled trusted mode")

	assert(type(ropeId) == "number", "Arg #1 (ropeId) must be a number.")

	local result = native_call(0x3655F544CD30F0B5, ropeId)
	return result:__tointeger()
end
natives.physics.get_rope_vertex_count = natives.PHYSICS.GET_ROPE_VERTEX_COUNT

--[[
Attaches entity 1 to entity 2.
]]
function natives.PHYSICS.ATTACH_ENTITIES_TO_ROPE(--[[int]] ropeId, --[[Entity]] ent1, --[[Entity]] ent2, --[[float]] ent1_x, --[[float]] ent1_y, --[[float]] ent1_z, --[[float]] ent2_x, --[[float]] ent2_y, --[[float]] ent2_z, --[[float]] length, --[[BOOL]] p10, --[[BOOL]] p11, --[[Any*]] p12, --[[Any*]] p13) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PHYSICS.ATTACH_ENTITIES_TO_ROPE' due to disabled trusted mode")

	assert(type(ropeId) == "number", "Arg #1 (ropeId) must be a number.")
	assert(type(ent1) == "number", "Arg #2 (ent1) must be a number.")
	assert(type(ent2) == "number", "Arg #3 (ent2) must be a number.")
	assert(type(ent1_x) == "number", "Arg #4 (ent1_x) must be a number.")
	assert(type(ent1_y) == "number", "Arg #5 (ent1_y) must be a number.")
	assert(type(ent1_z) == "number", "Arg #6 (ent1_z) must be a number.")
	assert(type(ent2_x) == "number", "Arg #7 (ent2_x) must be a number.")
	assert(type(ent2_y) == "number", "Arg #8 (ent2_y) must be a number.")
	assert(type(ent2_z) == "number", "Arg #9 (ent2_z) must be a number.")
	assert(type(length) == "number", "Arg #10 (length) must be a number.")
	assert(type(p10) == "boolean", "Arg #11 (p10) must be a boolean.")
	assert(type(p11) == "boolean", "Arg #12 (p11) must be a boolean.")
	assert(type(p12) == "userdata", "Arg #13 (p12) must be a userdata.")
	assert(type(p13) == "userdata", "Arg #14 (p13) must be a userdata.")

	local result = native_call(0x3D95EC8B6D940AC3, ropeId, ent1, ent2, ent1_x, ent1_y, ent1_z, ent2_x, ent2_y, ent2_z, length, p10, p11, p12, p13)
end
natives.physics.attach_entities_to_rope = natives.PHYSICS.ATTACH_ENTITIES_TO_ROPE

--[[
The position supplied can be anywhere, and the entity should anchor relative to that point from it's origin.
]]
function natives.PHYSICS.ATTACH_ROPE_TO_ENTITY(--[[int]] ropeId, --[[Entity]] entity, --[[float]] x, --[[float]] y, --[[float]] z, --[[BOOL]] p5) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PHYSICS.ATTACH_ROPE_TO_ENTITY' due to disabled trusted mode")

	assert(type(ropeId) == "number", "Arg #1 (ropeId) must be a number.")
	assert(type(entity) == "number", "Arg #2 (entity) must be a number.")
	assert(type(x) == "number", "Arg #3 (x) must be a number.")
	assert(type(y) == "number", "Arg #4 (y) must be a number.")
	assert(type(z) == "number", "Arg #5 (z) must be a number.")
	assert(type(p5) == "boolean", "Arg #6 (p5) must be a boolean.")

	local result = native_call(0x4B490A6832559A65, ropeId, entity, x, y, z, p5)
end
natives.physics.attach_rope_to_entity = natives.PHYSICS.ATTACH_ROPE_TO_ENTITY

function natives.PHYSICS.DETACH_ROPE_FROM_ENTITY(--[[int]] ropeId, --[[Entity]] entity) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PHYSICS.DETACH_ROPE_FROM_ENTITY' due to disabled trusted mode")

	assert(type(ropeId) == "number", "Arg #1 (ropeId) must be a number.")
	assert(type(entity) == "number", "Arg #2 (entity) must be a number.")

	local result = native_call(0xBCF3026912A8647D, ropeId, entity)
end
natives.physics.detach_rope_from_entity = natives.PHYSICS.DETACH_ROPE_FROM_ENTITY

function natives.PHYSICS.ROPE_SET_UPDATE_PINVERTS(--[[int]] ropeId) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PHYSICS.ROPE_SET_UPDATE_PINVERTS' due to disabled trusted mode")

	assert(type(ropeId) == "number", "Arg #1 (ropeId) must be a number.")

	local result = native_call(0xC8D667EE52114ABA, ropeId)
end
natives.physics.rope_set_update_pinverts = natives.PHYSICS.ROPE_SET_UPDATE_PINVERTS

function natives.PHYSICS.ROPE_SET_UPDATE_ORDER(--[[int]] ropeId, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PHYSICS.ROPE_SET_UPDATE_ORDER' due to disabled trusted mode")

	assert(type(ropeId) == "number", "Arg #1 (ropeId) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xDC57A637A20006ED, ropeId, p1)
end
natives.physics.rope_set_update_order = natives.PHYSICS.ROPE_SET_UPDATE_ORDER

function natives.PHYSICS.ROPE_SET_SMOOTH_REELIN(--[[int]] ropeId, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PHYSICS.ROPE_SET_SMOOTH_REELIN' due to disabled trusted mode")

	assert(type(ropeId) == "number", "Arg #1 (ropeId) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0x36CCB9BE67B970FD, ropeId, p1)
end
natives.physics.rope_set_smooth_reelin = natives.PHYSICS.ROPE_SET_SMOOTH_REELIN

function natives.PHYSICS.IS_ROPE_ATTACHED_AT_BOTH_ENDS(--[[int*]] ropeId) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PHYSICS.IS_ROPE_ATTACHED_AT_BOTH_ENDS' due to disabled trusted mode")

	assert(type(ropeId) == "userdata", "Arg #1 (ropeId) must be a userdata.")

	local result = native_call(0x84DE3B5FB3E666F0, ropeId)
	return result:__tointeger() ~= 0
end
natives.physics.is_rope_attached_at_both_ends = natives.PHYSICS.IS_ROPE_ATTACHED_AT_BOTH_ENDS

function natives.PHYSICS.GET_ROPE_LAST_VERTEX_COORD(--[[int]] ropeId) -- Returns Vector3
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PHYSICS.GET_ROPE_LAST_VERTEX_COORD' due to disabled trusted mode")

	assert(type(ropeId) == "number", "Arg #1 (ropeId) must be a number.")

	local result = native_call(0x21BB0FBD3E217C2D, ropeId)
	return result:__tov3()
end
natives.physics.get_rope_last_vertex_coord = natives.PHYSICS.GET_ROPE_LAST_VERTEX_COORD

function natives.PHYSICS.GET_ROPE_VERTEX_COORD(--[[int]] ropeId, --[[int]] vertex) -- Returns Vector3
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PHYSICS.GET_ROPE_VERTEX_COORD' due to disabled trusted mode")

	assert(type(ropeId) == "number", "Arg #1 (ropeId) must be a number.")
	assert(type(vertex) == "number", "Arg #2 (vertex) must be a number.")

	local result = native_call(0xEA61CA8E80F09E4D, ropeId, vertex)
	return result:__tov3()
end
natives.physics.get_rope_vertex_coord = natives.PHYSICS.GET_ROPE_VERTEX_COORD

function natives.PHYSICS.START_ROPE_WINDING(--[[int]] ropeId) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PHYSICS.START_ROPE_WINDING' due to disabled trusted mode")

	assert(type(ropeId) == "number", "Arg #1 (ropeId) must be a number.")

	local result = native_call(0x1461C72C889E343E, ropeId)
end
natives.physics.start_rope_winding = natives.PHYSICS.START_ROPE_WINDING

function natives.PHYSICS.STOP_ROPE_WINDING(--[[int]] ropeId) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PHYSICS.STOP_ROPE_WINDING' due to disabled trusted mode")

	assert(type(ropeId) == "number", "Arg #1 (ropeId) must be a number.")

	local result = native_call(0xCB2D4AB84A19AA7C, ropeId)
end
natives.physics.stop_rope_winding = natives.PHYSICS.STOP_ROPE_WINDING

function natives.PHYSICS.START_ROPE_UNWINDING_FRONT(--[[int]] ropeId) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PHYSICS.START_ROPE_UNWINDING_FRONT' due to disabled trusted mode")

	assert(type(ropeId) == "number", "Arg #1 (ropeId) must be a number.")

	local result = native_call(0x538D1179EC1AA9A9, ropeId)
end
natives.physics.start_rope_unwinding_front = natives.PHYSICS.START_ROPE_UNWINDING_FRONT

function natives.PHYSICS.STOP_ROPE_UNWINDING_FRONT(--[[int]] ropeId) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PHYSICS.STOP_ROPE_UNWINDING_FRONT' due to disabled trusted mode")

	assert(type(ropeId) == "number", "Arg #1 (ropeId) must be a number.")

	local result = native_call(0xFFF3A50779EFBBB3, ropeId)
end
natives.physics.stop_rope_unwinding_front = natives.PHYSICS.STOP_ROPE_UNWINDING_FRONT

function natives.PHYSICS.ROPE_CONVERT_TO_SIMPLE(--[[int]] ropeId) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PHYSICS.ROPE_CONVERT_TO_SIMPLE' due to disabled trusted mode")

	assert(type(ropeId) == "number", "Arg #1 (ropeId) must be a number.")

	local result = native_call(0x5389D48EFA2F079A, ropeId)
end
natives.physics.rope_convert_to_simple = natives.PHYSICS.ROPE_CONVERT_TO_SIMPLE

--[[
Loads rope textures for all ropes in the current scene.
]]
function natives.PHYSICS.ROPE_LOAD_TEXTURES() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PHYSICS.ROPE_LOAD_TEXTURES' due to disabled trusted mode")

	local result = native_call(0x9B9039DBF2D258C1)
end
natives.physics.rope_load_textures = natives.PHYSICS.ROPE_LOAD_TEXTURES

function natives.PHYSICS.ROPE_ARE_TEXTURES_LOADED() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PHYSICS.ROPE_ARE_TEXTURES_LOADED' due to disabled trusted mode")

	local result = native_call(0xF2D0E6A75CC05597)
	return result:__tointeger() ~= 0
end
natives.physics.rope_are_textures_loaded = natives.PHYSICS.ROPE_ARE_TEXTURES_LOADED

--[[
Unloads rope textures for all ropes in the current scene.
]]
function natives.PHYSICS.ROPE_UNLOAD_TEXTURES() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PHYSICS.ROPE_UNLOAD_TEXTURES' due to disabled trusted mode")

	local result = native_call(0x6CE36C35C1AC8163)
end
natives.physics.rope_unload_textures = natives.PHYSICS.ROPE_UNLOAD_TEXTURES

function natives.PHYSICS.DOES_SCRIPT_OWN_ROPE(--[[int]] ropeId) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PHYSICS.DOES_SCRIPT_OWN_ROPE' due to disabled trusted mode")

	assert(type(ropeId) == "number", "Arg #1 (ropeId) must be a number.")

	local result = native_call(0x271C9D3ACA5D6409, ropeId)
	return result:__tointeger() ~= 0
end
natives.physics.does_script_own_rope = natives.PHYSICS.DOES_SCRIPT_OWN_ROPE

function natives.PHYSICS.ROPE_ATTACH_VIRTUAL_BOUND_GEOM(--[[int]] ropeId, --[[int]] p1, --[[float]] p2, --[[float]] p3, --[[float]] p4, --[[float]] p5, --[[float]] p6, --[[float]] p7, --[[float]] p8, --[[float]] p9, --[[float]] p10, --[[float]] p11, --[[float]] p12, --[[float]] p13) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PHYSICS.ROPE_ATTACH_VIRTUAL_BOUND_GEOM' due to disabled trusted mode")

	assert(type(ropeId) == "number", "Arg #1 (ropeId) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")
	assert(type(p6) == "number", "Arg #7 (p6) must be a number.")
	assert(type(p7) == "number", "Arg #8 (p7) must be a number.")
	assert(type(p8) == "number", "Arg #9 (p8) must be a number.")
	assert(type(p9) == "number", "Arg #10 (p9) must be a number.")
	assert(type(p10) == "number", "Arg #11 (p10) must be a number.")
	assert(type(p11) == "number", "Arg #12 (p11) must be a number.")
	assert(type(p12) == "number", "Arg #13 (p12) must be a number.")
	assert(type(p13) == "number", "Arg #14 (p13) must be a number.")

	local result = native_call(0xBC0CE682D4D05650, ropeId, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13)
end
natives.physics.rope_attach_virtual_bound_geom = natives.PHYSICS.ROPE_ATTACH_VIRTUAL_BOUND_GEOM

function natives.PHYSICS.ROPE_CHANGE_SCRIPT_OWNER(--[[Any]] p0, --[[BOOL]] p1, --[[BOOL]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PHYSICS.ROPE_CHANGE_SCRIPT_OWNER' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")

	local result = native_call(0xB1B6216CA2E7B55E, p0, p1, p2)
end
natives.physics.rope_change_script_owner = natives.PHYSICS.ROPE_CHANGE_SCRIPT_OWNER

function natives.PHYSICS.ROPE_SET_REFFRAMEVELOCITY_COLLIDERORDER(--[[int]] ropeId, --[[int]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PHYSICS.ROPE_SET_REFFRAMEVELOCITY_COLLIDERORDER' due to disabled trusted mode")

	assert(type(ropeId) == "number", "Arg #1 (ropeId) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xB743F735C03D7810, ropeId, p1)
end
natives.physics.rope_set_refframevelocity_colliderorder = natives.PHYSICS.ROPE_SET_REFFRAMEVELOCITY_COLLIDERORDER

function natives.PHYSICS.ROPE_GET_DISTANCE_BETWEEN_ENDS(--[[int]] ropeId) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PHYSICS.ROPE_GET_DISTANCE_BETWEEN_ENDS' due to disabled trusted mode")

	assert(type(ropeId) == "number", "Arg #1 (ropeId) must be a number.")

	local result = native_call(0x73040398DFF9A4A6, ropeId)
	return result:__tonumber()
end
natives.physics.rope_get_distance_between_ends = natives.PHYSICS.ROPE_GET_DISTANCE_BETWEEN_ENDS

--[[
Forces a rope to a certain length.
]]
function natives.PHYSICS.ROPE_FORCE_LENGTH(--[[int]] ropeId, --[[float]] length) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PHYSICS.ROPE_FORCE_LENGTH' due to disabled trusted mode")

	assert(type(ropeId) == "number", "Arg #1 (ropeId) must be a number.")
	assert(type(length) == "number", "Arg #2 (length) must be a number.")

	local result = native_call(0xD009F759A723DB1B, ropeId, length)
end
natives.physics.rope_force_length = natives.PHYSICS.ROPE_FORCE_LENGTH

--[[
Reset a rope to a certain length.
]]
function natives.PHYSICS.ROPE_RESET_LENGTH(--[[int]] ropeId, --[[float]] length) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PHYSICS.ROPE_RESET_LENGTH' due to disabled trusted mode")

	assert(type(ropeId) == "number", "Arg #1 (ropeId) must be a number.")
	assert(type(length) == "number", "Arg #2 (length) must be a number.")

	local result = native_call(0xC16DE94D9BEA14A0, ropeId, length)
end
natives.physics.rope_reset_length = natives.PHYSICS.ROPE_RESET_LENGTH

function natives.PHYSICS.APPLY_IMPULSE_TO_CLOTH(--[[float]] posX, --[[float]] posY, --[[float]] posZ, --[[float]] vecX, --[[float]] vecY, --[[float]] vecZ, --[[float]] impulse) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PHYSICS.APPLY_IMPULSE_TO_CLOTH' due to disabled trusted mode")

	assert(type(posX) == "number", "Arg #1 (posX) must be a number.")
	assert(type(posY) == "number", "Arg #2 (posY) must be a number.")
	assert(type(posZ) == "number", "Arg #3 (posZ) must be a number.")
	assert(type(vecX) == "number", "Arg #4 (vecX) must be a number.")
	assert(type(vecY) == "number", "Arg #5 (vecY) must be a number.")
	assert(type(vecZ) == "number", "Arg #6 (vecZ) must be a number.")
	assert(type(impulse) == "number", "Arg #7 (impulse) must be a number.")

	local result = native_call(0xE37F721824571784, posX, posY, posZ, vecX, vecY, vecZ, impulse)
end
natives.physics.apply_impulse_to_cloth = natives.PHYSICS.APPLY_IMPULSE_TO_CLOTH

function natives.PHYSICS.SET_DAMPING(--[[Entity]] entity, --[[int]] vertex, --[[float]] value) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PHYSICS.SET_DAMPING' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(vertex) == "number", "Arg #2 (vertex) must be a number.")
	assert(type(value) == "number", "Arg #3 (value) must be a number.")

	local result = native_call(0xEEA3B200A6FEB65B, entity, vertex, value)
end
natives.physics.set_damping = natives.PHYSICS.SET_DAMPING

function natives.PHYSICS.ACTIVATE_PHYSICS(--[[Entity]] entity) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PHYSICS.ACTIVATE_PHYSICS' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0x710311ADF0E20730, entity)
end
natives.physics.activate_physics = natives.PHYSICS.ACTIVATE_PHYSICS

function natives.PHYSICS.SET_CGOFFSET(--[[Entity]] entity, --[[float]] x, --[[float]] y, --[[float]] z) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PHYSICS.SET_CGOFFSET' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")

	local result = native_call(0xD8FA3908D7B86904, entity, x, y, z)
end
natives.physics.set_cgoffset = natives.PHYSICS.SET_CGOFFSET

function natives.PHYSICS.GET_CGOFFSET(--[[Entity]] entity) -- Returns Vector3
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PHYSICS.GET_CGOFFSET' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0x8214A4B5A7A33612, entity)
	return result:__tov3()
end
natives.physics.get_cgoffset = natives.PHYSICS.GET_CGOFFSET

function natives.PHYSICS.SET_CG_AT_BOUNDCENTER(--[[Entity]] entity) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PHYSICS.SET_CG_AT_BOUNDCENTER' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0xBE520D9761FF811F, entity)
end
natives.physics.set_cg_at_boundcenter = natives.PHYSICS.SET_CG_AT_BOUNDCENTER

function natives.PHYSICS.BREAK_ENTITY_GLASS(--[[Entity]] entity, --[[float]] p1, --[[float]] p2, --[[float]] p3, --[[float]] p4, --[[float]] p5, --[[float]] p6, --[[float]] p7, --[[float]] p8, --[[Any]] p9, --[[BOOL]] p10) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PHYSICS.BREAK_ENTITY_GLASS' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")
	assert(type(p6) == "number", "Arg #7 (p6) must be a number.")
	assert(type(p7) == "number", "Arg #8 (p7) must be a number.")
	assert(type(p8) == "number", "Arg #9 (p8) must be a number.")
	assert(type(p9) == "number", "Arg #10 (p9) must be a number.")
	assert(type(p10) == "boolean", "Arg #11 (p10) must be a boolean.")

	local result = native_call(0x2E648D16F6E308F3, entity, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10)
end
natives.physics.break_entity_glass = natives.PHYSICS.BREAK_ENTITY_GLASS

function natives.PHYSICS.GET_IS_ENTITY_A_FRAG(--[[Object]] object) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PHYSICS.GET_IS_ENTITY_A_FRAG' due to disabled trusted mode")

	assert(type(object) == "number", "Arg #1 (object) must be a number.")

	local result = native_call(0x0C112765300C7E1E, object)
	return result:__tointeger() ~= 0
end
natives.physics.get_is_entity_a_frag = natives.PHYSICS.GET_IS_ENTITY_A_FRAG

function natives.PHYSICS.SET_DISABLE_BREAKING(--[[Object]] object, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PHYSICS.SET_DISABLE_BREAKING' due to disabled trusted mode")

	assert(type(object) == "number", "Arg #1 (object) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x5CEC1A84620E7D5B, object, toggle)
end
natives.physics.set_disable_breaking = natives.PHYSICS.SET_DISABLE_BREAKING

function natives.PHYSICS.RESET_DISABLE_BREAKING(--[[Object]] object) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PHYSICS.RESET_DISABLE_BREAKING' due to disabled trusted mode")

	assert(type(object) == "number", "Arg #1 (object) must be a number.")

	local result = native_call(0xCC6E963682533882, object)
end
natives.physics.reset_disable_breaking = natives.PHYSICS.RESET_DISABLE_BREAKING

function natives.PHYSICS.SET_DISABLE_FRAG_DAMAGE(--[[Object]] object, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PHYSICS.SET_DISABLE_FRAG_DAMAGE' due to disabled trusted mode")

	assert(type(object) == "number", "Arg #1 (object) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x01BA3AED21C16CFB, object, toggle)
end
natives.physics.set_disable_frag_damage = natives.PHYSICS.SET_DISABLE_FRAG_DAMAGE

--[[
PED_RAGDOLL_BUMP Proof?
]]
function natives.PHYSICS.SET_USE_KINEMATIC_PHYSICS(--[[Entity]] entity, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PHYSICS.SET_USE_KINEMATIC_PHYSICS' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x15F944730C832252, entity, toggle)
end
natives.physics.set_use_kinematic_physics = natives.PHYSICS.SET_USE_KINEMATIC_PHYSICS

function natives.PHYSICS.SET_IN_STUNT_MODE(--[[BOOL]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PHYSICS.SET_IN_STUNT_MODE' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0x9EBD751E5787BAF2, p0)
end
natives.physics.set_in_stunt_mode = natives.PHYSICS.SET_IN_STUNT_MODE

--[[
Related to the lower-end of a vehicles fTractionCurve, e.g., from standing starts and acceleration from low/zero speeds.
]]
function natives.PHYSICS.SET_IN_ARENA_MODE(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PHYSICS.SET_IN_ARENA_MODE' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0xAA6A6098851C396F, toggle)
end
natives.physics.set_in_arena_mode = natives.PHYSICS.SET_IN_ARENA_MODE


natives.PLAYER = {}
natives.player = {}

--[[
Gets the ped for a specified player index.
]]
function natives.PLAYER.GET_PLAYER_PED(--[[Player]] player) -- Returns Ped
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.GET_PLAYER_PED' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0x43A66C31C68491C0, player)
	return result:__tointeger()
end
natives.player.get_player_ped = natives.PLAYER.GET_PLAYER_PED

--[[
Does the same like PLAYER::GET_PLAYER_PED
]]
function natives.PLAYER.GET_PLAYER_PED_SCRIPT_INDEX(--[[Player]] player) -- Returns Ped
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.GET_PLAYER_PED_SCRIPT_INDEX' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0x50FAC3A3E030A6E1, player)
	return result:__tointeger()
end
natives.player.get_player_ped_script_index = natives.PLAYER.GET_PLAYER_PED_SCRIPT_INDEX

--[[
Set the model for a specific Player. Be aware that this will destroy the current Ped for the Player and create a new one, any reference to the old ped should be reset
Make sure to request the model first and wait until it has loaded.
]]
function natives.PLAYER.SET_PLAYER_MODEL(--[[Player]] player, --[[Hash]] model) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SET_PLAYER_MODEL' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(model) == "number", "Arg #2 (model) must be a number.")

	local result = native_call(0x00A1CADD00108836, player, model)
end
natives.player.set_player_model = natives.PLAYER.SET_PLAYER_MODEL

function natives.PLAYER.CHANGE_PLAYER_PED(--[[Player]] player, --[[Ped]] ped, --[[BOOL]] p2, --[[BOOL]] resetDamage) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.CHANGE_PLAYER_PED' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(ped) == "number", "Arg #2 (ped) must be a number.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")
	assert(type(resetDamage) == "boolean", "Arg #4 (resetDamage) must be a boolean.")

	local result = native_call(0x048189FAC643DEEE, player, ped, p2, resetDamage)
end
natives.player.change_player_ped = natives.PLAYER.CHANGE_PLAYER_PED

function natives.PLAYER.GET_PLAYER_RGB_COLOUR(--[[Player]] player, --[[int*]] r, --[[int*]] g, --[[int*]] b) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.GET_PLAYER_RGB_COLOUR' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(r) == "userdata", "Arg #2 (r) must be a userdata.")
	assert(type(g) == "userdata", "Arg #3 (g) must be a userdata.")
	assert(type(b) == "userdata", "Arg #4 (b) must be a userdata.")

	local result = native_call(0xE902EF951DCE178F, player, r, g, b)
end
natives.player.get_player_rgb_colour = natives.PLAYER.GET_PLAYER_RGB_COLOUR

--[[
Gets the number of players in the current session.
If not multiplayer, always returns 1.
]]
function natives.PLAYER.GET_NUMBER_OF_PLAYERS() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.GET_NUMBER_OF_PLAYERS' due to disabled trusted mode")

	local result = native_call(0x407C7F91DDB46C16)
	return result:__tointeger()
end
natives.player.get_number_of_players = natives.PLAYER.GET_NUMBER_OF_PLAYERS

--[[
Gets the player's team.
Does nothing in singleplayer.
]]
function natives.PLAYER.GET_PLAYER_TEAM(--[[Player]] player) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.GET_PLAYER_TEAM' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0x37039302F4E0A008, player)
	return result:__tointeger()
end
natives.player.get_player_team = natives.PLAYER.GET_PLAYER_TEAM

--[[
Set player team on deathmatch and last team standing..
]]
function natives.PLAYER.SET_PLAYER_TEAM(--[[Player]] player, --[[int]] team) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SET_PLAYER_TEAM' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(team) == "number", "Arg #2 (team) must be a number.")

	local result = native_call(0x0299FA38396A4940, player, team)
end
natives.player.set_player_team = natives.PLAYER.SET_PLAYER_TEAM

function natives.PLAYER.GET_NUMBER_OF_PLAYERS_IN_TEAM(--[[int]] team) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.GET_NUMBER_OF_PLAYERS_IN_TEAM' due to disabled trusted mode")

	assert(type(team) == "number", "Arg #1 (team) must be a number.")

	local result = native_call(0x1FC200409F10E6F1, team)
	return result:__tointeger()
end
natives.player.get_number_of_players_in_team = natives.PLAYER.GET_NUMBER_OF_PLAYERS_IN_TEAM

function natives.PLAYER.GET_PLAYER_NAME(--[[Player]] player) -- Returns const char*
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.GET_PLAYER_NAME' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0x6D0DE6A7B5DA71F8, player)
	return result:__tostring(true)
end
natives.player.get_player_name = natives.PLAYER.GET_PLAYER_NAME

--[[
Remnant from GTA IV. Does nothing in GTA V.
]]
function natives.PLAYER.GET_WANTED_LEVEL_RADIUS(--[[Player]] player) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.GET_WANTED_LEVEL_RADIUS' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0x085DEB493BE80812, player)
	return result:__tonumber()
end
natives.player.get_wanted_level_radius = natives.PLAYER.GET_WANTED_LEVEL_RADIUS

function natives.PLAYER.GET_PLAYER_WANTED_CENTRE_POSITION(--[[Player]] player) -- Returns Vector3
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.GET_PLAYER_WANTED_CENTRE_POSITION' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0x0C92BA89F1AF26F8, player)
	return result:__tov3()
end
natives.player.get_player_wanted_centre_position = natives.PLAYER.GET_PLAYER_WANTED_CENTRE_POSITION

--[[
# Predominant call signatures
PLAYER::SET_PLAYER_WANTED_CENTRE_POSITION(PLAYER::PLAYER_ID(), ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1));

# Parameter value ranges
P0: PLAYER::PLAYER_ID()
P1: ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1)
P2: Not set by any call
]]
function natives.PLAYER.SET_PLAYER_WANTED_CENTRE_POSITION(--[[Player]] player, --[[Vector3*]] position, --[[BOOL]] p2, --[[BOOL]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SET_PLAYER_WANTED_CENTRE_POSITION' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(position) == "userdata", "Arg #2 (position) must be a userdata.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")
	assert(type(p3) == "boolean", "Arg #4 (p3) must be a boolean.")

	local result = native_call(0x520E541A97A13354, player, position, p2, p3)
end
natives.player.set_player_wanted_centre_position = natives.PLAYER.SET_PLAYER_WANTED_CENTRE_POSITION

--[[
Drft
]]
function natives.PLAYER.GET_WANTED_LEVEL_THRESHOLD(--[[int]] wantedLevel) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.GET_WANTED_LEVEL_THRESHOLD' due to disabled trusted mode")

	assert(type(wantedLevel) == "number", "Arg #1 (wantedLevel) must be a number.")

	local result = native_call(0xFDD179EAF45B556C, wantedLevel)
	return result:__tointeger()
end
natives.player.get_wanted_level_threshold = natives.PLAYER.GET_WANTED_LEVEL_THRESHOLD

--[[
Call SET_PLAYER_WANTED_LEVEL_NOW for immediate effect

wantedLevel is an integer value representing 0 to 5 stars even though the game supports the 6th wanted level but no police will appear since no definitions are present for it in the game files

disableNoMission-  Disables When Off Mission- appears to always be false

]]
function natives.PLAYER.SET_PLAYER_WANTED_LEVEL(--[[Player]] player, --[[int]] wantedLevel, --[[BOOL]] disableNoMission) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SET_PLAYER_WANTED_LEVEL' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(wantedLevel) == "number", "Arg #2 (wantedLevel) must be a number.")
	assert(type(disableNoMission) == "boolean", "Arg #3 (disableNoMission) must be a boolean.")

	local result = native_call(0x39FF19C64EF7DA5B, player, wantedLevel, disableNoMission)
end
natives.player.set_player_wanted_level = natives.PLAYER.SET_PLAYER_WANTED_LEVEL

--[[
p2 is always false in R* scripts
]]
function natives.PLAYER.SET_PLAYER_WANTED_LEVEL_NO_DROP(--[[Player]] player, --[[int]] wantedLevel, --[[BOOL]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SET_PLAYER_WANTED_LEVEL_NO_DROP' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(wantedLevel) == "number", "Arg #2 (wantedLevel) must be a number.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")

	local result = native_call(0x340E61DE7F471565, player, wantedLevel, p2)
end
natives.player.set_player_wanted_level_no_drop = natives.PLAYER.SET_PLAYER_WANTED_LEVEL_NO_DROP

--[[
Forces any pending wanted level to be applied to the specified player immediately.

Call SET_PLAYER_WANTED_LEVEL with the desired wanted level, followed by SET_PLAYER_WANTED_LEVEL_NOW.

Second parameter is unknown (always false).
]]
function natives.PLAYER.SET_PLAYER_WANTED_LEVEL_NOW(--[[Player]] player, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SET_PLAYER_WANTED_LEVEL_NOW' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0xE0A7D1E497FFCD6F, player, p1)
end
natives.player.set_player_wanted_level_now = natives.PLAYER.SET_PLAYER_WANTED_LEVEL_NOW

function natives.PLAYER.ARE_PLAYER_FLASHING_STARS_ABOUT_TO_DROP(--[[Player]] player) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.ARE_PLAYER_FLASHING_STARS_ABOUT_TO_DROP' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0xAFAF86043E5874E9, player)
	return result:__tointeger() ~= 0
end
natives.player.are_player_flashing_stars_about_to_drop = natives.PLAYER.ARE_PLAYER_FLASHING_STARS_ABOUT_TO_DROP

function natives.PLAYER.ARE_PLAYER_STARS_GREYED_OUT(--[[Player]] player) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.ARE_PLAYER_STARS_GREYED_OUT' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0x0A6EB355EE14A2DB, player)
	return result:__tointeger() ~= 0
end
natives.player.are_player_stars_greyed_out = natives.PLAYER.ARE_PLAYER_STARS_GREYED_OUT

function natives.PLAYER.IS_WANTED_AND_HAS_BEEN_SEEN_BY_COPS(--[[Player]] player) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.IS_WANTED_AND_HAS_BEEN_SEEN_BY_COPS' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0x7E07C78925D5FD96, player)
	return result:__tointeger() ~= 0
end
natives.player.is_wanted_and_has_been_seen_by_cops = natives.PLAYER.IS_WANTED_AND_HAS_BEEN_SEEN_BY_COPS

function natives.PLAYER.SET_DISPATCH_COPS_FOR_PLAYER(--[[Player]] player, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SET_DISPATCH_COPS_FOR_PLAYER' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xDB172424876553F4, player, toggle)
end
natives.player.set_dispatch_cops_for_player = natives.PLAYER.SET_DISPATCH_COPS_FOR_PLAYER

function natives.PLAYER.IS_PLAYER_WANTED_LEVEL_GREATER(--[[Player]] player, --[[int]] wantedLevel) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.IS_PLAYER_WANTED_LEVEL_GREATER' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(wantedLevel) == "number", "Arg #2 (wantedLevel) must be a number.")

	local result = native_call(0x238DB2A2C23EE9EF, player, wantedLevel)
	return result:__tointeger() ~= 0
end
natives.player.is_player_wanted_level_greater = natives.PLAYER.IS_PLAYER_WANTED_LEVEL_GREATER

--[[
This executes at the same as speed as PLAYER::SET_PLAYER_WANTED_LEVEL(player, 0, false);

PLAYER::GET_PLAYER_WANTED_LEVEL(player); executes in less than half the time. Which means that it's worth first checking if the wanted level needs to be cleared before clearing. However, this is mostly about good code practice and can important in other situations. The difference in time in this example is negligible. 
]]
function natives.PLAYER.CLEAR_PLAYER_WANTED_LEVEL(--[[Player]] player) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.CLEAR_PLAYER_WANTED_LEVEL' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0xB302540597885499, player)
end
natives.player.clear_player_wanted_level = natives.PLAYER.CLEAR_PLAYER_WANTED_LEVEL

function natives.PLAYER.IS_PLAYER_DEAD(--[[Player]] player) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.IS_PLAYER_DEAD' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0x424D4687FA1E5652, player)
	return result:__tointeger() ~= 0
end
natives.player.is_player_dead = natives.PLAYER.IS_PLAYER_DEAD

function natives.PLAYER.IS_PLAYER_PRESSING_HORN(--[[Player]] player) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.IS_PLAYER_PRESSING_HORN' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0xFA1E2BF8B10598F9, player)
	return result:__tointeger() ~= 0
end
natives.player.is_player_pressing_horn = natives.PLAYER.IS_PLAYER_PRESSING_HORN

--[[
Flags:
SPC_AMBIENT_SCRIPT = (1 << 1),
SPC_CLEAR_TASKS = (1 << 2),
SPC_REMOVE_FIRES = (1 << 3),
SPC_REMOVE_EXPLOSIONS = (1 << 4),
SPC_REMOVE_PROJECTILES = (1 << 5),
SPC_DEACTIVATE_GADGETS = (1 << 6),
SPC_REENABLE_CONTROL_ON_DEATH = (1 << 7),
SPC_LEAVE_CAMERA_CONTROL_ON = (1 << 8),
SPC_ALLOW_PLAYER_DAMAGE = (1 << 9),
SPC_DONT_STOP_OTHER_CARS_AROUND_PLAYER = (1 << 10),
SPC_PREVENT_EVERYBODY_BACKOFF = (1 << 11),
SPC_ALLOW_PAD_SHAKE = (1 << 12)

See: https://alloc8or.re/gta5/doc/enums/eSetPlayerControlFlag.txt
]]
function natives.PLAYER.SET_PLAYER_CONTROL(--[[Player]] player, --[[BOOL]] bHasControl, --[[int]] flags) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SET_PLAYER_CONTROL' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(bHasControl) == "boolean", "Arg #2 (bHasControl) must be a boolean.")
	assert(type(flags) == "number", "Arg #3 (flags) must be a number.")

	local result = native_call(0x8D32347D6D4C40A2, player, bHasControl, flags)
end
natives.player.set_player_control = natives.PLAYER.SET_PLAYER_CONTROL

function natives.PLAYER.GET_PLAYER_WANTED_LEVEL(--[[Player]] player) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.GET_PLAYER_WANTED_LEVEL' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0xE28E54788CE8F12D, player)
	return result:__tointeger()
end
natives.player.get_player_wanted_level = natives.PLAYER.GET_PLAYER_WANTED_LEVEL

function natives.PLAYER.SET_MAX_WANTED_LEVEL(--[[int]] maxWantedLevel) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SET_MAX_WANTED_LEVEL' due to disabled trusted mode")

	assert(type(maxWantedLevel) == "number", "Arg #1 (maxWantedLevel) must be a number.")

	local result = native_call(0xAA5F02DB48D704B9, maxWantedLevel)
end
natives.player.set_max_wanted_level = natives.PLAYER.SET_MAX_WANTED_LEVEL

--[[
If toggle is set to false:
 The police won't be shown on the (mini)map

If toggle is set to true:
 The police will be shown on the (mini)map
]]
function natives.PLAYER.SET_POLICE_RADAR_BLIPS(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SET_POLICE_RADAR_BLIPS' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x43286D561B72B8BF, toggle)
end
natives.player.set_police_radar_blips = natives.PLAYER.SET_POLICE_RADAR_BLIPS

--[[
The player will be ignored by the police if toggle is set to true
]]
function natives.PLAYER.SET_POLICE_IGNORE_PLAYER(--[[Player]] player, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SET_POLICE_IGNORE_PLAYER' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x32C62AA929C2DA6A, player, toggle)
end
natives.player.set_police_ignore_player = natives.PLAYER.SET_POLICE_IGNORE_PLAYER

--[[
Checks whether the specified player has a Ped, the Ped is not dead, is not injured and is not arrested.
]]
function natives.PLAYER.IS_PLAYER_PLAYING(--[[Player]] player) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.IS_PLAYER_PLAYING' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0x5E9564D8246B909A, player)
	return result:__tointeger() ~= 0
end
natives.player.is_player_playing = natives.PLAYER.IS_PLAYER_PLAYING

function natives.PLAYER.SET_EVERYONE_IGNORE_PLAYER(--[[Player]] player, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SET_EVERYONE_IGNORE_PLAYER' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x8EEDA153AD141BA4, player, toggle)
end
natives.player.set_everyone_ignore_player = natives.PLAYER.SET_EVERYONE_IGNORE_PLAYER

function natives.PLAYER.SET_ALL_RANDOM_PEDS_FLEE(--[[Player]] player, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SET_ALL_RANDOM_PEDS_FLEE' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x056E0FE8534C2949, player, toggle)
end
natives.player.set_all_random_peds_flee = natives.PLAYER.SET_ALL_RANDOM_PEDS_FLEE

function natives.PLAYER.SET_ALL_RANDOM_PEDS_FLEE_THIS_FRAME(--[[Player]] player) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SET_ALL_RANDOM_PEDS_FLEE_THIS_FRAME' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0x471D2FF42A94B4F2, player)
end
natives.player.set_all_random_peds_flee_this_frame = natives.PLAYER.SET_ALL_RANDOM_PEDS_FLEE_THIS_FRAME

function natives.PLAYER.SET_ALL_NEUTRAL_RANDOM_PEDS_FLEE(--[[Player]] player, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SET_ALL_NEUTRAL_RANDOM_PEDS_FLEE' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xDE45D1A1EF45EE61, player, toggle)
end
natives.player.set_all_neutral_random_peds_flee = natives.PLAYER.SET_ALL_NEUTRAL_RANDOM_PEDS_FLEE

--[[
- This is called after SET_ALL_RANDOM_PEDS_FLEE_THIS_FRAME

]]
function natives.PLAYER.SET_ALL_NEUTRAL_RANDOM_PEDS_FLEE_THIS_FRAME(--[[Player]] player) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SET_ALL_NEUTRAL_RANDOM_PEDS_FLEE_THIS_FRAME' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0xC3376F42B1FACCC6, player)
end
natives.player.set_all_neutral_random_peds_flee_this_frame = natives.PLAYER.SET_ALL_NEUTRAL_RANDOM_PEDS_FLEE_THIS_FRAME

function natives.PLAYER.SET_LAW_PEDS_CAN_ATTACK_NON_WANTED_PLAYER_THIS_FRAME(--[[Player]] player) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SET_LAW_PEDS_CAN_ATTACK_NON_WANTED_PLAYER_THIS_FRAME' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0xFAC75988A7D078D3, player)
end
natives.player.set_law_peds_can_attack_non_wanted_player_this_frame = natives.PLAYER.SET_LAW_PEDS_CAN_ATTACK_NON_WANTED_PLAYER_THIS_FRAME

function natives.PLAYER.SET_IGNORE_LOW_PRIORITY_SHOCKING_EVENTS(--[[Player]] player, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SET_IGNORE_LOW_PRIORITY_SHOCKING_EVENTS' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x596976B02B6B5700, player, toggle)
end
natives.player.set_ignore_low_priority_shocking_events = natives.PLAYER.SET_IGNORE_LOW_PRIORITY_SHOCKING_EVENTS

function natives.PLAYER.SET_WANTED_LEVEL_MULTIPLIER(--[[float]] multiplier) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SET_WANTED_LEVEL_MULTIPLIER' due to disabled trusted mode")

	assert(type(multiplier) == "number", "Arg #1 (multiplier) must be a number.")

	local result = native_call(0x020E5F00CDA207BA, multiplier)
end
natives.player.set_wanted_level_multiplier = natives.PLAYER.SET_WANTED_LEVEL_MULTIPLIER

--[[
Max value is 1.0
]]
function natives.PLAYER.SET_WANTED_LEVEL_DIFFICULTY(--[[Player]] player, --[[float]] difficulty) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SET_WANTED_LEVEL_DIFFICULTY' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(difficulty) == "number", "Arg #2 (difficulty) must be a number.")

	local result = native_call(0x9B0BB33B04405E7A, player, difficulty)
end
natives.player.set_wanted_level_difficulty = natives.PLAYER.SET_WANTED_LEVEL_DIFFICULTY

function natives.PLAYER.RESET_WANTED_LEVEL_DIFFICULTY(--[[Player]] player) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.RESET_WANTED_LEVEL_DIFFICULTY' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0xB9D0DD990DC141DD, player)
end
natives.player.reset_wanted_level_difficulty = natives.PLAYER.RESET_WANTED_LEVEL_DIFFICULTY

function natives.PLAYER.GET_WANTED_LEVEL_TIME_TO_ESCAPE() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.GET_WANTED_LEVEL_TIME_TO_ESCAPE' due to disabled trusted mode")

	local result = native_call(0xA72200F51875FEA4)
	return result:__tointeger()
end
natives.player.get_wanted_level_time_to_escape = natives.PLAYER.GET_WANTED_LEVEL_TIME_TO_ESCAPE

function natives.PLAYER.SET_WANTED_LEVEL_HIDDEN_ESCAPE_TIME(--[[Player]] player, --[[int]] wantedLevel, --[[int]] lossTime) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SET_WANTED_LEVEL_HIDDEN_ESCAPE_TIME' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(wantedLevel) == "number", "Arg #2 (wantedLevel) must be a number.")
	assert(type(lossTime) == "number", "Arg #3 (lossTime) must be a number.")

	local result = native_call(0x49B856B1360C47C7, player, wantedLevel, lossTime)
end
natives.player.set_wanted_level_hidden_escape_time = natives.PLAYER.SET_WANTED_LEVEL_HIDDEN_ESCAPE_TIME

function natives.PLAYER.RESET_WANTED_LEVEL_HIDDEN_ESCAPE_TIME(--[[Player]] player) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.RESET_WANTED_LEVEL_HIDDEN_ESCAPE_TIME' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0x823EC8E82BA45986, player)
end
natives.player.reset_wanted_level_hidden_escape_time = natives.PLAYER.RESET_WANTED_LEVEL_HIDDEN_ESCAPE_TIME

function natives.PLAYER.START_FIRING_AMNESTY(--[[int]] duration) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.START_FIRING_AMNESTY' due to disabled trusted mode")

	assert(type(duration) == "number", "Arg #1 (duration) must be a number.")

	local result = native_call(0xBF9BD71691857E48, duration)
end
natives.player.start_firing_amnesty = natives.PLAYER.START_FIRING_AMNESTY

--[[
PLAYER::REPORT_CRIME(PLAYER::PLAYER_ID(), 37, PLAYER::GET_WANTED_LEVEL_THRESHOLD(1));

From am_armybase.ysc.c4:

PLAYER::REPORT_CRIME(PLAYER::PLAYER_ID(4), 36, PLAYER::GET_WANTED_LEVEL_THRESHOLD(4));

-----

This was taken from the GTAV.exe v1.334. The function is called sub_140592CE8. For a full decompilation of the function, see here: pastebin.com/09qSMsN7 

-----
crimeType:
1: Firearms possession
2: Person running a red light ("5-0-5")
3: Reckless driver
4: Speeding vehicle (a "5-10")
5: Traffic violation (a "5-0-5")
6: Motorcycle rider without a helmet
7: Vehicle theft (a "5-0-3")
8: Grand Theft Auto
9: ???
10: ???
11: Assault on a civilian (a "2-40")
12: Assault on an officer
13: Assault with a deadly weapon (a "2-45")
14: Officer shot (a "2-45")
15: Pedestrian struck by a vehicle
16: Officer struck by a vehicle
17: Helicopter down (an "AC"?)
18: Civilian on fire (a "2-40")
19: Officer set on fire (a "10-99")
20: Car on fire
21: Air unit down (an "AC"?)
22: An explosion (a "9-96")
23: A stabbing (a "2-45") (also something else I couldn't understand)
24: Officer stabbed (also something else I couldn't understand)
25: Attack on a vehicle ("MDV"?)
26: Damage to property
27: Suspect threatening officer with a firearm
28: Shots fired
29: ???
30: ???
31: ???
32: ???
33: ???
34: A "2-45"
35: ???
36: A "9-25"
37: ???
38: ???
39: ???
40: ???
41: ???
42: ???
43: Possible disturbance
44: Civilian in need of assistance
45: ???
46: ???
]]
function natives.PLAYER.REPORT_CRIME(--[[Player]] player, --[[int]] crimeType, --[[int]] wantedLvlThresh) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.REPORT_CRIME' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(crimeType) == "number", "Arg #2 (crimeType) must be a number.")
	assert(type(wantedLvlThresh) == "number", "Arg #3 (wantedLvlThresh) must be a number.")

	local result = native_call(0xE9B09589827545E7, player, crimeType, wantedLvlThresh)
end
natives.player.report_crime = natives.PLAYER.REPORT_CRIME

--[[
crimeType: see REPORT_CRIME
]]
function natives.PLAYER.SUPPRESS_CRIME_THIS_FRAME(--[[Player]] player, --[[int]] crimeType) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SUPPRESS_CRIME_THIS_FRAME' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(crimeType) == "number", "Arg #2 (crimeType) must be a number.")

	local result = native_call(0x9A987297ED8BD838, player, crimeType)
end
natives.player.suppress_crime_this_frame = natives.PLAYER.SUPPRESS_CRIME_THIS_FRAME

--[[
This native is used in both singleplayer and multiplayer scripts.

Always used like this in scripts
PLAYER::_BC9490CA15AEA8FB(PLAYER::PLAYER_ID());
]]
function natives.PLAYER.UPDATE_WANTED_POSITION_THIS_FRAME(--[[Player]] player) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.UPDATE_WANTED_POSITION_THIS_FRAME' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0xBC9490CA15AEA8FB, player)
end
natives.player.update_wanted_position_this_frame = natives.PLAYER.UPDATE_WANTED_POSITION_THIS_FRAME

--[[
This has been found in use in the decompiled files.
]]
function natives.PLAYER.SUPPRESS_LOSING_WANTED_LEVEL_IF_HIDDEN_THIS_FRAME(--[[Player]] player) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SUPPRESS_LOSING_WANTED_LEVEL_IF_HIDDEN_THIS_FRAME' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0x4669B3ED80F24B4E, player)
end
natives.player.suppress_losing_wanted_level_if_hidden_this_frame = natives.PLAYER.SUPPRESS_LOSING_WANTED_LEVEL_IF_HIDDEN_THIS_FRAME

function natives.PLAYER.ALLOW_EVASION_HUD_IF_DISABLING_HIDDEN_EVASION_THIS_FRAME(--[[Player]] player, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.ALLOW_EVASION_HUD_IF_DISABLING_HIDDEN_EVASION_THIS_FRAME' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x2F41A3BAE005E5FA, player, p1)
end
natives.player.allow_evasion_hud_if_disabling_hidden_evasion_this_frame = natives.PLAYER.ALLOW_EVASION_HUD_IF_DISABLING_HIDDEN_EVASION_THIS_FRAME

--[[
This has been found in use in the decompiled files.
]]
function natives.PLAYER.FORCE_START_HIDDEN_EVASION(--[[Player]] player) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.FORCE_START_HIDDEN_EVASION' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0xAD73CE5A09E42D12, player)
end
natives.player.force_start_hidden_evasion = natives.PLAYER.FORCE_START_HIDDEN_EVASION

function natives.PLAYER.SUPPRESS_WITNESSES_CALLING_POLICE_THIS_FRAME(--[[Player]] player) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SUPPRESS_WITNESSES_CALLING_POLICE_THIS_FRAME' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0x36F1B38855F2A8DF, player)
end
natives.player.suppress_witnesses_calling_police_this_frame = natives.PLAYER.SUPPRESS_WITNESSES_CALLING_POLICE_THIS_FRAME

function natives.PLAYER.REPORT_POLICE_SPOTTED_PLAYER(--[[Player]] player) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.REPORT_POLICE_SPOTTED_PLAYER' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0xDC64D2C53493ED12, player)
end
natives.player.report_police_spotted_player = natives.PLAYER.REPORT_POLICE_SPOTTED_PLAYER

--[[
PLAYER::0xBF6993C7(rPtr((&l_122) + 71)); // Found in decompilation

***

In "am_hold_up.ysc" used once:

l_8d._f47 = MISC::GET_RANDOM_FLOAT_IN_RANGE(18.0, 28.0);
PLAYER::_B45EFF719D8427A6((l_8d._f47));
]]
function natives.PLAYER.SET_LAW_RESPONSE_DELAY_OVERRIDE(--[[float]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SET_LAW_RESPONSE_DELAY_OVERRIDE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xB45EFF719D8427A6, p0)
end
natives.player.set_law_response_delay_override = natives.PLAYER.SET_LAW_RESPONSE_DELAY_OVERRIDE

--[[
2 matches in 1 script - am_hold_up

Used in multiplayer scripts?
]]
function natives.PLAYER.RESET_LAW_RESPONSE_DELAY_OVERRIDE() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.RESET_LAW_RESPONSE_DELAY_OVERRIDE' due to disabled trusted mode")

	local result = native_call(0x0032A6DBA562C518)
end
natives.player.reset_law_response_delay_override = natives.PLAYER.RESET_LAW_RESPONSE_DELAY_OVERRIDE

function natives.PLAYER.CAN_PLAYER_START_MISSION(--[[Player]] player) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.CAN_PLAYER_START_MISSION' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0xDE7465A27D403C06, player)
	return result:__tointeger() ~= 0
end
natives.player.can_player_start_mission = natives.PLAYER.CAN_PLAYER_START_MISSION

function natives.PLAYER.IS_PLAYER_READY_FOR_CUTSCENE(--[[Player]] player) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.IS_PLAYER_READY_FOR_CUTSCENE' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0x908CBECC2CAA3690, player)
	return result:__tointeger() ~= 0
end
natives.player.is_player_ready_for_cutscene = natives.PLAYER.IS_PLAYER_READY_FOR_CUTSCENE

function natives.PLAYER.IS_PLAYER_TARGETTING_ENTITY(--[[Player]] player, --[[Entity]] entity) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.IS_PLAYER_TARGETTING_ENTITY' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(entity) == "number", "Arg #2 (entity) must be a number.")

	local result = native_call(0x7912F7FC4F6264B6, player, entity)
	return result:__tointeger() ~= 0
end
natives.player.is_player_targetting_entity = natives.PLAYER.IS_PLAYER_TARGETTING_ENTITY

--[[
Assigns the handle of locked-on melee target to *entity that you pass it.
Returns false if no entity found.
]]
function natives.PLAYER.GET_PLAYER_TARGET_ENTITY(--[[Player]] player, --[[Entity*]] entity) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.GET_PLAYER_TARGET_ENTITY' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(entity) == "userdata", "Arg #2 (entity) must be a userdata.")

	local result = native_call(0x13EDE1A5DBF797C9, player, entity)
	return result:__tointeger() ~= 0
end
natives.player.get_player_target_entity = natives.PLAYER.GET_PLAYER_TARGET_ENTITY

--[[
Gets a value indicating whether the specified player is currently aiming freely.
]]
function natives.PLAYER.IS_PLAYER_FREE_AIMING(--[[Player]] player) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.IS_PLAYER_FREE_AIMING' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0x2E397FD2ECD37C87, player)
	return result:__tointeger() ~= 0
end
natives.player.is_player_free_aiming = natives.PLAYER.IS_PLAYER_FREE_AIMING

--[[
Gets a value indicating whether the specified player is currently aiming freely at the specified entity.
]]
function natives.PLAYER.IS_PLAYER_FREE_AIMING_AT_ENTITY(--[[Player]] player, --[[Entity]] entity) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.IS_PLAYER_FREE_AIMING_AT_ENTITY' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(entity) == "number", "Arg #2 (entity) must be a number.")

	local result = native_call(0x3C06B5C839B38F7B, player, entity)
	return result:__tointeger() ~= 0
end
natives.player.is_player_free_aiming_at_entity = natives.PLAYER.IS_PLAYER_FREE_AIMING_AT_ENTITY

--[[
Returns TRUE if it found an entity in your crosshair within range of your weapon. Assigns the handle of the target to the *entity that you pass it.
Returns false if no entity found.
]]
function natives.PLAYER.GET_ENTITY_PLAYER_IS_FREE_AIMING_AT(--[[Player]] player, --[[Entity*]] entity) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.GET_ENTITY_PLAYER_IS_FREE_AIMING_AT' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(entity) == "userdata", "Arg #2 (entity) must be a userdata.")

	local result = native_call(0x2975C866E6713290, player, entity)
	return result:__tointeger() ~= 0
end
natives.player.get_entity_player_is_free_aiming_at = natives.PLAYER.GET_ENTITY_PLAYER_IS_FREE_AIMING_AT

--[[
Affects the range of auto aim target.
]]
function natives.PLAYER.SET_PLAYER_LOCKON_RANGE_OVERRIDE(--[[Player]] player, --[[float]] range) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SET_PLAYER_LOCKON_RANGE_OVERRIDE' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(range) == "number", "Arg #2 (range) must be a number.")

	local result = native_call(0x29961D490E5814FD, player, range)
end
natives.player.set_player_lockon_range_override = natives.PLAYER.SET_PLAYER_LOCKON_RANGE_OVERRIDE

--[[
Set whether this player should be able to do drive-bys.

"A drive-by is when a ped is aiming/shooting from vehicle. This includes middle finger taunts. By setting this value to false I confirm the player is unable to do all that. Tested on tick."

]]
function natives.PLAYER.SET_PLAYER_CAN_DO_DRIVE_BY(--[[Player]] player, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SET_PLAYER_CAN_DO_DRIVE_BY' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x6E8834B52EC20C77, player, toggle)
end
natives.player.set_player_can_do_drive_by = natives.PLAYER.SET_PLAYER_CAN_DO_DRIVE_BY

--[[
Sets whether this player can be hassled by gangs.
]]
function natives.PLAYER.SET_PLAYER_CAN_BE_HASSLED_BY_GANGS(--[[Player]] player, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SET_PLAYER_CAN_BE_HASSLED_BY_GANGS' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xD5E460AD7020A246, player, toggle)
end
natives.player.set_player_can_be_hassled_by_gangs = natives.PLAYER.SET_PLAYER_CAN_BE_HASSLED_BY_GANGS

--[[
Sets whether this player can take cover.
]]
function natives.PLAYER.SET_PLAYER_CAN_USE_COVER(--[[Player]] player, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SET_PLAYER_CAN_USE_COVER' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xD465A8599DFF6814, player, toggle)
end
natives.player.set_player_can_use_cover = natives.PLAYER.SET_PLAYER_CAN_USE_COVER

--[[
Gets the maximum wanted level the player can get.
Ranges from 0 to 5.
]]
function natives.PLAYER.GET_MAX_WANTED_LEVEL() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.GET_MAX_WANTED_LEVEL' due to disabled trusted mode")

	local result = native_call(0x462E0DB9B137DC5F)
	return result:__tointeger()
end
natives.player.get_max_wanted_level = natives.PLAYER.GET_MAX_WANTED_LEVEL

function natives.PLAYER.IS_PLAYER_TARGETTING_ANYTHING(--[[Player]] player) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.IS_PLAYER_TARGETTING_ANYTHING' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0x78CFE51896B6B8A4, player)
	return result:__tointeger() ~= 0
end
natives.player.is_player_targetting_anything = natives.PLAYER.IS_PLAYER_TARGETTING_ANYTHING

function natives.PLAYER.SET_PLAYER_SPRINT(--[[Player]] player, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SET_PLAYER_SPRINT' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xA01B8075D8B92DF4, player, toggle)
end
natives.player.set_player_sprint = natives.PLAYER.SET_PLAYER_SPRINT

function natives.PLAYER.RESET_PLAYER_STAMINA(--[[Player]] player) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.RESET_PLAYER_STAMINA' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0xA6F312FCCE9C1DFE, player)
end
natives.player.reset_player_stamina = natives.PLAYER.RESET_PLAYER_STAMINA

function natives.PLAYER.RESTORE_PLAYER_STAMINA(--[[Player]] player, --[[float]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.RESTORE_PLAYER_STAMINA' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xA352C1B864CAFD33, player, p1)
end
natives.player.restore_player_stamina = natives.PLAYER.RESTORE_PLAYER_STAMINA

function natives.PLAYER.GET_PLAYER_SPRINT_STAMINA_REMAINING(--[[Player]] player) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.GET_PLAYER_SPRINT_STAMINA_REMAINING' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0x3F9F16F8E65A7ED7, player)
	return result:__tonumber()
end
natives.player.get_player_sprint_stamina_remaining = natives.PLAYER.GET_PLAYER_SPRINT_STAMINA_REMAINING

function natives.PLAYER.GET_PLAYER_SPRINT_TIME_REMAINING(--[[Player]] player) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.GET_PLAYER_SPRINT_TIME_REMAINING' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0x1885BC9B108B4C99, player)
	return result:__tonumber()
end
natives.player.get_player_sprint_time_remaining = natives.PLAYER.GET_PLAYER_SPRINT_TIME_REMAINING

function natives.PLAYER.GET_PLAYER_UNDERWATER_TIME_REMAINING(--[[Player]] player) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.GET_PLAYER_UNDERWATER_TIME_REMAINING' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0xA1FCF8E6AF40B731, player)
	return result:__tonumber()
end
natives.player.get_player_underwater_time_remaining = natives.PLAYER.GET_PLAYER_UNDERWATER_TIME_REMAINING

function natives.PLAYER.SET_PLAYER_UNDERWATER_BREATH_PERCENT_REMAINING(--[[Player]] player, --[[float]] time) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SET_PLAYER_UNDERWATER_BREATH_PERCENT_REMAINING' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(time) == "number", "Arg #2 (time) must be a number.")

	local result = native_call(0xA0D3E4F7AAFB7E78, player, time)
	return result:__tointeger()
end
natives.player.set_player_underwater_breath_percent_remaining = natives.PLAYER.SET_PLAYER_UNDERWATER_BREATH_PERCENT_REMAINING

--[[
Returns the group ID the player is member of.
]]
function natives.PLAYER.GET_PLAYER_GROUP(--[[Player]] player) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.GET_PLAYER_GROUP' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0x0D127585F77030AF, player)
	return result:__tointeger()
end
natives.player.get_player_group = natives.PLAYER.GET_PLAYER_GROUP

function natives.PLAYER.GET_PLAYER_MAX_ARMOUR(--[[Player]] player) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.GET_PLAYER_MAX_ARMOUR' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0x92659B4CE1863CB3, player)
	return result:__tointeger()
end
natives.player.get_player_max_armour = natives.PLAYER.GET_PLAYER_MAX_ARMOUR

--[[
Can the player control himself, used to disable controls for player for things like a cutscene.

---

You can't disable controls with this, use SET_PLAYER_CONTROL(...) for this. 
]]
function natives.PLAYER.IS_PLAYER_CONTROL_ON(--[[Player]] player) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.IS_PLAYER_CONTROL_ON' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0x49C32D60007AFA47, player)
	return result:__tointeger() ~= 0
end
natives.player.is_player_control_on = natives.PLAYER.IS_PLAYER_CONTROL_ON

--[[
Returns true when the player is not able to control the cam i.e. when running a benchmark test, switching the player or viewing a cutscene.

Note: I am not 100% sure if the native actually checks if the cam control is disabled but it seems promising.
]]
function natives.PLAYER.GET_ARE_CAMERA_CONTROLS_DISABLED() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.GET_ARE_CAMERA_CONTROLS_DISABLED' due to disabled trusted mode")

	local result = native_call(0x7C814D2FB49F40C0)
	return result:__tointeger() ~= 0
end
natives.player.get_are_camera_controls_disabled = natives.PLAYER.GET_ARE_CAMERA_CONTROLS_DISABLED

function natives.PLAYER.IS_PLAYER_SCRIPT_CONTROL_ON(--[[Player]] player) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.IS_PLAYER_SCRIPT_CONTROL_ON' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0x8A876A65283DD7D7, player)
	return result:__tointeger() ~= 0
end
natives.player.is_player_script_control_on = natives.PLAYER.IS_PLAYER_SCRIPT_CONTROL_ON

--[[
Returns TRUE if the player ('s ped) is climbing at the moment.
]]
function natives.PLAYER.IS_PLAYER_CLIMBING(--[[Player]] player) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.IS_PLAYER_CLIMBING' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0x95E8F73DC65EFB9C, player)
	return result:__tointeger() ~= 0
end
natives.player.is_player_climbing = natives.PLAYER.IS_PLAYER_CLIMBING

--[[
Return true while player is being arrested / busted.

If atArresting is set to 1, this function will return 1 when player is being arrested (while player is putting his hand up, but still have control)

If atArresting is set to 0, this function will return 1 only when the busted screen is shown.
]]
function natives.PLAYER.IS_PLAYER_BEING_ARRESTED(--[[Player]] player, --[[BOOL]] atArresting) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.IS_PLAYER_BEING_ARRESTED' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(atArresting) == "boolean", "Arg #2 (atArresting) must be a boolean.")

	local result = native_call(0x388A47C51ABDAC8E, player, atArresting)
	return result:__tointeger() ~= 0
end
natives.player.is_player_being_arrested = natives.PLAYER.IS_PLAYER_BEING_ARRESTED

function natives.PLAYER.RESET_PLAYER_ARREST_STATE(--[[Player]] player) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.RESET_PLAYER_ARREST_STATE' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0x2D03E13C460760D6, player)
end
natives.player.reset_player_arrest_state = natives.PLAYER.RESET_PLAYER_ARREST_STATE

--[[
Alternative: GET_VEHICLE_PED_IS_IN(PLAYER_PED_ID(), 1);
]]
function natives.PLAYER.GET_PLAYERS_LAST_VEHICLE() -- Returns Vehicle
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.GET_PLAYERS_LAST_VEHICLE' due to disabled trusted mode")

	local result = native_call(0xB6997A7EB3F5C8C0)
	return result:__tointeger()
end
natives.player.get_players_last_vehicle = natives.PLAYER.GET_PLAYERS_LAST_VEHICLE

--[[
Returns the same as PLAYER_ID and NETWORK_PLAYER_ID_TO_INT
]]
function natives.PLAYER.GET_PLAYER_INDEX() -- Returns Player
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.GET_PLAYER_INDEX' due to disabled trusted mode")

	local result = native_call(0xA5EDC40EF369B48D)
	return result:__tointeger()
end
natives.player.get_player_index = natives.PLAYER.GET_PLAYER_INDEX

--[[
Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).
]]
function natives.PLAYER.INT_TO_PLAYERINDEX(--[[int]] value) -- Returns Player
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.INT_TO_PLAYERINDEX' due to disabled trusted mode")

	assert(type(value) == "number", "Arg #1 (value) must be a number.")

	local result = native_call(0x41BD2A6B006AF756, value)
	return result:__tointeger()
end
natives.player.int_to_playerindex = natives.PLAYER.INT_TO_PLAYERINDEX

--[[
Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).
--------------------------------------------------------
if (NETWORK::NETWORK_IS_PARTICIPANT_ACTIVE(PLAYER::INT_TO_PARTICIPANTINDEX(i)))

]]
function natives.PLAYER.INT_TO_PARTICIPANTINDEX(--[[int]] value) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.INT_TO_PARTICIPANTINDEX' due to disabled trusted mode")

	assert(type(value) == "number", "Arg #1 (value) must be a number.")

	local result = native_call(0x9EC6603812C24710, value)
	return result:__tointeger()
end
natives.player.int_to_participantindex = natives.PLAYER.INT_TO_PARTICIPANTINDEX

function natives.PLAYER.GET_TIME_SINCE_PLAYER_HIT_VEHICLE(--[[Player]] player) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.GET_TIME_SINCE_PLAYER_HIT_VEHICLE' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0x5D35ECF3A81A0EE0, player)
	return result:__tointeger()
end
natives.player.get_time_since_player_hit_vehicle = natives.PLAYER.GET_TIME_SINCE_PLAYER_HIT_VEHICLE

function natives.PLAYER.GET_TIME_SINCE_PLAYER_HIT_PED(--[[Player]] player) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.GET_TIME_SINCE_PLAYER_HIT_PED' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0xE36A25322DC35F42, player)
	return result:__tointeger()
end
natives.player.get_time_since_player_hit_ped = natives.PLAYER.GET_TIME_SINCE_PLAYER_HIT_PED

function natives.PLAYER.GET_TIME_SINCE_PLAYER_DROVE_ON_PAVEMENT(--[[Player]] player) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.GET_TIME_SINCE_PLAYER_DROVE_ON_PAVEMENT' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0xD559D2BE9E37853B, player)
	return result:__tointeger()
end
natives.player.get_time_since_player_drove_on_pavement = natives.PLAYER.GET_TIME_SINCE_PLAYER_DROVE_ON_PAVEMENT

function natives.PLAYER.GET_TIME_SINCE_PLAYER_DROVE_AGAINST_TRAFFIC(--[[Player]] player) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.GET_TIME_SINCE_PLAYER_DROVE_AGAINST_TRAFFIC' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0xDB89591E290D9182, player)
	return result:__tointeger()
end
natives.player.get_time_since_player_drove_against_traffic = natives.PLAYER.GET_TIME_SINCE_PLAYER_DROVE_AGAINST_TRAFFIC

function natives.PLAYER.IS_PLAYER_FREE_FOR_AMBIENT_TASK(--[[Player]] player) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.IS_PLAYER_FREE_FOR_AMBIENT_TASK' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0xDCCFD3F106C36AB4, player)
	return result:__tointeger() ~= 0
end
natives.player.is_player_free_for_ambient_task = natives.PLAYER.IS_PLAYER_FREE_FOR_AMBIENT_TASK

--[[
This returns YOUR 'identity' as a Player type.

Always returns 0 in story mode.
]]
function natives.PLAYER.PLAYER_ID() -- Returns Player
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.PLAYER_ID' due to disabled trusted mode")

	local result = native_call(0x4F8644AF03D0E0D6)
	return result:__tointeger()
end
natives.player.player_id = natives.PLAYER.PLAYER_ID

--[[
Returns current player ped
]]
function natives.PLAYER.PLAYER_PED_ID() -- Returns Ped
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.PLAYER_PED_ID' due to disabled trusted mode")

	local result = native_call(0xD80958FC74E988A6)
	return result:__tointeger()
end
natives.player.player_ped_id = natives.PLAYER.PLAYER_PED_ID

--[[
Does exactly the same thing as PLAYER_ID()
]]
function natives.PLAYER.NETWORK_PLAYER_ID_TO_INT() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.NETWORK_PLAYER_ID_TO_INT' due to disabled trusted mode")

	local result = native_call(0xEE68096F9F37341E)
	return result:__tointeger()
end
natives.player.network_player_id_to_int = natives.PLAYER.NETWORK_PLAYER_ID_TO_INT

function natives.PLAYER.HAS_FORCE_CLEANUP_OCCURRED(--[[int]] cleanupFlags) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.HAS_FORCE_CLEANUP_OCCURRED' due to disabled trusted mode")

	assert(type(cleanupFlags) == "number", "Arg #1 (cleanupFlags) must be a number.")

	local result = native_call(0xC968670BFACE42D9, cleanupFlags)
	return result:__tointeger() ~= 0
end
natives.player.has_force_cleanup_occurred = natives.PLAYER.HAS_FORCE_CLEANUP_OCCURRED

--[[
used with 1,2,8,64,128 in the scripts
]]
function natives.PLAYER.FORCE_CLEANUP(--[[int]] cleanupFlags) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.FORCE_CLEANUP' due to disabled trusted mode")

	assert(type(cleanupFlags) == "number", "Arg #1 (cleanupFlags) must be a number.")

	local result = native_call(0xBC8983F38F78ED51, cleanupFlags)
end
natives.player.force_cleanup = natives.PLAYER.FORCE_CLEANUP

--[[
PLAYER::FORCE_CLEANUP_FOR_ALL_THREADS_WITH_THIS_NAME("pb_prostitute", 1); // Found in decompilation
]]
function natives.PLAYER.FORCE_CLEANUP_FOR_ALL_THREADS_WITH_THIS_NAME(--[[const char*]] name, --[[int]] cleanupFlags) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.FORCE_CLEANUP_FOR_ALL_THREADS_WITH_THIS_NAME' due to disabled trusted mode")

	assert(type(name) == "string", "Arg #1 (name) must be a string.")
	assert(type(cleanupFlags) == "number", "Arg #2 (cleanupFlags) must be a number.")

	local result = native_call(0x4C68DDDDF0097317, name, cleanupFlags)
end
natives.player.force_cleanup_for_all_threads_with_this_name = natives.PLAYER.FORCE_CLEANUP_FOR_ALL_THREADS_WITH_THIS_NAME

function natives.PLAYER.FORCE_CLEANUP_FOR_THREAD_WITH_THIS_ID(--[[int]] id, --[[int]] cleanupFlags) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.FORCE_CLEANUP_FOR_THREAD_WITH_THIS_ID' due to disabled trusted mode")

	assert(type(id) == "number", "Arg #1 (id) must be a number.")
	assert(type(cleanupFlags) == "number", "Arg #2 (cleanupFlags) must be a number.")

	local result = native_call(0xF745B37630DF176B, id, cleanupFlags)
end
natives.player.force_cleanup_for_thread_with_this_id = natives.PLAYER.FORCE_CLEANUP_FOR_THREAD_WITH_THIS_ID

function natives.PLAYER.GET_CAUSE_OF_MOST_RECENT_FORCE_CLEANUP() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.GET_CAUSE_OF_MOST_RECENT_FORCE_CLEANUP' due to disabled trusted mode")

	local result = native_call(0x9A41CF4674A12272)
	return result:__tointeger()
end
natives.player.get_cause_of_most_recent_force_cleanup = natives.PLAYER.GET_CAUSE_OF_MOST_RECENT_FORCE_CLEANUP

function natives.PLAYER.SET_PLAYER_MAY_ONLY_ENTER_THIS_VEHICLE(--[[Player]] player, --[[Vehicle]] vehicle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SET_PLAYER_MAY_ONLY_ENTER_THIS_VEHICLE' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(vehicle) == "number", "Arg #2 (vehicle) must be a number.")

	local result = native_call(0x8026FF78F208978A, player, vehicle)
end
natives.player.set_player_may_only_enter_this_vehicle = natives.PLAYER.SET_PLAYER_MAY_ONLY_ENTER_THIS_VEHICLE

function natives.PLAYER.SET_PLAYER_MAY_NOT_ENTER_ANY_VEHICLE(--[[Player]] player) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SET_PLAYER_MAY_NOT_ENTER_ANY_VEHICLE' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0x1DE37BBF9E9CC14A, player)
end
natives.player.set_player_may_not_enter_any_vehicle = natives.PLAYER.SET_PLAYER_MAY_NOT_ENTER_ANY_VEHICLE

--[[
1 - Welcome to Los Santos
2 - A Friendship Resurrected
3 - A Fair Day's Pay
4 - The Moment of Truth
5 - To Live or Die in Los Santos
6 - Diamond Hard
7 - Subversive
8 - Blitzed
9 - Small Town, Big Job
10 - The Government Gimps
11 - The Big One!
12 - Solid Gold, Baby!
13 - Career Criminal
14 - San Andreas Sightseer
15 - All's Fare in Love and War
16 - TP Industries Arms Race
17 - Multi-Disciplined
18 - From Beyond the Stars
19 - A Mystery, Solved
20 - Waste Management
21 - Red Mist
22 - Show Off
23 - Kifflom!
24 - Three Man Army
25 - Out of Your Depth
26 - Altruist Acolyte
27 - A Lot of Cheddar
28 - Trading Pure Alpha
29 - Pimp My Sidearm
30 - Wanted: Alive Or Alive
31 - Los Santos Customs
32 - Close Shave
33 - Off the Plane
34 - Three-Bit Gangster
35 - Making Moves
36 - Above the Law
37 - Numero Uno
38 - The Midnight Club
39 - Unnatural Selection
40 - Backseat Driver
41 - Run Like The Wind
42 - Clean Sweep
43 - Decorated
44 - Stick Up Kid
45 - Enjoy Your Stay
46 - Crew Cut
47 - Full Refund
48 - Dialling Digits
49 - American Dream
50 - A New Perspective
51 - Be Prepared
52 - In the Name of Science
53 - Dead Presidents
54 - Parole Day
55 - Shot Caller
56 - Four Way
57 - Live a Little
58 - Can't Touch This
59 - Mastermind
60 - Vinewood Visionary
61 - Majestic
62 - Humans of Los Santos
63 - First Time Director
64 - Animal Lover
65 - Ensemble Piece
66 - Cult Movie
67 - Location Scout
68 - Method Actor
69 - Cryptozoologist
70 - Getting Started
71 - The Data Breaches
72 - The Bogdan Problem
73 - The Doomsday Scenario
74 - A World Worth Saving
75 - Orbital Obliteration
76 - Elitist
77 - Masterminds
]]
function natives.PLAYER.GIVE_ACHIEVEMENT_TO_PLAYER(--[[int]] achievementId) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.GIVE_ACHIEVEMENT_TO_PLAYER' due to disabled trusted mode")

	assert(type(achievementId) == "number", "Arg #1 (achievementId) must be a number.")

	local result = native_call(0xBEC7076D64130195, achievementId)
	return result:__tointeger() ~= 0
end
natives.player.give_achievement_to_player = natives.PLAYER.GIVE_ACHIEVEMENT_TO_PLAYER

--[[
For Steam.
Does nothing and always returns false in the retail version of the game.
]]
function natives.PLAYER.SET_ACHIEVEMENT_PROGRESS(--[[int]] achievementId, --[[int]] progress) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SET_ACHIEVEMENT_PROGRESS' due to disabled trusted mode")

	assert(type(achievementId) == "number", "Arg #1 (achievementId) must be a number.")
	assert(type(progress) == "number", "Arg #2 (progress) must be a number.")

	local result = native_call(0xC2AFFFDABBDC2C5C, achievementId, progress)
	return result:__tointeger() ~= 0
end
natives.player.set_achievement_progress = natives.PLAYER.SET_ACHIEVEMENT_PROGRESS

--[[
For Steam.
Always returns 0 in retail version of the game.
]]
function natives.PLAYER.GET_ACHIEVEMENT_PROGRESS(--[[int]] achievementId) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.GET_ACHIEVEMENT_PROGRESS' due to disabled trusted mode")

	assert(type(achievementId) == "number", "Arg #1 (achievementId) must be a number.")

	local result = native_call(0x1C186837D0619335, achievementId)
	return result:__tointeger()
end
natives.player.get_achievement_progress = natives.PLAYER.GET_ACHIEVEMENT_PROGRESS

--[[
See GIVE_ACHIEVEMENT_TO_PLAYER
]]
function natives.PLAYER.HAS_ACHIEVEMENT_BEEN_PASSED(--[[int]] achievementId) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.HAS_ACHIEVEMENT_BEEN_PASSED' due to disabled trusted mode")

	assert(type(achievementId) == "number", "Arg #1 (achievementId) must be a number.")

	local result = native_call(0x867365E111A3B6EB, achievementId)
	return result:__tointeger() ~= 0
end
natives.player.has_achievement_been_passed = natives.PLAYER.HAS_ACHIEVEMENT_BEEN_PASSED

--[[
Returns TRUE if the game is in online mode and FALSE if in offline mode.

This is an alias for NETWORK_IS_SIGNED_ONLINE.
]]
function natives.PLAYER.IS_PLAYER_ONLINE() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.IS_PLAYER_ONLINE' due to disabled trusted mode")

	local result = native_call(0xF25D331DC2627BBC)
	return result:__tointeger() ~= 0
end
natives.player.is_player_online = natives.PLAYER.IS_PLAYER_ONLINE

--[[
this function is hard-coded to always return 0.
]]
function natives.PLAYER.IS_PLAYER_LOGGING_IN_NP() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.IS_PLAYER_LOGGING_IN_NP' due to disabled trusted mode")

	local result = native_call(0x74556E1420867ECA)
	return result:__tointeger() ~= 0
end
natives.player.is_player_logging_in_np = natives.PLAYER.IS_PLAYER_LOGGING_IN_NP

--[[
Purpose of the BOOL currently unknown.
Both, true and false, work
]]
function natives.PLAYER.DISPLAY_SYSTEM_SIGNIN_UI(--[[BOOL]] unk) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.DISPLAY_SYSTEM_SIGNIN_UI' due to disabled trusted mode")

	assert(type(unk) == "boolean", "Arg #1 (unk) must be a boolean.")

	local result = native_call(0x94DD7888C10A979E, unk)
end
natives.player.display_system_signin_ui = natives.PLAYER.DISPLAY_SYSTEM_SIGNIN_UI

function natives.PLAYER.IS_SYSTEM_UI_BEING_DISPLAYED() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.IS_SYSTEM_UI_BEING_DISPLAYED' due to disabled trusted mode")

	local result = native_call(0x5D511E3867C87139)
	return result:__tointeger() ~= 0
end
natives.player.is_system_ui_being_displayed = natives.PLAYER.IS_SYSTEM_UI_BEING_DISPLAYED

--[[
Simply sets you as invincible (Health will not deplete).

Use 0x733A643B5B0C53C1 instead if you want Ragdoll enabled, which is equal to:
*(DWORD *)(playerPedAddress + 0x188) |= (1 << 9);
]]
function natives.PLAYER.SET_PLAYER_INVINCIBLE(--[[Player]] player, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SET_PLAYER_INVINCIBLE' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x239528EACDC3E7DE, player, toggle)
end
natives.player.set_player_invincible = natives.PLAYER.SET_PLAYER_INVINCIBLE

--[[
Returns the Player's Invincible status.

This function will always return false if 0x733A643B5B0C53C1 is used to set the invincibility status. To always get the correct result, use this:

 bool IsPlayerInvincible(Player player)
    {
     auto addr = getScriptHandleBaseAddress(GET_PLAYER_PED(player)); 

        if (addr)
     {
         DWORD flag = *(DWORD *)(addr + 0x188);
            return ((flag & (1 << 8)) != 0) || ((flag & (1 << 9)) != 0);
      }

       return false;
 }


]]
function natives.PLAYER.GET_PLAYER_INVINCIBLE(--[[Player]] player) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.GET_PLAYER_INVINCIBLE' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0xB721981B2B939E07, player)
	return result:__tointeger() ~= 0
end
natives.player.get_player_invincible = natives.PLAYER.GET_PLAYER_INVINCIBLE

--[[
Always returns false.
]]
function natives.PLAYER.GET_PLAYER_DEBUG_INVINCIBLE(--[[Player]] player) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.GET_PLAYER_DEBUG_INVINCIBLE' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0xDCC07526B8EC45AF, player)
	return result:__tointeger() ~= 0
end
natives.player.get_player_debug_invincible = natives.PLAYER.GET_PLAYER_DEBUG_INVINCIBLE

function natives.PLAYER.SET_PLAYER_INVINCIBLE_BUT_HAS_REACTIONS(--[[Player]] player, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SET_PLAYER_INVINCIBLE_BUT_HAS_REACTIONS' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x6BC97F4F4BB3C04B, player, toggle)
end
natives.player.set_player_invincible_but_has_reactions = natives.PLAYER.SET_PLAYER_INVINCIBLE_BUT_HAS_REACTIONS

function natives.PLAYER.SET_PLAYER_CAN_COLLECT_DROPPED_MONEY(--[[Player]] player, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SET_PLAYER_CAN_COLLECT_DROPPED_MONEY' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0xCAC57395B151135F, player, p1)
end
natives.player.set_player_can_collect_dropped_money = natives.PLAYER.SET_PLAYER_CAN_COLLECT_DROPPED_MONEY

function natives.PLAYER.REMOVE_PLAYER_HELMET(--[[Player]] player, --[[BOOL]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.REMOVE_PLAYER_HELMET' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(p2) == "boolean", "Arg #2 (p2) must be a boolean.")

	local result = native_call(0xF3AC26D3CC576528, player, p2)
end
natives.player.remove_player_helmet = natives.PLAYER.REMOVE_PLAYER_HELMET

function natives.PLAYER.GIVE_PLAYER_RAGDOLL_CONTROL(--[[Player]] player, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.GIVE_PLAYER_RAGDOLL_CONTROL' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x3C49C870E66F0A28, player, toggle)
end
natives.player.give_player_ragdoll_control = natives.PLAYER.GIVE_PLAYER_RAGDOLL_CONTROL

--[[
Example from fm_mission_controler.ysc.c4:

PLAYER::SET_PLAYER_LOCKON(PLAYER::PLAYER_ID(), 1);

All other decompiled scripts using this seem to be using the player id as the first parameter, so I feel the need to confirm it as so.

No need to confirm it says PLAYER_ID() so it uses PLAYER_ID() lol.
]]
function natives.PLAYER.SET_PLAYER_LOCKON(--[[Player]] player, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SET_PLAYER_LOCKON' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x5C8B2F450EE4328E, player, toggle)
end
natives.player.set_player_lockon = natives.PLAYER.SET_PLAYER_LOCKON

--[[
Sets your targeting mode.
0 = Assisted Aim - Full
1 = Assisted Aim - Partial
2 = Free Aim - Assisted
3 = Free Aim
]]
function natives.PLAYER.SET_PLAYER_TARGETING_MODE(--[[int]] targetMode) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SET_PLAYER_TARGETING_MODE' due to disabled trusted mode")

	assert(type(targetMode) == "number", "Arg #1 (targetMode) must be a number.")

	local result = native_call(0xB1906895227793F3, targetMode)
end
natives.player.set_player_targeting_mode = natives.PLAYER.SET_PLAYER_TARGETING_MODE

function natives.PLAYER.SET_PLAYER_TARGET_LEVEL(--[[int]] targetLevel) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SET_PLAYER_TARGET_LEVEL' due to disabled trusted mode")

	assert(type(targetLevel) == "number", "Arg #1 (targetLevel) must be a number.")

	local result = native_call(0x5702B917B99DB1CD, targetLevel)
end
natives.player.set_player_target_level = natives.PLAYER.SET_PLAYER_TARGET_LEVEL

--[[
Returns profile setting 237.
]]
function natives.PLAYER.GET_IS_USING_FPS_THIRD_PERSON_COVER() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.GET_IS_USING_FPS_THIRD_PERSON_COVER' due to disabled trusted mode")

	local result = native_call(0xB9CF1F793A9F1BF1)
	return result:__tointeger() ~= 0
end
natives.player.get_is_using_fps_third_person_cover = natives.PLAYER.GET_IS_USING_FPS_THIRD_PERSON_COVER

--[[
Returns profile setting 243.
]]
function natives.PLAYER.GET_IS_USING_HOOD_CAMERA() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.GET_IS_USING_HOOD_CAMERA' due to disabled trusted mode")

	local result = native_call(0xCB645E85E97EA48B)
	return result:__tointeger() ~= 0
end
natives.player.get_is_using_hood_camera = natives.PLAYER.GET_IS_USING_HOOD_CAMERA

function natives.PLAYER.CLEAR_PLAYER_HAS_DAMAGED_AT_LEAST_ONE_PED(--[[Player]] player) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.CLEAR_PLAYER_HAS_DAMAGED_AT_LEAST_ONE_PED' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0xF0B67A4DE6AB5F98, player)
end
natives.player.clear_player_has_damaged_at_least_one_ped = natives.PLAYER.CLEAR_PLAYER_HAS_DAMAGED_AT_LEAST_ONE_PED

function natives.PLAYER.HAS_PLAYER_DAMAGED_AT_LEAST_ONE_PED(--[[Player]] player) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.HAS_PLAYER_DAMAGED_AT_LEAST_ONE_PED' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0x20CE80B0C2BF4ACC, player)
	return result:__tointeger() ~= 0
end
natives.player.has_player_damaged_at_least_one_ped = natives.PLAYER.HAS_PLAYER_DAMAGED_AT_LEAST_ONE_PED

function natives.PLAYER.CLEAR_PLAYER_HAS_DAMAGED_AT_LEAST_ONE_NON_ANIMAL_PED(--[[Player]] player) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.CLEAR_PLAYER_HAS_DAMAGED_AT_LEAST_ONE_NON_ANIMAL_PED' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0x4AACB96203D11A31, player)
end
natives.player.clear_player_has_damaged_at_least_one_non_animal_ped = natives.PLAYER.CLEAR_PLAYER_HAS_DAMAGED_AT_LEAST_ONE_NON_ANIMAL_PED

function natives.PLAYER.HAS_PLAYER_DAMAGED_AT_LEAST_ONE_NON_ANIMAL_PED(--[[Player]] player) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.HAS_PLAYER_DAMAGED_AT_LEAST_ONE_NON_ANIMAL_PED' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0xE4B90F367BD81752, player)
	return result:__tointeger() ~= 0
end
natives.player.has_player_damaged_at_least_one_non_animal_ped = natives.PLAYER.HAS_PLAYER_DAMAGED_AT_LEAST_ONE_NON_ANIMAL_PED

--[[
This can be between 1.0f - 14.9f 

You can change the max in IDA from 15.0. I say 15.0 as the function blrs if what you input is greater than or equal to 15.0 hence why it's 14.9 max default.


]]
function natives.PLAYER.SET_AIR_DRAG_MULTIPLIER_FOR_PLAYERS_VEHICLE(--[[Player]] player, --[[float]] multiplier) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SET_AIR_DRAG_MULTIPLIER_FOR_PLAYERS_VEHICLE' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(multiplier) == "number", "Arg #2 (multiplier) must be a number.")

	local result = native_call(0xCA7DC8329F0A1E9E, player, multiplier)
end
natives.player.set_air_drag_multiplier_for_players_vehicle = natives.PLAYER.SET_AIR_DRAG_MULTIPLIER_FOR_PLAYERS_VEHICLE

--[[
Swim speed multiplier.
Multiplier goes up to 1.49

Just call it one time, it is not required to be called once every tick. - Note copied from below native.

Note: At least the IDA method if you change the max float multiplier from 1.5 it will change it for both this and RUN_SPRINT below. I say 1.5 as the function blrs if what you input is greater than or equal to 1.5 hence why it's 1.49 max default.
]]
function natives.PLAYER.SET_SWIM_MULTIPLIER_FOR_PLAYER(--[[Player]] player, --[[float]] multiplier) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SET_SWIM_MULTIPLIER_FOR_PLAYER' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(multiplier) == "number", "Arg #2 (multiplier) must be a number.")

	local result = native_call(0xA91C6F0FF7D16A13, player, multiplier)
end
natives.player.set_swim_multiplier_for_player = natives.PLAYER.SET_SWIM_MULTIPLIER_FOR_PLAYER

--[[
Multiplier goes up to 1.49 any value above will be completely overruled by the game and the multiplier will not take effect, this can be edited in memory however.

Just call it one time, it is not required to be called once every tick.

Note: At least the IDA method if you change the max float multiplier from 1.5 it will change it for both this and SWIM above. I say 1.5 as the function blrs if what you input is greater than or equal to 1.5 hence why it's 1.49 max default.
]]
function natives.PLAYER.SET_RUN_SPRINT_MULTIPLIER_FOR_PLAYER(--[[Player]] player, --[[float]] multiplier) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SET_RUN_SPRINT_MULTIPLIER_FOR_PLAYER' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(multiplier) == "number", "Arg #2 (multiplier) must be a number.")

	local result = native_call(0x6DB47AA77FD94E09, player, multiplier)
end
natives.player.set_run_sprint_multiplier_for_player = natives.PLAYER.SET_RUN_SPRINT_MULTIPLIER_FOR_PLAYER

--[[
Returns the time since the character was arrested in (ms) milliseconds.

example

var time = Function.call<int>(Hash.GET_TIME_SINCE_LAST_ARREST();

UI.DrawSubtitle(time.ToString());

if player has not been arrested, the int returned will be -1.
]]
function natives.PLAYER.GET_TIME_SINCE_LAST_ARREST() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.GET_TIME_SINCE_LAST_ARREST' due to disabled trusted mode")

	local result = native_call(0x5063F92F07C2A316)
	return result:__tointeger()
end
natives.player.get_time_since_last_arrest = natives.PLAYER.GET_TIME_SINCE_LAST_ARREST

--[[
Returns the time since the character died in (ms) milliseconds.

example

var time = Function.call<int>(Hash.GET_TIME_SINCE_LAST_DEATH();

UI.DrawSubtitle(time.ToString());

if player has not died, the int returned will be -1.
]]
function natives.PLAYER.GET_TIME_SINCE_LAST_DEATH() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.GET_TIME_SINCE_LAST_DEATH' due to disabled trusted mode")

	local result = native_call(0xC7034807558DDFCA)
	return result:__tointeger()
end
natives.player.get_time_since_last_death = natives.PLAYER.GET_TIME_SINCE_LAST_DEATH

function natives.PLAYER.ASSISTED_MOVEMENT_CLOSE_ROUTE() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.ASSISTED_MOVEMENT_CLOSE_ROUTE' due to disabled trusted mode")

	local result = native_call(0xAEBF081FFC0A0E5E)
end
natives.player.assisted_movement_close_route = natives.PLAYER.ASSISTED_MOVEMENT_CLOSE_ROUTE

function natives.PLAYER.ASSISTED_MOVEMENT_FLUSH_ROUTE() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.ASSISTED_MOVEMENT_FLUSH_ROUTE' due to disabled trusted mode")

	local result = native_call(0x8621390F0CDCFE1F)
end
natives.player.assisted_movement_flush_route = natives.PLAYER.ASSISTED_MOVEMENT_FLUSH_ROUTE

function natives.PLAYER.SET_PLAYER_FORCED_AIM(--[[Player]] player, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SET_PLAYER_FORCED_AIM' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x0FEE4F80AC44A726, player, toggle)
end
natives.player.set_player_forced_aim = natives.PLAYER.SET_PLAYER_FORCED_AIM

function natives.PLAYER.SET_PLAYER_FORCED_ZOOM(--[[Player]] player, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SET_PLAYER_FORCED_ZOOM' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x75E7D505F2B15902, player, toggle)
end
natives.player.set_player_forced_zoom = natives.PLAYER.SET_PLAYER_FORCED_ZOOM

function natives.PLAYER.SET_PLAYER_FORCE_SKIP_AIM_INTRO(--[[Player]] player, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SET_PLAYER_FORCE_SKIP_AIM_INTRO' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x7651BC64AE59E128, player, toggle)
end
natives.player.set_player_force_skip_aim_intro = natives.PLAYER.SET_PLAYER_FORCE_SKIP_AIM_INTRO

--[[
Inhibits the player from using any method of combat including melee and firearms.

NOTE: Only disables the firing for one frame
]]
function natives.PLAYER.DISABLE_PLAYER_FIRING(--[[Player]] player, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.DISABLE_PLAYER_FIRING' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x5E6CC07646BBEAB8, player, toggle)
end
natives.player.disable_player_firing = natives.PLAYER.DISABLE_PLAYER_FIRING

--[[
Used only once in R* scripts (freemode.ysc).
]]
function natives.PLAYER.DISABLE_PLAYER_THROW_GRENADE_WHILE_USING_GUN() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.DISABLE_PLAYER_THROW_GRENADE_WHILE_USING_GUN' due to disabled trusted mode")

	local result = native_call(0xB885852C39CC265D)
end
natives.player.disable_player_throw_grenade_while_using_gun = natives.PLAYER.DISABLE_PLAYER_THROW_GRENADE_WHILE_USING_GUN

function natives.PLAYER.SET_DISABLE_AMBIENT_MELEE_MOVE(--[[Player]] player, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SET_DISABLE_AMBIENT_MELEE_MOVE' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x2E8AABFA40A84F8C, player, toggle)
end
natives.player.set_disable_ambient_melee_move = natives.PLAYER.SET_DISABLE_AMBIENT_MELEE_MOVE

--[[
Default is 100. Use player id and not ped id. For instance: PLAYER::SET_PLAYER_MAX_ARMOUR(PLAYER::PLAYER_ID(), 100); // main_persistent.ct4
]]
function natives.PLAYER.SET_PLAYER_MAX_ARMOUR(--[[Player]] player, --[[int]] value) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SET_PLAYER_MAX_ARMOUR' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(value) == "number", "Arg #2 (value) must be a number.")

	local result = native_call(0x77DFCCF5948B8C71, player, value)
end
natives.player.set_player_max_armour = natives.PLAYER.SET_PLAYER_MAX_ARMOUR

--[[
p1 is always 0 in the scripts
]]
function natives.PLAYER.SPECIAL_ABILITY_ACTIVATE(--[[Player]] player, --[[int]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SPECIAL_ABILITY_ACTIVATE' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x821FDC827D6F4090, player, p1)
end
natives.player.special_ability_activate = natives.PLAYER.SPECIAL_ABILITY_ACTIVATE

function natives.PLAYER.SET_SPECIAL_ABILITY_MP(--[[Player]] player, --[[int]] p1, --[[Any]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SET_SPECIAL_ABILITY_MP' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0xB214D570EAD7F81A, player, p1, p2)
end
natives.player.set_special_ability_mp = natives.PLAYER.SET_SPECIAL_ABILITY_MP

--[[
p1 is always 0 in the scripts
]]
function natives.PLAYER.SPECIAL_ABILITY_DEACTIVATE_MP(--[[Player]] player, --[[int]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SPECIAL_ABILITY_DEACTIVATE_MP' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x17F7471EACA78290, player, p1)
end
natives.player.special_ability_deactivate_mp = natives.PLAYER.SPECIAL_ABILITY_DEACTIVATE_MP

function natives.PLAYER.SPECIAL_ABILITY_DEACTIVATE(--[[Player]] player, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SPECIAL_ABILITY_DEACTIVATE' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xD6A953C6D1492057, player, p1)
end
natives.player.special_ability_deactivate = natives.PLAYER.SPECIAL_ABILITY_DEACTIVATE

function natives.PLAYER.SPECIAL_ABILITY_DEACTIVATE_FAST(--[[Player]] player, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SPECIAL_ABILITY_DEACTIVATE_FAST' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x9CB5CE07A3968D5A, player, p1)
end
natives.player.special_ability_deactivate_fast = natives.PLAYER.SPECIAL_ABILITY_DEACTIVATE_FAST

function natives.PLAYER.SPECIAL_ABILITY_RESET(--[[Player]] player, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SPECIAL_ABILITY_RESET' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x375F0E738F861A94, player, p1)
end
natives.player.special_ability_reset = natives.PLAYER.SPECIAL_ABILITY_RESET

function natives.PLAYER.SPECIAL_ABILITY_CHARGE_ON_MISSION_FAILED(--[[Player]] player, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SPECIAL_ABILITY_CHARGE_ON_MISSION_FAILED' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xC9A763D8FE87436A, player, p1)
end
natives.player.special_ability_charge_on_mission_failed = natives.PLAYER.SPECIAL_ABILITY_CHARGE_ON_MISSION_FAILED

--[[
Every occurrence of p1 & p2 were both true.
]]
function natives.PLAYER.SPECIAL_ABILITY_CHARGE_SMALL(--[[Player]] player, --[[BOOL]] p1, --[[BOOL]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SPECIAL_ABILITY_CHARGE_SMALL' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x2E7B9B683481687D, player, p1, p2, p3)
end
natives.player.special_ability_charge_small = natives.PLAYER.SPECIAL_ABILITY_CHARGE_SMALL

--[[
Only 1 match. Both p1 & p2 were true.
]]
function natives.PLAYER.SPECIAL_ABILITY_CHARGE_MEDIUM(--[[Player]] player, --[[BOOL]] p1, --[[BOOL]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SPECIAL_ABILITY_CHARGE_MEDIUM' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0xF113E3AA9BC54613, player, p1, p2, p3)
end
natives.player.special_ability_charge_medium = natives.PLAYER.SPECIAL_ABILITY_CHARGE_MEDIUM

--[[
2 matches. p1 was always true.
]]
function natives.PLAYER.SPECIAL_ABILITY_CHARGE_LARGE(--[[Player]] player, --[[BOOL]] p1, --[[BOOL]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SPECIAL_ABILITY_CHARGE_LARGE' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0xF733F45FA4497D93, player, p1, p2, p3)
end
natives.player.special_ability_charge_large = natives.PLAYER.SPECIAL_ABILITY_CHARGE_LARGE

--[[
p1 appears to always be 1 (only comes up twice)
]]
function natives.PLAYER.SPECIAL_ABILITY_CHARGE_CONTINUOUS(--[[Player]] player, --[[Ped]] p1, --[[Any]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SPECIAL_ABILITY_CHARGE_CONTINUOUS' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0xED481732DFF7E997, player, p1, p2)
end
natives.player.special_ability_charge_continuous = natives.PLAYER.SPECIAL_ABILITY_CHARGE_CONTINUOUS

--[[
p1 appears as 5, 10, 15, 25, or 30. p2 is always true.
]]
function natives.PLAYER.SPECIAL_ABILITY_CHARGE_ABSOLUTE(--[[Player]] player, --[[int]] p1, --[[BOOL]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SPECIAL_ABILITY_CHARGE_ABSOLUTE' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0xB7B0870EB531D08D, player, p1, p2, p3)
end
natives.player.special_ability_charge_absolute = natives.PLAYER.SPECIAL_ABILITY_CHARGE_ABSOLUTE

--[[

normalizedValue is from 0.0 - 1.0
p2 is always 1
]]
function natives.PLAYER.SPECIAL_ABILITY_CHARGE_NORMALIZED(--[[Player]] player, --[[float]] normalizedValue, --[[BOOL]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SPECIAL_ABILITY_CHARGE_NORMALIZED' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(normalizedValue) == "number", "Arg #2 (normalizedValue) must be a number.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0xA0696A65F009EE18, player, normalizedValue, p2, p3)
end
natives.player.special_ability_charge_normalized = natives.PLAYER.SPECIAL_ABILITY_CHARGE_NORMALIZED

--[[
Also known as _RECHARGE_SPECIAL_ABILITY
]]
function natives.PLAYER.SPECIAL_ABILITY_FILL_METER(--[[Player]] player, --[[BOOL]] p1, --[[Any]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SPECIAL_ABILITY_FILL_METER' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0x3DACA8DDC6FD4980, player, p1, p2)
end
natives.player.special_ability_fill_meter = natives.PLAYER.SPECIAL_ABILITY_FILL_METER

--[[
p1 was always true.
]]
function natives.PLAYER.SPECIAL_ABILITY_DEPLETE_METER(--[[Player]] player, --[[BOOL]] p1, --[[Any]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SPECIAL_ABILITY_DEPLETE_METER' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0x1D506DBBBC51E64B, player, p1, p2)
end
natives.player.special_ability_deplete_meter = natives.PLAYER.SPECIAL_ABILITY_DEPLETE_METER

function natives.PLAYER.SPECIAL_ABILITY_LOCK(--[[Hash]] playerModel, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SPECIAL_ABILITY_LOCK' due to disabled trusted mode")

	assert(type(playerModel) == "number", "Arg #1 (playerModel) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x6A09D0D590A47D13, playerModel, p1)
end
natives.player.special_ability_lock = natives.PLAYER.SPECIAL_ABILITY_LOCK

function natives.PLAYER.SPECIAL_ABILITY_UNLOCK(--[[Hash]] playerModel, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SPECIAL_ABILITY_UNLOCK' due to disabled trusted mode")

	assert(type(playerModel) == "number", "Arg #1 (playerModel) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xF145F3BE2EFA9A3B, playerModel, p1)
end
natives.player.special_ability_unlock = natives.PLAYER.SPECIAL_ABILITY_UNLOCK

function natives.PLAYER.IS_SPECIAL_ABILITY_UNLOCKED(--[[Hash]] playerModel) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.IS_SPECIAL_ABILITY_UNLOCKED' due to disabled trusted mode")

	assert(type(playerModel) == "number", "Arg #1 (playerModel) must be a number.")

	local result = native_call(0xC6017F6A6CDFA694, playerModel)
	return result:__tointeger() ~= 0
end
natives.player.is_special_ability_unlocked = natives.PLAYER.IS_SPECIAL_ABILITY_UNLOCKED

function natives.PLAYER.IS_SPECIAL_ABILITY_ACTIVE(--[[Player]] player, --[[Any]] p1) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.IS_SPECIAL_ABILITY_ACTIVE' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x3E5F7FC85D854E15, player, p1)
	return result:__tointeger() ~= 0
end
natives.player.is_special_ability_active = natives.PLAYER.IS_SPECIAL_ABILITY_ACTIVE

function natives.PLAYER.IS_SPECIAL_ABILITY_METER_FULL(--[[Player]] player, --[[Any]] p1) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.IS_SPECIAL_ABILITY_METER_FULL' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x05A1FE504B7F2587, player, p1)
	return result:__tointeger() ~= 0
end
natives.player.is_special_ability_meter_full = natives.PLAYER.IS_SPECIAL_ABILITY_METER_FULL

function natives.PLAYER.ENABLE_SPECIAL_ABILITY(--[[Player]] player, --[[BOOL]] toggle, --[[Any]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.ENABLE_SPECIAL_ABILITY' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0x181EC197DAEFE121, player, toggle, p2)
end
natives.player.enable_special_ability = natives.PLAYER.ENABLE_SPECIAL_ABILITY

function natives.PLAYER.IS_SPECIAL_ABILITY_ENABLED(--[[Player]] player, --[[Any]] p1) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.IS_SPECIAL_ABILITY_ENABLED' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xB1D200FE26AEF3CB, player, p1)
	return result:__tointeger() ~= 0
end
natives.player.is_special_ability_enabled = natives.PLAYER.IS_SPECIAL_ABILITY_ENABLED

function natives.PLAYER.SET_SPECIAL_ABILITY_MULTIPLIER(--[[float]] multiplier) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SET_SPECIAL_ABILITY_MULTIPLIER' due to disabled trusted mode")

	assert(type(multiplier) == "number", "Arg #1 (multiplier) must be a number.")

	local result = native_call(0xA49C426ED0CA4AB7, multiplier)
end
natives.player.set_special_ability_multiplier = natives.PLAYER.SET_SPECIAL_ABILITY_MULTIPLIER

function natives.PLAYER.UPDATE_SPECIAL_ABILITY_FROM_STAT(--[[Player]] player, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.UPDATE_SPECIAL_ABILITY_FROM_STAT' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xFFEE8FA29AB9A18E, player, p1)
end
natives.player.update_special_ability_from_stat = natives.PLAYER.UPDATE_SPECIAL_ABILITY_FROM_STAT

--[[
Appears once in "re_dealgonewrong"
]]
function natives.PLAYER.GET_IS_PLAYER_DRIVING_ON_HIGHWAY(--[[Player]] player) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.GET_IS_PLAYER_DRIVING_ON_HIGHWAY' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0x5FC472C501CCADB3, player)
	return result:__tointeger() ~= 0
end
natives.player.get_is_player_driving_on_highway = natives.PLAYER.GET_IS_PLAYER_DRIVING_ON_HIGHWAY

--[[
Only 1 occurrence. p1 was 2.
]]
function natives.PLAYER.GET_IS_PLAYER_DRIVING_WRECKLESS(--[[Player]] player, --[[int]] p1) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.GET_IS_PLAYER_DRIVING_WRECKLESS' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xF10B44FD479D69F3, player, p1)
	return result:__tointeger() ~= 0
end
natives.player.get_is_player_driving_wreckless = natives.PLAYER.GET_IS_PLAYER_DRIVING_WRECKLESS

--[[
2 occurrences in agency_heist3a. p1 was 0.7f then 0.4f.
]]
function natives.PLAYER.GET_IS_MOPPING_AREA_FREE_IN_FRONT_OF_PLAYER(--[[Player]] player, --[[float]] p1) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.GET_IS_MOPPING_AREA_FREE_IN_FRONT_OF_PLAYER' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xDD2620B7B9D16FF1, player, p1)
	return result:__tointeger() ~= 0
end
natives.player.get_is_mopping_area_free_in_front_of_player = natives.PLAYER.GET_IS_MOPPING_AREA_FREE_IN_FRONT_OF_PLAYER

--[[
`findCollisionLand`: This teleports the player to land when set to true and will not consider the Z coordinate parameter provided by you. It will automatically put the Z coordinate so that you don't fall from sky.
]]
function natives.PLAYER.START_PLAYER_TELEPORT(--[[Player]] player, --[[float]] x, --[[float]] y, --[[float]] z, --[[float]] heading, --[[BOOL]] p5, --[[BOOL]] findCollisionLand, --[[BOOL]] p7) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.START_PLAYER_TELEPORT' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")
	assert(type(heading) == "number", "Arg #5 (heading) must be a number.")
	assert(type(p5) == "boolean", "Arg #6 (p5) must be a boolean.")
	assert(type(findCollisionLand) == "boolean", "Arg #7 (findCollisionLand) must be a boolean.")
	assert(type(p7) == "boolean", "Arg #8 (p7) must be a boolean.")

	local result = native_call(0xAD15F075A4DA0FDE, player, x, y, z, heading, p5, findCollisionLand, p7)
end
natives.player.start_player_teleport = natives.PLAYER.START_PLAYER_TELEPORT

function natives.PLAYER.UPDATE_PLAYER_TELEPORT(--[[Player]] player) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.UPDATE_PLAYER_TELEPORT' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0xE23D5873C2394C61, player)
	return result:__tointeger() ~= 0
end
natives.player.update_player_teleport = natives.PLAYER.UPDATE_PLAYER_TELEPORT

--[[
Disables the player's teleportation
]]
function natives.PLAYER.STOP_PLAYER_TELEPORT() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.STOP_PLAYER_TELEPORT' due to disabled trusted mode")

	local result = native_call(0xC449EDED9D73009C)
end
natives.player.stop_player_teleport = natives.PLAYER.STOP_PLAYER_TELEPORT

function natives.PLAYER.IS_PLAYER_TELEPORT_ACTIVE() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.IS_PLAYER_TELEPORT_ACTIVE' due to disabled trusted mode")

	local result = native_call(0x02B15662D7F8886F)
	return result:__tointeger() ~= 0
end
natives.player.is_player_teleport_active = natives.PLAYER.IS_PLAYER_TELEPORT_ACTIVE

function natives.PLAYER.GET_PLAYER_CURRENT_STEALTH_NOISE(--[[Player]] player) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.GET_PLAYER_CURRENT_STEALTH_NOISE' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0x2F395D61F3A1F877, player)
	return result:__tonumber()
end
natives.player.get_player_current_stealth_noise = natives.PLAYER.GET_PLAYER_CURRENT_STEALTH_NOISE

--[[
`regenRate`: The recharge multiplier, a value between 0.0 and 1.0.
Use 1.0 to reset it back to normal
]]
function natives.PLAYER.SET_PLAYER_HEALTH_RECHARGE_MULTIPLIER(--[[Player]] player, --[[float]] regenRate) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SET_PLAYER_HEALTH_RECHARGE_MULTIPLIER' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(regenRate) == "number", "Arg #2 (regenRate) must be a number.")

	local result = native_call(0x5DB660B38DD98A31, player, regenRate)
end
natives.player.set_player_health_recharge_multiplier = natives.PLAYER.SET_PLAYER_HEALTH_RECHARGE_MULTIPLIER

function natives.PLAYER.GET_PLAYER_HEALTH_RECHARGE_MAX_PERCENT(--[[Player]] player) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.GET_PLAYER_HEALTH_RECHARGE_MAX_PERCENT' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0x8BC515BAE4AAF8FF, player)
	return result:__tonumber()
end
natives.player.get_player_health_recharge_max_percent = natives.PLAYER.GET_PLAYER_HEALTH_RECHARGE_MAX_PERCENT

function natives.PLAYER.SET_PLAYER_HEALTH_RECHARGE_MAX_PERCENT(--[[Player]] player, --[[float]] limit) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SET_PLAYER_HEALTH_RECHARGE_MAX_PERCENT' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(limit) == "number", "Arg #2 (limit) must be a number.")

	local result = native_call(0xC388A0F065F5BC34, player, limit)
end
natives.player.set_player_health_recharge_max_percent = natives.PLAYER.SET_PLAYER_HEALTH_RECHARGE_MAX_PERCENT

function natives.PLAYER.SET_PLAYER_FALL_DISTANCE_TO_TRIGGER_RAGDOLL_OVERRIDE(--[[Player]] player, --[[float]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SET_PLAYER_FALL_DISTANCE_TO_TRIGGER_RAGDOLL_OVERRIDE' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xEFD79FA81DFBA9CB, player, p1)
end
natives.player.set_player_fall_distance_to_trigger_ragdoll_override = natives.PLAYER.SET_PLAYER_FALL_DISTANCE_TO_TRIGGER_RAGDOLL_OVERRIDE

--[[
This modifies the damage value of your weapon. Whether it is a multiplier or base damage is unknown. 

Based on tests, it is unlikely to be a multiplier.

modifier's min value is 0.1
]]
function natives.PLAYER.SET_PLAYER_WEAPON_DAMAGE_MODIFIER(--[[Player]] player, --[[float]] modifier) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SET_PLAYER_WEAPON_DAMAGE_MODIFIER' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(modifier) == "number", "Arg #2 (modifier) must be a number.")

	local result = native_call(0xCE07B9F7817AADA3, player, modifier)
end
natives.player.set_player_weapon_damage_modifier = natives.PLAYER.SET_PLAYER_WEAPON_DAMAGE_MODIFIER

--[[
modifier's min value is 0.1
]]
function natives.PLAYER.SET_PLAYER_WEAPON_DEFENSE_MODIFIER(--[[Player]] player, --[[float]] modifier) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SET_PLAYER_WEAPON_DEFENSE_MODIFIER' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(modifier) == "number", "Arg #2 (modifier) must be a number.")

	local result = native_call(0x2D83BC011CA14A3C, player, modifier)
end
natives.player.set_player_weapon_defense_modifier = natives.PLAYER.SET_PLAYER_WEAPON_DEFENSE_MODIFIER

--[[
modifier's min value is 0.1
]]
function natives.PLAYER.SET_PLAYER_WEAPON_MINIGUN_DEFENSE_MODIFIER(--[[Player]] player, --[[float]] modifier) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SET_PLAYER_WEAPON_MINIGUN_DEFENSE_MODIFIER' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(modifier) == "number", "Arg #2 (modifier) must be a number.")

	local result = native_call(0xBCFDE9EDE4CF27DC, player, modifier)
end
natives.player.set_player_weapon_minigun_defense_modifier = natives.PLAYER.SET_PLAYER_WEAPON_MINIGUN_DEFENSE_MODIFIER

--[[
modifier's min value is 0.1
]]
function natives.PLAYER.SET_PLAYER_MELEE_WEAPON_DAMAGE_MODIFIER(--[[Player]] player, --[[float]] modifier, --[[BOOL]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SET_PLAYER_MELEE_WEAPON_DAMAGE_MODIFIER' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(modifier) == "number", "Arg #2 (modifier) must be a number.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")

	local result = native_call(0x4A3DC7ECCC321032, player, modifier, p2)
end
natives.player.set_player_melee_weapon_damage_modifier = natives.PLAYER.SET_PLAYER_MELEE_WEAPON_DAMAGE_MODIFIER

--[[
modifier's min value is 0.1
]]
function natives.PLAYER.SET_PLAYER_MELEE_WEAPON_DEFENSE_MODIFIER(--[[Player]] player, --[[float]] modifier) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SET_PLAYER_MELEE_WEAPON_DEFENSE_MODIFIER' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(modifier) == "number", "Arg #2 (modifier) must be a number.")

	local result = native_call(0xAE540335B4ABC4E2, player, modifier)
end
natives.player.set_player_melee_weapon_defense_modifier = natives.PLAYER.SET_PLAYER_MELEE_WEAPON_DEFENSE_MODIFIER

--[[
modifier's min value is 0.1
]]
function natives.PLAYER.SET_PLAYER_VEHICLE_DAMAGE_MODIFIER(--[[Player]] player, --[[float]] modifier) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SET_PLAYER_VEHICLE_DAMAGE_MODIFIER' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(modifier) == "number", "Arg #2 (modifier) must be a number.")

	local result = native_call(0xA50E117CDDF82F0C, player, modifier)
end
natives.player.set_player_vehicle_damage_modifier = natives.PLAYER.SET_PLAYER_VEHICLE_DAMAGE_MODIFIER

--[[
modifier's min value is 0.1
]]
function natives.PLAYER.SET_PLAYER_VEHICLE_DEFENSE_MODIFIER(--[[Player]] player, --[[float]] modifier) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SET_PLAYER_VEHICLE_DEFENSE_MODIFIER' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(modifier) == "number", "Arg #2 (modifier) must be a number.")

	local result = native_call(0x4C60E6EFDAFF2462, player, modifier)
end
natives.player.set_player_vehicle_defense_modifier = natives.PLAYER.SET_PLAYER_VEHICLE_DEFENSE_MODIFIER

function natives.PLAYER.SET_PLAYER_MAX_EXPLOSIVE_DAMAGE(--[[Player]] player, --[[float]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SET_PLAYER_MAX_EXPLOSIVE_DAMAGE' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x8D768602ADEF2245, player, p1)
end
natives.player.set_player_max_explosive_damage = natives.PLAYER.SET_PLAYER_MAX_EXPLOSIVE_DAMAGE

function natives.PLAYER.SET_PLAYER_EXPLOSIVE_DAMAGE_MODIFIER(--[[Player]] player, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SET_PLAYER_EXPLOSIVE_DAMAGE_MODIFIER' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xD821056B9ACF8052, player, p1)
end
natives.player.set_player_explosive_damage_modifier = natives.PLAYER.SET_PLAYER_EXPLOSIVE_DAMAGE_MODIFIER

function natives.PLAYER.SET_PLAYER_WEAPON_TAKEDOWN_DEFENSE_MODIFIER(--[[Player]] player, --[[float]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SET_PLAYER_WEAPON_TAKEDOWN_DEFENSE_MODIFIER' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x31E90B8873A4CD3B, player, p1)
end
natives.player.set_player_weapon_takedown_defense_modifier = natives.PLAYER.SET_PLAYER_WEAPON_TAKEDOWN_DEFENSE_MODIFIER

--[[
Tints:
   None = -1,
    Rainbow = 0,
  Red = 1,
  SeasideStripes = 2,
   WidowMaker = 3,
   Patriot = 4,
  Blue = 5,
 Black = 6,
    Hornet = 7,
   AirFocce = 8,
 Desert = 9,
   Shadow = 10,
  HighAltitude = 11,
    Airbone = 12,
 Sunrise = 13,

]]
function natives.PLAYER.SET_PLAYER_PARACHUTE_TINT_INDEX(--[[Player]] player, --[[int]] tintIndex) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SET_PLAYER_PARACHUTE_TINT_INDEX' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(tintIndex) == "number", "Arg #2 (tintIndex) must be a number.")

	local result = native_call(0xA3D0E54541D9A5E5, player, tintIndex)
end
natives.player.set_player_parachute_tint_index = natives.PLAYER.SET_PLAYER_PARACHUTE_TINT_INDEX

--[[
Tints:
  None = -1,
    Rainbow = 0,
  Red = 1,
  SeasideStripes = 2,
   WidowMaker = 3,
   Patriot = 4,
  Blue = 5,
 Black = 6,
    Hornet = 7,
   AirFocce = 8,
 Desert = 9,
   Shadow = 10,
  HighAltitude = 11,
    Airbone = 12,
 Sunrise = 13,
]]
function natives.PLAYER.GET_PLAYER_PARACHUTE_TINT_INDEX(--[[Player]] player, --[[int*]] tintIndex) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.GET_PLAYER_PARACHUTE_TINT_INDEX' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(tintIndex) == "userdata", "Arg #2 (tintIndex) must be a userdata.")

	local result = native_call(0x75D3F7A1B0D9B145, player, tintIndex)
end
natives.player.get_player_parachute_tint_index = natives.PLAYER.GET_PLAYER_PARACHUTE_TINT_INDEX

--[[
Tints:
   None = -1,
    Rainbow = 0,
  Red = 1,
  SeasideStripes = 2,
   WidowMaker = 3,
   Patriot = 4,
  Blue = 5,
 Black = 6,
    Hornet = 7,
   AirFocce = 8,
 Desert = 9,
   Shadow = 10,
  HighAltitude = 11,
    Airbone = 12,
 Sunrise = 13,
]]
function natives.PLAYER.SET_PLAYER_RESERVE_PARACHUTE_TINT_INDEX(--[[Player]] player, --[[int]] index) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SET_PLAYER_RESERVE_PARACHUTE_TINT_INDEX' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(index) == "number", "Arg #2 (index) must be a number.")

	local result = native_call(0xAF04C87F5DC1DF38, player, index)
end
natives.player.set_player_reserve_parachute_tint_index = natives.PLAYER.SET_PLAYER_RESERVE_PARACHUTE_TINT_INDEX

--[[
Tints:
  None = -1,
    Rainbow = 0,
  Red = 1,
  SeasideStripes = 2,
   WidowMaker = 3,
   Patriot = 4,
  Blue = 5,
 Black = 6,
    Hornet = 7,
   AirFocce = 8,
 Desert = 9,
   Shadow = 10,
  HighAltitude = 11,
    Airbone = 12,
 Sunrise = 13,
]]
function natives.PLAYER.GET_PLAYER_RESERVE_PARACHUTE_TINT_INDEX(--[[Player]] player, --[[int*]] index) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.GET_PLAYER_RESERVE_PARACHUTE_TINT_INDEX' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(index) == "userdata", "Arg #2 (index) must be a userdata.")

	local result = native_call(0xD5A016BC3C09CF40, player, index)
end
natives.player.get_player_reserve_parachute_tint_index = natives.PLAYER.GET_PLAYER_RESERVE_PARACHUTE_TINT_INDEX

--[[
tints 0- 13
0 - unkown
1 - unkown
2 - unkown
3 - unkown
4 - unkown
]]
function natives.PLAYER.SET_PLAYER_PARACHUTE_PACK_TINT_INDEX(--[[Player]] player, --[[int]] tintIndex) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SET_PLAYER_PARACHUTE_PACK_TINT_INDEX' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(tintIndex) == "number", "Arg #2 (tintIndex) must be a number.")

	local result = native_call(0x93B0FB27C9A04060, player, tintIndex)
end
natives.player.set_player_parachute_pack_tint_index = natives.PLAYER.SET_PLAYER_PARACHUTE_PACK_TINT_INDEX

function natives.PLAYER.GET_PLAYER_PARACHUTE_PACK_TINT_INDEX(--[[Player]] player, --[[int*]] tintIndex) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.GET_PLAYER_PARACHUTE_PACK_TINT_INDEX' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(tintIndex) == "userdata", "Arg #2 (tintIndex) must be a userdata.")

	local result = native_call(0x6E9C742F340CE5A2, player, tintIndex)
end
natives.player.get_player_parachute_pack_tint_index = natives.PLAYER.GET_PLAYER_PARACHUTE_PACK_TINT_INDEX

function natives.PLAYER.SET_PLAYER_HAS_RESERVE_PARACHUTE(--[[Player]] player) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SET_PLAYER_HAS_RESERVE_PARACHUTE' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0x7DDAB28D31FAC363, player)
end
natives.player.set_player_has_reserve_parachute = natives.PLAYER.SET_PLAYER_HAS_RESERVE_PARACHUTE

function natives.PLAYER.GET_PLAYER_HAS_RESERVE_PARACHUTE(--[[Player]] player) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.GET_PLAYER_HAS_RESERVE_PARACHUTE' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0x5DDFE2FF727F3CA3, player)
	return result:__tointeger() ~= 0
end
natives.player.get_player_has_reserve_parachute = natives.PLAYER.GET_PLAYER_HAS_RESERVE_PARACHUTE

function natives.PLAYER.SET_PLAYER_CAN_LEAVE_PARACHUTE_SMOKE_TRAIL(--[[Player]] player, --[[BOOL]] enabled) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SET_PLAYER_CAN_LEAVE_PARACHUTE_SMOKE_TRAIL' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(enabled) == "boolean", "Arg #2 (enabled) must be a boolean.")

	local result = native_call(0xF401B182DBA8AF53, player, enabled)
end
natives.player.set_player_can_leave_parachute_smoke_trail = natives.PLAYER.SET_PLAYER_CAN_LEAVE_PARACHUTE_SMOKE_TRAIL

function natives.PLAYER.SET_PLAYER_PARACHUTE_SMOKE_TRAIL_COLOR(--[[Player]] player, --[[int]] r, --[[int]] g, --[[int]] b) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SET_PLAYER_PARACHUTE_SMOKE_TRAIL_COLOR' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(r) == "number", "Arg #2 (r) must be a number.")
	assert(type(g) == "number", "Arg #3 (g) must be a number.")
	assert(type(b) == "number", "Arg #4 (b) must be a number.")

	local result = native_call(0x8217FD371A4625CF, player, r, g, b)
end
natives.player.set_player_parachute_smoke_trail_color = natives.PLAYER.SET_PLAYER_PARACHUTE_SMOKE_TRAIL_COLOR

function natives.PLAYER.GET_PLAYER_PARACHUTE_SMOKE_TRAIL_COLOR(--[[Player]] player, --[[int*]] r, --[[int*]] g, --[[int*]] b) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.GET_PLAYER_PARACHUTE_SMOKE_TRAIL_COLOR' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(r) == "userdata", "Arg #2 (r) must be a userdata.")
	assert(type(g) == "userdata", "Arg #3 (g) must be a userdata.")
	assert(type(b) == "userdata", "Arg #4 (b) must be a userdata.")

	local result = native_call(0xEF56DBABD3CD4887, player, r, g, b)
end
natives.player.get_player_parachute_smoke_trail_color = natives.PLAYER.GET_PLAYER_PARACHUTE_SMOKE_TRAIL_COLOR

--[[
example:

flags: 0-6

PLAYER::SET_PLAYER_RESET_FLAG_PREFER_REAR_SEATS(PLAYER::PLAYER_ID(), 6);

wouldnt the flag be the seatIndex?
]]
function natives.PLAYER.SET_PLAYER_PHONE_PALETTE_IDX(--[[Player]] player, --[[int]] flags) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SET_PLAYER_PHONE_PALETTE_IDX' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(flags) == "number", "Arg #2 (flags) must be a number.")

	local result = native_call(0x11D5F725F0E780E0, player, flags)
end
natives.player.set_player_phone_palette_idx = natives.PLAYER.SET_PLAYER_PHONE_PALETTE_IDX

function natives.PLAYER.SET_PLAYER_NOISE_MULTIPLIER(--[[Player]] player, --[[float]] multiplier) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SET_PLAYER_NOISE_MULTIPLIER' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(multiplier) == "number", "Arg #2 (multiplier) must be a number.")

	local result = native_call(0xDB89EF50FF25FCE9, player, multiplier)
end
natives.player.set_player_noise_multiplier = natives.PLAYER.SET_PLAYER_NOISE_MULTIPLIER

--[[
Values around 1.0f to 2.0f used in game scripts.
]]
function natives.PLAYER.SET_PLAYER_SNEAKING_NOISE_MULTIPLIER(--[[Player]] player, --[[float]] multiplier) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SET_PLAYER_SNEAKING_NOISE_MULTIPLIER' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(multiplier) == "number", "Arg #2 (multiplier) must be a number.")

	local result = native_call(0xB2C1A29588A9F47C, player, multiplier)
end
natives.player.set_player_sneaking_noise_multiplier = natives.PLAYER.SET_PLAYER_SNEAKING_NOISE_MULTIPLIER

function natives.PLAYER.CAN_PED_HEAR_PLAYER(--[[Player]] player, --[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.CAN_PED_HEAR_PLAYER' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(ped) == "number", "Arg #2 (ped) must be a number.")

	local result = native_call(0xF297383AA91DCA29, player, ped)
	return result:__tointeger() ~= 0
end
natives.player.can_ped_hear_player = natives.PLAYER.CAN_PED_HEAR_PLAYER

--[[
This is to make the player walk without accepting input from INPUT.

gaitType is in increments of 100s. 2000, 500, 300, 200, etc.

p4 is always 1 and p5 is always 0.

C# Example :

Function.Call(Hash.SIMULATE_PLAYER_INPUT_GAIT, Game.Player, 1.0f, 100, 1.0f, 1, 0); //Player will go forward for 100ms
]]
function natives.PLAYER.SIMULATE_PLAYER_INPUT_GAIT(--[[Player]] player, --[[float]] amount, --[[int]] gaitType, --[[float]] speed, --[[BOOL]] p4, --[[BOOL]] p5) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SIMULATE_PLAYER_INPUT_GAIT' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(amount) == "number", "Arg #2 (amount) must be a number.")
	assert(type(gaitType) == "number", "Arg #3 (gaitType) must be a number.")
	assert(type(speed) == "number", "Arg #4 (speed) must be a number.")
	assert(type(p4) == "boolean", "Arg #5 (p4) must be a boolean.")
	assert(type(p5) == "boolean", "Arg #6 (p5) must be a boolean.")

	local result = native_call(0x477D5D63E63ECA5D, player, amount, gaitType, speed, p4, p5)
end
natives.player.simulate_player_input_gait = natives.PLAYER.SIMULATE_PLAYER_INPUT_GAIT

function natives.PLAYER.RESET_PLAYER_INPUT_GAIT(--[[Player]] player) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.RESET_PLAYER_INPUT_GAIT' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0x19531C47A2ABD691, player)
end
natives.player.reset_player_input_gait = natives.PLAYER.RESET_PLAYER_INPUT_GAIT

function natives.PLAYER.SET_AUTO_GIVE_PARACHUTE_WHEN_ENTER_PLANE(--[[Player]] player, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SET_AUTO_GIVE_PARACHUTE_WHEN_ENTER_PLANE' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x9F343285A00B4BB6, player, toggle)
end
natives.player.set_auto_give_parachute_when_enter_plane = natives.PLAYER.SET_AUTO_GIVE_PARACHUTE_WHEN_ENTER_PLANE

function natives.PLAYER.SET_AUTO_GIVE_SCUBA_GEAR_WHEN_EXIT_VEHICLE(--[[Player]] player, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SET_AUTO_GIVE_SCUBA_GEAR_WHEN_EXIT_VEHICLE' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xD2B315B6689D537D, player, toggle)
end
natives.player.set_auto_give_scuba_gear_when_exit_vehicle = natives.PLAYER.SET_AUTO_GIVE_SCUBA_GEAR_WHEN_EXIT_VEHICLE

function natives.PLAYER.SET_PLAYER_STEALTH_PERCEPTION_MODIFIER(--[[Player]] player, --[[float]] value) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SET_PLAYER_STEALTH_PERCEPTION_MODIFIER' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(value) == "number", "Arg #2 (value) must be a number.")

	local result = native_call(0x4E9021C1FCDD507A, player, value)
end
natives.player.set_player_stealth_perception_modifier = natives.PLAYER.SET_PLAYER_STEALTH_PERCEPTION_MODIFIER

function natives.PLAYER.IS_REMOTE_PLAYER_IN_NON_CLONED_VEHICLE(--[[Player]] player) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.IS_REMOTE_PLAYER_IN_NON_CLONED_VEHICLE' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0x690A61A6D13583F6, player)
	return result:__tointeger() ~= 0
end
natives.player.is_remote_player_in_non_cloned_vehicle = natives.PLAYER.IS_REMOTE_PLAYER_IN_NON_CLONED_VEHICLE

function natives.PLAYER.INCREASE_PLAYER_JUMP_SUPPRESSION_RANGE(--[[Player]] player) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.INCREASE_PLAYER_JUMP_SUPPRESSION_RANGE' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0x9EDD76E87D5D51BA, player)
end
natives.player.increase_player_jump_suppression_range = natives.PLAYER.INCREASE_PLAYER_JUMP_SUPPRESSION_RANGE

function natives.PLAYER.SET_PLAYER_SIMULATE_AIMING(--[[Player]] player, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SET_PLAYER_SIMULATE_AIMING' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xC54C95DA968EC5B5, player, toggle)
end
natives.player.set_player_simulate_aiming = natives.PLAYER.SET_PLAYER_SIMULATE_AIMING

function natives.PLAYER.SET_PLAYER_CLOTH_PIN_FRAMES(--[[Player]] player, --[[int]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SET_PLAYER_CLOTH_PIN_FRAMES' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x749FADDF97DFE930, player, p1)
end
natives.player.set_player_cloth_pin_frames = natives.PLAYER.SET_PLAYER_CLOTH_PIN_FRAMES

--[[
Every occurrence was either 0 or 2.
]]
function natives.PLAYER.SET_PLAYER_CLOTH_PACKAGE_INDEX(--[[int]] index) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SET_PLAYER_CLOTH_PACKAGE_INDEX' due to disabled trusted mode")

	assert(type(index) == "number", "Arg #1 (index) must be a number.")

	local result = native_call(0x9F7BBA2EA6372500, index)
end
natives.player.set_player_cloth_package_index = natives.PLAYER.SET_PLAYER_CLOTH_PACKAGE_INDEX

--[[
6 matches across 4 scripts. 5 occurrences were 240. The other was 255.
]]
function natives.PLAYER.SET_PLAYER_CLOTH_LOCK_COUNTER(--[[int]] value) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SET_PLAYER_CLOTH_LOCK_COUNTER' due to disabled trusted mode")

	assert(type(value) == "number", "Arg #1 (value) must be a number.")

	local result = native_call(0x14D913B777DFF5DA, value)
end
natives.player.set_player_cloth_lock_counter = natives.PLAYER.SET_PLAYER_CLOTH_LOCK_COUNTER

--[[
Only 1 match. ob_sofa_michael.

PLAYER::PLAYER_ATTACH_VIRTUAL_BOUND(-804.5928f, 173.1801f, 71.68436f, 0f, 0f, 0.590625f, 1f, 0.7f);1.0.335.2, 1.0.350.1/2, 1.0.372.2, 1.0.393.2, 1.0.393.4, 1.0.463.1;
]]
function natives.PLAYER.PLAYER_ATTACH_VIRTUAL_BOUND(--[[float]] p0, --[[float]] p1, --[[float]] p2, --[[float]] p3, --[[float]] p4, --[[float]] p5, --[[float]] p6, --[[float]] p7) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.PLAYER_ATTACH_VIRTUAL_BOUND' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")
	assert(type(p6) == "number", "Arg #7 (p6) must be a number.")
	assert(type(p7) == "number", "Arg #8 (p7) must be a number.")

	local result = native_call(0xED51733DC73AED51, p0, p1, p2, p3, p4, p5, p6, p7)
end
natives.player.player_attach_virtual_bound = natives.PLAYER.PLAYER_ATTACH_VIRTUAL_BOUND

--[[
1.0.335.2, 1.0.350.1/2, 1.0.372.2, 1.0.393.2, 1.0.393.4, 1.0.463.1;
]]
function natives.PLAYER.PLAYER_DETACH_VIRTUAL_BOUND() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.PLAYER_DETACH_VIRTUAL_BOUND' due to disabled trusted mode")

	local result = native_call(0x1DD5897E2FA6E7C9)
end
natives.player.player_detach_virtual_bound = natives.PLAYER.PLAYER_DETACH_VIRTUAL_BOUND

function natives.PLAYER.HAS_PLAYER_BEEN_SPOTTED_IN_STOLEN_VEHICLE(--[[Player]] player) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.HAS_PLAYER_BEEN_SPOTTED_IN_STOLEN_VEHICLE' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0xD705740BB0A1CF4C, player)
	return result:__tointeger() ~= 0
end
natives.player.has_player_been_spotted_in_stolen_vehicle = natives.PLAYER.HAS_PLAYER_BEEN_SPOTTED_IN_STOLEN_VEHICLE

--[[
Returns true if an unk value is greater than 0.0f
]]
function natives.PLAYER.IS_PLAYER_BATTLE_AWARE(--[[Player]] player) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.IS_PLAYER_BATTLE_AWARE' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0x38D28DA81E4E9BF9, player)
	return result:__tointeger() ~= 0
end
natives.player.is_player_battle_aware = natives.PLAYER.IS_PLAYER_BATTLE_AWARE

--[[
var num3 = PLAYER::GET_PLAYER_PED(l_2171); // proof l_2171 is a player

var num17 = PLAYER::0x9DF75B2A(l_2171, 100, 0); // l_2171

.ysc:
    if (PLAYER::GET_PLAYER_WANTED_LEVEL(l_6EF) < v_4) { // l_6EF is a player
        PLAYER::SET_PLAYER_WANTED_LEVEL(l_6EF, v_4, 0); // l_6EF
        PLAYER::SET_PLAYER_WANTED_LEVEL_NOW(l_6EF, 0); // l_6EF
    } else { 
        PLAYER::_4669B3ED80F24B4E(l_6EF); // l_6EF
        HUD::_BA8D65C1C65702E5(1);
        a_0 = 1;
    }

        if (l_4B24[l_6F2/*156*/]._f8C != PLAYER::_BC0753C9CA14B506(l_6EF, 100, 0)) { // l_6EF
            l_4B24[l_6F2/*156*/]._f8C = PLAYER::_BC0753C9CA14B506(l_6EF, 100, 0); // l_6EF
        }

Both was taken from fm_mission_controller
]]
function natives.PLAYER.GET_PLAYER_RECEIVED_BATTLE_EVENT_RECENTLY(--[[Player]] player, --[[int]] p1, --[[BOOL]] p2) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.GET_PLAYER_RECEIVED_BATTLE_EVENT_RECENTLY' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")

	local result = native_call(0xBC0753C9CA14B506, player, p1, p2)
	return result:__tointeger() ~= 0
end
natives.player.get_player_received_battle_event_recently = natives.PLAYER.GET_PLAYER_RECEIVED_BATTLE_EVENT_RECENTLY

--[[
Appears only 3 times in the scripts, more specifically in michael1.ysc

-
This can be used to prevent dying if you are "out of the world"
]]
function natives.PLAYER.EXTEND_WORLD_BOUNDARY_FOR_PLAYER(--[[float]] x, --[[float]] y, --[[float]] z) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.EXTEND_WORLD_BOUNDARY_FOR_PLAYER' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")

	local result = native_call(0x5006D96C995A5827, x, y, z)
end
natives.player.extend_world_boundary_for_player = natives.PLAYER.EXTEND_WORLD_BOUNDARY_FOR_PLAYER

function natives.PLAYER.RESET_WORLD_BOUNDARY_FOR_PLAYER() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.RESET_WORLD_BOUNDARY_FOR_PLAYER' due to disabled trusted mode")

	local result = native_call(0xDA1DF03D5A315F4E)
end
natives.player.reset_world_boundary_for_player = natives.PLAYER.RESET_WORLD_BOUNDARY_FOR_PLAYER

--[[
Returns true if the player is riding a train.
]]
function natives.PLAYER.IS_PLAYER_RIDING_TRAIN(--[[Player]] player) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.IS_PLAYER_RIDING_TRAIN' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0x4EC12697209F2196, player)
	return result:__tointeger() ~= 0
end
natives.player.is_player_riding_train = natives.PLAYER.IS_PLAYER_RIDING_TRAIN

function natives.PLAYER.HAS_PLAYER_LEFT_THE_WORLD(--[[Player]] player) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.HAS_PLAYER_LEFT_THE_WORLD' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0xD55DDFB47991A294, player)
	return result:__tointeger() ~= 0
end
natives.player.has_player_left_the_world = natives.PLAYER.HAS_PLAYER_LEFT_THE_WORLD

function natives.PLAYER.SET_PLAYER_LEAVE_PED_BEHIND(--[[Player]] player, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SET_PLAYER_LEAVE_PED_BEHIND' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xFF300C7649724A0B, player, toggle)
end
natives.player.set_player_leave_ped_behind = natives.PLAYER.SET_PLAYER_LEAVE_PED_BEHIND

--[[
p1 was always 5.
p4 was always false.
]]
function natives.PLAYER.SET_PLAYER_PARACHUTE_VARIATION_OVERRIDE(--[[Player]] player, --[[int]] p1, --[[Any]] p2, --[[Any]] p3, --[[BOOL]] p4) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SET_PLAYER_PARACHUTE_VARIATION_OVERRIDE' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "boolean", "Arg #5 (p4) must be a boolean.")

	local result = native_call(0xD9284A8C0D48352C, player, p1, p2, p3, p4)
end
natives.player.set_player_parachute_variation_override = natives.PLAYER.SET_PLAYER_PARACHUTE_VARIATION_OVERRIDE

function natives.PLAYER.CLEAR_PLAYER_PARACHUTE_VARIATION_OVERRIDE(--[[Player]] player) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.CLEAR_PLAYER_PARACHUTE_VARIATION_OVERRIDE' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0x0F4CC924CF8C7B21, player)
end
natives.player.clear_player_parachute_variation_override = natives.PLAYER.CLEAR_PLAYER_PARACHUTE_VARIATION_OVERRIDE

function natives.PLAYER.SET_PLAYER_PARACHUTE_MODEL_OVERRIDE(--[[Player]] player, --[[Hash]] model) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SET_PLAYER_PARACHUTE_MODEL_OVERRIDE' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(model) == "number", "Arg #2 (model) must be a number.")

	local result = native_call(0x977DB4641F6FC3DB, player, model)
end
natives.player.set_player_parachute_model_override = natives.PLAYER.SET_PLAYER_PARACHUTE_MODEL_OVERRIDE

function natives.PLAYER.SET_PLAYER_RESERVE_PARACHUTE_MODEL_OVERRIDE(--[[Player]] player, --[[Hash]] model) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SET_PLAYER_RESERVE_PARACHUTE_MODEL_OVERRIDE' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(model) == "number", "Arg #2 (model) must be a number.")

	local result = native_call(0x0764486AEDE748DB, player, model)
end
natives.player.set_player_reserve_parachute_model_override = natives.PLAYER.SET_PLAYER_RESERVE_PARACHUTE_MODEL_OVERRIDE

function natives.PLAYER.GET_PLAYER_PARACHUTE_MODEL_OVERRIDE(--[[Player]] player) -- Returns Hash
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.GET_PLAYER_PARACHUTE_MODEL_OVERRIDE' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0xC219887CA3E65C41, player)
	return result:__tointeger()
end
natives.player.get_player_parachute_model_override = natives.PLAYER.GET_PLAYER_PARACHUTE_MODEL_OVERRIDE

function natives.PLAYER.GET_PLAYER_RESERVE_PARACHUTE_MODEL_OVERRIDE(--[[Player]] player) -- Returns Hash
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.GET_PLAYER_RESERVE_PARACHUTE_MODEL_OVERRIDE' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0x37FAAA68DCA9D08D, player)
	return result:__tointeger()
end
natives.player.get_player_reserve_parachute_model_override = natives.PLAYER.GET_PLAYER_RESERVE_PARACHUTE_MODEL_OVERRIDE

function natives.PLAYER.CLEAR_PLAYER_PARACHUTE_MODEL_OVERRIDE(--[[Player]] player) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.CLEAR_PLAYER_PARACHUTE_MODEL_OVERRIDE' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0x8753997EB5F6EE3F, player)
end
natives.player.clear_player_parachute_model_override = natives.PLAYER.CLEAR_PLAYER_PARACHUTE_MODEL_OVERRIDE

function natives.PLAYER.CLEAR_PLAYER_RESERVE_PARACHUTE_MODEL_OVERRIDE(--[[Player]] player) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.CLEAR_PLAYER_RESERVE_PARACHUTE_MODEL_OVERRIDE' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0x290D248E25815AE8, player)
end
natives.player.clear_player_reserve_parachute_model_override = natives.PLAYER.CLEAR_PLAYER_RESERVE_PARACHUTE_MODEL_OVERRIDE

function natives.PLAYER.SET_PLAYER_PARACHUTE_PACK_MODEL_OVERRIDE(--[[Player]] player, --[[Hash]] model) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SET_PLAYER_PARACHUTE_PACK_MODEL_OVERRIDE' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(model) == "number", "Arg #2 (model) must be a number.")

	local result = native_call(0xDC80A4C2F18A2B64, player, model)
end
natives.player.set_player_parachute_pack_model_override = natives.PLAYER.SET_PLAYER_PARACHUTE_PACK_MODEL_OVERRIDE

function natives.PLAYER.CLEAR_PLAYER_PARACHUTE_PACK_MODEL_OVERRIDE(--[[Player]] player) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.CLEAR_PLAYER_PARACHUTE_PACK_MODEL_OVERRIDE' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0x10C54E4389C12B42, player)
end
natives.player.clear_player_parachute_pack_model_override = natives.PLAYER.CLEAR_PLAYER_PARACHUTE_PACK_MODEL_OVERRIDE

function natives.PLAYER.DISABLE_PLAYER_VEHICLE_REWARDS(--[[Player]] player) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.DISABLE_PLAYER_VEHICLE_REWARDS' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0xC142BE3BB9CE125F, player)
end
natives.player.disable_player_vehicle_rewards = natives.PLAYER.DISABLE_PLAYER_VEHICLE_REWARDS

--[[
Used with radios:

void sub_cf383(auto _a0) {
    if ((a_0)==1) {
        if (MISC::IS_BIT_SET((g_240005._f1), 3)) {
            PLAYER::_2F7CEB6520288061(0);
            AUDIO::SET_AUDIO_FLAG("AllowRadioDuringSwitch", 0);
            AUDIO::SET_MOBILE_PHONE_RADIO_STATE(0);
            AUDIO::SET_AUDIO_FLAG("MobileRadioInGame", 0);
        }
        sub_cf3f6(1);
    } else { 
        if (MISC::IS_BIT_SET((g_240005._f1), 3)) {
            PLAYER::_2F7CEB6520288061(1);
            AUDIO::SET_AUDIO_FLAG("AllowRadioDuringSwitch", 1);
            AUDIO::SET_MOBILE_PHONE_RADIO_STATE(1);
            AUDIO::SET_AUDIO_FLAG("MobileRadioInGame", 1);
        }
        sub_cf3f6(0);
    }
}

SET_PLAYER_S*
]]
function natives.PLAYER.SET_PLAYER_SPECTATED_VEHICLE_RADIO_OVERRIDE(--[[BOOL]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SET_PLAYER_SPECTATED_VEHICLE_RADIO_OVERRIDE' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0x2F7CEB6520288061, p0)
end
natives.player.set_player_spectated_vehicle_radio_override = natives.PLAYER.SET_PLAYER_SPECTATED_VEHICLE_RADIO_OVERRIDE

function natives.PLAYER.SET_PLAYER_BLUETOOTH_STATE(--[[Player]] player, --[[BOOL]] state) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SET_PLAYER_BLUETOOTH_STATE' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(state) == "boolean", "Arg #2 (state) must be a boolean.")

	local result = native_call(0x5DC40A8869C22141, player, state)
end
natives.player.set_player_bluetooth_state = natives.PLAYER.SET_PLAYER_BLUETOOTH_STATE

function natives.PLAYER.IS_PLAYER_BLUETOOTH_ENABLE(--[[Player]] player) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.IS_PLAYER_BLUETOOTH_ENABLE' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0x65FAEE425DE637B0, player)
	return result:__tointeger() ~= 0
end
natives.player.is_player_bluetooth_enable = natives.PLAYER.IS_PLAYER_BLUETOOTH_ENABLE

function natives.PLAYER.DISABLE_CAMERA_VIEW_MODE_CYCLE(--[[Player]] player) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.DISABLE_CAMERA_VIEW_MODE_CYCLE' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0x5501B7A5CDB79D37, player)
end
natives.player.disable_camera_view_mode_cycle = natives.PLAYER.DISABLE_CAMERA_VIEW_MODE_CYCLE

function natives.PLAYER.GET_PLAYER_FAKE_WANTED_LEVEL(--[[Player]] player) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.GET_PLAYER_FAKE_WANTED_LEVEL' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")

	local result = native_call(0x56105E599CAB0EFA, player)
	return result:__tointeger()
end
natives.player.get_player_fake_wanted_level = natives.PLAYER.GET_PLAYER_FAKE_WANTED_LEVEL

function natives.PLAYER.SET_PLAYER_CAN_DAMAGE_PLAYER(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SET_PLAYER_CAN_DAMAGE_PLAYER' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0x55FCC0C390620314, p0, p1, p2)
end
natives.player.set_player_can_damage_player = natives.PLAYER.SET_PLAYER_CAN_DAMAGE_PLAYER

function natives.PLAYER.SET_APPLY_WAYPOINT_OF_PLAYER(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SET_APPLY_WAYPOINT_OF_PLAYER' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x2382AB11450AE7BA, p0, p1)
end
natives.player.set_apply_waypoint_of_player = natives.PLAYER.SET_APPLY_WAYPOINT_OF_PLAYER

function natives.PLAYER.IS_PLAYER_VEHICLE_WEAPON_TOGGLED_TO_NON_HOMING(--[[Any]] p0) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.IS_PLAYER_VEHICLE_WEAPON_TOGGLED_TO_NON_HOMING' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x6E4361FF3E8CD7CA, p0)
	return result:__tointeger()
end
natives.player.is_player_vehicle_weapon_toggled_to_non_homing = natives.PLAYER.IS_PLAYER_VEHICLE_WEAPON_TOGGLED_TO_NON_HOMING

--[[
Unsets playerPed+330 if the current weapon has certain flags.
]]
function natives.PLAYER.SET_PLAYER_VEHICLE_WEAPON_TO_NON_HOMING(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SET_PLAYER_VEHICLE_WEAPON_TO_NON_HOMING' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x237440E46D918649, p0)
end
natives.player.set_player_vehicle_weapon_to_non_homing = natives.PLAYER.SET_PLAYER_VEHICLE_WEAPON_TO_NON_HOMING

function natives.PLAYER.SET_PLAYER_HOMING_DISABLED_FOR_ALL_VEHICLE_WEAPONS(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SET_PLAYER_HOMING_DISABLED_FOR_ALL_VEHICLE_WEAPONS' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xEE4EBDD2593BA844, p0, p1)
end
natives.player.set_player_homing_disabled_for_all_vehicle_weapons = natives.PLAYER.SET_PLAYER_HOMING_DISABLED_FOR_ALL_VEHICLE_WEAPONS

function natives.PLAYER.ADD_PLAYER_TARGETABLE_ENTITY(--[[Player]] player, --[[Entity]] entity) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.ADD_PLAYER_TARGETABLE_ENTITY' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(entity) == "number", "Arg #2 (entity) must be a number.")

	local result = native_call(0x9097EB6D4BB9A12A, player, entity)
end
natives.player.add_player_targetable_entity = natives.PLAYER.ADD_PLAYER_TARGETABLE_ENTITY

function natives.PLAYER.REMOVE_PLAYER_TARGETABLE_ENTITY(--[[Player]] player, --[[Entity]] entity) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.REMOVE_PLAYER_TARGETABLE_ENTITY' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(entity) == "number", "Arg #2 (entity) must be a number.")

	local result = native_call(0x9F260BFB59ADBCA3, player, entity)
end
natives.player.remove_player_targetable_entity = natives.PLAYER.REMOVE_PLAYER_TARGETABLE_ENTITY

function natives.PLAYER.SET_PLAYER_PREVIOUS_VARIATION_DATA(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3, --[[Any]] p4, --[[Any]] p5) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SET_PLAYER_PREVIOUS_VARIATION_DATA' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")

	local result = native_call(0x7BAE68775557AE0B, p0, p1, p2, p3, p4, p5)
end
natives.player.set_player_previous_variation_data = natives.PLAYER.SET_PLAYER_PREVIOUS_VARIATION_DATA

--[[
Resets values set by SET_SCRIPT_FIRE_POSITION
]]
function natives.PLAYER.REMOVE_SCRIPT_FIRE_POSITION() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.REMOVE_SCRIPT_FIRE_POSITION' due to disabled trusted mode")

	local result = native_call(0x7148E0F43D11F0D9)
end
natives.player.remove_script_fire_position = natives.PLAYER.REMOVE_SCRIPT_FIRE_POSITION

function natives.PLAYER.SET_SCRIPT_FIRE_POSITION(--[[float]] coordX, --[[float]] coordY, --[[float]] coordZ) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'PLAYER.SET_SCRIPT_FIRE_POSITION' due to disabled trusted mode")

	assert(type(coordX) == "number", "Arg #1 (coordX) must be a number.")
	assert(type(coordY) == "number", "Arg #2 (coordY) must be a number.")
	assert(type(coordZ) == "number", "Arg #3 (coordZ) must be a number.")

	local result = native_call(0x70A382ADEC069DD3, coordX, coordY, coordZ)
end
natives.player.set_script_fire_position = natives.PLAYER.SET_SCRIPT_FIRE_POSITION


natives.RECORDING = {}
natives.recording = {}

function natives.RECORDING.REPLAY_START_EVENT(--[[int]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'RECORDING.REPLAY_START_EVENT' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x48621C9FCA3EBD28, p0)
end
natives.recording.replay_start_event = natives.RECORDING.REPLAY_START_EVENT

function natives.RECORDING.REPLAY_STOP_EVENT() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'RECORDING.REPLAY_STOP_EVENT' due to disabled trusted mode")

	local result = native_call(0x81CBAE94390F9F89)
end
natives.recording.replay_stop_event = natives.RECORDING.REPLAY_STOP_EVENT

function natives.RECORDING.REPLAY_CANCEL_EVENT() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'RECORDING.REPLAY_CANCEL_EVENT' due to disabled trusted mode")

	local result = native_call(0x13B350B8AD0EEE10)
end
natives.recording.replay_cancel_event = natives.RECORDING.REPLAY_CANCEL_EVENT

function natives.RECORDING.REPLAY_RECORD_BACK_FOR_TIME(--[[float]] p0, --[[float]] p1, --[[int]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'RECORDING.REPLAY_RECORD_BACK_FOR_TIME' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0x293220DA1B46CEBC, p0, p1, p2)
end
natives.recording.replay_record_back_for_time = natives.RECORDING.REPLAY_RECORD_BACK_FOR_TIME

--[[
-This function appears to be deprecated/ unused. Tracing the call internally leads to a _nullsub -

first one seems to be a string of a mission name, second one seems to be a bool/toggle

p1 was always 0.

]]
function natives.RECORDING.REPLAY_CHECK_FOR_EVENT_THIS_FRAME(--[[const char*]] missionNameLabel, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'RECORDING.REPLAY_CHECK_FOR_EVENT_THIS_FRAME' due to disabled trusted mode")

	assert(type(missionNameLabel) == "string", "Arg #1 (missionNameLabel) must be a string.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x208784099002BC30, missionNameLabel, p1)
end
natives.recording.replay_check_for_event_this_frame = natives.RECORDING.REPLAY_CHECK_FOR_EVENT_THIS_FRAME

--[[
This disable the recording feature and has to be called every frame.
]]
function natives.RECORDING.REPLAY_PREVENT_RECORDING_THIS_FRAME() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'RECORDING.REPLAY_PREVENT_RECORDING_THIS_FRAME' due to disabled trusted mode")

	local result = native_call(0xEB2D525B57F42B40)
end
natives.recording.replay_prevent_recording_this_frame = natives.RECORDING.REPLAY_PREVENT_RECORDING_THIS_FRAME

function natives.RECORDING.REPLAY_RESET_EVENT_INFO() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'RECORDING.REPLAY_RESET_EVENT_INFO' due to disabled trusted mode")

	local result = native_call(0xF854439EFBB3B583)
end
natives.recording.replay_reset_event_info = natives.RECORDING.REPLAY_RESET_EVENT_INFO

--[[
This will disable the ability to make camera changes in R* Editor.
]]
function natives.RECORDING.REPLAY_DISABLE_CAMERA_MOVEMENT_THIS_FRAME() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'RECORDING.REPLAY_DISABLE_CAMERA_MOVEMENT_THIS_FRAME' due to disabled trusted mode")

	local result = native_call(0xAF66DCEE6609B148)
end
natives.recording.replay_disable_camera_movement_this_frame = natives.RECORDING.REPLAY_DISABLE_CAMERA_MOVEMENT_THIS_FRAME

--[[
Does nothing (it's a nullsub).
]]
function natives.RECORDING.RECORD_GREATEST_MOMENT(--[[int]] p0, --[[int]] p1, --[[int]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'RECORDING.RECORD_GREATEST_MOMENT' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0x66972397E0757E7A, p0, p1, p2)
end
natives.recording.record_greatest_moment = natives.RECORDING.RECORD_GREATEST_MOMENT

--[[
Starts recording a replay.
If mode is 0, turns on action replay.
If mode is 1, starts recording.
If already recording a replay, does nothing.
]]
function natives.RECORDING.START_REPLAY_RECORDING(--[[int]] mode) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'RECORDING.START_REPLAY_RECORDING' due to disabled trusted mode")

	assert(type(mode) == "number", "Arg #1 (mode) must be a number.")

	local result = native_call(0xC3AC2FFF9612AC81, mode)
end
natives.recording.start_replay_recording = natives.RECORDING.START_REPLAY_RECORDING

--[[
Stops recording and saves the recorded clip.
]]
function natives.RECORDING.STOP_REPLAY_RECORDING() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'RECORDING.STOP_REPLAY_RECORDING' due to disabled trusted mode")

	local result = native_call(0x071A5197D6AFC8B3)
end
natives.recording.stop_replay_recording = natives.RECORDING.STOP_REPLAY_RECORDING

--[[
Stops recording and discards the recorded clip.
]]
function natives.RECORDING.CANCEL_REPLAY_RECORDING() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'RECORDING.CANCEL_REPLAY_RECORDING' due to disabled trusted mode")

	local result = native_call(0x88BB3507ED41A240)
end
natives.recording.cancel_replay_recording = natives.RECORDING.CANCEL_REPLAY_RECORDING

function natives.RECORDING.SAVE_REPLAY_RECORDING() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'RECORDING.SAVE_REPLAY_RECORDING' due to disabled trusted mode")

	local result = native_call(0x644546EC5287471B)
	return result:__tointeger() ~= 0
end
natives.recording.save_replay_recording = natives.RECORDING.SAVE_REPLAY_RECORDING

--[[
Checks if you're recording, returns TRUE when you start recording (F1) or turn on action replay (F2)

mov al, cs:g_bIsRecordingGameplay // byte_141DD0CD0 in b944
retn
]]
function natives.RECORDING.IS_REPLAY_RECORDING() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'RECORDING.IS_REPLAY_RECORDING' due to disabled trusted mode")

	local result = native_call(0x1897CA71995A90B4)
	return result:__tointeger() ~= 0
end
natives.recording.is_replay_recording = natives.RECORDING.IS_REPLAY_RECORDING

function natives.RECORDING.IS_REPLAY_INITIALIZED() -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'RECORDING.IS_REPLAY_INITIALIZED' due to disabled trusted mode")

	local result = native_call(0xDF4B952F7D381B95)
	return result:__tointeger()
end
natives.recording.is_replay_initialized = natives.RECORDING.IS_REPLAY_INITIALIZED

function natives.RECORDING.IS_REPLAY_AVAILABLE() -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'RECORDING.IS_REPLAY_AVAILABLE' due to disabled trusted mode")

	local result = native_call(0x4282E08174868BE3)
	return result:__tointeger()
end
natives.recording.is_replay_available = natives.RECORDING.IS_REPLAY_AVAILABLE

function natives.RECORDING.IS_REPLAY_RECORD_SPACE_AVAILABLE(--[[BOOL]] p0) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'RECORDING.IS_REPLAY_RECORD_SPACE_AVAILABLE' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0x33D47E85B476ABCD, p0)
	return result:__tointeger() ~= 0
end
natives.recording.is_replay_record_space_available = natives.RECORDING.IS_REPLAY_RECORD_SPACE_AVAILABLE


natives.REPLAY = {}
natives.replay = {}

--[[
Does nothing (it's a nullsub).
]]
function natives.REPLAY.REGISTER_EFFECT_FOR_REPLAY_EDITOR(--[[const char*]] p0, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'REPLAY.REGISTER_EFFECT_FOR_REPLAY_EDITOR' due to disabled trusted mode")

	assert(type(p0) == "string", "Arg #1 (p0) must be a string.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0x7E2BD3EF6C205F09, p0, p1)
end
natives.replay.register_effect_for_replay_editor = natives.REPLAY.REGISTER_EFFECT_FOR_REPLAY_EDITOR

--[[
Returns a bool if interior rendering is disabled, if yes, all "normal" rendered interiors are invisible
]]
function natives.REPLAY.REPLAY_SYSTEM_HAS_REQUESTED_A_SCRIPT_CLEANUP() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'REPLAY.REPLAY_SYSTEM_HAS_REQUESTED_A_SCRIPT_CLEANUP' due to disabled trusted mode")

	local result = native_call(0x95AB8B5C992C7B58)
	return result:__tointeger() ~= 0
end
natives.replay.replay_system_has_requested_a_script_cleanup = natives.REPLAY.REPLAY_SYSTEM_HAS_REQUESTED_A_SCRIPT_CLEANUP

--[[
Disables some other rendering (internal)
]]
function natives.REPLAY.SET_SCRIPTS_HAVE_CLEANED_UP_FOR_REPLAY_SYSTEM() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'REPLAY.SET_SCRIPTS_HAVE_CLEANED_UP_FOR_REPLAY_SYSTEM' due to disabled trusted mode")

	local result = native_call(0x5AD3932DAEB1E5D3)
end
natives.replay.set_scripts_have_cleaned_up_for_replay_system = natives.REPLAY.SET_SCRIPTS_HAVE_CLEANED_UP_FOR_REPLAY_SYSTEM

function natives.REPLAY.SET_REPLAY_SYSTEM_PAUSED_FOR_SAVE(--[[BOOL]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'REPLAY.SET_REPLAY_SYSTEM_PAUSED_FOR_SAVE' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0xE058175F8EAFE79A, p0)
end
natives.replay.set_replay_system_paused_for_save = natives.REPLAY.SET_REPLAY_SYSTEM_PAUSED_FOR_SAVE

--[[
Sets (almost, not sure) all Rockstar Editor values (bIsRecording etc) to 0.
]]
function natives.REPLAY.REPLAY_CONTROL_SHUTDOWN() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'REPLAY.REPLAY_CONTROL_SHUTDOWN' due to disabled trusted mode")

	local result = native_call(0x3353D13F09307691)
end
natives.replay.replay_control_shutdown = natives.REPLAY.REPLAY_CONTROL_SHUTDOWN

--[[
Please note that you will need to call DO_SCREEN_FADE_IN after exiting the Rockstar Editor when you call this.
]]
function natives.REPLAY.ACTIVATE_ROCKSTAR_EDITOR(--[[int]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'REPLAY.ACTIVATE_ROCKSTAR_EDITOR' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x49DA8145672B2725, p0)
end
natives.replay.activate_rockstar_editor = natives.REPLAY.ACTIVATE_ROCKSTAR_EDITOR


natives.SAVEMIGRATION = {}
natives.savemigration = {}

function natives.SAVEMIGRATION.SAVEMIGRATION_IS_MP_ENABLED() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SAVEMIGRATION.SAVEMIGRATION_IS_MP_ENABLED' due to disabled trusted mode")

	local result = native_call(0x84B418E93894AC1C)
	return result:__tointeger() ~= 0
end
natives.savemigration.savemigration_is_mp_enabled = natives.SAVEMIGRATION.SAVEMIGRATION_IS_MP_ENABLED

function natives.SAVEMIGRATION.SAVEMIGRATION_MP_REQUEST_ACCOUNTS() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SAVEMIGRATION.SAVEMIGRATION_MP_REQUEST_ACCOUNTS' due to disabled trusted mode")

	local result = native_call(0x85F41F9225D08C72)
	return result:__tointeger() ~= 0
end
natives.savemigration.savemigration_mp_request_accounts = natives.SAVEMIGRATION.SAVEMIGRATION_MP_REQUEST_ACCOUNTS

function natives.SAVEMIGRATION.SAVEMIGRATION_MP_GET_ACCOUNTS_STATUS() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SAVEMIGRATION.SAVEMIGRATION_MP_GET_ACCOUNTS_STATUS' due to disabled trusted mode")

	local result = native_call(0xC8CB5999919EA2CA)
	return result:__tointeger()
end
natives.savemigration.savemigration_mp_get_accounts_status = natives.SAVEMIGRATION.SAVEMIGRATION_MP_GET_ACCOUNTS_STATUS

function natives.SAVEMIGRATION.SAVEMIGRATION_MP_NUM_ACCOUNTS() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SAVEMIGRATION.SAVEMIGRATION_MP_NUM_ACCOUNTS' due to disabled trusted mode")

	local result = native_call(0x77A16200E18E0C55)
	return result:__tointeger()
end
natives.savemigration.savemigration_mp_num_accounts = natives.SAVEMIGRATION.SAVEMIGRATION_MP_NUM_ACCOUNTS

function natives.SAVEMIGRATION.SAVEMIGRATION_MP_GET_ACCOUNT(--[[int]] p0, --[[Any*]] p1) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SAVEMIGRATION.SAVEMIGRATION_MP_GET_ACCOUNT' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "userdata", "Arg #2 (p1) must be a userdata.")

	local result = native_call(0xFCE2747EEF1D05FC, p0, p1)
	return result:__tointeger() ~= 0
end
natives.savemigration.savemigration_mp_get_account = natives.SAVEMIGRATION.SAVEMIGRATION_MP_GET_ACCOUNT

function natives.SAVEMIGRATION.SAVEMIGRATION_MP_REQUEST_STATUS() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SAVEMIGRATION.SAVEMIGRATION_MP_REQUEST_STATUS' due to disabled trusted mode")

	local result = native_call(0xE5E9746A66359F9D)
	return result:__tointeger() ~= 0
end
natives.savemigration.savemigration_mp_request_status = natives.SAVEMIGRATION.SAVEMIGRATION_MP_REQUEST_STATUS

function natives.SAVEMIGRATION.SAVEMIGRATION_MP_GET_STATUS() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SAVEMIGRATION.SAVEMIGRATION_MP_GET_STATUS' due to disabled trusted mode")

	local result = native_call(0x690B76BD2763E068)
	return result:__tointeger()
end
natives.savemigration.savemigration_mp_get_status = natives.SAVEMIGRATION.SAVEMIGRATION_MP_GET_STATUS


natives.SCRIPT = {}
natives.script = {}

function natives.SCRIPT.REQUEST_SCRIPT(--[[const char*]] scriptName) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SCRIPT.REQUEST_SCRIPT' due to disabled trusted mode")

	assert(type(scriptName) == "string", "Arg #1 (scriptName) must be a string.")

	local result = native_call(0x6EB5F71AA68F2E8E, scriptName)
end
natives.script.request_script = natives.SCRIPT.REQUEST_SCRIPT

function natives.SCRIPT.SET_SCRIPT_AS_NO_LONGER_NEEDED(--[[const char*]] scriptName) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SCRIPT.SET_SCRIPT_AS_NO_LONGER_NEEDED' due to disabled trusted mode")

	assert(type(scriptName) == "string", "Arg #1 (scriptName) must be a string.")

	local result = native_call(0xC90D2DCACD56184C, scriptName)
end
natives.script.set_script_as_no_longer_needed = natives.SCRIPT.SET_SCRIPT_AS_NO_LONGER_NEEDED

--[[
Returns if a script has been loaded into the game. Used to see if a script was loaded after requesting.
]]
function natives.SCRIPT.HAS_SCRIPT_LOADED(--[[const char*]] scriptName) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SCRIPT.HAS_SCRIPT_LOADED' due to disabled trusted mode")

	assert(type(scriptName) == "string", "Arg #1 (scriptName) must be a string.")

	local result = native_call(0xE6CC9F3BA0FB9EF1, scriptName)
	return result:__tointeger() ~= 0
end
natives.script.has_script_loaded = natives.SCRIPT.HAS_SCRIPT_LOADED

function natives.SCRIPT.DOES_SCRIPT_EXIST(--[[const char*]] scriptName) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SCRIPT.DOES_SCRIPT_EXIST' due to disabled trusted mode")

	assert(type(scriptName) == "string", "Arg #1 (scriptName) must be a string.")

	local result = native_call(0xFC04745FBE67C19A, scriptName)
	return result:__tointeger() ~= 0
end
natives.script.does_script_exist = natives.SCRIPT.DOES_SCRIPT_EXIST

--[[
formerly _REQUEST_STREAMED_SCRIPT
]]
function natives.SCRIPT.REQUEST_SCRIPT_WITH_NAME_HASH(--[[Hash]] scriptHash) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SCRIPT.REQUEST_SCRIPT_WITH_NAME_HASH' due to disabled trusted mode")

	assert(type(scriptHash) == "number", "Arg #1 (scriptHash) must be a number.")

	local result = native_call(0xD62A67D26D9653E6, scriptHash)
end
natives.script.request_script_with_name_hash = natives.SCRIPT.REQUEST_SCRIPT_WITH_NAME_HASH

function natives.SCRIPT.SET_SCRIPT_WITH_NAME_HASH_AS_NO_LONGER_NEEDED(--[[Hash]] scriptHash) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SCRIPT.SET_SCRIPT_WITH_NAME_HASH_AS_NO_LONGER_NEEDED' due to disabled trusted mode")

	assert(type(scriptHash) == "number", "Arg #1 (scriptHash) must be a number.")

	local result = native_call(0xC5BC038960E9DB27, scriptHash)
end
natives.script.set_script_with_name_hash_as_no_longer_needed = natives.SCRIPT.SET_SCRIPT_WITH_NAME_HASH_AS_NO_LONGER_NEEDED

function natives.SCRIPT.HAS_SCRIPT_WITH_NAME_HASH_LOADED(--[[Hash]] scriptHash) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SCRIPT.HAS_SCRIPT_WITH_NAME_HASH_LOADED' due to disabled trusted mode")

	assert(type(scriptHash) == "number", "Arg #1 (scriptHash) must be a number.")

	local result = native_call(0x5F0F0C783EB16C04, scriptHash)
	return result:__tointeger() ~= 0
end
natives.script.has_script_with_name_hash_loaded = natives.SCRIPT.HAS_SCRIPT_WITH_NAME_HASH_LOADED

function natives.SCRIPT.DOES_SCRIPT_WITH_NAME_HASH_EXIST(--[[Hash]] scriptHash) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SCRIPT.DOES_SCRIPT_WITH_NAME_HASH_EXIST' due to disabled trusted mode")

	assert(type(scriptHash) == "number", "Arg #1 (scriptHash) must be a number.")

	local result = native_call(0xF86AA3C56BA31381, scriptHash)
	return result:__tointeger() ~= 0
end
natives.script.does_script_with_name_hash_exist = natives.SCRIPT.DOES_SCRIPT_WITH_NAME_HASH_EXIST

function natives.SCRIPT.TERMINATE_THREAD(--[[int]] threadId) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SCRIPT.TERMINATE_THREAD' due to disabled trusted mode")

	assert(type(threadId) == "number", "Arg #1 (threadId) must be a number.")

	local result = native_call(0xC8B189ED9138BCD4, threadId)
end
natives.script.terminate_thread = natives.SCRIPT.TERMINATE_THREAD

function natives.SCRIPT.IS_THREAD_ACTIVE(--[[int]] threadId) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SCRIPT.IS_THREAD_ACTIVE' due to disabled trusted mode")

	assert(type(threadId) == "number", "Arg #1 (threadId) must be a number.")

	local result = native_call(0x46E9AE36D8FA6417, threadId)
	return result:__tointeger() ~= 0
end
natives.script.is_thread_active = natives.SCRIPT.IS_THREAD_ACTIVE

function natives.SCRIPT.GET_NAME_OF_SCRIPT_WITH_THIS_ID(--[[int]] threadId) -- Returns const char*
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SCRIPT.GET_NAME_OF_SCRIPT_WITH_THIS_ID' due to disabled trusted mode")

	assert(type(threadId) == "number", "Arg #1 (threadId) must be a number.")

	local result = native_call(0x05A42BA9FC8DA96B, threadId)
	return result:__tostring(true)
end
natives.script.get_name_of_script_with_this_id = natives.SCRIPT.GET_NAME_OF_SCRIPT_WITH_THIS_ID

--[[
Starts a new iteration of the current threads.
Call this first, then SCRIPT_THREAD_ITERATOR_GET_NEXT_THREAD_ID (0x30B4FA1C82DD4B9F)
]]
function natives.SCRIPT.SCRIPT_THREAD_ITERATOR_RESET() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SCRIPT.SCRIPT_THREAD_ITERATOR_RESET' due to disabled trusted mode")

	local result = native_call(0xDADFADA5A20143A8)
end
natives.script.script_thread_iterator_reset = natives.SCRIPT.SCRIPT_THREAD_ITERATOR_RESET

--[[
If the function returns 0, the end of the iteration has been reached.
]]
function natives.SCRIPT.SCRIPT_THREAD_ITERATOR_GET_NEXT_THREAD_ID() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SCRIPT.SCRIPT_THREAD_ITERATOR_GET_NEXT_THREAD_ID' due to disabled trusted mode")

	local result = native_call(0x30B4FA1C82DD4B9F)
	return result:__tointeger()
end
natives.script.script_thread_iterator_get_next_thread_id = natives.SCRIPT.SCRIPT_THREAD_ITERATOR_GET_NEXT_THREAD_ID

function natives.SCRIPT.GET_ID_OF_THIS_THREAD() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SCRIPT.GET_ID_OF_THIS_THREAD' due to disabled trusted mode")

	local result = native_call(0xC30338E8088E2E21)
	return result:__tointeger()
end
natives.script.get_id_of_this_thread = natives.SCRIPT.GET_ID_OF_THIS_THREAD

function natives.SCRIPT.TERMINATE_THIS_THREAD() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SCRIPT.TERMINATE_THIS_THREAD' due to disabled trusted mode")

	local result = native_call(0x1090044AD1DA76FA)
end
natives.script.terminate_this_thread = natives.SCRIPT.TERMINATE_THIS_THREAD

--[[
Gets the number of instances of the specified script is currently running.

Actually returns numRefs - 1.
if (program)
	v3 = rage::scrProgram::GetNumRefs(program) - 1;
return v3;
]]
function natives.SCRIPT.GET_NUMBER_OF_THREADS_RUNNING_THE_SCRIPT_WITH_THIS_HASH(--[[Hash]] scriptHash) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SCRIPT.GET_NUMBER_OF_THREADS_RUNNING_THE_SCRIPT_WITH_THIS_HASH' due to disabled trusted mode")

	assert(type(scriptHash) == "number", "Arg #1 (scriptHash) must be a number.")

	local result = native_call(0x2C83A9DA6BFFC4F9, scriptHash)
	return result:__tointeger()
end
natives.script.get_number_of_threads_running_the_script_with_this_hash = natives.SCRIPT.GET_NUMBER_OF_THREADS_RUNNING_THE_SCRIPT_WITH_THIS_HASH

function natives.SCRIPT.GET_THIS_SCRIPT_NAME() -- Returns const char*
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SCRIPT.GET_THIS_SCRIPT_NAME' due to disabled trusted mode")

	local result = native_call(0x442E0A7EDE4A738A)
	return result:__tostring(true)
end
natives.script.get_this_script_name = natives.SCRIPT.GET_THIS_SCRIPT_NAME

function natives.SCRIPT.GET_HASH_OF_THIS_SCRIPT_NAME() -- Returns Hash
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SCRIPT.GET_HASH_OF_THIS_SCRIPT_NAME' due to disabled trusted mode")

	local result = native_call(0x8A1C8B1738FFE87E)
	return result:__tointeger()
end
natives.script.get_hash_of_this_script_name = natives.SCRIPT.GET_HASH_OF_THIS_SCRIPT_NAME

--[[
eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork)
]]
function natives.SCRIPT.GET_NUMBER_OF_EVENTS(--[[int]] eventGroup) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SCRIPT.GET_NUMBER_OF_EVENTS' due to disabled trusted mode")

	assert(type(eventGroup) == "number", "Arg #1 (eventGroup) must be a number.")

	local result = native_call(0x5F92A689A06620AA, eventGroup)
	return result:__tointeger()
end
natives.script.get_number_of_events = natives.SCRIPT.GET_NUMBER_OF_EVENTS

--[[
eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork)
]]
function natives.SCRIPT.GET_EVENT_EXISTS(--[[int]] eventGroup, --[[int]] eventIndex) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SCRIPT.GET_EVENT_EXISTS' due to disabled trusted mode")

	assert(type(eventGroup) == "number", "Arg #1 (eventGroup) must be a number.")
	assert(type(eventIndex) == "number", "Arg #2 (eventIndex) must be a number.")

	local result = native_call(0x936E6168A9BCEDB5, eventGroup, eventIndex)
	return result:__tointeger() ~= 0
end
natives.script.get_event_exists = natives.SCRIPT.GET_EVENT_EXISTS

--[[
eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork)
]]
function natives.SCRIPT.GET_EVENT_AT_INDEX(--[[int]] eventGroup, --[[int]] eventIndex) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SCRIPT.GET_EVENT_AT_INDEX' due to disabled trusted mode")

	assert(type(eventGroup) == "number", "Arg #1 (eventGroup) must be a number.")
	assert(type(eventIndex) == "number", "Arg #2 (eventIndex) must be a number.")

	local result = native_call(0xD8F66A3A60C62153, eventGroup, eventIndex)
	return result:__tointeger()
end
natives.script.get_event_at_index = natives.SCRIPT.GET_EVENT_AT_INDEX

--[[
eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork)

Note: eventDataSize is NOT the size in bytes, it is the size determined by the SIZE_OF operator (RAGE Script operator, not C/C++ sizeof). That is, the size in bytes divided by 8 (script variables are always 8-byte aligned!).
]]
function natives.SCRIPT.GET_EVENT_DATA(--[[int]] eventGroup, --[[int]] eventIndex, --[[Any*]] eventData, --[[int]] eventDataSize) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SCRIPT.GET_EVENT_DATA' due to disabled trusted mode")

	assert(type(eventGroup) == "number", "Arg #1 (eventGroup) must be a number.")
	assert(type(eventIndex) == "number", "Arg #2 (eventIndex) must be a number.")
	assert(type(eventData) == "userdata", "Arg #3 (eventData) must be a userdata.")
	assert(type(eventDataSize) == "number", "Arg #4 (eventDataSize) must be a number.")

	local result = native_call(0x2902843FCD2B2D79, eventGroup, eventIndex, eventData, eventDataSize)
	return result:__tointeger() ~= 0
end
natives.script.get_event_data = natives.SCRIPT.GET_EVENT_DATA

--[[
eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork)

Note: eventDataSize is NOT the size in bytes, it is the size determined by the SIZE_OF operator (RAGE Script operator, not C/C++ sizeof). That is, the size in bytes divided by 8 (script variables are always 8-byte aligned!).

playerBits (also known as playersToBroadcastTo) is a bitset that indicates which players this event should be sent to. In order to send the event to specific players only, use (1 << playerIndex). Set all bits if it should be broadcast to all players.
]]
function natives.SCRIPT.TRIGGER_SCRIPT_EVENT(--[[int]] eventGroup, --[[Any*]] eventData, --[[int]] eventDataSize, --[[int]] playerBits) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SCRIPT.TRIGGER_SCRIPT_EVENT' due to disabled trusted mode")

	assert(type(eventGroup) == "number", "Arg #1 (eventGroup) must be a number.")
	assert(type(eventData) == "userdata", "Arg #2 (eventData) must be a userdata.")
	assert(type(eventDataSize) == "number", "Arg #3 (eventDataSize) must be a number.")
	assert(type(playerBits) == "number", "Arg #4 (playerBits) must be a number.")

	local result = native_call(0x5AE99C571D5BBE5D, eventGroup, eventData, eventDataSize, playerBits)
end
natives.script.trigger_script_event = natives.SCRIPT.TRIGGER_SCRIPT_EVENT

function natives.SCRIPT.SHUTDOWN_LOADING_SCREEN() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SCRIPT.SHUTDOWN_LOADING_SCREEN' due to disabled trusted mode")

	local result = native_call(0x078EBE9809CCD637)
end
natives.script.shutdown_loading_screen = natives.SCRIPT.SHUTDOWN_LOADING_SCREEN

function natives.SCRIPT.SET_NO_LOADING_SCREEN(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SCRIPT.SET_NO_LOADING_SCREEN' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x5262CC1995D07E09, toggle)
end
natives.script.set_no_loading_screen = natives.SCRIPT.SET_NO_LOADING_SCREEN

function natives.SCRIPT.GET_NO_LOADING_SCREEN() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SCRIPT.GET_NO_LOADING_SCREEN' due to disabled trusted mode")

	local result = native_call(0x18C1270EA7F199BC)
	return result:__tointeger() ~= 0
end
natives.script.get_no_loading_screen = natives.SCRIPT.GET_NO_LOADING_SCREEN

function natives.SCRIPT.COMMIT_TO_LOADINGSCREEN_SELCTION() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SCRIPT.COMMIT_TO_LOADINGSCREEN_SELCTION' due to disabled trusted mode")

	local result = native_call(0xB1577667C3708F9B)
end
natives.script.commit_to_loadingscreen_selction = natives.SCRIPT.COMMIT_TO_LOADINGSCREEN_SELCTION

--[[
Returns true if bit 0 in GtaThread+0x154 is set.
]]
function natives.SCRIPT.BG_IS_EXITFLAG_SET() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SCRIPT.BG_IS_EXITFLAG_SET' due to disabled trusted mode")

	local result = native_call(0x836B62713E0534CA)
	return result:__tointeger() ~= 0
end
natives.script.bg_is_exitflag_set = natives.SCRIPT.BG_IS_EXITFLAG_SET

--[[
Sets bit 1 in GtaThread+0x154
]]
function natives.SCRIPT.BG_SET_EXITFLAG_RESPONSE() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SCRIPT.BG_SET_EXITFLAG_RESPONSE' due to disabled trusted mode")

	local result = native_call(0x760910B49D2B98EA)
end
natives.script.bg_set_exitflag_response = natives.SCRIPT.BG_SET_EXITFLAG_RESPONSE

--[[
Hashed version of 0x9D5A25BADB742ACD.
]]
function natives.SCRIPT.BG_START_CONTEXT_HASH(--[[Hash]] contextHash) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SCRIPT.BG_START_CONTEXT_HASH' due to disabled trusted mode")

	assert(type(contextHash) == "number", "Arg #1 (contextHash) must be a number.")

	local result = native_call(0x75B18E49607874C7, contextHash)
end
natives.script.bg_start_context_hash = natives.SCRIPT.BG_START_CONTEXT_HASH

--[[
Hashed version of 0xDC2BACD920D0A0DD.
]]
function natives.SCRIPT.BG_END_CONTEXT_HASH(--[[Hash]] contextHash) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SCRIPT.BG_END_CONTEXT_HASH' due to disabled trusted mode")

	assert(type(contextHash) == "number", "Arg #1 (contextHash) must be a number.")

	local result = native_call(0x107E5CC7CA942BC1, contextHash)
end
natives.script.bg_end_context_hash = natives.SCRIPT.BG_END_CONTEXT_HASH

--[[
Inserts the given context into the background scripts context map.
]]
function natives.SCRIPT.BG_START_CONTEXT(--[[const char*]] contextName) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SCRIPT.BG_START_CONTEXT' due to disabled trusted mode")

	assert(type(contextName) == "string", "Arg #1 (contextName) must be a string.")

	local result = native_call(0x9D5A25BADB742ACD, contextName)
end
natives.script.bg_start_context = natives.SCRIPT.BG_START_CONTEXT

--[[
Deletes the given context from the background scripts context map.
]]
function natives.SCRIPT.BG_END_CONTEXT(--[[const char*]] contextName) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SCRIPT.BG_END_CONTEXT' due to disabled trusted mode")

	assert(type(contextName) == "string", "Arg #1 (contextName) must be a string.")

	local result = native_call(0xDC2BACD920D0A0DD, contextName)
end
natives.script.bg_end_context = natives.SCRIPT.BG_END_CONTEXT

function natives.SCRIPT.BG_DOES_LAUNCH_PARAM_EXIST(--[[int]] scriptIndex, --[[const char*]] p1) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SCRIPT.BG_DOES_LAUNCH_PARAM_EXIST' due to disabled trusted mode")

	assert(type(scriptIndex) == "number", "Arg #1 (scriptIndex) must be a number.")
	assert(type(p1) == "string", "Arg #2 (p1) must be a string.")

	local result = native_call(0x0F6F1EBBC4E1D5E6, scriptIndex, p1)
	return result:__tointeger() ~= 0
end
natives.script.bg_does_launch_param_exist = natives.SCRIPT.BG_DOES_LAUNCH_PARAM_EXIST

function natives.SCRIPT.BG_GET_LAUNCH_PARAM_VALUE(--[[int]] scriptIndex, --[[const char*]] p1) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SCRIPT.BG_GET_LAUNCH_PARAM_VALUE' due to disabled trusted mode")

	assert(type(scriptIndex) == "number", "Arg #1 (scriptIndex) must be a number.")
	assert(type(p1) == "string", "Arg #2 (p1) must be a string.")

	local result = native_call(0x22E21FBCFC88C149, scriptIndex, p1)
	return result:__tointeger()
end
natives.script.bg_get_launch_param_value = natives.SCRIPT.BG_GET_LAUNCH_PARAM_VALUE

function natives.SCRIPT.BG_GET_SCRIPT_ID_FROM_NAME_HASH(--[[Hash]] p0) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SCRIPT.BG_GET_SCRIPT_ID_FROM_NAME_HASH' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x829CD22E043A2577, p0)
	return result:__tointeger()
end
natives.script.bg_get_script_id_from_name_hash = natives.SCRIPT.BG_GET_SCRIPT_ID_FROM_NAME_HASH

--[[
See TRIGGER_SCRIPT_EVENT
]]
function natives.SCRIPT.SEND_TU_SCRIPT_EVENT(--[[int]] eventGroup, --[[Any*]] eventData, --[[int]] eventDataSize, --[[int]] playerBits) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SCRIPT.SEND_TU_SCRIPT_EVENT' due to disabled trusted mode")

	assert(type(eventGroup) == "number", "Arg #1 (eventGroup) must be a number.")
	assert(type(eventData) == "userdata", "Arg #2 (eventData) must be a userdata.")
	assert(type(eventDataSize) == "number", "Arg #3 (eventDataSize) must be a number.")
	assert(type(playerBits) == "number", "Arg #4 (playerBits) must be a number.")

	local result = native_call(0xA40CC53DF8E50837, eventGroup, eventData, eventDataSize, playerBits)
end
natives.script.send_tu_script_event = natives.SCRIPT.SEND_TU_SCRIPT_EVENT


natives.SECURITY = {}
natives.security = {}

--[[
Registers a protected variable that will be checked for modifications by the anticheat
]]
function natives.SECURITY.REGISTER_SCRIPT_VARIABLE(--[[Any*]] variable) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SECURITY.REGISTER_SCRIPT_VARIABLE' due to disabled trusted mode")

	assert(type(variable) == "userdata", "Arg #1 (variable) must be a userdata.")

	local result = native_call(0x40EB1EFD921822BC, variable)
end
natives.security.register_script_variable = natives.SECURITY.REGISTER_SCRIPT_VARIABLE

function natives.SECURITY.UNREGISTER_SCRIPT_VARIABLE(--[[Any*]] variable) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SECURITY.UNREGISTER_SCRIPT_VARIABLE' due to disabled trusted mode")

	assert(type(variable) == "userdata", "Arg #1 (variable) must be a userdata.")

	local result = native_call(0x340A36A700E99699, variable)
end
natives.security.unregister_script_variable = natives.SECURITY.UNREGISTER_SCRIPT_VARIABLE

function natives.SECURITY.FORCE_CHECK_SCRIPT_VARIABLES() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SECURITY.FORCE_CHECK_SCRIPT_VARIABLES' due to disabled trusted mode")

	local result = native_call(0x8E580AB902917360)
end
natives.security.force_check_script_variables = natives.SECURITY.FORCE_CHECK_SCRIPT_VARIABLES


natives.SHAPETEST = {}
natives.shapetest = {}

--[[
Asynchronously starts a line-of-sight (raycast) world probe shape test.

Use the handle with 0x3D87450E15D98694 or 0x65287525D951F6BE until it returns 0 or 2.

p8 is a bit mask with bits 1, 2 and/or 4, relating to collider types; 4 should usually be used.
]]
function natives.SHAPETEST.START_SHAPE_TEST_LOS_PROBE(--[[float]] x1, --[[float]] y1, --[[float]] z1, --[[float]] x2, --[[float]] y2, --[[float]] z2, --[[int]] flags, --[[Entity]] entity, --[[int]] p8) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SHAPETEST.START_SHAPE_TEST_LOS_PROBE' due to disabled trusted mode")

	assert(type(x1) == "number", "Arg #1 (x1) must be a number.")
	assert(type(y1) == "number", "Arg #2 (y1) must be a number.")
	assert(type(z1) == "number", "Arg #3 (z1) must be a number.")
	assert(type(x2) == "number", "Arg #4 (x2) must be a number.")
	assert(type(y2) == "number", "Arg #5 (y2) must be a number.")
	assert(type(z2) == "number", "Arg #6 (z2) must be a number.")
	assert(type(flags) == "number", "Arg #7 (flags) must be a number.")
	assert(type(entity) == "number", "Arg #8 (entity) must be a number.")
	assert(type(p8) == "number", "Arg #9 (p8) must be a number.")

	local result = native_call(0x7EE9F5D83DD4F90E, x1, y1, z1, x2, y2, z2, flags, entity, p8)
	return result:__tointeger()
end
natives.shapetest.start_shape_test_los_probe = natives.SHAPETEST.START_SHAPE_TEST_LOS_PROBE

--[[
Does the same as 0x7EE9F5D83DD4F90E, except blocking until the shape test completes.
]]
function natives.SHAPETEST.START_EXPENSIVE_SYNCHRONOUS_SHAPE_TEST_LOS_PROBE(--[[float]] x1, --[[float]] y1, --[[float]] z1, --[[float]] x2, --[[float]] y2, --[[float]] z2, --[[int]] flags, --[[Entity]] entity, --[[int]] p8) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SHAPETEST.START_EXPENSIVE_SYNCHRONOUS_SHAPE_TEST_LOS_PROBE' due to disabled trusted mode")

	assert(type(x1) == "number", "Arg #1 (x1) must be a number.")
	assert(type(y1) == "number", "Arg #2 (y1) must be a number.")
	assert(type(z1) == "number", "Arg #3 (z1) must be a number.")
	assert(type(x2) == "number", "Arg #4 (x2) must be a number.")
	assert(type(y2) == "number", "Arg #5 (y2) must be a number.")
	assert(type(z2) == "number", "Arg #6 (z2) must be a number.")
	assert(type(flags) == "number", "Arg #7 (flags) must be a number.")
	assert(type(entity) == "number", "Arg #8 (entity) must be a number.")
	assert(type(p8) == "number", "Arg #9 (p8) must be a number.")

	local result = native_call(0x377906D8A31E5586, x1, y1, z1, x2, y2, z2, flags, entity, p8)
	return result:__tointeger()
end
natives.shapetest.start_expensive_synchronous_shape_test_los_probe = natives.SHAPETEST.START_EXPENSIVE_SYNCHRONOUS_SHAPE_TEST_LOS_PROBE

function natives.SHAPETEST.START_SHAPE_TEST_BOUNDING_BOX(--[[Entity]] entity, --[[int]] flags1, --[[int]] flags2) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SHAPETEST.START_SHAPE_TEST_BOUNDING_BOX' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(flags1) == "number", "Arg #2 (flags1) must be a number.")
	assert(type(flags2) == "number", "Arg #3 (flags2) must be a number.")

	local result = native_call(0x052837721A854EC7, entity, flags1, flags2)
	return result:__tointeger()
end
natives.shapetest.start_shape_test_bounding_box = natives.SHAPETEST.START_SHAPE_TEST_BOUNDING_BOX

function natives.SHAPETEST.START_SHAPE_TEST_BOX(--[[float]] x, --[[float]] y, --[[float]] z, --[[float]] x1, --[[float]] y2, --[[float]] z2, --[[float]] rotX, --[[float]] rotY, --[[float]] rotZ, --[[Any]] p9, --[[int]] flags, --[[Entity]] entity, --[[Any]] p12) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SHAPETEST.START_SHAPE_TEST_BOX' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(x1) == "number", "Arg #4 (x1) must be a number.")
	assert(type(y2) == "number", "Arg #5 (y2) must be a number.")
	assert(type(z2) == "number", "Arg #6 (z2) must be a number.")
	assert(type(rotX) == "number", "Arg #7 (rotX) must be a number.")
	assert(type(rotY) == "number", "Arg #8 (rotY) must be a number.")
	assert(type(rotZ) == "number", "Arg #9 (rotZ) must be a number.")
	assert(type(p9) == "number", "Arg #10 (p9) must be a number.")
	assert(type(flags) == "number", "Arg #11 (flags) must be a number.")
	assert(type(entity) == "number", "Arg #12 (entity) must be a number.")
	assert(type(p12) == "number", "Arg #13 (p12) must be a number.")

	local result = native_call(0xFE466162C4401D18, x, y, z, x1, y2, z2, rotX, rotY, rotZ, p9, flags, entity, p12)
	return result:__tointeger()
end
natives.shapetest.start_shape_test_box = natives.SHAPETEST.START_SHAPE_TEST_BOX

function natives.SHAPETEST.START_SHAPE_TEST_BOUND(--[[Entity]] entity, --[[int]] flags1, --[[int]] flags2) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SHAPETEST.START_SHAPE_TEST_BOUND' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(flags1) == "number", "Arg #2 (flags1) must be a number.")
	assert(type(flags2) == "number", "Arg #3 (flags2) must be a number.")

	local result = native_call(0x37181417CE7C8900, entity, flags1, flags2)
	return result:__tointeger()
end
natives.shapetest.start_shape_test_bound = natives.SHAPETEST.START_SHAPE_TEST_BOUND

--[[
Raycast from point to point, where the ray has a radius. 

flags:
vehicles=10
peds =12

Iterating through flags yields many ped / vehicle/ object combinations

p9 = 7, but no idea what it does

Entity is an entity to ignore
]]
function natives.SHAPETEST.START_SHAPE_TEST_CAPSULE(--[[float]] x1, --[[float]] y1, --[[float]] z1, --[[float]] x2, --[[float]] y2, --[[float]] z2, --[[float]] radius, --[[int]] flags, --[[Entity]] entity, --[[int]] p9) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SHAPETEST.START_SHAPE_TEST_CAPSULE' due to disabled trusted mode")

	assert(type(x1) == "number", "Arg #1 (x1) must be a number.")
	assert(type(y1) == "number", "Arg #2 (y1) must be a number.")
	assert(type(z1) == "number", "Arg #3 (z1) must be a number.")
	assert(type(x2) == "number", "Arg #4 (x2) must be a number.")
	assert(type(y2) == "number", "Arg #5 (y2) must be a number.")
	assert(type(z2) == "number", "Arg #6 (z2) must be a number.")
	assert(type(radius) == "number", "Arg #7 (radius) must be a number.")
	assert(type(flags) == "number", "Arg #8 (flags) must be a number.")
	assert(type(entity) == "number", "Arg #9 (entity) must be a number.")
	assert(type(p9) == "number", "Arg #10 (p9) must be a number.")

	local result = native_call(0x28579D1B8F8AAC80, x1, y1, z1, x2, y2, z2, radius, flags, entity, p9)
	return result:__tointeger()
end
natives.shapetest.start_shape_test_capsule = natives.SHAPETEST.START_SHAPE_TEST_CAPSULE

function natives.SHAPETEST.START_SHAPE_TEST_SWEPT_SPHERE(--[[float]] x1, --[[float]] y1, --[[float]] z1, --[[float]] x2, --[[float]] y2, --[[float]] z2, --[[float]] radius, --[[int]] flags, --[[Entity]] entity, --[[Any]] p9) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SHAPETEST.START_SHAPE_TEST_SWEPT_SPHERE' due to disabled trusted mode")

	assert(type(x1) == "number", "Arg #1 (x1) must be a number.")
	assert(type(y1) == "number", "Arg #2 (y1) must be a number.")
	assert(type(z1) == "number", "Arg #3 (z1) must be a number.")
	assert(type(x2) == "number", "Arg #4 (x2) must be a number.")
	assert(type(y2) == "number", "Arg #5 (y2) must be a number.")
	assert(type(z2) == "number", "Arg #6 (z2) must be a number.")
	assert(type(radius) == "number", "Arg #7 (radius) must be a number.")
	assert(type(flags) == "number", "Arg #8 (flags) must be a number.")
	assert(type(entity) == "number", "Arg #9 (entity) must be a number.")
	assert(type(p9) == "number", "Arg #10 (p9) must be a number.")

	local result = native_call(0xE6AC6C45FBE83004, x1, y1, z1, x2, y2, z2, radius, flags, entity, p9)
	return result:__tointeger()
end
natives.shapetest.start_shape_test_swept_sphere = natives.SHAPETEST.START_SHAPE_TEST_SWEPT_SPHERE

--[[
Returns a ShapeTest handle that can be used with GET_SHAPE_TEST_RESULT.

In its only usage in game scripts its called with flag set to 511, entity to player_ped_id and flag2 set to 7
]]
function natives.SHAPETEST.START_SHAPE_TEST_MOUSE_CURSOR_LOS_PROBE(--[[Vector3*]] pVec1, --[[Vector3*]] pVec2, --[[int]] flag, --[[Entity]] entity, --[[int]] flag2) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SHAPETEST.START_SHAPE_TEST_MOUSE_CURSOR_LOS_PROBE' due to disabled trusted mode")

	assert(type(pVec1) == "userdata", "Arg #1 (pVec1) must be a userdata.")
	assert(type(pVec2) == "userdata", "Arg #2 (pVec2) must be a userdata.")
	assert(type(flag) == "number", "Arg #3 (flag) must be a number.")
	assert(type(entity) == "number", "Arg #4 (entity) must be a number.")
	assert(type(flag2) == "number", "Arg #5 (flag2) must be a number.")

	local result = native_call(0xFF6BE494C7987F34, pVec1, pVec2, flag, entity, flag2)
	return result:__tointeger()
end
natives.shapetest.start_shape_test_mouse_cursor_los_probe = natives.SHAPETEST.START_SHAPE_TEST_MOUSE_CURSOR_LOS_PROBE

--[[
Returns the result of a shape test: 0 if the handle is invalid, 1 if the shape test is still pending, or 2 if the shape test has completed, and the handle should be invalidated.

When used with an asynchronous shape test, this native should be looped until returning 0 or 2, after which the handle is invalidated.
]]
function natives.SHAPETEST.GET_SHAPE_TEST_RESULT(--[[int]] shapeTestHandle, --[[BOOL*]] hit, --[[Vector3*]] endCoords, --[[Vector3*]] surfaceNormal, --[[Entity*]] entityHit) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SHAPETEST.GET_SHAPE_TEST_RESULT' due to disabled trusted mode")

	assert(type(shapeTestHandle) == "number", "Arg #1 (shapeTestHandle) must be a number.")
	assert(type(hit) == "userdata", "Arg #2 (hit) must be a userdata.")
	assert(type(endCoords) == "userdata", "Arg #3 (endCoords) must be a userdata.")
	assert(type(surfaceNormal) == "userdata", "Arg #4 (surfaceNormal) must be a userdata.")
	assert(type(entityHit) == "userdata", "Arg #5 (entityHit) must be a userdata.")

	local result = native_call(0x3D87450E15D98694, shapeTestHandle, hit, endCoords, surfaceNormal, entityHit)
	return result:__tointeger()
end
natives.shapetest.get_shape_test_result = natives.SHAPETEST.GET_SHAPE_TEST_RESULT

--[[
Returns the result of a shape test, also returning the material of any touched surface.

When used with an asynchronous shape test, this native should be looped until returning 0 or 2, after which the handle is invalidated.

Unless the return value is 2, the other return values are undefined.
]]
function natives.SHAPETEST.GET_SHAPE_TEST_RESULT_INCLUDING_MATERIAL(--[[int]] shapeTestHandle, --[[BOOL*]] hit, --[[Vector3*]] endCoords, --[[Vector3*]] surfaceNormal, --[[Hash*]] materialHash, --[[Entity*]] entityHit) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SHAPETEST.GET_SHAPE_TEST_RESULT_INCLUDING_MATERIAL' due to disabled trusted mode")

	assert(type(shapeTestHandle) == "number", "Arg #1 (shapeTestHandle) must be a number.")
	assert(type(hit) == "userdata", "Arg #2 (hit) must be a userdata.")
	assert(type(endCoords) == "userdata", "Arg #3 (endCoords) must be a userdata.")
	assert(type(surfaceNormal) == "userdata", "Arg #4 (surfaceNormal) must be a userdata.")
	assert(type(materialHash) == "userdata", "Arg #5 (materialHash) must be a userdata.")
	assert(type(entityHit) == "userdata", "Arg #6 (entityHit) must be a userdata.")

	local result = native_call(0x65287525D951F6BE, shapeTestHandle, hit, endCoords, surfaceNormal, materialHash, entityHit)
	return result:__tointeger()
end
natives.shapetest.get_shape_test_result_including_material = natives.SHAPETEST.GET_SHAPE_TEST_RESULT_INCLUDING_MATERIAL

--[[
Invalidates the entity handle passed by removing the fwScriptGuid from the entity. This should be used when receiving an ambient entity from shape testing natives, but can also be used for other natives returning an 'irrelevant' entity handle.
]]
function natives.SHAPETEST.RELEASE_SCRIPT_GUID_FROM_ENTITY(--[[Entity]] entityHit) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SHAPETEST.RELEASE_SCRIPT_GUID_FROM_ENTITY' due to disabled trusted mode")

	assert(type(entityHit) == "number", "Arg #1 (entityHit) must be a number.")

	local result = native_call(0x2B3334BCA57CD799, entityHit)
end
natives.shapetest.release_script_guid_from_entity = natives.SHAPETEST.RELEASE_SCRIPT_GUID_FROM_ENTITY


natives.SOCIALCLUB = {}
natives.socialclub = {}

function natives.SOCIALCLUB.SC_INBOX_GET_TOTAL_NUM_MESSAGES() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SOCIALCLUB.SC_INBOX_GET_TOTAL_NUM_MESSAGES' due to disabled trusted mode")

	local result = native_call(0x03A93FF1A2CA0864)
	return result:__tointeger()
end
natives.socialclub.sc_inbox_get_total_num_messages = natives.SOCIALCLUB.SC_INBOX_GET_TOTAL_NUM_MESSAGES

function natives.SOCIALCLUB.SC_INBOX_GET_MESSAGE_TYPE_AT_INDEX(--[[int]] msgIndex) -- Returns Hash
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SOCIALCLUB.SC_INBOX_GET_MESSAGE_TYPE_AT_INDEX' due to disabled trusted mode")

	assert(type(msgIndex) == "number", "Arg #1 (msgIndex) must be a number.")

	local result = native_call(0xBB8EA16ECBC976C4, msgIndex)
	return result:__tointeger()
end
natives.socialclub.sc_inbox_get_message_type_at_index = natives.SOCIALCLUB.SC_INBOX_GET_MESSAGE_TYPE_AT_INDEX

function natives.SOCIALCLUB.SC_INBOX_GET_MESSAGE_IS_READ_AT_INDEX(--[[int]] msgIndex) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SOCIALCLUB.SC_INBOX_GET_MESSAGE_IS_READ_AT_INDEX' due to disabled trusted mode")

	assert(type(msgIndex) == "number", "Arg #1 (msgIndex) must be a number.")

	local result = native_call(0x93028F1DB42BFD08, msgIndex)
	return result:__tointeger() ~= 0
end
natives.socialclub.sc_inbox_get_message_is_read_at_index = natives.SOCIALCLUB.SC_INBOX_GET_MESSAGE_IS_READ_AT_INDEX

function natives.SOCIALCLUB.SC_INBOX_SET_MESSAGE_AS_READ_AT_INDEX(--[[int]] msgIndex) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SOCIALCLUB.SC_INBOX_SET_MESSAGE_AS_READ_AT_INDEX' due to disabled trusted mode")

	assert(type(msgIndex) == "number", "Arg #1 (msgIndex) must be a number.")

	local result = native_call(0x2C015348CF19CA1D, msgIndex)
	return result:__tointeger() ~= 0
end
natives.socialclub.sc_inbox_set_message_as_read_at_index = natives.SOCIALCLUB.SC_INBOX_SET_MESSAGE_AS_READ_AT_INDEX

function natives.SOCIALCLUB.SC_INBOX_MESSAGE_GET_DATA_INT(--[[int]] p0, --[[const char*]] context, --[[int*]] out) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SOCIALCLUB.SC_INBOX_MESSAGE_GET_DATA_INT' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(context) == "string", "Arg #2 (context) must be a string.")
	assert(type(out) == "userdata", "Arg #3 (out) must be a userdata.")

	local result = native_call(0xA00EFE4082C4056E, p0, context, out)
	return result:__tointeger() ~= 0
end
natives.socialclub.sc_inbox_message_get_data_int = natives.SOCIALCLUB.SC_INBOX_MESSAGE_GET_DATA_INT

function natives.SOCIALCLUB.SC_INBOX_MESSAGE_GET_DATA_BOOL(--[[int]] p0, --[[const char*]] p1) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SOCIALCLUB.SC_INBOX_MESSAGE_GET_DATA_BOOL' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "string", "Arg #2 (p1) must be a string.")

	local result = native_call(0xFFE5C16F402D851D, p0, p1)
	return result:__tointeger() ~= 0
end
natives.socialclub.sc_inbox_message_get_data_bool = natives.SOCIALCLUB.SC_INBOX_MESSAGE_GET_DATA_BOOL

function natives.SOCIALCLUB.SC_INBOX_MESSAGE_GET_DATA_STRING(--[[int]] p0, --[[const char*]] context, --[[char*]] out) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SOCIALCLUB.SC_INBOX_MESSAGE_GET_DATA_STRING' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(context) == "string", "Arg #2 (context) must be a string.")
	assert(type(out) == "userdata", "Arg #3 (out) must be a userdata.")

	local result = native_call(0x7572EF42FC6A9B6D, p0, context, out)
	return result:__tointeger() ~= 0
end
natives.socialclub.sc_inbox_message_get_data_string = natives.SOCIALCLUB.SC_INBOX_MESSAGE_GET_DATA_STRING

function natives.SOCIALCLUB.SC_INBOX_MESSAGE_DO_APPLY(--[[int]] p0) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SOCIALCLUB.SC_INBOX_MESSAGE_DO_APPLY' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x9A2C8064B6C1E41A, p0)
	return result:__tointeger() ~= 0
end
natives.socialclub.sc_inbox_message_do_apply = natives.SOCIALCLUB.SC_INBOX_MESSAGE_DO_APPLY

function natives.SOCIALCLUB.SC_INBOX_MESSAGE_GET_RAW_TYPE_AT_INDEX(--[[int]] p0) -- Returns const char*
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SOCIALCLUB.SC_INBOX_MESSAGE_GET_RAW_TYPE_AT_INDEX' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xF3E31D16CBDCB304, p0)
	return result:__tostring(true)
end
natives.socialclub.sc_inbox_message_get_raw_type_at_index = natives.SOCIALCLUB.SC_INBOX_MESSAGE_GET_RAW_TYPE_AT_INDEX

function natives.SOCIALCLUB.SC_INBOX_MESSAGE_PUSH_GAMER_T0_RECIP_LIST(--[[Any*]] gamerHandle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SOCIALCLUB.SC_INBOX_MESSAGE_PUSH_GAMER_T0_RECIP_LIST' due to disabled trusted mode")

	assert(type(gamerHandle) == "userdata", "Arg #1 (gamerHandle) must be a userdata.")

	local result = native_call(0xDA024BDBD600F44A, gamerHandle)
end
natives.socialclub.sc_inbox_message_push_gamer_t0_recip_list = natives.SOCIALCLUB.SC_INBOX_MESSAGE_PUSH_GAMER_T0_RECIP_LIST

function natives.SOCIALCLUB.SC_INBOX_SEND_UGCSTATUPDATE_TO_RECIP_LIST(--[[Any*]] data) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SOCIALCLUB.SC_INBOX_SEND_UGCSTATUPDATE_TO_RECIP_LIST' due to disabled trusted mode")

	assert(type(data) == "userdata", "Arg #1 (data) must be a userdata.")

	local result = native_call(0xA68D3D229F4F3B06, data)
end
natives.socialclub.sc_inbox_send_ugcstatupdate_to_recip_list = natives.SOCIALCLUB.SC_INBOX_SEND_UGCSTATUPDATE_TO_RECIP_LIST

function natives.SOCIALCLUB.SC_INBOX_MESSAGE_GET_UGCDATA(--[[int]] p0, --[[Any*]] p1) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SOCIALCLUB.SC_INBOX_MESSAGE_GET_UGCDATA' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "userdata", "Arg #2 (p1) must be a userdata.")

	local result = native_call(0x69D82604A1A5A254, p0, p1)
	return result:__tointeger() ~= 0
end
natives.socialclub.sc_inbox_message_get_ugcdata = natives.SOCIALCLUB.SC_INBOX_MESSAGE_GET_UGCDATA

function natives.SOCIALCLUB.SC_INBOX_SEND_BOUNTY_TO_RECIP_LIST(--[[Any*]] data) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SOCIALCLUB.SC_INBOX_SEND_BOUNTY_TO_RECIP_LIST' due to disabled trusted mode")

	assert(type(data) == "userdata", "Arg #1 (data) must be a userdata.")

	local result = native_call(0x6AFD2CD753FEEF83, data)
	return result:__tointeger() ~= 0
end
natives.socialclub.sc_inbox_send_bounty_to_recip_list = natives.SOCIALCLUB.SC_INBOX_SEND_BOUNTY_TO_RECIP_LIST

function natives.SOCIALCLUB.SC_INBOX_GET_BOUNTY_DATA_AT_INDEX(--[[int]] index, --[[Any*]] outData) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SOCIALCLUB.SC_INBOX_GET_BOUNTY_DATA_AT_INDEX' due to disabled trusted mode")

	assert(type(index) == "number", "Arg #1 (index) must be a number.")
	assert(type(outData) == "userdata", "Arg #2 (outData) must be a userdata.")

	local result = native_call(0x87E0052F08BD64E6, index, outData)
	return result:__tointeger() ~= 0
end
natives.socialclub.sc_inbox_get_bounty_data_at_index = natives.SOCIALCLUB.SC_INBOX_GET_BOUNTY_DATA_AT_INDEX

function natives.SOCIALCLUB.SC_EMAIL_RETRIEVE_EMAILS(--[[int]] offset, --[[int]] limit) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SOCIALCLUB.SC_EMAIL_RETRIEVE_EMAILS' due to disabled trusted mode")

	assert(type(offset) == "number", "Arg #1 (offset) must be a number.")
	assert(type(limit) == "number", "Arg #2 (limit) must be a number.")

	local result = native_call(0x040ADDCBAFA1018A, offset, limit)
end
natives.socialclub.sc_email_retrieve_emails = natives.SOCIALCLUB.SC_EMAIL_RETRIEVE_EMAILS

function natives.SOCIALCLUB.SC_EMAIL_GET_RETRIEVAL_STATUS() -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SOCIALCLUB.SC_EMAIL_GET_RETRIEVAL_STATUS' due to disabled trusted mode")

	local result = native_call(0x16DA8172459434AA)
	return result:__tointeger()
end
natives.socialclub.sc_email_get_retrieval_status = natives.SOCIALCLUB.SC_EMAIL_GET_RETRIEVAL_STATUS

function natives.SOCIALCLUB.SC_EMAIL_GET_NUM_RETRIEVED_EMAILS() -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SOCIALCLUB.SC_EMAIL_GET_NUM_RETRIEVED_EMAILS' due to disabled trusted mode")

	local result = native_call(0x7DB18CA8CAD5B098)
	return result:__tointeger()
end
natives.socialclub.sc_email_get_num_retrieved_emails = natives.SOCIALCLUB.SC_EMAIL_GET_NUM_RETRIEVED_EMAILS

function natives.SOCIALCLUB.SC_EMAIL_GET_EMAIL_AT_INDEX(--[[int]] p0, --[[Any*]] p1) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SOCIALCLUB.SC_EMAIL_GET_EMAIL_AT_INDEX' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "userdata", "Arg #2 (p1) must be a userdata.")

	local result = native_call(0x4737980E8A283806, p0, p1)
	return result:__tointeger() ~= 0
end
natives.socialclub.sc_email_get_email_at_index = natives.SOCIALCLUB.SC_EMAIL_GET_EMAIL_AT_INDEX

function natives.SOCIALCLUB.SC_EMAIL_DELETE_EMAILS(--[[Any*]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SOCIALCLUB.SC_EMAIL_DELETE_EMAILS' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x44ACA259D67651DB, p0, p1)
end
natives.socialclub.sc_email_delete_emails = natives.SOCIALCLUB.SC_EMAIL_DELETE_EMAILS

function natives.SOCIALCLUB.SC_EMAIL_MESSAGE_PUSH_GAMER_TO_RECIP_LIST(--[[Any*]] gamerHandle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SOCIALCLUB.SC_EMAIL_MESSAGE_PUSH_GAMER_TO_RECIP_LIST' due to disabled trusted mode")

	assert(type(gamerHandle) == "userdata", "Arg #1 (gamerHandle) must be a userdata.")

	local result = native_call(0x2330C12A7A605D16, gamerHandle)
end
natives.socialclub.sc_email_message_push_gamer_to_recip_list = natives.SOCIALCLUB.SC_EMAIL_MESSAGE_PUSH_GAMER_TO_RECIP_LIST

function natives.SOCIALCLUB.SC_EMAIL_MESSAGE_CLEAR_RECIP_LIST() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SOCIALCLUB.SC_EMAIL_MESSAGE_CLEAR_RECIP_LIST' due to disabled trusted mode")

	local result = native_call(0x55DF6DB45179236E)
end
natives.socialclub.sc_email_message_clear_recip_list = natives.SOCIALCLUB.SC_EMAIL_MESSAGE_CLEAR_RECIP_LIST

function natives.SOCIALCLUB.SC_EMAIL_SEND_EMAIL(--[[const char*]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SOCIALCLUB.SC_EMAIL_SEND_EMAIL' due to disabled trusted mode")

	assert(type(p0) == "string", "Arg #1 (p0) must be a string.")

	local result = native_call(0x116FB94DC4B79F17, p0)
end
natives.socialclub.sc_email_send_email = natives.SOCIALCLUB.SC_EMAIL_SEND_EMAIL

function natives.SOCIALCLUB.SC_EMAIL_SET_CURRENT_EMAIL_TAG(--[[Any]] p0) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SOCIALCLUB.SC_EMAIL_SET_CURRENT_EMAIL_TAG' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x07DBD622D9533857, p0)
	return result:__tointeger()
end
natives.socialclub.sc_email_set_current_email_tag = natives.SOCIALCLUB.SC_EMAIL_SET_CURRENT_EMAIL_TAG

function natives.SOCIALCLUB.SC_CACHE_NEW_ROCKSTAR_MSGS(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SOCIALCLUB.SC_CACHE_NEW_ROCKSTAR_MSGS' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0xBFA0A56A817C6C7D, toggle)
end
natives.socialclub.sc_cache_new_rockstar_msgs = natives.SOCIALCLUB.SC_CACHE_NEW_ROCKSTAR_MSGS

function natives.SOCIALCLUB.SC_HAS_NEW_ROCKSTAR_MSG() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SOCIALCLUB.SC_HAS_NEW_ROCKSTAR_MSG' due to disabled trusted mode")

	local result = native_call(0xBC1CC91205EC8D6E)
	return result:__tointeger() ~= 0
end
natives.socialclub.sc_has_new_rockstar_msg = natives.SOCIALCLUB.SC_HAS_NEW_ROCKSTAR_MSG

function natives.SOCIALCLUB.SC_GET_NEW_ROCKSTAR_MSG() -- Returns const char*
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SOCIALCLUB.SC_GET_NEW_ROCKSTAR_MSG' due to disabled trusted mode")

	local result = native_call(0xDF649C4E9AFDD788)
	return result:__tostring(true)
end
natives.socialclub.sc_get_new_rockstar_msg = natives.SOCIALCLUB.SC_GET_NEW_ROCKSTAR_MSG

function natives.SOCIALCLUB.SC_PRESENCE_ATTR_SET_INT(--[[Hash]] attrHash, --[[int]] value) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SOCIALCLUB.SC_PRESENCE_ATTR_SET_INT' due to disabled trusted mode")

	assert(type(attrHash) == "number", "Arg #1 (attrHash) must be a number.")
	assert(type(value) == "number", "Arg #2 (value) must be a number.")

	local result = native_call(0x1F1E9682483697C7, attrHash, value)
	return result:__tointeger() ~= 0
end
natives.socialclub.sc_presence_attr_set_int = natives.SOCIALCLUB.SC_PRESENCE_ATTR_SET_INT

function natives.SOCIALCLUB.SC_PRESENCE_ATTR_SET_FLOAT(--[[Hash]] attrHash, --[[float]] value) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SOCIALCLUB.SC_PRESENCE_ATTR_SET_FLOAT' due to disabled trusted mode")

	assert(type(attrHash) == "number", "Arg #1 (attrHash) must be a number.")
	assert(type(value) == "number", "Arg #2 (value) must be a number.")

	local result = native_call(0xC4C4575F62534A24, attrHash, value)
	return result:__tointeger() ~= 0
end
natives.socialclub.sc_presence_attr_set_float = natives.SOCIALCLUB.SC_PRESENCE_ATTR_SET_FLOAT

function natives.SOCIALCLUB.SC_PRESENCE_ATTR_SET_STRING(--[[Hash]] attrHash, --[[const char*]] value) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SOCIALCLUB.SC_PRESENCE_ATTR_SET_STRING' due to disabled trusted mode")

	assert(type(attrHash) == "number", "Arg #1 (attrHash) must be a number.")
	assert(type(value) == "string", "Arg #2 (value) must be a string.")

	local result = native_call(0x287F1F75D2803595, attrHash, value)
	return result:__tointeger() ~= 0
end
natives.socialclub.sc_presence_attr_set_string = natives.SOCIALCLUB.SC_PRESENCE_ATTR_SET_STRING

function natives.SOCIALCLUB.SC_PRESENCE_SET_ACTIVITY_RATING(--[[Any]] p0, --[[float]] p1) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SOCIALCLUB.SC_PRESENCE_SET_ACTIVITY_RATING' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x487912FD248EFDDF, p0, p1)
	return result:__tointeger() ~= 0
end
natives.socialclub.sc_presence_set_activity_rating = natives.SOCIALCLUB.SC_PRESENCE_SET_ACTIVITY_RATING

function natives.SOCIALCLUB.SC_GAMERDATA_GET_INT() -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SOCIALCLUB.SC_GAMERDATA_GET_INT' due to disabled trusted mode")

	local result = native_call(0xC85A7127E7AD02AA)
	return result:__tointeger()
end
natives.socialclub.sc_gamerdata_get_int = natives.SOCIALCLUB.SC_GAMERDATA_GET_INT

function natives.SOCIALCLUB.SC_GAMERDATA_GET_FLOAT() -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SOCIALCLUB.SC_GAMERDATA_GET_FLOAT' due to disabled trusted mode")

	local result = native_call(0xA770C8EEC6FB2AC5)
	return result:__tointeger()
end
natives.socialclub.sc_gamerdata_get_float = natives.SOCIALCLUB.SC_GAMERDATA_GET_FLOAT

function natives.SOCIALCLUB.SC_GAMERDATA_GET_BOOL(--[[const char*]] name) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SOCIALCLUB.SC_GAMERDATA_GET_BOOL' due to disabled trusted mode")

	assert(type(name) == "string", "Arg #1 (name) must be a string.")

	local result = native_call(0x8416FE4E4629D7D7, name)
	return result:__tointeger() ~= 0
end
natives.socialclub.sc_gamerdata_get_bool = natives.SOCIALCLUB.SC_GAMERDATA_GET_BOOL

function natives.SOCIALCLUB.SC_GAMERDATA_GET_STRING() -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SOCIALCLUB.SC_GAMERDATA_GET_STRING' due to disabled trusted mode")

	local result = native_call(0x7FFCBFEE44ECFABF)
	return result:__tointeger()
end
natives.socialclub.sc_gamerdata_get_string = natives.SOCIALCLUB.SC_GAMERDATA_GET_STRING

function natives.SOCIALCLUB.SC_GAMERDATA_GET_ACTIVE_XP_BONUS() -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SOCIALCLUB.SC_GAMERDATA_GET_ACTIVE_XP_BONUS' due to disabled trusted mode")

	local result = native_call(0x2D874D4AE612A65F)
	return result:__tointeger()
end
natives.socialclub.sc_gamerdata_get_active_xp_bonus = natives.SOCIALCLUB.SC_GAMERDATA_GET_ACTIVE_XP_BONUS

--[[
Starts a task to check an entered string for profanity on the ROS/Social Club services.

See also: 1753344C770358AE, 82E4A58BABC15AE7.
]]
function natives.SOCIALCLUB.SC_PROFANITY_CHECK_STRING(--[[const char*]] string, --[[int*]] token) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SOCIALCLUB.SC_PROFANITY_CHECK_STRING' due to disabled trusted mode")

	assert(type(string) == "string", "Arg #1 (string) must be a string.")
	assert(type(token) == "userdata", "Arg #2 (token) must be a userdata.")

	local result = native_call(0x75632C5ECD7ED843, string, token)
	return result:__tointeger() ~= 0
end
natives.socialclub.sc_profanity_check_string = natives.SOCIALCLUB.SC_PROFANITY_CHECK_STRING

function natives.SOCIALCLUB.SC_PROFANITY_CHECK_STRING_UGC(--[[const char*]] string, --[[int*]] token) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SOCIALCLUB.SC_PROFANITY_CHECK_STRING_UGC' due to disabled trusted mode")

	assert(type(string) == "string", "Arg #1 (string) must be a string.")
	assert(type(token) == "userdata", "Arg #2 (token) must be a userdata.")

	local result = native_call(0xEB2BF817463DFA28, string, token)
	return result:__tointeger() ~= 0
end
natives.socialclub.sc_profanity_check_string_ugc = natives.SOCIALCLUB.SC_PROFANITY_CHECK_STRING_UGC

function natives.SOCIALCLUB.SC_PROFANITY_GET_CHECK_IS_VALID(--[[int]] token) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SOCIALCLUB.SC_PROFANITY_GET_CHECK_IS_VALID' due to disabled trusted mode")

	assert(type(token) == "number", "Arg #1 (token) must be a number.")

	local result = native_call(0x1753344C770358AE, token)
	return result:__tointeger() ~= 0
end
natives.socialclub.sc_profanity_get_check_is_valid = natives.SOCIALCLUB.SC_PROFANITY_GET_CHECK_IS_VALID

function natives.SOCIALCLUB.SC_PROFANITY_GET_CHECK_IS_PENDING(--[[int]] token) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SOCIALCLUB.SC_PROFANITY_GET_CHECK_IS_PENDING' due to disabled trusted mode")

	assert(type(token) == "number", "Arg #1 (token) must be a number.")

	local result = native_call(0x82E4A58BABC15AE7, token)
	return result:__tointeger() ~= 0
end
natives.socialclub.sc_profanity_get_check_is_pending = natives.SOCIALCLUB.SC_PROFANITY_GET_CHECK_IS_PENDING

function natives.SOCIALCLUB.SC_PROFANITY_GET_STRING_PASSED(--[[int]] token) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SOCIALCLUB.SC_PROFANITY_GET_STRING_PASSED' due to disabled trusted mode")

	assert(type(token) == "number", "Arg #1 (token) must be a number.")

	local result = native_call(0x85535ACF97FC0969, token)
	return result:__tointeger() ~= 0
end
natives.socialclub.sc_profanity_get_string_passed = natives.SOCIALCLUB.SC_PROFANITY_GET_STRING_PASSED

function natives.SOCIALCLUB.SC_PROFANITY_GET_STRING_STATUS(--[[int]] token) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SOCIALCLUB.SC_PROFANITY_GET_STRING_STATUS' due to disabled trusted mode")

	assert(type(token) == "number", "Arg #1 (token) must be a number.")

	local result = native_call(0x930DE22F07B1CCE3, token)
	return result:__tointeger()
end
natives.socialclub.sc_profanity_get_string_status = natives.SOCIALCLUB.SC_PROFANITY_GET_STRING_STATUS

function natives.SOCIALCLUB.SC_LICENSEPLATE_CHECK_STRING(--[[const char*]] p0, --[[int*]] p1) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SOCIALCLUB.SC_LICENSEPLATE_CHECK_STRING' due to disabled trusted mode")

	assert(type(p0) == "string", "Arg #1 (p0) must be a string.")
	assert(type(p1) == "userdata", "Arg #2 (p1) must be a userdata.")

	local result = native_call(0xF6BAAAF762E1BF40, p0, p1)
	return result:__tointeger() ~= 0
end
natives.socialclub.sc_licenseplate_check_string = natives.SOCIALCLUB.SC_LICENSEPLATE_CHECK_STRING

function natives.SOCIALCLUB.SC_LICENSEPLATE_GET_CHECK_IS_VALID(--[[Any]] p0) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SOCIALCLUB.SC_LICENSEPLATE_GET_CHECK_IS_VALID' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xF22CA0FD74B80E7A, p0)
	return result:__tointeger() ~= 0
end
natives.socialclub.sc_licenseplate_get_check_is_valid = natives.SOCIALCLUB.SC_LICENSEPLATE_GET_CHECK_IS_VALID

function natives.SOCIALCLUB.SC_LICENSEPLATE_GET_CHECK_IS_PENDING(--[[Any]] p0) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SOCIALCLUB.SC_LICENSEPLATE_GET_CHECK_IS_PENDING' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x9237E334F6E43156, p0)
	return result:__tointeger()
end
natives.socialclub.sc_licenseplate_get_check_is_pending = natives.SOCIALCLUB.SC_LICENSEPLATE_GET_CHECK_IS_PENDING

function natives.SOCIALCLUB.SC_LICENSEPLATE_GET_COUNT(--[[int]] token) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SOCIALCLUB.SC_LICENSEPLATE_GET_COUNT' due to disabled trusted mode")

	assert(type(token) == "number", "Arg #1 (token) must be a number.")

	local result = native_call(0x700569DBA175A77C, token)
	return result:__tointeger()
end
natives.socialclub.sc_licenseplate_get_count = natives.SOCIALCLUB.SC_LICENSEPLATE_GET_COUNT

function natives.SOCIALCLUB.SC_LICENSEPLATE_GET_PLATE(--[[int]] token, --[[int]] plateIndex) -- Returns const char*
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SOCIALCLUB.SC_LICENSEPLATE_GET_PLATE' due to disabled trusted mode")

	assert(type(token) == "number", "Arg #1 (token) must be a number.")
	assert(type(plateIndex) == "number", "Arg #2 (plateIndex) must be a number.")

	local result = native_call(0x1D4446A62D35B0D0, token, plateIndex)
	return result:__tostring(true)
end
natives.socialclub.sc_licenseplate_get_plate = natives.SOCIALCLUB.SC_LICENSEPLATE_GET_PLATE

function natives.SOCIALCLUB.SC_LICENSEPLATE_GET_PLATE_DATA(--[[int]] token, --[[int]] plateIndex) -- Returns const char*
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SOCIALCLUB.SC_LICENSEPLATE_GET_PLATE_DATA' due to disabled trusted mode")

	assert(type(token) == "number", "Arg #1 (token) must be a number.")
	assert(type(plateIndex) == "number", "Arg #2 (plateIndex) must be a number.")

	local result = native_call(0x2E89990DDFF670C3, token, plateIndex)
	return result:__tostring(true)
end
natives.socialclub.sc_licenseplate_get_plate_data = natives.SOCIALCLUB.SC_LICENSEPLATE_GET_PLATE_DATA

function natives.SOCIALCLUB.SC_LICENSEPLATE_SET_PLATE_DATA(--[[const char*]] oldPlateText, --[[const char*]] newPlateText, --[[Any*]] plateData) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SOCIALCLUB.SC_LICENSEPLATE_SET_PLATE_DATA' due to disabled trusted mode")

	assert(type(oldPlateText) == "string", "Arg #1 (oldPlateText) must be a string.")
	assert(type(newPlateText) == "string", "Arg #2 (newPlateText) must be a string.")
	assert(type(plateData) == "userdata", "Arg #3 (plateData) must be a userdata.")

	local result = native_call(0xD0EE05FE193646EA, oldPlateText, newPlateText, plateData)
	return result:__tointeger() ~= 0
end
natives.socialclub.sc_licenseplate_set_plate_data = natives.SOCIALCLUB.SC_LICENSEPLATE_SET_PLATE_DATA

function natives.SOCIALCLUB.SC_LICENSEPLATE_ADD(--[[const char*]] plateText, --[[Any*]] plateData, --[[int*]] token) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SOCIALCLUB.SC_LICENSEPLATE_ADD' due to disabled trusted mode")

	assert(type(plateText) == "string", "Arg #1 (plateText) must be a string.")
	assert(type(plateData) == "userdata", "Arg #2 (plateData) must be a userdata.")
	assert(type(token) == "userdata", "Arg #3 (token) must be a userdata.")

	local result = native_call(0x1989C6E6F67E76A8, plateText, plateData, token)
	return result:__tointeger() ~= 0
end
natives.socialclub.sc_licenseplate_add = natives.SOCIALCLUB.SC_LICENSEPLATE_ADD

function natives.SOCIALCLUB.SC_LICENSEPLATE_GET_ADD_IS_PENDING(--[[int]] token) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SOCIALCLUB.SC_LICENSEPLATE_GET_ADD_IS_PENDING' due to disabled trusted mode")

	assert(type(token) == "number", "Arg #1 (token) must be a number.")

	local result = native_call(0x07C61676E5BB52CD, token)
	return result:__tointeger()
end
natives.socialclub.sc_licenseplate_get_add_is_pending = natives.SOCIALCLUB.SC_LICENSEPLATE_GET_ADD_IS_PENDING

function natives.SOCIALCLUB.SC_LICENSEPLATE_GET_ADD_STATUS(--[[int]] token) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SOCIALCLUB.SC_LICENSEPLATE_GET_ADD_STATUS' due to disabled trusted mode")

	assert(type(token) == "number", "Arg #1 (token) must be a number.")

	local result = native_call(0x8147FFF6A718E1AD, token)
	return result:__tointeger()
end
natives.socialclub.sc_licenseplate_get_add_status = natives.SOCIALCLUB.SC_LICENSEPLATE_GET_ADD_STATUS

function natives.SOCIALCLUB.SC_LICENSEPLATE_ISVALID(--[[const char*]] plateText, --[[int*]] token) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SOCIALCLUB.SC_LICENSEPLATE_ISVALID' due to disabled trusted mode")

	assert(type(plateText) == "string", "Arg #1 (plateText) must be a string.")
	assert(type(token) == "userdata", "Arg #2 (token) must be a userdata.")

	local result = native_call(0x0F73393BAC7E6730, plateText, token)
	return result:__tointeger() ~= 0
end
natives.socialclub.sc_licenseplate_isvalid = natives.SOCIALCLUB.SC_LICENSEPLATE_ISVALID

function natives.SOCIALCLUB.SC_LICENSEPLATE_GET_ISVALID_IS_PENDING(--[[int]] token) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SOCIALCLUB.SC_LICENSEPLATE_GET_ISVALID_IS_PENDING' due to disabled trusted mode")

	assert(type(token) == "number", "Arg #1 (token) must be a number.")

	local result = native_call(0xD302E99EDF0449CF, token)
	return result:__tointeger()
end
natives.socialclub.sc_licenseplate_get_isvalid_is_pending = natives.SOCIALCLUB.SC_LICENSEPLATE_GET_ISVALID_IS_PENDING

function natives.SOCIALCLUB.SC_LICENSEPLATE_GET_ISVALID_STATUS(--[[int]] token) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SOCIALCLUB.SC_LICENSEPLATE_GET_ISVALID_STATUS' due to disabled trusted mode")

	assert(type(token) == "number", "Arg #1 (token) must be a number.")

	local result = native_call(0x5C4EBFFA98BDB41C, token)
	return result:__tointeger()
end
natives.socialclub.sc_licenseplate_get_isvalid_status = natives.SOCIALCLUB.SC_LICENSEPLATE_GET_ISVALID_STATUS

function natives.SOCIALCLUB.SC_COMMUNITY_EVENT_IS_ACTIVE() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SOCIALCLUB.SC_COMMUNITY_EVENT_IS_ACTIVE' due to disabled trusted mode")

	local result = native_call(0xFF8F3A92B75ED67A)
	return result:__tointeger() ~= 0
end
natives.socialclub.sc_community_event_is_active = natives.SOCIALCLUB.SC_COMMUNITY_EVENT_IS_ACTIVE

function natives.SOCIALCLUB.SC_COMMUNITY_EVENT_GET_EVENT_ID() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SOCIALCLUB.SC_COMMUNITY_EVENT_GET_EVENT_ID' due to disabled trusted mode")

	local result = native_call(0x4ED9C8D6DA297639)
	return result:__tointeger()
end
natives.socialclub.sc_community_event_get_event_id = natives.SOCIALCLUB.SC_COMMUNITY_EVENT_GET_EVENT_ID

function natives.SOCIALCLUB.SC_COMMUNITY_EVENT_GET_EXTRA_DATA_INT(--[[const char*]] p0, --[[int*]] p1) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SOCIALCLUB.SC_COMMUNITY_EVENT_GET_EXTRA_DATA_INT' due to disabled trusted mode")

	assert(type(p0) == "string", "Arg #1 (p0) must be a string.")
	assert(type(p1) == "userdata", "Arg #2 (p1) must be a userdata.")

	local result = native_call(0x710BCDA8071EDED1, p0, p1)
	return result:__tointeger() ~= 0
end
natives.socialclub.sc_community_event_get_extra_data_int = natives.SOCIALCLUB.SC_COMMUNITY_EVENT_GET_EXTRA_DATA_INT

function natives.SOCIALCLUB.SC_COMMUNITY_EVENT_GET_EXTRA_DATA_FLOAT(--[[const char*]] p0, --[[float*]] p1) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SOCIALCLUB.SC_COMMUNITY_EVENT_GET_EXTRA_DATA_FLOAT' due to disabled trusted mode")

	assert(type(p0) == "string", "Arg #1 (p0) must be a string.")
	assert(type(p1) == "userdata", "Arg #2 (p1) must be a userdata.")

	local result = native_call(0x50A8A36201DBF83E, p0, p1)
	return result:__tointeger() ~= 0
end
natives.socialclub.sc_community_event_get_extra_data_float = natives.SOCIALCLUB.SC_COMMUNITY_EVENT_GET_EXTRA_DATA_FLOAT

function natives.SOCIALCLUB.SC_COMMUNITY_EVENT_GET_EXTRA_DATA_STRING(--[[const char*]] p0, --[[char*]] p1) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SOCIALCLUB.SC_COMMUNITY_EVENT_GET_EXTRA_DATA_STRING' due to disabled trusted mode")

	assert(type(p0) == "string", "Arg #1 (p0) must be a string.")
	assert(type(p1) == "userdata", "Arg #2 (p1) must be a userdata.")

	local result = native_call(0x9DE5D2F723575ED0, p0, p1)
	return result:__tointeger() ~= 0
end
natives.socialclub.sc_community_event_get_extra_data_string = natives.SOCIALCLUB.SC_COMMUNITY_EVENT_GET_EXTRA_DATA_STRING

function natives.SOCIALCLUB.SC_COMMUNITY_EVENT_GET_DISPLAY_NAME(--[[char*]] p0) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SOCIALCLUB.SC_COMMUNITY_EVENT_GET_DISPLAY_NAME' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")

	local result = native_call(0xC2C97EA97711D1AE, p0)
	return result:__tointeger() ~= 0
end
natives.socialclub.sc_community_event_get_display_name = natives.SOCIALCLUB.SC_COMMUNITY_EVENT_GET_DISPLAY_NAME

function natives.SOCIALCLUB.SC_COMMUNITY_EVENT_IS_ACTIVE_FOR_TYPE(--[[const char*]] p0) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SOCIALCLUB.SC_COMMUNITY_EVENT_IS_ACTIVE_FOR_TYPE' due to disabled trusted mode")

	assert(type(p0) == "string", "Arg #1 (p0) must be a string.")

	local result = native_call(0x450819D8CF90C416, p0)
	return result:__tointeger() ~= 0
end
natives.socialclub.sc_community_event_is_active_for_type = natives.SOCIALCLUB.SC_COMMUNITY_EVENT_IS_ACTIVE_FOR_TYPE

function natives.SOCIALCLUB.SC_COMMUNITY_EVENT_GET_EVENT_ID_FOR_TYPE(--[[const char*]] p0) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SOCIALCLUB.SC_COMMUNITY_EVENT_GET_EVENT_ID_FOR_TYPE' due to disabled trusted mode")

	assert(type(p0) == "string", "Arg #1 (p0) must be a string.")

	local result = native_call(0x4A7D6E727F941747, p0)
	return result:__tointeger()
end
natives.socialclub.sc_community_event_get_event_id_for_type = natives.SOCIALCLUB.SC_COMMUNITY_EVENT_GET_EVENT_ID_FOR_TYPE

function natives.SOCIALCLUB.SC_COMMUNITY_EVENT_GET_EXTRA_DATA_INT_FOR_TYPE(--[[const char*]] p0, --[[int*]] p1, --[[const char*]] p2) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SOCIALCLUB.SC_COMMUNITY_EVENT_GET_EXTRA_DATA_INT_FOR_TYPE' due to disabled trusted mode")

	assert(type(p0) == "string", "Arg #1 (p0) must be a string.")
	assert(type(p1) == "userdata", "Arg #2 (p1) must be a userdata.")
	assert(type(p2) == "string", "Arg #3 (p2) must be a string.")

	local result = native_call(0xE75A4A2E5E316D86, p0, p1, p2)
	return result:__tointeger() ~= 0
end
natives.socialclub.sc_community_event_get_extra_data_int_for_type = natives.SOCIALCLUB.SC_COMMUNITY_EVENT_GET_EXTRA_DATA_INT_FOR_TYPE

function natives.SOCIALCLUB.SC_COMMUNITY_EVENT_GET_EXTRA_DATA_FLOAT_FOR_TYPE(--[[const char*]] p0, --[[float*]] p1, --[[const char*]] p2) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SOCIALCLUB.SC_COMMUNITY_EVENT_GET_EXTRA_DATA_FLOAT_FOR_TYPE' due to disabled trusted mode")

	assert(type(p0) == "string", "Arg #1 (p0) must be a string.")
	assert(type(p1) == "userdata", "Arg #2 (p1) must be a userdata.")
	assert(type(p2) == "string", "Arg #3 (p2) must be a string.")

	local result = native_call(0x2570E26BE63964E3, p0, p1, p2)
	return result:__tointeger() ~= 0
end
natives.socialclub.sc_community_event_get_extra_data_float_for_type = natives.SOCIALCLUB.SC_COMMUNITY_EVENT_GET_EXTRA_DATA_FLOAT_FOR_TYPE

function natives.SOCIALCLUB.SC_COMMUNITY_EVENT_GET_EXTRA_DATA_STRING_FOR_TYPE(--[[const char*]] p0, --[[char*]] p1, --[[const char*]] p2) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SOCIALCLUB.SC_COMMUNITY_EVENT_GET_EXTRA_DATA_STRING_FOR_TYPE' due to disabled trusted mode")

	assert(type(p0) == "string", "Arg #1 (p0) must be a string.")
	assert(type(p1) == "userdata", "Arg #2 (p1) must be a userdata.")
	assert(type(p2) == "string", "Arg #3 (p2) must be a string.")

	local result = native_call(0x1D12A56FC95BE92E, p0, p1, p2)
	return result:__tointeger() ~= 0
end
natives.socialclub.sc_community_event_get_extra_data_string_for_type = natives.SOCIALCLUB.SC_COMMUNITY_EVENT_GET_EXTRA_DATA_STRING_FOR_TYPE

function natives.SOCIALCLUB.SC_COMMUNITY_EVENT_GET_DISPLAY_NAME_FOR_TYPE(--[[char*]] p0, --[[const char*]] p1) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SOCIALCLUB.SC_COMMUNITY_EVENT_GET_DISPLAY_NAME_FOR_TYPE' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")
	assert(type(p1) == "string", "Arg #2 (p1) must be a string.")

	local result = native_call(0x33DF47CC0642061B, p0, p1)
	return result:__tointeger() ~= 0
end
natives.socialclub.sc_community_event_get_display_name_for_type = natives.SOCIALCLUB.SC_COMMUNITY_EVENT_GET_DISPLAY_NAME_FOR_TYPE

function natives.SOCIALCLUB.SC_COMMUNITY_EVENT_IS_ACTIVE_BY_ID(--[[int]] p0) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SOCIALCLUB.SC_COMMUNITY_EVENT_IS_ACTIVE_BY_ID' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xA468E0BE12B12C70, p0)
	return result:__tointeger() ~= 0
end
natives.socialclub.sc_community_event_is_active_by_id = natives.SOCIALCLUB.SC_COMMUNITY_EVENT_IS_ACTIVE_BY_ID

function natives.SOCIALCLUB.SC_COMMUNITY_EVENT_GET_EXTRA_DATA_INT_BY_ID(--[[int]] p0, --[[const char*]] p1, --[[int*]] p2) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SOCIALCLUB.SC_COMMUNITY_EVENT_GET_EXTRA_DATA_INT_BY_ID' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "string", "Arg #2 (p1) must be a string.")
	assert(type(p2) == "userdata", "Arg #3 (p2) must be a userdata.")

	local result = native_call(0x8CC469AB4D349B7C, p0, p1, p2)
	return result:__tointeger() ~= 0
end
natives.socialclub.sc_community_event_get_extra_data_int_by_id = natives.SOCIALCLUB.SC_COMMUNITY_EVENT_GET_EXTRA_DATA_INT_BY_ID

function natives.SOCIALCLUB.SC_COMMUNITY_EVENT_GET_EXTRA_DATA_FLOAT_BY_ID(--[[int]] p0, --[[const char*]] p1, --[[float*]] p2) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SOCIALCLUB.SC_COMMUNITY_EVENT_GET_EXTRA_DATA_FLOAT_BY_ID' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "string", "Arg #2 (p1) must be a string.")
	assert(type(p2) == "userdata", "Arg #3 (p2) must be a userdata.")

	local result = native_call(0xC5A35C73B68F3C49, p0, p1, p2)
	return result:__tointeger() ~= 0
end
natives.socialclub.sc_community_event_get_extra_data_float_by_id = natives.SOCIALCLUB.SC_COMMUNITY_EVENT_GET_EXTRA_DATA_FLOAT_BY_ID

function natives.SOCIALCLUB.SC_COMMUNITY_EVENT_GET_EXTRA_DATA_STRING_BY_ID(--[[int]] p0, --[[const char*]] p1, --[[char*]] p2) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SOCIALCLUB.SC_COMMUNITY_EVENT_GET_EXTRA_DATA_STRING_BY_ID' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "string", "Arg #2 (p1) must be a string.")
	assert(type(p2) == "userdata", "Arg #3 (p2) must be a userdata.")

	local result = native_call(0x699E4A5C8C893A18, p0, p1, p2)
	return result:__tointeger() ~= 0
end
natives.socialclub.sc_community_event_get_extra_data_string_by_id = natives.SOCIALCLUB.SC_COMMUNITY_EVENT_GET_EXTRA_DATA_STRING_BY_ID

function natives.SOCIALCLUB.SC_COMMUNITY_EVENT_GET_DISPLAY_NAME_BY_ID(--[[int]] p0, --[[char*]] p1) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SOCIALCLUB.SC_COMMUNITY_EVENT_GET_DISPLAY_NAME_BY_ID' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "userdata", "Arg #2 (p1) must be a userdata.")

	local result = native_call(0x19853B5B17D77BCA, p0, p1)
	return result:__tointeger() ~= 0
end
natives.socialclub.sc_community_event_get_display_name_by_id = natives.SOCIALCLUB.SC_COMMUNITY_EVENT_GET_DISPLAY_NAME_BY_ID

function natives.SOCIALCLUB.SC_TRANSITION_NEWS_SHOW(--[[Any]] p0) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SOCIALCLUB.SC_TRANSITION_NEWS_SHOW' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x6BFB12CE158E3DD4, p0)
	return result:__tointeger() ~= 0
end
natives.socialclub.sc_transition_news_show = natives.SOCIALCLUB.SC_TRANSITION_NEWS_SHOW

function natives.SOCIALCLUB.SC_TRANSITION_NEWS_SHOW_TIMED(--[[Any]] p0, --[[Any]] p1) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SOCIALCLUB.SC_TRANSITION_NEWS_SHOW_TIMED' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xFE4C1D0D3B9CC17E, p0, p1)
	return result:__tointeger() ~= 0
end
natives.socialclub.sc_transition_news_show_timed = natives.SOCIALCLUB.SC_TRANSITION_NEWS_SHOW_TIMED

function natives.SOCIALCLUB.SC_TRANSITION_NEWS_SHOW_NEXT_ITEM() -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SOCIALCLUB.SC_TRANSITION_NEWS_SHOW_NEXT_ITEM' due to disabled trusted mode")

	local result = native_call(0xD8122C407663B995)
	return result:__tointeger()
end
natives.socialclub.sc_transition_news_show_next_item = natives.SOCIALCLUB.SC_TRANSITION_NEWS_SHOW_NEXT_ITEM

function natives.SOCIALCLUB.SC_TRANSITION_NEWS_HAS_EXTRA_DATA_TU() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SOCIALCLUB.SC_TRANSITION_NEWS_HAS_EXTRA_DATA_TU' due to disabled trusted mode")

	local result = native_call(0x3001BEF2FECA3680)
	return result:__tointeger() ~= 0
end
natives.socialclub.sc_transition_news_has_extra_data_tu = natives.SOCIALCLUB.SC_TRANSITION_NEWS_HAS_EXTRA_DATA_TU

function natives.SOCIALCLUB.SC_TRANSITION_NEWS_GET_EXTRA_DATA_INT_TU(--[[const char*]] p0, --[[int*]] p1) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SOCIALCLUB.SC_TRANSITION_NEWS_GET_EXTRA_DATA_INT_TU' due to disabled trusted mode")

	assert(type(p0) == "string", "Arg #1 (p0) must be a string.")
	assert(type(p1) == "userdata", "Arg #2 (p1) must be a userdata.")

	local result = native_call(0x92DA6E70EF249BD1, p0, p1)
	return result:__tointeger() ~= 0
end
natives.socialclub.sc_transition_news_get_extra_data_int_tu = natives.SOCIALCLUB.SC_TRANSITION_NEWS_GET_EXTRA_DATA_INT_TU

function natives.SOCIALCLUB.SC_TRANSITION_NEWS_END() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SOCIALCLUB.SC_TRANSITION_NEWS_END' due to disabled trusted mode")

	local result = native_call(0x675721C9F644D161)
end
natives.socialclub.sc_transition_news_end = natives.SOCIALCLUB.SC_TRANSITION_NEWS_END

function natives.SOCIALCLUB.SC_PAUSE_NEWS_INIT_STARTER_PACK(--[[Any]] p0) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SOCIALCLUB.SC_PAUSE_NEWS_INIT_STARTER_PACK' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xE4F6E8D07A2F0F51, p0)
	return result:__tointeger()
end
natives.socialclub.sc_pause_news_init_starter_pack = natives.SOCIALCLUB.SC_PAUSE_NEWS_INIT_STARTER_PACK

--[[
Fills some 0x30 sized struct
]]
function natives.SOCIALCLUB.SC_PAUSE_NEWS_GET_PENDING_STORY(--[[Any]] p0) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SOCIALCLUB.SC_PAUSE_NEWS_GET_PENDING_STORY' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x8A4416C0DB05FA66, p0)
	return result:__tointeger() ~= 0
end
natives.socialclub.sc_pause_news_get_pending_story = natives.SOCIALCLUB.SC_PAUSE_NEWS_GET_PENDING_STORY

function natives.SOCIALCLUB.SC_PAUSE_NEWS_SHUTDOWN() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SOCIALCLUB.SC_PAUSE_NEWS_SHUTDOWN' due to disabled trusted mode")

	local result = native_call(0xEA95C0853A27888E)
end
natives.socialclub.sc_pause_news_shutdown = natives.SOCIALCLUB.SC_PAUSE_NEWS_SHUTDOWN

--[[
Returns the nickname of the logged-in Rockstar Social Club account.
]]
function natives.SOCIALCLUB.SC_ACCOUNT_INFO_GET_NICKNAME() -- Returns const char*
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SOCIALCLUB.SC_ACCOUNT_INFO_GET_NICKNAME' due to disabled trusted mode")

	local result = native_call(0x198D161F458ECC7F)
	return result:__tostring(true)
end
natives.socialclub.sc_account_info_get_nickname = natives.SOCIALCLUB.SC_ACCOUNT_INFO_GET_NICKNAME

function natives.SOCIALCLUB.SC_ACHIEVEMENT_INFO_STATUS(--[[int*]] p0) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SOCIALCLUB.SC_ACHIEVEMENT_INFO_STATUS' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")

	local result = native_call(0x225798743970412B, p0)
	return result:__tointeger() ~= 0
end
natives.socialclub.sc_achievement_info_status = natives.SOCIALCLUB.SC_ACHIEVEMENT_INFO_STATUS

--[[
Same as HAS_ACHIEVEMENT_BEEN_PASSED
]]
function natives.SOCIALCLUB.SC_HAS_ACHIEVEMENT_BEEN_PASSED(--[[int]] achievementId) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'SOCIALCLUB.SC_HAS_ACHIEVEMENT_BEEN_PASSED' due to disabled trusted mode")

	assert(type(achievementId) == "number", "Arg #1 (achievementId) must be a number.")

	local result = native_call(0x418DC16FAE452C1C, achievementId)
	return result:__tointeger() ~= 0
end
natives.socialclub.sc_has_achievement_been_passed = natives.SOCIALCLUB.SC_HAS_ACHIEVEMENT_BEEN_PASSED


natives.STATS = {}
natives.stats = {}

--[[
Example:

for (v_2 = 0; v_2 <= 4; v_2 += 1) {
    STATS::STAT_CLEAR_SLOT_FOR_RELOAD(v_2);
}
]]
function natives.STATS.STAT_CLEAR_SLOT_FOR_RELOAD(--[[int]] statSlot) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.STAT_CLEAR_SLOT_FOR_RELOAD' due to disabled trusted mode")

	assert(type(statSlot) == "number", "Arg #1 (statSlot) must be a number.")

	local result = native_call(0xEB0A72181D4AA4AD, statSlot)
	return result:__tointeger()
end
natives.stats.stat_clear_slot_for_reload = natives.STATS.STAT_CLEAR_SLOT_FOR_RELOAD

function natives.STATS.STAT_LOAD(--[[int]] p0) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.STAT_LOAD' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xA651443F437B1CE6, p0)
	return result:__tointeger() ~= 0
end
natives.stats.stat_load = natives.STATS.STAT_LOAD

function natives.STATS.STAT_SAVE(--[[int]] p0, --[[BOOL]] p1, --[[int]] p2, --[[Any]] p3) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.STAT_SAVE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0xE07BCA305B82D2FD, p0, p1, p2, p3)
	return result:__tointeger() ~= 0
end
natives.stats.stat_save = natives.STATS.STAT_SAVE

function natives.STATS.STAT_SET_OPEN_SAVETYPE_IN_JOB(--[[int]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.STAT_SET_OPEN_SAVETYPE_IN_JOB' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x5688585E6D563CD8, p0)
end
natives.stats.stat_set_open_savetype_in_job = natives.STATS.STAT_SET_OPEN_SAVETYPE_IN_JOB

function natives.STATS.STAT_LOAD_PENDING(--[[Any]] p0) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.STAT_LOAD_PENDING' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xA1750FFAFA181661, p0)
	return result:__tointeger() ~= 0
end
natives.stats.stat_load_pending = natives.STATS.STAT_LOAD_PENDING

function natives.STATS.STAT_SAVE_PENDING() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.STAT_SAVE_PENDING' due to disabled trusted mode")

	local result = native_call(0x7D3A583856F2C5AC)
	return result:__tointeger() ~= 0
end
natives.stats.stat_save_pending = natives.STATS.STAT_SAVE_PENDING

function natives.STATS.STAT_SAVE_PENDING_OR_REQUESTED() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.STAT_SAVE_PENDING_OR_REQUESTED' due to disabled trusted mode")

	local result = native_call(0xBBB6AD006F1BBEA3)
	return result:__tointeger() ~= 0
end
natives.stats.stat_save_pending_or_requested = natives.STATS.STAT_SAVE_PENDING_OR_REQUESTED

function natives.STATS.STAT_DELETE_SLOT(--[[Any]] p0) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.STAT_DELETE_SLOT' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x49A49BED12794D70, p0)
	return result:__tointeger()
end
natives.stats.stat_delete_slot = natives.STATS.STAT_DELETE_SLOT

function natives.STATS.STAT_SLOT_IS_LOADED(--[[Any]] p0) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.STAT_SLOT_IS_LOADED' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x0D0A9F0E7BD91E3C, p0)
	return result:__tointeger() ~= 0
end
natives.stats.stat_slot_is_loaded = natives.STATS.STAT_SLOT_IS_LOADED

function natives.STATS.STAT_CLOUD_SLOT_LOAD_FAILED(--[[Any]] p0) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.STAT_CLOUD_SLOT_LOAD_FAILED' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x7F2C4CDF2E82DF4C, p0)
	return result:__tointeger() ~= 0
end
natives.stats.stat_cloud_slot_load_failed = natives.STATS.STAT_CLOUD_SLOT_LOAD_FAILED

function natives.STATS.STAT_CLOUD_SLOT_LOAD_FAILED_CODE(--[[Any]] p0) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.STAT_CLOUD_SLOT_LOAD_FAILED_CODE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xE496A53BA5F50A56, p0)
	return result:__tointeger()
end
natives.stats.stat_cloud_slot_load_failed_code = natives.STATS.STAT_CLOUD_SLOT_LOAD_FAILED_CODE

function natives.STATS.STAT_SET_BLOCK_SAVES(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.STAT_SET_BLOCK_SAVES' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0xF434A10BA01C37D0, toggle)
end
natives.stats.stat_set_block_saves = natives.STATS.STAT_SET_BLOCK_SAVES

function natives.STATS.STAT_GET_BLOCK_SAVES() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.STAT_GET_BLOCK_SAVES' due to disabled trusted mode")

	local result = native_call(0x6A7F19756F1A9016)
	return result:__tointeger() ~= 0
end
natives.stats.stat_get_block_saves = natives.STATS.STAT_GET_BLOCK_SAVES

function natives.STATS.STAT_CLOUD_SLOT_SAVE_FAILED(--[[Any]] p0) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.STAT_CLOUD_SLOT_SAVE_FAILED' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x7E6946F68A38B74F, p0)
	return result:__tointeger() ~= 0
end
natives.stats.stat_cloud_slot_save_failed = natives.STATS.STAT_CLOUD_SLOT_SAVE_FAILED

function natives.STATS.STAT_CLEAR_PENDING_SAVES(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.STAT_CLEAR_PENDING_SAVES' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xA8733668D1047B51, p0)
end
natives.stats.stat_clear_pending_saves = natives.STATS.STAT_CLEAR_PENDING_SAVES

function natives.STATS.STAT_LOAD_DIRTY_READ_DETECTED() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.STAT_LOAD_DIRTY_READ_DETECTED' due to disabled trusted mode")

	local result = native_call(0xECB41AC6AB754401)
	return result:__tointeger() ~= 0
end
natives.stats.stat_load_dirty_read_detected = natives.STATS.STAT_LOAD_DIRTY_READ_DETECTED

function natives.STATS.STAT_CLEAR_DIRTY_READ_DETECTED() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.STAT_CLEAR_DIRTY_READ_DETECTED' due to disabled trusted mode")

	local result = native_call(0x9B4BD21D69B1E609)
end
natives.stats.stat_clear_dirty_read_detected = natives.STATS.STAT_CLEAR_DIRTY_READ_DETECTED

function natives.STATS.STAT_GET_LOAD_SAFE_TO_PROGRESS_TO_MP_FROM_SP() -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.STAT_GET_LOAD_SAFE_TO_PROGRESS_TO_MP_FROM_SP' due to disabled trusted mode")

	local result = native_call(0xC0E0D686DDFC6EAE)
	return result:__tointeger()
end
natives.stats.stat_get_load_safe_to_progress_to_mp_from_sp = natives.STATS.STAT_GET_LOAD_SAFE_TO_PROGRESS_TO_MP_FROM_SP

--[[
Example:
 STATS::STAT_SET_INT(MISC::GET_HASH_KEY("MPPLY_KILLS_PLAYERS"), 1337, true);
]]
function natives.STATS.STAT_SET_INT(--[[Hash]] statName, --[[int]] value, --[[BOOL]] save) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.STAT_SET_INT' due to disabled trusted mode")

	assert(type(statName) == "number", "Arg #1 (statName) must be a number.")
	assert(type(value) == "number", "Arg #2 (value) must be a number.")
	assert(type(save) == "boolean", "Arg #3 (save) must be a boolean.")

	local result = native_call(0xB3271D7AB655B441, statName, value, save)
	return result:__tointeger() ~= 0
end
natives.stats.stat_set_int = natives.STATS.STAT_SET_INT

--[[
Example:
 STATS::STAT_SET_FLOAT(MISC::GET_HASH_KEY("MP0_WEAPON_ACCURACY"), 66.6f, true);
]]
function natives.STATS.STAT_SET_FLOAT(--[[Hash]] statName, --[[float]] value, --[[BOOL]] save) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.STAT_SET_FLOAT' due to disabled trusted mode")

	assert(type(statName) == "number", "Arg #1 (statName) must be a number.")
	assert(type(value) == "number", "Arg #2 (value) must be a number.")
	assert(type(save) == "boolean", "Arg #3 (save) must be a boolean.")

	local result = native_call(0x4851997F37FE9B3C, statName, value, save)
	return result:__tointeger() ~= 0
end
natives.stats.stat_set_float = natives.STATS.STAT_SET_FLOAT

--[[
Example:
 STATS::STAT_SET_BOOL(MISC::GET_HASH_KEY("MPPLY_MELEECHLENGECOMPLETED"), trur, true);
]]
function natives.STATS.STAT_SET_BOOL(--[[Hash]] statName, --[[BOOL]] value, --[[BOOL]] save) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.STAT_SET_BOOL' due to disabled trusted mode")

	assert(type(statName) == "number", "Arg #1 (statName) must be a number.")
	assert(type(value) == "boolean", "Arg #2 (value) must be a boolean.")
	assert(type(save) == "boolean", "Arg #3 (save) must be a boolean.")

	local result = native_call(0x4B33C4243DE0C432, statName, value, save)
	return result:__tointeger() ~= 0
end
natives.stats.stat_set_bool = natives.STATS.STAT_SET_BOOL

--[[
The following values have been found in the decompiled scripts:
"RC_ABI1"
"RC_ABI2"
"RC_BA1"
"RC_BA2"
"RC_BA3"
"RC_BA3A"
"RC_BA3C"
"RC_BA4"
"RC_DRE1"
"RC_EPS1"
"RC_EPS2"
"RC_EPS3"
"RC_EPS4"
"RC_EPS5"
"RC_EPS6"
"RC_EPS7"
"RC_EPS8"
"RC_EXT1"
"RC_EXT2"
"RC_EXT3"
"RC_EXT4"
"RC_FAN1"
"RC_FAN2"
"RC_FAN3"
"RC_HAO1"
"RC_HUN1"
"RC_HUN2"
"RC_JOS1"
"RC_JOS2"
"RC_JOS3"
"RC_JOS4"
"RC_MAU1"
"RC_MIN1"
"RC_MIN2"
"RC_MIN3"
"RC_MRS1"
"RC_MRS2"
"RC_NI1"
"RC_NI1A"
"RC_NI1B"
"RC_NI1C"
"RC_NI1D"
"RC_NI2"
"RC_NI3"
"RC_OME1"
"RC_OME2"
"RC_PA1"
"RC_PA2"
"RC_PA3"
"RC_PA3A"
"RC_PA3B"
"RC_PA4"
"RC_RAM1"
"RC_RAM2"
"RC_RAM3"
"RC_RAM4"
"RC_RAM5"
"RC_SAS1"
"RC_TON1"
"RC_TON2"
"RC_TON3"
"RC_TON4"
"RC_TON5"
]]
function natives.STATS.STAT_SET_GXT_LABEL(--[[Hash]] statName, --[[const char*]] value, --[[BOOL]] save) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.STAT_SET_GXT_LABEL' due to disabled trusted mode")

	assert(type(statName) == "number", "Arg #1 (statName) must be a number.")
	assert(type(value) == "string", "Arg #2 (value) must be a string.")
	assert(type(save) == "boolean", "Arg #3 (save) must be a boolean.")

	local result = native_call(0x17695002FD8B2AE0, statName, value, save)
	return result:__tointeger() ~= 0
end
natives.stats.stat_set_gxt_label = natives.STATS.STAT_SET_GXT_LABEL

--[[
'value' is a structure to a structure, 'numFields' is how many fields there are in said structure (usually 7).

The structure looks like this:

int year
int month
int day
int hour
int minute
int second
int millisecond

The decompiled scripts use TIME::GET_POSIX_TIME to fill this structure.
]]
function natives.STATS.STAT_SET_DATE(--[[Hash]] statName, --[[Any*]] value, --[[int]] numFields, --[[BOOL]] save) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.STAT_SET_DATE' due to disabled trusted mode")

	assert(type(statName) == "number", "Arg #1 (statName) must be a number.")
	assert(type(value) == "userdata", "Arg #2 (value) must be a userdata.")
	assert(type(numFields) == "number", "Arg #3 (numFields) must be a number.")
	assert(type(save) == "boolean", "Arg #4 (save) must be a boolean.")

	local result = native_call(0x2C29BFB64F4FCBE4, statName, value, numFields, save)
	return result:__tointeger() ~= 0
end
natives.stats.stat_set_date = natives.STATS.STAT_SET_DATE

function natives.STATS.STAT_SET_STRING(--[[Hash]] statName, --[[const char*]] value, --[[BOOL]] save) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.STAT_SET_STRING' due to disabled trusted mode")

	assert(type(statName) == "number", "Arg #1 (statName) must be a number.")
	assert(type(value) == "string", "Arg #2 (value) must be a string.")
	assert(type(save) == "boolean", "Arg #3 (save) must be a boolean.")

	local result = native_call(0xA87B2335D12531D7, statName, value, save)
	return result:__tointeger() ~= 0
end
natives.stats.stat_set_string = natives.STATS.STAT_SET_STRING

function natives.STATS.STAT_SET_POS(--[[Hash]] statName, --[[float]] x, --[[float]] y, --[[float]] z, --[[BOOL]] save) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.STAT_SET_POS' due to disabled trusted mode")

	assert(type(statName) == "number", "Arg #1 (statName) must be a number.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")
	assert(type(save) == "boolean", "Arg #5 (save) must be a boolean.")

	local result = native_call(0xDB283FDE680FE72E, statName, x, y, z, save)
	return result:__tointeger() ~= 0
end
natives.stats.stat_set_pos = natives.STATS.STAT_SET_POS

function natives.STATS.STAT_SET_MASKED_INT(--[[Hash]] statName, --[[Any]] p1, --[[Any]] p2, --[[int]] p3, --[[BOOL]] save) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.STAT_SET_MASKED_INT' due to disabled trusted mode")

	assert(type(statName) == "number", "Arg #1 (statName) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(save) == "boolean", "Arg #5 (save) must be a boolean.")

	local result = native_call(0x7BBB1B54583ED410, statName, p1, p2, p3, save)
	return result:__tointeger() ~= 0
end
natives.stats.stat_set_masked_int = natives.STATS.STAT_SET_MASKED_INT

function natives.STATS.STAT_SET_USER_ID(--[[Hash]] statName, --[[const char*]] value, --[[BOOL]] save) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.STAT_SET_USER_ID' due to disabled trusted mode")

	assert(type(statName) == "number", "Arg #1 (statName) must be a number.")
	assert(type(value) == "string", "Arg #2 (value) must be a string.")
	assert(type(save) == "boolean", "Arg #3 (save) must be a boolean.")

	local result = native_call(0x8CDDF1E452BABE11, statName, value, save)
	return result:__tointeger() ~= 0
end
natives.stats.stat_set_user_id = natives.STATS.STAT_SET_USER_ID

--[[
p1 always true.
]]
function natives.STATS.STAT_SET_CURRENT_POSIX_TIME(--[[Hash]] statName, --[[BOOL]] p1) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.STAT_SET_CURRENT_POSIX_TIME' due to disabled trusted mode")

	assert(type(statName) == "number", "Arg #1 (statName) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0xC2F84B7F9C4D0C61, statName, p1)
	return result:__tointeger() ~= 0
end
natives.stats.stat_set_current_posix_time = natives.STATS.STAT_SET_CURRENT_POSIX_TIME

--[[
p2 appears to always be -1

]]
function natives.STATS.STAT_GET_INT(--[[Hash]] statHash, --[[int*]] outValue, --[[int]] p2) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.STAT_GET_INT' due to disabled trusted mode")

	assert(type(statHash) == "number", "Arg #1 (statHash) must be a number.")
	assert(type(outValue) == "userdata", "Arg #2 (outValue) must be a userdata.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0x767FBC2AC802EF3D, statHash, outValue, p2)
	return result:__tointeger() ~= 0
end
natives.stats.stat_get_int = natives.STATS.STAT_GET_INT

function natives.STATS.STAT_GET_FLOAT(--[[Hash]] statHash, --[[float*]] outValue, --[[Any]] p2) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.STAT_GET_FLOAT' due to disabled trusted mode")

	assert(type(statHash) == "number", "Arg #1 (statHash) must be a number.")
	assert(type(outValue) == "userdata", "Arg #2 (outValue) must be a userdata.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0xD7AE6C9C9C6AC54C, statHash, outValue, p2)
	return result:__tointeger() ~= 0
end
natives.stats.stat_get_float = natives.STATS.STAT_GET_FLOAT

function natives.STATS.STAT_GET_BOOL(--[[Hash]] statHash, --[[BOOL*]] outValue, --[[Any]] p2) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.STAT_GET_BOOL' due to disabled trusted mode")

	assert(type(statHash) == "number", "Arg #1 (statHash) must be a number.")
	assert(type(outValue) == "userdata", "Arg #2 (outValue) must be a userdata.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0x11B5E6D2AE73F48E, statHash, outValue, p2)
	return result:__tointeger() ~= 0
end
natives.stats.stat_get_bool = natives.STATS.STAT_GET_BOOL

function natives.STATS.STAT_GET_DATE(--[[Hash]] statHash, --[[Any*]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.STAT_GET_DATE' due to disabled trusted mode")

	assert(type(statHash) == "number", "Arg #1 (statHash) must be a number.")
	assert(type(p1) == "userdata", "Arg #2 (p1) must be a userdata.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x8B0FACEFC36C824B, statHash, p1, p2, p3)
	return result:__tointeger() ~= 0
end
natives.stats.stat_get_date = natives.STATS.STAT_GET_DATE

--[[
p1 is always -1 in the script files
]]
function natives.STATS.STAT_GET_STRING(--[[Hash]] statHash, --[[int]] p1) -- Returns const char*
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.STAT_GET_STRING' due to disabled trusted mode")

	assert(type(statHash) == "number", "Arg #1 (statHash) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xE50384ACC2C3DB74, statHash, p1)
	return result:__tostring(true)
end
natives.stats.stat_get_string = natives.STATS.STAT_GET_STRING

function natives.STATS.STAT_GET_POS(--[[Any]] p0, --[[Any*]] p1, --[[Any*]] p2, --[[Any*]] p3, --[[Any]] p4) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.STAT_GET_POS' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "userdata", "Arg #2 (p1) must be a userdata.")
	assert(type(p2) == "userdata", "Arg #3 (p2) must be a userdata.")
	assert(type(p3) == "userdata", "Arg #4 (p3) must be a userdata.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")

	local result = native_call(0x350F82CCB186AA1B, p0, p1, p2, p3, p4)
	return result:__tointeger() ~= 0
end
natives.stats.stat_get_pos = natives.STATS.STAT_GET_POS

function natives.STATS.STAT_GET_MASKED_INT(--[[Any]] p0, --[[Any*]] p1, --[[Any]] p2, --[[Any]] p3, --[[Any]] p4) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.STAT_GET_MASKED_INT' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "userdata", "Arg #2 (p1) must be a userdata.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")

	local result = native_call(0x655185A06D9EEAAB, p0, p1, p2, p3, p4)
	return result:__tointeger() ~= 0
end
natives.stats.stat_get_masked_int = natives.STATS.STAT_GET_MASKED_INT

--[[
Needs more research. Seems to return "STAT_UNKNOWN" if no such user id exists.
]]
function natives.STATS.STAT_GET_USER_ID(--[[Any]] p0) -- Returns const char*
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.STAT_GET_USER_ID' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x2365C388E393BBE2, p0)
	return result:__tostring(true)
end
natives.stats.stat_get_user_id = natives.STATS.STAT_GET_USER_ID

function natives.STATS.STAT_GET_LICENSE_PLATE(--[[Hash]] statName) -- Returns const char*
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.STAT_GET_LICENSE_PLATE' due to disabled trusted mode")

	assert(type(statName) == "number", "Arg #1 (statName) must be a number.")

	local result = native_call(0x5473D4195058B2E4, statName)
	return result:__tostring(true)
end
natives.stats.stat_get_license_plate = natives.STATS.STAT_GET_LICENSE_PLATE

function natives.STATS.STAT_SET_LICENSE_PLATE(--[[Hash]] statName, --[[const char*]] str) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.STAT_SET_LICENSE_PLATE' due to disabled trusted mode")

	assert(type(statName) == "number", "Arg #1 (statName) must be a number.")
	assert(type(str) == "string", "Arg #2 (str) must be a string.")

	local result = native_call(0x69FF13266D7296DA, statName, str)
	return result:__tointeger() ~= 0
end
natives.stats.stat_set_license_plate = natives.STATS.STAT_SET_LICENSE_PLATE

function natives.STATS.STAT_INCREMENT(--[[Hash]] statName, --[[float]] value) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.STAT_INCREMENT' due to disabled trusted mode")

	assert(type(statName) == "number", "Arg #1 (statName) must be a number.")
	assert(type(value) == "number", "Arg #2 (value) must be a number.")

	local result = native_call(0x9B5A68C6489E9909, statName, value)
end
natives.stats.stat_increment = natives.STATS.STAT_INCREMENT

function natives.STATS.STAT_COMMUNITY_START_SYNCH() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.STAT_COMMUNITY_START_SYNCH' due to disabled trusted mode")

	local result = native_call(0x5A556B229A169402)
	return result:__tointeger() ~= 0
end
natives.stats.stat_community_start_synch = natives.STATS.STAT_COMMUNITY_START_SYNCH

function natives.STATS.STAT_COMMUNITY_SYNCH_IS_PENDING() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.STAT_COMMUNITY_SYNCH_IS_PENDING' due to disabled trusted mode")

	local result = native_call(0xB1D2BB1E1631F5B1)
	return result:__tointeger() ~= 0
end
natives.stats.stat_community_synch_is_pending = natives.STATS.STAT_COMMUNITY_SYNCH_IS_PENDING

function natives.STATS.STAT_COMMUNITY_GET_HISTORY(--[[Hash]] statName, --[[int]] p1, --[[float*]] outValue) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.STAT_COMMUNITY_GET_HISTORY' due to disabled trusted mode")

	assert(type(statName) == "number", "Arg #1 (statName) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(outValue) == "userdata", "Arg #3 (outValue) must be a userdata.")

	local result = native_call(0xBED9F5693F34ED17, statName, p1, outValue)
	return result:__tointeger() ~= 0
end
natives.stats.stat_community_get_history = natives.STATS.STAT_COMMUNITY_GET_HISTORY

--[[
STATS::0x343B27E2(0);
STATS::0x343B27E2(1);
STATS::0x343B27E2(2);
STATS::0x343B27E2(3);
STATS::0x343B27E2(4);
STATS::0x343B27E2(5);
STATS::0x343B27E2(6);
STATS::0x343B27E2(7);

Identical in ingamehud & maintransition.
]]
function natives.STATS.STAT_RESET_ALL_ONLINE_CHARACTER_STATS(--[[int]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.STAT_RESET_ALL_ONLINE_CHARACTER_STATS' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x26D7399B9587FE89, p0)
end
natives.stats.stat_reset_all_online_character_stats = natives.STATS.STAT_RESET_ALL_ONLINE_CHARACTER_STATS

--[[
STATS::0xE3247582(0);
STATS::0xE3247582(1);
STATS::0xE3247582(2);
STATS::0xE3247582(3);
STATS::0xE3247582(4);
STATS::0xE3247582(5);
STATS::0xE3247582(6);
]]
function natives.STATS.STAT_LOCAL_RESET_ALL_ONLINE_CHARACTER_STATS(--[[int]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.STAT_LOCAL_RESET_ALL_ONLINE_CHARACTER_STATS' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xA78B8FA58200DA56, p0)
end
natives.stats.stat_local_reset_all_online_character_stats = natives.STATS.STAT_LOCAL_RESET_ALL_ONLINE_CHARACTER_STATS

function natives.STATS.STAT_GET_NUMBER_OF_DAYS(--[[Hash]] statName) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.STAT_GET_NUMBER_OF_DAYS' due to disabled trusted mode")

	assert(type(statName) == "number", "Arg #1 (statName) must be a number.")

	local result = native_call(0xE0E854F5280FB769, statName)
	return result:__tointeger()
end
natives.stats.stat_get_number_of_days = natives.STATS.STAT_GET_NUMBER_OF_DAYS

function natives.STATS.STAT_GET_NUMBER_OF_HOURS(--[[Hash]] statName) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.STAT_GET_NUMBER_OF_HOURS' due to disabled trusted mode")

	assert(type(statName) == "number", "Arg #1 (statName) must be a number.")

	local result = native_call(0xF2D4B2FE415AAFC3, statName)
	return result:__tointeger()
end
natives.stats.stat_get_number_of_hours = natives.STATS.STAT_GET_NUMBER_OF_HOURS

function natives.STATS.STAT_GET_NUMBER_OF_MINUTES(--[[Hash]] statName) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.STAT_GET_NUMBER_OF_MINUTES' due to disabled trusted mode")

	assert(type(statName) == "number", "Arg #1 (statName) must be a number.")

	local result = native_call(0x7583B4BE4C5A41B5, statName)
	return result:__tointeger()
end
natives.stats.stat_get_number_of_minutes = natives.STATS.STAT_GET_NUMBER_OF_MINUTES

function natives.STATS.STAT_GET_NUMBER_OF_SECONDS(--[[Hash]] statName) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.STAT_GET_NUMBER_OF_SECONDS' due to disabled trusted mode")

	assert(type(statName) == "number", "Arg #1 (statName) must be a number.")

	local result = native_call(0x2CE056FF3723F00B, statName)
	return result:__tointeger()
end
natives.stats.stat_get_number_of_seconds = natives.STATS.STAT_GET_NUMBER_OF_SECONDS

--[[
Does not take effect immediately, unfortunately.

profileSetting seems to only be 936, 937 and 938 in scripts
]]
function natives.STATS.STAT_SET_PROFILE_SETTING_VALUE(--[[int]] profileSetting, --[[int]] value) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.STAT_SET_PROFILE_SETTING_VALUE' due to disabled trusted mode")

	assert(type(profileSetting) == "number", "Arg #1 (profileSetting) must be a number.")
	assert(type(value) == "number", "Arg #2 (value) must be a number.")

	local result = native_call(0x68F01422BE1D838F, profileSetting, value)
end
natives.stats.stat_set_profile_setting_value = natives.STATS.STAT_SET_PROFILE_SETTING_VALUE

--[[
This native does absolutely nothing, just a nullsub
]]
function natives.STATS.STATS_COMPLETED_CHARACTER_CREATION(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.STATS_COMPLETED_CHARACTER_CREATION' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xC01D2470F22CDE5A, p0)
end
natives.stats.stats_completed_character_creation = natives.STATS.STATS_COMPLETED_CHARACTER_CREATION

--[[
Needs more research. Possibly used to calculate the "mask" when calling "STAT_SET_MASKED_INT"?
]]
function natives.STATS.PACKED_STAT_GET_INT_STAT_INDEX(--[[int]] p0) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PACKED_STAT_GET_INT_STAT_INDEX' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x94F12ABF9C79E339, p0)
	return result:__tointeger()
end
natives.stats.packed_stat_get_int_stat_index = natives.STATS.PACKED_STAT_GET_INT_STAT_INDEX

function natives.STATS.GET_PACKED_INT_STAT_KEY(--[[int]] index, --[[BOOL]] spStat, --[[BOOL]] charStat, --[[int]] character) -- Returns Hash
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.GET_PACKED_INT_STAT_KEY' due to disabled trusted mode")

	assert(type(index) == "number", "Arg #1 (index) must be a number.")
	assert(type(spStat) == "boolean", "Arg #2 (spStat) must be a boolean.")
	assert(type(charStat) == "boolean", "Arg #3 (charStat) must be a boolean.")
	assert(type(character) == "number", "Arg #4 (character) must be a number.")

	local result = native_call(0x61E111E323419E07, index, spStat, charStat, character)
	return result:__tointeger()
end
natives.stats.get_packed_int_stat_key = natives.STATS.GET_PACKED_INT_STAT_KEY

function natives.STATS.GET_PACKED_TU_INT_STAT_KEY(--[[int]] index, --[[BOOL]] spStat, --[[BOOL]] charStat, --[[int]] character) -- Returns Hash
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.GET_PACKED_TU_INT_STAT_KEY' due to disabled trusted mode")

	assert(type(index) == "number", "Arg #1 (index) must be a number.")
	assert(type(spStat) == "boolean", "Arg #2 (spStat) must be a boolean.")
	assert(type(charStat) == "boolean", "Arg #3 (charStat) must be a boolean.")
	assert(type(character) == "number", "Arg #4 (character) must be a number.")

	local result = native_call(0xD16C2AD6B8E32854, index, spStat, charStat, character)
	return result:__tointeger()
end
natives.stats.get_packed_tu_int_stat_key = natives.STATS.GET_PACKED_TU_INT_STAT_KEY

--[[
Needs more research. Gets the stat name of a masked int?

section - values used in the decompiled scripts:
"_NGPSTAT_INT"
"_MP_NGPSTAT_INT"
"_MP_LRPSTAT_INT"
"_MP_APAPSTAT_INT"
"_MP_LR2PSTAT_INT"
"_MP_BIKEPSTAT_INT"
"_MP_IMPEXPPSTAT_INT"
"_MP_GUNRPSTAT_INT"
"_NGDLCPSTAT_INT"
"_MP_NGDLCPSTAT_INT"
"_DLCSMUGCHARPSTAT_INT"
"_GANGOPSPSTAT_INT"
"_BUSINESSBATPSTAT_INT"
"_ARENAWARSPSTAT_INT"
"_CASINOPSTAT_INT"
"_CASINOHSTPSTAT_INT"
]]
function natives.STATS.GET_PACKED_NG_INT_STAT_KEY(--[[int]] index, --[[BOOL]] spStat, --[[BOOL]] charStat, --[[int]] character, --[[const char*]] section) -- Returns Hash
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.GET_PACKED_NG_INT_STAT_KEY' due to disabled trusted mode")

	assert(type(index) == "number", "Arg #1 (index) must be a number.")
	assert(type(spStat) == "boolean", "Arg #2 (spStat) must be a boolean.")
	assert(type(charStat) == "boolean", "Arg #3 (charStat) must be a boolean.")
	assert(type(character) == "number", "Arg #4 (character) must be a number.")
	assert(type(section) == "string", "Arg #5 (section) must be a string.")

	local result = native_call(0x2B4CDCA6F07FF3DA, index, spStat, charStat, character, section)
	return result:__tointeger()
end
natives.stats.get_packed_ng_int_stat_key = natives.STATS.GET_PACKED_NG_INT_STAT_KEY

function natives.STATS.GET_PACKED_STAT_BOOL_CODE(--[[int]] index, --[[int]] characterSlot) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.GET_PACKED_STAT_BOOL_CODE' due to disabled trusted mode")

	assert(type(index) == "number", "Arg #1 (index) must be a number.")
	assert(type(characterSlot) == "number", "Arg #2 (characterSlot) must be a number.")

	local result = native_call(0xDA7EBFC49AE3F1B0, index, characterSlot)
	return result:__tointeger() ~= 0
end
natives.stats.get_packed_stat_bool_code = natives.STATS.GET_PACKED_STAT_BOOL_CODE

function natives.STATS.GET_PACKED_STAT_INT_CODE(--[[int]] index, --[[int]] characterSlot) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.GET_PACKED_STAT_INT_CODE' due to disabled trusted mode")

	assert(type(index) == "number", "Arg #1 (index) must be a number.")
	assert(type(characterSlot) == "number", "Arg #2 (characterSlot) must be a number.")

	local result = native_call(0x0BC900A6FE73770C, index, characterSlot)
	return result:__tointeger()
end
natives.stats.get_packed_stat_int_code = natives.STATS.GET_PACKED_STAT_INT_CODE

function natives.STATS.SET_PACKED_STAT_BOOL_CODE(--[[int]] index, --[[BOOL]] value, --[[int]] characterSlot) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.SET_PACKED_STAT_BOOL_CODE' due to disabled trusted mode")

	assert(type(index) == "number", "Arg #1 (index) must be a number.")
	assert(type(value) == "boolean", "Arg #2 (value) must be a boolean.")
	assert(type(characterSlot) == "number", "Arg #3 (characterSlot) must be a number.")

	local result = native_call(0xDB8A58AEAA67CD07, index, value, characterSlot)
end
natives.stats.set_packed_stat_bool_code = natives.STATS.SET_PACKED_STAT_BOOL_CODE

function natives.STATS.SET_PACKED_STAT_INT_CODE(--[[int]] index, --[[int]] value, --[[int]] characterSlot) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.SET_PACKED_STAT_INT_CODE' due to disabled trusted mode")

	assert(type(index) == "number", "Arg #1 (index) must be a number.")
	assert(type(value) == "number", "Arg #2 (value) must be a number.")
	assert(type(characterSlot) == "number", "Arg #3 (characterSlot) must be a number.")

	local result = native_call(0x1581503AE529CD2E, index, value, characterSlot)
end
natives.stats.set_packed_stat_int_code = natives.STATS.SET_PACKED_STAT_INT_CODE

function natives.STATS.PLAYSTATS_BACKGROUND_SCRIPT_ACTION(--[[const char*]] action, --[[int]] value) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_BACKGROUND_SCRIPT_ACTION' due to disabled trusted mode")

	assert(type(action) == "string", "Arg #1 (action) must be a string.")
	assert(type(value) == "number", "Arg #2 (value) must be a number.")

	local result = native_call(0x5009DFD741329729, action, value)
end
natives.stats.playstats_background_script_action = natives.STATS.PLAYSTATS_BACKGROUND_SCRIPT_ACTION

function natives.STATS.PLAYSTATS_NPC_INVITE(--[[Any*]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_NPC_INVITE' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")

	local result = native_call(0x93054C88E6AA7C44, p0)
end
natives.stats.playstats_npc_invite = natives.STATS.PLAYSTATS_NPC_INVITE

function natives.STATS.PLAYSTATS_AWARD_XP(--[[int]] amount, --[[Hash]] type, --[[Hash]] category) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_AWARD_XP' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")
	assert(type(type) == "number", "Arg #2 (type) must be a number.")
	assert(type(category) == "number", "Arg #3 (category) must be a number.")

	local result = native_call(0x46F917F6B4128FE4, amount, type, category)
end
natives.stats.playstats_award_xp = natives.STATS.PLAYSTATS_AWARD_XP

function natives.STATS.PLAYSTATS_RANK_UP(--[[int]] rank) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_RANK_UP' due to disabled trusted mode")

	assert(type(rank) == "number", "Arg #1 (rank) must be a number.")

	local result = native_call(0xC7F2DE41D102BFB4, rank)
end
natives.stats.playstats_rank_up = natives.STATS.PLAYSTATS_RANK_UP

function natives.STATS.PLAYSTATS_STARTED_SESSION_IN_OFFLINEMODE() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_STARTED_SESSION_IN_OFFLINEMODE' due to disabled trusted mode")

	local result = native_call(0x098760C7461724CD)
end
natives.stats.playstats_started_session_in_offlinemode = natives.STATS.PLAYSTATS_STARTED_SESSION_IN_OFFLINEMODE

function natives.STATS.PLAYSTATS_ACTIVITY_DONE(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_ACTIVITY_DONE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xA071E0ED98F91286, p0, p1)
end
natives.stats.playstats_activity_done = natives.STATS.PLAYSTATS_ACTIVITY_DONE

function natives.STATS.PLAYSTATS_LEAVE_JOB_CHAIN(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3, --[[Any]] p4) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_LEAVE_JOB_CHAIN' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")

	local result = native_call(0xC5BE134EC7BA96A0, p0, p1, p2, p3, p4)
end
natives.stats.playstats_leave_job_chain = natives.STATS.PLAYSTATS_LEAVE_JOB_CHAIN

function natives.STATS.PLAYSTATS_MISSION_STARTED(--[[Any*]] p0, --[[Any]] p1, --[[Any]] p2, --[[BOOL]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_MISSION_STARTED' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "boolean", "Arg #4 (p3) must be a boolean.")

	local result = native_call(0xC19A2925C34D2231, p0, p1, p2, p3)
end
natives.stats.playstats_mission_started = natives.STATS.PLAYSTATS_MISSION_STARTED

function natives.STATS.PLAYSTATS_MISSION_OVER(--[[Any*]] p0, --[[Any]] p1, --[[Any]] p2, --[[BOOL]] p3, --[[BOOL]] p4, --[[BOOL]] p5) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_MISSION_OVER' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "boolean", "Arg #4 (p3) must be a boolean.")
	assert(type(p4) == "boolean", "Arg #5 (p4) must be a boolean.")
	assert(type(p5) == "boolean", "Arg #6 (p5) must be a boolean.")

	local result = native_call(0x7C4BB33A8CED7324, p0, p1, p2, p3, p4, p5)
end
natives.stats.playstats_mission_over = natives.STATS.PLAYSTATS_MISSION_OVER

function natives.STATS.PLAYSTATS_MISSION_CHECKPOINT(--[[Any*]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_MISSION_CHECKPOINT' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0xC900596A63978C1D, p0, p1, p2, p3)
end
natives.stats.playstats_mission_checkpoint = natives.STATS.PLAYSTATS_MISSION_CHECKPOINT

function natives.STATS.PLAYSTATS_RANDOM_MISSION_DONE(--[[const char*]] name, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_RANDOM_MISSION_DONE' due to disabled trusted mode")

	assert(type(name) == "string", "Arg #1 (name) must be a string.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x71862B1D855F32E1, name, p1, p2, p3)
end
natives.stats.playstats_random_mission_done = natives.STATS.PLAYSTATS_RANDOM_MISSION_DONE

function natives.STATS.PLAYSTATS_ROS_BET(--[[int]] amount, --[[int]] act, --[[Player]] player, --[[float]] cm) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_ROS_BET' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")
	assert(type(act) == "number", "Arg #2 (act) must be a number.")
	assert(type(player) == "number", "Arg #3 (player) must be a number.")
	assert(type(cm) == "number", "Arg #4 (cm) must be a number.")

	local result = native_call(0x121FB4DDDC2D5291, amount, act, player, cm)
end
natives.stats.playstats_ros_bet = natives.STATS.PLAYSTATS_ROS_BET

function natives.STATS.PLAYSTATS_RACE_CHECKPOINT(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3, --[[Any]] p4) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_RACE_CHECKPOINT' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")

	local result = native_call(0x9C375C315099DDE4, p0, p1, p2, p3, p4)
end
natives.stats.playstats_race_checkpoint = natives.STATS.PLAYSTATS_RACE_CHECKPOINT

function natives.STATS.PLAYSTATS_CREATE_MATCH_HISTORY_ID_2(--[[int*]] playerAccountId, --[[int*]] posixTime) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_CREATE_MATCH_HISTORY_ID_2' due to disabled trusted mode")

	assert(type(playerAccountId) == "userdata", "Arg #1 (playerAccountId) must be a userdata.")
	assert(type(posixTime) == "userdata", "Arg #2 (posixTime) must be a userdata.")

	local result = native_call(0x6DEE77AFF8C21BD1, playerAccountId, posixTime)
	return result:__tointeger() ~= 0
end
natives.stats.playstats_create_match_history_id_2 = natives.STATS.PLAYSTATS_CREATE_MATCH_HISTORY_ID_2

function natives.STATS.PLAYSTATS_MATCH_STARTED(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_MATCH_STARTED' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0xBC80E22DED931E3D, p0, p1, p2)
end
natives.stats.playstats_match_started = natives.STATS.PLAYSTATS_MATCH_STARTED

function natives.STATS.PLAYSTATS_SHOP_ITEM(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3, --[[Any]] p4) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_SHOP_ITEM' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")

	local result = native_call(0x176852ACAAC173D1, p0, p1, p2, p3, p4)
end
natives.stats.playstats_shop_item = natives.STATS.PLAYSTATS_SHOP_ITEM

function natives.STATS.PLAYSTATS_CRATE_DROP_MISSION_DONE(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3, --[[Any]] p4, --[[Any]] p5, --[[Any]] p6, --[[Any]] p7) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_CRATE_DROP_MISSION_DONE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")
	assert(type(p6) == "number", "Arg #7 (p6) must be a number.")
	assert(type(p7) == "number", "Arg #8 (p7) must be a number.")

	local result = native_call(0x1CAE5D2E3F9A07F0, p0, p1, p2, p3, p4, p5, p6, p7)
end
natives.stats.playstats_crate_drop_mission_done = natives.STATS.PLAYSTATS_CRATE_DROP_MISSION_DONE

function natives.STATS.PLAYSTATS_CRATE_CREATED(--[[float]] p0, --[[float]] p1, --[[float]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_CRATE_CREATED' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0xAFC7E5E075A96F46, p0, p1, p2)
end
natives.stats.playstats_crate_created = natives.STATS.PLAYSTATS_CRATE_CREATED

function natives.STATS.PLAYSTATS_HOLD_UP_MISSION_DONE(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_HOLD_UP_MISSION_DONE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0xCB00196B31C39EB1, p0, p1, p2, p3)
end
natives.stats.playstats_hold_up_mission_done = natives.STATS.PLAYSTATS_HOLD_UP_MISSION_DONE

function natives.STATS.PLAYSTATS_IMPORT_EXPORT_MISSION_DONE(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_IMPORT_EXPORT_MISSION_DONE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x2B69F5074C894811, p0, p1, p2, p3)
end
natives.stats.playstats_import_export_mission_done = natives.STATS.PLAYSTATS_IMPORT_EXPORT_MISSION_DONE

function natives.STATS.PLAYSTATS_RACE_TO_POINT_MISSION_DONE(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_RACE_TO_POINT_MISSION_DONE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0xADDD1C754E2E2914, p0, p1, p2, p3)
end
natives.stats.playstats_race_to_point_mission_done = natives.STATS.PLAYSTATS_RACE_TO_POINT_MISSION_DONE

function natives.STATS.PLAYSTATS_ACQUIRED_HIDDEN_PACKAGE(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_ACQUIRED_HIDDEN_PACKAGE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x79AB33F0FBFAC40C, p0)
end
natives.stats.playstats_acquired_hidden_package = natives.STATS.PLAYSTATS_ACQUIRED_HIDDEN_PACKAGE

function natives.STATS.PLAYSTATS_WEBSITE_VISITED(--[[Hash]] scaleformHash, --[[int]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_WEBSITE_VISITED' due to disabled trusted mode")

	assert(type(scaleformHash) == "number", "Arg #1 (scaleformHash) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xDDF24D535060F811, scaleformHash, p1)
end
natives.stats.playstats_website_visited = natives.STATS.PLAYSTATS_WEBSITE_VISITED

function natives.STATS.PLAYSTATS_FRIEND_ACTIVITY(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_FRIEND_ACTIVITY' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x0F71DE29AB2258F1, p0, p1)
end
natives.stats.playstats_friend_activity = natives.STATS.PLAYSTATS_FRIEND_ACTIVITY

--[[
This native does absolutely nothing, just a nullsub
]]
function natives.STATS.PLAYSTATS_ODDJOB_DONE(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_ODDJOB_DONE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0x69DEA3E9DB727B4C, p0, p1, p2)
end
natives.stats.playstats_oddjob_done = natives.STATS.PLAYSTATS_ODDJOB_DONE

function natives.STATS.PLAYSTATS_PROP_CHANGE(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_PROP_CHANGE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0xBA739D6D5A05D6E7, p0, p1, p2, p3)
end
natives.stats.playstats_prop_change = natives.STATS.PLAYSTATS_PROP_CHANGE

function natives.STATS.PLAYSTATS_CLOTH_CHANGE(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3, --[[Any]] p4) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_CLOTH_CHANGE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")

	local result = native_call(0x34B973047A2268B9, p0, p1, p2, p3, p4)
end
natives.stats.playstats_cloth_change = natives.STATS.PLAYSTATS_CLOTH_CHANGE

--[[
This is a typo made by R*. It's supposed to be called PLAYSTATS_WEAPON_MOD_CHANGE.
]]
function natives.STATS.PLAYSTATS_WEAPON_MODE_CHANGE(--[[Hash]] weaponHash, --[[Hash]] componentHashTo, --[[Hash]] componentHashFrom) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_WEAPON_MODE_CHANGE' due to disabled trusted mode")

	assert(type(weaponHash) == "number", "Arg #1 (weaponHash) must be a number.")
	assert(type(componentHashTo) == "number", "Arg #2 (componentHashTo) must be a number.")
	assert(type(componentHashFrom) == "number", "Arg #3 (componentHashFrom) must be a number.")

	local result = native_call(0xE95C8A1875A02CA4, weaponHash, componentHashTo, componentHashFrom)
end
natives.stats.playstats_weapon_mode_change = natives.STATS.PLAYSTATS_WEAPON_MODE_CHANGE

function natives.STATS.PLAYSTATS_CHEAT_APPLIED(--[[const char*]] cheat) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_CHEAT_APPLIED' due to disabled trusted mode")

	assert(type(cheat) == "string", "Arg #1 (cheat) must be a string.")

	local result = native_call(0x6058665D72302D3F, cheat)
end
natives.stats.playstats_cheat_applied = natives.STATS.PLAYSTATS_CHEAT_APPLIED

function natives.STATS.PLAYSTATS_JOB_ACTIVITY_END(--[[Any*]] p0, --[[Any*]] p1, --[[Any*]] p2, --[[Any*]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_JOB_ACTIVITY_END' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")
	assert(type(p1) == "userdata", "Arg #2 (p1) must be a userdata.")
	assert(type(p2) == "userdata", "Arg #3 (p2) must be a userdata.")
	assert(type(p3) == "userdata", "Arg #4 (p3) must be a userdata.")

	local result = native_call(0xF8C54A461C3E11DC, p0, p1, p2, p3)
end
natives.stats.playstats_job_activity_end = natives.STATS.PLAYSTATS_JOB_ACTIVITY_END

function natives.STATS.PLAYSTATS_JOB_BEND(--[[Any*]] p0, --[[Any*]] p1, --[[Any*]] p2, --[[Any*]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_JOB_BEND' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")
	assert(type(p1) == "userdata", "Arg #2 (p1) must be a userdata.")
	assert(type(p2) == "userdata", "Arg #3 (p2) must be a userdata.")
	assert(type(p3) == "userdata", "Arg #4 (p3) must be a userdata.")

	local result = native_call(0xF5BB8DAC426A52C0, p0, p1, p2, p3)
end
natives.stats.playstats_job_bend = natives.STATS.PLAYSTATS_JOB_BEND

function natives.STATS.PLAYSTATS_JOB_LTS_END(--[[Any*]] p0, --[[Any*]] p1, --[[Any*]] p2, --[[Any*]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_JOB_LTS_END' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")
	assert(type(p1) == "userdata", "Arg #2 (p1) must be a userdata.")
	assert(type(p2) == "userdata", "Arg #3 (p2) must be a userdata.")
	assert(type(p3) == "userdata", "Arg #4 (p3) must be a userdata.")

	local result = native_call(0xA736CF7FB7C5BFF4, p0, p1, p2, p3)
end
natives.stats.playstats_job_lts_end = natives.STATS.PLAYSTATS_JOB_LTS_END

function natives.STATS.PLAYSTATS_JOB_LTS_ROUND_END(--[[Any*]] p0, --[[Any*]] p1, --[[Any*]] p2, --[[Any*]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_JOB_LTS_ROUND_END' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")
	assert(type(p1) == "userdata", "Arg #2 (p1) must be a userdata.")
	assert(type(p2) == "userdata", "Arg #3 (p2) must be a userdata.")
	assert(type(p3) == "userdata", "Arg #4 (p3) must be a userdata.")

	local result = native_call(0x14E0B2D1AD1044E0, p0, p1, p2, p3)
end
natives.stats.playstats_job_lts_round_end = natives.STATS.PLAYSTATS_JOB_LTS_ROUND_END

function natives.STATS.PLAYSTATS_QUICKFIX_TOOL(--[[int]] element, --[[const char*]] item) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_QUICKFIX_TOOL' due to disabled trusted mode")

	assert(type(element) == "number", "Arg #1 (element) must be a number.")
	assert(type(item) == "string", "Arg #2 (item) must be a string.")

	local result = native_call(0x90D0622866E80445, element, item)
end
natives.stats.playstats_quickfix_tool = natives.STATS.PLAYSTATS_QUICKFIX_TOOL

function natives.STATS.PLAYSTATS_IDLE_KICK(--[[int]] time) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_IDLE_KICK' due to disabled trusted mode")

	assert(type(time) == "number", "Arg #1 (time) must be a number.")

	local result = native_call(0x5DA3A8DE8CB6226F, time)
end
natives.stats.playstats_idle_kick = natives.STATS.PLAYSTATS_IDLE_KICK

function natives.STATS.PLAYSTATS_SET_JOIN_TYPE(--[[int]] joinType) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_SET_JOIN_TYPE' due to disabled trusted mode")

	assert(type(joinType) == "number", "Arg #1 (joinType) must be a number.")

	local result = native_call(0xD1032E482629049E, joinType)
end
natives.stats.playstats_set_join_type = natives.STATS.PLAYSTATS_SET_JOIN_TYPE

function natives.STATS.PLAYSTATS_HEIST_SAVE_CHEAT(--[[Hash]] hash, --[[int]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_HEIST_SAVE_CHEAT' due to disabled trusted mode")

	assert(type(hash) == "number", "Arg #1 (hash) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xF4FF020A08BC8863, hash, p1)
end
natives.stats.playstats_heist_save_cheat = natives.STATS.PLAYSTATS_HEIST_SAVE_CHEAT

function natives.STATS.PLAYSTATS_APPEND_DIRECTOR_METRIC(--[[Any*]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_APPEND_DIRECTOR_METRIC' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")

	local result = native_call(0x46326E13DA4E0546, p0)
end
natives.stats.playstats_append_director_metric = natives.STATS.PLAYSTATS_APPEND_DIRECTOR_METRIC

function natives.STATS.PLAYSTATS_AWARD_BAD_SPORT(--[[int]] id) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_AWARD_BAD_SPORT' due to disabled trusted mode")

	assert(type(id) == "number", "Arg #1 (id) must be a number.")

	local result = native_call(0x47B32F5611E6E483, id)
end
natives.stats.playstats_award_bad_sport = natives.STATS.PLAYSTATS_AWARD_BAD_SPORT

function natives.STATS.PLAYSTATS_PEGASUS_AS_PERSONAL_AIRCRAFT(--[[Hash]] modelHash) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_PEGASUS_AS_PERSONAL_AIRCRAFT' due to disabled trusted mode")

	assert(type(modelHash) == "number", "Arg #1 (modelHash) must be a number.")

	local result = native_call(0x9572BD4DD6B72122, modelHash)
end
natives.stats.playstats_pegasus_as_personal_aircraft = natives.STATS.PLAYSTATS_PEGASUS_AS_PERSONAL_AIRCRAFT

function natives.STATS.PLAYSTATS_FM_EVENT_CHALLENGES(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_FM_EVENT_CHALLENGES' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x6A60E43998228229, p0)
end
natives.stats.playstats_fm_event_challenges = natives.STATS.PLAYSTATS_FM_EVENT_CHALLENGES

function natives.STATS.PLAYSTATS_FM_EVENT_VEHICLETARGET(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_FM_EVENT_VEHICLETARGET' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xBFAFDB5FAAA5C5AB, p0)
end
natives.stats.playstats_fm_event_vehicletarget = natives.STATS.PLAYSTATS_FM_EVENT_VEHICLETARGET

function natives.STATS.PLAYSTATS_FM_EVENT_URBANWARFARE(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_FM_EVENT_URBANWARFARE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x8C9D11605E59D955, p0)
end
natives.stats.playstats_fm_event_urbanwarfare = natives.STATS.PLAYSTATS_FM_EVENT_URBANWARFARE

function natives.STATS.PLAYSTATS_FM_EVENT_CHECKPOINTCOLLECTION(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_FM_EVENT_CHECKPOINTCOLLECTION' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x3DE3AA516FB126A4, p0)
end
natives.stats.playstats_fm_event_checkpointcollection = natives.STATS.PLAYSTATS_FM_EVENT_CHECKPOINTCOLLECTION

function natives.STATS.PLAYSTATS_FM_EVENT_ATOB(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_FM_EVENT_ATOB' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xBAA2F0490E146BE8, p0)
end
natives.stats.playstats_fm_event_atob = natives.STATS.PLAYSTATS_FM_EVENT_ATOB

function natives.STATS.PLAYSTATS_FM_EVENT_PENNEDIN(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_FM_EVENT_PENNEDIN' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x1A7CE7CD3E653485, p0)
end
natives.stats.playstats_fm_event_pennedin = natives.STATS.PLAYSTATS_FM_EVENT_PENNEDIN

function natives.STATS.PLAYSTATS_FM_EVENT_PASSTHEPARCEL(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_FM_EVENT_PASSTHEPARCEL' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x419615486BBF1956, p0)
end
natives.stats.playstats_fm_event_passtheparcel = natives.STATS.PLAYSTATS_FM_EVENT_PASSTHEPARCEL

function natives.STATS.PLAYSTATS_FM_EVENT_HOTPROPERTY(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_FM_EVENT_HOTPROPERTY' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x84DFC579C2FC214C, p0)
end
natives.stats.playstats_fm_event_hotproperty = natives.STATS.PLAYSTATS_FM_EVENT_HOTPROPERTY

function natives.STATS.PLAYSTATS_FM_EVENT_DEADDROP(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_FM_EVENT_DEADDROP' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x0A9C7F36E5D7B683, p0)
end
natives.stats.playstats_fm_event_deaddrop = natives.STATS.PLAYSTATS_FM_EVENT_DEADDROP

function natives.STATS.PLAYSTATS_FM_EVENT_KINGOFTHECASTLE(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_FM_EVENT_KINGOFTHECASTLE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x164C5FF663790845, p0)
end
natives.stats.playstats_fm_event_kingofthecastle = natives.STATS.PLAYSTATS_FM_EVENT_KINGOFTHECASTLE

function natives.STATS.PLAYSTATS_FM_EVENT_CRIMINALDAMAGE(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_FM_EVENT_CRIMINALDAMAGE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xEDBF6C9B0D2C65C8, p0)
end
natives.stats.playstats_fm_event_criminaldamage = natives.STATS.PLAYSTATS_FM_EVENT_CRIMINALDAMAGE

function natives.STATS.PLAYSTATS_FM_EVENT_COMPETITIVEURBANWARFARE(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_FM_EVENT_COMPETITIVEURBANWARFARE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x6551B1F7F6CD46EA, p0)
end
natives.stats.playstats_fm_event_competitiveurbanwarfare = natives.STATS.PLAYSTATS_FM_EVENT_COMPETITIVEURBANWARFARE

function natives.STATS.PLAYSTATS_FM_EVENT_HUNTBEAST(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_FM_EVENT_HUNTBEAST' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x2CD90358F67D0AA8, p0)
end
natives.stats.playstats_fm_event_huntbeast = natives.STATS.PLAYSTATS_FM_EVENT_HUNTBEAST

function natives.STATS.PLAYSTATS_PIMENU_HIDE_OPTIONS(--[[Any*]] data) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_PIMENU_HIDE_OPTIONS' due to disabled trusted mode")

	assert(type(data) == "userdata", "Arg #1 (data) must be a userdata.")

	local result = native_call(0x203B381133817079, data)
end
natives.stats.playstats_pimenu_hide_options = natives.STATS.PLAYSTATS_PIMENU_HIDE_OPTIONS

function natives.STATS.LEADERBOARDS_GET_NUMBER_OF_COLUMNS(--[[Any]] p0, --[[Any]] p1) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.LEADERBOARDS_GET_NUMBER_OF_COLUMNS' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x117B45156D7EFF2E, p0, p1)
	return result:__tointeger()
end
natives.stats.leaderboards_get_number_of_columns = natives.STATS.LEADERBOARDS_GET_NUMBER_OF_COLUMNS

function natives.STATS.LEADERBOARDS_GET_COLUMN_ID(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.LEADERBOARDS_GET_COLUMN_ID' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0xC4B5467A1886EA7E, p0, p1, p2)
	return result:__tointeger()
end
natives.stats.leaderboards_get_column_id = natives.STATS.LEADERBOARDS_GET_COLUMN_ID

function natives.STATS.LEADERBOARDS_GET_COLUMN_TYPE(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.LEADERBOARDS_GET_COLUMN_TYPE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0xBF4FEF46DB7894D3, p0, p1, p2)
	return result:__tointeger()
end
natives.stats.leaderboards_get_column_type = natives.STATS.LEADERBOARDS_GET_COLUMN_TYPE

function natives.STATS.LEADERBOARDS_READ_CLEAR_ALL() -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.LEADERBOARDS_READ_CLEAR_ALL' due to disabled trusted mode")

	local result = native_call(0xA34CB6E6F0DF4A0B)
	return result:__tointeger()
end
natives.stats.leaderboards_read_clear_all = natives.STATS.LEADERBOARDS_READ_CLEAR_ALL

function natives.STATS.LEADERBOARDS_READ_CLEAR(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.LEADERBOARDS_READ_CLEAR' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0x7CCE5C737A665701, p0, p1, p2)
	return result:__tointeger()
end
natives.stats.leaderboards_read_clear = natives.STATS.LEADERBOARDS_READ_CLEAR

function natives.STATS.LEADERBOARDS_READ_PENDING(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.LEADERBOARDS_READ_PENDING' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0xAC392C8483342AC2, p0, p1, p2)
	return result:__tointeger() ~= 0
end
natives.stats.leaderboards_read_pending = natives.STATS.LEADERBOARDS_READ_PENDING

function natives.STATS.LEADERBOARDS_READ_ANY_PENDING() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.LEADERBOARDS_READ_ANY_PENDING' due to disabled trusted mode")

	local result = native_call(0xA31FD15197B192BD)
	return result:__tointeger() ~= 0
end
natives.stats.leaderboards_read_any_pending = natives.STATS.LEADERBOARDS_READ_ANY_PENDING

function natives.STATS.LEADERBOARDS_READ_SUCCESSFUL(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.LEADERBOARDS_READ_SUCCESSFUL' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0x2FB19228983E832C, p0, p1, p2)
	return result:__tointeger() ~= 0
end
natives.stats.leaderboards_read_successful = natives.STATS.LEADERBOARDS_READ_SUCCESSFUL

function natives.STATS.LEADERBOARDS2_READ_FRIENDS_BY_ROW(--[[Any*]] p0, --[[Any*]] p1, --[[Any]] p2, --[[BOOL]] p3, --[[Any]] p4, --[[Any]] p5) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.LEADERBOARDS2_READ_FRIENDS_BY_ROW' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")
	assert(type(p1) == "userdata", "Arg #2 (p1) must be a userdata.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "boolean", "Arg #4 (p3) must be a boolean.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")

	local result = native_call(0x918B101666F9CB83, p0, p1, p2, p3, p4, p5)
	return result:__tointeger() ~= 0
end
natives.stats.leaderboards2_read_friends_by_row = natives.STATS.LEADERBOARDS2_READ_FRIENDS_BY_ROW

function natives.STATS.LEADERBOARDS2_READ_BY_HANDLE(--[[Any*]] p0, --[[Any*]] p1) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.LEADERBOARDS2_READ_BY_HANDLE' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")
	assert(type(p1) == "userdata", "Arg #2 (p1) must be a userdata.")

	local result = native_call(0xC30713A383BFBF0E, p0, p1)
	return result:__tointeger() ~= 0
end
natives.stats.leaderboards2_read_by_handle = natives.STATS.LEADERBOARDS2_READ_BY_HANDLE

function natives.STATS.LEADERBOARDS2_READ_BY_ROW(--[[Any*]] p0, --[[Any*]] p1, --[[Any]] p2, --[[Any*]] p3, --[[Any]] p4, --[[Any*]] p5, --[[Any]] p6) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.LEADERBOARDS2_READ_BY_ROW' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")
	assert(type(p1) == "userdata", "Arg #2 (p1) must be a userdata.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "userdata", "Arg #4 (p3) must be a userdata.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "userdata", "Arg #6 (p5) must be a userdata.")
	assert(type(p6) == "number", "Arg #7 (p6) must be a number.")

	local result = native_call(0xA9CDB1E3F0A49883, p0, p1, p2, p3, p4, p5, p6)
	return result:__tointeger() ~= 0
end
natives.stats.leaderboards2_read_by_row = natives.STATS.LEADERBOARDS2_READ_BY_ROW

function natives.STATS.LEADERBOARDS2_READ_BY_RANK(--[[Any*]] p0, --[[Any]] p1, --[[Any]] p2) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.LEADERBOARDS2_READ_BY_RANK' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0xBA2C7DB0C129449A, p0, p1, p2)
	return result:__tointeger() ~= 0
end
natives.stats.leaderboards2_read_by_rank = natives.STATS.LEADERBOARDS2_READ_BY_RANK

function natives.STATS.LEADERBOARDS2_READ_BY_RADIUS(--[[Any*]] p0, --[[Any]] p1, --[[Any*]] p2) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.LEADERBOARDS2_READ_BY_RADIUS' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "userdata", "Arg #3 (p2) must be a userdata.")

	local result = native_call(0x5CE587FB5A42C8C4, p0, p1, p2)
	return result:__tointeger() ~= 0
end
natives.stats.leaderboards2_read_by_radius = natives.STATS.LEADERBOARDS2_READ_BY_RADIUS

function natives.STATS.LEADERBOARDS2_READ_BY_SCORE_INT(--[[Any*]] p0, --[[Any]] p1, --[[Any]] p2) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.LEADERBOARDS2_READ_BY_SCORE_INT' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0x7EEC7E4F6984A16A, p0, p1, p2)
	return result:__tointeger() ~= 0
end
natives.stats.leaderboards2_read_by_score_int = natives.STATS.LEADERBOARDS2_READ_BY_SCORE_INT

function natives.STATS.LEADERBOARDS2_READ_BY_SCORE_FLOAT(--[[Any*]] p0, --[[float]] p1, --[[Any]] p2) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.LEADERBOARDS2_READ_BY_SCORE_FLOAT' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0xE662C8B759D08F3C, p0, p1, p2)
	return result:__tointeger() ~= 0
end
natives.stats.leaderboards2_read_by_score_float = natives.STATS.LEADERBOARDS2_READ_BY_SCORE_FLOAT

function natives.STATS.LEADERBOARDS2_READ_RANK_PREDICTION(--[[Any*]] p0, --[[Any*]] p1, --[[Any*]] p2) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.LEADERBOARDS2_READ_RANK_PREDICTION' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")
	assert(type(p1) == "userdata", "Arg #2 (p1) must be a userdata.")
	assert(type(p2) == "userdata", "Arg #3 (p2) must be a userdata.")

	local result = native_call(0xC38DC1E90D22547C, p0, p1, p2)
	return result:__tointeger() ~= 0
end
natives.stats.leaderboards2_read_rank_prediction = natives.STATS.LEADERBOARDS2_READ_RANK_PREDICTION

function natives.STATS.LEADERBOARDS2_READ_BY_PLAFORM(--[[Any*]] p0, --[[const char*]] gamerHandleCsv, --[[const char*]] platformName) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.LEADERBOARDS2_READ_BY_PLAFORM' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")
	assert(type(gamerHandleCsv) == "string", "Arg #2 (gamerHandleCsv) must be a string.")
	assert(type(platformName) == "string", "Arg #3 (platformName) must be a string.")

	local result = native_call(0xF1AE5DCDBFCA2721, p0, gamerHandleCsv, platformName)
	return result:__tointeger() ~= 0
end
natives.stats.leaderboards2_read_by_plaform = natives.STATS.LEADERBOARDS2_READ_BY_PLAFORM

function natives.STATS.LEADERBOARDS2_READ_GET_ROW_DATA_START(--[[Any*]] p0) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.LEADERBOARDS2_READ_GET_ROW_DATA_START' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")

	local result = native_call(0xA0F93D5465B3094D, p0)
	return result:__tointeger() ~= 0
end
natives.stats.leaderboards2_read_get_row_data_start = natives.STATS.LEADERBOARDS2_READ_GET_ROW_DATA_START

function natives.STATS.LEADERBOARDS2_READ_GET_ROW_DATA_END() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.LEADERBOARDS2_READ_GET_ROW_DATA_END' due to disabled trusted mode")

	local result = native_call(0x71B008056E5692D6)
end
natives.stats.leaderboards2_read_get_row_data_end = natives.STATS.LEADERBOARDS2_READ_GET_ROW_DATA_END

function natives.STATS.LEADERBOARDS2_READ_GET_ROW_DATA_INFO(--[[Any]] p0, --[[Any*]] p1) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.LEADERBOARDS2_READ_GET_ROW_DATA_INFO' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "userdata", "Arg #2 (p1) must be a userdata.")

	local result = native_call(0x34770B9CE0E03B91, p0, p1)
	return result:__tointeger() ~= 0
end
natives.stats.leaderboards2_read_get_row_data_info = natives.STATS.LEADERBOARDS2_READ_GET_ROW_DATA_INFO

function natives.STATS.LEADERBOARDS2_READ_GET_ROW_DATA_INT(--[[Any]] p0, --[[Any]] p1) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.LEADERBOARDS2_READ_GET_ROW_DATA_INT' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x88578F6EC36B4A3A, p0, p1)
	return result:__tointeger()
end
natives.stats.leaderboards2_read_get_row_data_int = natives.STATS.LEADERBOARDS2_READ_GET_ROW_DATA_INT

function natives.STATS.LEADERBOARDS2_READ_GET_ROW_DATA_FLOAT(--[[Any]] p0, --[[Any]] p1) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.LEADERBOARDS2_READ_GET_ROW_DATA_FLOAT' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x38491439B6BA7F7D, p0, p1)
	return result:__tonumber()
end
natives.stats.leaderboards2_read_get_row_data_float = natives.STATS.LEADERBOARDS2_READ_GET_ROW_DATA_FLOAT

function natives.STATS.LEADERBOARDS2_WRITE_DATA(--[[Any*]] p0) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.LEADERBOARDS2_WRITE_DATA' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")

	local result = native_call(0xAE2206545888AE49, p0)
	return result:__tointeger() ~= 0
end
natives.stats.leaderboards2_write_data = natives.STATS.LEADERBOARDS2_WRITE_DATA

function natives.STATS.LEADERBOARDS_WRITE_ADD_COLUMN(--[[Any]] p0, --[[Any]] p1, --[[float]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.LEADERBOARDS_WRITE_ADD_COLUMN' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0x0BCA1D2C47B0D269, p0, p1, p2)
end
natives.stats.leaderboards_write_add_column = natives.STATS.LEADERBOARDS_WRITE_ADD_COLUMN

function natives.STATS.LEADERBOARDS_WRITE_ADD_COLUMN_LONG(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.LEADERBOARDS_WRITE_ADD_COLUMN_LONG' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0x2E65248609523599, p0, p1, p2)
end
natives.stats.leaderboards_write_add_column_long = natives.STATS.LEADERBOARDS_WRITE_ADD_COLUMN_LONG

function natives.STATS.LEADERBOARDS_CACHE_DATA_ROW(--[[Any*]] p0) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.LEADERBOARDS_CACHE_DATA_ROW' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")

	local result = native_call(0xB9BB18E2C40142ED, p0)
	return result:__tointeger() ~= 0
end
natives.stats.leaderboards_cache_data_row = natives.STATS.LEADERBOARDS_CACHE_DATA_ROW

function natives.STATS.LEADERBOARDS_CLEAR_CACHE_DATA() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.LEADERBOARDS_CLEAR_CACHE_DATA' due to disabled trusted mode")

	local result = native_call(0xD4B02A6B476E1FDC)
end
natives.stats.leaderboards_clear_cache_data = natives.STATS.LEADERBOARDS_CLEAR_CACHE_DATA

function natives.STATS.LEADERBOARDS_CLEAR_CACHE_DATA_ID(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.LEADERBOARDS_CLEAR_CACHE_DATA_ID' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x8EC74CEB042E7CFF, p0)
end
natives.stats.leaderboards_clear_cache_data_id = natives.STATS.LEADERBOARDS_CLEAR_CACHE_DATA_ID

function natives.STATS.LEADERBOARDS_GET_CACHE_EXISTS(--[[Any]] p0) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.LEADERBOARDS_GET_CACHE_EXISTS' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x9C51349BE6CDFE2C, p0)
	return result:__tointeger() ~= 0
end
natives.stats.leaderboards_get_cache_exists = natives.STATS.LEADERBOARDS_GET_CACHE_EXISTS

function natives.STATS.LEADERBOARDS_GET_CACHE_TIME(--[[Any]] p0) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.LEADERBOARDS_GET_CACHE_TIME' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xF04C1C27DA35F6C8, p0)
	return result:__tointeger()
end
natives.stats.leaderboards_get_cache_time = natives.STATS.LEADERBOARDS_GET_CACHE_TIME

function natives.STATS.LEADERBOARDS_GET_CACHE_NUMBER_OF_ROWS(--[[Any]] p0) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.LEADERBOARDS_GET_CACHE_NUMBER_OF_ROWS' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x58A651CD201D89AD, p0)
	return result:__tointeger()
end
natives.stats.leaderboards_get_cache_number_of_rows = natives.STATS.LEADERBOARDS_GET_CACHE_NUMBER_OF_ROWS

function natives.STATS.LEADERBOARDS_GET_CACHE_DATA_ROW(--[[Any]] p0, --[[Any]] p1, --[[Any*]] p2) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.LEADERBOARDS_GET_CACHE_DATA_ROW' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "userdata", "Arg #3 (p2) must be a userdata.")

	local result = native_call(0x9120E8DBA3D69273, p0, p1, p2)
	return result:__tointeger() ~= 0
end
natives.stats.leaderboards_get_cache_data_row = natives.STATS.LEADERBOARDS_GET_CACHE_DATA_ROW

function natives.STATS.PRESENCE_EVENT_UPDATESTAT_INT(--[[Hash]] statHash, --[[int]] value, --[[int]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PRESENCE_EVENT_UPDATESTAT_INT' due to disabled trusted mode")

	assert(type(statHash) == "number", "Arg #1 (statHash) must be a number.")
	assert(type(value) == "number", "Arg #2 (value) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0x11FF1C80276097ED, statHash, value, p2)
end
natives.stats.presence_event_updatestat_int = natives.STATS.PRESENCE_EVENT_UPDATESTAT_INT

function natives.STATS.PRESENCE_EVENT_UPDATESTAT_FLOAT(--[[Hash]] statHash, --[[float]] value, --[[int]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PRESENCE_EVENT_UPDATESTAT_FLOAT' due to disabled trusted mode")

	assert(type(statHash) == "number", "Arg #1 (statHash) must be a number.")
	assert(type(value) == "number", "Arg #2 (value) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0x30A6614C1F7799B8, statHash, value, p2)
end
natives.stats.presence_event_updatestat_float = natives.STATS.PRESENCE_EVENT_UPDATESTAT_FLOAT

function natives.STATS.PRESENCE_EVENT_UPDATESTAT_INT_WITH_STRING(--[[Hash]] statHash, --[[int]] value, --[[int]] p2, --[[const char*]] string) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PRESENCE_EVENT_UPDATESTAT_INT_WITH_STRING' due to disabled trusted mode")

	assert(type(statHash) == "number", "Arg #1 (statHash) must be a number.")
	assert(type(value) == "number", "Arg #2 (value) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(string) == "string", "Arg #4 (string) must be a string.")

	local result = native_call(0x6483C25849031C4F, statHash, value, p2, string)
end
natives.stats.presence_event_updatestat_int_with_string = natives.STATS.PRESENCE_EVENT_UPDATESTAT_INT_WITH_STRING

--[[
example from completionpercentage_controller.ysc.c4

if (STATS::_5EAD2BF6484852E4()) {
            MISC::SET_BIT(g_17b95._f20df._ff10, 15);
            STATS::_11FF1C80276097ED(0xe9ec4dd1, 200, 0);
        }
]]
function natives.STATS.GET_PLAYER_HAS_DRIVEN_ALL_VEHICLES() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.GET_PLAYER_HAS_DRIVEN_ALL_VEHICLES' due to disabled trusted mode")

	local result = native_call(0x5EAD2BF6484852E4)
	return result:__tointeger() ~= 0
end
natives.stats.get_player_has_driven_all_vehicles = natives.STATS.GET_PLAYER_HAS_DRIVEN_ALL_VEHICLES

function natives.STATS.SET_HAS_POSTED_ALL_VEHICLES_DRIVEN() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.SET_HAS_POSTED_ALL_VEHICLES_DRIVEN' due to disabled trusted mode")

	local result = native_call(0xC141B8917E0017EC)
end
natives.stats.set_has_posted_all_vehicles_driven = natives.STATS.SET_HAS_POSTED_ALL_VEHICLES_DRIVEN

function natives.STATS.SET_PROFILE_SETTING_PROLOGUE_COMPLETE() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.SET_PROFILE_SETTING_PROLOGUE_COMPLETE' due to disabled trusted mode")

	local result = native_call(0xB475F27C6A994D65)
end
natives.stats.set_profile_setting_prologue_complete = natives.STATS.SET_PROFILE_SETTING_PROLOGUE_COMPLETE

--[[
Sets profile setting 939
]]
function natives.STATS.SET_PROFILE_SETTING_SP_CHOP_MISSION_COMPLETE() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.SET_PROFILE_SETTING_SP_CHOP_MISSION_COMPLETE' due to disabled trusted mode")

	local result = native_call(0xC67E2DA1CBE759E2)
end
natives.stats.set_profile_setting_sp_chop_mission_complete = natives.STATS.SET_PROFILE_SETTING_SP_CHOP_MISSION_COMPLETE

--[[
Sets profile setting 933
]]
function natives.STATS.SET_PROFILE_SETTING_CREATOR_RACES_DONE(--[[int]] value) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.SET_PROFILE_SETTING_CREATOR_RACES_DONE' due to disabled trusted mode")

	assert(type(value) == "number", "Arg #1 (value) must be a number.")

	local result = native_call(0xF1A1803D3476F215, value)
end
natives.stats.set_profile_setting_creator_races_done = natives.STATS.SET_PROFILE_SETTING_CREATOR_RACES_DONE

--[[
Sets profile setting 934
]]
function natives.STATS.SET_PROFILE_SETTING_CREATOR_DM_DONE(--[[int]] value) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.SET_PROFILE_SETTING_CREATOR_DM_DONE' due to disabled trusted mode")

	assert(type(value) == "number", "Arg #1 (value) must be a number.")

	local result = native_call(0x38BAAA5DD4C9D19F, value)
end
natives.stats.set_profile_setting_creator_dm_done = natives.STATS.SET_PROFILE_SETTING_CREATOR_DM_DONE

--[[
Sets profile setting 935
]]
function natives.STATS.SET_PROFILE_SETTING_CREATOR_CTF_DONE(--[[int]] value) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.SET_PROFILE_SETTING_CREATOR_CTF_DONE' due to disabled trusted mode")

	assert(type(value) == "number", "Arg #1 (value) must be a number.")

	local result = native_call(0x55384438FC55AD8E, value)
end
natives.stats.set_profile_setting_creator_ctf_done = natives.STATS.SET_PROFILE_SETTING_CREATOR_CTF_DONE

function natives.STATS.SET_JOB_ACTIVITY_ID_STARTED(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.SET_JOB_ACTIVITY_ID_STARTED' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x723C1CE13FBFDB67, p0, p1)
end
natives.stats.set_job_activity_id_started = natives.STATS.SET_JOB_ACTIVITY_ID_STARTED

function natives.STATS.SET_FREEMODE_PROLOGUE_DONE(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.SET_FREEMODE_PROLOGUE_DONE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x0D01D20616FC73FB, p0, p1)
end
natives.stats.set_freemode_prologue_done = natives.STATS.SET_FREEMODE_PROLOGUE_DONE

--[[
Sets profile setting 940 and 941
]]
function natives.STATS.SET_FREEMODE_STRAND_PROGRESSION_STATUS(--[[int]] profileSetting, --[[int]] settingValue) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.SET_FREEMODE_STRAND_PROGRESSION_STATUS' due to disabled trusted mode")

	assert(type(profileSetting) == "number", "Arg #1 (profileSetting) must be a number.")
	assert(type(settingValue) == "number", "Arg #2 (settingValue) must be a number.")

	local result = native_call(0x79D310A861697CC9, profileSetting, settingValue)
end
natives.stats.set_freemode_strand_progression_status = natives.STATS.SET_FREEMODE_STRAND_PROGRESSION_STATUS

function natives.STATS.STAT_NETWORK_INCREMENT_ON_SUICIDE(--[[Any]] p0, --[[float]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.STAT_NETWORK_INCREMENT_ON_SUICIDE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x428EAF89E24F6C36, p0, p1)
end
natives.stats.stat_network_increment_on_suicide = natives.STATS.STAT_NETWORK_INCREMENT_ON_SUICIDE

function natives.STATS.STAT_SET_CHEAT_IS_ACTIVE() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.STAT_SET_CHEAT_IS_ACTIVE' due to disabled trusted mode")

	local result = native_call(0x047CBED6F6F8B63C)
end
natives.stats.stat_set_cheat_is_active = natives.STATS.STAT_SET_CHEAT_IS_ACTIVE

function natives.STATS.LEADERBOARDS2_WRITE_DATA_FOR_EVENT_TYPE(--[[Any*]] p0, --[[Any*]] p1) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.LEADERBOARDS2_WRITE_DATA_FOR_EVENT_TYPE' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")
	assert(type(p1) == "userdata", "Arg #2 (p1) must be a userdata.")

	local result = native_call(0xC980E62E33DF1D5C, p0, p1)
	return result:__tointeger() ~= 0
end
natives.stats.leaderboards2_write_data_for_event_type = natives.STATS.LEADERBOARDS2_WRITE_DATA_FOR_EVENT_TYPE

function natives.STATS.FORCE_CLOUD_MP_STATS_DOWNLOAD_AND_OVERWRITE_LOCAL_SAVE() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.FORCE_CLOUD_MP_STATS_DOWNLOAD_AND_OVERWRITE_LOCAL_SAVE' due to disabled trusted mode")

	local result = native_call(0x6F361B8889A792A3)
end
natives.stats.force_cloud_mp_stats_download_and_overwrite_local_save = natives.STATS.FORCE_CLOUD_MP_STATS_DOWNLOAD_AND_OVERWRITE_LOCAL_SAVE

function natives.STATS.STAT_MIGRATE_CLEAR_FOR_RESTART() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.STAT_MIGRATE_CLEAR_FOR_RESTART' due to disabled trusted mode")

	local result = native_call(0xC847B43F369AC0B5)
end
natives.stats.stat_migrate_clear_for_restart = natives.STATS.STAT_MIGRATE_CLEAR_FOR_RESTART

--[[
platformName must be one of the following: ps3, xbox360, ps4, xboxone
]]
function natives.STATS.STAT_MIGRATE_SAVEGAME_START(--[[const char*]] platformName) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.STAT_MIGRATE_SAVEGAME_START' due to disabled trusted mode")

	assert(type(platformName) == "string", "Arg #1 (platformName) must be a string.")

	local result = native_call(0xA5C80D8E768A9E66, platformName)
	return result:__tointeger() ~= 0
end
natives.stats.stat_migrate_savegame_start = natives.STATS.STAT_MIGRATE_SAVEGAME_START

function natives.STATS.STAT_MIGRATE_SAVEGAME_GET_STATUS() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.STAT_MIGRATE_SAVEGAME_GET_STATUS' due to disabled trusted mode")

	local result = native_call(0x9A62EC95AE10E011)
	return result:__tointeger()
end
natives.stats.stat_migrate_savegame_get_status = natives.STATS.STAT_MIGRATE_SAVEGAME_GET_STATUS

function natives.STATS.STAT_MIGRATE_CHECK_ALREADY_DONE() -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.STAT_MIGRATE_CHECK_ALREADY_DONE' due to disabled trusted mode")

	local result = native_call(0x4C89FE2BDEB3F169)
	return result:__tointeger()
end
natives.stats.stat_migrate_check_already_done = natives.STATS.STAT_MIGRATE_CHECK_ALREADY_DONE

function natives.STATS.STAT_MIGRATE_CHECK_START() -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.STAT_MIGRATE_CHECK_START' due to disabled trusted mode")

	local result = native_call(0xC6E0E2616A7576BB)
	return result:__tointeger()
end
natives.stats.stat_migrate_check_start = natives.STATS.STAT_MIGRATE_CHECK_START

function natives.STATS.STAT_MIGRATE_CHECK_GET_IS_PLATFORM_AVAILABLE(--[[Any]] p0) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.STAT_MIGRATE_CHECK_GET_IS_PLATFORM_AVAILABLE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x5BD5F255321C4AAF, p0)
	return result:__tointeger()
end
natives.stats.stat_migrate_check_get_is_platform_available = natives.STATS.STAT_MIGRATE_CHECK_GET_IS_PLATFORM_AVAILABLE

function natives.STATS.STAT_MIGRATE_CHECK_GET_PLATFORM_STATUS(--[[Any]] p0, --[[Any*]] p1) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.STAT_MIGRATE_CHECK_GET_PLATFORM_STATUS' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "userdata", "Arg #2 (p1) must be a userdata.")

	local result = native_call(0xDEAAF77EB3687E97, p0, p1)
	return result:__tointeger()
end
natives.stats.stat_migrate_check_get_platform_status = natives.STATS.STAT_MIGRATE_CHECK_GET_PLATFORM_STATUS

function natives.STATS.STAT_GET_SAVE_MIGRATION_STATUS(--[[Any*]] data) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.STAT_GET_SAVE_MIGRATION_STATUS' due to disabled trusted mode")

	assert(type(data) == "userdata", "Arg #1 (data) must be a userdata.")

	local result = native_call(0x886913BBEACA68C1, data)
	return result:__tointeger()
end
natives.stats.stat_get_save_migration_status = natives.STATS.STAT_GET_SAVE_MIGRATION_STATUS

function natives.STATS.STAT_SAVE_MIGRATION_CANCEL_PENDING_OPERATION() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.STAT_SAVE_MIGRATION_CANCEL_PENDING_OPERATION' due to disabled trusted mode")

	local result = native_call(0x4FEF53183C3C6414)
	return result:__tointeger() ~= 0
end
natives.stats.stat_save_migration_cancel_pending_operation = natives.STATS.STAT_SAVE_MIGRATION_CANCEL_PENDING_OPERATION

function natives.STATS.STAT_GET_CANCEL_SAVE_MIGRATION_STATUS() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.STAT_GET_CANCEL_SAVE_MIGRATION_STATUS' due to disabled trusted mode")

	local result = native_call(0x567384DFA67029E6)
	return result:__tointeger()
end
natives.stats.stat_get_cancel_save_migration_status = natives.STATS.STAT_GET_CANCEL_SAVE_MIGRATION_STATUS

function natives.STATS.STAT_SAVE_MIGRATION_CONSUME_CONTENT(--[[Hash]] contentId, --[[const char*]] srcPlatform, --[[const char*]] srcGamerHandle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.STAT_SAVE_MIGRATION_CONSUME_CONTENT' due to disabled trusted mode")

	assert(type(contentId) == "number", "Arg #1 (contentId) must be a number.")
	assert(type(srcPlatform) == "string", "Arg #2 (srcPlatform) must be a string.")
	assert(type(srcGamerHandle) == "string", "Arg #3 (srcGamerHandle) must be a string.")

	local result = native_call(0x3270F67EED31FBC1, contentId, srcPlatform, srcGamerHandle)
	return result:__tointeger() ~= 0
end
natives.stats.stat_save_migration_consume_content = natives.STATS.STAT_SAVE_MIGRATION_CONSUME_CONTENT

function natives.STATS.STAT_GET_SAVE_MIGRATION_CONSUME_CONTENT_STATUS(--[[int*]] p0) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.STAT_GET_SAVE_MIGRATION_CONSUME_CONTENT_STATUS' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")

	local result = native_call(0xCE5AA445ABA8DEE0, p0)
	return result:__tointeger()
end
natives.stats.stat_get_save_migration_consume_content_status = natives.STATS.STAT_GET_SAVE_MIGRATION_CONSUME_CONTENT_STATUS

function natives.STATS.STAT_ENABLE_STATS_TRACKING() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.STAT_ENABLE_STATS_TRACKING' due to disabled trusted mode")

	local result = native_call(0x98E2BC1CA26287C3)
end
natives.stats.stat_enable_stats_tracking = natives.STATS.STAT_ENABLE_STATS_TRACKING

--[[
Prevents updates to CStatsMgr (e.g., STAT_SET_* natives)
]]
function natives.STATS.STAT_DISABLE_STATS_TRACKING() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.STAT_DISABLE_STATS_TRACKING' due to disabled trusted mode")

	local result = native_call(0x629526ABA383BCAA)
end
natives.stats.stat_disable_stats_tracking = natives.STATS.STAT_DISABLE_STATS_TRACKING

function natives.STATS.STAT_IS_STATS_TRACKING_ENABLED() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.STAT_IS_STATS_TRACKING_ENABLED' due to disabled trusted mode")

	local result = native_call(0xBE3DB208333D9844)
	return result:__tointeger() ~= 0
end
natives.stats.stat_is_stats_tracking_enabled = natives.STATS.STAT_IS_STATS_TRACKING_ENABLED

--[[
enum StatTrackingType
{
	LongestWheelie = 1,
	LongestStoppie = 2,
	NoCrashes = 3,
	HighestSpeed = 4,
	_MostFlips = 5,
	_LongestSpin = 6,
	_HighestJumpReached = 7,
	LongestJump = 8,
	_NearMissesNoCrash = 9,
	LongestFallSurvived = 10,
	LowestParachute = 11,
	ReverseDriving = 12,
	LongestFreefall = 13,
	VehiclesStolen = 14,
	_SomeCFireEventCount = 15,
	_Unk16 = 16,
	_LowFlyingTime = 17,
	LowFlying = 18,
	_InvertedFlyingTime = 19,
	InvertedFlying = 20,
	_PlaneSpinCount = 21,
	MeleeKills = 22, // Players
	_LongestSniperKill = 23,
	SniperSkills = 24, // Players
	DrivebyKills = 25, // Players
	HeadshotKills = 26, // Players
	LongestBail = 27,
	_TotalRammedByCar = 28,
	NearMissesPrecise = 29,
	_FreefallTime = 30,
	Unk31 = 31,
}

enum StatTrackingValueType
{
	Total,
	Max,
	Min
}
]]
function natives.STATS.STAT_START_RECORD_STAT(--[[int]] statType, --[[int]] valueType) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.STAT_START_RECORD_STAT' due to disabled trusted mode")

	assert(type(statType) == "number", "Arg #1 (statType) must be a number.")
	assert(type(valueType) == "number", "Arg #2 (valueType) must be a number.")

	local result = native_call(0x33D72899E24C3365, statType, valueType)
	return result:__tointeger()
end
natives.stats.stat_start_record_stat = natives.STATS.STAT_START_RECORD_STAT

function natives.STATS.STAT_STOP_RECORD_STAT() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.STAT_STOP_RECORD_STAT' due to disabled trusted mode")

	local result = native_call(0xA761D4AC6115623D)
	return result:__tointeger() ~= 0
end
natives.stats.stat_stop_record_stat = natives.STATS.STAT_STOP_RECORD_STAT

function natives.STATS.STAT_GET_RECORDED_VALUE(--[[float*]] value) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.STAT_GET_RECORDED_VALUE' due to disabled trusted mode")

	assert(type(value) == "userdata", "Arg #1 (value) must be a userdata.")

	local result = native_call(0xF11F01D98113536A, value)
	return result:__tointeger() ~= 0
end
natives.stats.stat_get_recorded_value = natives.STATS.STAT_GET_RECORDED_VALUE

function natives.STATS.STAT_IS_RECORDING_STAT() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.STAT_IS_RECORDING_STAT' due to disabled trusted mode")

	local result = native_call(0x8B9CDBD6C566C38C)
	return result:__tointeger() ~= 0
end
natives.stats.stat_is_recording_stat = natives.STATS.STAT_IS_RECORDING_STAT

--[[
Perform the most near misses with other vehicles in a land vehicle without crashing
]]
function natives.STATS.STAT_GET_CURRENT_NEAR_MISS_NOCRASH_PRECISE() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.STAT_GET_CURRENT_NEAR_MISS_NOCRASH_PRECISE' due to disabled trusted mode")

	local result = native_call(0xE8853FBCE7D8D0D6)
	return result:__tointeger()
end
natives.stats.stat_get_current_near_miss_nocrash_precise = natives.STATS.STAT_GET_CURRENT_NEAR_MISS_NOCRASH_PRECISE

--[[
Perform the longest wheelie on a motorcycle
]]
function natives.STATS.STAT_GET_CURRENT_REAR_WHEEL_DISTANCE() -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.STAT_GET_CURRENT_REAR_WHEEL_DISTANCE' due to disabled trusted mode")

	local result = native_call(0xA943FD1722E11EFD)
	return result:__tonumber()
end
natives.stats.stat_get_current_rear_wheel_distance = natives.STATS.STAT_GET_CURRENT_REAR_WHEEL_DISTANCE

--[[
Perform the longest stoppie on a motorcycle
]]
function natives.STATS.STAT_GET_CURRENT_FRONT_WHEEL_DISTANCE() -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.STAT_GET_CURRENT_FRONT_WHEEL_DISTANCE' due to disabled trusted mode")

	local result = native_call(0x84A810B375E69C0E)
	return result:__tonumber()
end
natives.stats.stat_get_current_front_wheel_distance = natives.STATS.STAT_GET_CURRENT_FRONT_WHEEL_DISTANCE

--[[
Perform the longest jump in a land vehicle
]]
function natives.STATS.STAT_GET_CURRENT_JUMP_DISTANCE() -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.STAT_GET_CURRENT_JUMP_DISTANCE' due to disabled trusted mode")

	local result = native_call(0x9EC8858184CD253A)
	return result:__tonumber()
end
natives.stats.stat_get_current_jump_distance = natives.STATS.STAT_GET_CURRENT_JUMP_DISTANCE

--[[
Drive the furthest distance in a land vehicle without crashing
]]
function natives.STATS.STAT_GET_CURRENT_DRIVE_NOCRASH_DISTANCE() -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.STAT_GET_CURRENT_DRIVE_NOCRASH_DISTANCE' due to disabled trusted mode")

	local result = native_call(0xBA9749CC94C1FD85)
	return result:__tonumber()
end
natives.stats.stat_get_current_drive_nocrash_distance = natives.STATS.STAT_GET_CURRENT_DRIVE_NOCRASH_DISTANCE

--[[
Achieve the highest speed in a land vehicle
]]
function natives.STATS.STAT_GET_CURRENT_SPEED() -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.STAT_GET_CURRENT_SPEED' due to disabled trusted mode")

	local result = native_call(0x55A8BECAF28A4EB7)
	return result:__tonumber()
end
natives.stats.stat_get_current_speed = natives.STATS.STAT_GET_CURRENT_SPEED

--[[
Reverse the longest distance without crashing
]]
function natives.STATS.STAT_GET_CURRENT_DRIVING_REVERSE_DISTANCE() -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.STAT_GET_CURRENT_DRIVING_REVERSE_DISTANCE' due to disabled trusted mode")

	local result = native_call(0x32CAC93C9DE73D32)
	return result:__tonumber()
end
natives.stats.stat_get_current_driving_reverse_distance = natives.STATS.STAT_GET_CURRENT_DRIVING_REVERSE_DISTANCE

--[[
Fall the longest distance with a parachute before opening it
]]
function natives.STATS.STAT_GET_CURRENT_SKYDIVING_DISTANCE() -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.STAT_GET_CURRENT_SKYDIVING_DISTANCE' due to disabled trusted mode")

	local result = native_call(0xAFF47709F1D5DCCE)
	return result:__tonumber()
end
natives.stats.stat_get_current_skydiving_distance = natives.STATS.STAT_GET_CURRENT_SKYDIVING_DISTANCE

--[[
Fly low to the ground for the longest distance
]]
function natives.STATS.STAT_GET_CHALLENGE_FLYING_DIST() -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.STAT_GET_CHALLENGE_FLYING_DIST' due to disabled trusted mode")

	local result = native_call(0x6E0A5253375C4584)
	return result:__tonumber()
end
natives.stats.stat_get_challenge_flying_dist = natives.STATS.STAT_GET_CHALLENGE_FLYING_DIST

function natives.STATS.STAT_GET_FLYING_ALTITUDE(--[[float*]] p0) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.STAT_GET_FLYING_ALTITUDE' due to disabled trusted mode")

	assert(type(p0) == "userdata", "Arg #1 (p0) must be a userdata.")

	local result = native_call(0x1A8EA222F9C67DBB, p0)
	return result:__tointeger() ~= 0
end
natives.stats.stat_get_flying_altitude = natives.STATS.STAT_GET_FLYING_ALTITUDE

--[[
Or non-flyable area
]]
function natives.STATS.STAT_IS_PLAYER_VEHICLE_ABOVE_OCEAN() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.STAT_IS_PLAYER_VEHICLE_ABOVE_OCEAN' due to disabled trusted mode")

	local result = native_call(0xF9F2922717B819EC)
	return result:__tointeger() ~= 0
end
natives.stats.stat_is_player_vehicle_above_ocean = natives.STATS.STAT_IS_PLAYER_VEHICLE_ABOVE_OCEAN

--[[
Travel the furthest distance when bailing from a vehicle
]]
function natives.STATS.STAT_GET_VEHICLE_BAIL_DISTANCE() -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.STAT_GET_VEHICLE_BAIL_DISTANCE' due to disabled trusted mode")

	local result = native_call(0x0B8B7F74BF061C6D)
	return result:__tonumber()
end
natives.stats.stat_get_vehicle_bail_distance = natives.STATS.STAT_GET_VEHICLE_BAIL_DISTANCE

--[[
This function is hard-coded to always return 1.
]]
function natives.STATS.STAT_ROLLBACK_SAVE_MIGRATION() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.STAT_ROLLBACK_SAVE_MIGRATION' due to disabled trusted mode")

	local result = native_call(0xB3DA2606774A8E2D)
	return result:__tointeger() ~= 0
end
natives.stats.stat_rollback_save_migration = natives.STATS.STAT_ROLLBACK_SAVE_MIGRATION

--[[
Sets profile setting 866
]]
function natives.STATS.SET_HAS_SPECIALEDITION_CONTENT(--[[int]] value) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.SET_HAS_SPECIALEDITION_CONTENT' due to disabled trusted mode")

	assert(type(value) == "number", "Arg #1 (value) must be a number.")

	local result = native_call(0xDAC073C7901F9E15, value)
end
natives.stats.set_has_specialedition_content = natives.STATS.SET_HAS_SPECIALEDITION_CONTENT

--[[
Sets profile setting 501
]]
function natives.STATS.SET_SAVE_MIGRATION_TRANSACTION_ID_WARNING(--[[int]] transactionId) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.SET_SAVE_MIGRATION_TRANSACTION_ID_WARNING' due to disabled trusted mode")

	assert(type(transactionId) == "number", "Arg #1 (transactionId) must be a number.")

	local result = native_call(0xF6792800AC95350D, transactionId)
end
natives.stats.set_save_migration_transaction_id_warning = natives.STATS.SET_SAVE_MIGRATION_TRANSACTION_ID_WARNING

function natives.STATS.GET_BOSS_GOON_UUID(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.GET_BOSS_GOON_UUID' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0x6BC0ACD0673ACEBE, p0, p1, p2)
end
natives.stats.get_boss_goon_uuid = natives.STATS.GET_BOSS_GOON_UUID

function natives.STATS.PLAYSTATS_BW_BOSSONBOSSDEATHMATCH(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_BW_BOSSONBOSSDEATHMATCH' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x8D8ADB562F09A245, p0)
end
natives.stats.playstats_bw_bossonbossdeathmatch = natives.STATS.PLAYSTATS_BW_BOSSONBOSSDEATHMATCH

function natives.STATS.PLAYSTATS_BW_YATCHATTACK(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_BW_YATCHATTACK' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xD1A1EE3B4FA8E760, p0)
end
natives.stats.playstats_bw_yatchattack = natives.STATS.PLAYSTATS_BW_YATCHATTACK

function natives.STATS.PLAYSTATS_BW_HUNT_THE_BOSS(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_BW_HUNT_THE_BOSS' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x88087EE1F28024AE, p0)
end
natives.stats.playstats_bw_hunt_the_boss = natives.STATS.PLAYSTATS_BW_HUNT_THE_BOSS

function natives.STATS.PLAYSTATS_BW_SIGHTSEER(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_BW_SIGHTSEER' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xFCC228E07217FCAC, p0)
end
natives.stats.playstats_bw_sightseer = natives.STATS.PLAYSTATS_BW_SIGHTSEER

function natives.STATS.PLAYSTATS_BW_ASSAULT(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_BW_ASSAULT' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x678F86D8FC040BDB, p0)
end
natives.stats.playstats_bw_assault = natives.STATS.PLAYSTATS_BW_ASSAULT

function natives.STATS.PLAYSTATS_BW_BELLY_OF_THE_BEAST(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_BW_BELLY_OF_THE_BEAST' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xA6F54BB2FFCA35EA, p0)
end
natives.stats.playstats_bw_belly_of_the_beast = natives.STATS.PLAYSTATS_BW_BELLY_OF_THE_BEAST

function natives.STATS.PLAYSTATS_BW_HEAD_HUNTER(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_BW_HEAD_HUNTER' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x5FF2C33B13A02A11, p0)
end
natives.stats.playstats_bw_head_hunter = natives.STATS.PLAYSTATS_BW_HEAD_HUNTER

function natives.STATS.PLAYSTATS_BW_FRAGILE_GOODS(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_BW_FRAGILE_GOODS' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x282B6739644F4347, p0)
end
natives.stats.playstats_bw_fragile_goods = natives.STATS.PLAYSTATS_BW_FRAGILE_GOODS

function natives.STATS.PLAYSTATS_BW_AIR_FREIGHT(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_BW_AIR_FREIGHT' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xF06A6F41CB445443, p0)
end
natives.stats.playstats_bw_air_freight = natives.STATS.PLAYSTATS_BW_AIR_FREIGHT

function natives.STATS.PLAYSTATS_BC_CAR_JACKING(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_BC_CAR_JACKING' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x7B18DA61F6BAE9D5, p0)
end
natives.stats.playstats_bc_car_jacking = natives.STATS.PLAYSTATS_BC_CAR_JACKING

function natives.STATS.PLAYSTATS_BC_SMASH_AND_GRAB(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_BC_SMASH_AND_GRAB' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x06EAF70AE066441E, p0)
end
natives.stats.playstats_bc_smash_and_grab = natives.STATS.PLAYSTATS_BC_SMASH_AND_GRAB

function natives.STATS.PLAYSTATS_BC_PROTECTION_RACKET(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_BC_PROTECTION_RACKET' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x14EDA9EE27BD1626, p0)
end
natives.stats.playstats_bc_protection_racket = natives.STATS.PLAYSTATS_BC_PROTECTION_RACKET

function natives.STATS.PLAYSTATS_BC_MOST_WANTED(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_BC_MOST_WANTED' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x930F504203F561C9, p0)
end
natives.stats.playstats_bc_most_wanted = natives.STATS.PLAYSTATS_BC_MOST_WANTED

function natives.STATS.PLAYSTATS_BC_FINDERS_KEEPERS(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_BC_FINDERS_KEEPERS' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xE3261D791EB44ACB, p0)
end
natives.stats.playstats_bc_finders_keepers = natives.STATS.PLAYSTATS_BC_FINDERS_KEEPERS

function natives.STATS.PLAYSTATS_BC_POINT_TO_POINT(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_BC_POINT_TO_POINT' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x73001E34F85137F8, p0)
end
natives.stats.playstats_bc_point_to_point = natives.STATS.PLAYSTATS_BC_POINT_TO_POINT

function natives.STATS.PLAYSTATS_BC_CASHING(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_BC_CASHING' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x53CAE13E9B426993, p0)
end
natives.stats.playstats_bc_cashing = natives.STATS.PLAYSTATS_BC_CASHING

function natives.STATS.PLAYSTATS_BC_SALVAGE(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_BC_SALVAGE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x7D36291161859389, p0)
end
natives.stats.playstats_bc_salvage = natives.STATS.PLAYSTATS_BC_SALVAGE

function natives.STATS.PLAYSTATS_SPENT_PI_CUSTOM_LOADOUT(--[[int]] amount) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_SPENT_PI_CUSTOM_LOADOUT' due to disabled trusted mode")

	assert(type(amount) == "number", "Arg #1 (amount) must be a number.")

	local result = native_call(0xBE509B0A3693DE8B, amount)
end
natives.stats.playstats_spent_pi_custom_loadout = natives.STATS.PLAYSTATS_SPENT_PI_CUSTOM_LOADOUT

function natives.STATS.PLAYSTATS_BUY_CONTRABAND_MISSION(--[[Any*]] data) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_BUY_CONTRABAND_MISSION' due to disabled trusted mode")

	assert(type(data) == "userdata", "Arg #1 (data) must be a userdata.")

	local result = native_call(0xD6781E42755531F7, data)
end
natives.stats.playstats_buy_contraband_mission = natives.STATS.PLAYSTATS_BUY_CONTRABAND_MISSION

function natives.STATS.PLAYSTATS_SELL_CONTRABAND_MISSION(--[[Any*]] data) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_SELL_CONTRABAND_MISSION' due to disabled trusted mode")

	assert(type(data) == "userdata", "Arg #1 (data) must be a userdata.")

	local result = native_call(0xC729991A9065376E, data)
end
natives.stats.playstats_sell_contraband_mission = natives.STATS.PLAYSTATS_SELL_CONTRABAND_MISSION

function natives.STATS.PLAYSTATS_DEFEND_CONTRABAND_MISSION(--[[Any*]] data) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_DEFEND_CONTRABAND_MISSION' due to disabled trusted mode")

	assert(type(data) == "userdata", "Arg #1 (data) must be a userdata.")

	local result = native_call(0x2605663BD4F23B5D, data)
end
natives.stats.playstats_defend_contraband_mission = natives.STATS.PLAYSTATS_DEFEND_CONTRABAND_MISSION

function natives.STATS.PLAYSTATS_RECOVER_CONTRABAND_MISSION(--[[Any*]] data) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_RECOVER_CONTRABAND_MISSION' due to disabled trusted mode")

	assert(type(data) == "userdata", "Arg #1 (data) must be a userdata.")

	local result = native_call(0x04D90BA8207ADA2D, data)
end
natives.stats.playstats_recover_contraband_mission = natives.STATS.PLAYSTATS_RECOVER_CONTRABAND_MISSION

function natives.STATS.PLAYSTATS_HIT_CONTRABAND_DESTROY_LIMIT(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_HIT_CONTRABAND_DESTROY_LIMIT' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x60EEDC12AF66E846, p0)
end
natives.stats.playstats_hit_contraband_destroy_limit = natives.STATS.PLAYSTATS_HIT_CONTRABAND_DESTROY_LIMIT

function natives.STATS.START_BEING_BOSS(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.START_BEING_BOSS' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x3EBEAC6C3F81F6BD, p0)
end
natives.stats.start_being_boss = natives.STATS.START_BEING_BOSS

function natives.STATS.START_BEING_GOON(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.START_BEING_GOON' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0x96E6D5150DBF1C09, p0, p1, p2)
end
natives.stats.start_being_goon = natives.STATS.START_BEING_GOON

function natives.STATS.END_BEING_BOSS(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.END_BEING_BOSS' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xA3C53804BDB68ED2, p0, p1)
end
natives.stats.end_being_boss = natives.STATS.END_BEING_BOSS

function natives.STATS.END_BEING_GOON(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3, --[[Any]] p4) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.END_BEING_GOON' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")

	local result = native_call(0x6BCCF9948492FD85, p0, p1, p2, p3, p4)
end
natives.stats.end_being_goon = natives.STATS.END_BEING_GOON

function natives.STATS.HIRED_LIMO(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.HIRED_LIMO' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x792271AB35C356A4, p0, p1)
end
natives.stats.hired_limo = natives.STATS.HIRED_LIMO

function natives.STATS.ORDER_BOSS_VEHICLE(--[[Any]] p0, --[[Any]] p1, --[[Hash]] vehicleHash) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.ORDER_BOSS_VEHICLE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(vehicleHash) == "number", "Arg #3 (vehicleHash) must be a number.")

	local result = native_call(0xCEA553E35C2246E1, p0, p1, vehicleHash)
end
natives.stats.order_boss_vehicle = natives.STATS.ORDER_BOSS_VEHICLE

function natives.STATS.CHANGE_UNIFORM(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.CHANGE_UNIFORM' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0xD1C9B92BDD3F151D, p0, p1, p2)
end
natives.stats.change_uniform = natives.STATS.CHANGE_UNIFORM

function natives.STATS.CHANGE_GOON_LOOKING_FOR_WORK(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.CHANGE_GOON_LOOKING_FOR_WORK' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x44919CC079BB60BF, p0)
end
natives.stats.change_goon_looking_for_work = natives.STATS.CHANGE_GOON_LOOKING_FOR_WORK

function natives.STATS.SEND_METRIC_GHOSTING_TO_PLAYER(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.SEND_METRIC_GHOSTING_TO_PLAYER' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x7033EEFD9B28088E, p0)
end
natives.stats.send_metric_ghosting_to_player = natives.STATS.SEND_METRIC_GHOSTING_TO_PLAYER

function natives.STATS.SEND_METRIC_VIP_POACH(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.SEND_METRIC_VIP_POACH' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0xAA525DFF66BB82F5, p0, p1, p2)
end
natives.stats.send_metric_vip_poach = natives.STATS.SEND_METRIC_VIP_POACH

function natives.STATS.SEND_METRIC_PUNISH_BODYGUARD(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.SEND_METRIC_PUNISH_BODYGUARD' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x015B03EE1C43E6EC, p0)
end
natives.stats.send_metric_punish_bodyguard = natives.STATS.SEND_METRIC_PUNISH_BODYGUARD

--[[
Allows CEventNetworkStuntPerformed to be triggered.
]]
function natives.STATS.PLAYSTATS_START_TRACKING_STUNTS() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_START_TRACKING_STUNTS' due to disabled trusted mode")

	local result = native_call(0x928DBFB892638EF3)
end
natives.stats.playstats_start_tracking_stunts = natives.STATS.PLAYSTATS_START_TRACKING_STUNTS

--[[
Disallows CEventNetworkStuntPerformed to be triggered.
]]
function natives.STATS.PLAYSTATS_STOP_TRACKING_STUNTS() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_STOP_TRACKING_STUNTS' due to disabled trusted mode")

	local result = native_call(0x8A800DACCC0DA55D)
end
natives.stats.playstats_stop_tracking_stunts = natives.STATS.PLAYSTATS_STOP_TRACKING_STUNTS

function natives.STATS.PLAYSTATS_MISSION_ENDED(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_MISSION_ENDED' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xBF371CD2B64212FD, p0)
end
natives.stats.playstats_mission_ended = natives.STATS.PLAYSTATS_MISSION_ENDED

function natives.STATS.PLAYSTATS_IMPEXP_MISSION_ENDED(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_IMPEXP_MISSION_ENDED' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x7D8BA05688AD64C7, p0)
end
natives.stats.playstats_impexp_mission_ended = natives.STATS.PLAYSTATS_IMPEXP_MISSION_ENDED

function natives.STATS.PLAYSTATS_CHANGE_MC_ROLE(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3, --[[Any]] p4, --[[Any]] p5, --[[Any]] p6) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_CHANGE_MC_ROLE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")
	assert(type(p6) == "number", "Arg #7 (p6) must be a number.")

	local result = native_call(0x0B565B0AAE56A0E8, p0, p1, p2, p3, p4, p5, p6)
end
natives.stats.playstats_change_mc_role = natives.STATS.PLAYSTATS_CHANGE_MC_ROLE

function natives.STATS.PLAYSTATS_CHANGE_MC_OUTFIT(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3, --[[Any]] p4) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_CHANGE_MC_OUTFIT' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")

	local result = native_call(0x28ECB8AC2F607DB2, p0, p1, p2, p3, p4)
end
natives.stats.playstats_change_mc_outfit = natives.STATS.PLAYSTATS_CHANGE_MC_OUTFIT

function natives.STATS.PLAYSTATS_SWITCH_MC_EMBLEM(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3, --[[Any]] p4) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_SWITCH_MC_EMBLEM' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")

	local result = native_call(0x0A50D2604E05CB94, p0, p1, p2, p3, p4)
end
natives.stats.playstats_switch_mc_emblem = natives.STATS.PLAYSTATS_SWITCH_MC_EMBLEM

function natives.STATS.PLAYSTATS_MC_REQUEST_BIKE(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3, --[[Any]] p4) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_MC_REQUEST_BIKE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")

	local result = native_call(0xCC25A4553DFBF9EA, p0, p1, p2, p3, p4)
end
natives.stats.playstats_mc_request_bike = natives.STATS.PLAYSTATS_MC_REQUEST_BIKE

function natives.STATS.PLAYSTATS_MC_KILLED_RIVAL_MC_MEMBER(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3, --[[Any]] p4) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_MC_KILLED_RIVAL_MC_MEMBER' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")

	local result = native_call(0xF534D94DFA2EAD26, p0, p1, p2, p3, p4)
end
natives.stats.playstats_mc_killed_rival_mc_member = natives.STATS.PLAYSTATS_MC_KILLED_RIVAL_MC_MEMBER

function natives.STATS.PLAYSTATS_ABANDONED_MC(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3, --[[Any]] p4) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_ABANDONED_MC' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")

	local result = native_call(0xD558BEC0BBA7E8D2, p0, p1, p2, p3, p4)
end
natives.stats.playstats_abandoned_mc = natives.STATS.PLAYSTATS_ABANDONED_MC

function natives.STATS.PLAYSTATS_EARNED_MC_POINTS(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3, --[[Any]] p4, --[[Any]] p5) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_EARNED_MC_POINTS' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")

	local result = native_call(0x501478855A6074CE, p0, p1, p2, p3, p4, p5)
end
natives.stats.playstats_earned_mc_points = natives.STATS.PLAYSTATS_EARNED_MC_POINTS

function natives.STATS.PLAYSTATS_MC_FORMATION_ENDS(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3, --[[Any]] p4, --[[Any]] p5, --[[Any]] p6) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_MC_FORMATION_ENDS' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")
	assert(type(p6) == "number", "Arg #7 (p6) must be a number.")

	local result = native_call(0x03C2EEBB04B3FB72, p0, p1, p2, p3, p4, p5, p6)
end
natives.stats.playstats_mc_formation_ends = natives.STATS.PLAYSTATS_MC_FORMATION_ENDS

function natives.STATS.PLAYSTATS_MC_CLUBHOUSE_ACTIVITY(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3, --[[Any]] p4, --[[Any]] p5, --[[Any]] p6) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_MC_CLUBHOUSE_ACTIVITY' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")
	assert(type(p6) == "number", "Arg #7 (p6) must be a number.")

	local result = native_call(0x8989CBD7B4E82534, p0, p1, p2, p3, p4, p5, p6)
end
natives.stats.playstats_mc_clubhouse_activity = natives.STATS.PLAYSTATS_MC_CLUBHOUSE_ACTIVITY

function natives.STATS.PLAYSTATS_RIVAL_BEHAVIOR(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3, --[[Any]] p4, --[[Any]] p5, --[[Any]] p6, --[[Any]] p7, --[[Any]] p8, --[[Any]] p9) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_RIVAL_BEHAVIOR' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")
	assert(type(p6) == "number", "Arg #7 (p6) must be a number.")
	assert(type(p7) == "number", "Arg #8 (p7) must be a number.")
	assert(type(p8) == "number", "Arg #9 (p8) must be a number.")
	assert(type(p9) == "number", "Arg #10 (p9) must be a number.")

	local result = native_call(0x27AA1C973CACFE63, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9)
end
natives.stats.playstats_rival_behavior = natives.STATS.PLAYSTATS_RIVAL_BEHAVIOR

function natives.STATS.PLAYSTATS_COPY_RANK_INTO_NEW_SLOT(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3, --[[Any]] p4, --[[Any]] p5, --[[Any]] p6) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_COPY_RANK_INTO_NEW_SLOT' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")
	assert(type(p6) == "number", "Arg #7 (p6) must be a number.")

	local result = native_call(0xB7257BA2550EA10A, p0, p1, p2, p3, p4, p5, p6)
end
natives.stats.playstats_copy_rank_into_new_slot = natives.STATS.PLAYSTATS_COPY_RANK_INTO_NEW_SLOT

function natives.STATS.PLAYSTATS_DUPE_DETECTED(--[[Any*]] data) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_DUPE_DETECTED' due to disabled trusted mode")

	assert(type(data) == "userdata", "Arg #1 (data) must be a userdata.")

	local result = native_call(0x848B66100EE33B05, data)
end
natives.stats.playstats_dupe_detected = natives.STATS.PLAYSTATS_DUPE_DETECTED

function natives.STATS.PLAYSTATS_BAN_ALERT(--[[int]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_BAN_ALERT' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x516FC96EB88EEFE5, p0)
end
natives.stats.playstats_ban_alert = natives.STATS.PLAYSTATS_BAN_ALERT

function natives.STATS.PLAYSTATS_GUNRUNNING_MISSION_ENDED(--[[Any*]] data) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_GUNRUNNING_MISSION_ENDED' due to disabled trusted mode")

	assert(type(data) == "userdata", "Arg #1 (data) must be a userdata.")

	local result = native_call(0x0EACDF8487D5155A, data)
end
natives.stats.playstats_gunrunning_mission_ended = natives.STATS.PLAYSTATS_GUNRUNNING_MISSION_ENDED

function natives.STATS.PLAYSTATS_GUNRUNNING_RND(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_GUNRUNNING_RND' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xDAF80797FC534BEC, p0)
end
natives.stats.playstats_gunrunning_rnd = natives.STATS.PLAYSTATS_GUNRUNNING_RND

function natives.STATS.PLAYSTATS_BUSINESS_BATTLE_ENDED(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_BUSINESS_BATTLE_ENDED' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x316DB59CD14C1774, p0)
end
natives.stats.playstats_business_battle_ended = natives.STATS.PLAYSTATS_BUSINESS_BATTLE_ENDED

function natives.STATS.PLAYSTATS_WAREHOUSE_MISSION_ENDED(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_WAREHOUSE_MISSION_ENDED' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x2D7A9B577E72385E, p0)
end
natives.stats.playstats_warehouse_mission_ended = natives.STATS.PLAYSTATS_WAREHOUSE_MISSION_ENDED

function natives.STATS.PLAYSTATS_NIGHTCLUB_MISSION_ENDED(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_NIGHTCLUB_MISSION_ENDED' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x830C3A44EB3F2CF9, p0)
end
natives.stats.playstats_nightclub_mission_ended = natives.STATS.PLAYSTATS_NIGHTCLUB_MISSION_ENDED

function natives.STATS.PLAYSTATS_DJ_USAGE(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_DJ_USAGE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xB26F670685631727, p0, p1)
end
natives.stats.playstats_dj_usage = natives.STATS.PLAYSTATS_DJ_USAGE

function natives.STATS.PLAYSTATS_MINIGAME_USAGE(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_MINIGAME_USAGE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0xC14BD9F5337219B2, p0, p1, p2)
end
natives.stats.playstats_minigame_usage = natives.STATS.PLAYSTATS_MINIGAME_USAGE

function natives.STATS.PLAYSTATS_STONE_HATCHET_ENDED(--[[Any*]] data) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_STONE_HATCHET_ENDED' due to disabled trusted mode")

	assert(type(data) == "userdata", "Arg #1 (data) must be a userdata.")

	local result = native_call(0x35E39E5570358630, data)
end
natives.stats.playstats_stone_hatchet_ended = natives.STATS.PLAYSTATS_STONE_HATCHET_ENDED

function natives.STATS.PLAYSTATS_SMUGGLER_MISSION_ENDED(--[[Any*]] data) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_SMUGGLER_MISSION_ENDED' due to disabled trusted mode")

	assert(type(data) == "userdata", "Arg #1 (data) must be a userdata.")

	local result = native_call(0x320C35147D5B5DDD, data)
end
natives.stats.playstats_smuggler_mission_ended = natives.STATS.PLAYSTATS_SMUGGLER_MISSION_ENDED

function natives.STATS.PLAYSTATS_FM_HEIST_PREP_ENDED(--[[Any*]] data) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_FM_HEIST_PREP_ENDED' due to disabled trusted mode")

	assert(type(data) == "userdata", "Arg #1 (data) must be a userdata.")

	local result = native_call(0xD8AFB345A9C5CCBB, data)
end
natives.stats.playstats_fm_heist_prep_ended = natives.STATS.PLAYSTATS_FM_HEIST_PREP_ENDED

function natives.STATS.PLAYSTATS_INSTANCED_HEIST_ENDED(--[[Any*]] data, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_INSTANCED_HEIST_ENDED' due to disabled trusted mode")

	assert(type(data) == "userdata", "Arg #1 (data) must be a userdata.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x1E1497D0D2108115, data, p1, p2, p3)
end
natives.stats.playstats_instanced_heist_ended = natives.STATS.PLAYSTATS_INSTANCED_HEIST_ENDED

function natives.STATS.PLAYSTATS_DAR_CHECKPOINT(--[[Any*]] data) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_DAR_CHECKPOINT' due to disabled trusted mode")

	assert(type(data) == "userdata", "Arg #1 (data) must be a userdata.")

	local result = native_call(0x0BC254FF3A911501, data)
end
natives.stats.playstats_dar_checkpoint = natives.STATS.PLAYSTATS_DAR_CHECKPOINT

function natives.STATS.PLAYSTATS_ENTER_SESSION_PACK(--[[Any*]] data) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_ENTER_SESSION_PACK' due to disabled trusted mode")

	assert(type(data) == "userdata", "Arg #1 (data) must be a userdata.")

	local result = native_call(0x878FF156D36E9956, data)
end
natives.stats.playstats_enter_session_pack = natives.STATS.PLAYSTATS_ENTER_SESSION_PACK

function natives.STATS.PLAYSTATS_DRONE_USAGE(--[[int]] p0, --[[int]] p1, --[[int]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_DRONE_USAGE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0x66C7BB2416ED3FCE, p0, p1, p2)
end
natives.stats.playstats_drone_usage = natives.STATS.PLAYSTATS_DRONE_USAGE

function natives.STATS.PLAYSTATS_SPIN_WHEEL(--[[int]] p0, --[[int]] p1, --[[int]] p2, --[[int]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_SPIN_WHEEL' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x6731DE84A38BFAD0, p0, p1, p2, p3)
end
natives.stats.playstats_spin_wheel = natives.STATS.PLAYSTATS_SPIN_WHEEL

function natives.STATS.PLAYSTATS_ARENA_WARS_SPECTATOR(--[[int]] p0, --[[int]] p1, --[[int]] p2, --[[int]] p3, --[[int]] p4) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_ARENA_WARS_SPECTATOR' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")

	local result = native_call(0x6F4F599753F8200A, p0, p1, p2, p3, p4)
end
natives.stats.playstats_arena_wars_spectator = natives.STATS.PLAYSTATS_ARENA_WARS_SPECTATOR

function natives.STATS.PLAYSTATS_ARENA_WARS_ENDED(--[[Any*]] data) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_ARENA_WARS_ENDED' due to disabled trusted mode")

	assert(type(data) == "userdata", "Arg #1 (data) must be a userdata.")

	local result = native_call(0xB479D9F0D48A1BC5, data)
end
natives.stats.playstats_arena_wars_ended = natives.STATS.PLAYSTATS_ARENA_WARS_ENDED

function natives.STATS.PLAYSTATS_SWITCH_PASSIVE_MODE(--[[BOOL]] p0, --[[int]] p1, --[[int]] p2, --[[int]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_SWITCH_PASSIVE_MODE' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x35EEC6C2BC821A71, p0, p1, p2, p3)
end
natives.stats.playstats_switch_passive_mode = natives.STATS.PLAYSTATS_SWITCH_PASSIVE_MODE

function natives.STATS.PLAYSTATS_COLLECTIBLE_PICKED_UP(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3, --[[Any]] p4, --[[Any]] p5, --[[Any]] p6, --[[Any]] p7, --[[Any]] p8, --[[Any]] p9, --[[Any]] p10) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_COLLECTIBLE_PICKED_UP' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")
	assert(type(p6) == "number", "Arg #7 (p6) must be a number.")
	assert(type(p7) == "number", "Arg #8 (p7) must be a number.")
	assert(type(p8) == "number", "Arg #9 (p8) must be a number.")
	assert(type(p9) == "number", "Arg #10 (p9) must be a number.")
	assert(type(p10) == "number", "Arg #11 (p10) must be a number.")

	local result = native_call(0xCD0A8A9338681CF2, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10)
end
natives.stats.playstats_collectible_picked_up = natives.STATS.PLAYSTATS_COLLECTIBLE_PICKED_UP

function natives.STATS.PLAYSTATS_CASINO_STORY_MISSION_ENDED(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_CASINO_STORY_MISSION_ENDED' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xFCCCAC2BD3C1F180, p0, p1)
end
natives.stats.playstats_casino_story_mission_ended = natives.STATS.PLAYSTATS_CASINO_STORY_MISSION_ENDED

function natives.STATS.PLAYSTATS_CASINO_CHIP(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_CASINO_CHIP' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x0999F3F090EC5012, p0)
end
natives.stats.playstats_casino_chip = natives.STATS.PLAYSTATS_CASINO_CHIP

function natives.STATS.PLAYSTATS_CASINO_ROULETTE(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_CASINO_ROULETTE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x95101C443A84E7F1, p0)
end
natives.stats.playstats_casino_roulette = natives.STATS.PLAYSTATS_CASINO_ROULETTE

function natives.STATS.PLAYSTATS_CASINO_BLACKJACK(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_CASINO_BLACKJACK' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x3EAE97309727E7AD, p0)
end
natives.stats.playstats_casino_blackjack = natives.STATS.PLAYSTATS_CASINO_BLACKJACK

function natives.STATS.PLAYSTATS_CASINO_THREE_CARD_POKER(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_CASINO_THREE_CARD_POKER' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xF740FB339D471C35, p0)
end
natives.stats.playstats_casino_three_card_poker = natives.STATS.PLAYSTATS_CASINO_THREE_CARD_POKER

function natives.STATS.PLAYSTATS_CASINO_SLOT_MACHINE(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_CASINO_SLOT_MACHINE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xEF5EC67D392B830A, p0)
end
natives.stats.playstats_casino_slot_machine = natives.STATS.PLAYSTATS_CASINO_SLOT_MACHINE

function natives.STATS.PLAYSTATS_CASINO_INSIDE_TRACK(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_CASINO_INSIDE_TRACK' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x049F059625058A86, p0)
end
natives.stats.playstats_casino_inside_track = natives.STATS.PLAYSTATS_CASINO_INSIDE_TRACK

function natives.STATS.PLAYSTATS_CASINO_LUCKY_SEVEN(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_CASINO_LUCKY_SEVEN' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x0C432C1435F5E4FA, p0)
end
natives.stats.playstats_casino_lucky_seven = natives.STATS.PLAYSTATS_CASINO_LUCKY_SEVEN

function natives.STATS.PLAYSTATS_CASINO_ROULETTE_LIGHT(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_CASINO_ROULETTE_LIGHT' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x6572ABA3DE1197FC, p0)
end
natives.stats.playstats_casino_roulette_light = natives.STATS.PLAYSTATS_CASINO_ROULETTE_LIGHT

function natives.STATS.PLAYSTATS_CASINO_BLACKJACK_LIGHT(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_CASINO_BLACKJACK_LIGHT' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xD5451C7BF151EB6F, p0)
end
natives.stats.playstats_casino_blackjack_light = natives.STATS.PLAYSTATS_CASINO_BLACKJACK_LIGHT

function natives.STATS.PLAYSTATS_CASINO_THREE_CARD_POKER_LIGHT(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_CASINO_THREE_CARD_POKER_LIGHT' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xC9001364B4388F22, p0)
end
natives.stats.playstats_casino_three_card_poker_light = natives.STATS.PLAYSTATS_CASINO_THREE_CARD_POKER_LIGHT

function natives.STATS.PLAYSTATS_CASINO_SLOT_MACHINE_LIGHT(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_CASINO_SLOT_MACHINE_LIGHT' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xE60054A0FAE8227F, p0)
end
natives.stats.playstats_casino_slot_machine_light = natives.STATS.PLAYSTATS_CASINO_SLOT_MACHINE_LIGHT

function natives.STATS.PLAYSTATS_CASINO_INSIDE_TRACK_LIGHT(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_CASINO_INSIDE_TRACK_LIGHT' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x23A3CBCD50D54E47, p0)
end
natives.stats.playstats_casino_inside_track_light = natives.STATS.PLAYSTATS_CASINO_INSIDE_TRACK_LIGHT

function natives.STATS.PLAYSTATS_ARCADE_GAME(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3, --[[Any]] p4, --[[Any]] p5, --[[Any]] p6) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_ARCADE_GAME' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")
	assert(type(p6) == "number", "Arg #7 (p6) must be a number.")

	local result = native_call(0x533A7D1EA58DF958, p0, p1, p2, p3, p4, p5, p6)
end
natives.stats.playstats_arcade_game = natives.STATS.PLAYSTATS_ARCADE_GAME

function natives.STATS.PLAYSTATS_ARCADE_LOVE_MATCH(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_ARCADE_LOVE_MATCH' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x4FCDBD3F0A813C25, p0, p1)
end
natives.stats.playstats_arcade_love_match = natives.STATS.PLAYSTATS_ARCADE_LOVE_MATCH

function natives.STATS.PLAYSTATS_FREEMODE_CASINO_MISSION_ENDED(--[[Any*]] data) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_FREEMODE_CASINO_MISSION_ENDED' due to disabled trusted mode")

	assert(type(data) == "userdata", "Arg #1 (data) must be a userdata.")

	local result = native_call(0x1A0D4A6C336B7BC5, data)
end
natives.stats.playstats_freemode_casino_mission_ended = natives.STATS.PLAYSTATS_FREEMODE_CASINO_MISSION_ENDED

function natives.STATS.PLAYSTATS_HEIST3_DRONE(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_HEIST3_DRONE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xDFBD93BF2943E29B, p0)
end
natives.stats.playstats_heist3_drone = natives.STATS.PLAYSTATS_HEIST3_DRONE

function natives.STATS.PLAYSTATS_HEIST3_HACK(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3, --[[Any]] p4, --[[Any]] p5) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_HEIST3_HACK' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")

	local result = native_call(0x92FC0EEDFAC04A14, p0, p1, p2, p3, p4, p5)
end
natives.stats.playstats_heist3_hack = natives.STATS.PLAYSTATS_HEIST3_HACK

function natives.STATS.PLAYSTATS_NPC_PHONE(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3, --[[Any]] p4, --[[Any]] p5) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_NPC_PHONE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")

	local result = native_call(0x0077F15613D36993, p0, p1, p2, p3, p4, p5)
end
natives.stats.playstats_npc_phone = natives.STATS.PLAYSTATS_NPC_PHONE

function natives.STATS.PLAYSTATS_ARCADE_CABINET(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_ARCADE_CABINET' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xF9096193DF1F99D4, p0)
end
natives.stats.playstats_arcade_cabinet = natives.STATS.PLAYSTATS_ARCADE_CABINET

function natives.STATS.PLAYSTATS_HEIST3_FINALE(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_HEIST3_FINALE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x2E0259BABC27A327, p0)
end
natives.stats.playstats_heist3_finale = natives.STATS.PLAYSTATS_HEIST3_FINALE

function natives.STATS.PLAYSTATS_HEIST3_PREP(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_HEIST3_PREP' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x53C31853EC9531FF, p0)
end
natives.stats.playstats_heist3_prep = natives.STATS.PLAYSTATS_HEIST3_PREP

function natives.STATS.PLAYSTATS_MASTER_CONTROL(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_MASTER_CONTROL' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x810B5FCC52EC7FF0, p0, p1, p2, p3)
end
natives.stats.playstats_master_control = natives.STATS.PLAYSTATS_MASTER_CONTROL

function natives.STATS.PLAYSTATS_QUIT_MODE(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3, --[[Any]] p4) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_QUIT_MODE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")

	local result = native_call(0x5BF29846C6527C54, p0, p1, p2, p3, p4)
end
natives.stats.playstats_quit_mode = natives.STATS.PLAYSTATS_QUIT_MODE

function natives.STATS.PLAYSTATS_MISSION_VOTE(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_MISSION_VOTE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xC03FAB2C2F92289B, p0)
end
natives.stats.playstats_mission_vote = natives.STATS.PLAYSTATS_MISSION_VOTE

function natives.STATS.PLAYSTATS_NJVS_VOTE(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_NJVS_VOTE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x5CDAED54B34B0ED0, p0)
end
natives.stats.playstats_njvs_vote = natives.STATS.PLAYSTATS_NJVS_VOTE

function natives.STATS.PLAYSTATS_KILL_YOURSELF() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_KILL_YOURSELF' due to disabled trusted mode")

	local result = native_call(0x4AFF7E02E485E92B)
end
natives.stats.playstats_kill_yourself = natives.STATS.PLAYSTATS_KILL_YOURSELF

function natives.STATS.PLAYSTATS_FM_MISSION_END(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_FM_MISSION_END' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0x46A70777BE6CEAB9, p0, p1, p2)
end
natives.stats.playstats_fm_mission_end = natives.STATS.PLAYSTATS_FM_MISSION_END

function natives.STATS.PLAYSTATS_HEIST4_PREP(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_HEIST4_PREP' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xDFCDB14317A9B361, p0)
end
natives.stats.playstats_heist4_prep = natives.STATS.PLAYSTATS_HEIST4_PREP

function natives.STATS.PLAYSTATS_HEIST4_FINALE(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_HEIST4_FINALE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xC1E963C58664B556, p0)
end
natives.stats.playstats_heist4_finale = natives.STATS.PLAYSTATS_HEIST4_FINALE

function natives.STATS.PLAYSTATS_HEIST4_HACK(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3, --[[Any]] p4) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_HEIST4_HACK' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")

	local result = native_call(0x2FA3173480008493, p0, p1, p2, p3, p4)
end
natives.stats.playstats_heist4_hack = natives.STATS.PLAYSTATS_HEIST4_HACK

function natives.STATS.PLAYSTATS_SUB_WEAP(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_SUB_WEAP' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0xD4367D310F079DB0, p0, p1, p2, p3)
end
natives.stats.playstats_sub_weap = natives.STATS.PLAYSTATS_SUB_WEAP

function natives.STATS.PLAYSTATS_FAST_TRVL(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3, --[[Any]] p4, --[[Any]] p5, --[[Any]] p6, --[[Any]] p7, --[[Any]] p8) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_FAST_TRVL' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")
	assert(type(p6) == "number", "Arg #7 (p6) must be a number.")
	assert(type(p7) == "number", "Arg #8 (p7) must be a number.")
	assert(type(p8) == "number", "Arg #9 (p8) must be a number.")

	local result = native_call(0x4DC416F246A41FC8, p0, p1, p2, p3, p4, p5, p6, p7, p8)
end
natives.stats.playstats_fast_trvl = natives.STATS.PLAYSTATS_FAST_TRVL

function natives.STATS.PLAYSTATS_HUB_ENTRY(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_HUB_ENTRY' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x2818FF6638CB09DE, p0)
end
natives.stats.playstats_hub_entry = natives.STATS.PLAYSTATS_HUB_ENTRY

function natives.STATS.PLAYSTATS_DJ_MISSION_ENDED(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_DJ_MISSION_ENDED' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xD6CA58B3B53A0F22, p0)
end
natives.stats.playstats_dj_mission_ended = natives.STATS.PLAYSTATS_DJ_MISSION_ENDED

function natives.STATS.PLAYSTATS_ROBBERY_PREP(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_ROBBERY_PREP' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x1A67DFBF1F5C3835, p0)
end
natives.stats.playstats_robbery_prep = natives.STATS.PLAYSTATS_ROBBERY_PREP

function natives.STATS.PLAYSTATS_ROBBERY_FINALE(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_ROBBERY_FINALE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xBBA55BE9AAAABF44, p0)
end
natives.stats.playstats_robbery_finale = natives.STATS.PLAYSTATS_ROBBERY_FINALE

function natives.STATS.PLAYSTATS_EXTRA_EVENT(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_EXTRA_EVENT' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xFA5B74BAB8A7EF99, p0)
end
natives.stats.playstats_extra_event = natives.STATS.PLAYSTATS_EXTRA_EVENT

function natives.STATS.PLAYSTATS_CARCLUB_POINTS(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_CARCLUB_POINTS' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xFF14D6FEEC507BBE, p0)
end
natives.stats.playstats_carclub_points = natives.STATS.PLAYSTATS_CARCLUB_POINTS

function natives.STATS.PLAYSTATS_CARCLUB_CHALLENGE(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_CARCLUB_CHALLENGE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x1187CB58D7F3BED7, p0, p1, p2, p3)
end
natives.stats.playstats_carclub_challenge = natives.STATS.PLAYSTATS_CARCLUB_CHALLENGE

function natives.STATS.PLAYSTATS_CARCLUB_PRIZE(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_CARCLUB_PRIZE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x69C922B677621428, p0, p1)
end
natives.stats.playstats_carclub_prize = natives.STATS.PLAYSTATS_CARCLUB_PRIZE

function natives.STATS.PLAYSTATS_AWARD_NAV(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_AWARD_NAV' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x70F52471E758EBAE, p0, p1)
end
natives.stats.playstats_award_nav = natives.STATS.PLAYSTATS_AWARD_NAV

function natives.STATS.PLAYSTATS_INST_MISSION_END(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_INST_MISSION_END' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xFEA3F7E83C0610FA, p0)
end
natives.stats.playstats_inst_mission_end = natives.STATS.PLAYSTATS_INST_MISSION_END

function natives.STATS.PLAYSTATS_HUB_EXIT(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_HUB_EXIT' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x5A46ACE5C4661132, p0)
end
natives.stats.playstats_hub_exit = natives.STATS.PLAYSTATS_HUB_EXIT

function natives.STATS.PLAYSTATS_INVENTORY(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STATS.PLAYSTATS_INVENTORY' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x887DAD63CF5B7908, p0)
end
natives.stats.playstats_inventory = natives.STATS.PLAYSTATS_INVENTORY


natives.STREAMING = {}
natives.streaming = {}

function natives.STREAMING.LOAD_ALL_OBJECTS_NOW() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.LOAD_ALL_OBJECTS_NOW' due to disabled trusted mode")

	local result = native_call(0xBD6E84632DD4CB3F)
end
natives.streaming.load_all_objects_now = natives.STREAMING.LOAD_ALL_OBJECTS_NOW

function natives.STREAMING.LOAD_SCENE(--[[float]] x, --[[float]] y, --[[float]] z) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.LOAD_SCENE' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")

	local result = native_call(0x4448EB75B4904BDB, x, y, z)
end
natives.streaming.load_scene = natives.STREAMING.LOAD_SCENE

function natives.STREAMING.NETWORK_UPDATE_LOAD_SCENE() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.NETWORK_UPDATE_LOAD_SCENE' due to disabled trusted mode")

	local result = native_call(0xC4582015556D1C46)
	return result:__tointeger() ~= 0
end
natives.streaming.network_update_load_scene = natives.STREAMING.NETWORK_UPDATE_LOAD_SCENE

function natives.STREAMING.IS_NETWORK_LOADING_SCENE() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.IS_NETWORK_LOADING_SCENE' due to disabled trusted mode")

	local result = native_call(0x41CA5A33160EA4AB)
	return result:__tointeger() ~= 0
end
natives.streaming.is_network_loading_scene = natives.STREAMING.IS_NETWORK_LOADING_SCENE

function natives.STREAMING.SET_INTERIOR_ACTIVE(--[[int]] interiorID, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.SET_INTERIOR_ACTIVE' due to disabled trusted mode")

	assert(type(interiorID) == "number", "Arg #1 (interiorID) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xE37B76C387BE28ED, interiorID, toggle)
end
natives.streaming.set_interior_active = natives.STREAMING.SET_INTERIOR_ACTIVE

--[[
Request a model to be loaded into memory.

]]
function natives.STREAMING.REQUEST_MODEL(--[[Hash]] model) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.REQUEST_MODEL' due to disabled trusted mode")

	assert(type(model) == "number", "Arg #1 (model) must be a number.")

	local result = native_call(0x963D27A58DF860AC, model)
end
natives.streaming.request_model = natives.STREAMING.REQUEST_MODEL

function natives.STREAMING.REQUEST_MENU_PED_MODEL(--[[Hash]] model) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.REQUEST_MENU_PED_MODEL' due to disabled trusted mode")

	assert(type(model) == "number", "Arg #1 (model) must be a number.")

	local result = native_call(0xA0261AEF7ACFC51E, model)
end
natives.streaming.request_menu_ped_model = natives.STREAMING.REQUEST_MENU_PED_MODEL

--[[
Checks if the specified model has loaded into memory.
]]
function natives.STREAMING.HAS_MODEL_LOADED(--[[Hash]] model) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.HAS_MODEL_LOADED' due to disabled trusted mode")

	assert(type(model) == "number", "Arg #1 (model) must be a number.")

	local result = native_call(0x98A4EB5D89A0C952, model)
	return result:__tointeger() ~= 0
end
natives.streaming.has_model_loaded = natives.STREAMING.HAS_MODEL_LOADED

--[[
STREAMING::REQUEST_MODELS_IN_ROOM(l_13BC, "V_FIB01_cur_elev");
STREAMING::REQUEST_MODELS_IN_ROOM(l_13BC, "limbo");
STREAMING::REQUEST_MODELS_IN_ROOM(l_13BB, "V_Office_gnd_lifts");
STREAMING::REQUEST_MODELS_IN_ROOM(l_13BB, "limbo");
STREAMING::REQUEST_MODELS_IN_ROOM(l_13BC, "v_fib01_jan_elev");
STREAMING::REQUEST_MODELS_IN_ROOM(l_13BC, "limbo");
]]
function natives.STREAMING.REQUEST_MODELS_IN_ROOM(--[[Interior]] interior, --[[const char*]] roomName) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.REQUEST_MODELS_IN_ROOM' due to disabled trusted mode")

	assert(type(interior) == "number", "Arg #1 (interior) must be a number.")
	assert(type(roomName) == "string", "Arg #2 (roomName) must be a string.")

	local result = native_call(0x8A7A40100EDFEC58, interior, roomName)
end
natives.streaming.request_models_in_room = natives.STREAMING.REQUEST_MODELS_IN_ROOM

--[[
Unloads model from memory
]]
function natives.STREAMING.SET_MODEL_AS_NO_LONGER_NEEDED(--[[Hash]] model) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.SET_MODEL_AS_NO_LONGER_NEEDED' due to disabled trusted mode")

	assert(type(model) == "number", "Arg #1 (model) must be a number.")

	local result = native_call(0xE532F5D78798DAAB, model)
end
natives.streaming.set_model_as_no_longer_needed = natives.STREAMING.SET_MODEL_AS_NO_LONGER_NEEDED

--[[
Check if model is in cdimage(rpf)
]]
function natives.STREAMING.IS_MODEL_IN_CDIMAGE(--[[Hash]] model) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.IS_MODEL_IN_CDIMAGE' due to disabled trusted mode")

	assert(type(model) == "number", "Arg #1 (model) must be a number.")

	local result = native_call(0x35B9E0803292B641, model)
	return result:__tointeger() ~= 0
end
natives.streaming.is_model_in_cdimage = natives.STREAMING.IS_MODEL_IN_CDIMAGE

--[[
Returns whether the specified model exists in the game.
]]
function natives.STREAMING.IS_MODEL_VALID(--[[Hash]] model) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.IS_MODEL_VALID' due to disabled trusted mode")

	assert(type(model) == "number", "Arg #1 (model) must be a number.")

	local result = native_call(0xC0296A2EDF545E92, model)
	return result:__tointeger() ~= 0
end
natives.streaming.is_model_valid = natives.STREAMING.IS_MODEL_VALID

function natives.STREAMING.IS_MODEL_A_PED(--[[Hash]] model) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.IS_MODEL_A_PED' due to disabled trusted mode")

	assert(type(model) == "number", "Arg #1 (model) must be a number.")

	local result = native_call(0x75816577FEA6DAD5, model)
	return result:__tointeger() ~= 0
end
natives.streaming.is_model_a_ped = natives.STREAMING.IS_MODEL_A_PED

--[[
Returns whether the specified model represents a vehicle.
]]
function natives.STREAMING.IS_MODEL_A_VEHICLE(--[[Hash]] model) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.IS_MODEL_A_VEHICLE' due to disabled trusted mode")

	assert(type(model) == "number", "Arg #1 (model) must be a number.")

	local result = native_call(0x19AAC8F07BFEC53E, model)
	return result:__tointeger() ~= 0
end
natives.streaming.is_model_a_vehicle = natives.STREAMING.IS_MODEL_A_VEHICLE

function natives.STREAMING.REQUEST_COLLISION_AT_COORD(--[[float]] x, --[[float]] y, --[[float]] z) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.REQUEST_COLLISION_AT_COORD' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")

	local result = native_call(0x07503F7948F491A7, x, y, z)
end
natives.streaming.request_collision_at_coord = natives.STREAMING.REQUEST_COLLISION_AT_COORD

function natives.STREAMING.REQUEST_COLLISION_FOR_MODEL(--[[Hash]] model) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.REQUEST_COLLISION_FOR_MODEL' due to disabled trusted mode")

	assert(type(model) == "number", "Arg #1 (model) must be a number.")

	local result = native_call(0x923CB32A3B874FCB, model)
end
natives.streaming.request_collision_for_model = natives.STREAMING.REQUEST_COLLISION_FOR_MODEL

function natives.STREAMING.HAS_COLLISION_FOR_MODEL_LOADED(--[[Hash]] model) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.HAS_COLLISION_FOR_MODEL_LOADED' due to disabled trusted mode")

	assert(type(model) == "number", "Arg #1 (model) must be a number.")

	local result = native_call(0x22CCA434E368F03A, model)
	return result:__tointeger() ~= 0
end
natives.streaming.has_collision_for_model_loaded = natives.STREAMING.HAS_COLLISION_FOR_MODEL_LOADED

--[[
MulleDK19: Alias of REQUEST_COLLISION_AT_COORD.
]]
function natives.STREAMING.REQUEST_ADDITIONAL_COLLISION_AT_COORD(--[[float]] x, --[[float]] y, --[[float]] z) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.REQUEST_ADDITIONAL_COLLISION_AT_COORD' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")

	local result = native_call(0xC9156DC11411A9EA, x, y, z)
end
natives.streaming.request_additional_collision_at_coord = natives.STREAMING.REQUEST_ADDITIONAL_COLLISION_AT_COORD

--[[
Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
]]
function natives.STREAMING.DOES_ANIM_DICT_EXIST(--[[const char*]] animDict) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.DOES_ANIM_DICT_EXIST' due to disabled trusted mode")

	assert(type(animDict) == "string", "Arg #1 (animDict) must be a string.")

	local result = native_call(0x2DA49C3B79856961, animDict)
	return result:__tointeger() ~= 0
end
natives.streaming.does_anim_dict_exist = natives.STREAMING.DOES_ANIM_DICT_EXIST

--[[
Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
]]
function natives.STREAMING.REQUEST_ANIM_DICT(--[[const char*]] animDict) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.REQUEST_ANIM_DICT' due to disabled trusted mode")

	assert(type(animDict) == "string", "Arg #1 (animDict) must be a string.")

	local result = native_call(0xD3BD40951412FEF6, animDict)
end
natives.streaming.request_anim_dict = natives.STREAMING.REQUEST_ANIM_DICT

--[[
Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
]]
function natives.STREAMING.HAS_ANIM_DICT_LOADED(--[[const char*]] animDict) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.HAS_ANIM_DICT_LOADED' due to disabled trusted mode")

	assert(type(animDict) == "string", "Arg #1 (animDict) must be a string.")

	local result = native_call(0xD031A9162D01088C, animDict)
	return result:__tointeger() ~= 0
end
natives.streaming.has_anim_dict_loaded = natives.STREAMING.HAS_ANIM_DICT_LOADED

--[[
Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
]]
function natives.STREAMING.REMOVE_ANIM_DICT(--[[const char*]] animDict) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.REMOVE_ANIM_DICT' due to disabled trusted mode")

	assert(type(animDict) == "string", "Arg #1 (animDict) must be a string.")

	local result = native_call(0xF66A602F829E2A06, animDict)
end
natives.streaming.remove_anim_dict = natives.STREAMING.REMOVE_ANIM_DICT

--[[
Starts loading the specified animation set. An animation set provides movement animations for a ped. See SET_PED_MOVEMENT_CLIPSET.

Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json

Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json
]]
function natives.STREAMING.REQUEST_ANIM_SET(--[[const char*]] animSet) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.REQUEST_ANIM_SET' due to disabled trusted mode")

	assert(type(animSet) == "string", "Arg #1 (animSet) must be a string.")

	local result = native_call(0x6EA47DAE7FAD0EED, animSet)
end
natives.streaming.request_anim_set = natives.STREAMING.REQUEST_ANIM_SET

--[[
Gets whether the specified animation set has finished loading. An animation set provides movement animations for a ped. See SET_PED_MOVEMENT_CLIPSET.

Animation set and clip set are synonymous.

Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json

Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json
]]
function natives.STREAMING.HAS_ANIM_SET_LOADED(--[[const char*]] animSet) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.HAS_ANIM_SET_LOADED' due to disabled trusted mode")

	assert(type(animSet) == "string", "Arg #1 (animSet) must be a string.")

	local result = native_call(0xC4EA073D86FB29B0, animSet)
	return result:__tointeger() ~= 0
end
natives.streaming.has_anim_set_loaded = natives.STREAMING.HAS_ANIM_SET_LOADED

--[[
Unloads the specified animation set. An animation set provides movement animations for a ped. See SET_PED_MOVEMENT_CLIPSET.

Animation set and clip set are synonymous.

Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json

Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json
]]
function natives.STREAMING.REMOVE_ANIM_SET(--[[const char*]] animSet) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.REMOVE_ANIM_SET' due to disabled trusted mode")

	assert(type(animSet) == "string", "Arg #1 (animSet) must be a string.")

	local result = native_call(0x16350528F93024B3, animSet)
end
natives.streaming.remove_anim_set = natives.STREAMING.REMOVE_ANIM_SET

--[[
Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json

Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json
]]
function natives.STREAMING.REQUEST_CLIP_SET(--[[const char*]] clipSet) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.REQUEST_CLIP_SET' due to disabled trusted mode")

	assert(type(clipSet) == "string", "Arg #1 (clipSet) must be a string.")

	local result = native_call(0xD2A71E1A77418A49, clipSet)
end
natives.streaming.request_clip_set = natives.STREAMING.REQUEST_CLIP_SET

--[[
Alias for HAS_ANIM_SET_LOADED.

Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json

Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json
]]
function natives.STREAMING.HAS_CLIP_SET_LOADED(--[[const char*]] clipSet) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.HAS_CLIP_SET_LOADED' due to disabled trusted mode")

	assert(type(clipSet) == "string", "Arg #1 (clipSet) must be a string.")

	local result = native_call(0x318234F4F3738AF3, clipSet)
	return result:__tointeger() ~= 0
end
natives.streaming.has_clip_set_loaded = natives.STREAMING.HAS_CLIP_SET_LOADED

--[[
Alias for REMOVE_ANIM_SET.

Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json

Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json
]]
function natives.STREAMING.REMOVE_CLIP_SET(--[[const char*]] clipSet) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.REMOVE_CLIP_SET' due to disabled trusted mode")

	assert(type(clipSet) == "string", "Arg #1 (clipSet) must be a string.")

	local result = native_call(0x01F73A131C18CD94, clipSet)
end
natives.streaming.remove_clip_set = natives.STREAMING.REMOVE_CLIP_SET

--[[
Exemple: REQUEST_IPL("TrevorsTrailerTrash");

Full list of IPLs and interior entity sets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ipls.json
]]
function natives.STREAMING.REQUEST_IPL(--[[const char*]] iplName) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.REQUEST_IPL' due to disabled trusted mode")

	assert(type(iplName) == "string", "Arg #1 (iplName) must be a string.")

	local result = native_call(0x41B4893843BBDB74, iplName)
end
natives.streaming.request_ipl = natives.STREAMING.REQUEST_IPL

--[[
Removes an IPL from the map.

Full list of IPLs and interior entity sets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ipls.json

Example:
C#:
Function.Call(Hash.REMOVE_IPL, "trevorstrailertidy");

C++:
STREAMING::REMOVE_IPL("trevorstrailertidy");

iplName = Name of IPL you want to remove.
]]
function natives.STREAMING.REMOVE_IPL(--[[const char*]] iplName) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.REMOVE_IPL' due to disabled trusted mode")

	assert(type(iplName) == "string", "Arg #1 (iplName) must be a string.")

	local result = native_call(0xEE6C5AD3ECE0A82D, iplName)
end
natives.streaming.remove_ipl = natives.STREAMING.REMOVE_IPL

--[[
Full list of IPLs and interior entity sets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ipls.json
]]
function natives.STREAMING.IS_IPL_ACTIVE(--[[const char*]] iplName) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.IS_IPL_ACTIVE' due to disabled trusted mode")

	assert(type(iplName) == "string", "Arg #1 (iplName) must be a string.")

	local result = native_call(0x88A741E44A2B3495, iplName)
	return result:__tointeger() ~= 0
end
natives.streaming.is_ipl_active = natives.STREAMING.IS_IPL_ACTIVE

function natives.STREAMING.SET_STREAMING(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.SET_STREAMING' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x6E0C692677008888, toggle)
end
natives.streaming.set_streaming = natives.STREAMING.SET_STREAMING

--[[
0 - default
1 - HeistIsland
]]
function natives.STREAMING.LOAD_GLOBAL_WATER_FILE(--[[int]] waterType) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.LOAD_GLOBAL_WATER_FILE' due to disabled trusted mode")

	assert(type(waterType) == "number", "Arg #1 (waterType) must be a number.")

	local result = native_call(0x7E3F55ED251B76D3, waterType)
end
natives.streaming.load_global_water_file = natives.STREAMING.LOAD_GLOBAL_WATER_FILE

function natives.STREAMING.GET_GLOBAL_WATER_FILE() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.GET_GLOBAL_WATER_FILE' due to disabled trusted mode")

	local result = native_call(0xF741BD853611592D)
	return result:__tointeger()
end
natives.streaming.get_global_water_file = natives.STREAMING.GET_GLOBAL_WATER_FILE

function natives.STREAMING.SET_GAME_PAUSES_FOR_STREAMING(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.SET_GAME_PAUSES_FOR_STREAMING' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x717CD6E6FAEBBEDC, toggle)
end
natives.streaming.set_game_pauses_for_streaming = natives.STREAMING.SET_GAME_PAUSES_FOR_STREAMING

function natives.STREAMING.SET_REDUCE_PED_MODEL_BUDGET(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.SET_REDUCE_PED_MODEL_BUDGET' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x77B5F9A36BF96710, toggle)
end
natives.streaming.set_reduce_ped_model_budget = natives.STREAMING.SET_REDUCE_PED_MODEL_BUDGET

function natives.STREAMING.SET_REDUCE_VEHICLE_MODEL_BUDGET(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.SET_REDUCE_VEHICLE_MODEL_BUDGET' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x80C527893080CCF3, toggle)
end
natives.streaming.set_reduce_vehicle_model_budget = natives.STREAMING.SET_REDUCE_VEHICLE_MODEL_BUDGET

--[[
This is a NOP function. It does nothing at all.
]]
function natives.STREAMING.SET_DITCH_POLICE_MODELS(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.SET_DITCH_POLICE_MODELS' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x42CBE54462D92634, toggle)
end
natives.streaming.set_ditch_police_models = natives.STREAMING.SET_DITCH_POLICE_MODELS

function natives.STREAMING.GET_NUMBER_OF_STREAMING_REQUESTS() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.GET_NUMBER_OF_STREAMING_REQUESTS' due to disabled trusted mode")

	local result = native_call(0x4060057271CEBC89)
	return result:__tointeger()
end
natives.streaming.get_number_of_streaming_requests = natives.STREAMING.GET_NUMBER_OF_STREAMING_REQUESTS

--[[
maps script name (thread + 0xD0) by lookup via scriptfx.dat - does nothing when script name is empty
]]
function natives.STREAMING.REQUEST_PTFX_ASSET() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.REQUEST_PTFX_ASSET' due to disabled trusted mode")

	local result = native_call(0x944955FB2A3935C8)
end
natives.streaming.request_ptfx_asset = natives.STREAMING.REQUEST_PTFX_ASSET

function natives.STREAMING.HAS_PTFX_ASSET_LOADED() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.HAS_PTFX_ASSET_LOADED' due to disabled trusted mode")

	local result = native_call(0xCA7D9B86ECA7481B)
	return result:__tointeger() ~= 0
end
natives.streaming.has_ptfx_asset_loaded = natives.STREAMING.HAS_PTFX_ASSET_LOADED

function natives.STREAMING.REMOVE_PTFX_ASSET() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.REMOVE_PTFX_ASSET' due to disabled trusted mode")

	local result = native_call(0x88C6814073DD4A73)
end
natives.streaming.remove_ptfx_asset = natives.STREAMING.REMOVE_PTFX_ASSET

--[[
 From the b678d decompiled scripts:

 STREAMING::REQUEST_NAMED_PTFX_ASSET("core_snow");
 STREAMING::REQUEST_NAMED_PTFX_ASSET("fm_mission_controler");
 STREAMING::REQUEST_NAMED_PTFX_ASSET("proj_xmas_firework");
 STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_apartment_mp");
 STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_biolab_heist");
 STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_indep_fireworks");
 STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_indep_parachute");
 STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_indep_wheelsmoke");
 STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_mp_cig_plane");
 STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_mp_creator");
 STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_mp_tankbattle");
 STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_ornate_heist");
 STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_prison_break_heist_station");
]]
function natives.STREAMING.REQUEST_NAMED_PTFX_ASSET(--[[const char*]] fxName) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.REQUEST_NAMED_PTFX_ASSET' due to disabled trusted mode")

	assert(type(fxName) == "string", "Arg #1 (fxName) must be a string.")

	local result = native_call(0xB80D8756B4668AB6, fxName)
end
natives.streaming.request_named_ptfx_asset = natives.STREAMING.REQUEST_NAMED_PTFX_ASSET

function natives.STREAMING.HAS_NAMED_PTFX_ASSET_LOADED(--[[const char*]] fxName) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.HAS_NAMED_PTFX_ASSET_LOADED' due to disabled trusted mode")

	assert(type(fxName) == "string", "Arg #1 (fxName) must be a string.")

	local result = native_call(0x8702416E512EC454, fxName)
	return result:__tointeger() ~= 0
end
natives.streaming.has_named_ptfx_asset_loaded = natives.STREAMING.HAS_NAMED_PTFX_ASSET_LOADED

function natives.STREAMING.REMOVE_NAMED_PTFX_ASSET(--[[const char*]] fxName) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.REMOVE_NAMED_PTFX_ASSET' due to disabled trusted mode")

	assert(type(fxName) == "string", "Arg #1 (fxName) must be a string.")

	local result = native_call(0x5F61EBBE1A00F96D, fxName)
end
natives.streaming.remove_named_ptfx_asset = natives.STREAMING.REMOVE_NAMED_PTFX_ASSET

function natives.STREAMING.SET_VEHICLE_POPULATION_BUDGET(--[[int]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.SET_VEHICLE_POPULATION_BUDGET' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xCB9E1EB3BE2AF4E9, p0)
end
natives.streaming.set_vehicle_population_budget = natives.STREAMING.SET_VEHICLE_POPULATION_BUDGET

--[[
Control how many new (ambient?) peds will spawn in the game world.
Range for p0 seems to be 0-3, where 0 is none and 3 is the normal level.
]]
function natives.STREAMING.SET_PED_POPULATION_BUDGET(--[[int]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.SET_PED_POPULATION_BUDGET' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x8C95333CFC3340F3, p0)
end
natives.streaming.set_ped_population_budget = natives.STREAMING.SET_PED_POPULATION_BUDGET

function natives.STREAMING.CLEAR_FOCUS() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.CLEAR_FOCUS' due to disabled trusted mode")

	local result = native_call(0x31B73D1EA9F01DA2)
end
natives.streaming.clear_focus = natives.STREAMING.CLEAR_FOCUS

--[[
Override the area where the camera will render the terrain.
p3, p4 and p5 are usually set to 0.0

]]
function natives.STREAMING.SET_FOCUS_POS_AND_VEL(--[[float]] x, --[[float]] y, --[[float]] z, --[[float]] offsetX, --[[float]] offsetY, --[[float]] offsetZ) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.SET_FOCUS_POS_AND_VEL' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(offsetX) == "number", "Arg #4 (offsetX) must be a number.")
	assert(type(offsetY) == "number", "Arg #5 (offsetY) must be a number.")
	assert(type(offsetZ) == "number", "Arg #6 (offsetZ) must be a number.")

	local result = native_call(0xBB7454BAFF08FE25, x, y, z, offsetX, offsetY, offsetZ)
end
natives.streaming.set_focus_pos_and_vel = natives.STREAMING.SET_FOCUS_POS_AND_VEL

--[[
It seems to make the entity's coords mark the point from which LOD-distances are measured. In my testing, setting a vehicle as the focus entity and moving that vehicle more than 300 distance units away from the player will make the level of detail around the player go down drastically (shadows disappear, textures go extremely low res, etc). The player seems to be the default focus entity.
]]
function natives.STREAMING.SET_FOCUS_ENTITY(--[[Entity]] entity) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.SET_FOCUS_ENTITY' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0x198F77705FA0931D, entity)
end
natives.streaming.set_focus_entity = natives.STREAMING.SET_FOCUS_ENTITY

function natives.STREAMING.IS_ENTITY_FOCUS(--[[Entity]] entity) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.IS_ENTITY_FOCUS' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0x2DDFF3FB9075D747, entity)
	return result:__tointeger() ~= 0
end
natives.streaming.is_entity_focus = natives.STREAMING.IS_ENTITY_FOCUS

function natives.STREAMING.SET_RESTORE_FOCUS_ENTITY(--[[Entity]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.SET_RESTORE_FOCUS_ENTITY' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x0811381EF5062FEC, p0)
end
natives.streaming.set_restore_focus_entity = natives.STREAMING.SET_RESTORE_FOCUS_ENTITY

--[[
Possible p0 values:

"prologue"
"Prologue_Main"
]]
function natives.STREAMING.SET_MAPDATACULLBOX_ENABLED(--[[const char*]] name, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.SET_MAPDATACULLBOX_ENABLED' due to disabled trusted mode")

	assert(type(name) == "string", "Arg #1 (name) must be a string.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xAF12610C644A35C9, name, toggle)
end
natives.streaming.set_mapdatacullbox_enabled = natives.STREAMING.SET_MAPDATACULLBOX_ENABLED

--[[
This native does absolutely nothing, just a nullsub
]]
function natives.STREAMING.SET_ALL_MAPDATA_CULLED(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.SET_ALL_MAPDATA_CULLED' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x4E52E752C76E7E7A, p0)
end
natives.streaming.set_all_mapdata_culled = natives.STREAMING.SET_ALL_MAPDATA_CULLED

--[[
Always returns zero.
]]
function natives.STREAMING.STREAMVOL_CREATE_SPHERE(--[[float]] x, --[[float]] y, --[[float]] z, --[[float]] rad, --[[Any]] p4, --[[Any]] p5) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.STREAMVOL_CREATE_SPHERE' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(rad) == "number", "Arg #4 (rad) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")

	local result = native_call(0x219C7B8D53E429FD, x, y, z, rad, p4, p5)
	return result:__tointeger()
end
natives.streaming.streamvol_create_sphere = natives.STREAMING.STREAMVOL_CREATE_SPHERE

--[[
Always returns zero.
]]
function natives.STREAMING.STREAMVOL_CREATE_FRUSTUM(--[[float]] p0, --[[float]] p1, --[[float]] p2, --[[float]] p3, --[[float]] p4, --[[float]] p5, --[[float]] p6, --[[Any]] p7, --[[Any]] p8) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.STREAMVOL_CREATE_FRUSTUM' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")
	assert(type(p6) == "number", "Arg #7 (p6) must be a number.")
	assert(type(p7) == "number", "Arg #8 (p7) must be a number.")
	assert(type(p8) == "number", "Arg #9 (p8) must be a number.")

	local result = native_call(0x1F3F018BC3AFA77C, p0, p1, p2, p3, p4, p5, p6, p7, p8)
	return result:__tointeger()
end
natives.streaming.streamvol_create_frustum = natives.STREAMING.STREAMVOL_CREATE_FRUSTUM

--[[
Always returns zero.
]]
function natives.STREAMING.STREAMVOL_CREATE_LINE(--[[float]] p0, --[[float]] p1, --[[float]] p2, --[[float]] p3, --[[float]] p4, --[[float]] p5, --[[Any]] p6) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.STREAMVOL_CREATE_LINE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")
	assert(type(p6) == "number", "Arg #7 (p6) must be a number.")

	local result = native_call(0x0AD9710CEE2F590F, p0, p1, p2, p3, p4, p5, p6)
	return result:__tointeger()
end
natives.streaming.streamvol_create_line = natives.STREAMING.STREAMVOL_CREATE_LINE

function natives.STREAMING.STREAMVOL_DELETE(--[[Any]] unused) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.STREAMVOL_DELETE' due to disabled trusted mode")

	assert(type(unused) == "number", "Arg #1 (unused) must be a number.")

	local result = native_call(0x1EE7D8DF4425F053, unused)
end
natives.streaming.streamvol_delete = natives.STREAMING.STREAMVOL_DELETE

function natives.STREAMING.STREAMVOL_HAS_LOADED(--[[Any]] unused) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.STREAMVOL_HAS_LOADED' due to disabled trusted mode")

	assert(type(unused) == "number", "Arg #1 (unused) must be a number.")

	local result = native_call(0x7D41E9D2D17C5B2D, unused)
	return result:__tointeger() ~= 0
end
natives.streaming.streamvol_has_loaded = natives.STREAMING.STREAMVOL_HAS_LOADED

function natives.STREAMING.STREAMVOL_IS_VALID(--[[Any]] unused) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.STREAMVOL_IS_VALID' due to disabled trusted mode")

	assert(type(unused) == "number", "Arg #1 (unused) must be a number.")

	local result = native_call(0x07C313F94746702C, unused)
	return result:__tointeger() ~= 0
end
natives.streaming.streamvol_is_valid = natives.STREAMING.STREAMVOL_IS_VALID

function natives.STREAMING.IS_STREAMVOL_ACTIVE() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.IS_STREAMVOL_ACTIVE' due to disabled trusted mode")

	local result = native_call(0xBC9823AB80A3DCAC)
	return result:__tointeger() ~= 0
end
natives.streaming.is_streamvol_active = natives.STREAMING.IS_STREAMVOL_ACTIVE

--[[
`radius` value is usually between `3f` and `7000f` in original 1868 scripts.
`p7` is 0, 1, 2, 3 or 4 used in decompiled scripts, 0 is by far the most common.
Returns True if success, used only 7 times in decompiled scripts of 1868
]]
function natives.STREAMING.NEW_LOAD_SCENE_START(--[[float]] posX, --[[float]] posY, --[[float]] posZ, --[[float]] offsetX, --[[float]] offsetY, --[[float]] offsetZ, --[[float]] radius, --[[int]] p7) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.NEW_LOAD_SCENE_START' due to disabled trusted mode")

	assert(type(posX) == "number", "Arg #1 (posX) must be a number.")
	assert(type(posY) == "number", "Arg #2 (posY) must be a number.")
	assert(type(posZ) == "number", "Arg #3 (posZ) must be a number.")
	assert(type(offsetX) == "number", "Arg #4 (offsetX) must be a number.")
	assert(type(offsetY) == "number", "Arg #5 (offsetY) must be a number.")
	assert(type(offsetZ) == "number", "Arg #6 (offsetZ) must be a number.")
	assert(type(radius) == "number", "Arg #7 (radius) must be a number.")
	assert(type(p7) == "number", "Arg #8 (p7) must be a number.")

	local result = native_call(0x212A8D0D2BABFAC2, posX, posY, posZ, offsetX, offsetY, offsetZ, radius, p7)
	return result:__tointeger() ~= 0
end
natives.streaming.new_load_scene_start = natives.STREAMING.NEW_LOAD_SCENE_START

--[[
if (!sub_8f12("START LOAD SCENE SAFE")) {
    if (CUTSCENE::GET_CUTSCENE_TIME() > 4178) {
        STREAMING::_ACCFB4ACF53551B0(1973.845458984375, 3818.447265625, 32.43629837036133, 15.0, 2);
        sub_8e9e("START LOAD SCENE SAFE", 1);
    }
}

(Previously known as STREAMING::_NEW_LOAD_SCENE_START_SAFE)
]]
function natives.STREAMING.NEW_LOAD_SCENE_START_SPHERE(--[[float]] x, --[[float]] y, --[[float]] z, --[[float]] radius, --[[Any]] p4) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.NEW_LOAD_SCENE_START_SPHERE' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(radius) == "number", "Arg #4 (radius) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")

	local result = native_call(0xACCFB4ACF53551B0, x, y, z, radius, p4)
	return result:__tointeger() ~= 0
end
natives.streaming.new_load_scene_start_sphere = natives.STREAMING.NEW_LOAD_SCENE_START_SPHERE

function natives.STREAMING.NEW_LOAD_SCENE_STOP() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.NEW_LOAD_SCENE_STOP' due to disabled trusted mode")

	local result = native_call(0xC197616D221FF4A4)
end
natives.streaming.new_load_scene_stop = natives.STREAMING.NEW_LOAD_SCENE_STOP

function natives.STREAMING.IS_NEW_LOAD_SCENE_ACTIVE() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.IS_NEW_LOAD_SCENE_ACTIVE' due to disabled trusted mode")

	local result = native_call(0xA41A05B6CB741B85)
	return result:__tointeger() ~= 0
end
natives.streaming.is_new_load_scene_active = natives.STREAMING.IS_NEW_LOAD_SCENE_ACTIVE

function natives.STREAMING.IS_NEW_LOAD_SCENE_LOADED() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.IS_NEW_LOAD_SCENE_LOADED' due to disabled trusted mode")

	local result = native_call(0x01B8247A7A8B9AD1)
	return result:__tointeger() ~= 0
end
natives.streaming.is_new_load_scene_loaded = natives.STREAMING.IS_NEW_LOAD_SCENE_LOADED

function natives.STREAMING.IS_SAFE_TO_START_PLAYER_SWITCH() -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.IS_SAFE_TO_START_PLAYER_SWITCH' due to disabled trusted mode")

	local result = native_call(0x71E7B2E657449AAD)
	return result:__tointeger()
end
natives.streaming.is_safe_to_start_player_switch = natives.STREAMING.IS_SAFE_TO_START_PLAYER_SWITCH

--[[
// this enum comes directly from R* so don't edit this
enum ePlayerSwitchTypes
{
  SWITCH_TYPE_AUTO,
 SWITCH_TYPE_LONG,
 SWITCH_TYPE_MEDIUM,
   SWITCH_TYPE_SHORT
};

Use GET_IDEAL_PLAYER_SWITCH_TYPE for the best switch type.

----------------------------------------------------

Examples from the decompiled scripts:

STREAMING::START_PLAYER_SWITCH(l_832._f3, PLAYER::PLAYER_PED_ID(), 0, 3);
STREAMING::START_PLAYER_SWITCH(l_832._f3, PLAYER::PLAYER_PED_ID(), 2050, 3);
STREAMING::START_PLAYER_SWITCH(PLAYER::PLAYER_PED_ID(), l_832._f3, 1024, 3);
STREAMING::START_PLAYER_SWITCH(g_141F27, PLAYER::PLAYER_PED_ID(), 513, v_14);

Note: DO NOT, use SWITCH_TYPE_LONG with flag 513. It leaves you stuck in the clouds. You'll have to call STOP_PLAYER_SWITCH() to return to your ped.

Flag 8 w/ SWITCH_TYPE_LONG will zoom out 3 steps, then zoom in 2/3 steps and stop on the 3rd and just hang there.
Flag 8 w/ SWITCH_TYPE_MEDIUM will zoom out 1 step, and just hang there.
]]
function natives.STREAMING.START_PLAYER_SWITCH(--[[Ped]] from, --[[Ped]] to, --[[int]] flags, --[[int]] switchType) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.START_PLAYER_SWITCH' due to disabled trusted mode")

	assert(type(from) == "number", "Arg #1 (from) must be a number.")
	assert(type(to) == "number", "Arg #2 (to) must be a number.")
	assert(type(flags) == "number", "Arg #3 (flags) must be a number.")
	assert(type(switchType) == "number", "Arg #4 (switchType) must be a number.")

	local result = native_call(0xFAA23F2CBA159D67, from, to, flags, switchType)
end
natives.streaming.start_player_switch = natives.STREAMING.START_PLAYER_SWITCH

function natives.STREAMING.STOP_PLAYER_SWITCH() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.STOP_PLAYER_SWITCH' due to disabled trusted mode")

	local result = native_call(0x95C0A5BBDC189AA1)
end
natives.streaming.stop_player_switch = natives.STREAMING.STOP_PLAYER_SWITCH

--[[
Returns true if the player is currently switching, false otherwise.
(When the camera is in the sky moving from Trevor to Franklin for example)
]]
function natives.STREAMING.IS_PLAYER_SWITCH_IN_PROGRESS() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.IS_PLAYER_SWITCH_IN_PROGRESS' due to disabled trusted mode")

	local result = native_call(0xD9D2CFFF49FAB35F)
	return result:__tointeger() ~= 0
end
natives.streaming.is_player_switch_in_progress = natives.STREAMING.IS_PLAYER_SWITCH_IN_PROGRESS

function natives.STREAMING.GET_PLAYER_SWITCH_TYPE() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.GET_PLAYER_SWITCH_TYPE' due to disabled trusted mode")

	local result = native_call(0xB3C94A90D9FC9E62)
	return result:__tointeger()
end
natives.streaming.get_player_switch_type = natives.STREAMING.GET_PLAYER_SWITCH_TYPE

--[[
x1, y1, z1 -- Coords of your ped model
x2, y2, z2 -- Coords of the ped you want to switch to
]]
function natives.STREAMING.GET_IDEAL_PLAYER_SWITCH_TYPE(--[[float]] x1, --[[float]] y1, --[[float]] z1, --[[float]] x2, --[[float]] y2, --[[float]] z2) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.GET_IDEAL_PLAYER_SWITCH_TYPE' due to disabled trusted mode")

	assert(type(x1) == "number", "Arg #1 (x1) must be a number.")
	assert(type(y1) == "number", "Arg #2 (y1) must be a number.")
	assert(type(z1) == "number", "Arg #3 (z1) must be a number.")
	assert(type(x2) == "number", "Arg #4 (x2) must be a number.")
	assert(type(y2) == "number", "Arg #5 (y2) must be a number.")
	assert(type(z2) == "number", "Arg #6 (z2) must be a number.")

	local result = native_call(0xB5D7B26B45720E05, x1, y1, z1, x2, y2, z2)
	return result:__tointeger()
end
natives.streaming.get_ideal_player_switch_type = natives.STREAMING.GET_IDEAL_PLAYER_SWITCH_TYPE

function natives.STREAMING.GET_PLAYER_SWITCH_STATE() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.GET_PLAYER_SWITCH_STATE' due to disabled trusted mode")

	local result = native_call(0x470555300D10B2A5)
	return result:__tointeger()
end
natives.streaming.get_player_switch_state = natives.STREAMING.GET_PLAYER_SWITCH_STATE

function natives.STREAMING.GET_PLAYER_SHORT_SWITCH_STATE() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.GET_PLAYER_SHORT_SWITCH_STATE' due to disabled trusted mode")

	local result = native_call(0x20F898A5D9782800)
	return result:__tointeger()
end
natives.streaming.get_player_short_switch_state = natives.STREAMING.GET_PLAYER_SHORT_SWITCH_STATE

function natives.STREAMING.SET_PLAYER_SHORT_SWITCH_STYLE(--[[int]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.SET_PLAYER_SHORT_SWITCH_STYLE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x5F2013F8BC24EE69, p0)
end
natives.streaming.set_player_short_switch_style = natives.STREAMING.SET_PLAYER_SHORT_SWITCH_STYLE

function natives.STREAMING.GET_PLAYER_SWITCH_JUMP_CUT_INDEX() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.GET_PLAYER_SWITCH_JUMP_CUT_INDEX' due to disabled trusted mode")

	local result = native_call(0x78C0D93253149435)
	return result:__tointeger()
end
natives.streaming.get_player_switch_jump_cut_index = natives.STREAMING.GET_PLAYER_SWITCH_JUMP_CUT_INDEX

function natives.STREAMING.SET_PLAYER_SWITCH_OUTRO(--[[float]] cameraCoordX, --[[float]] cameraCoordY, --[[float]] cameraCoordZ, --[[float]] camRotationX, --[[float]] camRotationY, --[[float]] camRotationZ, --[[float]] camFov, --[[float]] camFarClip, --[[int]] rotationOrder) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.SET_PLAYER_SWITCH_OUTRO' due to disabled trusted mode")

	assert(type(cameraCoordX) == "number", "Arg #1 (cameraCoordX) must be a number.")
	assert(type(cameraCoordY) == "number", "Arg #2 (cameraCoordY) must be a number.")
	assert(type(cameraCoordZ) == "number", "Arg #3 (cameraCoordZ) must be a number.")
	assert(type(camRotationX) == "number", "Arg #4 (camRotationX) must be a number.")
	assert(type(camRotationY) == "number", "Arg #5 (camRotationY) must be a number.")
	assert(type(camRotationZ) == "number", "Arg #6 (camRotationZ) must be a number.")
	assert(type(camFov) == "number", "Arg #7 (camFov) must be a number.")
	assert(type(camFarClip) == "number", "Arg #8 (camFarClip) must be a number.")
	assert(type(rotationOrder) == "number", "Arg #9 (rotationOrder) must be a number.")

	local result = native_call(0xC208B673CE446B61, cameraCoordX, cameraCoordY, cameraCoordZ, camRotationX, camRotationY, camRotationZ, camFov, camFarClip, rotationOrder)
end
natives.streaming.set_player_switch_outro = natives.STREAMING.SET_PLAYER_SWITCH_OUTRO

--[[
All names can be found in playerswitchestablishingshots.meta
]]
function natives.STREAMING.SET_PLAYER_SWITCH_ESTABLISHING_SHOT(--[[const char*]] name) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.SET_PLAYER_SWITCH_ESTABLISHING_SHOT' due to disabled trusted mode")

	assert(type(name) == "string", "Arg #1 (name) must be a string.")

	local result = native_call(0x0FDE9DBFC0A6BC65, name)
end
natives.streaming.set_player_switch_establishing_shot = natives.STREAMING.SET_PLAYER_SWITCH_ESTABLISHING_SHOT

function natives.STREAMING.ALLOW_PLAYER_SWITCH_PAN() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.ALLOW_PLAYER_SWITCH_PAN' due to disabled trusted mode")

	local result = native_call(0x43D1680C6D19A8E9)
end
natives.streaming.allow_player_switch_pan = natives.STREAMING.ALLOW_PLAYER_SWITCH_PAN

function natives.STREAMING.ALLOW_PLAYER_SWITCH_OUTRO() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.ALLOW_PLAYER_SWITCH_OUTRO' due to disabled trusted mode")

	local result = native_call(0x74DE2E8739086740)
end
natives.streaming.allow_player_switch_outro = natives.STREAMING.ALLOW_PLAYER_SWITCH_OUTRO

function natives.STREAMING.ALLOW_PLAYER_SWITCH_ASCENT() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.ALLOW_PLAYER_SWITCH_ASCENT' due to disabled trusted mode")

	local result = native_call(0x8E2A065ABDAE6994)
end
natives.streaming.allow_player_switch_ascent = natives.STREAMING.ALLOW_PLAYER_SWITCH_ASCENT

function natives.STREAMING.ALLOW_PLAYER_SWITCH_DESCENT() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.ALLOW_PLAYER_SWITCH_DESCENT' due to disabled trusted mode")

	local result = native_call(0xAD5FDF34B81BFE79)
end
natives.streaming.allow_player_switch_descent = natives.STREAMING.ALLOW_PLAYER_SWITCH_DESCENT

function natives.STREAMING.IS_SWITCH_READY_FOR_DESCENT() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.IS_SWITCH_READY_FOR_DESCENT' due to disabled trusted mode")

	local result = native_call(0xDFA80CB25D0A19B3)
	return result:__tointeger() ~= 0
end
natives.streaming.is_switch_ready_for_descent = natives.STREAMING.IS_SWITCH_READY_FOR_DESCENT

function natives.STREAMING.ENABLE_SWITCH_PAUSE_BEFORE_DESCENT() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.ENABLE_SWITCH_PAUSE_BEFORE_DESCENT' due to disabled trusted mode")

	local result = native_call(0xD4793DFF3AF2ABCD)
end
natives.streaming.enable_switch_pause_before_descent = natives.STREAMING.ENABLE_SWITCH_PAUSE_BEFORE_DESCENT

function natives.STREAMING.DISABLE_SWITCH_OUTRO_FX() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.DISABLE_SWITCH_OUTRO_FX' due to disabled trusted mode")

	local result = native_call(0xBD605B8E0E18B3BB)
end
natives.streaming.disable_switch_outro_fx = natives.STREAMING.DISABLE_SWITCH_OUTRO_FX

--[[
doesn't act normally when used on mount chilliad
Flags is a bitflag:
2^n - Enabled Functionality:
0 - Skip camera rotate up
3 - Wait for SET_PLAYER_SWITCH_ESTABLISHING_SHOT / hang at last step. You will still need to run 0x74DE2E8739086740 to exit "properly" and then STOP_PLAYER_SWITCH
6 - Invert Switch Direction (false = out, true = in)
8 - Hang above ped

switchType: 0 - 3
0: 1 step towards ped
1: 3 steps out from ped
2: 1 step out from ped
3: 1 step towards ped
]]
function natives.STREAMING.SWITCH_TO_MULTI_FIRSTPART(--[[Ped]] ped, --[[int]] flags, --[[int]] switchType) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.SWITCH_TO_MULTI_FIRSTPART' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(flags) == "number", "Arg #2 (flags) must be a number.")
	assert(type(switchType) == "number", "Arg #3 (switchType) must be a number.")

	local result = native_call(0xAAB3200ED59016BC, ped, flags, switchType)
end
natives.streaming.switch_to_multi_firstpart = natives.STREAMING.SWITCH_TO_MULTI_FIRSTPART

function natives.STREAMING.SWITCH_TO_MULTI_SECONDPART(--[[Ped]] ped) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.SWITCH_TO_MULTI_SECONDPART' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0xD8295AF639FD9CB8, ped)
end
natives.streaming.switch_to_multi_secondpart = natives.STREAMING.SWITCH_TO_MULTI_SECONDPART

function natives.STREAMING.IS_SWITCH_TO_MULTI_FIRSTPART_FINISHED() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.IS_SWITCH_TO_MULTI_FIRSTPART_FINISHED' due to disabled trusted mode")

	local result = native_call(0x933BBEEB8C61B5F4)
	return result:__tointeger() ~= 0
end
natives.streaming.is_switch_to_multi_firstpart_finished = natives.STREAMING.IS_SWITCH_TO_MULTI_FIRSTPART_FINISHED

function natives.STREAMING.GET_PLAYER_SWITCH_INTERP_OUT_DURATION() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.GET_PLAYER_SWITCH_INTERP_OUT_DURATION' due to disabled trusted mode")

	local result = native_call(0x08C2D6C52A3104BB)
	return result:__tointeger()
end
natives.streaming.get_player_switch_interp_out_duration = natives.STREAMING.GET_PLAYER_SWITCH_INTERP_OUT_DURATION

function natives.STREAMING.GET_PLAYER_SWITCH_INTERP_OUT_CURRENT_TIME() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.GET_PLAYER_SWITCH_INTERP_OUT_CURRENT_TIME' due to disabled trusted mode")

	local result = native_call(0x5B48A06DD0E792A5)
	return result:__tointeger()
end
natives.streaming.get_player_switch_interp_out_current_time = natives.STREAMING.GET_PLAYER_SWITCH_INTERP_OUT_CURRENT_TIME

function natives.STREAMING.IS_SWITCH_SKIPPING_DESCENT() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.IS_SWITCH_SKIPPING_DESCENT' due to disabled trusted mode")

	local result = native_call(0x5B74EA8CFD5E3E7E)
	return result:__tointeger() ~= 0
end
natives.streaming.is_switch_skipping_descent = natives.STREAMING.IS_SWITCH_SKIPPING_DESCENT

function natives.STREAMING.SET_SCENE_STREAMING_TRACKS_CAM_POS_THIS_FRAME() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.SET_SCENE_STREAMING_TRACKS_CAM_POS_THIS_FRAME' due to disabled trusted mode")

	local result = native_call(0x1E9057A74FD73E23)
end
natives.streaming.set_scene_streaming_tracks_cam_pos_this_frame = natives.STREAMING.SET_SCENE_STREAMING_TRACKS_CAM_POS_THIS_FRAME

function natives.STREAMING.GET_LODSCALE() -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.GET_LODSCALE' due to disabled trusted mode")

	local result = native_call(0x0C15B0E443B2349D)
	return result:__tonumber()
end
natives.streaming.get_lodscale = natives.STREAMING.GET_LODSCALE

--[[
This allows you to override "extended distance scaling" setting. Needs to be called each frame.
Max scaling seems to be 200.0, normal is 1.0
See https://gfycat.com/DetailedHauntingIncatern
]]
function natives.STREAMING.OVERRIDE_LODSCALE_THIS_FRAME(--[[float]] scaling) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.OVERRIDE_LODSCALE_THIS_FRAME' due to disabled trusted mode")

	assert(type(scaling) == "number", "Arg #1 (scaling) must be a number.")

	local result = native_call(0xA76359FC80B2438E, scaling)
end
natives.streaming.override_lodscale_this_frame = natives.STREAMING.OVERRIDE_LODSCALE_THIS_FRAME

function natives.STREAMING.REMAP_LODSCALE_RANGE_THIS_FRAME(--[[float]] p0, --[[float]] p1, --[[float]] p2, --[[float]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.REMAP_LODSCALE_RANGE_THIS_FRAME' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0xBED8CA5FF5E04113, p0, p1, p2, p3)
end
natives.streaming.remap_lodscale_range_this_frame = natives.STREAMING.REMAP_LODSCALE_RANGE_THIS_FRAME

function natives.STREAMING.SUPPRESS_HD_MAP_STREAMING_THIS_FRAME() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.SUPPRESS_HD_MAP_STREAMING_THIS_FRAME' due to disabled trusted mode")

	local result = native_call(0x472397322E92A856)
end
natives.streaming.suppress_hd_map_streaming_this_frame = natives.STREAMING.SUPPRESS_HD_MAP_STREAMING_THIS_FRAME

function natives.STREAMING.SET_RENDER_HD_ONLY(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.SET_RENDER_HD_ONLY' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x40AEFD1A244741F2, toggle)
end
natives.streaming.set_render_hd_only = natives.STREAMING.SET_RENDER_HD_ONLY

function natives.STREAMING.FORCE_ALLOW_TIME_BASED_FADING_THIS_FRAME() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.FORCE_ALLOW_TIME_BASED_FADING_THIS_FRAME' due to disabled trusted mode")

	local result = native_call(0x03F1A106BDA7DD3E)
end
natives.streaming.force_allow_time_based_fading_this_frame = natives.STREAMING.FORCE_ALLOW_TIME_BASED_FADING_THIS_FRAME

function natives.STREAMING.IPL_GROUP_SWAP_START(--[[const char*]] iplName1, --[[const char*]] iplName2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.IPL_GROUP_SWAP_START' due to disabled trusted mode")

	assert(type(iplName1) == "string", "Arg #1 (iplName1) must be a string.")
	assert(type(iplName2) == "string", "Arg #2 (iplName2) must be a string.")

	local result = native_call(0x95A7DABDDBB78AE7, iplName1, iplName2)
end
natives.streaming.ipl_group_swap_start = natives.STREAMING.IPL_GROUP_SWAP_START

function natives.STREAMING.IPL_GROUP_SWAP_CANCEL() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.IPL_GROUP_SWAP_CANCEL' due to disabled trusted mode")

	local result = native_call(0x63EB2B972A218CAC)
end
natives.streaming.ipl_group_swap_cancel = natives.STREAMING.IPL_GROUP_SWAP_CANCEL

function natives.STREAMING.IPL_GROUP_SWAP_IS_READY() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.IPL_GROUP_SWAP_IS_READY' due to disabled trusted mode")

	local result = native_call(0xFB199266061F820A)
	return result:__tointeger() ~= 0
end
natives.streaming.ipl_group_swap_is_ready = natives.STREAMING.IPL_GROUP_SWAP_IS_READY

function natives.STREAMING.IPL_GROUP_SWAP_FINISH() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.IPL_GROUP_SWAP_FINISH' due to disabled trusted mode")

	local result = native_call(0xF4A0DADB70F57FA6)
end
natives.streaming.ipl_group_swap_finish = natives.STREAMING.IPL_GROUP_SWAP_FINISH

function natives.STREAMING.IPL_GROUP_SWAP_IS_ACTIVE() -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.IPL_GROUP_SWAP_IS_ACTIVE' due to disabled trusted mode")

	local result = native_call(0x5068F488DDB54DD8)
	return result:__tointeger()
end
natives.streaming.ipl_group_swap_is_active = natives.STREAMING.IPL_GROUP_SWAP_IS_ACTIVE

--[[
This native is used to attribute the SRL that BEGIN_SRL is going to load. This is usually used for 'in-game' cinematics (not cutscenes but camera stuff) instead of SET_FOCUS_POS_AND_VEL because it loads a specific area of the map which is pretty useful when the camera moves from distant areas.
For instance, GTA:O opening cutscene.
https://pastebin.com/2EeKVeLA : a list of SRL found in srllist.meta
https://pastebin.com/zd9XYUWY here is the content of a SRL file opened with codewalker.
]]
function natives.STREAMING.PREFETCH_SRL(--[[const char*]] srl) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.PREFETCH_SRL' due to disabled trusted mode")

	assert(type(srl) == "string", "Arg #1 (srl) must be a string.")

	local result = native_call(0x3D245789CE12982C, srl)
end
natives.streaming.prefetch_srl = natives.STREAMING.PREFETCH_SRL

--[[
Returns true when the srl from BEGIN_SRL is loaded.
]]
function natives.STREAMING.IS_SRL_LOADED() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.IS_SRL_LOADED' due to disabled trusted mode")

	local result = native_call(0xD0263801A4C5B0BB)
	return result:__tointeger() ~= 0
end
natives.streaming.is_srl_loaded = natives.STREAMING.IS_SRL_LOADED

function natives.STREAMING.BEGIN_SRL() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.BEGIN_SRL' due to disabled trusted mode")

	local result = native_call(0x9BADDC94EF83B823)
end
natives.streaming.begin_srl = natives.STREAMING.BEGIN_SRL

--[[
Clear the current srl and stop rendering the area selected by PREFETCH_SRL and started with BEGIN_SRL.
]]
function natives.STREAMING.END_SRL() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.END_SRL' due to disabled trusted mode")

	local result = native_call(0x0A41540E63C9EE17)
end
natives.streaming.end_srl = natives.STREAMING.END_SRL

function natives.STREAMING.SET_SRL_TIME(--[[float]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.SET_SRL_TIME' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xA74A541C6884E7B8, p0)
end
natives.streaming.set_srl_time = natives.STREAMING.SET_SRL_TIME

function natives.STREAMING.SET_SRL_POST_CUTSCENE_CAMERA(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3, --[[Any]] p4, --[[Any]] p5) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.SET_SRL_POST_CUTSCENE_CAMERA' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")

	local result = native_call(0xEF39EE20C537E98C, p0, p1, p2, p3, p4, p5)
end
natives.streaming.set_srl_post_cutscene_camera = natives.STREAMING.SET_SRL_POST_CUTSCENE_CAMERA

function natives.STREAMING.SET_SRL_READAHEAD_TIMES(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.SET_SRL_READAHEAD_TIMES' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0xBEB2D9A1D9A8F55A, p0, p1, p2, p3)
end
natives.streaming.set_srl_readahead_times = natives.STREAMING.SET_SRL_READAHEAD_TIMES

function natives.STREAMING.SET_SRL_LONG_JUMP_MODE(--[[BOOL]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.SET_SRL_LONG_JUMP_MODE' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0x20C6C7E4EB082A7F, p0)
end
natives.streaming.set_srl_long_jump_mode = natives.STREAMING.SET_SRL_LONG_JUMP_MODE

function natives.STREAMING.SET_SRL_FORCE_PRESTREAM(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.SET_SRL_FORCE_PRESTREAM' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xF8155A7F03DDFC8E, p0)
end
natives.streaming.set_srl_force_prestream = natives.STREAMING.SET_SRL_FORCE_PRESTREAM

function natives.STREAMING.SET_HD_AREA(--[[float]] x, --[[float]] y, --[[float]] z, --[[float]] radius) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.SET_HD_AREA' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(radius) == "number", "Arg #4 (radius) must be a number.")

	local result = native_call(0xB85F26619073E775, x, y, z, radius)
end
natives.streaming.set_hd_area = natives.STREAMING.SET_HD_AREA

function natives.STREAMING.CLEAR_HD_AREA() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.CLEAR_HD_AREA' due to disabled trusted mode")

	local result = native_call(0xCE58B1CFB9290813)
end
natives.streaming.clear_hd_area = natives.STREAMING.CLEAR_HD_AREA

function natives.STREAMING.INIT_CREATOR_BUDGET() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.INIT_CREATOR_BUDGET' due to disabled trusted mode")

	local result = native_call(0xB5A4DB34FE89B88A)
end
natives.streaming.init_creator_budget = natives.STREAMING.INIT_CREATOR_BUDGET

function natives.STREAMING.SHUTDOWN_CREATOR_BUDGET() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.SHUTDOWN_CREATOR_BUDGET' due to disabled trusted mode")

	local result = native_call(0xCCE26000E9A6FAD7)
end
natives.streaming.shutdown_creator_budget = natives.STREAMING.SHUTDOWN_CREATOR_BUDGET

function natives.STREAMING.ADD_MODEL_TO_CREATOR_BUDGET(--[[Hash]] modelHash) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.ADD_MODEL_TO_CREATOR_BUDGET' due to disabled trusted mode")

	assert(type(modelHash) == "number", "Arg #1 (modelHash) must be a number.")

	local result = native_call(0x0BC3144DEB678666, modelHash)
	return result:__tointeger() ~= 0
end
natives.streaming.add_model_to_creator_budget = natives.STREAMING.ADD_MODEL_TO_CREATOR_BUDGET

function natives.STREAMING.REMOVE_MODEL_FROM_CREATOR_BUDGET(--[[Hash]] modelHash) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.REMOVE_MODEL_FROM_CREATOR_BUDGET' due to disabled trusted mode")

	assert(type(modelHash) == "number", "Arg #1 (modelHash) must be a number.")

	local result = native_call(0xF086AD9354FAC3A3, modelHash)
end
natives.streaming.remove_model_from_creator_budget = natives.STREAMING.REMOVE_MODEL_FROM_CREATOR_BUDGET

--[[
0.0 = no memory used
1.0 = all memory used

Maximum model memory (as defined in common\data\missioncreatordata.meta) is 100 MiB
]]
function natives.STREAMING.GET_USED_CREATOR_BUDGET() -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.GET_USED_CREATOR_BUDGET' due to disabled trusted mode")

	local result = native_call(0x3D3D8B3BE5A83D35)
	return result:__tonumber()
end
natives.streaming.get_used_creator_budget = natives.STREAMING.GET_USED_CREATOR_BUDGET

--[[
Enables the specified island. For more information, see islandhopper.meta
]]
function natives.STREAMING.SET_ISLAND_ENABLED(--[[const char*]] name, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'STREAMING.SET_ISLAND_ENABLED' due to disabled trusted mode")

	assert(type(name) == "string", "Arg #1 (name) must be a string.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x9A9D1BA639675CF1, name, toggle)
end
natives.streaming.set_island_enabled = natives.STREAMING.SET_ISLAND_ENABLED


natives.TASK = {}
natives.task = {}

--[[
Stand still (?)
]]
function natives.TASK.TASK_PAUSE(--[[Ped]] ped, --[[int]] ms) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_PAUSE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(ms) == "number", "Arg #2 (ms) must be a number.")

	local result = native_call(0xE73A266DB0CA9042, ped, ms)
end
natives.task.task_pause = natives.TASK.TASK_PAUSE

--[[
Makes the specified ped stand still for (time) milliseconds.
]]
function natives.TASK.TASK_STAND_STILL(--[[Ped]] ped, --[[int]] time) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_STAND_STILL' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(time) == "number", "Arg #2 (time) must be a number.")

	local result = native_call(0x919BE13EED931959, ped, time)
end
natives.task.task_stand_still = natives.TASK.TASK_STAND_STILL

--[[
Definition is wrong. This has 4 parameters (Not sure when they were added. v350 has 2, v678 has 4).

v350: Ped ped, bool unused
v678: Ped ped, bool unused, bool flag1, bool flag2

flag1 = super jump, flag2 = do nothing if flag1 is false and doubles super jump height if flag1 is true.
]]
function natives.TASK.TASK_JUMP(--[[Ped]] ped, --[[BOOL]] usePlayerLaunchForce, --[[BOOL]] doSuperJump, --[[BOOL]] useFullSuperJumpForce) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_JUMP' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(usePlayerLaunchForce) == "boolean", "Arg #2 (usePlayerLaunchForce) must be a boolean.")
	assert(type(doSuperJump) == "boolean", "Arg #3 (doSuperJump) must be a boolean.")
	assert(type(useFullSuperJumpForce) == "boolean", "Arg #4 (useFullSuperJumpForce) must be a boolean.")

	local result = native_call(0x0AE4086104E067B1, ped, usePlayerLaunchForce, doSuperJump, useFullSuperJumpForce)
end
natives.task.task_jump = natives.TASK.TASK_JUMP

function natives.TASK.TASK_COWER(--[[Ped]] ped, --[[int]] duration) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_COWER' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(duration) == "number", "Arg #2 (duration) must be a number.")

	local result = native_call(0x3EB1FE9E8E908E15, ped, duration)
end
natives.task.task_cower = natives.TASK.TASK_COWER

--[[
In the scripts, p3 was always -1.

p3 seems to be duration or timeout of turn animation.
Also facingPed can be 0 or -1 so ped will just raise hands up.
]]
function natives.TASK.TASK_HANDS_UP(--[[Ped]] ped, --[[int]] duration, --[[Ped]] facingPed, --[[int]] timeToFacePed, --[[int]] flags) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_HANDS_UP' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(duration) == "number", "Arg #2 (duration) must be a number.")
	assert(type(facingPed) == "number", "Arg #3 (facingPed) must be a number.")
	assert(type(timeToFacePed) == "number", "Arg #4 (timeToFacePed) must be a number.")
	assert(type(flags) == "number", "Arg #5 (flags) must be a number.")

	local result = native_call(0xF2EAB31979A7F910, ped, duration, facingPed, timeToFacePed, flags)
end
natives.task.task_hands_up = natives.TASK.TASK_HANDS_UP

function natives.TASK.UPDATE_TASK_HANDS_UP_DURATION(--[[Ped]] ped, --[[int]] duration) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.UPDATE_TASK_HANDS_UP_DURATION' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(duration) == "number", "Arg #2 (duration) must be a number.")

	local result = native_call(0xA98FCAFD7893C834, ped, duration)
end
natives.task.update_task_hands_up_duration = natives.TASK.UPDATE_TASK_HANDS_UP_DURATION

--[[
The given ped will try to open the nearest door to 'seat'.
Example: telling the ped to open the door for the driver seat does not necessarily mean it will open the driver door, it may choose to open the passenger door instead if that one is closer.
]]
function natives.TASK.TASK_OPEN_VEHICLE_DOOR(--[[Ped]] ped, --[[Vehicle]] vehicle, --[[int]] timeOut, --[[int]] seat, --[[float]] speed) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_OPEN_VEHICLE_DOOR' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(vehicle) == "number", "Arg #2 (vehicle) must be a number.")
	assert(type(timeOut) == "number", "Arg #3 (timeOut) must be a number.")
	assert(type(seat) == "number", "Arg #4 (seat) must be a number.")
	assert(type(speed) == "number", "Arg #5 (speed) must be a number.")

	local result = native_call(0x965791A9A488A062, ped, vehicle, timeOut, seat, speed)
end
natives.task.task_open_vehicle_door = natives.TASK.TASK_OPEN_VEHICLE_DOOR

--[[
speed 1.0 = walk, 2.0 = run
p5 1 = normal, 3 = teleport to vehicle, 16 = teleport directly into vehicle
p6 is always 0

Usage of seat 
-1 = driver
0 = passenger
1 = left back seat
2 = right back seat
3 = outside left
4 = outside right
]]
function natives.TASK.TASK_ENTER_VEHICLE(--[[Ped]] ped, --[[Vehicle]] vehicle, --[[int]] timeout, --[[int]] seat, --[[float]] speed, --[[int]] flag, --[[const char*]] overrideEntryClipsetName) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_ENTER_VEHICLE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(vehicle) == "number", "Arg #2 (vehicle) must be a number.")
	assert(type(timeout) == "number", "Arg #3 (timeout) must be a number.")
	assert(type(seat) == "number", "Arg #4 (seat) must be a number.")
	assert(type(speed) == "number", "Arg #5 (speed) must be a number.")
	assert(type(flag) == "number", "Arg #6 (flag) must be a number.")
	assert(type(overrideEntryClipsetName) == "string", "Arg #7 (overrideEntryClipsetName) must be a string.")

	local result = native_call(0xC20E50AA46D09CA8, ped, vehicle, timeout, seat, speed, flag, overrideEntryClipsetName)
end
natives.task.task_enter_vehicle = natives.TASK.TASK_ENTER_VEHICLE

--[[
Flags from decompiled scripts:
0 = normal exit and closes door.
1 = normal exit and closes door.
16 = teleports outside, door kept closed.
64 = normal exit and closes door, maybe a bit slower animation than 0.
256 = normal exit but does not close the door.
4160 = ped is throwing himself out, even when the vehicle is still.
262144 = ped moves to passenger seat first, then exits normally

Others to be tried out: 320, 512, 131072.
]]
function natives.TASK.TASK_LEAVE_VEHICLE(--[[Ped]] ped, --[[Vehicle]] vehicle, --[[int]] flags) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_LEAVE_VEHICLE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(vehicle) == "number", "Arg #2 (vehicle) must be a number.")
	assert(type(flags) == "number", "Arg #3 (flags) must be a number.")

	local result = native_call(0xD3DBCE61A490BE02, ped, vehicle, flags)
end
natives.task.task_leave_vehicle = natives.TASK.TASK_LEAVE_VEHICLE

function natives.TASK.TASK_GET_OFF_BOAT(--[[Ped]] ped, --[[Vehicle]] boat) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_GET_OFF_BOAT' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(boat) == "number", "Arg #2 (boat) must be a number.")

	local result = native_call(0x9C00E77AF14B2DFF, ped, boat)
end
natives.task.task_get_off_boat = natives.TASK.TASK_GET_OFF_BOAT

function natives.TASK.TASK_SKY_DIVE(--[[Ped]] ped, --[[BOOL]] instant) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_SKY_DIVE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(instant) == "boolean", "Arg #2 (instant) must be a boolean.")

	local result = native_call(0x601736CFE536B0A0, ped, instant)
end
natives.task.task_sky_dive = natives.TASK.TASK_SKY_DIVE

--[[
Second parameter is unused.

second parameter was for jetpack in the early stages of gta and the hard coded code is now removed
]]
function natives.TASK.TASK_PARACHUTE(--[[Ped]] ped, --[[BOOL]] giveParachuteItem, --[[BOOL]] instant) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_PARACHUTE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(giveParachuteItem) == "boolean", "Arg #2 (giveParachuteItem) must be a boolean.")
	assert(type(instant) == "boolean", "Arg #3 (instant) must be a boolean.")

	local result = native_call(0xD2F1C53C97EE81AB, ped, giveParachuteItem, instant)
end
natives.task.task_parachute = natives.TASK.TASK_PARACHUTE

--[[
makes ped parachute to coords x y z. Works well with PATHFIND::GET_SAFE_COORD_FOR_PED
]]
function natives.TASK.TASK_PARACHUTE_TO_TARGET(--[[Ped]] ped, --[[float]] x, --[[float]] y, --[[float]] z) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_PARACHUTE_TO_TARGET' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")

	local result = native_call(0xB33E291AFA6BD03A, ped, x, y, z)
end
natives.task.task_parachute_to_target = natives.TASK.TASK_PARACHUTE_TO_TARGET

function natives.TASK.SET_PARACHUTE_TASK_TARGET(--[[Ped]] ped, --[[float]] x, --[[float]] y, --[[float]] z) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.SET_PARACHUTE_TASK_TARGET' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")

	local result = native_call(0xC313379AF0FCEDA7, ped, x, y, z)
end
natives.task.set_parachute_task_target = natives.TASK.SET_PARACHUTE_TASK_TARGET

function natives.TASK.SET_PARACHUTE_TASK_THRUST(--[[Ped]] ped, --[[float]] thrust) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.SET_PARACHUTE_TASK_THRUST' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(thrust) == "number", "Arg #2 (thrust) must be a number.")

	local result = native_call(0x0729BAC1B8C64317, ped, thrust)
end
natives.task.set_parachute_task_thrust = natives.TASK.SET_PARACHUTE_TASK_THRUST

--[[
minHeightAboveGround: the minimum height above ground the heli must be at before the ped can start rappelling

Only appears twice in the scripts.

TASK::TASK_RAPPEL_FROM_HELI(PLAYER::PLAYER_PED_ID(), 10.0f);
TASK::TASK_RAPPEL_FROM_HELI(a_0, 10.0f);
]]
function natives.TASK.TASK_RAPPEL_FROM_HELI(--[[Ped]] ped, --[[float]] minHeightAboveGround) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_RAPPEL_FROM_HELI' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(minHeightAboveGround) == "number", "Arg #2 (minHeightAboveGround) must be a number.")

	local result = native_call(0x09693B0312F91649, ped, minHeightAboveGround)
end
natives.task.task_rappel_from_heli = natives.TASK.TASK_RAPPEL_FROM_HELI

--[[
info about driving modes: HTTP://gtaforums.com/topic/822314-guide-driving-styles/
---------------------------------------------------------------
Passing P6 value as floating value didn't throw any errors, though unsure what is it exactly, looks like radius or something.

P10 though, it is mentioned as float, however, I used bool and set it to true, that too worked.
Here the e.g. code I used
Function.Call(Hash.TASK_VEHICLE_DRIVE_TO_COORD, Ped, Vehicle, Cor X, Cor Y, Cor Z, 30f, 1f, Vehicle.GetHashCode(), 16777216, 1f, true);
]]
function natives.TASK.TASK_VEHICLE_DRIVE_TO_COORD(--[[Ped]] ped, --[[Vehicle]] vehicle, --[[float]] x, --[[float]] y, --[[float]] z, --[[float]] speed, --[[Any]] p6, --[[Hash]] vehicleModel, --[[int]] drivingMode, --[[float]] stopRange, --[[float]] straightLineDistance) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_VEHICLE_DRIVE_TO_COORD' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(vehicle) == "number", "Arg #2 (vehicle) must be a number.")
	assert(type(x) == "number", "Arg #3 (x) must be a number.")
	assert(type(y) == "number", "Arg #4 (y) must be a number.")
	assert(type(z) == "number", "Arg #5 (z) must be a number.")
	assert(type(speed) == "number", "Arg #6 (speed) must be a number.")
	assert(type(p6) == "number", "Arg #7 (p6) must be a number.")
	assert(type(vehicleModel) == "number", "Arg #8 (vehicleModel) must be a number.")
	assert(type(drivingMode) == "number", "Arg #9 (drivingMode) must be a number.")
	assert(type(stopRange) == "number", "Arg #10 (stopRange) must be a number.")
	assert(type(straightLineDistance) == "number", "Arg #11 (straightLineDistance) must be a number.")

	local result = native_call(0xE2A2AA2F659D77A7, ped, vehicle, x, y, z, speed, p6, vehicleModel, drivingMode, stopRange, straightLineDistance)
end
natives.task.task_vehicle_drive_to_coord = natives.TASK.TASK_VEHICLE_DRIVE_TO_COORD

function natives.TASK.TASK_VEHICLE_DRIVE_TO_COORD_LONGRANGE(--[[Ped]] ped, --[[Vehicle]] vehicle, --[[float]] x, --[[float]] y, --[[float]] z, --[[float]] speed, --[[int]] driveMode, --[[float]] stopRange) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_VEHICLE_DRIVE_TO_COORD_LONGRANGE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(vehicle) == "number", "Arg #2 (vehicle) must be a number.")
	assert(type(x) == "number", "Arg #3 (x) must be a number.")
	assert(type(y) == "number", "Arg #4 (y) must be a number.")
	assert(type(z) == "number", "Arg #5 (z) must be a number.")
	assert(type(speed) == "number", "Arg #6 (speed) must be a number.")
	assert(type(driveMode) == "number", "Arg #7 (driveMode) must be a number.")
	assert(type(stopRange) == "number", "Arg #8 (stopRange) must be a number.")

	local result = native_call(0x158BB33F920D360C, ped, vehicle, x, y, z, speed, driveMode, stopRange)
end
natives.task.task_vehicle_drive_to_coord_longrange = natives.TASK.TASK_VEHICLE_DRIVE_TO_COORD_LONGRANGE

function natives.TASK.TASK_VEHICLE_DRIVE_WANDER(--[[Ped]] ped, --[[Vehicle]] vehicle, --[[float]] speed, --[[int]] drivingStyle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_VEHICLE_DRIVE_WANDER' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(vehicle) == "number", "Arg #2 (vehicle) must be a number.")
	assert(type(speed) == "number", "Arg #3 (speed) must be a number.")
	assert(type(drivingStyle) == "number", "Arg #4 (drivingStyle) must be a number.")

	local result = native_call(0x480142959D337D00, ped, vehicle, speed, drivingStyle)
end
natives.task.task_vehicle_drive_wander = natives.TASK.TASK_VEHICLE_DRIVE_WANDER

--[[
p6 always -1
p7 always 10.0
p8 always 1
]]
function natives.TASK.TASK_FOLLOW_TO_OFFSET_OF_ENTITY(--[[Ped]] ped, --[[Entity]] entity, --[[float]] offsetX, --[[float]] offsetY, --[[float]] offsetZ, --[[float]] movementSpeed, --[[int]] timeout, --[[float]] stoppingRange, --[[BOOL]] persistFollowing) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_FOLLOW_TO_OFFSET_OF_ENTITY' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(entity) == "number", "Arg #2 (entity) must be a number.")
	assert(type(offsetX) == "number", "Arg #3 (offsetX) must be a number.")
	assert(type(offsetY) == "number", "Arg #4 (offsetY) must be a number.")
	assert(type(offsetZ) == "number", "Arg #5 (offsetZ) must be a number.")
	assert(type(movementSpeed) == "number", "Arg #6 (movementSpeed) must be a number.")
	assert(type(timeout) == "number", "Arg #7 (timeout) must be a number.")
	assert(type(stoppingRange) == "number", "Arg #8 (stoppingRange) must be a number.")
	assert(type(persistFollowing) == "boolean", "Arg #9 (persistFollowing) must be a boolean.")

	local result = native_call(0x304AE42E357B8C7E, ped, entity, offsetX, offsetY, offsetZ, movementSpeed, timeout, stoppingRange, persistFollowing)
end
natives.task.task_follow_to_offset_of_entity = natives.TASK.TASK_FOLLOW_TO_OFFSET_OF_ENTITY

function natives.TASK.TASK_GO_STRAIGHT_TO_COORD(--[[Ped]] ped, --[[float]] x, --[[float]] y, --[[float]] z, --[[float]] speed, --[[int]] timeout, --[[float]] targetHeading, --[[float]] distanceToSlide) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_GO_STRAIGHT_TO_COORD' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")
	assert(type(speed) == "number", "Arg #5 (speed) must be a number.")
	assert(type(timeout) == "number", "Arg #6 (timeout) must be a number.")
	assert(type(targetHeading) == "number", "Arg #7 (targetHeading) must be a number.")
	assert(type(distanceToSlide) == "number", "Arg #8 (distanceToSlide) must be a number.")

	local result = native_call(0xD76B57B44F1E6F8B, ped, x, y, z, speed, timeout, targetHeading, distanceToSlide)
end
natives.task.task_go_straight_to_coord = natives.TASK.TASK_GO_STRAIGHT_TO_COORD

function natives.TASK.TASK_GO_STRAIGHT_TO_COORD_RELATIVE_TO_ENTITY(--[[Ped]] ped, --[[Entity]] entity, --[[float]] x, --[[float]] y, --[[float]] z, --[[float]] moveBlendRatio, --[[int]] time) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_GO_STRAIGHT_TO_COORD_RELATIVE_TO_ENTITY' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(entity) == "number", "Arg #2 (entity) must be a number.")
	assert(type(x) == "number", "Arg #3 (x) must be a number.")
	assert(type(y) == "number", "Arg #4 (y) must be a number.")
	assert(type(z) == "number", "Arg #5 (z) must be a number.")
	assert(type(moveBlendRatio) == "number", "Arg #6 (moveBlendRatio) must be a number.")
	assert(type(time) == "number", "Arg #7 (time) must be a number.")

	local result = native_call(0x61E360B7E040D12E, ped, entity, x, y, z, moveBlendRatio, time)
end
natives.task.task_go_straight_to_coord_relative_to_entity = natives.TASK.TASK_GO_STRAIGHT_TO_COORD_RELATIVE_TO_ENTITY

--[[
Makes the specified ped achieve the specified heading.

pedHandle: The handle of the ped to assign the task to.
heading: The desired heading.
timeout: The time, in milliseconds, to allow the task to complete. If the task times out, it is cancelled, and the ped will stay at the heading it managed to reach in the time.
]]
function natives.TASK.TASK_ACHIEVE_HEADING(--[[Ped]] ped, --[[float]] heading, --[[int]] timeout) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_ACHIEVE_HEADING' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(heading) == "number", "Arg #2 (heading) must be a number.")
	assert(type(timeout) == "number", "Arg #3 (timeout) must be a number.")

	local result = native_call(0x93B93A37987F1F3D, ped, heading, timeout)
end
natives.task.task_achieve_heading = natives.TASK.TASK_ACHIEVE_HEADING

--[[
MulleKD19: Clears the current point route. Call this before TASK_EXTEND_ROUTE and TASK_FOLLOW_POINT_ROUTE.
]]
function natives.TASK.TASK_FLUSH_ROUTE() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_FLUSH_ROUTE' due to disabled trusted mode")

	local result = native_call(0x841142A1376E9006)
end
natives.task.task_flush_route = natives.TASK.TASK_FLUSH_ROUTE

--[[
MulleKD19: Adds a new point to the current point route. Call TASK_FLUSH_ROUTE before the first call to this. Call TASK_FOLLOW_POINT_ROUTE to make the Ped go the route.

A maximum of 8 points can be added.
]]
function natives.TASK.TASK_EXTEND_ROUTE(--[[float]] x, --[[float]] y, --[[float]] z) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_EXTEND_ROUTE' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")

	local result = native_call(0x1E7889778264843A, x, y, z)
end
natives.task.task_extend_route = natives.TASK.TASK_EXTEND_ROUTE

--[[
MulleKD19: Makes the ped go on the created point route.

ped: The ped to give the task to.
speed: The speed to move at in m/s.
int: Unknown. Can be 0, 1, 2 or 3.

Example:
TASK_FLUSH_ROUTE();
TASK_EXTEND_ROUTE(0f, 0f, 70f);
TASK_EXTEND_ROUTE(10f, 0f, 70f);
TASK_EXTEND_ROUTE(10f, 10f, 70f);
TASK_FOLLOW_POINT_ROUTE(GET_PLAYER_PED(), 1f, 0);
]]
function natives.TASK.TASK_FOLLOW_POINT_ROUTE(--[[Ped]] ped, --[[float]] speed, --[[int]] mode) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_FOLLOW_POINT_ROUTE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(speed) == "number", "Arg #2 (speed) must be a number.")
	assert(type(mode) == "number", "Arg #3 (mode) must be a number.")

	local result = native_call(0x595583281858626E, ped, speed, mode)
end
natives.task.task_follow_point_route = natives.TASK.TASK_FOLLOW_POINT_ROUTE

--[[
The entity will move towards the target until time is over (duration) or get in target's range (distance). p5 and p6 are unknown, but you could leave p5 = 1073741824 or 100 or even 0 (didn't see any difference but on the decompiled scripts, they use 1073741824 mostly) and p6 = 0

Note: I've only tested it on entity -> ped and target -> vehicle. It could work differently on other entities, didn't try it yet.

Example: TASK::TASK_GO_TO_ENTITY(pedHandle, vehicleHandle, 5000, 4.0, 100, 1073741824, 0)

Ped will run towards the vehicle for 5 seconds and stop when time is over or when he gets 4 meters(?) around the vehicle (with duration = -1, the task duration will be ignored).

enum EGOTO_ENTITY_SCRIPT_FLAGS
{
	EGOTO_ENTITY_NEVER_SLOW_FOR_PATH_LENGTH = 0x01,
};
]]
function natives.TASK.TASK_GO_TO_ENTITY(--[[Entity]] entity, --[[Entity]] target, --[[int]] duration, --[[float]] distance, --[[float]] moveBlendRatio, --[[float]] slowDownDistance, --[[int]] flags) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_GO_TO_ENTITY' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(target) == "number", "Arg #2 (target) must be a number.")
	assert(type(duration) == "number", "Arg #3 (duration) must be a number.")
	assert(type(distance) == "number", "Arg #4 (distance) must be a number.")
	assert(type(moveBlendRatio) == "number", "Arg #5 (moveBlendRatio) must be a number.")
	assert(type(slowDownDistance) == "number", "Arg #6 (slowDownDistance) must be a number.")
	assert(type(flags) == "number", "Arg #7 (flags) must be a number.")

	local result = native_call(0x6A071245EB0D1882, entity, target, duration, distance, moveBlendRatio, slowDownDistance, flags)
end
natives.task.task_go_to_entity = natives.TASK.TASK_GO_TO_ENTITY

--[[
Makes the specified ped flee the specified distance from the specified position.
]]
function natives.TASK.TASK_SMART_FLEE_COORD(--[[Ped]] ped, --[[float]] x, --[[float]] y, --[[float]] z, --[[float]] distance, --[[int]] time, --[[BOOL]] perferPavements, --[[BOOL]] quitIfOutOfRange) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_SMART_FLEE_COORD' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")
	assert(type(distance) == "number", "Arg #5 (distance) must be a number.")
	assert(type(time) == "number", "Arg #6 (time) must be a number.")
	assert(type(perferPavements) == "boolean", "Arg #7 (perferPavements) must be a boolean.")
	assert(type(quitIfOutOfRange) == "boolean", "Arg #8 (quitIfOutOfRange) must be a boolean.")

	local result = native_call(0x94587F17E9C365D5, ped, x, y, z, distance, time, perferPavements, quitIfOutOfRange)
end
natives.task.task_smart_flee_coord = natives.TASK.TASK_SMART_FLEE_COORD

--[[
Makes a ped run away from another ped (fleeTarget).

distance = ped will flee this distance.
fleeTime = ped will flee for this amount of time, set to "-1" to flee forever
]]
function natives.TASK.TASK_SMART_FLEE_PED(--[[Ped]] ped, --[[Ped]] fleeTarget, --[[float]] safeDistance, --[[int]] fleeTime, --[[BOOL]] perferPavements, --[[BOOL]] updateToNearestHatedPed) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_SMART_FLEE_PED' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(fleeTarget) == "number", "Arg #2 (fleeTarget) must be a number.")
	assert(type(safeDistance) == "number", "Arg #3 (safeDistance) must be a number.")
	assert(type(fleeTime) == "number", "Arg #4 (fleeTime) must be a number.")
	assert(type(perferPavements) == "boolean", "Arg #5 (perferPavements) must be a boolean.")
	assert(type(updateToNearestHatedPed) == "boolean", "Arg #6 (updateToNearestHatedPed) must be a boolean.")

	local result = native_call(0x22B0D0E37CCB840D, ped, fleeTarget, safeDistance, fleeTime, perferPavements, updateToNearestHatedPed)
end
natives.task.task_smart_flee_ped = natives.TASK.TASK_SMART_FLEE_PED

function natives.TASK.TASK_REACT_AND_FLEE_PED(--[[Ped]] ped, --[[Ped]] fleeTarget) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_REACT_AND_FLEE_PED' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(fleeTarget) == "number", "Arg #2 (fleeTarget) must be a number.")

	local result = native_call(0x72C896464915D1B1, ped, fleeTarget)
end
natives.task.task_react_and_flee_ped = natives.TASK.TASK_REACT_AND_FLEE_PED

function natives.TASK.TASK_SHOCKING_EVENT_REACT(--[[Ped]] ped, --[[int]] eventHandle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_SHOCKING_EVENT_REACT' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(eventHandle) == "number", "Arg #2 (eventHandle) must be a number.")

	local result = native_call(0x452419CBD838065B, ped, eventHandle)
end
natives.task.task_shocking_event_react = natives.TASK.TASK_SHOCKING_EVENT_REACT

function natives.TASK.TASK_WANDER_IN_AREA(--[[Ped]] ped, --[[float]] x, --[[float]] y, --[[float]] z, --[[float]] radius, --[[float]] minimalLength, --[[float]] timeBetweenWalks) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_WANDER_IN_AREA' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")
	assert(type(radius) == "number", "Arg #5 (radius) must be a number.")
	assert(type(minimalLength) == "number", "Arg #6 (minimalLength) must be a number.")
	assert(type(timeBetweenWalks) == "number", "Arg #7 (timeBetweenWalks) must be a number.")

	local result = native_call(0xE054346CA3A0F315, ped, x, y, z, radius, minimalLength, timeBetweenWalks)
end
natives.task.task_wander_in_area = natives.TASK.TASK_WANDER_IN_AREA

--[[
Makes ped walk around the area.

set p1 to 10.0f and p2 to 10 if you want the ped to walk anywhere without a duration.
]]
function natives.TASK.TASK_WANDER_STANDARD(--[[Ped]] ped, --[[float]] heading, --[[int]] flags) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_WANDER_STANDARD' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(heading) == "number", "Arg #2 (heading) must be a number.")
	assert(type(flags) == "number", "Arg #3 (flags) must be a number.")

	local result = native_call(0xBB9CE077274F6A1B, ped, heading, flags)
end
natives.task.task_wander_standard = natives.TASK.TASK_WANDER_STANDARD

function natives.TASK.TASK_WANDER_SPECIFIC(--[[Ped]] ped, --[[const char*]] conditionalAnimGroupStr, --[[const char*]] conditionalAnimStr, --[[float]] heading) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_WANDER_SPECIFIC' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(conditionalAnimGroupStr) == "string", "Arg #2 (conditionalAnimGroupStr) must be a string.")
	assert(type(conditionalAnimStr) == "string", "Arg #3 (conditionalAnimStr) must be a string.")
	assert(type(heading) == "number", "Arg #4 (heading) must be a number.")

	local result = native_call(0x6919A2F136426098, ped, conditionalAnimGroupStr, conditionalAnimStr, heading)
end
natives.task.task_wander_specific = natives.TASK.TASK_WANDER_SPECIFIC

--[[
Modes:
0 - ignore heading
1 - park forward
2 - park backwards

Depending on the angle of approach, the vehicle can park at the specified heading or at its exact opposite (-180) angle.

Radius seems to define how close the vehicle has to be -after parking- to the position for this task considered completed. If the value is too small, the vehicle will try to park again until it's exactly where it should be. 20.0 Works well but lower values don't, like the radius is measured in centimeters or something.
]]
function natives.TASK.TASK_VEHICLE_PARK(--[[Ped]] ped, --[[Vehicle]] vehicle, --[[float]] x, --[[float]] y, --[[float]] z, --[[float]] heading, --[[int]] mode, --[[float]] radius, --[[BOOL]] keepEngineOn) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_VEHICLE_PARK' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(vehicle) == "number", "Arg #2 (vehicle) must be a number.")
	assert(type(x) == "number", "Arg #3 (x) must be a number.")
	assert(type(y) == "number", "Arg #4 (y) must be a number.")
	assert(type(z) == "number", "Arg #5 (z) must be a number.")
	assert(type(heading) == "number", "Arg #6 (heading) must be a number.")
	assert(type(mode) == "number", "Arg #7 (mode) must be a number.")
	assert(type(radius) == "number", "Arg #8 (radius) must be a number.")
	assert(type(keepEngineOn) == "boolean", "Arg #9 (keepEngineOn) must be a boolean.")

	local result = native_call(0x0F3E34E968EA374E, ped, vehicle, x, y, z, heading, mode, radius, keepEngineOn)
end
natives.task.task_vehicle_park = natives.TASK.TASK_VEHICLE_PARK

--[[
known "killTypes" are: "AR_stealth_kill_knife" and "AR_stealth_kill_a".
]]
function natives.TASK.TASK_STEALTH_KILL(--[[Ped]] killer, --[[Ped]] target, --[[Hash]] stealthKillActionResultHash, --[[float]] desiredMoveBlendRatio, --[[int]] stealthFlags) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_STEALTH_KILL' due to disabled trusted mode")

	assert(type(killer) == "number", "Arg #1 (killer) must be a number.")
	assert(type(target) == "number", "Arg #2 (target) must be a number.")
	assert(type(stealthKillActionResultHash) == "number", "Arg #3 (stealthKillActionResultHash) must be a number.")
	assert(type(desiredMoveBlendRatio) == "number", "Arg #4 (desiredMoveBlendRatio) must be a number.")
	assert(type(stealthFlags) == "number", "Arg #5 (stealthFlags) must be a number.")

	local result = native_call(0xAA5DC05579D60BD9, killer, target, stealthKillActionResultHash, desiredMoveBlendRatio, stealthFlags)
end
natives.task.task_stealth_kill = natives.TASK.TASK_STEALTH_KILL

function natives.TASK.TASK_PLANT_BOMB(--[[Ped]] ped, --[[float]] x, --[[float]] y, --[[float]] z, --[[float]] heading) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_PLANT_BOMB' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")
	assert(type(heading) == "number", "Arg #5 (heading) must be a number.")

	local result = native_call(0x965FEC691D55E9BF, ped, x, y, z, heading)
end
natives.task.task_plant_bomb = natives.TASK.TASK_PLANT_BOMB

--[[
If no timeout, set timeout to -1.
]]
function natives.TASK.TASK_FOLLOW_NAV_MESH_TO_COORD(--[[Ped]] ped, --[[float]] x, --[[float]] y, --[[float]] z, --[[float]] moveBlendRatio, --[[int]] time, --[[float]] targetRadius, --[[int]] flags, --[[float]] targetHeading) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_FOLLOW_NAV_MESH_TO_COORD' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")
	assert(type(moveBlendRatio) == "number", "Arg #5 (moveBlendRatio) must be a number.")
	assert(type(time) == "number", "Arg #6 (time) must be a number.")
	assert(type(targetRadius) == "number", "Arg #7 (targetRadius) must be a number.")
	assert(type(flags) == "number", "Arg #8 (flags) must be a number.")
	assert(type(targetHeading) == "number", "Arg #9 (targetHeading) must be a number.")

	local result = native_call(0x15D3A79D4E44B913, ped, x, y, z, moveBlendRatio, time, targetRadius, flags, targetHeading)
end
natives.task.task_follow_nav_mesh_to_coord = natives.TASK.TASK_FOLLOW_NAV_MESH_TO_COORD

function natives.TASK.TASK_FOLLOW_NAV_MESH_TO_COORD_ADVANCED(--[[Ped]] ped, --[[float]] x, --[[float]] y, --[[float]] z, --[[float]] moveBlendRatio, --[[int]] time, --[[float]] targetRadius, --[[int]] flags, --[[float]] slideToCoordHeading, --[[float]] maxSlopeNavigable, --[[float]] clampMaxSearchDistance, --[[float]] targetHeading) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_FOLLOW_NAV_MESH_TO_COORD_ADVANCED' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")
	assert(type(moveBlendRatio) == "number", "Arg #5 (moveBlendRatio) must be a number.")
	assert(type(time) == "number", "Arg #6 (time) must be a number.")
	assert(type(targetRadius) == "number", "Arg #7 (targetRadius) must be a number.")
	assert(type(flags) == "number", "Arg #8 (flags) must be a number.")
	assert(type(slideToCoordHeading) == "number", "Arg #9 (slideToCoordHeading) must be a number.")
	assert(type(maxSlopeNavigable) == "number", "Arg #10 (maxSlopeNavigable) must be a number.")
	assert(type(clampMaxSearchDistance) == "number", "Arg #11 (clampMaxSearchDistance) must be a number.")
	assert(type(targetHeading) == "number", "Arg #12 (targetHeading) must be a number.")

	local result = native_call(0x17F58B88D085DBAC, ped, x, y, z, moveBlendRatio, time, targetRadius, flags, slideToCoordHeading, maxSlopeNavigable, clampMaxSearchDistance, targetHeading)
end
natives.task.task_follow_nav_mesh_to_coord_advanced = natives.TASK.TASK_FOLLOW_NAV_MESH_TO_COORD_ADVANCED

function natives.TASK.SET_PED_PATH_CAN_USE_CLIMBOVERS(--[[Ped]] ped, --[[BOOL]] Toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.SET_PED_PATH_CAN_USE_CLIMBOVERS' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(Toggle) == "boolean", "Arg #2 (Toggle) must be a boolean.")

	local result = native_call(0x8E06A6FE76C9EFF4, ped, Toggle)
end
natives.task.set_ped_path_can_use_climbovers = natives.TASK.SET_PED_PATH_CAN_USE_CLIMBOVERS

function natives.TASK.SET_PED_PATH_CAN_USE_LADDERS(--[[Ped]] ped, --[[BOOL]] Toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.SET_PED_PATH_CAN_USE_LADDERS' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(Toggle) == "boolean", "Arg #2 (Toggle) must be a boolean.")

	local result = native_call(0x77A5B103C87F476E, ped, Toggle)
end
natives.task.set_ped_path_can_use_ladders = natives.TASK.SET_PED_PATH_CAN_USE_LADDERS

function natives.TASK.SET_PED_PATH_CAN_DROP_FROM_HEIGHT(--[[Ped]] ped, --[[BOOL]] Toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.SET_PED_PATH_CAN_DROP_FROM_HEIGHT' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(Toggle) == "boolean", "Arg #2 (Toggle) must be a boolean.")

	local result = native_call(0xE361C5C71C431A4F, ped, Toggle)
end
natives.task.set_ped_path_can_drop_from_height = natives.TASK.SET_PED_PATH_CAN_DROP_FROM_HEIGHT

--[[
Default modifier is 1.0, minimum is 0.0 and maximum is 10.0.
]]
function natives.TASK.SET_PED_PATH_CLIMB_COST_MODIFIER(--[[Ped]] ped, --[[float]] modifier) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.SET_PED_PATH_CLIMB_COST_MODIFIER' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(modifier) == "number", "Arg #2 (modifier) must be a number.")

	local result = native_call(0x88E32DB8C1A4AA4B, ped, modifier)
end
natives.task.set_ped_path_climb_cost_modifier = natives.TASK.SET_PED_PATH_CLIMB_COST_MODIFIER

function natives.TASK.SET_PED_PATH_MAY_ENTER_WATER(--[[Ped]] ped, --[[BOOL]] mayEnterWater) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.SET_PED_PATH_MAY_ENTER_WATER' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(mayEnterWater) == "boolean", "Arg #2 (mayEnterWater) must be a boolean.")

	local result = native_call(0xF35425A4204367EC, ped, mayEnterWater)
end
natives.task.set_ped_path_may_enter_water = natives.TASK.SET_PED_PATH_MAY_ENTER_WATER

function natives.TASK.SET_PED_PATH_PREFER_TO_AVOID_WATER(--[[Ped]] ped, --[[BOOL]] avoidWater) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.SET_PED_PATH_PREFER_TO_AVOID_WATER' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(avoidWater) == "boolean", "Arg #2 (avoidWater) must be a boolean.")

	local result = native_call(0x38FE1EC73743793C, ped, avoidWater)
end
natives.task.set_ped_path_prefer_to_avoid_water = natives.TASK.SET_PED_PATH_PREFER_TO_AVOID_WATER

function natives.TASK.SET_PED_PATH_AVOID_FIRE(--[[Ped]] ped, --[[BOOL]] avoidFire) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.SET_PED_PATH_AVOID_FIRE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(avoidFire) == "boolean", "Arg #2 (avoidFire) must be a boolean.")

	local result = native_call(0x4455517B28441E60, ped, avoidFire)
end
natives.task.set_ped_path_avoid_fire = natives.TASK.SET_PED_PATH_AVOID_FIRE

--[[
Needs to be looped! And yes, it does work and is not a hash collision.
Birds will try to reach the given height.
]]
function natives.TASK.SET_GLOBAL_MIN_BIRD_FLIGHT_HEIGHT(--[[float]] height) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.SET_GLOBAL_MIN_BIRD_FLIGHT_HEIGHT' due to disabled trusted mode")

	assert(type(height) == "number", "Arg #1 (height) must be a number.")

	local result = native_call(0x6C6B148586F934F7, height)
end
natives.task.set_global_min_bird_flight_height = natives.TASK.SET_GLOBAL_MIN_BIRD_FLIGHT_HEIGHT

--[[
Looks like the last parameter returns true if the path has been calculated, while the first returns the remaining distance to the end of the path.
Return value of native is the same as GET_NAVMESH_ROUTE_RESULT
Looks like the native returns an int for the path's state:
1 - ???
2 - ???
3 - Finished Generating 
]]
function natives.TASK.GET_NAVMESH_ROUTE_DISTANCE_REMAINING(--[[Ped]] ped, --[[float*]] distanceRemaining, --[[BOOL*]] isPathReady) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.GET_NAVMESH_ROUTE_DISTANCE_REMAINING' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(distanceRemaining) == "userdata", "Arg #2 (distanceRemaining) must be a userdata.")
	assert(type(isPathReady) == "userdata", "Arg #3 (isPathReady) must be a userdata.")

	local result = native_call(0xC6F5C0BCDC74D62D, ped, distanceRemaining, isPathReady)
	return result:__tointeger()
end
natives.task.get_navmesh_route_distance_remaining = natives.TASK.GET_NAVMESH_ROUTE_DISTANCE_REMAINING

--[[
See GET_NAVMESH_ROUTE_DISTANCE_REMAINING for more details.
]]
function natives.TASK.GET_NAVMESH_ROUTE_RESULT(--[[Ped]] ped) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.GET_NAVMESH_ROUTE_RESULT' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x632E831F382A0FA8, ped)
	return result:__tointeger()
end
natives.task.get_navmesh_route_result = natives.TASK.GET_NAVMESH_ROUTE_RESULT

function natives.TASK.IS_CONTROLLED_VEHICLE_UNABLE_TO_GET_TO_ROAD(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.IS_CONTROLLED_VEHICLE_UNABLE_TO_GET_TO_ROAD' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x3E38E28A1D80DDF6, ped)
	return result:__tointeger() ~= 0
end
natives.task.is_controlled_vehicle_unable_to_get_to_road = natives.TASK.IS_CONTROLLED_VEHICLE_UNABLE_TO_GET_TO_ROAD

--[[
example from fm_mission_controller

TASK::TASK_GO_TO_COORD_ANY_MEANS(l_649, sub_f7e86(-1, 0), 1.0, 0, 0, 786603, 0xbf800000);
 
]]
function natives.TASK.TASK_GO_TO_COORD_ANY_MEANS(--[[Ped]] ped, --[[float]] x, --[[float]] y, --[[float]] z, --[[float]] moveBlendRatio, --[[Vehicle]] vehicle, --[[BOOL]] useLongRangeVehiclePathing, --[[int]] drivingFlags, --[[float]] maxRangeToShootTargets) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_GO_TO_COORD_ANY_MEANS' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")
	assert(type(moveBlendRatio) == "number", "Arg #5 (moveBlendRatio) must be a number.")
	assert(type(vehicle) == "number", "Arg #6 (vehicle) must be a number.")
	assert(type(useLongRangeVehiclePathing) == "boolean", "Arg #7 (useLongRangeVehiclePathing) must be a boolean.")
	assert(type(drivingFlags) == "number", "Arg #8 (drivingFlags) must be a number.")
	assert(type(maxRangeToShootTargets) == "number", "Arg #9 (maxRangeToShootTargets) must be a number.")

	local result = native_call(0x5BC448CB78FA3E88, ped, x, y, z, moveBlendRatio, vehicle, useLongRangeVehiclePathing, drivingFlags, maxRangeToShootTargets)
end
natives.task.task_go_to_coord_any_means = natives.TASK.TASK_GO_TO_COORD_ANY_MEANS

function natives.TASK.TASK_GO_TO_COORD_ANY_MEANS_EXTRA_PARAMS(--[[Ped]] ped, --[[float]] x, --[[float]] y, --[[float]] z, --[[float]] moveBlendRatio, --[[Vehicle]] vehicle, --[[BOOL]] useLongRangeVehiclePathing, --[[int]] drivingFlags, --[[float]] maxRangeToShootTargets, --[[float]] extraVehToTargetDistToPreferVehicle, --[[float]] driveStraightLineDistance, --[[int]] extraFlags, --[[float]] warpTimerMS) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_GO_TO_COORD_ANY_MEANS_EXTRA_PARAMS' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")
	assert(type(moveBlendRatio) == "number", "Arg #5 (moveBlendRatio) must be a number.")
	assert(type(vehicle) == "number", "Arg #6 (vehicle) must be a number.")
	assert(type(useLongRangeVehiclePathing) == "boolean", "Arg #7 (useLongRangeVehiclePathing) must be a boolean.")
	assert(type(drivingFlags) == "number", "Arg #8 (drivingFlags) must be a number.")
	assert(type(maxRangeToShootTargets) == "number", "Arg #9 (maxRangeToShootTargets) must be a number.")
	assert(type(extraVehToTargetDistToPreferVehicle) == "number", "Arg #10 (extraVehToTargetDistToPreferVehicle) must be a number.")
	assert(type(driveStraightLineDistance) == "number", "Arg #11 (driveStraightLineDistance) must be a number.")
	assert(type(extraFlags) == "number", "Arg #12 (extraFlags) must be a number.")
	assert(type(warpTimerMS) == "number", "Arg #13 (warpTimerMS) must be a number.")

	local result = native_call(0x1DD45F9ECFDB1BC9, ped, x, y, z, moveBlendRatio, vehicle, useLongRangeVehiclePathing, drivingFlags, maxRangeToShootTargets, extraVehToTargetDistToPreferVehicle, driveStraightLineDistance, extraFlags, warpTimerMS)
end
natives.task.task_go_to_coord_any_means_extra_params = natives.TASK.TASK_GO_TO_COORD_ANY_MEANS_EXTRA_PARAMS

function natives.TASK.TASK_GO_TO_COORD_ANY_MEANS_EXTRA_PARAMS_WITH_CRUISE_SPEED(--[[Ped]] ped, --[[float]] x, --[[float]] y, --[[float]] z, --[[float]] moveBlendRatio, --[[Vehicle]] vehicle, --[[BOOL]] useLongRangeVehiclePathing, --[[int]] drivingFlags, --[[float]] maxRangeToShootTargets, --[[float]] extraVehToTargetDistToPreferVehicle, --[[float]] driveStraightLineDistance, --[[int]] extraFlags, --[[float]] cruiseSpeed, --[[float]] targetArriveDist) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_GO_TO_COORD_ANY_MEANS_EXTRA_PARAMS_WITH_CRUISE_SPEED' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")
	assert(type(moveBlendRatio) == "number", "Arg #5 (moveBlendRatio) must be a number.")
	assert(type(vehicle) == "number", "Arg #6 (vehicle) must be a number.")
	assert(type(useLongRangeVehiclePathing) == "boolean", "Arg #7 (useLongRangeVehiclePathing) must be a boolean.")
	assert(type(drivingFlags) == "number", "Arg #8 (drivingFlags) must be a number.")
	assert(type(maxRangeToShootTargets) == "number", "Arg #9 (maxRangeToShootTargets) must be a number.")
	assert(type(extraVehToTargetDistToPreferVehicle) == "number", "Arg #10 (extraVehToTargetDistToPreferVehicle) must be a number.")
	assert(type(driveStraightLineDistance) == "number", "Arg #11 (driveStraightLineDistance) must be a number.")
	assert(type(extraFlags) == "number", "Arg #12 (extraFlags) must be a number.")
	assert(type(cruiseSpeed) == "number", "Arg #13 (cruiseSpeed) must be a number.")
	assert(type(targetArriveDist) == "number", "Arg #14 (targetArriveDist) must be a number.")

	local result = native_call(0xB8ECD61F531A7B02, ped, x, y, z, moveBlendRatio, vehicle, useLongRangeVehiclePathing, drivingFlags, maxRangeToShootTargets, extraVehToTargetDistToPreferVehicle, driveStraightLineDistance, extraFlags, cruiseSpeed, targetArriveDist)
end
natives.task.task_go_to_coord_any_means_extra_params_with_cruise_speed = natives.TASK.TASK_GO_TO_COORD_ANY_MEANS_EXTRA_PARAMS_WITH_CRUISE_SPEED

--[[
Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json

float speed > normal speed is 8.0f
----------------------

float speedMultiplier > multiply the playback speed
----------------------

int duration: time in millisecond
----------------------
-1 _ _ _ _ _ _ _> Default (see flag)
0 _ _ _ _ _ _ _ > Not play at all
Small value _ _ > Slow down animation speed
Other _ _ _ _ _ > freeze player control until specific time (ms) has 
_ _ _ _ _ _ _ _ _ passed. (No effect if flag is set to be 
_ _ _ _ _ _ _ _ _ controllable.)

int flag:
----------------------
enum eAnimationFlags
{
 ANIM_FLAG_NORMAL = 0,
   ANIM_FLAG_REPEAT = 1,
   ANIM_FLAG_STOP_LAST_FRAME = 2,
   ANIM_FLAG_UPPERBODY = 16,
   ANIM_FLAG_ENABLE_PLAYER_CONTROL = 32,
   ANIM_FLAG_CANCELABLE = 120,
};
Odd number : loop infinitely
Even number : Freeze at last frame
Multiple of 4: Freeze at last frame but controllable

01 to 15 > Full body
10 to 31 > Upper body
32 to 47 > Full body > Controllable
48 to 63 > Upper body > Controllable
...
001 to 255 > Normal
256 to 511 > Garbled
...

playbackRate:

values are between 0.0 and 1.0


lockX:  

0 in most cases 1 for rcmepsilonism8 and rcmpaparazzo_3
> 1 for mini@sprunk
 

lockY:

0 in most cases 
1 for missfam5_yoga, missfra1mcs_2_crew_react


lockZ: 

    0 for single player 
    Can be 1 but only for MP 
]]
function natives.TASK.TASK_PLAY_ANIM(--[[Ped]] ped, --[[const char*]] animDictionary, --[[const char*]] animationName, --[[float]] blendInSpeed, --[[float]] blendOutSpeed, --[[int]] duration, --[[int]] flag, --[[float]] playbackRate, --[[BOOL]] lockX, --[[BOOL]] lockY, --[[BOOL]] lockZ) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_PLAY_ANIM' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(animDictionary) == "string", "Arg #2 (animDictionary) must be a string.")
	assert(type(animationName) == "string", "Arg #3 (animationName) must be a string.")
	assert(type(blendInSpeed) == "number", "Arg #4 (blendInSpeed) must be a number.")
	assert(type(blendOutSpeed) == "number", "Arg #5 (blendOutSpeed) must be a number.")
	assert(type(duration) == "number", "Arg #6 (duration) must be a number.")
	assert(type(flag) == "number", "Arg #7 (flag) must be a number.")
	assert(type(playbackRate) == "number", "Arg #8 (playbackRate) must be a number.")
	assert(type(lockX) == "boolean", "Arg #9 (lockX) must be a boolean.")
	assert(type(lockY) == "boolean", "Arg #10 (lockY) must be a boolean.")
	assert(type(lockZ) == "boolean", "Arg #11 (lockZ) must be a boolean.")

	local result = native_call(0xEA47FE3719165B94, ped, animDictionary, animationName, blendInSpeed, blendOutSpeed, duration, flag, playbackRate, lockX, lockY, lockZ)
end
natives.task.task_play_anim = natives.TASK.TASK_PLAY_ANIM

--[[
It's similar to TASK_PLAY_ANIM, except the first 6 floats let you specify the initial position and rotation of the task. (Ped gets teleported to the position).

Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
]]
function natives.TASK.TASK_PLAY_ANIM_ADVANCED(--[[Ped]] ped, --[[const char*]] animDict, --[[const char*]] animName, --[[float]] posX, --[[float]] posY, --[[float]] posZ, --[[float]] rotX, --[[float]] rotY, --[[float]] rotZ, --[[float]] animEnterSpeed, --[[float]] animExitSpeed, --[[int]] duration, --[[Any]] flag, --[[float]] animTime, --[[int]] rotOrder, --[[int]] ikFlags) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_PLAY_ANIM_ADVANCED' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(animDict) == "string", "Arg #2 (animDict) must be a string.")
	assert(type(animName) == "string", "Arg #3 (animName) must be a string.")
	assert(type(posX) == "number", "Arg #4 (posX) must be a number.")
	assert(type(posY) == "number", "Arg #5 (posY) must be a number.")
	assert(type(posZ) == "number", "Arg #6 (posZ) must be a number.")
	assert(type(rotX) == "number", "Arg #7 (rotX) must be a number.")
	assert(type(rotY) == "number", "Arg #8 (rotY) must be a number.")
	assert(type(rotZ) == "number", "Arg #9 (rotZ) must be a number.")
	assert(type(animEnterSpeed) == "number", "Arg #10 (animEnterSpeed) must be a number.")
	assert(type(animExitSpeed) == "number", "Arg #11 (animExitSpeed) must be a number.")
	assert(type(duration) == "number", "Arg #12 (duration) must be a number.")
	assert(type(flag) == "number", "Arg #13 (flag) must be a number.")
	assert(type(animTime) == "number", "Arg #14 (animTime) must be a number.")
	assert(type(rotOrder) == "number", "Arg #15 (rotOrder) must be a number.")
	assert(type(ikFlags) == "number", "Arg #16 (ikFlags) must be a number.")

	local result = native_call(0x83CDB10EA29B370B, ped, animDict, animName, posX, posY, posZ, rotX, rotY, rotZ, animEnterSpeed, animExitSpeed, duration, flag, animTime, rotOrder, ikFlags)
end
natives.task.task_play_anim_advanced = natives.TASK.TASK_PLAY_ANIM_ADVANCED

--[[
Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
]]
function natives.TASK.STOP_ANIM_TASK(--[[Entity]] entity, --[[const char*]] animDictionary, --[[const char*]] animationName, --[[float]] blendDelta) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.STOP_ANIM_TASK' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(animDictionary) == "string", "Arg #2 (animDictionary) must be a string.")
	assert(type(animationName) == "string", "Arg #3 (animationName) must be a string.")
	assert(type(blendDelta) == "number", "Arg #4 (blendDelta) must be a number.")

	local result = native_call(0x97FF36A1D40EA00A, entity, animDictionary, animationName, blendDelta)
end
natives.task.stop_anim_task = natives.TASK.STOP_ANIM_TASK

--[[
From fm_mission_controller.c:
reserve_network_mission_objects(get_num_reserved_mission_objects(0) + 1);
           vVar28 = {0.094f, 0.02f, -0.005f};
            vVar29 = {-92.24f, 63.64f, 150.24f};
          func_253(&uVar30, joaat("prop_ld_case_01"), Global_1592429.imm_34757[iParam1 <268>], 1, 1, 0, 1);
         set_entity_lod_dist(net_to_ent(uVar30), 500);
         attach_entity_to_entity(net_to_ent(uVar30), iParam0, get_ped_bone_index(iParam0, 28422), vVar28, vVar29, 1, 0, 0, 0, 2, 1);
           Var31.imm_4 = 1065353216;
         Var31.imm_5 = 1065353216;
         Var31.imm_9 = 1065353216;
         Var31.imm_10 = 1065353216;
            Var31.imm_14 = 1065353216;
            Var31.imm_15 = 1065353216;
            Var31.imm_17 = 1040187392;
            Var31.imm_18 = 1040187392;
            Var31.imm_19 = -1;
            Var32.imm_4 = 1065353216;
         Var32.imm_5 = 1065353216;
         Var32.imm_9 = 1065353216;
         Var32.imm_10 = 1065353216;
            Var32.imm_14 = 1065353216;
            Var32.imm_15 = 1065353216;
            Var32.imm_17 = 1040187392;
            Var32.imm_18 = 1040187392;
            Var32.imm_19 = -1;
            Var31 = 1;
            Var31.imm_1 = "weapons@misc@jerrycan@mp_male";
          Var31.imm_2 = "idle";
           Var31.imm_20 = 1048633;
           Var31.imm_4 = 0.5f;
           Var31.imm_16 = get_hash_key("BONEMASK_ARMONLY_R");
          task_scripted_animation(iParam0, &Var31, &Var32, &Var32, 0f, 0.25f);
          set_model_as_no_longer_needed(joaat("prop_ld_case_01"));
            remove_anim_dict("anim@heists@biolab@");
]]
function natives.TASK.TASK_SCRIPTED_ANIMATION(--[[Ped]] ped, --[[int*]] priorityLowData, --[[int*]] priorityMidData, --[[int*]] priorityHighData, --[[float]] blendInDelta, --[[float]] blendOutDelta) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_SCRIPTED_ANIMATION' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(priorityLowData) == "userdata", "Arg #2 (priorityLowData) must be a userdata.")
	assert(type(priorityMidData) == "userdata", "Arg #3 (priorityMidData) must be a userdata.")
	assert(type(priorityHighData) == "userdata", "Arg #4 (priorityHighData) must be a userdata.")
	assert(type(blendInDelta) == "number", "Arg #5 (blendInDelta) must be a number.")
	assert(type(blendOutDelta) == "number", "Arg #6 (blendOutDelta) must be a number.")

	local result = native_call(0x126EF75F1E17ABE5, ped, priorityLowData, priorityMidData, priorityHighData, blendInDelta, blendOutDelta)
end
natives.task.task_scripted_animation = natives.TASK.TASK_SCRIPTED_ANIMATION

function natives.TASK.PLAY_ENTITY_SCRIPTED_ANIM(--[[Entity]] entity, --[[int*]] priorityLowData, --[[int*]] priorityMidData, --[[int*]] priorityHighData, --[[float]] blendInDelta, --[[float]] blendOutDelta) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.PLAY_ENTITY_SCRIPTED_ANIM' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(priorityLowData) == "userdata", "Arg #2 (priorityLowData) must be a userdata.")
	assert(type(priorityMidData) == "userdata", "Arg #3 (priorityMidData) must be a userdata.")
	assert(type(priorityHighData) == "userdata", "Arg #4 (priorityHighData) must be a userdata.")
	assert(type(blendInDelta) == "number", "Arg #5 (blendInDelta) must be a number.")
	assert(type(blendOutDelta) == "number", "Arg #6 (blendOutDelta) must be a number.")

	local result = native_call(0x77A1EEC547E7FCF1, entity, priorityLowData, priorityMidData, priorityHighData, blendInDelta, blendOutDelta)
end
natives.task.play_entity_scripted_anim = natives.TASK.PLAY_ENTITY_SCRIPTED_ANIM

--[[
Looks like p1 may be a flag, still need to do some research, though.
]]
function natives.TASK.STOP_ANIM_PLAYBACK(--[[Entity]] entity, --[[int]] priority, --[[BOOL]] secondary) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.STOP_ANIM_PLAYBACK' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(priority) == "number", "Arg #2 (priority) must be a number.")
	assert(type(secondary) == "boolean", "Arg #3 (secondary) must be a boolean.")

	local result = native_call(0xEE08C992D238C5D1, entity, priority, secondary)
end
natives.task.stop_anim_playback = natives.TASK.STOP_ANIM_PLAYBACK

function natives.TASK.SET_ANIM_WEIGHT(--[[Entity]] entity, --[[float]] weight, --[[int]] priority, --[[int]] index, --[[BOOL]] secondary) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.SET_ANIM_WEIGHT' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(weight) == "number", "Arg #2 (weight) must be a number.")
	assert(type(priority) == "number", "Arg #3 (priority) must be a number.")
	assert(type(index) == "number", "Arg #4 (index) must be a number.")
	assert(type(secondary) == "boolean", "Arg #5 (secondary) must be a boolean.")

	local result = native_call(0x207F1A47C0342F48, entity, weight, priority, index, secondary)
end
natives.task.set_anim_weight = natives.TASK.SET_ANIM_WEIGHT

function natives.TASK.SET_ANIM_PHASE(--[[Entity]] entity, --[[float]] phase, --[[int]] priority, --[[BOOL]] secondary) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.SET_ANIM_PHASE' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(phase) == "number", "Arg #2 (phase) must be a number.")
	assert(type(priority) == "number", "Arg #3 (priority) must be a number.")
	assert(type(secondary) == "boolean", "Arg #4 (secondary) must be a boolean.")

	local result = native_call(0xDDF3CB5A0A4C0B49, entity, phase, priority, secondary)
end
natives.task.set_anim_phase = natives.TASK.SET_ANIM_PHASE

function natives.TASK.SET_ANIM_RATE(--[[Entity]] entity, --[[float]] rate, --[[int]] priority, --[[BOOL]] secondary) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.SET_ANIM_RATE' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(rate) == "number", "Arg #2 (rate) must be a number.")
	assert(type(priority) == "number", "Arg #3 (priority) must be a number.")
	assert(type(secondary) == "boolean", "Arg #4 (secondary) must be a boolean.")

	local result = native_call(0x032D49C5E359C847, entity, rate, priority, secondary)
end
natives.task.set_anim_rate = natives.TASK.SET_ANIM_RATE

function natives.TASK.SET_ANIM_LOOPED(--[[Entity]] entity, --[[BOOL]] looped, --[[int]] priority, --[[BOOL]] secondary) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.SET_ANIM_LOOPED' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(looped) == "boolean", "Arg #2 (looped) must be a boolean.")
	assert(type(priority) == "number", "Arg #3 (priority) must be a number.")
	assert(type(secondary) == "boolean", "Arg #4 (secondary) must be a boolean.")

	local result = native_call(0x70033C3CC29A1FF4, entity, looped, priority, secondary)
end
natives.task.set_anim_looped = natives.TASK.SET_ANIM_LOOPED

--[[
Example from the scripts:
TASK::TASK_PLAY_PHONE_GESTURE_ANIMATION(PLAYER::PLAYER_PED_ID(), v_3, v_2, v_4, 0.25, 0.25, 0, 0);

=========================================================
^^ No offense, but Idk how that would really help anyone.

As for the animDict & animation, they're both store in a global in all 5 scripts. So if anyone would be so kind as to read that global and comment what strings they use. Thanks.

Known boneMaskTypes'
"BONEMASK_HEADONLY"
"BONEMASK_HEAD_NECK_AND_ARMS"
"BONEMASK_HEAD_NECK_AND_L_ARM"
"BONEMASK_HEAD_NECK_AND_R_ARM"

p4 known args - 0.0f, 0.5f, 0.25f
p5 known args - 0.0f, 0.25f
p6 known args - 1 if a global if check is passed.
p7 known args - 1 if a global if check is passed.

The values found above, I found within the 5 scripts this is ever called in. (fmmc_launcher, fm_deathmatch_controller, fm_impromptu_dm_controller, fm_mission_controller, and freemode).
=========================================================

Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
]]
function natives.TASK.TASK_PLAY_PHONE_GESTURE_ANIMATION(--[[Ped]] ped, --[[const char*]] animDict, --[[const char*]] animation, --[[const char*]] boneMaskType, --[[float]] blendInDuration, --[[float]] blendOutDuration, --[[BOOL]] isLooping, --[[BOOL]] holdLastFrame) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_PLAY_PHONE_GESTURE_ANIMATION' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(animDict) == "string", "Arg #2 (animDict) must be a string.")
	assert(type(animation) == "string", "Arg #3 (animation) must be a string.")
	assert(type(boneMaskType) == "string", "Arg #4 (boneMaskType) must be a string.")
	assert(type(blendInDuration) == "number", "Arg #5 (blendInDuration) must be a number.")
	assert(type(blendOutDuration) == "number", "Arg #6 (blendOutDuration) must be a number.")
	assert(type(isLooping) == "boolean", "Arg #7 (isLooping) must be a boolean.")
	assert(type(holdLastFrame) == "boolean", "Arg #8 (holdLastFrame) must be a boolean.")

	local result = native_call(0x8FBB6758B3B3E9EC, ped, animDict, animation, boneMaskType, blendInDuration, blendOutDuration, isLooping, holdLastFrame)
end
natives.task.task_play_phone_gesture_animation = natives.TASK.TASK_PLAY_PHONE_GESTURE_ANIMATION

function natives.TASK.TASK_STOP_PHONE_GESTURE_ANIMATION(--[[Ped]] ped, --[[float]] blendOutOverride) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_STOP_PHONE_GESTURE_ANIMATION' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(blendOutOverride) == "number", "Arg #2 (blendOutOverride) must be a number.")

	local result = native_call(0x3FA00D4F4641BFAE, ped, blendOutOverride)
end
natives.task.task_stop_phone_gesture_animation = natives.TASK.TASK_STOP_PHONE_GESTURE_ANIMATION

function natives.TASK.IS_PLAYING_PHONE_GESTURE_ANIM(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.IS_PLAYING_PHONE_GESTURE_ANIM' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0xB8EBB1E9D3588C10, ped)
	return result:__tointeger() ~= 0
end
natives.task.is_playing_phone_gesture_anim = natives.TASK.IS_PLAYING_PHONE_GESTURE_ANIM

function natives.TASK.GET_PHONE_GESTURE_ANIM_CURRENT_TIME(--[[Ped]] ped) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.GET_PHONE_GESTURE_ANIM_CURRENT_TIME' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x47619ABE8B268C60, ped)
	return result:__tonumber()
end
natives.task.get_phone_gesture_anim_current_time = natives.TASK.GET_PHONE_GESTURE_ANIM_CURRENT_TIME

function natives.TASK.GET_PHONE_GESTURE_ANIM_TOTAL_TIME(--[[Ped]] ped) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.GET_PHONE_GESTURE_ANIM_TOTAL_TIME' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x1EE0F68A7C25DEC6, ped)
	return result:__tonumber()
end
natives.task.get_phone_gesture_anim_total_time = natives.TASK.GET_PHONE_GESTURE_ANIM_TOTAL_TIME

--[[
Most probably plays a specific animation on vehicle. For example getting chop out of van etc...

Here's how its used - 

TASK::TASK_VEHICLE_PLAY_ANIM(l_325, "rcmnigel1b", "idle_speedo");

TASK::TASK_VEHICLE_PLAY_ANIM(l_556[0/*1*/], "missfra0_chop_drhome", "InCar_GetOutofBack_Speedo");

FYI : Speedo is the name of van in which chop was put in the mission.
]]
function natives.TASK.TASK_VEHICLE_PLAY_ANIM(--[[Vehicle]] vehicle, --[[const char*]] animationSet, --[[const char*]] animationName) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_VEHICLE_PLAY_ANIM' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(animationSet) == "string", "Arg #2 (animationSet) must be a string.")
	assert(type(animationName) == "string", "Arg #3 (animationName) must be a string.")

	local result = native_call(0x69F5C3BD0F3EBD89, vehicle, animationSet, animationName)
end
natives.task.task_vehicle_play_anim = natives.TASK.TASK_VEHICLE_PLAY_ANIM

--[[
enum eScriptLookatFlags
{
	SLF_SLOW_TURN_RATE            = 1,    // turn the head toward the target slowly
	SLF_FAST_TURN_RATE            = 2,    // turn the head toward the target quickly
	SLF_EXTEND_YAW_LIMIT        = 4,    // wide yaw head limits
	SLF_EXTEND_PITCH_LIMIT        = 8,    // wide pitch head limit
	SLF_WIDEST_YAW_LIMIT        = 16,   // widest yaw head limit
	SLF_WIDEST_PITCH_LIMIT        = 32,   // widest pitch head limit
	SLF_NARROW_YAW_LIMIT        = 64,   // narrow yaw head limits
	SLF_NARROW_PITCH_LIMIT        = 128,  // narrow pitch head limit
	SLF_NARROWEST_YAW_LIMIT        = 256,  // narrowest yaw head limit
	SLF_NARROWEST_PITCH_LIMIT    = 512,  // narrowest pitch head limit
	SLF_USE_TORSO                = 1024, // use the torso aswell as the neck and head (currently disabled)
	SLF_WHILE_NOT_IN_FOV        = 2048, // keep tracking the target even if they are not in the hard coded FOV
	SLF_USE_CAMERA_FOCUS        = 4096, // use the camera as the target
	SLF_USE_EYES_ONLY            = 8192, // only track the target with the eyes  
	SLF_USE_LOOK_DIR            = 16384, // use information in look dir DOF
	SLF_FROM_SCRIPT                = 32768, // internal use only
	SLF_USE_REF_DIR_ABSOLUTE    = 65536  // use absolute reference direction mode for solver
};
]]
function natives.TASK.TASK_LOOK_AT_COORD(--[[Entity]] entity, --[[float]] x, --[[float]] y, --[[float]] z, --[[int]] duration, --[[int]] flags, --[[int]] priority) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_LOOK_AT_COORD' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")
	assert(type(duration) == "number", "Arg #5 (duration) must be a number.")
	assert(type(flags) == "number", "Arg #6 (flags) must be a number.")
	assert(type(priority) == "number", "Arg #7 (priority) must be a number.")

	local result = native_call(0x6FA46612594F7973, entity, x, y, z, duration, flags, priority)
end
natives.task.task_look_at_coord = natives.TASK.TASK_LOOK_AT_COORD

--[[
For flags, please refer to TASK_LOOK_AT_COORD.
]]
function natives.TASK.TASK_LOOK_AT_ENTITY(--[[Ped]] ped, --[[Entity]] lookAt, --[[int]] duration, --[[int]] flags, --[[int]] priority) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_LOOK_AT_ENTITY' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(lookAt) == "number", "Arg #2 (lookAt) must be a number.")
	assert(type(duration) == "number", "Arg #3 (duration) must be a number.")
	assert(type(flags) == "number", "Arg #4 (flags) must be a number.")
	assert(type(priority) == "number", "Arg #5 (priority) must be a number.")

	local result = native_call(0x69F4BE8C8CC4796C, ped, lookAt, duration, flags, priority)
end
natives.task.task_look_at_entity = natives.TASK.TASK_LOOK_AT_ENTITY

--[[
Not clear what it actually does, but here's how script uses it - 

if (OBJECT::HAS_PICKUP_BEEN_COLLECTED(...) 
{
 if(ENTITY::DOES_ENTITY_EXIST(PLAYER::PLAYER_PED_ID()))
    {
     TASK::TASK_CLEAR_LOOK_AT(PLAYER::PLAYER_PED_ID());
  }
 ...
}

Another one where it doesn't "look" at current player - 

TASK::TASK_PLAY_ANIM(l_3ED, "missheist_agency2aig_2", "look_at_phone_a", 1000.0, -2.0, -1, 48, v_2, 0, 0, 0);
PED::_2208438012482A1A(l_3ED, 0, 0);
TASK::TASK_CLEAR_LOOK_AT(l_3ED);
]]
function natives.TASK.TASK_CLEAR_LOOK_AT(--[[Ped]] ped) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_CLEAR_LOOK_AT' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x0F804F1DB19B9689, ped)
end
natives.task.task_clear_look_at = natives.TASK.TASK_CLEAR_LOOK_AT

function natives.TASK.OPEN_SEQUENCE_TASK(--[[int*]] taskSequenceId) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.OPEN_SEQUENCE_TASK' due to disabled trusted mode")

	assert(type(taskSequenceId) == "userdata", "Arg #1 (taskSequenceId) must be a userdata.")

	local result = native_call(0xE8854A4326B9E12B, taskSequenceId)
end
natives.task.open_sequence_task = natives.TASK.OPEN_SEQUENCE_TASK

function natives.TASK.CLOSE_SEQUENCE_TASK(--[[int]] taskSequenceId) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.CLOSE_SEQUENCE_TASK' due to disabled trusted mode")

	assert(type(taskSequenceId) == "number", "Arg #1 (taskSequenceId) must be a number.")

	local result = native_call(0x39E72BC99E6360CB, taskSequenceId)
end
natives.task.close_sequence_task = natives.TASK.CLOSE_SEQUENCE_TASK

function natives.TASK.TASK_PERFORM_SEQUENCE(--[[Ped]] ped, --[[int]] taskSequenceId) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_PERFORM_SEQUENCE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(taskSequenceId) == "number", "Arg #2 (taskSequenceId) must be a number.")

	local result = native_call(0x5ABA3986D90D8A3B, ped, taskSequenceId)
end
natives.task.task_perform_sequence = natives.TASK.TASK_PERFORM_SEQUENCE

function natives.TASK.TASK_PERFORM_SEQUENCE_LOCALLY(--[[Ped]] ped, --[[int]] taskSequenceId) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_PERFORM_SEQUENCE_LOCALLY' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(taskSequenceId) == "number", "Arg #2 (taskSequenceId) must be a number.")

	local result = native_call(0x8C33220C8D78CA0D, ped, taskSequenceId)
end
natives.task.task_perform_sequence_locally = natives.TASK.TASK_PERFORM_SEQUENCE_LOCALLY

function natives.TASK.CLEAR_SEQUENCE_TASK(--[[int*]] taskSequenceId) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.CLEAR_SEQUENCE_TASK' due to disabled trusted mode")

	assert(type(taskSequenceId) == "userdata", "Arg #1 (taskSequenceId) must be a userdata.")

	local result = native_call(0x3841422E9C488D8C, taskSequenceId)
end
natives.task.clear_sequence_task = natives.TASK.CLEAR_SEQUENCE_TASK

function natives.TASK.SET_SEQUENCE_TO_REPEAT(--[[int]] taskSequenceId, --[[BOOL]] repeatParam) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.SET_SEQUENCE_TO_REPEAT' due to disabled trusted mode")

	assert(type(taskSequenceId) == "number", "Arg #1 (taskSequenceId) must be a number.")
	assert(type(repeatParam) == "boolean", "Arg #2 (repeatParam) must be a boolean.")

	local result = native_call(0x58C70CF3A41E4AE7, taskSequenceId, repeatParam)
end
natives.task.set_sequence_to_repeat = natives.TASK.SET_SEQUENCE_TO_REPEAT

--[[
returned values:
0 to 7 = task that's currently in progress, 0 meaning the first one.
-1 no task sequence in progress.
]]
function natives.TASK.GET_SEQUENCE_PROGRESS(--[[Ped]] ped) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.GET_SEQUENCE_PROGRESS' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x00A9010CFE1E3533, ped)
	return result:__tointeger()
end
natives.task.get_sequence_progress = natives.TASK.GET_SEQUENCE_PROGRESS

--[[
Task index enum: https://alloc8or.re/gta5/doc/enums/eTaskTypeIndex.txt
]]
function natives.TASK.GET_IS_TASK_ACTIVE(--[[Ped]] ped, --[[int]] taskIndex) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.GET_IS_TASK_ACTIVE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(taskIndex) == "number", "Arg #2 (taskIndex) must be a number.")

	local result = native_call(0xB0760331C7AA4155, ped, taskIndex)
	return result:__tointeger() ~= 0
end
natives.task.get_is_task_active = natives.TASK.GET_IS_TASK_ACTIVE

--[[
Gets the status of a script-assigned task.
taskHash: https://alloc8or.re/gta5/doc/enums/eScriptTaskHash.txt
]]
function natives.TASK.GET_SCRIPT_TASK_STATUS(--[[Ped]] ped, --[[Hash]] taskHash) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.GET_SCRIPT_TASK_STATUS' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(taskHash) == "number", "Arg #2 (taskHash) must be a number.")

	local result = native_call(0x77F1BEB8863288D5, ped, taskHash)
	return result:__tointeger()
end
natives.task.get_script_task_status = natives.TASK.GET_SCRIPT_TASK_STATUS

--[[
https://alloc8or.re/gta5/doc/enums/eVehicleMissionType.txt
]]
function natives.TASK.GET_ACTIVE_VEHICLE_MISSION_TYPE(--[[Vehicle]] vehicle) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.GET_ACTIVE_VEHICLE_MISSION_TYPE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x534AEBA6E5ED4CAB, vehicle)
	return result:__tointeger()
end
natives.task.get_active_vehicle_mission_type = natives.TASK.GET_ACTIVE_VEHICLE_MISSION_TYPE

--[[
Flags are the same flags used in TASK_LEAVE_VEHICLE
]]
function natives.TASK.TASK_LEAVE_ANY_VEHICLE(--[[Ped]] ped, --[[int]] delayTime, --[[int]] flags) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_LEAVE_ANY_VEHICLE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(delayTime) == "number", "Arg #2 (delayTime) must be a number.")
	assert(type(flags) == "number", "Arg #3 (flags) must be a number.")

	local result = native_call(0x504D54DF3F6F2247, ped, delayTime, flags)
end
natives.task.task_leave_any_vehicle = natives.TASK.TASK_LEAVE_ANY_VEHICLE

function natives.TASK.TASK_AIM_GUN_SCRIPTED(--[[Ped]] ped, --[[Hash]] scriptTask, --[[BOOL]] disableBlockingClip, --[[BOOL]] instantBlendToAim) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_AIM_GUN_SCRIPTED' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(scriptTask) == "number", "Arg #2 (scriptTask) must be a number.")
	assert(type(disableBlockingClip) == "boolean", "Arg #3 (disableBlockingClip) must be a boolean.")
	assert(type(instantBlendToAim) == "boolean", "Arg #4 (instantBlendToAim) must be a boolean.")

	local result = native_call(0x7A192BE16D373D00, ped, scriptTask, disableBlockingClip, instantBlendToAim)
end
natives.task.task_aim_gun_scripted = natives.TASK.TASK_AIM_GUN_SCRIPTED

function natives.TASK.TASK_AIM_GUN_SCRIPTED_WITH_TARGET(--[[Ped]] ped, --[[Ped]] target, --[[float]] x, --[[float]] y, --[[float]] z, --[[int]] gunTaskType, --[[BOOL]] disableBlockingClip, --[[BOOL]] forceAim) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_AIM_GUN_SCRIPTED_WITH_TARGET' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(target) == "number", "Arg #2 (target) must be a number.")
	assert(type(x) == "number", "Arg #3 (x) must be a number.")
	assert(type(y) == "number", "Arg #4 (y) must be a number.")
	assert(type(z) == "number", "Arg #5 (z) must be a number.")
	assert(type(gunTaskType) == "number", "Arg #6 (gunTaskType) must be a number.")
	assert(type(disableBlockingClip) == "boolean", "Arg #7 (disableBlockingClip) must be a boolean.")
	assert(type(forceAim) == "boolean", "Arg #8 (forceAim) must be a boolean.")

	local result = native_call(0x8605AF0DE8B3A5AC, ped, target, x, y, z, gunTaskType, disableBlockingClip, forceAim)
end
natives.task.task_aim_gun_scripted_with_target = natives.TASK.TASK_AIM_GUN_SCRIPTED_WITH_TARGET

function natives.TASK.UPDATE_TASK_AIM_GUN_SCRIPTED_TARGET(--[[Ped]] ped, --[[Ped]] target, --[[float]] x, --[[float]] y, --[[float]] z, --[[BOOL]] disableBlockingClip) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.UPDATE_TASK_AIM_GUN_SCRIPTED_TARGET' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(target) == "number", "Arg #2 (target) must be a number.")
	assert(type(x) == "number", "Arg #3 (x) must be a number.")
	assert(type(y) == "number", "Arg #4 (y) must be a number.")
	assert(type(z) == "number", "Arg #5 (z) must be a number.")
	assert(type(disableBlockingClip) == "boolean", "Arg #6 (disableBlockingClip) must be a boolean.")

	local result = native_call(0x9724FB59A3E72AD0, ped, target, x, y, z, disableBlockingClip)
end
natives.task.update_task_aim_gun_scripted_target = natives.TASK.UPDATE_TASK_AIM_GUN_SCRIPTED_TARGET

function natives.TASK.GET_CLIP_SET_FOR_SCRIPTED_GUN_TASK(--[[int]] gunTaskType) -- Returns const char*
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.GET_CLIP_SET_FOR_SCRIPTED_GUN_TASK' due to disabled trusted mode")

	assert(type(gunTaskType) == "number", "Arg #1 (gunTaskType) must be a number.")

	local result = native_call(0x3A8CADC7D37AACC5, gunTaskType)
	return result:__tostring(true)
end
natives.task.get_clip_set_for_scripted_gun_task = natives.TASK.GET_CLIP_SET_FOR_SCRIPTED_GUN_TASK

--[[
duration: the amount of time in milliseconds to do the task.  -1 will keep the task going until either another task is applied, or CLEAR_ALL_TASKS() is called with the ped
]]
function natives.TASK.TASK_AIM_GUN_AT_ENTITY(--[[Ped]] ped, --[[Entity]] entity, --[[int]] duration, --[[BOOL]] instantBlendToAim) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_AIM_GUN_AT_ENTITY' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(entity) == "number", "Arg #2 (entity) must be a number.")
	assert(type(duration) == "number", "Arg #3 (duration) must be a number.")
	assert(type(instantBlendToAim) == "boolean", "Arg #4 (instantBlendToAim) must be a boolean.")

	local result = native_call(0x9B53BB6E8943AF53, ped, entity, duration, instantBlendToAim)
end
natives.task.task_aim_gun_at_entity = natives.TASK.TASK_AIM_GUN_AT_ENTITY

--[[
duration: the amount of time in milliseconds to do the task. -1 will keep the task going until either another task is applied, or CLEAR_ALL_TASKS() is called with the ped
]]
function natives.TASK.TASK_TURN_PED_TO_FACE_ENTITY(--[[Ped]] ped, --[[Entity]] entity, --[[int]] duration) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_TURN_PED_TO_FACE_ENTITY' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(entity) == "number", "Arg #2 (entity) must be a number.")
	assert(type(duration) == "number", "Arg #3 (duration) must be a number.")

	local result = native_call(0x5AD23D40115353AC, ped, entity, duration)
end
natives.task.task_turn_ped_to_face_entity = natives.TASK.TASK_TURN_PED_TO_FACE_ENTITY

function natives.TASK.TASK_AIM_GUN_AT_COORD(--[[Ped]] ped, --[[float]] x, --[[float]] y, --[[float]] z, --[[int]] time, --[[BOOL]] instantBlendToAim, --[[BOOL]] playAnimIntro) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_AIM_GUN_AT_COORD' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")
	assert(type(time) == "number", "Arg #5 (time) must be a number.")
	assert(type(instantBlendToAim) == "boolean", "Arg #6 (instantBlendToAim) must be a boolean.")
	assert(type(playAnimIntro) == "boolean", "Arg #7 (playAnimIntro) must be a boolean.")

	local result = native_call(0x6671F3EEC681BDA1, ped, x, y, z, time, instantBlendToAim, playAnimIntro)
end
natives.task.task_aim_gun_at_coord = natives.TASK.TASK_AIM_GUN_AT_COORD

--[[
Firing Pattern Hash Information: https://pastebin.com/Px036isB
]]
function natives.TASK.TASK_SHOOT_AT_COORD(--[[Ped]] ped, --[[float]] x, --[[float]] y, --[[float]] z, --[[int]] duration, --[[Hash]] firingPattern) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_SHOOT_AT_COORD' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")
	assert(type(duration) == "number", "Arg #5 (duration) must be a number.")
	assert(type(firingPattern) == "number", "Arg #6 (firingPattern) must be a number.")

	local result = native_call(0x46A6CC01E0826106, ped, x, y, z, duration, firingPattern)
end
natives.task.task_shoot_at_coord = natives.TASK.TASK_SHOOT_AT_COORD

--[[
Makes the specified ped shuffle to the next vehicle seat.
The ped MUST be in a vehicle and the vehicle parameter MUST be the ped's current vehicle.
]]
function natives.TASK.TASK_SHUFFLE_TO_NEXT_VEHICLE_SEAT(--[[Ped]] ped, --[[Vehicle]] vehicle, --[[BOOL]] useAlternateShuffle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_SHUFFLE_TO_NEXT_VEHICLE_SEAT' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(vehicle) == "number", "Arg #2 (vehicle) must be a number.")
	assert(type(useAlternateShuffle) == "boolean", "Arg #3 (useAlternateShuffle) must be a boolean.")

	local result = native_call(0x7AA80209BDA643EB, ped, vehicle, useAlternateShuffle)
end
natives.task.task_shuffle_to_next_vehicle_seat = natives.TASK.TASK_SHUFFLE_TO_NEXT_VEHICLE_SEAT

function natives.TASK.CLEAR_PED_TASKS(--[[Ped]] ped) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.CLEAR_PED_TASKS' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0xE1EF3C1216AFF2CD, ped)
end
natives.task.clear_ped_tasks = natives.TASK.CLEAR_PED_TASKS

function natives.TASK.CLEAR_PED_SECONDARY_TASK(--[[Ped]] ped) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.CLEAR_PED_SECONDARY_TASK' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x176CECF6F920D707, ped)
end
natives.task.clear_ped_secondary_task = natives.TASK.CLEAR_PED_SECONDARY_TASK

function natives.TASK.TASK_EVERYONE_LEAVE_VEHICLE(--[[Vehicle]] vehicle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_EVERYONE_LEAVE_VEHICLE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x7F93691AB4B92272, vehicle)
end
natives.task.task_everyone_leave_vehicle = natives.TASK.TASK_EVERYONE_LEAVE_VEHICLE

--[[
enum ESEEK_ENTITY_OFFSET_FLAGS
{
	ESEEK_OFFSET_ORIENTATES_WITH_ENTITY = 0x01,
	ESEEK_KEEP_TO_PAVEMENTS = 0x02
};
]]
function natives.TASK.TASK_GOTO_ENTITY_OFFSET(--[[Ped]] ped, --[[Entity]] entity, --[[int]] time, --[[float]] seekRadius, --[[float]] seekAngleDeg, --[[float]] moveBlendRatio, --[[int]] gotoEntityOffsetFlags) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_GOTO_ENTITY_OFFSET' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(entity) == "number", "Arg #2 (entity) must be a number.")
	assert(type(time) == "number", "Arg #3 (time) must be a number.")
	assert(type(seekRadius) == "number", "Arg #4 (seekRadius) must be a number.")
	assert(type(seekAngleDeg) == "number", "Arg #5 (seekAngleDeg) must be a number.")
	assert(type(moveBlendRatio) == "number", "Arg #6 (moveBlendRatio) must be a number.")
	assert(type(gotoEntityOffsetFlags) == "number", "Arg #7 (gotoEntityOffsetFlags) must be a number.")

	local result = native_call(0xE39B4FF4FDEBDE27, ped, entity, time, seekRadius, seekAngleDeg, moveBlendRatio, gotoEntityOffsetFlags)
end
natives.task.task_goto_entity_offset = natives.TASK.TASK_GOTO_ENTITY_OFFSET

function natives.TASK.TASK_GOTO_ENTITY_OFFSET_XY(--[[Ped]] ped, --[[Entity]] entity, --[[int]] duration, --[[float]] targetRadius, --[[float]] offsetX, --[[float]] offsetY, --[[float]] moveBlendRatio, --[[int]] gotoEntityOffsetFlags) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_GOTO_ENTITY_OFFSET_XY' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(entity) == "number", "Arg #2 (entity) must be a number.")
	assert(type(duration) == "number", "Arg #3 (duration) must be a number.")
	assert(type(targetRadius) == "number", "Arg #4 (targetRadius) must be a number.")
	assert(type(offsetX) == "number", "Arg #5 (offsetX) must be a number.")
	assert(type(offsetY) == "number", "Arg #6 (offsetY) must be a number.")
	assert(type(moveBlendRatio) == "number", "Arg #7 (moveBlendRatio) must be a number.")
	assert(type(gotoEntityOffsetFlags) == "number", "Arg #8 (gotoEntityOffsetFlags) must be a number.")

	local result = native_call(0x338E7EF52B6095A9, ped, entity, duration, targetRadius, offsetX, offsetY, moveBlendRatio, gotoEntityOffsetFlags)
end
natives.task.task_goto_entity_offset_xy = natives.TASK.TASK_GOTO_ENTITY_OFFSET_XY

--[[
duration in milliseconds
]]
function natives.TASK.TASK_TURN_PED_TO_FACE_COORD(--[[Ped]] ped, --[[float]] x, --[[float]] y, --[[float]] z, --[[int]] duration) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_TURN_PED_TO_FACE_COORD' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")
	assert(type(duration) == "number", "Arg #5 (duration) must be a number.")

	local result = native_call(0x1DDA930A0AC38571, ped, x, y, z, duration)
end
natives.task.task_turn_ped_to_face_coord = natives.TASK.TASK_TURN_PED_TO_FACE_COORD

--[[
'1 - brake
'3 - brake + reverse
'4 - turn left 90 + braking
'5 - turn right 90 + braking
'6 - brake strong (handbrake?) until time ends
'7 - turn left + accelerate
'8 - turn right + accelerate
'9 - weak acceleration
'10 - turn left + restore wheel pos to center in the end
'11 - turn right + restore wheel pos to center in the end
'13 - turn left + go reverse
'14 - turn left + go reverse
'16 - crash the game after like 2 seconds :)
'17 - keep actual state, game crashed after few tries
'18 - game crash
'19 - strong brake + turn left/right
'20 - weak brake + turn left then turn right
'21 - weak brake + turn right then turn left
'22 - brake + reverse
'23 - accelerate fast
'24 - brake
'25 - brake turning left then when almost stopping it turns left more
'26 - brake turning right then when almost stopping it turns right more
'27 - brake until car stop or until time ends
'28 - brake + strong reverse acceleration
'30 - performs a burnout (brake until stop + brake and accelerate)
'31 - accelerate + handbrake
'32 - accelerate very strong

Seems to be this:
Works on NPCs, but overrides their current task. If inside a task sequence (and not being the last task), "time" will work, otherwise the task will be performed forever until tasked with something else
]]
function natives.TASK.TASK_VEHICLE_TEMP_ACTION(--[[Ped]] driver, --[[Vehicle]] vehicle, --[[int]] action, --[[int]] time) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_VEHICLE_TEMP_ACTION' due to disabled trusted mode")

	assert(type(driver) == "number", "Arg #1 (driver) must be a number.")
	assert(type(vehicle) == "number", "Arg #2 (vehicle) must be a number.")
	assert(type(action) == "number", "Arg #3 (action) must be a number.")
	assert(type(time) == "number", "Arg #4 (time) must be a number.")

	local result = native_call(0xC429DCEEB339E129, driver, vehicle, action, time)
end
natives.task.task_vehicle_temp_action = natives.TASK.TASK_VEHICLE_TEMP_ACTION

--[[
missionType: https://alloc8or.re/gta5/doc/enums/eVehicleMissionType.txt
]]
function natives.TASK.TASK_VEHICLE_MISSION(--[[Ped]] driver, --[[Vehicle]] vehicle, --[[Vehicle]] vehicleTarget, --[[int]] missionType, --[[float]] cruiseSpeed, --[[int]] drivingStyle, --[[float]] targetReached, --[[float]] straightLineDistance, --[[BOOL]] DriveAgainstTraffic) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_VEHICLE_MISSION' due to disabled trusted mode")

	assert(type(driver) == "number", "Arg #1 (driver) must be a number.")
	assert(type(vehicle) == "number", "Arg #2 (vehicle) must be a number.")
	assert(type(vehicleTarget) == "number", "Arg #3 (vehicleTarget) must be a number.")
	assert(type(missionType) == "number", "Arg #4 (missionType) must be a number.")
	assert(type(cruiseSpeed) == "number", "Arg #5 (cruiseSpeed) must be a number.")
	assert(type(drivingStyle) == "number", "Arg #6 (drivingStyle) must be a number.")
	assert(type(targetReached) == "number", "Arg #7 (targetReached) must be a number.")
	assert(type(straightLineDistance) == "number", "Arg #8 (straightLineDistance) must be a number.")
	assert(type(DriveAgainstTraffic) == "boolean", "Arg #9 (DriveAgainstTraffic) must be a boolean.")

	local result = native_call(0x659427E0EF36BCDE, driver, vehicle, vehicleTarget, missionType, cruiseSpeed, drivingStyle, targetReached, straightLineDistance, DriveAgainstTraffic)
end
natives.task.task_vehicle_mission = natives.TASK.TASK_VEHICLE_MISSION

--[[
See TASK_VEHICLE_MISSION
]]
function natives.TASK.TASK_VEHICLE_MISSION_PED_TARGET(--[[Ped]] ped, --[[Vehicle]] vehicle, --[[Ped]] pedTarget, --[[int]] missionType, --[[float]] maxSpeed, --[[int]] drivingStyle, --[[float]] minDistance, --[[float]] straightLineDistance, --[[BOOL]] DriveAgainstTraffic) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_VEHICLE_MISSION_PED_TARGET' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(vehicle) == "number", "Arg #2 (vehicle) must be a number.")
	assert(type(pedTarget) == "number", "Arg #3 (pedTarget) must be a number.")
	assert(type(missionType) == "number", "Arg #4 (missionType) must be a number.")
	assert(type(maxSpeed) == "number", "Arg #5 (maxSpeed) must be a number.")
	assert(type(drivingStyle) == "number", "Arg #6 (drivingStyle) must be a number.")
	assert(type(minDistance) == "number", "Arg #7 (minDistance) must be a number.")
	assert(type(straightLineDistance) == "number", "Arg #8 (straightLineDistance) must be a number.")
	assert(type(DriveAgainstTraffic) == "boolean", "Arg #9 (DriveAgainstTraffic) must be a boolean.")

	local result = native_call(0x9454528DF15D657A, ped, vehicle, pedTarget, missionType, maxSpeed, drivingStyle, minDistance, straightLineDistance, DriveAgainstTraffic)
end
natives.task.task_vehicle_mission_ped_target = natives.TASK.TASK_VEHICLE_MISSION_PED_TARGET

--[[
See TASK_VEHICLE_MISSION
]]
function natives.TASK.TASK_VEHICLE_MISSION_COORS_TARGET(--[[Ped]] ped, --[[Vehicle]] vehicle, --[[float]] x, --[[float]] y, --[[float]] z, --[[int]] mission, --[[float]] cruiseSpeed, --[[int]] drivingStyle, --[[float]] targetReached, --[[float]] straightLineDistance, --[[BOOL]] DriveAgainstTraffic) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_VEHICLE_MISSION_COORS_TARGET' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(vehicle) == "number", "Arg #2 (vehicle) must be a number.")
	assert(type(x) == "number", "Arg #3 (x) must be a number.")
	assert(type(y) == "number", "Arg #4 (y) must be a number.")
	assert(type(z) == "number", "Arg #5 (z) must be a number.")
	assert(type(mission) == "number", "Arg #6 (mission) must be a number.")
	assert(type(cruiseSpeed) == "number", "Arg #7 (cruiseSpeed) must be a number.")
	assert(type(drivingStyle) == "number", "Arg #8 (drivingStyle) must be a number.")
	assert(type(targetReached) == "number", "Arg #9 (targetReached) must be a number.")
	assert(type(straightLineDistance) == "number", "Arg #10 (straightLineDistance) must be a number.")
	assert(type(DriveAgainstTraffic) == "boolean", "Arg #11 (DriveAgainstTraffic) must be a boolean.")

	local result = native_call(0xF0AF20AA7731F8C3, ped, vehicle, x, y, z, mission, cruiseSpeed, drivingStyle, targetReached, straightLineDistance, DriveAgainstTraffic)
end
natives.task.task_vehicle_mission_coors_target = natives.TASK.TASK_VEHICLE_MISSION_COORS_TARGET

--[[
Makes a ped follow the targetVehicle with <minDistance> in between.

note: minDistance is ignored if drivingstyle is avoiding traffic, but Rushed is fine.

Mode: The mode defines the relative position to the targetVehicle. The ped will try to position its vehicle there.
-1 = behind
0 = ahead
1 = left
2 = right
3 = back left
4 = back right

if the target is closer than noRoadsDistance, the driver will ignore pathing/roads and follow you directly.

Driving Styles guide: gtaforums.com/topic/822314-guide-driving-styles/
]]
function natives.TASK.TASK_VEHICLE_ESCORT(--[[Ped]] ped, --[[Vehicle]] vehicle, --[[Vehicle]] targetVehicle, --[[int]] mode, --[[float]] speed, --[[int]] drivingStyle, --[[float]] minDistance, --[[int]] minHeightAboveTerrain, --[[float]] noRoadsDistance) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_VEHICLE_ESCORT' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(vehicle) == "number", "Arg #2 (vehicle) must be a number.")
	assert(type(targetVehicle) == "number", "Arg #3 (targetVehicle) must be a number.")
	assert(type(mode) == "number", "Arg #4 (mode) must be a number.")
	assert(type(speed) == "number", "Arg #5 (speed) must be a number.")
	assert(type(drivingStyle) == "number", "Arg #6 (drivingStyle) must be a number.")
	assert(type(minDistance) == "number", "Arg #7 (minDistance) must be a number.")
	assert(type(minHeightAboveTerrain) == "number", "Arg #8 (minHeightAboveTerrain) must be a number.")
	assert(type(noRoadsDistance) == "number", "Arg #9 (noRoadsDistance) must be a number.")

	local result = native_call(0x0FA6E4B75F302400, ped, vehicle, targetVehicle, mode, speed, drivingStyle, minDistance, minHeightAboveTerrain, noRoadsDistance)
end
natives.task.task_vehicle_escort = natives.TASK.TASK_VEHICLE_ESCORT

--[[
Makes a ped in a vehicle follow an entity (ped, vehicle, etc.)

drivingStyle: http://gtaforums.com/topic/822314-guide-driving-styles/
]]
function natives.TASK.TASK_VEHICLE_FOLLOW(--[[Ped]] driver, --[[Vehicle]] vehicle, --[[Entity]] targetEntity, --[[float]] speed, --[[int]] drivingStyle, --[[int]] minDistance) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_VEHICLE_FOLLOW' due to disabled trusted mode")

	assert(type(driver) == "number", "Arg #1 (driver) must be a number.")
	assert(type(vehicle) == "number", "Arg #2 (vehicle) must be a number.")
	assert(type(targetEntity) == "number", "Arg #3 (targetEntity) must be a number.")
	assert(type(speed) == "number", "Arg #4 (speed) must be a number.")
	assert(type(drivingStyle) == "number", "Arg #5 (drivingStyle) must be a number.")
	assert(type(minDistance) == "number", "Arg #6 (minDistance) must be a number.")

	local result = native_call(0xFC545A9F0626E3B6, driver, vehicle, targetEntity, speed, drivingStyle, minDistance)
end
natives.task.task_vehicle_follow = natives.TASK.TASK_VEHICLE_FOLLOW

--[[
chases targetEnt fast and aggressively
--
Makes ped (needs to be in vehicle) chase targetEnt.
]]
function natives.TASK.TASK_VEHICLE_CHASE(--[[Ped]] driver, --[[Entity]] targetEnt) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_VEHICLE_CHASE' due to disabled trusted mode")

	assert(type(driver) == "number", "Arg #1 (driver) must be a number.")
	assert(type(targetEnt) == "number", "Arg #2 (targetEnt) must be a number.")

	local result = native_call(0x3C08A8E30363B353, driver, targetEnt)
end
natives.task.task_vehicle_chase = natives.TASK.TASK_VEHICLE_CHASE

--[[
pilot, vehicle and altitude are rather self-explanatory.

p4: is unused variable in the function.

entityToFollow: you can provide a Vehicle entity or a Ped entity, the heli will protect them.

'targetSpeed':  The pilot will dip the nose AS MUCH AS POSSIBLE so as to reach this value AS FAST AS POSSIBLE.  As such, you'll want to modulate it as opposed to calling it via a hard-wired, constant #.

'radius' isn't just "stop within radius of X of target" like with ground vehicles.  In this case, the pilot will fly an entire circle around 'radius' and continue to do so.

NOT CONFIRMED:  p7 appears to be a FlyingStyle enum.  Still investigating it as of this writing, but playing around with values here appears to result in different -behavior- as opposed to offsetting coordinates, altitude, target speed, etc.

NOTE: If the pilot finds enemies, it will engage them until it kills them, but will return to protect the ped/vehicle given shortly thereafter.
]]
function natives.TASK.TASK_VEHICLE_HELI_PROTECT(--[[Ped]] pilot, --[[Vehicle]] vehicle, --[[Entity]] entityToFollow, --[[float]] targetSpeed, --[[int]] drivingFlags, --[[float]] radius, --[[int]] altitude, --[[int]] heliFlags) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_VEHICLE_HELI_PROTECT' due to disabled trusted mode")

	assert(type(pilot) == "number", "Arg #1 (pilot) must be a number.")
	assert(type(vehicle) == "number", "Arg #2 (vehicle) must be a number.")
	assert(type(entityToFollow) == "number", "Arg #3 (entityToFollow) must be a number.")
	assert(type(targetSpeed) == "number", "Arg #4 (targetSpeed) must be a number.")
	assert(type(drivingFlags) == "number", "Arg #5 (drivingFlags) must be a number.")
	assert(type(radius) == "number", "Arg #6 (radius) must be a number.")
	assert(type(altitude) == "number", "Arg #7 (altitude) must be a number.")
	assert(type(heliFlags) == "number", "Arg #8 (heliFlags) must be a number.")

	local result = native_call(0x1E09C32048FEFD1C, pilot, vehicle, entityToFollow, targetSpeed, drivingFlags, radius, altitude, heliFlags)
end
natives.task.task_vehicle_heli_protect = natives.TASK.TASK_VEHICLE_HELI_PROTECT

--[[
Flag 8: Medium-aggressive boxing tactic with a bit of PIT
Flag 1: Aggressive ramming of suspect
Flag 2: Ram attempts
Flag 32: Stay back from suspect, no tactical contact. Convoy-like.
Flag 16: Ramming, seems to be slightly less aggressive than 1-2.
]]
function natives.TASK.SET_TASK_VEHICLE_CHASE_BEHAVIOR_FLAG(--[[Ped]] ped, --[[int]] flag, --[[BOOL]] set) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.SET_TASK_VEHICLE_CHASE_BEHAVIOR_FLAG' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(flag) == "number", "Arg #2 (flag) must be a number.")
	assert(type(set) == "boolean", "Arg #3 (set) must be a boolean.")

	local result = native_call(0xCC665AAC360D31E7, ped, flag, set)
end
natives.task.set_task_vehicle_chase_behavior_flag = natives.TASK.SET_TASK_VEHICLE_CHASE_BEHAVIOR_FLAG

function natives.TASK.SET_TASK_VEHICLE_CHASE_IDEAL_PURSUIT_DISTANCE(--[[Ped]] ped, --[[float]] distance) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.SET_TASK_VEHICLE_CHASE_IDEAL_PURSUIT_DISTANCE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(distance) == "number", "Arg #2 (distance) must be a number.")

	local result = native_call(0x639B642FACBE4EDD, ped, distance)
end
natives.task.set_task_vehicle_chase_ideal_pursuit_distance = natives.TASK.SET_TASK_VEHICLE_CHASE_IDEAL_PURSUIT_DISTANCE

--[[
Ped pilot should be in a heli.
EntityToFollow can be a vehicle or Ped.

x,y,z appear to be how close to the EntityToFollow the heli should be. Scripts use 0.0, 0.0, 80.0. Then the heli tries to position itself 80 units above the EntityToFollow. If you reduce it to -5.0, it tries to go below (if the EntityToFollow is a heli or plane)


NOTE: If the pilot finds enemies, it will engage them, then remain there idle, not continuing to chase the Entity given.
]]
function natives.TASK.TASK_HELI_CHASE(--[[Ped]] pilot, --[[Entity]] entityToFollow, --[[float]] x, --[[float]] y, --[[float]] z) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_HELI_CHASE' due to disabled trusted mode")

	assert(type(pilot) == "number", "Arg #1 (pilot) must be a number.")
	assert(type(entityToFollow) == "number", "Arg #2 (entityToFollow) must be a number.")
	assert(type(x) == "number", "Arg #3 (x) must be a number.")
	assert(type(y) == "number", "Arg #4 (y) must be a number.")
	assert(type(z) == "number", "Arg #5 (z) must be a number.")

	local result = native_call(0xAC83B1DB38D0ADA0, pilot, entityToFollow, x, y, z)
end
natives.task.task_heli_chase = natives.TASK.TASK_HELI_CHASE

function natives.TASK.TASK_PLANE_CHASE(--[[Ped]] pilot, --[[Entity]] entityToFollow, --[[float]] x, --[[float]] y, --[[float]] z) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_PLANE_CHASE' due to disabled trusted mode")

	assert(type(pilot) == "number", "Arg #1 (pilot) must be a number.")
	assert(type(entityToFollow) == "number", "Arg #2 (entityToFollow) must be a number.")
	assert(type(x) == "number", "Arg #3 (x) must be a number.")
	assert(type(y) == "number", "Arg #4 (y) must be a number.")
	assert(type(z) == "number", "Arg #5 (z) must be a number.")

	local result = native_call(0x2D2386F273FF7A25, pilot, entityToFollow, x, y, z)
end
natives.task.task_plane_chase = natives.TASK.TASK_PLANE_CHASE

function natives.TASK.TASK_PLANE_LAND(--[[Ped]] pilot, --[[Vehicle]] plane, --[[float]] runwayStartX, --[[float]] runwayStartY, --[[float]] runwayStartZ, --[[float]] runwayEndX, --[[float]] runwayEndY, --[[float]] runwayEndZ) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_PLANE_LAND' due to disabled trusted mode")

	assert(type(pilot) == "number", "Arg #1 (pilot) must be a number.")
	assert(type(plane) == "number", "Arg #2 (plane) must be a number.")
	assert(type(runwayStartX) == "number", "Arg #3 (runwayStartX) must be a number.")
	assert(type(runwayStartY) == "number", "Arg #4 (runwayStartY) must be a number.")
	assert(type(runwayStartZ) == "number", "Arg #5 (runwayStartZ) must be a number.")
	assert(type(runwayEndX) == "number", "Arg #6 (runwayEndX) must be a number.")
	assert(type(runwayEndY) == "number", "Arg #7 (runwayEndY) must be a number.")
	assert(type(runwayEndZ) == "number", "Arg #8 (runwayEndZ) must be a number.")

	local result = native_call(0xBF19721FA34D32C0, pilot, plane, runwayStartX, runwayStartY, runwayStartZ, runwayEndX, runwayEndY, runwayEndZ)
end
natives.task.task_plane_land = natives.TASK.TASK_PLANE_LAND

function natives.TASK.CLEAR_DEFAULT_PRIMARY_TASK(--[[Ped]] ped) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.CLEAR_DEFAULT_PRIMARY_TASK' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x6100B3CEFD43452E, ped)
end
natives.task.clear_default_primary_task = natives.TASK.CLEAR_DEFAULT_PRIMARY_TASK

--[[
This native is very useful when switching the player to a ped inside a vehicle that has a task assigned prior to the player switch.
It is necessary to clear the ped's tasks AND call this native with the vehicle the player is switching into in order to allow the player to control the vehicle after the player switches.
]]
function natives.TASK.CLEAR_PRIMARY_VEHICLE_TASK(--[[Vehicle]] vehicle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.CLEAR_PRIMARY_VEHICLE_TASK' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0xDBBC7A2432524127, vehicle)
end
natives.task.clear_primary_vehicle_task = natives.TASK.CLEAR_PRIMARY_VEHICLE_TASK

function natives.TASK.CLEAR_VEHICLE_CRASH_TASK(--[[Vehicle]] vehicle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.CLEAR_VEHICLE_CRASH_TASK' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x53DDC75BC3AC0A90, vehicle)
end
natives.task.clear_vehicle_crash_task = natives.TASK.CLEAR_VEHICLE_CRASH_TASK

function natives.TASK.TASK_PLANE_GOTO_PRECISE_VTOL(--[[Ped]] ped, --[[Vehicle]] vehicle, --[[float]] x, --[[float]] y, --[[float]] z, --[[int]] flightHeight, --[[int]] minHeightAboveTerrain, --[[BOOL]] useDesiredOrientation, --[[float]] desiredOrientation, --[[BOOL]] autopilot) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_PLANE_GOTO_PRECISE_VTOL' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(vehicle) == "number", "Arg #2 (vehicle) must be a number.")
	assert(type(x) == "number", "Arg #3 (x) must be a number.")
	assert(type(y) == "number", "Arg #4 (y) must be a number.")
	assert(type(z) == "number", "Arg #5 (z) must be a number.")
	assert(type(flightHeight) == "number", "Arg #6 (flightHeight) must be a number.")
	assert(type(minHeightAboveTerrain) == "number", "Arg #7 (minHeightAboveTerrain) must be a number.")
	assert(type(useDesiredOrientation) == "boolean", "Arg #8 (useDesiredOrientation) must be a boolean.")
	assert(type(desiredOrientation) == "number", "Arg #9 (desiredOrientation) must be a number.")
	assert(type(autopilot) == "boolean", "Arg #10 (autopilot) must be a boolean.")

	local result = native_call(0xF7F9DCCA89E7505B, ped, vehicle, x, y, z, flightHeight, minHeightAboveTerrain, useDesiredOrientation, desiredOrientation, autopilot)
end
natives.task.task_plane_goto_precise_vtol = natives.TASK.TASK_PLANE_GOTO_PRECISE_VTOL

--[[
Used in am_vehicle_spawn.ysc and am_mp_submarine.ysc.

p0 is always 0, p5 is always 1

p1 is the vehicle handle of the submarine. Submarine must have a driver, but the ped handle is not passed to the native.

Speed can be set by calling SET_DRIVE_TASK_CRUISE_SPEED after
]]
function natives.TASK.TASK_SUBMARINE_GOTO_AND_STOP(--[[Ped]] ped, --[[Vehicle]] submarine, --[[float]] x, --[[float]] y, --[[float]] z, --[[BOOL]] autopilot) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_SUBMARINE_GOTO_AND_STOP' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(submarine) == "number", "Arg #2 (submarine) must be a number.")
	assert(type(x) == "number", "Arg #3 (x) must be a number.")
	assert(type(y) == "number", "Arg #4 (y) must be a number.")
	assert(type(z) == "number", "Arg #5 (z) must be a number.")
	assert(type(autopilot) == "boolean", "Arg #6 (autopilot) must be a boolean.")

	local result = native_call(0xC22B40579A498CA4, ped, submarine, x, y, z, autopilot)
end
natives.task.task_submarine_goto_and_stop = natives.TASK.TASK_SUBMARINE_GOTO_AND_STOP

--[[
Must have targetVehicle, targetPed, OR destination X/Y/Z set
Will follow targeted vehicle/ped, or fly to destination
Set whichever is not being used to 0


Mission mode type:
 - 4, 7: Forces heli to snap to the heading if set, flies to destination or tracks specified entity (mode 4 only works for coordinates, 7 works for coordinates OR ped/vehicle)
 - 6: Attacks the target ped/vehicle with mounted weapons. If radius is set, will maintain that distance from target.
 - 8: Makes the heli flee from the ped/vehicle/coordinate
 - 9: Circles around target ped/vehicle, snaps to angle if set. Behavior flag (last parameter) of 2048 switches from counter-clockwise to clockwise circling. Does not work with coordinate destination.
 - 10, 11: Follows ped/vehicle target and imitates target heading. Only works with ped/vehicle target, not coord target
 - 19: Heli lands at specified coordinate, ignores heading (lands facing whatever direction it is facing when the task is started)
 - 20: Makes the heli land when near target ped. It won't resume chasing.
 - 21: Emulates a helicopter crash
 - 23: makes the heli circle erratically around ped


Heli will fly at maxSpeed (up to actual maximum speed defined by the model's handling config)
You can use SET_DRIVE_TASK_CRUISE_SPEED to modulate the speed based on distance to the target without having to re-invoke the task native. Setting to 8.0 when close to the destination results in a much smoother approach.

If minHeight and maxHeight are set, heli will fly between those specified elevations, relative to ground level and any obstructions/buildings below. You can specify -1 for either if you only want to specify one. Usually it is easiest to leave maxHeight at -1, and specify a reasonable minHeight to ensure clearance over any obstacles. Note this MUST be passed as an INT, not a FLOAT. 

Radius affects how closely the heli will follow tracked ped/vehicle, and when circling (mission type 9) sets the radius (in meters) that it will circle the target from

Heading is -1.0 for default behavior, which will point the nose of the helicopter towards the destination. Set a heading and the heli will lock to that direction when near its destination/target, but may still turn towards the destination when flying at higher speed from a further distance.

Behavior Flags is a bitwise value that modifies the AI behavior. Not clear what all flags do, but here are some guesses/notes:
   1: Forces heading to face E
   2: Unknown
   4: Tight circles around coordinate destination
   8: Unknown
  16: Circles around coordinate destination facing towards destination
  32: Flys to normally, then lands at coordinate destination and stays on the ground (using mission type 4)
  64: Ignores obstacles when flying, will follow at specified minHeight above ground level but will not avoid buildings, vehicles, etc.
 128: Unknown
 256: Unknown
 512: Unknown
1024: Unknown 
2048: Reverses direction of circling (mission type 9) to clockwise
4096: Hugs closer to the ground, maintains minHeight from ground generally, but barely clears buildings and dips down more between buildings instead of taking a more efficient/safe route
8192: Unknown

Unk3 is a float value, you may see -1082130432 for this value in decompiled native scripts, this is the equivalent to -1.0f. Seems to affect acceleration/aggressiveness, but not sure exactly how it works. Higher value seems to result in lower acceleration/less aggressive flying. Almost always -1.0 in native scripts, occasionally 20.0 or 50.0. Setting to 400.0 seems to work well for making the pilot not overshoot the destination when using coordinate destination.

Notes updated by PNWParksFan, May 2021

]]
function natives.TASK.TASK_HELI_MISSION(--[[Ped]] pilot, --[[Vehicle]] aircraft, --[[Vehicle]] targetVehicle, --[[Ped]] targetPed, --[[float]] destinationX, --[[float]] destinationY, --[[float]] destinationZ, --[[int]] missionFlag, --[[float]] maxSpeed, --[[float]] radius, --[[float]] targetHeading, --[[int]] maxHeight, --[[int]] minHeight, --[[float]] slowDownDistance, --[[int]] behaviorFlags) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_HELI_MISSION' due to disabled trusted mode")

	assert(type(pilot) == "number", "Arg #1 (pilot) must be a number.")
	assert(type(aircraft) == "number", "Arg #2 (aircraft) must be a number.")
	assert(type(targetVehicle) == "number", "Arg #3 (targetVehicle) must be a number.")
	assert(type(targetPed) == "number", "Arg #4 (targetPed) must be a number.")
	assert(type(destinationX) == "number", "Arg #5 (destinationX) must be a number.")
	assert(type(destinationY) == "number", "Arg #6 (destinationY) must be a number.")
	assert(type(destinationZ) == "number", "Arg #7 (destinationZ) must be a number.")
	assert(type(missionFlag) == "number", "Arg #8 (missionFlag) must be a number.")
	assert(type(maxSpeed) == "number", "Arg #9 (maxSpeed) must be a number.")
	assert(type(radius) == "number", "Arg #10 (radius) must be a number.")
	assert(type(targetHeading) == "number", "Arg #11 (targetHeading) must be a number.")
	assert(type(maxHeight) == "number", "Arg #12 (maxHeight) must be a number.")
	assert(type(minHeight) == "number", "Arg #13 (minHeight) must be a number.")
	assert(type(slowDownDistance) == "number", "Arg #14 (slowDownDistance) must be a number.")
	assert(type(behaviorFlags) == "number", "Arg #15 (behaviorFlags) must be a number.")

	local result = native_call(0xDAD029E187A2BEB4, pilot, aircraft, targetVehicle, targetPed, destinationX, destinationY, destinationZ, missionFlag, maxSpeed, radius, targetHeading, maxHeight, minHeight, slowDownDistance, behaviorFlags)
end
natives.task.task_heli_mission = natives.TASK.TASK_HELI_MISSION

function natives.TASK.TASK_HELI_ESCORT_HELI(--[[Ped]] pilot, --[[Vehicle]] heli1, --[[Vehicle]] heli2, --[[float]] offsetX, --[[float]] offsetY, --[[float]] offsetZ) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_HELI_ESCORT_HELI' due to disabled trusted mode")

	assert(type(pilot) == "number", "Arg #1 (pilot) must be a number.")
	assert(type(heli1) == "number", "Arg #2 (heli1) must be a number.")
	assert(type(heli2) == "number", "Arg #3 (heli2) must be a number.")
	assert(type(offsetX) == "number", "Arg #4 (offsetX) must be a number.")
	assert(type(offsetY) == "number", "Arg #5 (offsetY) must be a number.")
	assert(type(offsetZ) == "number", "Arg #6 (offsetZ) must be a number.")

	local result = native_call(0xB385523325077210, pilot, heli1, heli2, offsetX, offsetY, offsetZ)
end
natives.task.task_heli_escort_heli = natives.TASK.TASK_HELI_ESCORT_HELI

--[[
EXAMPLE USAGE:

Fly around target (Precautiously, keeps high altitude):
Function.Call(Hash.TASK_PLANE_MISSION, pilot, selectedAirplane, 0, 0, Target.X, Target.Y, Target.Z, 4, 100f, 0f, 90f, 0, 200f);

Fly around target (Dangerously, keeps VERY low altitude):
Function.Call(Hash.TASK_PLANE_MISSION, pilot, selectedAirplane, 0, 0, Target.X, Target.Y, Target.Z, 4, 100f, 0f, 90f, 0, -500f);

Fly directly into target:
Function.Call(Hash.TASK_PLANE_MISSION, pilot, selectedAirplane, 0, 0, Target.X, Target.Y, Target.Z, 4, 100f, 0f, 90f, 0, -5000f);

EXPANDED INFORMATION FOR ADVANCED USAGE (custom pilot)

'physicsSpeed': (THIS IS NOT YOUR ORDINARY SPEED PARAMETER: READ!!)
Think of this -first- as a radius value, not a true speed value.  The ACTUAL effective speed of the plane will be that of the maximum speed permissible to successfully fly in a -circle- with a radius of 'physicsSpeed'.  This also means that the plane must complete a circle before it can begin its "bombing run", its straight line pass towards the target.  p9 appears to influence the angle at which a "bombing run" begins, although I can't confirm yet.

VERY IMPORTANT: A "bombing run" will only occur if a plane can successfully determine a possible navigable route (the slower the value of 'physicsSpeed', the more precise the pilot can be due to less influence of physics on flightpath).  Otherwise, the pilot will continue to patrol around Destination (be it a dynamic Entity position vector or a fixed world coordinate vector.)

0 = Plane's physics are almost entirely frozen, plane appears to "orbit" around precise destination point
1-299 = Blend of "frozen, small radius" vs. normal vs. "accelerated, hyperfast, large radius"
300+ =  Vehicle behaves entirely like a normal gameplay plane.

'patrolBlend' (The lower the value, the more the Destination is treated as a "fly AT" rather than a "fly AROUND point".)

Scenario: Destination is an Entity on ground level, wide open field
-5000 = Pilot kamikazes directly into Entity
-1000 = Pilot flies extremely low -around- Entity, very prone to crashing
-200 = Pilot flies lower than average around Entity.
0 = Pilot flies around Entity, normal altitude
200 = Pilot flies an extra eighty units or so higher than 0 while flying around Destination (this doesn't seem to correlate directly into distance units.)

-- Valid mission types found in the exe: --

0 = None
1 = Unk
2 = CTaskVehicleRam
3 = CTaskVehicleBlock
4 = CTaskVehicleGoToPlane
5 = CTaskVehicleStop
6 = CTaskVehicleAttack
7 = CTaskVehicleFollow
8 = CTaskVehicleFleeAirborne
9= CTaskVehicleCircle
10 = CTaskVehicleEscort
15 = CTaskVehicleFollowRecording
16 = CTaskVehiclePoliceBehaviour
17 = CTaskVehicleCrash
]]
function natives.TASK.TASK_PLANE_MISSION(--[[Ped]] pilot, --[[Vehicle]] aircraft, --[[Vehicle]] targetVehicle, --[[Ped]] targetPed, --[[float]] destinationX, --[[float]] destinationY, --[[float]] destinationZ, --[[int]] missionFlag, --[[float]] angularDrag, --[[float]] targetReached, --[[float]] targetHeading, --[[float]] maxZ, --[[float]] minZ, --[[BOOL]] precise) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_PLANE_MISSION' due to disabled trusted mode")

	assert(type(pilot) == "number", "Arg #1 (pilot) must be a number.")
	assert(type(aircraft) == "number", "Arg #2 (aircraft) must be a number.")
	assert(type(targetVehicle) == "number", "Arg #3 (targetVehicle) must be a number.")
	assert(type(targetPed) == "number", "Arg #4 (targetPed) must be a number.")
	assert(type(destinationX) == "number", "Arg #5 (destinationX) must be a number.")
	assert(type(destinationY) == "number", "Arg #6 (destinationY) must be a number.")
	assert(type(destinationZ) == "number", "Arg #7 (destinationZ) must be a number.")
	assert(type(missionFlag) == "number", "Arg #8 (missionFlag) must be a number.")
	assert(type(angularDrag) == "number", "Arg #9 (angularDrag) must be a number.")
	assert(type(targetReached) == "number", "Arg #10 (targetReached) must be a number.")
	assert(type(targetHeading) == "number", "Arg #11 (targetHeading) must be a number.")
	assert(type(maxZ) == "number", "Arg #12 (maxZ) must be a number.")
	assert(type(minZ) == "number", "Arg #13 (minZ) must be a number.")
	assert(type(precise) == "boolean", "Arg #14 (precise) must be a boolean.")

	local result = native_call(0x23703CD154E83B88, pilot, aircraft, targetVehicle, targetPed, destinationX, destinationY, destinationZ, missionFlag, angularDrag, targetReached, targetHeading, maxZ, minZ, precise)
end
natives.task.task_plane_mission = natives.TASK.TASK_PLANE_MISSION

function natives.TASK.TASK_PLANE_TAXI(--[[Ped]] pilot, --[[Vehicle]] aircraft, --[[float]] x, --[[float]] y, --[[float]] z, --[[float]] cruiseSpeed, --[[float]] targetReached) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_PLANE_TAXI' due to disabled trusted mode")

	assert(type(pilot) == "number", "Arg #1 (pilot) must be a number.")
	assert(type(aircraft) == "number", "Arg #2 (aircraft) must be a number.")
	assert(type(x) == "number", "Arg #3 (x) must be a number.")
	assert(type(y) == "number", "Arg #4 (y) must be a number.")
	assert(type(z) == "number", "Arg #5 (z) must be a number.")
	assert(type(cruiseSpeed) == "number", "Arg #6 (cruiseSpeed) must be a number.")
	assert(type(targetReached) == "number", "Arg #7 (targetReached) must be a number.")

	local result = native_call(0x92C360B5F15D2302, pilot, aircraft, x, y, z, cruiseSpeed, targetReached)
end
natives.task.task_plane_taxi = natives.TASK.TASK_PLANE_TAXI

--[[
You need to call PED::SET_BLOCKING_OF_NON_TEMPORARY_EVENTS after TASK_BOAT_MISSION in order for the task to execute.

Working example
float vehicleMaxSpeed = VEHICLE::_GET_VEHICLE_MAX_SPEED(ENTITY::GET_ENTITY_MODEL(pedVehicle));
TASK::TASK_BOAT_MISSION(pedDriver, pedVehicle, 0, 0, waypointCoord.x, waypointCoord.y, waypointCoord.z, 4, vehicleMaxSpeed, 786469, -1.0, 7);
PED::SET_BLOCKING_OF_NON_TEMPORARY_EVENTS(pedDriver, 1);

P8 appears to be driving style flag - see gtaforums.com/topic/822314-guide-driving-styles/ for documentation
]]
function natives.TASK.TASK_BOAT_MISSION(--[[Ped]] pedDriver, --[[Vehicle]] vehicle, --[[Vehicle]] targetVehicle, --[[Ped]] targetPed, --[[float]] x, --[[float]] y, --[[float]] z, --[[int]] mission, --[[float]] maxSpeed, --[[int]] drivingStyle, --[[float]] targetReached, --[[Any]] boatFlags) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_BOAT_MISSION' due to disabled trusted mode")

	assert(type(pedDriver) == "number", "Arg #1 (pedDriver) must be a number.")
	assert(type(vehicle) == "number", "Arg #2 (vehicle) must be a number.")
	assert(type(targetVehicle) == "number", "Arg #3 (targetVehicle) must be a number.")
	assert(type(targetPed) == "number", "Arg #4 (targetPed) must be a number.")
	assert(type(x) == "number", "Arg #5 (x) must be a number.")
	assert(type(y) == "number", "Arg #6 (y) must be a number.")
	assert(type(z) == "number", "Arg #7 (z) must be a number.")
	assert(type(mission) == "number", "Arg #8 (mission) must be a number.")
	assert(type(maxSpeed) == "number", "Arg #9 (maxSpeed) must be a number.")
	assert(type(drivingStyle) == "number", "Arg #10 (drivingStyle) must be a number.")
	assert(type(targetReached) == "number", "Arg #11 (targetReached) must be a number.")
	assert(type(boatFlags) == "number", "Arg #12 (boatFlags) must be a number.")

	local result = native_call(0x15C86013127CE63F, pedDriver, vehicle, targetVehicle, targetPed, x, y, z, mission, maxSpeed, drivingStyle, targetReached, boatFlags)
end
natives.task.task_boat_mission = natives.TASK.TASK_BOAT_MISSION

--[[
Example:

TASK::TASK_DRIVE_BY(l_467[1/*22*/], PLAYER::PLAYER_PED_ID(), 0, 0.0, 0.0, 2.0, 300.0, 100, 0, ${firing_pattern_burst_fire_driveby});




Needs working example. Doesn't seem to do anything.

I marked p2 as targetVehicle as all these shooting related tasks seem to have that in common.
I marked p6 as distanceToShoot as if you think of GTA's Logic with the native SET_VEHICLE_SHOOT natives, it won't shoot till it gets within a certain distance of the target.
I marked p7 as pedAccuracy as it seems it's mostly 100 (Completely Accurate), 75, 90, etc. Although this could be the ammo count within the gun, but I highly doubt it. I will change this comment once I find out if it's ammo count or not.
]]
function natives.TASK.TASK_DRIVE_BY(--[[Ped]] driverPed, --[[Ped]] targetPed, --[[Vehicle]] targetVehicle, --[[float]] targetX, --[[float]] targetY, --[[float]] targetZ, --[[float]] distanceToShoot, --[[int]] pedAccuracy, --[[BOOL]] pushUnderneathDrivingTaskIfDriving, --[[Hash]] firingPattern) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_DRIVE_BY' due to disabled trusted mode")

	assert(type(driverPed) == "number", "Arg #1 (driverPed) must be a number.")
	assert(type(targetPed) == "number", "Arg #2 (targetPed) must be a number.")
	assert(type(targetVehicle) == "number", "Arg #3 (targetVehicle) must be a number.")
	assert(type(targetX) == "number", "Arg #4 (targetX) must be a number.")
	assert(type(targetY) == "number", "Arg #5 (targetY) must be a number.")
	assert(type(targetZ) == "number", "Arg #6 (targetZ) must be a number.")
	assert(type(distanceToShoot) == "number", "Arg #7 (distanceToShoot) must be a number.")
	assert(type(pedAccuracy) == "number", "Arg #8 (pedAccuracy) must be a number.")
	assert(type(pushUnderneathDrivingTaskIfDriving) == "boolean", "Arg #9 (pushUnderneathDrivingTaskIfDriving) must be a boolean.")
	assert(type(firingPattern) == "number", "Arg #10 (firingPattern) must be a number.")

	local result = native_call(0x2F8AF0E82773A171, driverPed, targetPed, targetVehicle, targetX, targetY, targetZ, distanceToShoot, pedAccuracy, pushUnderneathDrivingTaskIfDriving, firingPattern)
end
natives.task.task_drive_by = natives.TASK.TASK_DRIVE_BY

--[[
For p1 & p2 (Ped, Vehicle). I could be wrong, as the only time this native is called in scripts is once and both are 0, but I assume this native will work like SET_MOUNTED_WEAPON_TARGET in which has the same exact amount of parameters and the 1st and last 3 parameters are right and the same for both natives.
]]
function natives.TASK.SET_DRIVEBY_TASK_TARGET(--[[Ped]] shootingPed, --[[Ped]] targetPed, --[[Vehicle]] targetVehicle, --[[float]] x, --[[float]] y, --[[float]] z) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.SET_DRIVEBY_TASK_TARGET' due to disabled trusted mode")

	assert(type(shootingPed) == "number", "Arg #1 (shootingPed) must be a number.")
	assert(type(targetPed) == "number", "Arg #2 (targetPed) must be a number.")
	assert(type(targetVehicle) == "number", "Arg #3 (targetVehicle) must be a number.")
	assert(type(x) == "number", "Arg #4 (x) must be a number.")
	assert(type(y) == "number", "Arg #5 (y) must be a number.")
	assert(type(z) == "number", "Arg #6 (z) must be a number.")

	local result = native_call(0xE5B302114D8162EE, shootingPed, targetPed, targetVehicle, x, y, z)
end
natives.task.set_driveby_task_target = natives.TASK.SET_DRIVEBY_TASK_TARGET

function natives.TASK.CLEAR_DRIVEBY_TASK_UNDERNEATH_DRIVING_TASK(--[[Ped]] ped) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.CLEAR_DRIVEBY_TASK_UNDERNEATH_DRIVING_TASK' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0xC35B5CDB2824CF69, ped)
end
natives.task.clear_driveby_task_underneath_driving_task = natives.TASK.CLEAR_DRIVEBY_TASK_UNDERNEATH_DRIVING_TASK

function natives.TASK.IS_DRIVEBY_TASK_UNDERNEATH_DRIVING_TASK(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.IS_DRIVEBY_TASK_UNDERNEATH_DRIVING_TASK' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x8785E6E40C7A8818, ped)
	return result:__tointeger() ~= 0
end
natives.task.is_driveby_task_underneath_driving_task = natives.TASK.IS_DRIVEBY_TASK_UNDERNEATH_DRIVING_TASK

--[[
Forces the ped to use the mounted weapon.
Returns false if task is not possible.
]]
function natives.TASK.CONTROL_MOUNTED_WEAPON(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.CONTROL_MOUNTED_WEAPON' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0xDCFE42068FE0135A, ped)
	return result:__tointeger() ~= 0
end
natives.task.control_mounted_weapon = natives.TASK.CONTROL_MOUNTED_WEAPON

--[[
Note: Look in decompiled scripts and the times that p1 and p2 aren't 0. They are filled with vars. If you look through out that script what other natives those vars are used in, you can tell p1 is a ped and p2 is a vehicle. Which most likely means if you want the mounted weapon to target a ped set targetVehicle to 0 or vice-versa.
]]
function natives.TASK.SET_MOUNTED_WEAPON_TARGET(--[[Ped]] shootingPed, --[[Ped]] targetPed, --[[Vehicle]] targetVehicle, --[[float]] x, --[[float]] y, --[[float]] z, --[[int]] taskMode, --[[BOOL]] ignoreTargetVehDeadCheck) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.SET_MOUNTED_WEAPON_TARGET' due to disabled trusted mode")

	assert(type(shootingPed) == "number", "Arg #1 (shootingPed) must be a number.")
	assert(type(targetPed) == "number", "Arg #2 (targetPed) must be a number.")
	assert(type(targetVehicle) == "number", "Arg #3 (targetVehicle) must be a number.")
	assert(type(x) == "number", "Arg #4 (x) must be a number.")
	assert(type(y) == "number", "Arg #5 (y) must be a number.")
	assert(type(z) == "number", "Arg #6 (z) must be a number.")
	assert(type(taskMode) == "number", "Arg #7 (taskMode) must be a number.")
	assert(type(ignoreTargetVehDeadCheck) == "boolean", "Arg #8 (ignoreTargetVehDeadCheck) must be a boolean.")

	local result = native_call(0xCCD892192C6D2BB9, shootingPed, targetPed, targetVehicle, x, y, z, taskMode, ignoreTargetVehDeadCheck)
end
natives.task.set_mounted_weapon_target = natives.TASK.SET_MOUNTED_WEAPON_TARGET

function natives.TASK.IS_MOUNTED_WEAPON_TASK_UNDERNEATH_DRIVING_TASK(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.IS_MOUNTED_WEAPON_TASK_UNDERNEATH_DRIVING_TASK' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0xA320EF046186FA3B, ped)
	return result:__tointeger() ~= 0
end
natives.task.is_mounted_weapon_task_underneath_driving_task = natives.TASK.IS_MOUNTED_WEAPON_TASK_UNDERNEATH_DRIVING_TASK

--[[
Actually has 3 params, not 2.

p0: Ped
p1: int (or bool?)
p2: int
]]
function natives.TASK.TASK_USE_MOBILE_PHONE(--[[Ped]] ped, --[[BOOL]] usePhone, --[[int]] desiredPhoneMode) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_USE_MOBILE_PHONE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(usePhone) == "boolean", "Arg #2 (usePhone) must be a boolean.")
	assert(type(desiredPhoneMode) == "number", "Arg #3 (desiredPhoneMode) must be a number.")

	local result = native_call(0xBD2A8EC3AF4DE7DB, ped, usePhone, desiredPhoneMode)
end
natives.task.task_use_mobile_phone = natives.TASK.TASK_USE_MOBILE_PHONE

function natives.TASK.TASK_USE_MOBILE_PHONE_TIMED(--[[Ped]] ped, --[[int]] duration) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_USE_MOBILE_PHONE_TIMED' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(duration) == "number", "Arg #2 (duration) must be a number.")

	local result = native_call(0x5EE02954A14C69DB, ped, duration)
end
natives.task.task_use_mobile_phone_timed = natives.TASK.TASK_USE_MOBILE_PHONE_TIMED

--[[
p2 tend to be 16, 17 or 1
p3 to p7 tend to be 0.0
]]
function natives.TASK.TASK_CHAT_TO_PED(--[[Ped]] ped, --[[Ped]] target, --[[int]] flags, --[[float]] goToLocationX, --[[float]] goToLocationY, --[[float]] goToLocationZ, --[[float]] headingDegs, --[[float]] idleTime) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_CHAT_TO_PED' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(target) == "number", "Arg #2 (target) must be a number.")
	assert(type(flags) == "number", "Arg #3 (flags) must be a number.")
	assert(type(goToLocationX) == "number", "Arg #4 (goToLocationX) must be a number.")
	assert(type(goToLocationY) == "number", "Arg #5 (goToLocationY) must be a number.")
	assert(type(goToLocationZ) == "number", "Arg #6 (goToLocationZ) must be a number.")
	assert(type(headingDegs) == "number", "Arg #7 (headingDegs) must be a number.")
	assert(type(idleTime) == "number", "Arg #8 (idleTime) must be a number.")

	local result = native_call(0x8C338E0263E4FD19, ped, target, flags, goToLocationX, goToLocationY, goToLocationZ, headingDegs, idleTime)
end
natives.task.task_chat_to_ped = natives.TASK.TASK_CHAT_TO_PED

--[[
Seat Numbers
-------------------------------
Driver = -1
Any = -2
Left-Rear = 1
Right-Front = 0
Right-Rear = 2
Extra seats = 3-14(This may differ from vehicle type e.g. Firetruck Rear Stand, Ambulance Rear)
]]
function natives.TASK.TASK_WARP_PED_INTO_VEHICLE(--[[Ped]] ped, --[[Vehicle]] vehicle, --[[int]] seat) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_WARP_PED_INTO_VEHICLE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(vehicle) == "number", "Arg #2 (vehicle) must be a number.")
	assert(type(seat) == "number", "Arg #3 (seat) must be a number.")

	local result = native_call(0x9A7D091411C5F684, ped, vehicle, seat)
end
natives.task.task_warp_ped_into_vehicle = natives.TASK.TASK_WARP_PED_INTO_VEHICLE

--[[
//this part of the code is to determine at which entity the player is aiming, for example if you want to create a mod where you give orders to peds
Entity aimedentity;
Player player = PLAYER::PLAYER_ID();
PLAYER::_GET_AIMED_ENTITY(player, &aimedentity);

//bg is an array of peds
TASK::TASK_SHOOT_AT_ENTITY(bg[i], aimedentity, 5000, MISC::GET_HASH_KEY("FIRING_PATTERN_FULL_AUTO"));

in practical usage, getting the entity the player is aiming at and then task the peds to shoot at the entity, at a button press event would be better.

Firing Pattern Hash Information: https://pastebin.com/Px036isB
]]
function natives.TASK.TASK_SHOOT_AT_ENTITY(--[[Entity]] entity, --[[Entity]] target, --[[int]] duration, --[[Hash]] firingPattern) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_SHOOT_AT_ENTITY' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(target) == "number", "Arg #2 (target) must be a number.")
	assert(type(duration) == "number", "Arg #3 (duration) must be a number.")
	assert(type(firingPattern) == "number", "Arg #4 (firingPattern) must be a number.")

	local result = native_call(0x08DA95E8298AE772, entity, target, duration, firingPattern)
end
natives.task.task_shoot_at_entity = natives.TASK.TASK_SHOOT_AT_ENTITY

--[[
Climbs or vaults the nearest thing.
usePlayerLaunchForce is unused.
]]
function natives.TASK.TASK_CLIMB(--[[Ped]] ped, --[[BOOL]] usePlayerLaunchForce) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_CLIMB' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(usePlayerLaunchForce) == "boolean", "Arg #2 (usePlayerLaunchForce) must be a boolean.")

	local result = native_call(0x89D9FCC2435112F1, ped, usePlayerLaunchForce)
end
natives.task.task_climb = natives.TASK.TASK_CLIMB

function natives.TASK.TASK_CLIMB_LADDER(--[[Ped]] ped, --[[BOOL]] fast) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_CLIMB_LADDER' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(fast) == "boolean", "Arg #2 (fast) must be a boolean.")

	local result = native_call(0xB6C987F9285A3814, ped, fast)
end
natives.task.task_climb_ladder = natives.TASK.TASK_CLIMB_LADDER

--[[
Attaches a ped to a rope and allows player control to rappel down a wall. Disables all collisions while on the rope.
p10: Usually 1 in the scripts, clipSet: Clipset to use for the task, minZ: Minimum Z that the player can descend to, ropeHandle: Rope to attach this task to created with ADD_ROPE
]]
function natives.TASK.TASK_RAPPEL_DOWN_WALL_USING_CLIPSET_OVERRIDE(--[[Ped]] ped, --[[float]] x1, --[[float]] y1, --[[float]] z1, --[[float]] x2, --[[float]] y2, --[[float]] z2, --[[float]] minZ, --[[int]] ropeHandle, --[[const char*]] clipSet, --[[Any]] p10) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_RAPPEL_DOWN_WALL_USING_CLIPSET_OVERRIDE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(x1) == "number", "Arg #2 (x1) must be a number.")
	assert(type(y1) == "number", "Arg #3 (y1) must be a number.")
	assert(type(z1) == "number", "Arg #4 (z1) must be a number.")
	assert(type(x2) == "number", "Arg #5 (x2) must be a number.")
	assert(type(y2) == "number", "Arg #6 (y2) must be a number.")
	assert(type(z2) == "number", "Arg #7 (z2) must be a number.")
	assert(type(minZ) == "number", "Arg #8 (minZ) must be a number.")
	assert(type(ropeHandle) == "number", "Arg #9 (ropeHandle) must be a number.")
	assert(type(clipSet) == "string", "Arg #10 (clipSet) must be a string.")
	assert(type(p10) == "number", "Arg #11 (p10) must be a number.")

	local result = native_call(0xEAF66ACDDC794793, ped, x1, y1, z1, x2, y2, z2, minZ, ropeHandle, clipSet, p10)
end
natives.task.task_rappel_down_wall_using_clipset_override = natives.TASK.TASK_RAPPEL_DOWN_WALL_USING_CLIPSET_OVERRIDE

function natives.TASK.GET_TASK_RAPPEL_DOWN_WALL_STATE(--[[Ped]] ped) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.GET_TASK_RAPPEL_DOWN_WALL_STATE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x9D252648778160DF, ped)
	return result:__tointeger()
end
natives.task.get_task_rappel_down_wall_state = natives.TASK.GET_TASK_RAPPEL_DOWN_WALL_STATE

--[[
Immediately stops the pedestrian from whatever it's doing. They stop fighting, animations, etc. they forget what they were doing.
]]
function natives.TASK.CLEAR_PED_TASKS_IMMEDIATELY(--[[Ped]] ped) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.CLEAR_PED_TASKS_IMMEDIATELY' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0xAAA34F8A7CB32098, ped)
end
natives.task.clear_ped_tasks_immediately = natives.TASK.CLEAR_PED_TASKS_IMMEDIATELY

function natives.TASK.TASK_PERFORM_SEQUENCE_FROM_PROGRESS(--[[Ped]] ped, --[[int]] taskIndex, --[[int]] progress1, --[[int]] progress2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_PERFORM_SEQUENCE_FROM_PROGRESS' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(taskIndex) == "number", "Arg #2 (taskIndex) must be a number.")
	assert(type(progress1) == "number", "Arg #3 (progress1) must be a number.")
	assert(type(progress2) == "number", "Arg #4 (progress2) must be a number.")

	local result = native_call(0x89221B16730234F0, ped, taskIndex, progress1, progress2)
end
natives.task.task_perform_sequence_from_progress = natives.TASK.TASK_PERFORM_SEQUENCE_FROM_PROGRESS

--[[
This native does absolutely nothing, just a nullsub

R* Comment:
SET_NEXT_DESIRED_MOVE_STATE - Function is deprecated - do not use anymore
]]
function natives.TASK.SET_NEXT_DESIRED_MOVE_STATE(--[[float]] nextMoveState) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.SET_NEXT_DESIRED_MOVE_STATE' due to disabled trusted mode")

	assert(type(nextMoveState) == "number", "Arg #1 (nextMoveState) must be a number.")

	local result = native_call(0xF1B9F16E89E2C93A, nextMoveState)
end
natives.task.set_next_desired_move_state = natives.TASK.SET_NEXT_DESIRED_MOVE_STATE

function natives.TASK.SET_PED_DESIRED_MOVE_BLEND_RATIO(--[[Ped]] ped, --[[float]] newMoveBlendRatio) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.SET_PED_DESIRED_MOVE_BLEND_RATIO' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(newMoveBlendRatio) == "number", "Arg #2 (newMoveBlendRatio) must be a number.")

	local result = native_call(0x1E982AC8716912C5, ped, newMoveBlendRatio)
end
natives.task.set_ped_desired_move_blend_ratio = natives.TASK.SET_PED_DESIRED_MOVE_BLEND_RATIO

function natives.TASK.GET_PED_DESIRED_MOVE_BLEND_RATIO(--[[Ped]] ped) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.GET_PED_DESIRED_MOVE_BLEND_RATIO' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x8517D4A6CA8513ED, ped)
	return result:__tonumber()
end
natives.task.get_ped_desired_move_blend_ratio = natives.TASK.GET_PED_DESIRED_MOVE_BLEND_RATIO

--[[
eg

 TASK::TASK_GOTO_ENTITY_AIMING(v_2, PLAYER::PLAYER_PED_ID(), 5.0, 25.0);

ped = Ped you want to perform this task.
target = the Entity they should aim at.
distanceToStopAt = distance from the target, where the ped should stop to aim.
StartAimingDist = distance where the ped should start to aim.
]]
function natives.TASK.TASK_GOTO_ENTITY_AIMING(--[[Ped]] ped, --[[Entity]] target, --[[float]] distanceToStopAt, --[[float]] StartAimingDist) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_GOTO_ENTITY_AIMING' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(target) == "number", "Arg #2 (target) must be a number.")
	assert(type(distanceToStopAt) == "number", "Arg #3 (distanceToStopAt) must be a number.")
	assert(type(StartAimingDist) == "number", "Arg #4 (StartAimingDist) must be a number.")

	local result = native_call(0xA9DA48FAB8A76C12, ped, target, distanceToStopAt, StartAimingDist)
end
natives.task.task_goto_entity_aiming = natives.TASK.TASK_GOTO_ENTITY_AIMING

--[[
p1 is always GET_HASH_KEY("empty") in scripts, for the rare times this is used
]]
function natives.TASK.TASK_SET_DECISION_MAKER(--[[Ped]] ped, --[[Hash]] decisionMakerId) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_SET_DECISION_MAKER' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(decisionMakerId) == "number", "Arg #2 (decisionMakerId) must be a number.")

	local result = native_call(0xEB8517DDA73720DA, ped, decisionMakerId)
end
natives.task.task_set_decision_maker = natives.TASK.TASK_SET_DECISION_MAKER

function natives.TASK.TASK_SET_SPHERE_DEFENSIVE_AREA(--[[Ped]] ped, --[[float]] x, --[[float]] y, --[[float]] z, --[[float]] radius) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_SET_SPHERE_DEFENSIVE_AREA' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")
	assert(type(radius) == "number", "Arg #5 (radius) must be a number.")

	local result = native_call(0x933C06518B52A9A4, ped, x, y, z, radius)
end
natives.task.task_set_sphere_defensive_area = natives.TASK.TASK_SET_SPHERE_DEFENSIVE_AREA

function natives.TASK.TASK_CLEAR_DEFENSIVE_AREA(--[[Ped]] ped) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_CLEAR_DEFENSIVE_AREA' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x95A6C46A31D1917D, ped)
end
natives.task.task_clear_defensive_area = natives.TASK.TASK_CLEAR_DEFENSIVE_AREA

function natives.TASK.TASK_PED_SLIDE_TO_COORD(--[[Ped]] ped, --[[float]] x, --[[float]] y, --[[float]] z, --[[float]] heading, --[[float]] speed) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_PED_SLIDE_TO_COORD' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")
	assert(type(heading) == "number", "Arg #5 (heading) must be a number.")
	assert(type(speed) == "number", "Arg #6 (speed) must be a number.")

	local result = native_call(0xD04FE6765D990A06, ped, x, y, z, heading, speed)
end
natives.task.task_ped_slide_to_coord = natives.TASK.TASK_PED_SLIDE_TO_COORD

function natives.TASK.TASK_PED_SLIDE_TO_COORD_HDG_RATE(--[[Ped]] ped, --[[float]] x, --[[float]] y, --[[float]] z, --[[float]] heading, --[[float]] speed, --[[float]] headingChangeRate) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_PED_SLIDE_TO_COORD_HDG_RATE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")
	assert(type(heading) == "number", "Arg #5 (heading) must be a number.")
	assert(type(speed) == "number", "Arg #6 (speed) must be a number.")
	assert(type(headingChangeRate) == "number", "Arg #7 (headingChangeRate) must be a number.")

	local result = native_call(0x5A4A6A6D3DC64F52, ped, x, y, z, heading, speed, headingChangeRate)
end
natives.task.task_ped_slide_to_coord_hdg_rate = natives.TASK.TASK_PED_SLIDE_TO_COORD_HDG_RATE

function natives.TASK.ADD_COVER_POINT(--[[float]] x, --[[float]] y, --[[float]] z, --[[float]] direction, --[[int]] usage, --[[int]] height, --[[int]] arc, --[[BOOL]] isPriority) -- Returns ScrHandle
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.ADD_COVER_POINT' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(direction) == "number", "Arg #4 (direction) must be a number.")
	assert(type(usage) == "number", "Arg #5 (usage) must be a number.")
	assert(type(height) == "number", "Arg #6 (height) must be a number.")
	assert(type(arc) == "number", "Arg #7 (arc) must be a number.")
	assert(type(isPriority) == "boolean", "Arg #8 (isPriority) must be a boolean.")

	local result = native_call(0xD5C12A75C7B9497F, x, y, z, direction, usage, height, arc, isPriority)
	return result:__tointeger()
end
natives.task.add_cover_point = natives.TASK.ADD_COVER_POINT

function natives.TASK.REMOVE_COVER_POINT(--[[ScrHandle]] coverpoint) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.REMOVE_COVER_POINT' due to disabled trusted mode")

	assert(type(coverpoint) == "number", "Arg #1 (coverpoint) must be a number.")

	local result = native_call(0xAE287C923D891715, coverpoint)
end
natives.task.remove_cover_point = natives.TASK.REMOVE_COVER_POINT

--[[
Checks if there is a cover point at position
]]
function natives.TASK.DOES_SCRIPTED_COVER_POINT_EXIST_AT_COORDS(--[[float]] x, --[[float]] y, --[[float]] z) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.DOES_SCRIPTED_COVER_POINT_EXIST_AT_COORDS' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")

	local result = native_call(0xA98B8E3C088E5A31, x, y, z)
	return result:__tointeger() ~= 0
end
natives.task.does_scripted_cover_point_exist_at_coords = natives.TASK.DOES_SCRIPTED_COVER_POINT_EXIST_AT_COORDS

function natives.TASK.GET_SCRIPTED_COVER_POINT_COORDS(--[[ScrHandle]] coverpoint) -- Returns Vector3
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.GET_SCRIPTED_COVER_POINT_COORDS' due to disabled trusted mode")

	assert(type(coverpoint) == "number", "Arg #1 (coverpoint) must be a number.")

	local result = native_call(0x594A1028FC2A3E85, coverpoint)
	return result:__tov3()
end
natives.task.get_scripted_cover_point_coords = natives.TASK.GET_SCRIPTED_COVER_POINT_COORDS

function natives.TASK.ADD_SCRIPTED_COVER_AREA(--[[float]] x, --[[float]] y, --[[float]] z, --[[float]] radius) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.ADD_SCRIPTED_COVER_AREA' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(radius) == "number", "Arg #4 (radius) must be a number.")

	local result = native_call(0x28B7B9BFDAF274AA, x, y, z, radius)
end
natives.task.add_scripted_cover_area = natives.TASK.ADD_SCRIPTED_COVER_AREA

--[[
Makes the specified ped attack the target ped.
p2 should be 0
p3 should be 16
]]
function natives.TASK.TASK_COMBAT_PED(--[[Ped]] ped, --[[Ped]] targetPed, --[[int]] combatFlags, --[[int]] threatResponseFlags) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_COMBAT_PED' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(targetPed) == "number", "Arg #2 (targetPed) must be a number.")
	assert(type(combatFlags) == "number", "Arg #3 (combatFlags) must be a number.")
	assert(type(threatResponseFlags) == "number", "Arg #4 (threatResponseFlags) must be a number.")

	local result = native_call(0xF166E48407BAC484, ped, targetPed, combatFlags, threatResponseFlags)
end
natives.task.task_combat_ped = natives.TASK.TASK_COMBAT_PED

function natives.TASK.TASK_COMBAT_PED_TIMED(--[[Ped]] ped, --[[Ped]] target, --[[int]] time, --[[int]] flags) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_COMBAT_PED_TIMED' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(target) == "number", "Arg #2 (target) must be a number.")
	assert(type(time) == "number", "Arg #3 (time) must be a number.")
	assert(type(flags) == "number", "Arg #4 (flags) must be a number.")

	local result = native_call(0x944F30DCB7096BDE, ped, target, time, flags)
end
natives.task.task_combat_ped_timed = natives.TASK.TASK_COMBAT_PED_TIMED

function natives.TASK.TASK_SEEK_COVER_FROM_POS(--[[Ped]] ped, --[[float]] x, --[[float]] y, --[[float]] z, --[[int]] duration, --[[BOOL]] allowPeekingAndFiring) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_SEEK_COVER_FROM_POS' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")
	assert(type(duration) == "number", "Arg #5 (duration) must be a number.")
	assert(type(allowPeekingAndFiring) == "boolean", "Arg #6 (allowPeekingAndFiring) must be a boolean.")

	local result = native_call(0x75AC2B60386D89F2, ped, x, y, z, duration, allowPeekingAndFiring)
end
natives.task.task_seek_cover_from_pos = natives.TASK.TASK_SEEK_COVER_FROM_POS

function natives.TASK.TASK_SEEK_COVER_FROM_PED(--[[Ped]] ped, --[[Ped]] target, --[[int]] duration, --[[BOOL]] allowPeekingAndFiring) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_SEEK_COVER_FROM_PED' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(target) == "number", "Arg #2 (target) must be a number.")
	assert(type(duration) == "number", "Arg #3 (duration) must be a number.")
	assert(type(allowPeekingAndFiring) == "boolean", "Arg #4 (allowPeekingAndFiring) must be a boolean.")

	local result = native_call(0x84D32B3BEC531324, ped, target, duration, allowPeekingAndFiring)
end
natives.task.task_seek_cover_from_ped = natives.TASK.TASK_SEEK_COVER_FROM_PED

--[[
p5 is always -1
]]
function natives.TASK.TASK_SEEK_COVER_TO_COVER_POINT(--[[Ped]] ped, --[[ScrHandle]] coverpoint, --[[float]] x, --[[float]] y, --[[float]] z, --[[int]] time, --[[BOOL]] allowPeekingAndFiring) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_SEEK_COVER_TO_COVER_POINT' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(coverpoint) == "number", "Arg #2 (coverpoint) must be a number.")
	assert(type(x) == "number", "Arg #3 (x) must be a number.")
	assert(type(y) == "number", "Arg #4 (y) must be a number.")
	assert(type(z) == "number", "Arg #5 (z) must be a number.")
	assert(type(time) == "number", "Arg #6 (time) must be a number.")
	assert(type(allowPeekingAndFiring) == "boolean", "Arg #7 (allowPeekingAndFiring) must be a boolean.")

	local result = native_call(0xD43D95C7A869447F, ped, coverpoint, x, y, z, time, allowPeekingAndFiring)
end
natives.task.task_seek_cover_to_cover_point = natives.TASK.TASK_SEEK_COVER_TO_COVER_POINT

--[[
p8 causes the ped to take the shortest route to the cover position. It may have something to do with navmesh or pathfinding mechanics.

from michael2:
TASK::TASK_SEEK_COVER_TO_COORDS(ped, 967.5164794921875, -2121.603515625, 30.479299545288086, 978.94677734375, -2125.84130859375, 29.4752, -1, 1);


appears to be shorter variation
from michael3:
TASK::TASK_SEEK_COVER_TO_COORDS(ped, -2231.011474609375, 263.6326599121094, 173.60195922851562, -1, 0);
]]
function natives.TASK.TASK_SEEK_COVER_TO_COORDS(--[[Ped]] ped, --[[float]] x1, --[[float]] y1, --[[float]] z1, --[[float]] x2, --[[float]] y2, --[[float]] z2, --[[int]] timeout, --[[BOOL]] shortRoute) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_SEEK_COVER_TO_COORDS' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(x1) == "number", "Arg #2 (x1) must be a number.")
	assert(type(y1) == "number", "Arg #3 (y1) must be a number.")
	assert(type(z1) == "number", "Arg #4 (z1) must be a number.")
	assert(type(x2) == "number", "Arg #5 (x2) must be a number.")
	assert(type(y2) == "number", "Arg #6 (y2) must be a number.")
	assert(type(z2) == "number", "Arg #7 (z2) must be a number.")
	assert(type(timeout) == "number", "Arg #8 (timeout) must be a number.")
	assert(type(shortRoute) == "boolean", "Arg #9 (shortRoute) must be a boolean.")

	local result = native_call(0x39246A6958EF072C, ped, x1, y1, z1, x2, y2, z2, timeout, shortRoute)
end
natives.task.task_seek_cover_to_coords = natives.TASK.TASK_SEEK_COVER_TO_COORDS

function natives.TASK.TASK_PUT_PED_DIRECTLY_INTO_COVER(--[[Ped]] ped, --[[float]] x, --[[float]] y, --[[float]] z, --[[int]] time, --[[BOOL]] allowPeekingAndFiring, --[[float]] blendInDuration, --[[BOOL]] forceInitialFacingDirection, --[[BOOL]] forceFaceLeft, --[[int]] identifier, --[[BOOL]] doEntry) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_PUT_PED_DIRECTLY_INTO_COVER' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")
	assert(type(time) == "number", "Arg #5 (time) must be a number.")
	assert(type(allowPeekingAndFiring) == "boolean", "Arg #6 (allowPeekingAndFiring) must be a boolean.")
	assert(type(blendInDuration) == "number", "Arg #7 (blendInDuration) must be a number.")
	assert(type(forceInitialFacingDirection) == "boolean", "Arg #8 (forceInitialFacingDirection) must be a boolean.")
	assert(type(forceFaceLeft) == "boolean", "Arg #9 (forceFaceLeft) must be a boolean.")
	assert(type(identifier) == "number", "Arg #10 (identifier) must be a number.")
	assert(type(doEntry) == "boolean", "Arg #11 (doEntry) must be a boolean.")

	local result = native_call(0x4172393E6BE1FECE, ped, x, y, z, time, allowPeekingAndFiring, blendInDuration, forceInitialFacingDirection, forceFaceLeft, identifier, doEntry)
end
natives.task.task_put_ped_directly_into_cover = natives.TASK.TASK_PUT_PED_DIRECTLY_INTO_COVER

function natives.TASK.TASK_WARP_PED_DIRECTLY_INTO_COVER(--[[Ped]] ped, --[[int]] time, --[[BOOL]] allowPeekingAndFiring, --[[BOOL]] forceInitialFacingDirection, --[[BOOL]] forceFaceLeft, --[[int]] identifier) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_WARP_PED_DIRECTLY_INTO_COVER' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(time) == "number", "Arg #2 (time) must be a number.")
	assert(type(allowPeekingAndFiring) == "boolean", "Arg #3 (allowPeekingAndFiring) must be a boolean.")
	assert(type(forceInitialFacingDirection) == "boolean", "Arg #4 (forceInitialFacingDirection) must be a boolean.")
	assert(type(forceFaceLeft) == "boolean", "Arg #5 (forceFaceLeft) must be a boolean.")
	assert(type(identifier) == "number", "Arg #6 (identifier) must be a number.")

	local result = native_call(0x6E01E9E8D89F8276, ped, time, allowPeekingAndFiring, forceInitialFacingDirection, forceFaceLeft, identifier)
end
natives.task.task_warp_ped_directly_into_cover = natives.TASK.TASK_WARP_PED_DIRECTLY_INTO_COVER

--[[
p1 is 1, 2, or 3 in scripts
]]
function natives.TASK.TASK_EXIT_COVER(--[[Ped]] ped, --[[int]] exitType, --[[float]] x, --[[float]] y, --[[float]] z) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_EXIT_COVER' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(exitType) == "number", "Arg #2 (exitType) must be a number.")
	assert(type(x) == "number", "Arg #3 (x) must be a number.")
	assert(type(y) == "number", "Arg #4 (y) must be a number.")
	assert(type(z) == "number", "Arg #5 (z) must be a number.")

	local result = native_call(0x79B258E397854D29, ped, exitType, x, y, z)
end
natives.task.task_exit_cover = natives.TASK.TASK_EXIT_COVER

--[[
from armenian3.c4

TASK::TASK_PUT_PED_DIRECTLY_INTO_MELEE(PlayerPed, armenianPed, 0.0, -1.0, 0.0, 0);

]]
function natives.TASK.TASK_PUT_PED_DIRECTLY_INTO_MELEE(--[[Ped]] ped, --[[Ped]] meleeTarget, --[[float]] blendInDuration, --[[float]] timeInMelee, --[[float]] strafePhaseSync, --[[int]] aiCombatFlags) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_PUT_PED_DIRECTLY_INTO_MELEE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(meleeTarget) == "number", "Arg #2 (meleeTarget) must be a number.")
	assert(type(blendInDuration) == "number", "Arg #3 (blendInDuration) must be a number.")
	assert(type(timeInMelee) == "number", "Arg #4 (timeInMelee) must be a number.")
	assert(type(strafePhaseSync) == "number", "Arg #5 (strafePhaseSync) must be a number.")
	assert(type(aiCombatFlags) == "number", "Arg #6 (aiCombatFlags) must be a number.")

	local result = native_call(0x1C6CD14A876FFE39, ped, meleeTarget, blendInDuration, timeInMelee, strafePhaseSync, aiCombatFlags)
end
natives.task.task_put_ped_directly_into_melee = natives.TASK.TASK_PUT_PED_DIRECTLY_INTO_MELEE

--[[
used in sequence task

both parameters seems to be always 0
]]
function natives.TASK.TASK_TOGGLE_DUCK(--[[Ped]] ped, --[[int]] toggleType) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_TOGGLE_DUCK' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(toggleType) == "number", "Arg #2 (toggleType) must be a number.")

	local result = native_call(0xAC96609B9995EDF8, ped, toggleType)
end
natives.task.task_toggle_duck = natives.TASK.TASK_TOGGLE_DUCK

--[[
From re_prisonvanbreak:

TASK::TASK_GUARD_CURRENT_POSITION(l_DD, 35.0, 35.0, 1);
]]
function natives.TASK.TASK_GUARD_CURRENT_POSITION(--[[Ped]] ped, --[[float]] maxPatrolProximity, --[[float]] defensiveAreaRadius, --[[BOOL]] setDefensiveArea) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_GUARD_CURRENT_POSITION' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(maxPatrolProximity) == "number", "Arg #2 (maxPatrolProximity) must be a number.")
	assert(type(defensiveAreaRadius) == "number", "Arg #3 (defensiveAreaRadius) must be a number.")
	assert(type(setDefensiveArea) == "boolean", "Arg #4 (setDefensiveArea) must be a boolean.")

	local result = native_call(0x4A58A47A72E3FCB4, ped, maxPatrolProximity, defensiveAreaRadius, setDefensiveArea)
end
natives.task.task_guard_current_position = natives.TASK.TASK_GUARD_CURRENT_POSITION

function natives.TASK.TASK_GUARD_ASSIGNED_DEFENSIVE_AREA(--[[Ped]] ped, --[[float]] x, --[[float]] y, --[[float]] z, --[[float]] heading, --[[float]] maxPatrolProximity, --[[int]] timer) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_GUARD_ASSIGNED_DEFENSIVE_AREA' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")
	assert(type(heading) == "number", "Arg #5 (heading) must be a number.")
	assert(type(maxPatrolProximity) == "number", "Arg #6 (maxPatrolProximity) must be a number.")
	assert(type(timer) == "number", "Arg #7 (timer) must be a number.")

	local result = native_call(0xD2A207EEBDF9889B, ped, x, y, z, heading, maxPatrolProximity, timer)
end
natives.task.task_guard_assigned_defensive_area = natives.TASK.TASK_GUARD_ASSIGNED_DEFENSIVE_AREA

--[[
p0 - Guessing PedID
p1, p2, p3 - XYZ?
p4 - ???
p5 - Maybe the size of sphere from XYZ?
p6 - ???
p7, p8, p9 - XYZ again?
p10 - Maybe the size of sphere from second XYZ?
]]
function natives.TASK.TASK_GUARD_SPHERE_DEFENSIVE_AREA(--[[Ped]] ped, --[[float]] defendPositionX, --[[float]] defendPositionY, --[[float]] defendPositionZ, --[[float]] heading, --[[float]] maxPatrolProximity, --[[int]] time, --[[float]] x, --[[float]] y, --[[float]] z, --[[float]] defensiveAreaRadius) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_GUARD_SPHERE_DEFENSIVE_AREA' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(defendPositionX) == "number", "Arg #2 (defendPositionX) must be a number.")
	assert(type(defendPositionY) == "number", "Arg #3 (defendPositionY) must be a number.")
	assert(type(defendPositionZ) == "number", "Arg #4 (defendPositionZ) must be a number.")
	assert(type(heading) == "number", "Arg #5 (heading) must be a number.")
	assert(type(maxPatrolProximity) == "number", "Arg #6 (maxPatrolProximity) must be a number.")
	assert(type(time) == "number", "Arg #7 (time) must be a number.")
	assert(type(x) == "number", "Arg #8 (x) must be a number.")
	assert(type(y) == "number", "Arg #9 (y) must be a number.")
	assert(type(z) == "number", "Arg #10 (z) must be a number.")
	assert(type(defensiveAreaRadius) == "number", "Arg #11 (defensiveAreaRadius) must be a number.")

	local result = native_call(0xC946FE14BE0EB5E2, ped, defendPositionX, defendPositionY, defendPositionZ, heading, maxPatrolProximity, time, x, y, z, defensiveAreaRadius)
end
natives.task.task_guard_sphere_defensive_area = natives.TASK.TASK_GUARD_SPHERE_DEFENSIVE_AREA

--[[
scenarioName example: "WORLD_HUMAN_GUARD_STAND"
]]
function natives.TASK.TASK_STAND_GUARD(--[[Ped]] ped, --[[float]] x, --[[float]] y, --[[float]] z, --[[float]] heading, --[[const char*]] scenarioName) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_STAND_GUARD' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")
	assert(type(heading) == "number", "Arg #5 (heading) must be a number.")
	assert(type(scenarioName) == "string", "Arg #6 (scenarioName) must be a string.")

	local result = native_call(0xAE032F8BBA959E90, ped, x, y, z, heading, scenarioName)
end
natives.task.task_stand_guard = natives.TASK.TASK_STAND_GUARD

function natives.TASK.SET_DRIVE_TASK_CRUISE_SPEED(--[[Ped]] driver, --[[float]] cruiseSpeed) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.SET_DRIVE_TASK_CRUISE_SPEED' due to disabled trusted mode")

	assert(type(driver) == "number", "Arg #1 (driver) must be a number.")
	assert(type(cruiseSpeed) == "number", "Arg #2 (cruiseSpeed) must be a number.")

	local result = native_call(0x5C9B84BD7D31D908, driver, cruiseSpeed)
end
natives.task.set_drive_task_cruise_speed = natives.TASK.SET_DRIVE_TASK_CRUISE_SPEED

function natives.TASK.SET_DRIVE_TASK_MAX_CRUISE_SPEED(--[[Ped]] ped, --[[float]] speed) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.SET_DRIVE_TASK_MAX_CRUISE_SPEED' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(speed) == "number", "Arg #2 (speed) must be a number.")

	local result = native_call(0x404A5AA9B9F0B746, ped, speed)
end
natives.task.set_drive_task_max_cruise_speed = natives.TASK.SET_DRIVE_TASK_MAX_CRUISE_SPEED

--[[
This native is used to set the driving style for specific ped.

Driving styles id seems to be:
786468
262144
786469

http://gtaforums.com/topic/822314-guide-driving-styles/
]]
function natives.TASK.SET_DRIVE_TASK_DRIVING_STYLE(--[[Ped]] ped, --[[int]] drivingStyle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.SET_DRIVE_TASK_DRIVING_STYLE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(drivingStyle) == "number", "Arg #2 (drivingStyle) must be a number.")

	local result = native_call(0xDACE1BE37D88AF67, ped, drivingStyle)
end
natives.task.set_drive_task_driving_style = natives.TASK.SET_DRIVE_TASK_DRIVING_STYLE

function natives.TASK.ADD_COVER_BLOCKING_AREA(--[[float]] startX, --[[float]] startY, --[[float]] startZ, --[[float]] endX, --[[float]] endY, --[[float]] endZ, --[[BOOL]] blockObjects, --[[BOOL]] blockVehicles, --[[BOOL]] blockMap, --[[BOOL]] blockPlayer) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.ADD_COVER_BLOCKING_AREA' due to disabled trusted mode")

	assert(type(startX) == "number", "Arg #1 (startX) must be a number.")
	assert(type(startY) == "number", "Arg #2 (startY) must be a number.")
	assert(type(startZ) == "number", "Arg #3 (startZ) must be a number.")
	assert(type(endX) == "number", "Arg #4 (endX) must be a number.")
	assert(type(endY) == "number", "Arg #5 (endY) must be a number.")
	assert(type(endZ) == "number", "Arg #6 (endZ) must be a number.")
	assert(type(blockObjects) == "boolean", "Arg #7 (blockObjects) must be a boolean.")
	assert(type(blockVehicles) == "boolean", "Arg #8 (blockVehicles) must be a boolean.")
	assert(type(blockMap) == "boolean", "Arg #9 (blockMap) must be a boolean.")
	assert(type(blockPlayer) == "boolean", "Arg #10 (blockPlayer) must be a boolean.")

	local result = native_call(0x45C597097DD7CB81, startX, startY, startZ, endX, endY, endZ, blockObjects, blockVehicles, blockMap, blockPlayer)
end
natives.task.add_cover_blocking_area = natives.TASK.ADD_COVER_BLOCKING_AREA

function natives.TASK.REMOVE_ALL_COVER_BLOCKING_AREAS() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.REMOVE_ALL_COVER_BLOCKING_AREAS' due to disabled trusted mode")

	local result = native_call(0xDB6708C0B46F56D8)
end
natives.task.remove_all_cover_blocking_areas = natives.TASK.REMOVE_ALL_COVER_BLOCKING_AREAS

function natives.TASK.REMOVE_COVER_BLOCKING_AREAS_AT_POSITION(--[[float]] x, --[[float]] y, --[[float]] z) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.REMOVE_COVER_BLOCKING_AREAS_AT_POSITION' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")

	local result = native_call(0xFA83CA6776038F64, x, y, z)
end
natives.task.remove_cover_blocking_areas_at_position = natives.TASK.REMOVE_COVER_BLOCKING_AREAS_AT_POSITION

function natives.TASK.REMOVE_SPECIFIC_COVER_BLOCKING_AREAS(--[[float]] startX, --[[float]] startY, --[[float]] startZ, --[[float]] endX, --[[float]] endY, --[[float]] endZ, --[[BOOL]] blockObjects, --[[BOOL]] blockVehicles, --[[BOOL]] blockMap, --[[BOOL]] blockPlayer) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.REMOVE_SPECIFIC_COVER_BLOCKING_AREAS' due to disabled trusted mode")

	assert(type(startX) == "number", "Arg #1 (startX) must be a number.")
	assert(type(startY) == "number", "Arg #2 (startY) must be a number.")
	assert(type(startZ) == "number", "Arg #3 (startZ) must be a number.")
	assert(type(endX) == "number", "Arg #4 (endX) must be a number.")
	assert(type(endY) == "number", "Arg #5 (endY) must be a number.")
	assert(type(endZ) == "number", "Arg #6 (endZ) must be a number.")
	assert(type(blockObjects) == "boolean", "Arg #7 (blockObjects) must be a boolean.")
	assert(type(blockVehicles) == "boolean", "Arg #8 (blockVehicles) must be a boolean.")
	assert(type(blockMap) == "boolean", "Arg #9 (blockMap) must be a boolean.")
	assert(type(blockPlayer) == "boolean", "Arg #10 (blockPlayer) must be a boolean.")

	local result = native_call(0x1F351CF1C6475734, startX, startY, startZ, endX, endY, endZ, blockObjects, blockVehicles, blockMap, blockPlayer)
end
natives.task.remove_specific_cover_blocking_areas = natives.TASK.REMOVE_SPECIFIC_COVER_BLOCKING_AREAS

--[[
Plays a scenario on a Ped at their current location.

unkDelay - Usually 0 or -1, doesn't seem to have any effect. Might be a delay between sequences.
playEnterAnim - Plays the "Enter" anim if true, otherwise plays the "Exit" anim. Scenarios that don't have any "Enter" anims won't play if this is set to true.

----

From "am_hold_up.ysc.c4" at line 339:

TASK::TASK_START_SCENARIO_IN_PLACE(NETWORK::NET_TO_PED(l_8D._f4), sub_adf(), 0, 1);

I'm unsure of what the last two parameters are, however sub_adf() randomly returns 1 of 3 scenarios, those being:
WORLD_HUMAN_SMOKING
WORLD_HUMAN_HANG_OUT_STREET
WORLD_HUMAN_STAND_MOBILE

This makes sense, as these are what I commonly see when going by a liquor store.
-------------------------
List of scenarioNames: pastebin.com/6mrYTdQv
(^ Thank you so fucking much for this)

Also these:
WORLD_FISH_FLEE
DRIVE
WORLD_HUMAN_HIKER
WORLD_VEHICLE_ATTRACTOR
WORLD_VEHICLE_BICYCLE_MOUNTAIN
WORLD_VEHICLE_BIKE_OFF_ROAD_RACE
WORLD_VEHICLE_BIKER
WORLD_VEHICLE_CONSTRUCTION_PASSENGERS
WORLD_VEHICLE_CONSTRUCTION_SOLO
WORLD_VEHICLE_DRIVE_PASSENGERS
WORLD_VEHICLE_DRIVE_SOLO
WORLD_VEHICLE_EMPTY
WORLD_VEHICLE_PARK_PARALLEL
WORLD_VEHICLE_PARK_PERPENDICULAR_NOSE_IN
WORLD_VEHICLE_POLICE_BIKE
WORLD_VEHICLE_POLICE_CAR
WORLD_VEHICLE_POLICE_NEXT_TO_CAR
WORLD_VEHICLE_SALTON_DIRT_BIKE
WORLD_VEHICLE_TRUCK_LOGS

Full list of ped scenarios by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenariosCompact.json
]]
function natives.TASK.TASK_START_SCENARIO_IN_PLACE(--[[Ped]] ped, --[[const char*]] scenarioName, --[[int]] unkDelay, --[[BOOL]] playEnterAnim) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_START_SCENARIO_IN_PLACE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(scenarioName) == "string", "Arg #2 (scenarioName) must be a string.")
	assert(type(unkDelay) == "number", "Arg #3 (unkDelay) must be a number.")
	assert(type(playEnterAnim) == "boolean", "Arg #4 (playEnterAnim) must be a boolean.")

	local result = native_call(0x142A02425FF02BD9, ped, scenarioName, unkDelay, playEnterAnim)
end
natives.task.task_start_scenario_in_place = natives.TASK.TASK_START_SCENARIO_IN_PLACE

--[[
Full list of ped scenarios by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenariosCompact.json

Also a few more listed at TASK::TASK_START_SCENARIO_IN_PLACE just above.
---------------
The first parameter in every scenario has always been a Ped of some sort. The second like TASK_START_SCENARIO_IN_PLACE is the name of the scenario. 

The next 4 parameters were harder to decipher. After viewing "hairdo_shop_mp.ysc.c4", and being confused from seeing the case in other scripts, they passed the first three of the arguments as one array from a function, and it looked like it was obviously x, y, and z.

I haven't seen the sixth parameter go to or over 360, making me believe that it is rotation, but I really can't confirm anything.

I have no idea what the last 3 parameters are, but I'll try to find out.

-going on the last 3 parameters, they appear to always be "0, 0, 1"

p6 -1 also used in scrips

p7 used for sitting scenarios

p8 teleports ped to position
]]
function natives.TASK.TASK_START_SCENARIO_AT_POSITION(--[[Ped]] ped, --[[const char*]] scenarioName, --[[float]] x, --[[float]] y, --[[float]] z, --[[float]] heading, --[[int]] duration, --[[BOOL]] sittingScenario, --[[BOOL]] teleport) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_START_SCENARIO_AT_POSITION' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(scenarioName) == "string", "Arg #2 (scenarioName) must be a string.")
	assert(type(x) == "number", "Arg #3 (x) must be a number.")
	assert(type(y) == "number", "Arg #4 (y) must be a number.")
	assert(type(z) == "number", "Arg #5 (z) must be a number.")
	assert(type(heading) == "number", "Arg #6 (heading) must be a number.")
	assert(type(duration) == "number", "Arg #7 (duration) must be a number.")
	assert(type(sittingScenario) == "boolean", "Arg #8 (sittingScenario) must be a boolean.")
	assert(type(teleport) == "boolean", "Arg #9 (teleport) must be a boolean.")

	local result = native_call(0xFA4EFC79F69D4F07, ped, scenarioName, x, y, z, heading, duration, sittingScenario, teleport)
end
natives.task.task_start_scenario_at_position = natives.TASK.TASK_START_SCENARIO_AT_POSITION

--[[
Updated variables

An alternative to TASK::TASK_USE_NEAREST_SCENARIO_TO_COORD_WARP. Makes the ped walk to the scenario instead.
]]
function natives.TASK.TASK_USE_NEAREST_SCENARIO_TO_COORD(--[[Ped]] ped, --[[float]] x, --[[float]] y, --[[float]] z, --[[float]] distance, --[[int]] duration) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_USE_NEAREST_SCENARIO_TO_COORD' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")
	assert(type(distance) == "number", "Arg #5 (distance) must be a number.")
	assert(type(duration) == "number", "Arg #6 (duration) must be a number.")

	local result = native_call(0x277F471BA9DB000B, ped, x, y, z, distance, duration)
end
natives.task.task_use_nearest_scenario_to_coord = natives.TASK.TASK_USE_NEAREST_SCENARIO_TO_COORD

function natives.TASK.TASK_USE_NEAREST_SCENARIO_TO_COORD_WARP(--[[Ped]] ped, --[[float]] x, --[[float]] y, --[[float]] z, --[[float]] radius, --[[int]] timeToLeave) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_USE_NEAREST_SCENARIO_TO_COORD_WARP' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")
	assert(type(radius) == "number", "Arg #5 (radius) must be a number.")
	assert(type(timeToLeave) == "number", "Arg #6 (timeToLeave) must be a number.")

	local result = native_call(0x58E2E0F23F6B76C3, ped, x, y, z, radius, timeToLeave)
end
natives.task.task_use_nearest_scenario_to_coord_warp = natives.TASK.TASK_USE_NEAREST_SCENARIO_TO_COORD_WARP

--[[
p5 is always 0 in scripts
]]
function natives.TASK.TASK_USE_NEAREST_SCENARIO_CHAIN_TO_COORD(--[[Ped]] ped, --[[float]] x, --[[float]] y, --[[float]] z, --[[float]] maxRange, --[[int]] timeToLeave) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_USE_NEAREST_SCENARIO_CHAIN_TO_COORD' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")
	assert(type(maxRange) == "number", "Arg #5 (maxRange) must be a number.")
	assert(type(timeToLeave) == "number", "Arg #6 (timeToLeave) must be a number.")

	local result = native_call(0x9FDA1B3D7E7028B3, ped, x, y, z, maxRange, timeToLeave)
end
natives.task.task_use_nearest_scenario_chain_to_coord = natives.TASK.TASK_USE_NEAREST_SCENARIO_CHAIN_TO_COORD

--[[
p5 is always -1 or 0 in scripts
]]
function natives.TASK.TASK_USE_NEAREST_SCENARIO_CHAIN_TO_COORD_WARP(--[[Ped]] ped, --[[float]] x, --[[float]] y, --[[float]] z, --[[float]] radius, --[[int]] timeToLeave) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_USE_NEAREST_SCENARIO_CHAIN_TO_COORD_WARP' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")
	assert(type(radius) == "number", "Arg #5 (radius) must be a number.")
	assert(type(timeToLeave) == "number", "Arg #6 (timeToLeave) must be a number.")

	local result = native_call(0x97A28E63F0BA5631, ped, x, y, z, radius, timeToLeave)
end
natives.task.task_use_nearest_scenario_chain_to_coord_warp = natives.TASK.TASK_USE_NEAREST_SCENARIO_CHAIN_TO_COORD_WARP

function natives.TASK.DOES_SCENARIO_EXIST_IN_AREA(--[[float]] x, --[[float]] y, --[[float]] z, --[[float]] radius, --[[BOOL]] mustBeFree) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.DOES_SCENARIO_EXIST_IN_AREA' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(radius) == "number", "Arg #4 (radius) must be a number.")
	assert(type(mustBeFree) == "boolean", "Arg #5 (mustBeFree) must be a boolean.")

	local result = native_call(0x5A59271FFADD33C1, x, y, z, radius, mustBeFree)
	return result:__tointeger() ~= 0
end
natives.task.does_scenario_exist_in_area = natives.TASK.DOES_SCENARIO_EXIST_IN_AREA

function natives.TASK.DOES_SCENARIO_OF_TYPE_EXIST_IN_AREA(--[[float]] x, --[[float]] y, --[[float]] z, --[[const char*]] scenarioName, --[[float]] radius, --[[BOOL]] mustBeFree) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.DOES_SCENARIO_OF_TYPE_EXIST_IN_AREA' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(scenarioName) == "string", "Arg #4 (scenarioName) must be a string.")
	assert(type(radius) == "number", "Arg #5 (radius) must be a number.")
	assert(type(mustBeFree) == "boolean", "Arg #6 (mustBeFree) must be a boolean.")

	local result = native_call(0x0A9D0C2A3BBC86C1, x, y, z, scenarioName, radius, mustBeFree)
	return result:__tointeger() ~= 0
end
natives.task.does_scenario_of_type_exist_in_area = natives.TASK.DOES_SCENARIO_OF_TYPE_EXIST_IN_AREA

function natives.TASK.IS_SCENARIO_OCCUPIED(--[[float]] x, --[[float]] y, --[[float]] z, --[[float]] maxRange, --[[BOOL]] onlyUsersActuallyAtScenario) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.IS_SCENARIO_OCCUPIED' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(maxRange) == "number", "Arg #4 (maxRange) must be a number.")
	assert(type(onlyUsersActuallyAtScenario) == "boolean", "Arg #5 (onlyUsersActuallyAtScenario) must be a boolean.")

	local result = native_call(0x788756D73AC2E07C, x, y, z, maxRange, onlyUsersActuallyAtScenario)
	return result:__tointeger() ~= 0
end
natives.task.is_scenario_occupied = natives.TASK.IS_SCENARIO_OCCUPIED

function natives.TASK.PED_HAS_USE_SCENARIO_TASK(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.PED_HAS_USE_SCENARIO_TASK' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x295E3CCEC879CCD7, ped)
	return result:__tointeger() ~= 0
end
natives.task.ped_has_use_scenario_task = natives.TASK.PED_HAS_USE_SCENARIO_TASK

--[[
Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
]]
function natives.TASK.PLAY_ANIM_ON_RUNNING_SCENARIO(--[[Ped]] ped, --[[const char*]] animDict, --[[const char*]] animName) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.PLAY_ANIM_ON_RUNNING_SCENARIO' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(animDict) == "string", "Arg #2 (animDict) must be a string.")
	assert(type(animName) == "string", "Arg #3 (animName) must be a string.")

	local result = native_call(0x748040460F8DF5DC, ped, animDict, animName)
end
natives.task.play_anim_on_running_scenario = natives.TASK.PLAY_ANIM_ON_RUNNING_SCENARIO

--[[
Full list of scenario groups used in scripts by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenarioGroupNames.json
Occurrences in the b617d scripts:

"ARMY_GUARD",
"ARMY_HELI",
"Cinema_Downtown",
"Cinema_Morningwood",
"Cinema_Textile",
"City_Banks",
"Countryside_Banks",
"DEALERSHIP",
"GRAPESEED_PLANES",
"KORTZ_SECURITY",
"LOST_BIKERS",
"LSA_Planes",
"LSA_Planes",
"MP_POLICE",
"Observatory_Bikers", 
"POLICE_POUND1",
"POLICE_POUND2",
"POLICE_POUND3",
"POLICE_POUND4",
"POLICE_POUND5"
"QUARRY",
"SANDY_PLANES",
"SCRAP_SECURITY",
"SEW_MACHINE",
"SOLOMON_GATE",
"Triathlon_1_Start", 
"Triathlon_2_Start", 
"Triathlon_3_Start"

Sometimes used with IS_SCENARIO_GROUP_ENABLED:
if (TASK::DOES_SCENARIO_GROUP_EXIST("Observatory_Bikers") && (!TASK::IS_SCENARIO_GROUP_ENABLED("Observatory_Bikers"))) {
else if (TASK::IS_SCENARIO_GROUP_ENABLED("BLIMP")) {

]]
function natives.TASK.DOES_SCENARIO_GROUP_EXIST(--[[const char*]] scenarioGroup) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.DOES_SCENARIO_GROUP_EXIST' due to disabled trusted mode")

	assert(type(scenarioGroup) == "string", "Arg #1 (scenarioGroup) must be a string.")

	local result = native_call(0xF9034C136C9E00D3, scenarioGroup)
	return result:__tointeger() ~= 0
end
natives.task.does_scenario_group_exist = natives.TASK.DOES_SCENARIO_GROUP_EXIST

--[[
Full list of scenario groups used in scripts by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenarioGroupNames.json
Occurrences in the b617d scripts: 

 "ARMY_GUARD",
 "ARMY_HELI",
 "BLIMP",
 "Cinema_Downtown",
 "Cinema_Morningwood",
 "Cinema_Textile",
 "City_Banks",
 "Countryside_Banks",
 "DEALERSHIP",
 "KORTZ_SECURITY",
 "LSA_Planes",
 "MP_POLICE",
 "Observatory_Bikers",
 "POLICE_POUND1",
 "POLICE_POUND2",
 "POLICE_POUND3",
 "POLICE_POUND4",
 "POLICE_POUND5",
 "Rampage1",
 "SANDY_PLANES",
 "SCRAP_SECURITY",
 "SEW_MACHINE",
 "SOLOMON_GATE"

Sometimes used with DOES_SCENARIO_GROUP_EXIST:
if (TASK::DOES_SCENARIO_GROUP_EXIST("Observatory_Bikers") &&   (!TASK::IS_SCENARIO_GROUP_ENABLED("Observatory_Bikers"))) {
else if (TASK::IS_SCENARIO_GROUP_ENABLED("BLIMP")) {
]]
function natives.TASK.IS_SCENARIO_GROUP_ENABLED(--[[const char*]] scenarioGroup) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.IS_SCENARIO_GROUP_ENABLED' due to disabled trusted mode")

	assert(type(scenarioGroup) == "string", "Arg #1 (scenarioGroup) must be a string.")

	local result = native_call(0x367A09DED4E05B99, scenarioGroup)
	return result:__tointeger() ~= 0
end
natives.task.is_scenario_group_enabled = natives.TASK.IS_SCENARIO_GROUP_ENABLED

--[[
Full list of scenario groups used in scripts by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenarioGroupNames.json
Occurrences in the b617d scripts: pastebin.com/Tvg2PRHU
]]
function natives.TASK.SET_SCENARIO_GROUP_ENABLED(--[[const char*]] scenarioGroup, --[[BOOL]] enabled) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.SET_SCENARIO_GROUP_ENABLED' due to disabled trusted mode")

	assert(type(scenarioGroup) == "string", "Arg #1 (scenarioGroup) must be a string.")
	assert(type(enabled) == "boolean", "Arg #2 (enabled) must be a boolean.")

	local result = native_call(0x02C8E5B49848664E, scenarioGroup, enabled)
end
natives.task.set_scenario_group_enabled = natives.TASK.SET_SCENARIO_GROUP_ENABLED

function natives.TASK.RESET_SCENARIO_GROUPS_ENABLED() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.RESET_SCENARIO_GROUPS_ENABLED' due to disabled trusted mode")

	local result = native_call(0xDD902D0349AFAD3A)
end
natives.task.reset_scenario_groups_enabled = natives.TASK.RESET_SCENARIO_GROUPS_ENABLED

--[[
Full list of scenario groups used in scripts by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenarioGroupNames.json
Groups found in the scripts used with this native:

"AMMUNATION",
"QUARRY",
"Triathlon_1",
"Triathlon_2",
"Triathlon_3"
]]
function natives.TASK.SET_EXCLUSIVE_SCENARIO_GROUP(--[[const char*]] scenarioGroup) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.SET_EXCLUSIVE_SCENARIO_GROUP' due to disabled trusted mode")

	assert(type(scenarioGroup) == "string", "Arg #1 (scenarioGroup) must be a string.")

	local result = native_call(0x535E97E1F7FC0C6A, scenarioGroup)
end
natives.task.set_exclusive_scenario_group = natives.TASK.SET_EXCLUSIVE_SCENARIO_GROUP

function natives.TASK.RESET_EXCLUSIVE_SCENARIO_GROUP() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.RESET_EXCLUSIVE_SCENARIO_GROUP' due to disabled trusted mode")

	local result = native_call(0x4202BBCB8684563D)
end
natives.task.reset_exclusive_scenario_group = natives.TASK.RESET_EXCLUSIVE_SCENARIO_GROUP

--[[
Full list of scenario types used in scripts by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenariosCompact.json
Occurrences in the b617d scripts:
"PROP_HUMAN_SEAT_CHAIR",
"WORLD_HUMAN_DRINKING",
"WORLD_HUMAN_HANG_OUT_STREET",
"WORLD_HUMAN_SMOKING",
"WORLD_MOUNTAIN_LION_WANDER",
"WORLD_HUMAN_DRINKING"

Sometimes used together with MISC::IS_STRING_NULL_OR_EMPTY in the scripts.

scenarioType could be the same as scenarioName, used in for example TASK::TASK_START_SCENARIO_AT_POSITION.

]]
function natives.TASK.IS_SCENARIO_TYPE_ENABLED(--[[const char*]] scenarioType) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.IS_SCENARIO_TYPE_ENABLED' due to disabled trusted mode")

	assert(type(scenarioType) == "string", "Arg #1 (scenarioType) must be a string.")

	local result = native_call(0x3A815DB3EA088722, scenarioType)
	return result:__tointeger() ~= 0
end
natives.task.is_scenario_type_enabled = natives.TASK.IS_SCENARIO_TYPE_ENABLED

--[[
Full list of scenario types used in scripts by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenariosCompact.json
seems to enable/disable specific scenario-types from happening in the game world.

Here are some scenario types from the scripts:
"WORLD_MOUNTAIN_LION_REST"                                             
"WORLD_MOUNTAIN_LION_WANDER"                                            
"DRIVE"                                                                  
"WORLD_VEHICLE_POLICE_BIKE"                                             
"WORLD_VEHICLE_POLICE_CAR"                                             
"WORLD_VEHICLE_POLICE_NEXT_TO_CAR"                                        
"WORLD_VEHICLE_DRIVE_SOLO"                                                 
"WORLD_VEHICLE_BIKER"                                                      
"WORLD_VEHICLE_DRIVE_PASSENGERS"                                           
"WORLD_VEHICLE_SALTON_DIRT_BIKE"                                           
"WORLD_VEHICLE_BICYCLE_MOUNTAIN"                                           
"PROP_HUMAN_SEAT_CHAIR"                                             
"WORLD_VEHICLE_ATTRACTOR"                                             
"WORLD_HUMAN_LEANING"                                                 
"WORLD_HUMAN_HANG_OUT_STREET"                                        
"WORLD_HUMAN_DRINKING"                                                
"WORLD_HUMAN_SMOKING"                                                
"WORLD_HUMAN_GUARD_STAND"                                            
"WORLD_HUMAN_CLIPBOARD"                                              
"WORLD_HUMAN_HIKER"                                                  
"WORLD_VEHICLE_EMPTY"                                                      
"WORLD_VEHICLE_BIKE_OFF_ROAD_RACE"                                      
"WORLD_HUMAN_PAPARAZZI"                                               
"WORLD_VEHICLE_PARK_PERPENDICULAR_NOSE_IN"                            
"WORLD_VEHICLE_PARK_PARALLEL"                                              
"WORLD_VEHICLE_CONSTRUCTION_SOLO"                               
"WORLD_VEHICLE_CONSTRUCTION_PASSENGERS"                                                                    
"WORLD_VEHICLE_TRUCK_LOGS" 
-alphazolam

scenarioType could be the same as scenarioName, used in for example TASK::TASK_START_SCENARIO_AT_POSITION.
]]
function natives.TASK.SET_SCENARIO_TYPE_ENABLED(--[[const char*]] scenarioType, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.SET_SCENARIO_TYPE_ENABLED' due to disabled trusted mode")

	assert(type(scenarioType) == "string", "Arg #1 (scenarioType) must be a string.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xEB47EC4E34FB7EE1, scenarioType, toggle)
end
natives.task.set_scenario_type_enabled = natives.TASK.SET_SCENARIO_TYPE_ENABLED

function natives.TASK.RESET_SCENARIO_TYPES_ENABLED() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.RESET_SCENARIO_TYPES_ENABLED' due to disabled trusted mode")

	local result = native_call(0x0D40EE2A7F2B2D6D)
end
natives.task.reset_scenario_types_enabled = natives.TASK.RESET_SCENARIO_TYPES_ENABLED

function natives.TASK.IS_PED_ACTIVE_IN_SCENARIO(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.IS_PED_ACTIVE_IN_SCENARIO' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0xAA135F9482C82CC3, ped)
	return result:__tointeger() ~= 0
end
natives.task.is_ped_active_in_scenario = natives.TASK.IS_PED_ACTIVE_IN_SCENARIO

--[[
Used only once (am_mp_property_int)

ped was PLAYER_PED_ID()

Related to CTaskAmbientClips.
]]
function natives.TASK.IS_PED_PLAYING_BASE_CLIP_IN_SCENARIO(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.IS_PED_PLAYING_BASE_CLIP_IN_SCENARIO' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x621C6E4729388E41, ped)
	return result:__tointeger() ~= 0
end
natives.task.is_ped_playing_base_clip_in_scenario = natives.TASK.IS_PED_PLAYING_BASE_CLIP_IN_SCENARIO

--[[
Appears only in fm_mission_controller and used only 3 times.

ped was always PLAYER_PED_ID()
p1 was always true
p2 was always true
]]
function natives.TASK.SET_PED_CAN_PLAY_AMBIENT_IDLES(--[[Ped]] ped, --[[BOOL]] blockIdleClips, --[[BOOL]] removeIdleClipIfPlaying) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.SET_PED_CAN_PLAY_AMBIENT_IDLES' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(blockIdleClips) == "boolean", "Arg #2 (blockIdleClips) must be a boolean.")
	assert(type(removeIdleClipIfPlaying) == "boolean", "Arg #3 (removeIdleClipIfPlaying) must be a boolean.")

	local result = native_call(0x8FD89A6240813FD0, ped, blockIdleClips, removeIdleClipIfPlaying)
end
natives.task.set_ped_can_play_ambient_idles = natives.TASK.SET_PED_CAN_PLAY_AMBIENT_IDLES

--[[
Despite its name, it only attacks ONE hated target. The one closest to the specified position.
]]
function natives.TASK.TASK_COMBAT_HATED_TARGETS_IN_AREA(--[[Ped]] ped, --[[float]] x, --[[float]] y, --[[float]] z, --[[float]] radius, --[[int]] combatFlags) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_COMBAT_HATED_TARGETS_IN_AREA' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")
	assert(type(radius) == "number", "Arg #5 (radius) must be a number.")
	assert(type(combatFlags) == "number", "Arg #6 (combatFlags) must be a number.")

	local result = native_call(0x4CF5F55DAC3280A0, ped, x, y, z, radius, combatFlags)
end
natives.task.task_combat_hated_targets_in_area = natives.TASK.TASK_COMBAT_HATED_TARGETS_IN_AREA

--[[
Despite its name, it only attacks ONE hated target. The one closest hated target.

p2 seems to be always 0
]]
function natives.TASK.TASK_COMBAT_HATED_TARGETS_AROUND_PED(--[[Ped]] ped, --[[float]] radius, --[[int]] combatFlags) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_COMBAT_HATED_TARGETS_AROUND_PED' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(radius) == "number", "Arg #2 (radius) must be a number.")
	assert(type(combatFlags) == "number", "Arg #3 (combatFlags) must be a number.")

	local result = native_call(0x7BF835BB9E2698C8, ped, radius, combatFlags)
end
natives.task.task_combat_hated_targets_around_ped = natives.TASK.TASK_COMBAT_HATED_TARGETS_AROUND_PED

function natives.TASK.TASK_COMBAT_HATED_TARGETS_AROUND_PED_TIMED(--[[Ped]] ped, --[[float]] radius, --[[int]] time, --[[int]] combatFlags) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_COMBAT_HATED_TARGETS_AROUND_PED_TIMED' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(radius) == "number", "Arg #2 (radius) must be a number.")
	assert(type(time) == "number", "Arg #3 (time) must be a number.")
	assert(type(combatFlags) == "number", "Arg #4 (combatFlags) must be a number.")

	local result = native_call(0x2BBA30B854534A0C, ped, radius, time, combatFlags)
end
natives.task.task_combat_hated_targets_around_ped_timed = natives.TASK.TASK_COMBAT_HATED_TARGETS_AROUND_PED_TIMED

--[[
In every case of this native, I've only seen the first parameter passed as 0, although I believe it's a Ped after seeing tasks around it using 0. That's because it's used in a Sequence Task.

The last 3 parameters are definitely coordinates after seeing them passed in other scripts, and even being used straight from the player's coordinates.
---
It seems that - in the decompiled scripts - this native was used on a ped who was in a vehicle to throw a projectile out the window at the player. This is something any ped will naturally do if they have a throwable and they are doing driveby-combat (although not very accurately).
It is possible, however, that this is how SWAT throws smoke grenades at the player when in cover.
----------------------------------------------------
The first comment is right it definately is the ped as if you look in script finale_heist2b.c line 59628 in Xbox Scripts atleast you will see task_throw_projectile and the first param is Local_559[2 <14>] if you look above it a little bit line 59622 give_weapon_to_ped uses the same exact param Local_559[2 <14>] and we all know the first param of that native is ped. So it guaranteed has to be ped. 0 just may mean to use your ped by default for some reason.
]]
function natives.TASK.TASK_THROW_PROJECTILE(--[[Ped]] ped, --[[float]] x, --[[float]] y, --[[float]] z, --[[int]] ignoreCollisionEntityIndex, --[[BOOL]] createInvincibleProjectile) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_THROW_PROJECTILE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")
	assert(type(ignoreCollisionEntityIndex) == "number", "Arg #5 (ignoreCollisionEntityIndex) must be a number.")
	assert(type(createInvincibleProjectile) == "boolean", "Arg #6 (createInvincibleProjectile) must be a boolean.")

	local result = native_call(0x7285951DBF6B5A51, ped, x, y, z, ignoreCollisionEntityIndex, createInvincibleProjectile)
end
natives.task.task_throw_projectile = natives.TASK.TASK_THROW_PROJECTILE

function natives.TASK.TASK_SWAP_WEAPON(--[[Ped]] ped, --[[BOOL]] drawWeapon) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_SWAP_WEAPON' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(drawWeapon) == "boolean", "Arg #2 (drawWeapon) must be a boolean.")

	local result = native_call(0xA21C51255B205245, ped, drawWeapon)
end
natives.task.task_swap_weapon = natives.TASK.TASK_SWAP_WEAPON

--[[
The 2nd param (drawWeapon) is not implemented.

-----------------------------------------------------------------------

The only occurrence I found in a R* script ("assassin_construction.ysc.c4"):

            if (((v_3 < v_4) && (TASK::GET_SCRIPT_TASK_STATUS(PLAYER::PLAYER_PED_ID(), 0x6a67a5cc) != 1)) && (v_5 > v_3)) {
                TASK::TASK_RELOAD_WEAPON(PLAYER::PLAYER_PED_ID(), 1);
            }
]]
function natives.TASK.TASK_RELOAD_WEAPON(--[[Ped]] ped, --[[BOOL]] drawWeapon) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_RELOAD_WEAPON' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(drawWeapon) == "boolean", "Arg #2 (drawWeapon) must be a boolean.")

	local result = native_call(0x62D2916F56B9CD2D, ped, drawWeapon)
end
natives.task.task_reload_weapon = natives.TASK.TASK_RELOAD_WEAPON

function natives.TASK.IS_PED_GETTING_UP(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.IS_PED_GETTING_UP' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x2A74E1D5F2F00EEC, ped)
	return result:__tointeger() ~= 0
end
natives.task.is_ped_getting_up = natives.TASK.IS_PED_GETTING_UP

--[[
EX: Function.Call(Ped1, Ped2, Time, 0);

The last parameter is always 0 for some reason I do not know. The first parameter is the pedestrian who will writhe to the pedestrian in the other parameter. The third paremeter is how long until the Writhe task ends. When the task ends, the ped will die. If set to -1, he will not die automatically, and the task will continue until something causes it to end. This can be being touched by an entity, being shot, explosion, going into ragdoll, having task cleared. Anything that ends the current task will kill the ped at this point.



MulleDK19: Third parameter does not appear to be time. The last parameter is not implemented (It's not used, regardless of value).
]]
function natives.TASK.TASK_WRITHE(--[[Ped]] ped, --[[Ped]] target, --[[int]] minFireLoops, --[[int]] startState, --[[BOOL]] forceShootOnGround, --[[int]] shootFromGroundTimer) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_WRITHE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(target) == "number", "Arg #2 (target) must be a number.")
	assert(type(minFireLoops) == "number", "Arg #3 (minFireLoops) must be a number.")
	assert(type(startState) == "number", "Arg #4 (startState) must be a number.")
	assert(type(forceShootOnGround) == "boolean", "Arg #5 (forceShootOnGround) must be a boolean.")
	assert(type(shootFromGroundTimer) == "number", "Arg #6 (shootFromGroundTimer) must be a number.")

	local result = native_call(0xCDDC2B77CE54AC6E, ped, target, minFireLoops, startState, forceShootOnGround, shootFromGroundTimer)
end
natives.task.task_writhe = natives.TASK.TASK_WRITHE

--[[
This native checks if a ped is on the ground, in pain from a (gunshot) wound.
Returns `true` if the ped is in writhe, `false` otherwise.
]]
function natives.TASK.IS_PED_IN_WRITHE(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.IS_PED_IN_WRITHE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0xDEB6D52126E7D640, ped)
	return result:__tointeger() ~= 0
end
natives.task.is_ped_in_writhe = natives.TASK.IS_PED_IN_WRITHE

--[[
 patrolRoutes found in the b617d scripts:
 "miss_Ass0",
 "miss_Ass1",
 "miss_Ass2",
 "miss_Ass3",
 "miss_Ass4",
 "miss_Ass5",
 "miss_Ass6",
 "MISS_PATROL_6",
 "MISS_PATROL_7",
 "MISS_PATROL_8",
 "MISS_PATROL_9",
 "miss_Tower_01",
 "miss_Tower_02",
 "miss_Tower_03",
 "miss_Tower_04",
 "miss_Tower_05",
 "miss_Tower_06",
 "miss_Tower_07",
 "miss_Tower_08",
 "miss_Tower_10"
]]
function natives.TASK.OPEN_PATROL_ROUTE(--[[const char*]] patrolRoute) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.OPEN_PATROL_ROUTE' due to disabled trusted mode")

	assert(type(patrolRoute) == "string", "Arg #1 (patrolRoute) must be a string.")

	local result = native_call(0xA36BFB5EE89F3D82, patrolRoute)
end
natives.task.open_patrol_route = natives.TASK.OPEN_PATROL_ROUTE

function natives.TASK.CLOSE_PATROL_ROUTE() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.CLOSE_PATROL_ROUTE' due to disabled trusted mode")

	local result = native_call(0xB043ECA801B8CBC1)
end
natives.task.close_patrol_route = natives.TASK.CLOSE_PATROL_ROUTE

--[[
Example: 
TASK::ADD_PATROL_ROUTE_NODE(2, "WORLD_HUMAN_GUARD_STAND", -193.4915, -2378.864990234375, 10.9719, -193.4915, -2378.864990234375, 10.9719, 3000);

p0 is between 0 and 4 in the scripts.

p1 is "WORLD_HUMAN_GUARD_STAND" or "StandGuard".

p2, p3 and p4 is only one parameter sometimes in the scripts. Most likely a Vector3 hence p2, p3 and p4 are coordinates. 
Examples: 
TASK::ADD_PATROL_ROUTE_NODE(1, "WORLD_HUMAN_GUARD_STAND", l_739[7/*3*/], 0.0, 0.0, 0.0, 0);

TASK::ADD_PATROL_ROUTE_NODE(1, "WORLD_HUMAN_GUARD_STAND", l_B0[17/*44*/]._f3, l_B0[17/*44*/]._f3, 2000);

p5, p6 and p7 are for example set to: 1599.0406494140625, 2713.392578125, 44.4309.

p8 is an int, often random set to for example: MISC::GET_RANDOM_INT_IN_RANGE(5000, 10000).
]]
function natives.TASK.ADD_PATROL_ROUTE_NODE(--[[int]] nodeId, --[[const char*]] nodeType, --[[float]] posX, --[[float]] posY, --[[float]] posZ, --[[float]] headingX, --[[float]] headingY, --[[float]] headingZ, --[[int]] duration) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.ADD_PATROL_ROUTE_NODE' due to disabled trusted mode")

	assert(type(nodeId) == "number", "Arg #1 (nodeId) must be a number.")
	assert(type(nodeType) == "string", "Arg #2 (nodeType) must be a string.")
	assert(type(posX) == "number", "Arg #3 (posX) must be a number.")
	assert(type(posY) == "number", "Arg #4 (posY) must be a number.")
	assert(type(posZ) == "number", "Arg #5 (posZ) must be a number.")
	assert(type(headingX) == "number", "Arg #6 (headingX) must be a number.")
	assert(type(headingY) == "number", "Arg #7 (headingY) must be a number.")
	assert(type(headingZ) == "number", "Arg #8 (headingZ) must be a number.")
	assert(type(duration) == "number", "Arg #9 (duration) must be a number.")

	local result = native_call(0x8EDF950167586B7C, nodeId, nodeType, posX, posY, posZ, headingX, headingY, headingZ, duration)
end
natives.task.add_patrol_route_node = natives.TASK.ADD_PATROL_ROUTE_NODE

function natives.TASK.ADD_PATROL_ROUTE_LINK(--[[int]] nodeId1, --[[int]] nodeId2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.ADD_PATROL_ROUTE_LINK' due to disabled trusted mode")

	assert(type(nodeId1) == "number", "Arg #1 (nodeId1) must be a number.")
	assert(type(nodeId2) == "number", "Arg #2 (nodeId2) must be a number.")

	local result = native_call(0x23083260DEC3A551, nodeId1, nodeId2)
end
natives.task.add_patrol_route_link = natives.TASK.ADD_PATROL_ROUTE_LINK

function natives.TASK.CREATE_PATROL_ROUTE() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.CREATE_PATROL_ROUTE' due to disabled trusted mode")

	local result = native_call(0xAF8A443CCC8018DC)
end
natives.task.create_patrol_route = natives.TASK.CREATE_PATROL_ROUTE

--[[
From the b617d scripts:

TASK::DELETE_PATROL_ROUTE("miss_merc0");
TASK::DELETE_PATROL_ROUTE("miss_merc1");
TASK::DELETE_PATROL_ROUTE("miss_merc2");
TASK::DELETE_PATROL_ROUTE("miss_dock");
]]
function natives.TASK.DELETE_PATROL_ROUTE(--[[const char*]] patrolRoute) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.DELETE_PATROL_ROUTE' due to disabled trusted mode")

	assert(type(patrolRoute) == "string", "Arg #1 (patrolRoute) must be a string.")

	local result = native_call(0x7767DD9D65E91319, patrolRoute)
end
natives.task.delete_patrol_route = natives.TASK.DELETE_PATROL_ROUTE

function natives.TASK.GET_PATROL_TASK_INFO(--[[Ped]] ped, --[[int*]] timeLeftAtNode, --[[int*]] nodeId) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.GET_PATROL_TASK_INFO' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(timeLeftAtNode) == "userdata", "Arg #2 (timeLeftAtNode) must be a userdata.")
	assert(type(nodeId) == "userdata", "Arg #3 (nodeId) must be a userdata.")

	local result = native_call(0x52F734CEBE20DFBA, ped, timeLeftAtNode, nodeId)
	return result:__tointeger() ~= 0
end
natives.task.get_patrol_task_info = natives.TASK.GET_PATROL_TASK_INFO

--[[
After looking at some scripts the second parameter seems to be an id of some kind. Here are some I found from some R* scripts:

"miss_Tower_01" (this went from 01 - 10)
"miss_Ass0" (0, 4, 6, 3)
"MISS_PATROL_8"

I think they're patrol routes, but I'm not sure. And I believe the 3rd parameter is a BOOL, but I can't confirm other than only seeing 0 and 1 being passed.


As far as I can see the patrol routes names such as "miss_Ass0" have been defined earlier in the scripts. This leads me to believe we can defined our own new patrol routes by following the same approach. 
From the scripts

    TASK::OPEN_PATROL_ROUTE("miss_Ass0");
    TASK::ADD_PATROL_ROUTE_NODE(0, "WORLD_HUMAN_GUARD_STAND", l_738[0/*3*/], -139.4076690673828, -993.4732055664062, 26.2754, MISC::GET_RANDOM_INT_IN_RANGE(5000, 10000));
    TASK::ADD_PATROL_ROUTE_NODE(1, "WORLD_HUMAN_GUARD_STAND", l_738[1/*3*/], -116.1391830444336, -987.4984130859375, 26.38541030883789, MISC::GET_RANDOM_INT_IN_RANGE(5000, 10000));
    TASK::ADD_PATROL_ROUTE_NODE(2, "WORLD_HUMAN_GUARD_STAND", l_738[2/*3*/], -128.46847534179688, -979.0340576171875, 26.2754, MISC::GET_RANDOM_INT_IN_RANGE(5000, 10000));
    TASK::ADD_PATROL_ROUTE_LINK(0, 1);
    TASK::ADD_PATROL_ROUTE_LINK(1, 2);
    TASK::ADD_PATROL_ROUTE_LINK(2, 0);
    TASK::CLOSE_PATROL_ROUTE();
    TASK::CREATE_PATROL_ROUTE();


]]
function natives.TASK.TASK_PATROL(--[[Ped]] ped, --[[const char*]] patrolRouteName, --[[int]] alertState, --[[BOOL]] canChatToPeds, --[[BOOL]] useHeadLookAt) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_PATROL' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(patrolRouteName) == "string", "Arg #2 (patrolRouteName) must be a string.")
	assert(type(alertState) == "number", "Arg #3 (alertState) must be a number.")
	assert(type(canChatToPeds) == "boolean", "Arg #4 (canChatToPeds) must be a boolean.")
	assert(type(useHeadLookAt) == "boolean", "Arg #5 (useHeadLookAt) must be a boolean.")

	local result = native_call(0xBDA5DF49D080FE4E, ped, patrolRouteName, alertState, canChatToPeds, useHeadLookAt)
end
natives.task.task_patrol = natives.TASK.TASK_PATROL

--[[
Makes the ped run to take cover
]]
function natives.TASK.TASK_STAY_IN_COVER(--[[Ped]] ped) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_STAY_IN_COVER' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0xE5DA8615A6180789, ped)
end
natives.task.task_stay_in_cover = natives.TASK.TASK_STAY_IN_COVER

--[[
x, y, z: offset in world coords from some entity.
]]
function natives.TASK.ADD_VEHICLE_SUBTASK_ATTACK_COORD(--[[Ped]] ped, --[[float]] x, --[[float]] y, --[[float]] z) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.ADD_VEHICLE_SUBTASK_ATTACK_COORD' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")

	local result = native_call(0x5CF0D8F9BBA0DD75, ped, x, y, z)
end
natives.task.add_vehicle_subtask_attack_coord = natives.TASK.ADD_VEHICLE_SUBTASK_ATTACK_COORD

function natives.TASK.ADD_VEHICLE_SUBTASK_ATTACK_PED(--[[Ped]] ped, --[[Ped]] target) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.ADD_VEHICLE_SUBTASK_ATTACK_PED' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(target) == "number", "Arg #2 (target) must be a number.")

	local result = native_call(0x85F462BADC7DA47F, ped, target)
end
natives.task.add_vehicle_subtask_attack_ped = natives.TASK.ADD_VEHICLE_SUBTASK_ATTACK_PED

function natives.TASK.TASK_VEHICLE_SHOOT_AT_PED(--[[Ped]] ped, --[[Ped]] target, --[[float]] fireTolerance) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_VEHICLE_SHOOT_AT_PED' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(target) == "number", "Arg #2 (target) must be a number.")
	assert(type(fireTolerance) == "number", "Arg #3 (fireTolerance) must be a number.")

	local result = native_call(0x10AB107B887214D8, ped, target, fireTolerance)
end
natives.task.task_vehicle_shoot_at_ped = natives.TASK.TASK_VEHICLE_SHOOT_AT_PED

function natives.TASK.TASK_VEHICLE_AIM_AT_PED(--[[Ped]] ped, --[[Ped]] target) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_VEHICLE_AIM_AT_PED' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(target) == "number", "Arg #2 (target) must be a number.")

	local result = native_call(0xE41885592B08B097, ped, target)
end
natives.task.task_vehicle_aim_at_ped = natives.TASK.TASK_VEHICLE_AIM_AT_PED

function natives.TASK.TASK_VEHICLE_SHOOT_AT_COORD(--[[Ped]] ped, --[[float]] x, --[[float]] y, --[[float]] z, --[[float]] fireTolerance) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_VEHICLE_SHOOT_AT_COORD' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")
	assert(type(fireTolerance) == "number", "Arg #5 (fireTolerance) must be a number.")

	local result = native_call(0x5190796ED39C9B6D, ped, x, y, z, fireTolerance)
end
natives.task.task_vehicle_shoot_at_coord = natives.TASK.TASK_VEHICLE_SHOOT_AT_COORD

function natives.TASK.TASK_VEHICLE_AIM_AT_COORD(--[[Ped]] ped, --[[float]] x, --[[float]] y, --[[float]] z) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_VEHICLE_AIM_AT_COORD' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")

	local result = native_call(0x447C1E9EF844BC0F, ped, x, y, z)
end
natives.task.task_vehicle_aim_at_coord = natives.TASK.TASK_VEHICLE_AIM_AT_COORD

--[[
Differs from TASK_VEHICLE_DRIVE_TO_COORDS in that it will pick the shortest possible road route without taking one-way streets and other "road laws" into consideration.

WARNING:
A behaviorFlag value of 0 will result in a clunky, stupid driver!

Recommended settings:
speed = 30.0f,
behaviorFlag = 156, 
stoppingRange = 5.0f;

If you simply want to have your driver move to a fixed location, call it only once, or, when necessary in the event of interruption. 

If using this to continually follow a Ped who is on foot:  You will need to run this in a tick loop.  Call it in with the Ped's updated coordinates every 20 ticks or so and you will have one hell of a smart, fast-reacting NPC driver -- provided he doesn't get stuck.  If your update frequency is too fast, the Ped may not have enough time to figure his way out of being stuck, and thus, remain stuck.  One way around this would be to implement an "anti-stuck" mechanism, which allows the driver to realize he's stuck, temporarily pause the tick, unstuck, then resume the tick.

EDIT:  This is being discussed in more detail at http://gtaforums.com/topic/818504-any-idea-on-how-to-make-peds-clever-and-insanely-fast-c/  
]]
function natives.TASK.TASK_VEHICLE_GOTO_NAVMESH(--[[Ped]] ped, --[[Vehicle]] vehicle, --[[float]] x, --[[float]] y, --[[float]] z, --[[float]] speed, --[[int]] behaviorFlag, --[[float]] stoppingRange) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_VEHICLE_GOTO_NAVMESH' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(vehicle) == "number", "Arg #2 (vehicle) must be a number.")
	assert(type(x) == "number", "Arg #3 (x) must be a number.")
	assert(type(y) == "number", "Arg #4 (y) must be a number.")
	assert(type(z) == "number", "Arg #5 (z) must be a number.")
	assert(type(speed) == "number", "Arg #6 (speed) must be a number.")
	assert(type(behaviorFlag) == "number", "Arg #7 (behaviorFlag) must be a number.")
	assert(type(stoppingRange) == "number", "Arg #8 (stoppingRange) must be a number.")

	local result = native_call(0x195AEEB13CEFE2EE, ped, vehicle, x, y, z, speed, behaviorFlag, stoppingRange)
end
natives.task.task_vehicle_goto_navmesh = natives.TASK.TASK_VEHICLE_GOTO_NAVMESH

--[[
movement_speed: mostly 2f, but also 1/1.2f, etc.
p8: always false
p9: 2f
p10: 0.5f
p11: true
p12: 0 / 512 / 513, etc.
p13: 0
firing_pattern: ${firing_pattern_full_auto}, 0xC6EE6B4C
]]
function natives.TASK.TASK_GO_TO_COORD_WHILE_AIMING_AT_COORD(--[[Ped]] ped, --[[float]] x, --[[float]] y, --[[float]] z, --[[float]] aimAtX, --[[float]] aimAtY, --[[float]] aimAtZ, --[[float]] moveBlendRatio, --[[BOOL]] shoot, --[[float]] targetRadius, --[[float]] slowDistance, --[[BOOL]] useNavMesh, --[[int]] navFlags, --[[BOOL]] instantBlendToAim, --[[Hash]] firingPattern) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_GO_TO_COORD_WHILE_AIMING_AT_COORD' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")
	assert(type(aimAtX) == "number", "Arg #5 (aimAtX) must be a number.")
	assert(type(aimAtY) == "number", "Arg #6 (aimAtY) must be a number.")
	assert(type(aimAtZ) == "number", "Arg #7 (aimAtZ) must be a number.")
	assert(type(moveBlendRatio) == "number", "Arg #8 (moveBlendRatio) must be a number.")
	assert(type(shoot) == "boolean", "Arg #9 (shoot) must be a boolean.")
	assert(type(targetRadius) == "number", "Arg #10 (targetRadius) must be a number.")
	assert(type(slowDistance) == "number", "Arg #11 (slowDistance) must be a number.")
	assert(type(useNavMesh) == "boolean", "Arg #12 (useNavMesh) must be a boolean.")
	assert(type(navFlags) == "number", "Arg #13 (navFlags) must be a number.")
	assert(type(instantBlendToAim) == "boolean", "Arg #14 (instantBlendToAim) must be a boolean.")
	assert(type(firingPattern) == "number", "Arg #15 (firingPattern) must be a number.")

	local result = native_call(0x11315AB3385B8AC0, ped, x, y, z, aimAtX, aimAtY, aimAtZ, moveBlendRatio, shoot, targetRadius, slowDistance, useNavMesh, navFlags, instantBlendToAim, firingPattern)
end
natives.task.task_go_to_coord_while_aiming_at_coord = natives.TASK.TASK_GO_TO_COORD_WHILE_AIMING_AT_COORD

function natives.TASK.TASK_GO_TO_COORD_WHILE_AIMING_AT_ENTITY(--[[Ped]] ped, --[[float]] x, --[[float]] y, --[[float]] z, --[[Entity]] aimAtID, --[[float]] moveBlendRatio, --[[BOOL]] shoot, --[[float]] targetRadius, --[[float]] slowDistance, --[[BOOL]] useNavMesh, --[[int]] navFlags, --[[BOOL]] instantBlendToAim, --[[Hash]] firingPattern, --[[int]] time) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_GO_TO_COORD_WHILE_AIMING_AT_ENTITY' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")
	assert(type(aimAtID) == "number", "Arg #5 (aimAtID) must be a number.")
	assert(type(moveBlendRatio) == "number", "Arg #6 (moveBlendRatio) must be a number.")
	assert(type(shoot) == "boolean", "Arg #7 (shoot) must be a boolean.")
	assert(type(targetRadius) == "number", "Arg #8 (targetRadius) must be a number.")
	assert(type(slowDistance) == "number", "Arg #9 (slowDistance) must be a number.")
	assert(type(useNavMesh) == "boolean", "Arg #10 (useNavMesh) must be a boolean.")
	assert(type(navFlags) == "number", "Arg #11 (navFlags) must be a number.")
	assert(type(instantBlendToAim) == "boolean", "Arg #12 (instantBlendToAim) must be a boolean.")
	assert(type(firingPattern) == "number", "Arg #13 (firingPattern) must be a number.")
	assert(type(time) == "number", "Arg #14 (time) must be a number.")

	local result = native_call(0xB2A16444EAD9AE47, ped, x, y, z, aimAtID, moveBlendRatio, shoot, targetRadius, slowDistance, useNavMesh, navFlags, instantBlendToAim, firingPattern, time)
end
natives.task.task_go_to_coord_while_aiming_at_entity = natives.TASK.TASK_GO_TO_COORD_WHILE_AIMING_AT_ENTITY

--[[
The ped will walk or run towards goToLocation, aiming towards goToLocation or focusLocation (depending on the aimingFlag) and shooting if shootAtEnemies = true to any enemy in his path.

If the ped is closer than noRoadsDistance, the ped will ignore pathing/navmesh and go towards goToLocation directly. This could cause the ped to get stuck behind tall walls if the goToLocation is on the other side. To avoid this, use 0.0f and the ped will always use pathing/navmesh to reach his destination.

If the speed is set to 0.0f, the ped will just stand there while aiming, if set to 1.0f he will walk while aiming, 2.0f will run while aiming.

The ped will stop aiming when he is closer than distanceToStopAt to goToLocation.

I still can't figure out what unkTrue is used for. I don't notice any difference if I set it to false but in the decompiled scripts is always true.

I think that unkFlag, like the driving styles, could be a flag that "work as a list of 32 bits converted to a decimal integer. Each bit acts as a flag, and enables or disables a function". What leads me to this conclusion is the fact that in the decompiled scripts, unkFlag takes values like: 0, 1, 5 (101 in binary) and 4097 (4096 + 1 or 1000000000001 in binary). For now, I don't know what behavior enable or disable this possible flag so I leave it at 0.

Note: After some testing, using unkFlag = 16 (0x10) enables the use of sidewalks while moving towards goToLocation.

The aimingFlag takes 2 values: 0 to aim at the focusLocation, 1 to aim at where the ped is heading (goToLocation).

Example:

enum AimFlag
{
   AimAtFocusLocation,
   AimAtGoToLocation
};

Vector3 goToLocation1 = { 996.2867f, 0, -2143.044f, 0, 28.4763f, 0 }; // remember the padding.

Vector3 goToLocation2 = { 990.2867f, 0, -2140.044f, 0, 28.4763f, 0 }; // remember the padding.

Vector3 focusLocation = { 994.3478f, 0, -2136.118f, 0, 29.2463f, 0 }; // the coord z should be a little higher, around +1.0f to avoid aiming at the ground

// 1st example
TASK::TASK_GO_TO_COORD_AND_AIM_AT_HATED_ENTITIES_NEAR_COORD(pedHandle, goToLocation1.x, goToLocation1.y, goToLocation1.z, focusLocation.x, focusLocation.y, focusLocation.z, 2.0f /*run*/, true /*shoot*/, 3.0f /*stop at*/, 0.0f /*noRoadsDistance*/, true /*always true*/, 0 /*possible flag*/, AimFlag::AimAtGoToLocation, -957453492 /*FullAuto pattern*/);

// 2nd example
TASK::TASK_GO_TO_COORD_AND_AIM_AT_HATED_ENTITIES_NEAR_COORD(pedHandle, goToLocation2.x, goToLocation2.y, goToLocation2.z, focusLocation.x, focusLocation.y, focusLocation.z, 1.0f /*walk*/, false /*don't shoot*/, 3.0f /*stop at*/, 0.0f /*noRoadsDistance*/, true /*always true*/, 0 /*possible flag*/, AimFlag::AimAtFocusLocation, -957453492 /*FullAuto pattern*/);


1st example: The ped (pedhandle) will run towards goToLocation1. While running and aiming towards goToLocation1, the ped will shoot on sight to any enemy in his path, using "FullAuto" firing pattern. The ped will stop once he is closer than distanceToStopAt to goToLocation1.

2nd example: The ped will walk towards goToLocation2. This time, while walking towards goToLocation2 and aiming at focusLocation, the ped will point his weapon on sight to any enemy in his path without shooting. The ped will stop once he is closer than distanceToStopAt to goToLocation2.
]]
function natives.TASK.TASK_GO_TO_COORD_AND_AIM_AT_HATED_ENTITIES_NEAR_COORD(--[[Ped]] pedHandle, --[[float]] goToLocationX, --[[float]] goToLocationY, --[[float]] goToLocationZ, --[[float]] focusLocationX, --[[float]] focusLocationY, --[[float]] focusLocationZ, --[[float]] speed, --[[BOOL]] shootAtEnemies, --[[float]] distanceToStopAt, --[[float]] noRoadsDistance, --[[BOOL]] useNavMesh, --[[int]] navFlags, --[[int]] taskFlags, --[[Hash]] firingPattern) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_GO_TO_COORD_AND_AIM_AT_HATED_ENTITIES_NEAR_COORD' due to disabled trusted mode")

	assert(type(pedHandle) == "number", "Arg #1 (pedHandle) must be a number.")
	assert(type(goToLocationX) == "number", "Arg #2 (goToLocationX) must be a number.")
	assert(type(goToLocationY) == "number", "Arg #3 (goToLocationY) must be a number.")
	assert(type(goToLocationZ) == "number", "Arg #4 (goToLocationZ) must be a number.")
	assert(type(focusLocationX) == "number", "Arg #5 (focusLocationX) must be a number.")
	assert(type(focusLocationY) == "number", "Arg #6 (focusLocationY) must be a number.")
	assert(type(focusLocationZ) == "number", "Arg #7 (focusLocationZ) must be a number.")
	assert(type(speed) == "number", "Arg #8 (speed) must be a number.")
	assert(type(shootAtEnemies) == "boolean", "Arg #9 (shootAtEnemies) must be a boolean.")
	assert(type(distanceToStopAt) == "number", "Arg #10 (distanceToStopAt) must be a number.")
	assert(type(noRoadsDistance) == "number", "Arg #11 (noRoadsDistance) must be a number.")
	assert(type(useNavMesh) == "boolean", "Arg #12 (useNavMesh) must be a boolean.")
	assert(type(navFlags) == "number", "Arg #13 (navFlags) must be a number.")
	assert(type(taskFlags) == "number", "Arg #14 (taskFlags) must be a number.")
	assert(type(firingPattern) == "number", "Arg #15 (firingPattern) must be a number.")

	local result = native_call(0xA55547801EB331FC, pedHandle, goToLocationX, goToLocationY, goToLocationZ, focusLocationX, focusLocationY, focusLocationZ, speed, shootAtEnemies, distanceToStopAt, noRoadsDistance, useNavMesh, navFlags, taskFlags, firingPattern)
end
natives.task.task_go_to_coord_and_aim_at_hated_entities_near_coord = natives.TASK.TASK_GO_TO_COORD_AND_AIM_AT_HATED_ENTITIES_NEAR_COORD

function natives.TASK.TASK_GO_TO_ENTITY_WHILE_AIMING_AT_COORD(--[[Ped]] ped, --[[Entity]] entity, --[[float]] aimX, --[[float]] aimY, --[[float]] aimZ, --[[float]] moveBlendRatio, --[[BOOL]] shoot, --[[float]] targetRadius, --[[float]] slowDistance, --[[BOOL]] useNavMesh, --[[BOOL]] instantBlendToAim, --[[Hash]] firingPattern) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_GO_TO_ENTITY_WHILE_AIMING_AT_COORD' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(entity) == "number", "Arg #2 (entity) must be a number.")
	assert(type(aimX) == "number", "Arg #3 (aimX) must be a number.")
	assert(type(aimY) == "number", "Arg #4 (aimY) must be a number.")
	assert(type(aimZ) == "number", "Arg #5 (aimZ) must be a number.")
	assert(type(moveBlendRatio) == "number", "Arg #6 (moveBlendRatio) must be a number.")
	assert(type(shoot) == "boolean", "Arg #7 (shoot) must be a boolean.")
	assert(type(targetRadius) == "number", "Arg #8 (targetRadius) must be a number.")
	assert(type(slowDistance) == "number", "Arg #9 (slowDistance) must be a number.")
	assert(type(useNavMesh) == "boolean", "Arg #10 (useNavMesh) must be a boolean.")
	assert(type(instantBlendToAim) == "boolean", "Arg #11 (instantBlendToAim) must be a boolean.")
	assert(type(firingPattern) == "number", "Arg #12 (firingPattern) must be a number.")

	local result = native_call(0x04701832B739DCE5, ped, entity, aimX, aimY, aimZ, moveBlendRatio, shoot, targetRadius, slowDistance, useNavMesh, instantBlendToAim, firingPattern)
end
natives.task.task_go_to_entity_while_aiming_at_coord = natives.TASK.TASK_GO_TO_ENTITY_WHILE_AIMING_AT_COORD

--[[
shootatEntity:
If true, peds will shoot at Entity till it is dead.
If false, peds will just walk till they reach the entity and will cease shooting.
]]
function natives.TASK.TASK_GO_TO_ENTITY_WHILE_AIMING_AT_ENTITY(--[[Ped]] ped, --[[Entity]] entityToWalkTo, --[[Entity]] entityToAimAt, --[[float]] speed, --[[BOOL]] shootatEntity, --[[float]] targetRadius, --[[float]] slowDistance, --[[BOOL]] useNavMesh, --[[BOOL]] instantBlendToAim, --[[Hash]] firingPattern) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_GO_TO_ENTITY_WHILE_AIMING_AT_ENTITY' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(entityToWalkTo) == "number", "Arg #2 (entityToWalkTo) must be a number.")
	assert(type(entityToAimAt) == "number", "Arg #3 (entityToAimAt) must be a number.")
	assert(type(speed) == "number", "Arg #4 (speed) must be a number.")
	assert(type(shootatEntity) == "boolean", "Arg #5 (shootatEntity) must be a boolean.")
	assert(type(targetRadius) == "number", "Arg #6 (targetRadius) must be a number.")
	assert(type(slowDistance) == "number", "Arg #7 (slowDistance) must be a number.")
	assert(type(useNavMesh) == "boolean", "Arg #8 (useNavMesh) must be a boolean.")
	assert(type(instantBlendToAim) == "boolean", "Arg #9 (instantBlendToAim) must be a boolean.")
	assert(type(firingPattern) == "number", "Arg #10 (firingPattern) must be a number.")

	local result = native_call(0x97465886D35210E9, ped, entityToWalkTo, entityToAimAt, speed, shootatEntity, targetRadius, slowDistance, useNavMesh, instantBlendToAim, firingPattern)
end
natives.task.task_go_to_entity_while_aiming_at_entity = natives.TASK.TASK_GO_TO_ENTITY_WHILE_AIMING_AT_ENTITY

--[[
Makes the ped ragdoll like when falling from a great height
]]
function natives.TASK.SET_HIGH_FALL_TASK(--[[Ped]] ped, --[[int]] minTime, --[[int]] maxTime, --[[int]] entryType) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.SET_HIGH_FALL_TASK' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(minTime) == "number", "Arg #2 (minTime) must be a number.")
	assert(type(maxTime) == "number", "Arg #3 (maxTime) must be a number.")
	assert(type(entryType) == "number", "Arg #4 (entryType) must be a number.")

	local result = native_call(0x8C825BDC7741D37C, ped, minTime, maxTime, entryType)
end
natives.task.set_high_fall_task = natives.TASK.SET_HIGH_FALL_TASK

--[[
Full list of waypoint recordings by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/waypointRecordings.json
For a full list of the points, see here: goo.gl/wIH0vn

Max number of loaded recordings is 32.
]]
function natives.TASK.REQUEST_WAYPOINT_RECORDING(--[[const char*]] name) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.REQUEST_WAYPOINT_RECORDING' due to disabled trusted mode")

	assert(type(name) == "string", "Arg #1 (name) must be a string.")

	local result = native_call(0x9EEFB62EB27B5792, name)
end
natives.task.request_waypoint_recording = natives.TASK.REQUEST_WAYPOINT_RECORDING

--[[
Full list of waypoint recordings by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/waypointRecordings.json
]]
function natives.TASK.GET_IS_WAYPOINT_RECORDING_LOADED(--[[const char*]] name) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.GET_IS_WAYPOINT_RECORDING_LOADED' due to disabled trusted mode")

	assert(type(name) == "string", "Arg #1 (name) must be a string.")

	local result = native_call(0xCB4E8BE8A0063C5D, name)
	return result:__tointeger() ~= 0
end
natives.task.get_is_waypoint_recording_loaded = natives.TASK.GET_IS_WAYPOINT_RECORDING_LOADED

--[[
Full list of waypoint recordings by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/waypointRecordings.json
]]
function natives.TASK.REMOVE_WAYPOINT_RECORDING(--[[const char*]] name) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.REMOVE_WAYPOINT_RECORDING' due to disabled trusted mode")

	assert(type(name) == "string", "Arg #1 (name) must be a string.")

	local result = native_call(0xFF1B8B4AA1C25DC8, name)
end
natives.task.remove_waypoint_recording = natives.TASK.REMOVE_WAYPOINT_RECORDING

--[[
Full list of waypoint recordings by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/waypointRecordings.json
For a full list of the points, see here: goo.gl/wIH0vn
]]
function natives.TASK.WAYPOINT_RECORDING_GET_NUM_POINTS(--[[const char*]] name, --[[int*]] points) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.WAYPOINT_RECORDING_GET_NUM_POINTS' due to disabled trusted mode")

	assert(type(name) == "string", "Arg #1 (name) must be a string.")
	assert(type(points) == "userdata", "Arg #2 (points) must be a userdata.")

	local result = native_call(0x5343532C01A07234, name, points)
	return result:__tointeger() ~= 0
end
natives.task.waypoint_recording_get_num_points = natives.TASK.WAYPOINT_RECORDING_GET_NUM_POINTS

--[[
Full list of waypoint recordings by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/waypointRecordings.json
For a full list of the points, see here: goo.gl/wIH0vn
]]
function natives.TASK.WAYPOINT_RECORDING_GET_COORD(--[[const char*]] name, --[[int]] point, --[[Vector3*]] coord) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.WAYPOINT_RECORDING_GET_COORD' due to disabled trusted mode")

	assert(type(name) == "string", "Arg #1 (name) must be a string.")
	assert(type(point) == "number", "Arg #2 (point) must be a number.")
	assert(type(coord) == "userdata", "Arg #3 (coord) must be a userdata.")

	local result = native_call(0x2FB897405C90B361, name, point, coord)
	return result:__tointeger() ~= 0
end
natives.task.waypoint_recording_get_coord = natives.TASK.WAYPOINT_RECORDING_GET_COORD

--[[
Full list of waypoint recordings by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/waypointRecordings.json
]]
function natives.TASK.WAYPOINT_RECORDING_GET_SPEED_AT_POINT(--[[const char*]] name, --[[int]] point) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.WAYPOINT_RECORDING_GET_SPEED_AT_POINT' due to disabled trusted mode")

	assert(type(name) == "string", "Arg #1 (name) must be a string.")
	assert(type(point) == "number", "Arg #2 (point) must be a number.")

	local result = native_call(0x005622AEBC33ACA9, name, point)
	return result:__tonumber()
end
natives.task.waypoint_recording_get_speed_at_point = natives.TASK.WAYPOINT_RECORDING_GET_SPEED_AT_POINT

--[[
Full list of waypoint recordings by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/waypointRecordings.json
For a full list of the points, see here: goo.gl/wIH0vn
]]
function natives.TASK.WAYPOINT_RECORDING_GET_CLOSEST_WAYPOINT(--[[const char*]] name, --[[float]] x, --[[float]] y, --[[float]] z, --[[int*]] point) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.WAYPOINT_RECORDING_GET_CLOSEST_WAYPOINT' due to disabled trusted mode")

	assert(type(name) == "string", "Arg #1 (name) must be a string.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")
	assert(type(point) == "userdata", "Arg #5 (point) must be a userdata.")

	local result = native_call(0xB629A298081F876F, name, x, y, z, point)
	return result:__tointeger() ~= 0
end
natives.task.waypoint_recording_get_closest_waypoint = natives.TASK.WAYPOINT_RECORDING_GET_CLOSEST_WAYPOINT

function natives.TASK.TASK_FOLLOW_WAYPOINT_RECORDING(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3, --[[Any]] p4) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_FOLLOW_WAYPOINT_RECORDING' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")

	local result = native_call(0x0759591819534F7B, p0, p1, p2, p3, p4)
end
natives.task.task_follow_waypoint_recording = natives.TASK.TASK_FOLLOW_WAYPOINT_RECORDING

function natives.TASK.IS_WAYPOINT_PLAYBACK_GOING_ON_FOR_PED(--[[Any]] p0) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.IS_WAYPOINT_PLAYBACK_GOING_ON_FOR_PED' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xE03B3F2D3DC59B64, p0)
	return result:__tointeger() ~= 0
end
natives.task.is_waypoint_playback_going_on_for_ped = natives.TASK.IS_WAYPOINT_PLAYBACK_GOING_ON_FOR_PED

function natives.TASK.GET_PED_WAYPOINT_PROGRESS(--[[Ped]] ped) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.GET_PED_WAYPOINT_PROGRESS' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x2720AAA75001E094, ped)
	return result:__tointeger()
end
natives.task.get_ped_waypoint_progress = natives.TASK.GET_PED_WAYPOINT_PROGRESS

function natives.TASK.GET_PED_WAYPOINT_DISTANCE(--[[Any]] p0) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.GET_PED_WAYPOINT_DISTANCE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xE6A877C64CAF1BC5, p0)
	return result:__tonumber()
end
natives.task.get_ped_waypoint_distance = natives.TASK.GET_PED_WAYPOINT_DISTANCE

function natives.TASK.SET_PED_WAYPOINT_ROUTE_OFFSET(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.SET_PED_WAYPOINT_ROUTE_OFFSET' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0xED98E10B0AFCE4B4, p0, p1, p2, p3)
	return result:__tointeger()
end
natives.task.set_ped_waypoint_route_offset = natives.TASK.SET_PED_WAYPOINT_ROUTE_OFFSET

function natives.TASK.GET_WAYPOINT_DISTANCE_ALONG_ROUTE(--[[const char*]] p0, --[[int]] p1) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.GET_WAYPOINT_DISTANCE_ALONG_ROUTE' due to disabled trusted mode")

	assert(type(p0) == "string", "Arg #1 (p0) must be a string.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xA5B769058763E497, p0, p1)
	return result:__tonumber()
end
natives.task.get_waypoint_distance_along_route = natives.TASK.GET_WAYPOINT_DISTANCE_ALONG_ROUTE

function natives.TASK.WAYPOINT_PLAYBACK_GET_IS_PAUSED(--[[Any]] p0) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.WAYPOINT_PLAYBACK_GET_IS_PAUSED' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x701375A7D43F01CB, p0)
	return result:__tointeger() ~= 0
end
natives.task.waypoint_playback_get_is_paused = natives.TASK.WAYPOINT_PLAYBACK_GET_IS_PAUSED

function natives.TASK.WAYPOINT_PLAYBACK_PAUSE(--[[Any]] p0, --[[BOOL]] p1, --[[BOOL]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.WAYPOINT_PLAYBACK_PAUSE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")

	local result = native_call(0x0F342546AA06FED5, p0, p1, p2)
end
natives.task.waypoint_playback_pause = natives.TASK.WAYPOINT_PLAYBACK_PAUSE

function natives.TASK.WAYPOINT_PLAYBACK_RESUME(--[[Any]] p0, --[[BOOL]] p1, --[[Any]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.WAYPOINT_PLAYBACK_RESUME' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x244F70C84C547D2D, p0, p1, p2, p3)
end
natives.task.waypoint_playback_resume = natives.TASK.WAYPOINT_PLAYBACK_RESUME

function natives.TASK.WAYPOINT_PLAYBACK_OVERRIDE_SPEED(--[[Any]] p0, --[[float]] p1, --[[BOOL]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.WAYPOINT_PLAYBACK_OVERRIDE_SPEED' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")

	local result = native_call(0x7D7D2B47FA788E85, p0, p1, p2)
end
natives.task.waypoint_playback_override_speed = natives.TASK.WAYPOINT_PLAYBACK_OVERRIDE_SPEED

function natives.TASK.WAYPOINT_PLAYBACK_USE_DEFAULT_SPEED(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.WAYPOINT_PLAYBACK_USE_DEFAULT_SPEED' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x6599D834B12D0800, p0)
end
natives.task.waypoint_playback_use_default_speed = natives.TASK.WAYPOINT_PLAYBACK_USE_DEFAULT_SPEED

function natives.TASK.USE_WAYPOINT_RECORDING_AS_ASSISTED_MOVEMENT_ROUTE(--[[const char*]] name, --[[BOOL]] p1, --[[float]] p2, --[[float]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.USE_WAYPOINT_RECORDING_AS_ASSISTED_MOVEMENT_ROUTE' due to disabled trusted mode")

	assert(type(name) == "string", "Arg #1 (name) must be a string.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x5A353B8E6B1095B5, name, p1, p2, p3)
end
natives.task.use_waypoint_recording_as_assisted_movement_route = natives.TASK.USE_WAYPOINT_RECORDING_AS_ASSISTED_MOVEMENT_ROUTE

function natives.TASK.WAYPOINT_PLAYBACK_START_AIMING_AT_PED(--[[Any]] p0, --[[Any]] p1, --[[BOOL]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.WAYPOINT_PLAYBACK_START_AIMING_AT_PED' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")

	local result = native_call(0x20E330937C399D29, p0, p1, p2)
end
natives.task.waypoint_playback_start_aiming_at_ped = natives.TASK.WAYPOINT_PLAYBACK_START_AIMING_AT_PED

function natives.TASK.WAYPOINT_PLAYBACK_START_AIMING_AT_COORD(--[[Any]] p0, --[[float]] p1, --[[float]] p2, --[[float]] p3, --[[BOOL]] p4) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.WAYPOINT_PLAYBACK_START_AIMING_AT_COORD' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "boolean", "Arg #5 (p4) must be a boolean.")

	local result = native_call(0x8968400D900ED8B3, p0, p1, p2, p3, p4)
end
natives.task.waypoint_playback_start_aiming_at_coord = natives.TASK.WAYPOINT_PLAYBACK_START_AIMING_AT_COORD

function natives.TASK.WAYPOINT_PLAYBACK_START_SHOOTING_AT_PED(--[[Any]] p0, --[[Any]] p1, --[[BOOL]] p2, --[[Any]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.WAYPOINT_PLAYBACK_START_SHOOTING_AT_PED' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0xE70BA7B90F8390DC, p0, p1, p2, p3)
end
natives.task.waypoint_playback_start_shooting_at_ped = natives.TASK.WAYPOINT_PLAYBACK_START_SHOOTING_AT_PED

function natives.TASK.WAYPOINT_PLAYBACK_START_SHOOTING_AT_COORD(--[[Any]] p0, --[[float]] p1, --[[float]] p2, --[[float]] p3, --[[BOOL]] p4, --[[Any]] p5) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.WAYPOINT_PLAYBACK_START_SHOOTING_AT_COORD' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "boolean", "Arg #5 (p4) must be a boolean.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")

	local result = native_call(0x057A25CFCC9DB671, p0, p1, p2, p3, p4, p5)
end
natives.task.waypoint_playback_start_shooting_at_coord = natives.TASK.WAYPOINT_PLAYBACK_START_SHOOTING_AT_COORD

function natives.TASK.WAYPOINT_PLAYBACK_STOP_AIMING_OR_SHOOTING(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.WAYPOINT_PLAYBACK_STOP_AIMING_OR_SHOOTING' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x47EFA040EBB8E2EA, p0)
end
natives.task.waypoint_playback_stop_aiming_or_shooting = natives.TASK.WAYPOINT_PLAYBACK_STOP_AIMING_OR_SHOOTING

--[[
Routes: "1_FIBStairs", "2_FIBStairs", "3_FIBStairs", "4_FIBStairs", "5_FIBStairs", "5_TowardsFire", "6a_FIBStairs", "7_FIBStairs", "8_FIBStairs", "Aprtmnt_1", "AssAfterLift", "ATM_1", "coroner2", "coroner_stairs", "f5_jimmy1", "fame1", "family5b", "family5c", "Family5d", "family5d", "FIB_Glass1", "FIB_Glass2", "FIB_Glass3", "finaBroute1A", "finalb1st", "finalB1sta", "finalbround", "finalbroute2", "Hairdresser1", "jan_foyet_ft_door", "Jo_3", "Lemar1", "Lemar2", "mansion_1", "Mansion_1", "pols_1", "pols_2", "pols_3", "pols_4", "pols_5", "pols_6", "pols_7", "pols_8", "Pro_S1", "Pro_S1a", "Pro_S2", "Towards_case", "trev_steps", "tunrs1", "tunrs2", "tunrs3", "Wave01457s"
]]
function natives.TASK.ASSISTED_MOVEMENT_REQUEST_ROUTE(--[[const char*]] route) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.ASSISTED_MOVEMENT_REQUEST_ROUTE' due to disabled trusted mode")

	assert(type(route) == "string", "Arg #1 (route) must be a string.")

	local result = native_call(0x817268968605947A, route)
end
natives.task.assisted_movement_request_route = natives.TASK.ASSISTED_MOVEMENT_REQUEST_ROUTE

function natives.TASK.ASSISTED_MOVEMENT_REMOVE_ROUTE(--[[const char*]] route) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.ASSISTED_MOVEMENT_REMOVE_ROUTE' due to disabled trusted mode")

	assert(type(route) == "string", "Arg #1 (route) must be a string.")

	local result = native_call(0x3548536485DD792B, route)
end
natives.task.assisted_movement_remove_route = natives.TASK.ASSISTED_MOVEMENT_REMOVE_ROUTE

function natives.TASK.ASSISTED_MOVEMENT_IS_ROUTE_LOADED(--[[const char*]] route) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.ASSISTED_MOVEMENT_IS_ROUTE_LOADED' due to disabled trusted mode")

	assert(type(route) == "string", "Arg #1 (route) must be a string.")

	local result = native_call(0x60F9A4393A21F741, route)
	return result:__tointeger() ~= 0
end
natives.task.assisted_movement_is_route_loaded = natives.TASK.ASSISTED_MOVEMENT_IS_ROUTE_LOADED

function natives.TASK.ASSISTED_MOVEMENT_SET_ROUTE_PROPERTIES(--[[const char*]] route, --[[int]] props) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.ASSISTED_MOVEMENT_SET_ROUTE_PROPERTIES' due to disabled trusted mode")

	assert(type(route) == "string", "Arg #1 (route) must be a string.")
	assert(type(props) == "number", "Arg #2 (props) must be a number.")

	local result = native_call(0xD5002D78B7162E1B, route, props)
end
natives.task.assisted_movement_set_route_properties = natives.TASK.ASSISTED_MOVEMENT_SET_ROUTE_PROPERTIES

function natives.TASK.ASSISTED_MOVEMENT_OVERRIDE_LOAD_DISTANCE_THIS_FRAME(--[[float]] dist) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.ASSISTED_MOVEMENT_OVERRIDE_LOAD_DISTANCE_THIS_FRAME' due to disabled trusted mode")

	assert(type(dist) == "number", "Arg #1 (dist) must be a number.")

	local result = native_call(0x13945951E16EF912, dist)
end
natives.task.assisted_movement_override_load_distance_this_frame = natives.TASK.ASSISTED_MOVEMENT_OVERRIDE_LOAD_DISTANCE_THIS_FRAME

--[[
task_vehicle_follow_waypoint_recording(Ped p0, Vehicle p1, string p2, int p3, int p4, int p5, int p6, float.x p7, float.Y p8, float.Z p9, bool p10, int p11)

p2 = Waypoint recording string (found in update\update.rpf\x64\levels\gta5\waypointrec.rpf
p3 = 786468
p4 = 0
p5 = 16
p6 = -1 (angle?)
p7/8/9 = usually v3.zero
p10 = bool (repeat?)
p11 = 1073741824

-khorio

Full list of waypoint recordings by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/waypointRecordings.json
]]
function natives.TASK.TASK_VEHICLE_FOLLOW_WAYPOINT_RECORDING(--[[Ped]] ped, --[[Vehicle]] vehicle, --[[const char*]] WPRecording, --[[int]] p3, --[[int]] p4, --[[int]] p5, --[[int]] p6, --[[float]] p7, --[[BOOL]] p8, --[[float]] p9) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_VEHICLE_FOLLOW_WAYPOINT_RECORDING' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(vehicle) == "number", "Arg #2 (vehicle) must be a number.")
	assert(type(WPRecording) == "string", "Arg #3 (WPRecording) must be a string.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")
	assert(type(p6) == "number", "Arg #7 (p6) must be a number.")
	assert(type(p7) == "number", "Arg #8 (p7) must be a number.")
	assert(type(p8) == "boolean", "Arg #9 (p8) must be a boolean.")
	assert(type(p9) == "number", "Arg #10 (p9) must be a number.")

	local result = native_call(0x3123FAA6DB1CF7ED, ped, vehicle, WPRecording, p3, p4, p5, p6, p7, p8, p9)
end
natives.task.task_vehicle_follow_waypoint_recording = natives.TASK.TASK_VEHICLE_FOLLOW_WAYPOINT_RECORDING

function natives.TASK.IS_WAYPOINT_PLAYBACK_GOING_ON_FOR_VEHICLE(--[[Vehicle]] vehicle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.IS_WAYPOINT_PLAYBACK_GOING_ON_FOR_VEHICLE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0xF5134943EA29868C, vehicle)
	return result:__tointeger() ~= 0
end
natives.task.is_waypoint_playback_going_on_for_vehicle = natives.TASK.IS_WAYPOINT_PLAYBACK_GOING_ON_FOR_VEHICLE

function natives.TASK.GET_VEHICLE_WAYPOINT_PROGRESS(--[[Vehicle]] vehicle) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.GET_VEHICLE_WAYPOINT_PROGRESS' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x9824CFF8FC66E159, vehicle)
	return result:__tointeger()
end
natives.task.get_vehicle_waypoint_progress = natives.TASK.GET_VEHICLE_WAYPOINT_PROGRESS

function natives.TASK.GET_VEHICLE_WAYPOINT_TARGET_POINT(--[[Vehicle]] vehicle) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.GET_VEHICLE_WAYPOINT_TARGET_POINT' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x416B62AC8B9E5BBD, vehicle)
	return result:__tointeger()
end
natives.task.get_vehicle_waypoint_target_point = natives.TASK.GET_VEHICLE_WAYPOINT_TARGET_POINT

function natives.TASK.VEHICLE_WAYPOINT_PLAYBACK_PAUSE(--[[Vehicle]] vehicle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.VEHICLE_WAYPOINT_PLAYBACK_PAUSE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x8A4E6AC373666BC5, vehicle)
end
natives.task.vehicle_waypoint_playback_pause = natives.TASK.VEHICLE_WAYPOINT_PLAYBACK_PAUSE

function natives.TASK.VEHICLE_WAYPOINT_PLAYBACK_RESUME(--[[Vehicle]] vehicle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.VEHICLE_WAYPOINT_PLAYBACK_RESUME' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0xDC04FCAA7839D492, vehicle)
end
natives.task.vehicle_waypoint_playback_resume = natives.TASK.VEHICLE_WAYPOINT_PLAYBACK_RESUME

function natives.TASK.VEHICLE_WAYPOINT_PLAYBACK_USE_DEFAULT_SPEED(--[[Vehicle]] vehicle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.VEHICLE_WAYPOINT_PLAYBACK_USE_DEFAULT_SPEED' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x5CEB25A7D2848963, vehicle)
end
natives.task.vehicle_waypoint_playback_use_default_speed = natives.TASK.VEHICLE_WAYPOINT_PLAYBACK_USE_DEFAULT_SPEED

function natives.TASK.VEHICLE_WAYPOINT_PLAYBACK_OVERRIDE_SPEED(--[[Vehicle]] vehicle, --[[float]] speed) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.VEHICLE_WAYPOINT_PLAYBACK_OVERRIDE_SPEED' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(speed) == "number", "Arg #2 (speed) must be a number.")

	local result = native_call(0x121F0593E0A431D7, vehicle, speed)
end
natives.task.vehicle_waypoint_playback_override_speed = natives.TASK.VEHICLE_WAYPOINT_PLAYBACK_OVERRIDE_SPEED

--[[
I cant believe I have to define this, this is one of the best natives.

It makes the ped ignore basically all shocking events around it. Occasionally the ped may comment or gesture, but other than that they just continue their daily activities. This includes shooting and wounding the ped. And - most importantly - they do not flee.

Since it is a task, every time the native is called the ped will stop for a moment. 
]]
function natives.TASK.TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS(--[[Ped]] ped, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x90D2156198831D69, ped, toggle)
end
natives.task.task_set_blocking_of_non_temporary_events = natives.TASK.TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS

--[[
p2 always false

[30/03/2017] ins1de :

See FORCE_PED_MOTION_STATE
]]
function natives.TASK.TASK_FORCE_MOTION_STATE(--[[Ped]] ped, --[[Hash]] state, --[[BOOL]] forceRestart) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_FORCE_MOTION_STATE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(state) == "number", "Arg #2 (state) must be a number.")
	assert(type(forceRestart) == "boolean", "Arg #3 (forceRestart) must be a boolean.")

	local result = native_call(0x4F056E1AFFEF17AB, ped, state, forceRestart)
end
natives.task.task_force_motion_state = natives.TASK.TASK_FORCE_MOTION_STATE

--[[
Example:
TASK::TASK_MOVE_NETWORK_BY_NAME(PLAYER::PLAYER_PED_ID(), "arm_wrestling_sweep_paired_a_rev3", 0.0f, true, "mini@arm_wrestling", 0);
]]
function natives.TASK.TASK_MOVE_NETWORK_BY_NAME(--[[Ped]] ped, --[[const char*]] task, --[[float]] multiplier, --[[BOOL]] allowOverrideCloneUpdate, --[[const char*]] animDict, --[[int]] flags) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_MOVE_NETWORK_BY_NAME' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(task) == "string", "Arg #2 (task) must be a string.")
	assert(type(multiplier) == "number", "Arg #3 (multiplier) must be a number.")
	assert(type(allowOverrideCloneUpdate) == "boolean", "Arg #4 (allowOverrideCloneUpdate) must be a boolean.")
	assert(type(animDict) == "string", "Arg #5 (animDict) must be a string.")
	assert(type(flags) == "number", "Arg #6 (flags) must be a number.")

	local result = native_call(0x2D537BA194896636, ped, task, multiplier, allowOverrideCloneUpdate, animDict, flags)
end
natives.task.task_move_network_by_name = natives.TASK.TASK_MOVE_NETWORK_BY_NAME

--[[
Example:
TASK::TASK_MOVE_NETWORK_ADVANCED_BY_NAME(PLAYER::PLAYER_PED_ID(), "minigame_tattoo_michael_parts", 324.13f, 181.29f, 102.6f, 0.0f, 0.0f, 22.32f, 2, 0, false, 0, 0);
]]
function natives.TASK.TASK_MOVE_NETWORK_ADVANCED_BY_NAME(--[[Ped]] ped, --[[const char*]] network, --[[float]] x, --[[float]] y, --[[float]] z, --[[float]] rotX, --[[float]] rotY, --[[float]] rotZ, --[[int]] rotOrder, --[[float]] blendDuration, --[[BOOL]] allowOverrideCloneUpdate, --[[const char*]] animDict, --[[int]] flags) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_MOVE_NETWORK_ADVANCED_BY_NAME' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(network) == "string", "Arg #2 (network) must be a string.")
	assert(type(x) == "number", "Arg #3 (x) must be a number.")
	assert(type(y) == "number", "Arg #4 (y) must be a number.")
	assert(type(z) == "number", "Arg #5 (z) must be a number.")
	assert(type(rotX) == "number", "Arg #6 (rotX) must be a number.")
	assert(type(rotY) == "number", "Arg #7 (rotY) must be a number.")
	assert(type(rotZ) == "number", "Arg #8 (rotZ) must be a number.")
	assert(type(rotOrder) == "number", "Arg #9 (rotOrder) must be a number.")
	assert(type(blendDuration) == "number", "Arg #10 (blendDuration) must be a number.")
	assert(type(allowOverrideCloneUpdate) == "boolean", "Arg #11 (allowOverrideCloneUpdate) must be a boolean.")
	assert(type(animDict) == "string", "Arg #12 (animDict) must be a string.")
	assert(type(flags) == "number", "Arg #13 (flags) must be a number.")

	local result = native_call(0xD5B35BEA41919ACB, ped, network, x, y, z, rotX, rotY, rotZ, rotOrder, blendDuration, allowOverrideCloneUpdate, animDict, flags)
end
natives.task.task_move_network_advanced_by_name = natives.TASK.TASK_MOVE_NETWORK_ADVANCED_BY_NAME

--[[
Used only once in the scripts (am_mp_nightclub)
]]
function natives.TASK.TASK_MOVE_NETWORK_BY_NAME_WITH_INIT_PARAMS(--[[Ped]] ped, --[[const char*]] network, --[[int*]] initialParameters, --[[float]] blendDuration, --[[BOOL]] allowOverrideCloneUpdate, --[[const char*]] animDict, --[[int]] flags) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_MOVE_NETWORK_BY_NAME_WITH_INIT_PARAMS' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(network) == "string", "Arg #2 (network) must be a string.")
	assert(type(initialParameters) == "userdata", "Arg #3 (initialParameters) must be a userdata.")
	assert(type(blendDuration) == "number", "Arg #4 (blendDuration) must be a number.")
	assert(type(allowOverrideCloneUpdate) == "boolean", "Arg #5 (allowOverrideCloneUpdate) must be a boolean.")
	assert(type(animDict) == "string", "Arg #6 (animDict) must be a string.")
	assert(type(flags) == "number", "Arg #7 (flags) must be a number.")

	local result = native_call(0x3D45B0B355C5E0C9, ped, network, initialParameters, blendDuration, allowOverrideCloneUpdate, animDict, flags)
end
natives.task.task_move_network_by_name_with_init_params = natives.TASK.TASK_MOVE_NETWORK_BY_NAME_WITH_INIT_PARAMS

function natives.TASK.TASK_MOVE_NETWORK_ADVANCED_BY_NAME_WITH_INIT_PARAMS(--[[Ped]] ped, --[[const char*]] network, --[[int*]] initialParameters, --[[float]] x, --[[float]] y, --[[float]] z, --[[float]] rotX, --[[float]] rotY, --[[float]] rotZ, --[[int]] rotOrder, --[[float]] blendDuration, --[[BOOL]] allowOverrideCloneUpdate, --[[const char*]] dictionary, --[[int]] flags) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_MOVE_NETWORK_ADVANCED_BY_NAME_WITH_INIT_PARAMS' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(network) == "string", "Arg #2 (network) must be a string.")
	assert(type(initialParameters) == "userdata", "Arg #3 (initialParameters) must be a userdata.")
	assert(type(x) == "number", "Arg #4 (x) must be a number.")
	assert(type(y) == "number", "Arg #5 (y) must be a number.")
	assert(type(z) == "number", "Arg #6 (z) must be a number.")
	assert(type(rotX) == "number", "Arg #7 (rotX) must be a number.")
	assert(type(rotY) == "number", "Arg #8 (rotY) must be a number.")
	assert(type(rotZ) == "number", "Arg #9 (rotZ) must be a number.")
	assert(type(rotOrder) == "number", "Arg #10 (rotOrder) must be a number.")
	assert(type(blendDuration) == "number", "Arg #11 (blendDuration) must be a number.")
	assert(type(allowOverrideCloneUpdate) == "boolean", "Arg #12 (allowOverrideCloneUpdate) must be a boolean.")
	assert(type(dictionary) == "string", "Arg #13 (dictionary) must be a string.")
	assert(type(flags) == "number", "Arg #14 (flags) must be a number.")

	local result = native_call(0x29682E2CCF21E9B5, ped, network, initialParameters, x, y, z, rotX, rotY, rotZ, rotOrder, blendDuration, allowOverrideCloneUpdate, dictionary, flags)
end
natives.task.task_move_network_advanced_by_name_with_init_params = natives.TASK.TASK_MOVE_NETWORK_ADVANCED_BY_NAME_WITH_INIT_PARAMS

function natives.TASK.IS_TASK_MOVE_NETWORK_ACTIVE(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.IS_TASK_MOVE_NETWORK_ACTIVE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x921CE12C489C4C41, ped)
	return result:__tointeger() ~= 0
end
natives.task.is_task_move_network_active = natives.TASK.IS_TASK_MOVE_NETWORK_ACTIVE

function natives.TASK.IS_TASK_MOVE_NETWORK_READY_FOR_TRANSITION(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.IS_TASK_MOVE_NETWORK_READY_FOR_TRANSITION' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x30ED88D5E0C56A37, ped)
	return result:__tointeger() ~= 0
end
natives.task.is_task_move_network_ready_for_transition = natives.TASK.IS_TASK_MOVE_NETWORK_READY_FOR_TRANSITION

function natives.TASK.REQUEST_TASK_MOVE_NETWORK_STATE_TRANSITION(--[[Ped]] ped, --[[const char*]] name) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.REQUEST_TASK_MOVE_NETWORK_STATE_TRANSITION' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(name) == "string", "Arg #2 (name) must be a string.")

	local result = native_call(0xD01015C7316AE176, ped, name)
	return result:__tointeger() ~= 0
end
natives.task.request_task_move_network_state_transition = natives.TASK.REQUEST_TASK_MOVE_NETWORK_STATE_TRANSITION

--[[
Used only once in the scripts (fm_mission_controller) like so:

TASK::_0xAB13A5565480B6D9(iLocal_3160, "Cutting");
]]
function natives.TASK.SET_EXPECTED_CLONE_NEXT_TASK_MOVE_NETWORK_STATE(--[[Ped]] ped, --[[const char*]] state) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.SET_EXPECTED_CLONE_NEXT_TASK_MOVE_NETWORK_STATE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(state) == "string", "Arg #2 (state) must be a string.")

	local result = native_call(0xAB13A5565480B6D9, ped, state)
	return result:__tointeger()
end
natives.task.set_expected_clone_next_task_move_network_state = natives.TASK.SET_EXPECTED_CLONE_NEXT_TASK_MOVE_NETWORK_STATE

function natives.TASK.GET_TASK_MOVE_NETWORK_STATE(--[[Ped]] ped) -- Returns const char*
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.GET_TASK_MOVE_NETWORK_STATE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x717E4D1F2048376D, ped)
	return result:__tostring(true)
end
natives.task.get_task_move_network_state = natives.TASK.GET_TASK_MOVE_NETWORK_STATE

function natives.TASK.SET_TASK_MOVE_NETWORK_ANIM_SET(--[[Ped]] ped, --[[Hash]] clipSet, --[[Hash]] variableClipSet) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.SET_TASK_MOVE_NETWORK_ANIM_SET' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(clipSet) == "number", "Arg #2 (clipSet) must be a number.")
	assert(type(variableClipSet) == "number", "Arg #3 (variableClipSet) must be a number.")

	local result = native_call(0x8423541E8B3A1589, ped, clipSet, variableClipSet)
end
natives.task.set_task_move_network_anim_set = natives.TASK.SET_TASK_MOVE_NETWORK_ANIM_SET

--[[
p0 - PLAYER::PLAYER_PED_ID();
p1 - "Phase", "Wobble", "x_axis","y_axis","introphase","speed".
p2 - From what i can see it goes up to 1f (maybe).

-LcGamingHD

Example: TASK::_D5BB4025AE449A4E(PLAYER::PLAYER_PED_ID(), "Phase", 0.5);
]]
function natives.TASK.SET_TASK_MOVE_NETWORK_SIGNAL_FLOAT(--[[Ped]] ped, --[[const char*]] signalName, --[[float]] value) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.SET_TASK_MOVE_NETWORK_SIGNAL_FLOAT' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(signalName) == "string", "Arg #2 (signalName) must be a string.")
	assert(type(value) == "number", "Arg #3 (value) must be a number.")

	local result = native_call(0xD5BB4025AE449A4E, ped, signalName, value)
end
natives.task.set_task_move_network_signal_float = natives.TASK.SET_TASK_MOVE_NETWORK_SIGNAL_FLOAT

function natives.TASK.SET_TASK_MOVE_NETWORK_SIGNAL_LOCAL_FLOAT(--[[Ped]] ped, --[[const char*]] signalName, --[[float]] value) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.SET_TASK_MOVE_NETWORK_SIGNAL_LOCAL_FLOAT' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(signalName) == "string", "Arg #2 (signalName) must be a string.")
	assert(type(value) == "number", "Arg #3 (value) must be a number.")

	local result = native_call(0x373EF409B82697A3, ped, signalName, value)
end
natives.task.set_task_move_network_signal_local_float = natives.TASK.SET_TASK_MOVE_NETWORK_SIGNAL_LOCAL_FLOAT

function natives.TASK.SET_TASK_MOVE_NETWORK_SIGNAL_FLOAT_LERP_RATE(--[[Ped]] ped, --[[const char*]] signalName, --[[float]] value) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.SET_TASK_MOVE_NETWORK_SIGNAL_FLOAT_LERP_RATE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(signalName) == "string", "Arg #2 (signalName) must be a string.")
	assert(type(value) == "number", "Arg #3 (value) must be a number.")

	local result = native_call(0x8634CEF2522D987B, ped, signalName, value)
end
natives.task.set_task_move_network_signal_float_lerp_rate = natives.TASK.SET_TASK_MOVE_NETWORK_SIGNAL_FLOAT_LERP_RATE

function natives.TASK.SET_TASK_MOVE_NETWORK_SIGNAL_BOOL(--[[Ped]] ped, --[[const char*]] signalName, --[[BOOL]] value) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.SET_TASK_MOVE_NETWORK_SIGNAL_BOOL' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(signalName) == "string", "Arg #2 (signalName) must be a string.")
	assert(type(value) == "boolean", "Arg #3 (value) must be a boolean.")

	local result = native_call(0xB0A6CFD2C69C1088, ped, signalName, value)
end
natives.task.set_task_move_network_signal_bool = natives.TASK.SET_TASK_MOVE_NETWORK_SIGNAL_BOOL

function natives.TASK.GET_TASK_MOVE_NETWORK_SIGNAL_FLOAT(--[[Ped]] ped, --[[const char*]] signalName) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.GET_TASK_MOVE_NETWORK_SIGNAL_FLOAT' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(signalName) == "string", "Arg #2 (signalName) must be a string.")

	local result = native_call(0x44AB0B3AFECCE242, ped, signalName)
	return result:__tonumber()
end
natives.task.get_task_move_network_signal_float = natives.TASK.GET_TASK_MOVE_NETWORK_SIGNAL_FLOAT

function natives.TASK.GET_TASK_MOVE_NETWORK_SIGNAL_BOOL(--[[Ped]] ped, --[[const char*]] signalName) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.GET_TASK_MOVE_NETWORK_SIGNAL_BOOL' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(signalName) == "string", "Arg #2 (signalName) must be a string.")

	local result = native_call(0xA7FFBA498E4AAF67, ped, signalName)
	return result:__tointeger() ~= 0
end
natives.task.get_task_move_network_signal_bool = natives.TASK.GET_TASK_MOVE_NETWORK_SIGNAL_BOOL

function natives.TASK.GET_TASK_MOVE_NETWORK_EVENT(--[[Ped]] ped, --[[const char*]] eventName) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.GET_TASK_MOVE_NETWORK_EVENT' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(eventName) == "string", "Arg #2 (eventName) must be a string.")

	local result = native_call(0xB4F47213DF45A64C, ped, eventName)
	return result:__tointeger() ~= 0
end
natives.task.get_task_move_network_event = natives.TASK.GET_TASK_MOVE_NETWORK_EVENT

--[[
Doesn't actually return anything.
]]
function natives.TASK.SET_TASK_MOVE_NETWORK_ENABLE_COLLISION_ON_NETWORK_CLONE_WHEN_FIXED(--[[Ped]] ped, --[[BOOL]] enable) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.SET_TASK_MOVE_NETWORK_ENABLE_COLLISION_ON_NETWORK_CLONE_WHEN_FIXED' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(enable) == "boolean", "Arg #2 (enable) must be a boolean.")

	local result = native_call(0x0FFB3C758E8C07B9, ped, enable)
	return result:__tointeger()
end
natives.task.set_task_move_network_enable_collision_on_network_clone_when_fixed = natives.TASK.SET_TASK_MOVE_NETWORK_ENABLE_COLLISION_ON_NETWORK_CLONE_WHEN_FIXED

function natives.TASK.IS_MOVE_BLEND_RATIO_STILL(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.IS_MOVE_BLEND_RATIO_STILL' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x349CE7B56DAFD95C, ped)
	return result:__tointeger() ~= 0
end
natives.task.is_move_blend_ratio_still = natives.TASK.IS_MOVE_BLEND_RATIO_STILL

function natives.TASK.IS_MOVE_BLEND_RATIO_WALKING(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.IS_MOVE_BLEND_RATIO_WALKING' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0xF133BBBE91E1691F, ped)
	return result:__tointeger() ~= 0
end
natives.task.is_move_blend_ratio_walking = natives.TASK.IS_MOVE_BLEND_RATIO_WALKING

function natives.TASK.IS_MOVE_BLEND_RATIO_RUNNING(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.IS_MOVE_BLEND_RATIO_RUNNING' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0xD4D8636C0199A939, ped)
	return result:__tointeger() ~= 0
end
natives.task.is_move_blend_ratio_running = natives.TASK.IS_MOVE_BLEND_RATIO_RUNNING

function natives.TASK.IS_MOVE_BLEND_RATIO_SPRINTING(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.IS_MOVE_BLEND_RATIO_SPRINTING' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x24A2AD74FA9814E2, ped)
	return result:__tointeger() ~= 0
end
natives.task.is_move_blend_ratio_sprinting = natives.TASK.IS_MOVE_BLEND_RATIO_SPRINTING

function natives.TASK.IS_PED_STILL(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.IS_PED_STILL' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0xAC29253EEF8F0180, ped)
	return result:__tointeger() ~= 0
end
natives.task.is_ped_still = natives.TASK.IS_PED_STILL

function natives.TASK.IS_PED_WALKING(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.IS_PED_WALKING' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0xDE4C184B2B9B071A, ped)
	return result:__tointeger() ~= 0
end
natives.task.is_ped_walking = natives.TASK.IS_PED_WALKING

function natives.TASK.IS_PED_RUNNING(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.IS_PED_RUNNING' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0xC5286FFC176F28A2, ped)
	return result:__tointeger() ~= 0
end
natives.task.is_ped_running = natives.TASK.IS_PED_RUNNING

function natives.TASK.IS_PED_SPRINTING(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.IS_PED_SPRINTING' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x57E457CD2C0FC168, ped)
	return result:__tointeger() ~= 0
end
natives.task.is_ped_sprinting = natives.TASK.IS_PED_SPRINTING

--[[
What's strafing?
]]
function natives.TASK.IS_PED_STRAFING(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.IS_PED_STRAFING' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0xE45B7F222DE47E09, ped)
	return result:__tointeger() ~= 0
end
natives.task.is_ped_strafing = natives.TASK.IS_PED_STRAFING

--[[
 TASK::TASK_SYNCHRONIZED_SCENE(ped, scene, "creatures@rottweiler@in_vehicle@std_car", "get_in", 1000.0, -8.0, 4, 0, 0x447a0000, 0);

Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
]]
function natives.TASK.TASK_SYNCHRONIZED_SCENE(--[[Ped]] ped, --[[int]] scene, --[[const char*]] animDictionary, --[[const char*]] animationName, --[[float]] blendIn, --[[float]] blendOut, --[[int]] flags, --[[int]] ragdollBlockingFlags, --[[float]] moverBlendDelta, --[[int]] ikFlags) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_SYNCHRONIZED_SCENE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(scene) == "number", "Arg #2 (scene) must be a number.")
	assert(type(animDictionary) == "string", "Arg #3 (animDictionary) must be a string.")
	assert(type(animationName) == "string", "Arg #4 (animationName) must be a string.")
	assert(type(blendIn) == "number", "Arg #5 (blendIn) must be a number.")
	assert(type(blendOut) == "number", "Arg #6 (blendOut) must be a number.")
	assert(type(flags) == "number", "Arg #7 (flags) must be a number.")
	assert(type(ragdollBlockingFlags) == "number", "Arg #8 (ragdollBlockingFlags) must be a number.")
	assert(type(moverBlendDelta) == "number", "Arg #9 (moverBlendDelta) must be a number.")
	assert(type(ikFlags) == "number", "Arg #10 (ikFlags) must be a number.")

	local result = native_call(0xEEA929141F699854, ped, scene, animDictionary, animationName, blendIn, blendOut, flags, ragdollBlockingFlags, moverBlendDelta, ikFlags)
end
natives.task.task_synchronized_scene = natives.TASK.TASK_SYNCHRONIZED_SCENE

function natives.TASK.TASK_AGITATED_ACTION_CONFRONT_RESPONSE(--[[Ped]] ped, --[[Ped]] ped2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_AGITATED_ACTION_CONFRONT_RESPONSE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(ped2) == "number", "Arg #2 (ped2) must be a number.")

	local result = native_call(0x19D1B791CB3670FE, ped, ped2)
end
natives.task.task_agitated_action_confront_response = natives.TASK.TASK_AGITATED_ACTION_CONFRONT_RESPONSE

--[[
This function is called on peds in vehicles.

anim: animation name
p2, p3, p4: "sweep_low", "sweep_med" or "sweep_high"
p5: no idea what it does but is usually -1
]]
function natives.TASK.TASK_SWEEP_AIM_ENTITY(--[[Ped]] ped, --[[const char*]] animDict, --[[const char*]] lowAnimName, --[[const char*]] medAnimName, --[[const char*]] hiAnimName, --[[int]] runtime, --[[Entity]] targetEntity, --[[float]] turnRate, --[[float]] blendInDuration) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_SWEEP_AIM_ENTITY' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(animDict) == "string", "Arg #2 (animDict) must be a string.")
	assert(type(lowAnimName) == "string", "Arg #3 (lowAnimName) must be a string.")
	assert(type(medAnimName) == "string", "Arg #4 (medAnimName) must be a string.")
	assert(type(hiAnimName) == "string", "Arg #5 (hiAnimName) must be a string.")
	assert(type(runtime) == "number", "Arg #6 (runtime) must be a number.")
	assert(type(targetEntity) == "number", "Arg #7 (targetEntity) must be a number.")
	assert(type(turnRate) == "number", "Arg #8 (turnRate) must be a number.")
	assert(type(blendInDuration) == "number", "Arg #9 (blendInDuration) must be a number.")

	local result = native_call(0x2047C02158D6405A, ped, animDict, lowAnimName, medAnimName, hiAnimName, runtime, targetEntity, turnRate, blendInDuration)
end
natives.task.task_sweep_aim_entity = natives.TASK.TASK_SWEEP_AIM_ENTITY

function natives.TASK.UPDATE_TASK_SWEEP_AIM_ENTITY(--[[Ped]] ped, --[[Entity]] entity) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.UPDATE_TASK_SWEEP_AIM_ENTITY' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(entity) == "number", "Arg #2 (entity) must be a number.")

	local result = native_call(0xE4973DBDBE6E44B3, ped, entity)
end
natives.task.update_task_sweep_aim_entity = natives.TASK.UPDATE_TASK_SWEEP_AIM_ENTITY

function natives.TASK.TASK_SWEEP_AIM_POSITION(--[[Ped]] ped, --[[const char*]] animDict, --[[const char*]] lowAnimName, --[[const char*]] medAnimName, --[[const char*]] hiAnimName, --[[int]] runtime, --[[float]] x, --[[float]] y, --[[float]] z, --[[float]] turnRate, --[[float]] blendInDuration) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_SWEEP_AIM_POSITION' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(animDict) == "string", "Arg #2 (animDict) must be a string.")
	assert(type(lowAnimName) == "string", "Arg #3 (lowAnimName) must be a string.")
	assert(type(medAnimName) == "string", "Arg #4 (medAnimName) must be a string.")
	assert(type(hiAnimName) == "string", "Arg #5 (hiAnimName) must be a string.")
	assert(type(runtime) == "number", "Arg #6 (runtime) must be a number.")
	assert(type(x) == "number", "Arg #7 (x) must be a number.")
	assert(type(y) == "number", "Arg #8 (y) must be a number.")
	assert(type(z) == "number", "Arg #9 (z) must be a number.")
	assert(type(turnRate) == "number", "Arg #10 (turnRate) must be a number.")
	assert(type(blendInDuration) == "number", "Arg #11 (blendInDuration) must be a number.")

	local result = native_call(0x7AFE8FDC10BC07D2, ped, animDict, lowAnimName, medAnimName, hiAnimName, runtime, x, y, z, turnRate, blendInDuration)
end
natives.task.task_sweep_aim_position = natives.TASK.TASK_SWEEP_AIM_POSITION

function natives.TASK.UPDATE_TASK_SWEEP_AIM_POSITION(--[[Ped]] ped, --[[float]] x, --[[float]] y, --[[float]] z) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.UPDATE_TASK_SWEEP_AIM_POSITION' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")

	local result = native_call(0xBB106883F5201FC4, ped, x, y, z)
end
natives.task.update_task_sweep_aim_position = natives.TASK.UPDATE_TASK_SWEEP_AIM_POSITION

--[[
Example from "me_amanda1.ysc.c4":
TASK::TASK_ARREST_PED(l_19F /* This is a Ped */ , PLAYER::PLAYER_PED_ID());

Example from "armenian1.ysc.c4":
if (!PED::IS_PED_INJURED(l_B18[0/*1*/])) {
    TASK::TASK_ARREST_PED(l_B18[0/*1*/], PLAYER::PLAYER_PED_ID());
}

I would love to have time to experiment to see if a player Ped can arrest another Ped. Might make for a good cop mod.


Looks like only the player can be arrested this way. Peds react and try to arrest you if you task them, but the player charater doesn't do anything if tasked to arrest another ped.
]]
function natives.TASK.TASK_ARREST_PED(--[[Ped]] ped, --[[Ped]] target) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.TASK_ARREST_PED' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(target) == "number", "Arg #2 (target) must be a number.")

	local result = native_call(0xF3B9A78A178572B1, ped, target)
end
natives.task.task_arrest_ped = natives.TASK.TASK_ARREST_PED

function natives.TASK.IS_PED_RUNNING_ARREST_TASK(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.IS_PED_RUNNING_ARREST_TASK' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x3DC52677769B4AE0, ped)
	return result:__tointeger() ~= 0
end
natives.task.is_ped_running_arrest_task = natives.TASK.IS_PED_RUNNING_ARREST_TASK

--[[
This function is hard-coded to always return 0.
]]
function natives.TASK.IS_PED_BEING_ARRESTED(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.IS_PED_BEING_ARRESTED' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x90A09F3A45FED688, ped)
	return result:__tointeger() ~= 0
end
natives.task.is_ped_being_arrested = natives.TASK.IS_PED_BEING_ARRESTED

function natives.TASK.UNCUFF_PED(--[[Ped]] ped) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.UNCUFF_PED' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x67406F2C8F87FC4F, ped)
end
natives.task.uncuff_ped = natives.TASK.UNCUFF_PED

function natives.TASK.IS_PED_CUFFED(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'TASK.IS_PED_CUFFED' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x74E559B3BC910685, ped)
	return result:__tointeger() ~= 0
end
natives.task.is_ped_cuffed = natives.TASK.IS_PED_CUFFED


natives.VEHICLE = {}
natives.vehicle = {}

--[[
p7 when set to true allows you to spawn vehicles under -100 z.
Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
]]
function natives.VEHICLE.CREATE_VEHICLE(--[[Hash]] modelHash, --[[float]] x, --[[float]] y, --[[float]] z, --[[float]] heading, --[[BOOL]] isNetwork, --[[BOOL]] bScriptHostVeh, --[[BOOL]] p7) -- Returns Vehicle
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.CREATE_VEHICLE' due to disabled trusted mode")

	assert(type(modelHash) == "number", "Arg #1 (modelHash) must be a number.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")
	assert(type(heading) == "number", "Arg #5 (heading) must be a number.")
	assert(type(isNetwork) == "boolean", "Arg #6 (isNetwork) must be a boolean.")
	assert(type(bScriptHostVeh) == "boolean", "Arg #7 (bScriptHostVeh) must be a boolean.")
	assert(type(p7) == "boolean", "Arg #8 (p7) must be a boolean.")

	local result = native_call(0xAF35D0D2583051B0, modelHash, x, y, z, heading, isNetwork, bScriptHostVeh, p7)
	return result:__tointeger()
end
natives.vehicle.create_vehicle = natives.VEHICLE.CREATE_VEHICLE

--[[
Deletes a vehicle.
The vehicle must be a mission entity to delete, so call this before deleting: SET_ENTITY_AS_MISSION_ENTITY(vehicle, true, true);

eg how to use:
SET_ENTITY_AS_MISSION_ENTITY(vehicle, true, true);
DELETE_VEHICLE(&vehicle);

Deletes the specified vehicle, then sets the handle pointed to by the pointer to NULL.
]]
function natives.VEHICLE.DELETE_VEHICLE(--[[Vehicle*]] vehicle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.DELETE_VEHICLE' due to disabled trusted mode")

	assert(type(vehicle) == "userdata", "Arg #1 (vehicle) must be a userdata.")

	local result = native_call(0xEA386986E786A54F, vehicle)
end
natives.vehicle.delete_vehicle = natives.VEHICLE.DELETE_VEHICLE

function natives.VEHICLE.SET_VEHICLE_ALLOW_HOMING_MISSLE_LOCKON(--[[Vehicle]] vehicle, --[[BOOL]] toggle, --[[BOOL]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_ALLOW_HOMING_MISSLE_LOCKON' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")

	local result = native_call(0x7D6F9A3EF26136A0, vehicle, toggle, p2)
end
natives.vehicle.set_vehicle_allow_homing_missle_lockon = natives.VEHICLE.SET_VEHICLE_ALLOW_HOMING_MISSLE_LOCKON

function natives.VEHICLE.SET_VEHICLE_ALLOW_HOMING_MISSLE_LOCKON_SYNCED(--[[Vehicle]] vehicle, --[[BOOL]] canBeLockedOn, --[[BOOL]] unk) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_ALLOW_HOMING_MISSLE_LOCKON_SYNCED' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(canBeLockedOn) == "boolean", "Arg #2 (canBeLockedOn) must be a boolean.")
	assert(type(unk) == "boolean", "Arg #3 (unk) must be a boolean.")

	local result = native_call(0x1DDA078D12879EEE, vehicle, canBeLockedOn, unk)
end
natives.vehicle.set_vehicle_allow_homing_missle_lockon_synced = natives.VEHICLE.SET_VEHICLE_ALLOW_HOMING_MISSLE_LOCKON_SYNCED

--[[
Makes the vehicle accept no passengers.
]]
function natives.VEHICLE.SET_VEHICLE_ALLOW_NO_PASSENGERS_LOCKON(--[[Vehicle]] veh, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_ALLOW_NO_PASSENGERS_LOCKON' due to disabled trusted mode")

	assert(type(veh) == "number", "Arg #1 (veh) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x5D14D4154BFE7B2C, veh, toggle)
end
natives.vehicle.set_vehicle_allow_no_passengers_lockon = natives.VEHICLE.SET_VEHICLE_ALLOW_NO_PASSENGERS_LOCKON

--[[
Returns a value depending on the lock-on state of vehicle weapons.
0: not locked on
1: locking on
2: locked on
]]
function natives.VEHICLE.GET_VEHICLE_HOMING_LOCKON_STATE(--[[Vehicle]] vehicle) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_VEHICLE_HOMING_LOCKON_STATE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0xE6B0E8CFC3633BF0, vehicle)
	return result:__tointeger()
end
natives.vehicle.get_vehicle_homing_lockon_state = natives.VEHICLE.GET_VEHICLE_HOMING_LOCKON_STATE

function natives.VEHICLE.GET_VEHICLE_HOMING_LOCKEDONTO_STATE(--[[Any]] p0) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_VEHICLE_HOMING_LOCKEDONTO_STATE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x6EAAEFC76ACC311F, p0)
	return result:__tointeger()
end
natives.vehicle.get_vehicle_homing_lockedonto_state = natives.VEHICLE.GET_VEHICLE_HOMING_LOCKEDONTO_STATE

function natives.VEHICLE.SET_VEHICLE_HOMING_LOCKEDONTO_STATE(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_HOMING_LOCKEDONTO_STATE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x407DC5E97DB1A4D3, p0, p1)
end
natives.vehicle.set_vehicle_homing_lockedonto_state = natives.VEHICLE.SET_VEHICLE_HOMING_LOCKEDONTO_STATE

function natives.VEHICLE.IS_VEHICLE_MODEL(--[[Vehicle]] vehicle, --[[Hash]] model) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.IS_VEHICLE_MODEL' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(model) == "number", "Arg #2 (model) must be a number.")

	local result = native_call(0x423E8DE37D934D89, vehicle, model)
	return result:__tointeger() ~= 0
end
natives.vehicle.is_vehicle_model = natives.VEHICLE.IS_VEHICLE_MODEL

function natives.VEHICLE.DOES_SCRIPT_VEHICLE_GENERATOR_EXIST(--[[int]] vehicleGenerator) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.DOES_SCRIPT_VEHICLE_GENERATOR_EXIST' due to disabled trusted mode")

	assert(type(vehicleGenerator) == "number", "Arg #1 (vehicleGenerator) must be a number.")

	local result = native_call(0xF6086BC836400876, vehicleGenerator)
	return result:__tointeger() ~= 0
end
natives.vehicle.does_script_vehicle_generator_exist = natives.VEHICLE.DOES_SCRIPT_VEHICLE_GENERATOR_EXIST

--[[
Creates a script vehicle generator at the given coordinates. Most parameters after the model hash are unknown.

Parameters:
x/y/z - Generator position
heading - Generator heading
p4 - Unknown (always 5.0)
p5 - Unknown (always 3.0)
modelHash - Vehicle model hash
p7/8/9/10 - Unknown (always -1)
p11 - Unknown (usually TRUE, only one instance of FALSE)
p12/13 - Unknown (always FALSE)
p14 - Unknown (usally FALSE, only two instances of TRUE)
p15 - Unknown (always TRUE)
p16 - Unknown (always -1)

Vector3 coords = GET_ENTITY_COORDS(PLAYER_PED_ID(), 0);    CREATE_SCRIPT_VEHICLE_GENERATOR(coords.x, coords.y, coords.z, 1.0f, 5.0f, 3.0f, GET_HASH_KEY("adder"), -1. -1, -1, -1, -1, true, false, false, false, true, -1);
]]
function natives.VEHICLE.CREATE_SCRIPT_VEHICLE_GENERATOR(--[[float]] x, --[[float]] y, --[[float]] z, --[[float]] heading, --[[float]] p4, --[[float]] p5, --[[Hash]] modelHash, --[[int]] p7, --[[int]] p8, --[[int]] p9, --[[int]] p10, --[[BOOL]] p11, --[[BOOL]] p12, --[[BOOL]] p13, --[[BOOL]] p14, --[[BOOL]] p15, --[[int]] p16) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.CREATE_SCRIPT_VEHICLE_GENERATOR' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(heading) == "number", "Arg #4 (heading) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")
	assert(type(modelHash) == "number", "Arg #7 (modelHash) must be a number.")
	assert(type(p7) == "number", "Arg #8 (p7) must be a number.")
	assert(type(p8) == "number", "Arg #9 (p8) must be a number.")
	assert(type(p9) == "number", "Arg #10 (p9) must be a number.")
	assert(type(p10) == "number", "Arg #11 (p10) must be a number.")
	assert(type(p11) == "boolean", "Arg #12 (p11) must be a boolean.")
	assert(type(p12) == "boolean", "Arg #13 (p12) must be a boolean.")
	assert(type(p13) == "boolean", "Arg #14 (p13) must be a boolean.")
	assert(type(p14) == "boolean", "Arg #15 (p14) must be a boolean.")
	assert(type(p15) == "boolean", "Arg #16 (p15) must be a boolean.")
	assert(type(p16) == "number", "Arg #17 (p16) must be a number.")

	local result = native_call(0x9DEF883114668116, x, y, z, heading, p4, p5, modelHash, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16)
	return result:__tointeger()
end
natives.vehicle.create_script_vehicle_generator = natives.VEHICLE.CREATE_SCRIPT_VEHICLE_GENERATOR

function natives.VEHICLE.DELETE_SCRIPT_VEHICLE_GENERATOR(--[[int]] vehicleGenerator) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.DELETE_SCRIPT_VEHICLE_GENERATOR' due to disabled trusted mode")

	assert(type(vehicleGenerator) == "number", "Arg #1 (vehicleGenerator) must be a number.")

	local result = native_call(0x22102C9ABFCF125D, vehicleGenerator)
end
natives.vehicle.delete_script_vehicle_generator = natives.VEHICLE.DELETE_SCRIPT_VEHICLE_GENERATOR

--[[
Only called once in the decompiled scripts. Presumably activates the specified generator.
]]
function natives.VEHICLE.SET_SCRIPT_VEHICLE_GENERATOR(--[[int]] vehicleGenerator, --[[BOOL]] enabled) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_SCRIPT_VEHICLE_GENERATOR' due to disabled trusted mode")

	assert(type(vehicleGenerator) == "number", "Arg #1 (vehicleGenerator) must be a number.")
	assert(type(enabled) == "boolean", "Arg #2 (enabled) must be a boolean.")

	local result = native_call(0xD9D620E0AC6DC4B0, vehicleGenerator, enabled)
end
natives.vehicle.set_script_vehicle_generator = natives.VEHICLE.SET_SCRIPT_VEHICLE_GENERATOR

--[[
When p6 is true, vehicle generators are active.
p7 seems to always be true in story mode scripts, but it's sometimes false in online scripts.
]]
function natives.VEHICLE.SET_ALL_VEHICLE_GENERATORS_ACTIVE_IN_AREA(--[[float]] x1, --[[float]] y1, --[[float]] z1, --[[float]] x2, --[[float]] y2, --[[float]] z2, --[[BOOL]] toggle, --[[BOOL]] p7) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_ALL_VEHICLE_GENERATORS_ACTIVE_IN_AREA' due to disabled trusted mode")

	assert(type(x1) == "number", "Arg #1 (x1) must be a number.")
	assert(type(y1) == "number", "Arg #2 (y1) must be a number.")
	assert(type(z1) == "number", "Arg #3 (z1) must be a number.")
	assert(type(x2) == "number", "Arg #4 (x2) must be a number.")
	assert(type(y2) == "number", "Arg #5 (y2) must be a number.")
	assert(type(z2) == "number", "Arg #6 (z2) must be a number.")
	assert(type(toggle) == "boolean", "Arg #7 (toggle) must be a boolean.")
	assert(type(p7) == "boolean", "Arg #8 (p7) must be a boolean.")

	local result = native_call(0xC12321827687FE4D, x1, y1, z1, x2, y2, z2, toggle, p7)
end
natives.vehicle.set_all_vehicle_generators_active_in_area = natives.VEHICLE.SET_ALL_VEHICLE_GENERATORS_ACTIVE_IN_AREA

function natives.VEHICLE.SET_ALL_VEHICLE_GENERATORS_ACTIVE() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_ALL_VEHICLE_GENERATORS_ACTIVE' due to disabled trusted mode")

	local result = native_call(0x34AD89078831A4BC)
end
natives.vehicle.set_all_vehicle_generators_active = natives.VEHICLE.SET_ALL_VEHICLE_GENERATORS_ACTIVE

function natives.VEHICLE.SET_ALL_LOW_PRIORITY_VEHICLE_GENERATORS_ACTIVE(--[[BOOL]] active) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_ALL_LOW_PRIORITY_VEHICLE_GENERATORS_ACTIVE' due to disabled trusted mode")

	assert(type(active) == "boolean", "Arg #1 (active) must be a boolean.")

	local result = native_call(0x608207E7A8FB787C, active)
end
natives.vehicle.set_all_low_priority_vehicle_generators_active = natives.VEHICLE.SET_ALL_LOW_PRIORITY_VEHICLE_GENERATORS_ACTIVE

--[[
Related to car generators & CPlayerSwitchMgrLong
]]
function natives.VEHICLE.SET_VEHICLE_GENERATOR_AREA_OF_INTEREST(--[[float]] x, --[[float]] y, --[[float]] z, --[[float]] radius) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_GENERATOR_AREA_OF_INTEREST' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(radius) == "number", "Arg #4 (radius) must be a number.")

	local result = native_call(0x9A75585FB2E54FAD, x, y, z, radius)
end
natives.vehicle.set_vehicle_generator_area_of_interest = natives.VEHICLE.SET_VEHICLE_GENERATOR_AREA_OF_INTEREST

function natives.VEHICLE.CLEAR_VEHICLE_GENERATOR_AREA_OF_INTEREST() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.CLEAR_VEHICLE_GENERATOR_AREA_OF_INTEREST' due to disabled trusted mode")

	local result = native_call(0x0A436B8643716D14)
end
natives.vehicle.clear_vehicle_generator_area_of_interest = natives.VEHICLE.CLEAR_VEHICLE_GENERATOR_AREA_OF_INTEREST

--[[
Sets a vehicle on the ground on all wheels.  Returns whether or not the operation was successful.

sfink: This has an additional param(Vehicle vehicle, float p1) which is always set to 5.0f in the b944 scripts.
]]
function natives.VEHICLE.SET_VEHICLE_ON_GROUND_PROPERLY(--[[Vehicle]] vehicle, --[[float]] p1) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_ON_GROUND_PROPERLY' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x49733E92263139D1, vehicle, p1)
	return result:__tointeger() ~= 0
end
natives.vehicle.set_vehicle_on_ground_properly = natives.VEHICLE.SET_VEHICLE_ON_GROUND_PROPERLY

function natives.VEHICLE.SET_VEHICLE_USE_CUTSCENE_WHEEL_COMPRESSION(--[[Vehicle]] p0, --[[BOOL]] p1, --[[BOOL]] p2, --[[BOOL]] p3) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_USE_CUTSCENE_WHEEL_COMPRESSION' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")
	assert(type(p3) == "boolean", "Arg #4 (p3) must be a boolean.")

	local result = native_call(0xE023E8AC4EF7C117, p0, p1, p2, p3)
	return result:__tointeger()
end
natives.vehicle.set_vehicle_use_cutscene_wheel_compression = natives.VEHICLE.SET_VEHICLE_USE_CUTSCENE_WHEEL_COMPRESSION

function natives.VEHICLE.IS_VEHICLE_STUCK_ON_ROOF(--[[Vehicle]] vehicle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.IS_VEHICLE_STUCK_ON_ROOF' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0xB497F06B288DCFDF, vehicle)
	return result:__tointeger() ~= 0
end
natives.vehicle.is_vehicle_stuck_on_roof = natives.VEHICLE.IS_VEHICLE_STUCK_ON_ROOF

function natives.VEHICLE.ADD_VEHICLE_UPSIDEDOWN_CHECK(--[[Vehicle]] vehicle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.ADD_VEHICLE_UPSIDEDOWN_CHECK' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0xB72E26D81006005B, vehicle)
end
natives.vehicle.add_vehicle_upsidedown_check = natives.VEHICLE.ADD_VEHICLE_UPSIDEDOWN_CHECK

function natives.VEHICLE.REMOVE_VEHICLE_UPSIDEDOWN_CHECK(--[[Vehicle]] vehicle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.REMOVE_VEHICLE_UPSIDEDOWN_CHECK' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0xC53EB42A499A7E90, vehicle)
end
natives.vehicle.remove_vehicle_upsidedown_check = natives.VEHICLE.REMOVE_VEHICLE_UPSIDEDOWN_CHECK

--[[
Returns true if the vehicle's current speed is less than, or equal to 0.0025f.

For some vehicles it returns true if the current speed is <= 0.00039999999.
]]
function natives.VEHICLE.IS_VEHICLE_STOPPED(--[[Vehicle]] vehicle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.IS_VEHICLE_STOPPED' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x5721B434AD84D57A, vehicle)
	return result:__tointeger() ~= 0
end
natives.vehicle.is_vehicle_stopped = natives.VEHICLE.IS_VEHICLE_STOPPED

--[[
Gets the number of passengers.

This native was modified in b2545 to take two additional parameters, allowing you to include the driver or exclude dead passengers.

To keep it working like before b2545, set includeDriver to false and includeDeadOccupants to true.
]]
function natives.VEHICLE.GET_VEHICLE_NUMBER_OF_PASSENGERS(--[[Vehicle]] vehicle, --[[BOOL]] includeDriver, --[[BOOL]] includeDeadOccupants) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_VEHICLE_NUMBER_OF_PASSENGERS' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(includeDriver) == "boolean", "Arg #2 (includeDriver) must be a boolean.")
	assert(type(includeDeadOccupants) == "boolean", "Arg #3 (includeDeadOccupants) must be a boolean.")

	local result = native_call(0x24CB2137731FFE89, vehicle, includeDriver, includeDeadOccupants)
	return result:__tointeger()
end
natives.vehicle.get_vehicle_number_of_passengers = natives.VEHICLE.GET_VEHICLE_NUMBER_OF_PASSENGERS

function natives.VEHICLE.GET_VEHICLE_MAX_NUMBER_OF_PASSENGERS(--[[Vehicle]] vehicle) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_VEHICLE_MAX_NUMBER_OF_PASSENGERS' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0xA7C4F2C6E744A550, vehicle)
	return result:__tointeger()
end
natives.vehicle.get_vehicle_max_number_of_passengers = natives.VEHICLE.GET_VEHICLE_MAX_NUMBER_OF_PASSENGERS

--[[
Returns max number of passengers (including the driver) for the specified vehicle model.

Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
]]
function natives.VEHICLE.GET_VEHICLE_MODEL_NUMBER_OF_SEATS(--[[Hash]] modelHash) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_VEHICLE_MODEL_NUMBER_OF_SEATS' due to disabled trusted mode")

	assert(type(modelHash) == "number", "Arg #1 (modelHash) must be a number.")

	local result = native_call(0x2AD93716F184EDA4, modelHash)
	return result:__tointeger()
end
natives.vehicle.get_vehicle_model_number_of_seats = natives.VEHICLE.GET_VEHICLE_MODEL_NUMBER_OF_SEATS

function natives.VEHICLE.IS_SEAT_WARP_ONLY(--[[Vehicle]] vehicle, --[[int]] seatIndex) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.IS_SEAT_WARP_ONLY' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(seatIndex) == "number", "Arg #2 (seatIndex) must be a number.")

	local result = native_call(0xF7F203E31F96F6A1, vehicle, seatIndex)
	return result:__tointeger() ~= 0
end
natives.vehicle.is_seat_warp_only = natives.VEHICLE.IS_SEAT_WARP_ONLY

function natives.VEHICLE.IS_TURRET_SEAT(--[[Vehicle]] vehicle, --[[int]] seatIndex) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.IS_TURRET_SEAT' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(seatIndex) == "number", "Arg #2 (seatIndex) must be a number.")

	local result = native_call(0xE33FFA906CE74880, vehicle, seatIndex)
	return result:__tointeger() ~= 0
end
natives.vehicle.is_turret_seat = natives.VEHICLE.IS_TURRET_SEAT

--[[
Returns true if the vehicle has the FLAG_ALLOWS_RAPPEL flag set.
]]
function natives.VEHICLE.DOES_VEHICLE_ALLOW_RAPPEL(--[[Vehicle]] vehicle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.DOES_VEHICLE_ALLOW_RAPPEL' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x4E417C547182C84D, vehicle)
	return result:__tointeger() ~= 0
end
natives.vehicle.does_vehicle_allow_rappel = natives.VEHICLE.DOES_VEHICLE_ALLOW_RAPPEL

--[[
Use this native inside a looped function.
Values:
- `0.0` = no vehicles on streets
- `1.0` = normal vehicles on streets
]]
function natives.VEHICLE.SET_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME(--[[float]] multiplier) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME' due to disabled trusted mode")

	assert(type(multiplier) == "number", "Arg #1 (multiplier) must be a number.")

	local result = native_call(0x245A6883D966D537, multiplier)
end
natives.vehicle.set_vehicle_density_multiplier_this_frame = natives.VEHICLE.SET_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME

function natives.VEHICLE.SET_RANDOM_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME(--[[float]] multiplier) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_RANDOM_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME' due to disabled trusted mode")

	assert(type(multiplier) == "number", "Arg #1 (multiplier) must be a number.")

	local result = native_call(0xB3B3359379FE77D3, multiplier)
end
natives.vehicle.set_random_vehicle_density_multiplier_this_frame = natives.VEHICLE.SET_RANDOM_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME

function natives.VEHICLE.SET_PARKED_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME(--[[float]] multiplier) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_PARKED_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME' due to disabled trusted mode")

	assert(type(multiplier) == "number", "Arg #1 (multiplier) must be a number.")

	local result = native_call(0xEAE6DCC7EEE3DB1D, multiplier)
end
natives.vehicle.set_parked_vehicle_density_multiplier_this_frame = natives.VEHICLE.SET_PARKED_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME

function natives.VEHICLE.SET_DISABLE_RANDOM_TRAINS_THIS_FRAME(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_DISABLE_RANDOM_TRAINS_THIS_FRAME' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0xD4B8E3D1917BC86B, toggle)
end
natives.vehicle.set_disable_random_trains_this_frame = natives.VEHICLE.SET_DISABLE_RANDOM_TRAINS_THIS_FRAME

function natives.VEHICLE.SET_AMBIENT_VEHICLE_RANGE_MULTIPLIER_THIS_FRAME(--[[float]] value) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_AMBIENT_VEHICLE_RANGE_MULTIPLIER_THIS_FRAME' due to disabled trusted mode")

	assert(type(value) == "number", "Arg #1 (value) must be a number.")

	local result = native_call(0x90B6DA738A9A25DA, value)
end
natives.vehicle.set_ambient_vehicle_range_multiplier_this_frame = natives.VEHICLE.SET_AMBIENT_VEHICLE_RANGE_MULTIPLIER_THIS_FRAME

function natives.VEHICLE.SET_FAR_DRAW_VEHICLES(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_FAR_DRAW_VEHICLES' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x26324F33423F3CC3, toggle)
end
natives.vehicle.set_far_draw_vehicles = natives.VEHICLE.SET_FAR_DRAW_VEHICLES

function natives.VEHICLE.SET_NUMBER_OF_PARKED_VEHICLES(--[[int]] value) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_NUMBER_OF_PARKED_VEHICLES' due to disabled trusted mode")

	assert(type(value) == "number", "Arg #1 (value) must be a number.")

	local result = native_call(0xCAA15F13EBD417FF, value)
end
natives.vehicle.set_number_of_parked_vehicles = natives.VEHICLE.SET_NUMBER_OF_PARKED_VEHICLES

--[[
0 - CARLOCK_NONE
1 - CARLOCK_UNLOCKED
2 - CARLOCK_LOCKED (locked)
3 - CARLOCK_LOCKOUT_PLAYER_ONLY
4 - CARLOCK_LOCKED_PLAYER_INSIDE (can get in, can't leave)

(maybe, these are leftovers from GTA:VC)
5 - CARLOCK_LOCKED_INITIALLY
6 - CARLOCK_FORCE_SHUT_DOORS
7 - CARLOCK_LOCKED_BUT_CAN_BE_DAMAGED

(source: GTA VC miss2 leak, matching constants for 0/2/4, testing)

They use 10 in am_mp_property_int, don't know what it does atm.
]]
function natives.VEHICLE.SET_VEHICLE_DOORS_LOCKED(--[[Vehicle]] vehicle, --[[int]] doorLockStatus) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_DOORS_LOCKED' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(doorLockStatus) == "number", "Arg #2 (doorLockStatus) must be a number.")

	local result = native_call(0xB664292EAECF7FA6, vehicle, doorLockStatus)
end
natives.vehicle.set_vehicle_doors_locked = natives.VEHICLE.SET_VEHICLE_DOORS_LOCKED

--[[
doorId: see SET_VEHICLE_DOOR_SHUT
]]
function natives.VEHICLE.SET_VEHICLE_INDIVIDUAL_DOORS_LOCKED(--[[Vehicle]] vehicle, --[[int]] doorId, --[[int]] doorLockStatus) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_INDIVIDUAL_DOORS_LOCKED' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(doorId) == "number", "Arg #2 (doorId) must be a number.")
	assert(type(doorLockStatus) == "number", "Arg #3 (doorLockStatus) must be a number.")

	local result = native_call(0xBE70724027F85BCD, vehicle, doorId, doorLockStatus)
end
natives.vehicle.set_vehicle_individual_doors_locked = natives.VEHICLE.SET_VEHICLE_INDIVIDUAL_DOORS_LOCKED

--[[
if set to true, prevents vehicle sirens from having sound, leaving only the lights.
]]
function natives.VEHICLE.SET_VEHICLE_HAS_MUTED_SIRENS(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_HAS_MUTED_SIRENS' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xD8050E0EB60CF274, vehicle, toggle)
end
natives.vehicle.set_vehicle_has_muted_sirens = natives.VEHICLE.SET_VEHICLE_HAS_MUTED_SIRENS

function natives.VEHICLE.SET_VEHICLE_DOORS_LOCKED_FOR_PLAYER(--[[Vehicle]] vehicle, --[[Player]] player, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_DOORS_LOCKED_FOR_PLAYER' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(player) == "number", "Arg #2 (player) must be a number.")
	assert(type(toggle) == "boolean", "Arg #3 (toggle) must be a boolean.")

	local result = native_call(0x517AAF684BB50CD1, vehicle, player, toggle)
end
natives.vehicle.set_vehicle_doors_locked_for_player = natives.VEHICLE.SET_VEHICLE_DOORS_LOCKED_FOR_PLAYER

function natives.VEHICLE.GET_VEHICLE_DOORS_LOCKED_FOR_PLAYER(--[[Vehicle]] vehicle, --[[Player]] player) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_VEHICLE_DOORS_LOCKED_FOR_PLAYER' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(player) == "number", "Arg #2 (player) must be a number.")

	local result = native_call(0xF6AF6CB341349015, vehicle, player)
	return result:__tointeger() ~= 0
end
natives.vehicle.get_vehicle_doors_locked_for_player = natives.VEHICLE.GET_VEHICLE_DOORS_LOCKED_FOR_PLAYER

--[[
After some analysis, I've decided that these are what the parameters are.

We can see this being used in R* scripts such as "am_mp_property_int.ysc.c4":
l_11A1 = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 1);
...
VEHICLE::SET_VEHICLE_DOORS_LOCKED_FOR_ALL_PLAYERS(l_11A1, 1);
]]
function natives.VEHICLE.SET_VEHICLE_DOORS_LOCKED_FOR_ALL_PLAYERS(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_DOORS_LOCKED_FOR_ALL_PLAYERS' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xA2F80B8D040727CC, vehicle, toggle)
end
natives.vehicle.set_vehicle_doors_locked_for_all_players = natives.VEHICLE.SET_VEHICLE_DOORS_LOCKED_FOR_ALL_PLAYERS

function natives.VEHICLE.SET_VEHICLE_DOORS_LOCKED_FOR_NON_SCRIPT_PLAYERS(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_DOORS_LOCKED_FOR_NON_SCRIPT_PLAYERS' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x9737A37136F07E75, vehicle, toggle)
end
natives.vehicle.set_vehicle_doors_locked_for_non_script_players = natives.VEHICLE.SET_VEHICLE_DOORS_LOCKED_FOR_NON_SCRIPT_PLAYERS

function natives.VEHICLE.SET_VEHICLE_DOORS_LOCKED_FOR_TEAM(--[[Vehicle]] vehicle, --[[int]] team, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_DOORS_LOCKED_FOR_TEAM' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(team) == "number", "Arg #2 (team) must be a number.")
	assert(type(toggle) == "boolean", "Arg #3 (toggle) must be a boolean.")

	local result = native_call(0xB81F6D4A8F5EEBA8, vehicle, team, toggle)
end
natives.vehicle.set_vehicle_doors_locked_for_team = natives.VEHICLE.SET_VEHICLE_DOORS_LOCKED_FOR_TEAM

function natives.VEHICLE.SET_VEHICLE_DOORS_LOCKED_FOR_ALL_TEAMS(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_DOORS_LOCKED_FOR_ALL_TEAMS' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x203B527D1B77904C, vehicle, toggle)
end
natives.vehicle.set_vehicle_doors_locked_for_all_teams = natives.VEHICLE.SET_VEHICLE_DOORS_LOCKED_FOR_ALL_TEAMS

function natives.VEHICLE.SET_VEHICLE_DONT_TERMINATE_TASK_WHEN_ACHIEVED(--[[Vehicle]] vehicle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_DONT_TERMINATE_TASK_WHEN_ACHIEVED' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x76D26A22750E849E, vehicle)
end
natives.vehicle.set_vehicle_dont_terminate_task_when_achieved = natives.VEHICLE.SET_VEHICLE_DONT_TERMINATE_TASK_WHEN_ACHIEVED

--[[
Explodes a selected vehicle.

Vehicle vehicle = Vehicle you want to explode.
BOOL isAudible = If explosion makes a sound.
BOOL isInvisible = If the explosion is invisible or not.

First BOOL does not give any visual explosion, the vehicle just falls apart completely but slowly and starts to burn.
]]
function natives.VEHICLE.EXPLODE_VEHICLE(--[[Vehicle]] vehicle, --[[BOOL]] isAudible, --[[BOOL]] isInvisible) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.EXPLODE_VEHICLE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(isAudible) == "boolean", "Arg #2 (isAudible) must be a boolean.")
	assert(type(isInvisible) == "boolean", "Arg #3 (isInvisible) must be a boolean.")

	local result = native_call(0xBA71116ADF5B514C, vehicle, isAudible, isInvisible)
end
natives.vehicle.explode_vehicle = natives.VEHICLE.EXPLODE_VEHICLE

--[[
Tested on the player's current vehicle. Unless you kill the driver, the vehicle doesn't loose control, however, if enabled, explodeOnImpact is still active. The moment you crash, boom.
]]
function natives.VEHICLE.SET_VEHICLE_OUT_OF_CONTROL(--[[Vehicle]] vehicle, --[[BOOL]] killDriver, --[[BOOL]] explodeOnImpact) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_OUT_OF_CONTROL' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(killDriver) == "boolean", "Arg #2 (killDriver) must be a boolean.")
	assert(type(explodeOnImpact) == "boolean", "Arg #3 (explodeOnImpact) must be a boolean.")

	local result = native_call(0xF19D095E42D430CC, vehicle, killDriver, explodeOnImpact)
end
natives.vehicle.set_vehicle_out_of_control = natives.VEHICLE.SET_VEHICLE_OUT_OF_CONTROL

function natives.VEHICLE.SET_VEHICLE_TIMED_EXPLOSION(--[[Vehicle]] vehicle, --[[Ped]] ped, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_TIMED_EXPLOSION' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(ped) == "number", "Arg #2 (ped) must be a number.")
	assert(type(toggle) == "boolean", "Arg #3 (toggle) must be a boolean.")

	local result = native_call(0x2E0A74E1002380B1, vehicle, ped, toggle)
end
natives.vehicle.set_vehicle_timed_explosion = natives.VEHICLE.SET_VEHICLE_TIMED_EXPLOSION

function natives.VEHICLE.ADD_VEHICLE_PHONE_EXPLOSIVE_DEVICE(--[[Vehicle]] vehicle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.ADD_VEHICLE_PHONE_EXPLOSIVE_DEVICE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x99AD4CCCB128CBC9, vehicle)
end
natives.vehicle.add_vehicle_phone_explosive_device = natives.VEHICLE.ADD_VEHICLE_PHONE_EXPLOSIVE_DEVICE

function natives.VEHICLE.CLEAR_VEHICLE_PHONE_EXPLOSIVE_DEVICE() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.CLEAR_VEHICLE_PHONE_EXPLOSIVE_DEVICE' due to disabled trusted mode")

	local result = native_call(0xAA3F739ABDDCF21F)
end
natives.vehicle.clear_vehicle_phone_explosive_device = natives.VEHICLE.CLEAR_VEHICLE_PHONE_EXPLOSIVE_DEVICE

function natives.VEHICLE.HAS_VEHICLE_PHONE_EXPLOSIVE_DEVICE() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.HAS_VEHICLE_PHONE_EXPLOSIVE_DEVICE' due to disabled trusted mode")

	local result = native_call(0x6ADAABD3068C5235)
	return result:__tointeger() ~= 0
end
natives.vehicle.has_vehicle_phone_explosive_device = natives.VEHICLE.HAS_VEHICLE_PHONE_EXPLOSIVE_DEVICE

function natives.VEHICLE.DETONATE_VEHICLE_PHONE_EXPLOSIVE_DEVICE() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.DETONATE_VEHICLE_PHONE_EXPLOSIVE_DEVICE' due to disabled trusted mode")

	local result = native_call(0xEF49CF0270307CBE)
end
natives.vehicle.detonate_vehicle_phone_explosive_device = natives.VEHICLE.DETONATE_VEHICLE_PHONE_EXPLOSIVE_DEVICE

--[[
This is not tested - it's just an assumption.
- Nac

Doesn't seem to work.  I'll try with an int instead. --JT

Read the scripts, im dumpass. 

                            if (!VEHICLE::IS_TAXI_LIGHT_ON(l_115)) {
                                VEHICLE::SET_TAXI_LIGHTS(l_115, 1);
                            }
]]
function natives.VEHICLE.SET_TAXI_LIGHTS(--[[Vehicle]] vehicle, --[[BOOL]] state) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_TAXI_LIGHTS' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(state) == "boolean", "Arg #2 (state) must be a boolean.")

	local result = native_call(0x598803E85E8448D9, vehicle, state)
end
natives.vehicle.set_taxi_lights = natives.VEHICLE.SET_TAXI_LIGHTS

function natives.VEHICLE.IS_TAXI_LIGHT_ON(--[[Vehicle]] vehicle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.IS_TAXI_LIGHT_ON' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x7504C0F113AB50FC, vehicle)
	return result:__tointeger() ~= 0
end
natives.vehicle.is_taxi_light_on = natives.VEHICLE.IS_TAXI_LIGHT_ON

--[[
garageName example "Michael - Beverly Hills"

Full list of garages by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/garages.json
]]
function natives.VEHICLE.IS_VEHICLE_IN_GARAGE_AREA(--[[const char*]] garageName, --[[Vehicle]] vehicle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.IS_VEHICLE_IN_GARAGE_AREA' due to disabled trusted mode")

	assert(type(garageName) == "string", "Arg #1 (garageName) must be a string.")
	assert(type(vehicle) == "number", "Arg #2 (vehicle) must be a number.")

	local result = native_call(0xCEE4490CD57BB3C2, garageName, vehicle)
	return result:__tointeger() ~= 0
end
natives.vehicle.is_vehicle_in_garage_area = natives.VEHICLE.IS_VEHICLE_IN_GARAGE_AREA

--[[
colorPrimary & colorSecondary are the paint index for the vehicle.
For a list of valid paint indexes, view: pastebin.com/pwHci0xK
-------------------------------------------------------------------------
Use this to get the number of color indices: pastebin.com/RQEeqTSM
Note: minimum color index is 0, maximum color index is (numColorIndices - 1)

Full list of vehicle colors by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicleColors.json
]]
function natives.VEHICLE.SET_VEHICLE_COLOURS(--[[Vehicle]] vehicle, --[[int]] colorPrimary, --[[int]] colorSecondary) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_COLOURS' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(colorPrimary) == "number", "Arg #2 (colorPrimary) must be a number.")
	assert(type(colorSecondary) == "number", "Arg #3 (colorSecondary) must be a number.")

	local result = native_call(0x4F1D4BE3A7F24601, vehicle, colorPrimary, colorSecondary)
end
natives.vehicle.set_vehicle_colours = natives.VEHICLE.SET_VEHICLE_COLOURS

--[[
It switch to highbeam when p1 is set to true.
]]
function natives.VEHICLE.SET_VEHICLE_FULLBEAM(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_FULLBEAM' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x8B7FD87F0DDB421E, vehicle, toggle)
end
natives.vehicle.set_vehicle_fullbeam = natives.VEHICLE.SET_VEHICLE_FULLBEAM

--[[
p1 (toggle) was always 1 (true) except in one case in the b678 scripts.
]]
function natives.VEHICLE.SET_VEHICLE_IS_RACING(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_IS_RACING' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x07116E24E9D1929D, vehicle, toggle)
end
natives.vehicle.set_vehicle_is_racing = natives.VEHICLE.SET_VEHICLE_IS_RACING

--[[
p1, p2, p3 are RGB values for color (255,0,0 for Red, ect)
]]
function natives.VEHICLE.SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(--[[Vehicle]] vehicle, --[[int]] r, --[[int]] g, --[[int]] b) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_CUSTOM_PRIMARY_COLOUR' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(r) == "number", "Arg #2 (r) must be a number.")
	assert(type(g) == "number", "Arg #3 (g) must be a number.")
	assert(type(b) == "number", "Arg #4 (b) must be a number.")

	local result = native_call(0x7141766F91D15BEA, vehicle, r, g, b)
end
natives.vehicle.set_vehicle_custom_primary_colour = natives.VEHICLE.SET_VEHICLE_CUSTOM_PRIMARY_COLOUR

function natives.VEHICLE.GET_VEHICLE_CUSTOM_PRIMARY_COLOUR(--[[Vehicle]] vehicle, --[[int*]] r, --[[int*]] g, --[[int*]] b) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_VEHICLE_CUSTOM_PRIMARY_COLOUR' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(r) == "userdata", "Arg #2 (r) must be a userdata.")
	assert(type(g) == "userdata", "Arg #3 (g) must be a userdata.")
	assert(type(b) == "userdata", "Arg #4 (b) must be a userdata.")

	local result = native_call(0xB64CF2CCA9D95F52, vehicle, r, g, b)
end
natives.vehicle.get_vehicle_custom_primary_colour = natives.VEHICLE.GET_VEHICLE_CUSTOM_PRIMARY_COLOUR

function natives.VEHICLE.CLEAR_VEHICLE_CUSTOM_PRIMARY_COLOUR(--[[Vehicle]] vehicle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.CLEAR_VEHICLE_CUSTOM_PRIMARY_COLOUR' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x55E1D2758F34E437, vehicle)
end
natives.vehicle.clear_vehicle_custom_primary_colour = natives.VEHICLE.CLEAR_VEHICLE_CUSTOM_PRIMARY_COLOUR

function natives.VEHICLE.GET_IS_VEHICLE_PRIMARY_COLOUR_CUSTOM(--[[Vehicle]] vehicle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_IS_VEHICLE_PRIMARY_COLOUR_CUSTOM' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0xF095C0405307B21B, vehicle)
	return result:__tointeger() ~= 0
end
natives.vehicle.get_is_vehicle_primary_colour_custom = natives.VEHICLE.GET_IS_VEHICLE_PRIMARY_COLOUR_CUSTOM

--[[
p1, p2, p3 are RGB values for color (255,0,0 for Red, ect)
]]
function natives.VEHICLE.SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(--[[Vehicle]] vehicle, --[[int]] r, --[[int]] g, --[[int]] b) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_CUSTOM_SECONDARY_COLOUR' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(r) == "number", "Arg #2 (r) must be a number.")
	assert(type(g) == "number", "Arg #3 (g) must be a number.")
	assert(type(b) == "number", "Arg #4 (b) must be a number.")

	local result = native_call(0x36CED73BFED89754, vehicle, r, g, b)
end
natives.vehicle.set_vehicle_custom_secondary_colour = natives.VEHICLE.SET_VEHICLE_CUSTOM_SECONDARY_COLOUR

function natives.VEHICLE.GET_VEHICLE_CUSTOM_SECONDARY_COLOUR(--[[Vehicle]] vehicle, --[[int*]] r, --[[int*]] g, --[[int*]] b) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_VEHICLE_CUSTOM_SECONDARY_COLOUR' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(r) == "userdata", "Arg #2 (r) must be a userdata.")
	assert(type(g) == "userdata", "Arg #3 (g) must be a userdata.")
	assert(type(b) == "userdata", "Arg #4 (b) must be a userdata.")

	local result = native_call(0x8389CD56CA8072DC, vehicle, r, g, b)
end
natives.vehicle.get_vehicle_custom_secondary_colour = natives.VEHICLE.GET_VEHICLE_CUSTOM_SECONDARY_COLOUR

function natives.VEHICLE.CLEAR_VEHICLE_CUSTOM_SECONDARY_COLOUR(--[[Vehicle]] vehicle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.CLEAR_VEHICLE_CUSTOM_SECONDARY_COLOUR' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x5FFBDEEC3E8E2009, vehicle)
end
natives.vehicle.clear_vehicle_custom_secondary_colour = natives.VEHICLE.CLEAR_VEHICLE_CUSTOM_SECONDARY_COLOUR

--[[
Check if Vehicle Secondary is avaliable for customize
]]
function natives.VEHICLE.GET_IS_VEHICLE_SECONDARY_COLOUR_CUSTOM(--[[Vehicle]] vehicle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_IS_VEHICLE_SECONDARY_COLOUR_CUSTOM' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x910A32E7AAD2656C, vehicle)
	return result:__tointeger() ~= 0
end
natives.vehicle.get_is_vehicle_secondary_colour_custom = natives.VEHICLE.GET_IS_VEHICLE_SECONDARY_COLOUR_CUSTOM

--[[
formerly known as _SET_VEHICLE_PAINT_FADE

The parameter fade is a value from 0-1, where 0 is fresh paint.
]]
function natives.VEHICLE.SET_VEHICLE_ENVEFF_SCALE(--[[Vehicle]] vehicle, --[[float]] fade) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_ENVEFF_SCALE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(fade) == "number", "Arg #2 (fade) must be a number.")

	local result = native_call(0x3AFDC536C3D01674, vehicle, fade)
end
natives.vehicle.set_vehicle_enveff_scale = natives.VEHICLE.SET_VEHICLE_ENVEFF_SCALE

--[[
formerly known as _GET_VEHICLE_PAINT_FADE

The result is a value from 0-1, where 0 is fresh paint.
]]
function natives.VEHICLE.GET_VEHICLE_ENVEFF_SCALE(--[[Vehicle]] vehicle) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_VEHICLE_ENVEFF_SCALE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0xA82819CAC9C4C403, vehicle)
	return result:__tonumber()
end
natives.vehicle.get_vehicle_enveff_scale = natives.VEHICLE.GET_VEHICLE_ENVEFF_SCALE

--[[
Hardcoded to not work in multiplayer.
]]
function natives.VEHICLE.SET_CAN_RESPRAY_VEHICLE(--[[Vehicle]] vehicle, --[[BOOL]] state) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_CAN_RESPRAY_VEHICLE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(state) == "boolean", "Arg #2 (state) must be a boolean.")

	local result = native_call(0x52BBA29D5EC69356, vehicle, state)
end
natives.vehicle.set_can_respray_vehicle = natives.VEHICLE.SET_CAN_RESPRAY_VEHICLE

function natives.VEHICLE.SET_GOON_BOSS_VEHICLE(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_GOON_BOSS_VEHICLE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xAB31EF4DE6800CE9, p0, p1)
end
natives.vehicle.set_goon_boss_vehicle = natives.VEHICLE.SET_GOON_BOSS_VEHICLE

function natives.VEHICLE.SET_OPEN_REAR_DOORS_ON_EXPLOSION(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_OPEN_REAR_DOORS_ON_EXPLOSION' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x1B212B26DD3C04DF, vehicle, toggle)
end
natives.vehicle.set_open_rear_doors_on_explosion = natives.VEHICLE.SET_OPEN_REAR_DOORS_ON_EXPLOSION

function natives.VEHICLE.FORCE_SUBMARINE_SURFACE_MODE(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.FORCE_SUBMARINE_SURFACE_MODE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x33506883545AC0DF, vehicle, toggle)
end
natives.vehicle.force_submarine_surface_mode = natives.VEHICLE.FORCE_SUBMARINE_SURFACE_MODE

function natives.VEHICLE.FORCE_SUBMARINE_NEURTAL_BUOYANCY(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.FORCE_SUBMARINE_NEURTAL_BUOYANCY' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xC67DB108A9ADE3BE, p0, p1)
end
natives.vehicle.force_submarine_neurtal_buoyancy = natives.VEHICLE.FORCE_SUBMARINE_NEURTAL_BUOYANCY

function natives.VEHICLE.SET_SUBMARINE_CRUSH_DEPTHS(--[[Vehicle]] vehicle, --[[BOOL]] p1, --[[float]] depth1, --[[float]] depth2, --[[float]] depth3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_SUBMARINE_CRUSH_DEPTHS' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(depth1) == "number", "Arg #3 (depth1) must be a number.")
	assert(type(depth2) == "number", "Arg #4 (depth2) must be a number.")
	assert(type(depth3) == "number", "Arg #5 (depth3) must be a number.")

	local result = native_call(0xC59872A5134879C7, vehicle, p1, depth1, depth2, depth3)
end
natives.vehicle.set_submarine_crush_depths = natives.VEHICLE.SET_SUBMARINE_CRUSH_DEPTHS

function natives.VEHICLE.GET_SUBMARINE_IS_UNDER_DESIGN_DEPTH(--[[Vehicle]] submarine) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_SUBMARINE_IS_UNDER_DESIGN_DEPTH' due to disabled trusted mode")

	assert(type(submarine) == "number", "Arg #1 (submarine) must be a number.")

	local result = native_call(0x3E71D0B300B7AA79, submarine)
	return result:__tointeger() ~= 0
end
natives.vehicle.get_submarine_is_under_design_depth = natives.VEHICLE.GET_SUBMARINE_IS_UNDER_DESIGN_DEPTH

function natives.VEHICLE.GET_SUBMARINE_NUMBER_OF_AIR_LEAKS(--[[Vehicle]] submarine) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_SUBMARINE_NUMBER_OF_AIR_LEAKS' due to disabled trusted mode")

	assert(type(submarine) == "number", "Arg #1 (submarine) must be a number.")

	local result = native_call(0x093D6DDCA5B8FBAE, submarine)
	return result:__tointeger()
end
natives.vehicle.get_submarine_number_of_air_leaks = natives.VEHICLE.GET_SUBMARINE_NUMBER_OF_AIR_LEAKS

function natives.VEHICLE.SET_BOAT_IGNORE_LAND_PROBES(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_BOAT_IGNORE_LAND_PROBES' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xED5EDE9E676643C9, p0, p1)
end
natives.vehicle.set_boat_ignore_land_probes = natives.VEHICLE.SET_BOAT_IGNORE_LAND_PROBES

function natives.VEHICLE.SET_BOAT_ANCHOR(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_BOAT_ANCHOR' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x75DBEC174AEEAD10, vehicle, toggle)
end
natives.vehicle.set_boat_anchor = natives.VEHICLE.SET_BOAT_ANCHOR

function natives.VEHICLE.CAN_ANCHOR_BOAT_HERE(--[[Vehicle]] vehicle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.CAN_ANCHOR_BOAT_HERE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x26C10ECBDA5D043B, vehicle)
	return result:__tointeger() ~= 0
end
natives.vehicle.can_anchor_boat_here = natives.VEHICLE.CAN_ANCHOR_BOAT_HERE

function natives.VEHICLE.CAN_ANCHOR_BOAT_HERE_IGNORE_PLAYERS(--[[Vehicle]] vehicle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.CAN_ANCHOR_BOAT_HERE_IGNORE_PLAYERS' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x24F4121D07579880, vehicle)
	return result:__tointeger() ~= 0
end
natives.vehicle.can_anchor_boat_here_ignore_players = natives.VEHICLE.CAN_ANCHOR_BOAT_HERE_IGNORE_PLAYERS

function natives.VEHICLE.SET_BOAT_REMAINS_ANCHORED_WHILE_PLAYER_IS_DRIVER(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_BOAT_REMAINS_ANCHORED_WHILE_PLAYER_IS_DRIVER' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xE3EBAAE484798530, vehicle, toggle)
end
natives.vehicle.set_boat_remains_anchored_while_player_is_driver = natives.VEHICLE.SET_BOAT_REMAINS_ANCHORED_WHILE_PLAYER_IS_DRIVER

--[[
No observed effect.
]]
function natives.VEHICLE.SET_FORCE_LOW_LOD_ANCHOR_MODE(--[[Vehicle]] vehicle, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_FORCE_LOW_LOD_ANCHOR_MODE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0xB28B1FE5BFADD7F5, vehicle, p1)
end
natives.vehicle.set_force_low_lod_anchor_mode = natives.VEHICLE.SET_FORCE_LOW_LOD_ANCHOR_MODE

function natives.VEHICLE.SET_BOAT_LOW_LOD_ANCHOR_DISTANCE(--[[Vehicle]] vehicle, --[[float]] value) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_BOAT_LOW_LOD_ANCHOR_DISTANCE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(value) == "number", "Arg #2 (value) must be a number.")

	local result = native_call(0xE842A9398079BD82, vehicle, value)
end
natives.vehicle.set_boat_low_lod_anchor_distance = natives.VEHICLE.SET_BOAT_LOW_LOD_ANCHOR_DISTANCE

function natives.VEHICLE.IS_BOAT_ANCHORED(--[[Vehicle]] vehicle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.IS_BOAT_ANCHORED' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0xB0AD1238A709B1A2, vehicle)
	return result:__tointeger() ~= 0
end
natives.vehicle.is_boat_anchored = natives.VEHICLE.IS_BOAT_ANCHORED

function natives.VEHICLE.SET_BOAT_SINKS_WHEN_WRECKED(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_BOAT_SINKS_WHEN_WRECKED' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x8F719973E1445BA2, vehicle, toggle)
end
natives.vehicle.set_boat_sinks_when_wrecked = natives.VEHICLE.SET_BOAT_SINKS_WHEN_WRECKED

function natives.VEHICLE.SET_BOAT_WRECKED(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_BOAT_WRECKED' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xBD32E46AA95C1DD2, p0)
end
natives.vehicle.set_boat_wrecked = natives.VEHICLE.SET_BOAT_WRECKED

--[[
Activate siren on vehicle (Only works if the vehicle has a siren).
]]
function natives.VEHICLE.SET_VEHICLE_SIREN(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_SIREN' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xF4924635A19EB37D, vehicle, toggle)
end
natives.vehicle.set_vehicle_siren = natives.VEHICLE.SET_VEHICLE_SIREN

function natives.VEHICLE.IS_VEHICLE_SIREN_ON(--[[Vehicle]] vehicle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.IS_VEHICLE_SIREN_ON' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x4C9BF537BE2634B2, vehicle)
	return result:__tointeger() ~= 0
end
natives.vehicle.is_vehicle_siren_on = natives.VEHICLE.IS_VEHICLE_SIREN_ON

function natives.VEHICLE.IS_VEHICLE_SIREN_AUDIO_ON(--[[Vehicle]] vehicle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.IS_VEHICLE_SIREN_AUDIO_ON' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0xB5CC40FBCB586380, vehicle)
	return result:__tointeger() ~= 0
end
natives.vehicle.is_vehicle_siren_audio_on = natives.VEHICLE.IS_VEHICLE_SIREN_AUDIO_ON

--[[
If set to true, vehicle will not take crash damage, but is still susceptible to damage from bullets and explosives
]]
function natives.VEHICLE.SET_VEHICLE_STRONG(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_STRONG' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x3E8C8727991A8A0B, vehicle, toggle)
end
natives.vehicle.set_vehicle_strong = natives.VEHICLE.SET_VEHICLE_STRONG

function natives.VEHICLE.REMOVE_VEHICLE_STUCK_CHECK(--[[Vehicle]] vehicle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.REMOVE_VEHICLE_STUCK_CHECK' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x8386BFB614D06749, vehicle)
end
natives.vehicle.remove_vehicle_stuck_check = natives.VEHICLE.REMOVE_VEHICLE_STUCK_CHECK

function natives.VEHICLE.GET_VEHICLE_COLOURS(--[[Vehicle]] vehicle, --[[int*]] colorPrimary, --[[int*]] colorSecondary) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_VEHICLE_COLOURS' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(colorPrimary) == "userdata", "Arg #2 (colorPrimary) must be a userdata.")
	assert(type(colorSecondary) == "userdata", "Arg #3 (colorSecondary) must be a userdata.")

	local result = native_call(0xA19435F193E081AC, vehicle, colorPrimary, colorSecondary)
end
natives.vehicle.get_vehicle_colours = natives.VEHICLE.GET_VEHICLE_COLOURS

--[[
Check if a vehicle seat is free.

seatIndex  = -1 being the driver seat.
Use GET_VEHICLE_MAX_NUMBER_OF_PASSENGERS(vehicle) - 1 for last seat index.
isTaskRunning = on true the function returns already false while a task on the target seat is running (TASK_ENTER_VEHICLE/TASK_SHUFFLE_TO_NEXT_VEHICLE_SEAT) - on false only when a ped is finally sitting in the seat.
]]
function natives.VEHICLE.IS_VEHICLE_SEAT_FREE(--[[Vehicle]] vehicle, --[[int]] seatIndex, --[[BOOL]] isTaskRunning) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.IS_VEHICLE_SEAT_FREE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(seatIndex) == "number", "Arg #2 (seatIndex) must be a number.")
	assert(type(isTaskRunning) == "boolean", "Arg #3 (isTaskRunning) must be a boolean.")

	local result = native_call(0x22AC59A870E6A669, vehicle, seatIndex, isTaskRunning)
	return result:__tointeger() ~= 0
end
natives.vehicle.is_vehicle_seat_free = natives.VEHICLE.IS_VEHICLE_SEAT_FREE

--[[
If there is no ped in the seat, and the game considers the vehicle as ambient population, this will create a random occupant ped in the seat, which may be cleaned up by the game fairly soon if not marked as script-owned mission entity.

Seat indexes:
-1 = Driver
0 = Front Right Passenger
1 = Back Left Passenger
2 = Back Right Passenger
3 = Further Back Left Passenger (vehicles > 4 seats)
4 = Further Back Right Passenger (vehicles > 4 seats)
etc.

If p2 is true it uses a different GetOccupant function.
]]
function natives.VEHICLE.GET_PED_IN_VEHICLE_SEAT(--[[Vehicle]] vehicle, --[[int]] seatIndex, --[[BOOL]] p2) -- Returns Ped
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_PED_IN_VEHICLE_SEAT' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(seatIndex) == "number", "Arg #2 (seatIndex) must be a number.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")

	local result = native_call(0xBB40DD2270B65366, vehicle, seatIndex, p2)
	return result:__tointeger()
end
natives.vehicle.get_ped_in_vehicle_seat = natives.VEHICLE.GET_PED_IN_VEHICLE_SEAT

function natives.VEHICLE.GET_LAST_PED_IN_VEHICLE_SEAT(--[[Vehicle]] vehicle, --[[int]] seatIndex) -- Returns Ped
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_LAST_PED_IN_VEHICLE_SEAT' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(seatIndex) == "number", "Arg #2 (seatIndex) must be a number.")

	local result = native_call(0x83F969AA1EE2A664, vehicle, seatIndex)
	return result:__tointeger()
end
natives.vehicle.get_last_ped_in_vehicle_seat = natives.VEHICLE.GET_LAST_PED_IN_VEHICLE_SEAT

function natives.VEHICLE.GET_VEHICLE_LIGHTS_STATE(--[[Vehicle]] vehicle, --[[BOOL*]] lightsOn, --[[BOOL*]] highbeamsOn) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_VEHICLE_LIGHTS_STATE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(lightsOn) == "userdata", "Arg #2 (lightsOn) must be a userdata.")
	assert(type(highbeamsOn) == "userdata", "Arg #3 (highbeamsOn) must be a userdata.")

	local result = native_call(0xB91B4C20085BD12F, vehicle, lightsOn, highbeamsOn)
	return result:__tointeger() ~= 0
end
natives.vehicle.get_vehicle_lights_state = natives.VEHICLE.GET_VEHICLE_LIGHTS_STATE

--[[
wheelID used for 4 wheelers seem to be (0, 1, 4, 5)
completely - is to check if tire completely gone from rim.

'0 = wheel_lf / bike, plane or jet front
'1 = wheel_rf
'2 = wheel_lm / in 6 wheels trailer, plane or jet is first one on left
'3 = wheel_rm / in 6 wheels trailer, plane or jet is first one on right
'4 = wheel_lr / bike rear / in 6 wheels trailer, plane or jet is last one on left
'5 = wheel_rr / in 6 wheels trailer, plane or jet is last one on right
'45 = 6 wheels trailer mid wheel left
'47 = 6 wheels trailer mid wheel right
]]
function natives.VEHICLE.IS_VEHICLE_TYRE_BURST(--[[Vehicle]] vehicle, --[[int]] wheelID, --[[BOOL]] completely) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.IS_VEHICLE_TYRE_BURST' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(wheelID) == "number", "Arg #2 (wheelID) must be a number.")
	assert(type(completely) == "boolean", "Arg #3 (completely) must be a boolean.")

	local result = native_call(0xBA291848A0815CA9, vehicle, wheelID, completely)
	return result:__tointeger() ~= 0
end
natives.vehicle.is_vehicle_tyre_burst = natives.VEHICLE.IS_VEHICLE_TYRE_BURST

--[[
SCALE: Setting the speed to 30 would result in a speed of roughly 60mph, according to speedometer.

Speed is in meters per second
You can convert meters/s to mph here:
http://www.calculateme.com/Speed/MetersperSecond/ToMilesperHour.htm
]]
function natives.VEHICLE.SET_VEHICLE_FORWARD_SPEED(--[[Vehicle]] vehicle, --[[float]] speed) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_FORWARD_SPEED' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(speed) == "number", "Arg #2 (speed) must be a number.")

	local result = native_call(0xAB54A438726D25D5, vehicle, speed)
end
natives.vehicle.set_vehicle_forward_speed = natives.VEHICLE.SET_VEHICLE_FORWARD_SPEED

function natives.VEHICLE.SET_VEHICLE_FORWARD_SPEED_XY(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_FORWARD_SPEED_XY' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x6501129C9E0FFA05, p0, p1)
end
natives.vehicle.set_vehicle_forward_speed_xy = natives.VEHICLE.SET_VEHICLE_FORWARD_SPEED_XY

--[[
This native makes the vehicle stop immediately, as happens when we enter a MP garage.

. distance defines how far it will travel until stopping. Garage doors use 3.0.

. If killEngine is set to 1, you cannot resume driving the vehicle once it stops. This looks like is a bitmapped integer.
]]
function natives.VEHICLE.BRING_VEHICLE_TO_HALT(--[[Vehicle]] vehicle, --[[float]] distance, --[[int]] duration, --[[BOOL]] unknown) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.BRING_VEHICLE_TO_HALT' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(distance) == "number", "Arg #2 (distance) must be a number.")
	assert(type(duration) == "number", "Arg #3 (duration) must be a number.")
	assert(type(unknown) == "boolean", "Arg #4 (unknown) must be a boolean.")

	local result = native_call(0x260BE8F09E326A20, vehicle, distance, duration, unknown)
end
natives.vehicle.bring_vehicle_to_halt = natives.VEHICLE.BRING_VEHICLE_TO_HALT

function natives.VEHICLE.SET_VEHICLE_STEER_FOR_BUILDINGS(--[[Vehicle]] vehicle, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_STEER_FOR_BUILDINGS' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xDCE97BDF8A0EABC8, vehicle, p1)
end
natives.vehicle.set_vehicle_steer_for_buildings = natives.VEHICLE.SET_VEHICLE_STEER_FOR_BUILDINGS

function natives.VEHICLE.SET_VEHICLE_CAUSES_SWERVING(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_CAUSES_SWERVING' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x9849DE24FCF23CCC, vehicle, toggle)
end
natives.vehicle.set_vehicle_causes_swerving = natives.VEHICLE.SET_VEHICLE_CAUSES_SWERVING

function natives.VEHICLE.SET_IGNORE_PLANES_SMALL_PITCH_CHANGE(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_IGNORE_PLANES_SMALL_PITCH_CHANGE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x8664170EF165C4A6, p0, p1)
end
natives.vehicle.set_ignore_planes_small_pitch_change = natives.VEHICLE.SET_IGNORE_PLANES_SMALL_PITCH_CHANGE

--[[
Stops CTaskBringVehicleToHalt
]]
function natives.VEHICLE.STOP_BRINGING_VEHICLE_TO_HALT(--[[Vehicle]] vehicle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.STOP_BRINGING_VEHICLE_TO_HALT' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x7C06330BFDDA182E, vehicle)
end
natives.vehicle.stop_bringing_vehicle_to_halt = natives.VEHICLE.STOP_BRINGING_VEHICLE_TO_HALT

--[[
Returns true if vehicle is halted by BRING_VEHICLE_TO_HALT
]]
function natives.VEHICLE.IS_VEHICLE_BEING_BROUGHT_TO_HALT(--[[Vehicle]] vehicle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.IS_VEHICLE_BEING_BROUGHT_TO_HALT' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0xC69BB1D832A710EF, vehicle)
	return result:__tointeger() ~= 0
end
natives.vehicle.is_vehicle_being_brought_to_halt = natives.VEHICLE.IS_VEHICLE_BEING_BROUGHT_TO_HALT

--[[
0.0 = Lowest 1.0 = Highest. This is best to be used if you wanna pick-up a car since un-realistically on GTA V forklifts can't pick up much of anything due to vehicle mass. If you put this under a car then set it above 0.0 to a 'lifted-value' it will raise the car with no issue lol
]]
function natives.VEHICLE.SET_FORKLIFT_FORK_HEIGHT(--[[Vehicle]] vehicle, --[[float]] height) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_FORKLIFT_FORK_HEIGHT' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(height) == "number", "Arg #2 (height) must be a number.")

	local result = native_call(0x37EBBF3117BD6A25, vehicle, height)
end
natives.vehicle.set_forklift_fork_height = natives.VEHICLE.SET_FORKLIFT_FORK_HEIGHT

function natives.VEHICLE.IS_ENTITY_ATTACHED_TO_HANDLER_FRAME(--[[Vehicle]] vehicle, --[[Entity]] entity) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.IS_ENTITY_ATTACHED_TO_HANDLER_FRAME' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(entity) == "number", "Arg #2 (entity) must be a number.")

	local result = native_call(0x57715966069157AD, vehicle, entity)
	return result:__tointeger() ~= 0
end
natives.vehicle.is_entity_attached_to_handler_frame = natives.VEHICLE.IS_ENTITY_ATTACHED_TO_HANDLER_FRAME

function natives.VEHICLE.IS_ANY_ENTITY_ATTACHED_TO_HANDLER_FRAME(--[[Vehicle]] vehicle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.IS_ANY_ENTITY_ATTACHED_TO_HANDLER_FRAME' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x62CA17B74C435651, vehicle)
	return result:__tointeger() ~= 0
end
natives.vehicle.is_any_entity_attached_to_handler_frame = natives.VEHICLE.IS_ANY_ENTITY_ATTACHED_TO_HANDLER_FRAME

--[[
Finds the vehicle that is carrying this entity with a handler frame.
The model of the entity must be prop_contr_03b_ld or the function will return 0.
]]
function natives.VEHICLE.FIND_HANDLER_VEHICLE_CONTAINER_IS_ATTACHED_TO(--[[Entity]] entity) -- Returns Vehicle
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.FIND_HANDLER_VEHICLE_CONTAINER_IS_ATTACHED_TO' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0x375E7FC44F21C8AB, entity)
	return result:__tointeger()
end
natives.vehicle.find_handler_vehicle_container_is_attached_to = natives.VEHICLE.FIND_HANDLER_VEHICLE_CONTAINER_IS_ATTACHED_TO

function natives.VEHICLE.IS_HANDLER_FRAME_LINED_UP_WITH_CONTAINER(--[[Vehicle]] vehicle, --[[Entity]] entity) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.IS_HANDLER_FRAME_LINED_UP_WITH_CONTAINER' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(entity) == "number", "Arg #2 (entity) must be a number.")

	local result = native_call(0x89D630CF5EA96D23, vehicle, entity)
	return result:__tointeger() ~= 0
end
natives.vehicle.is_handler_frame_lined_up_with_container = natives.VEHICLE.IS_HANDLER_FRAME_LINED_UP_WITH_CONTAINER

function natives.VEHICLE.ATTACH_CONTAINER_TO_HANDLER_FRAME_WHEN_LINED_UP(--[[Vehicle]] vehicle, --[[Entity]] entity) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.ATTACH_CONTAINER_TO_HANDLER_FRAME_WHEN_LINED_UP' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(entity) == "number", "Arg #2 (entity) must be a number.")

	local result = native_call(0x6A98C2ECF57FA5D4, vehicle, entity)
end
natives.vehicle.attach_container_to_handler_frame_when_lined_up = natives.VEHICLE.ATTACH_CONTAINER_TO_HANDLER_FRAME_WHEN_LINED_UP

function natives.VEHICLE.DETACH_CONTAINER_FROM_HANDLER_FRAME(--[[Vehicle]] vehicle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.DETACH_CONTAINER_FROM_HANDLER_FRAME' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x7C0043FDFF6436BC, vehicle)
end
natives.vehicle.detach_container_from_handler_frame = natives.VEHICLE.DETACH_CONTAINER_FROM_HANDLER_FRAME

--[[
SET_VEHICLE_D[ISABLE_HEIGHT_MAP_AVOIDANCE]?
]]
function natives.VEHICLE.SET_VEHICLE_DISABLE_HEIGHT_MAP_AVOIDANCE(--[[Vehicle]] vehicle, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_DISABLE_HEIGHT_MAP_AVOIDANCE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0x8AA9180DE2FEDD45, vehicle, p1)
end
natives.vehicle.set_vehicle_disable_height_map_avoidance = natives.VEHICLE.SET_VEHICLE_DISABLE_HEIGHT_MAP_AVOIDANCE

function natives.VEHICLE.SET_BOAT_DISABLE_AVOIDANCE(--[[Vehicle]] vehicle, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_BOAT_DISABLE_AVOIDANCE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0x0A6A279F3AA4FD70, vehicle, p1)
end
natives.vehicle.set_boat_disable_avoidance = natives.VEHICLE.SET_BOAT_DISABLE_AVOIDANCE

function natives.VEHICLE.IS_HELI_LANDING_AREA_BLOCKED(--[[Vehicle]] vehicle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.IS_HELI_LANDING_AREA_BLOCKED' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x634148744F385576, vehicle)
	return result:__tointeger() ~= 0
end
natives.vehicle.is_heli_landing_area_blocked = natives.VEHICLE.IS_HELI_LANDING_AREA_BLOCKED

--[[
Used on helicopters and blimps during the CTaskVehicleLand task. Sets a value on the task to 10f
]]
function natives.VEHICLE.SET_SHORT_SLOWDOWN_FOR_LANDING(--[[Vehicle]] vehicle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_SHORT_SLOWDOWN_FOR_LANDING' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x107A473D7A6647A9, vehicle)
end
natives.vehicle.set_short_slowdown_for_landing = natives.VEHICLE.SET_SHORT_SLOWDOWN_FOR_LANDING

function natives.VEHICLE.SET_HELI_TURBULENCE_SCALAR(--[[Vehicle]] vehicle, --[[float]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_HELI_TURBULENCE_SCALAR' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xE6F13851780394DA, vehicle, p1)
end
natives.vehicle.set_heli_turbulence_scalar = natives.VEHICLE.SET_HELI_TURBULENCE_SCALAR

--[[
Initially used in Max Payne 3, that's why we know the name.
]]
function natives.VEHICLE.SET_CAR_BOOT_OPEN(--[[Vehicle]] vehicle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_CAR_BOOT_OPEN' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0xFC40CBF7B90CA77C, vehicle)
end
natives.vehicle.set_car_boot_open = natives.VEHICLE.SET_CAR_BOOT_OPEN

--[[
"To burst tyres VEHICLE::SET_VEHICLE_TYRE_BURST(vehicle, 0, true, 1000.0)
to burst all tyres type it 8 times where p1 = 0 to 7.

p3 seems to be how much damage it has taken. 0 doesn't deflate them, 1000 completely deflates them.

'0 = wheel_lf / bike, plane or jet front
'1 = wheel_rf
'2 = wheel_lm / in 6 wheels trailer, plane or jet is first one on left
'3 = wheel_rm / in 6 wheels trailer, plane or jet is first one on right
'4 = wheel_lr / bike rear / in 6 wheels trailer, plane or jet is last one on left
'5 = wheel_rr / in 6 wheels trailer, plane or jet is last one on right
'45 = 6 wheels trailer mid wheel left
'47 = 6 wheels trailer mid wheel right
]]
function natives.VEHICLE.SET_VEHICLE_TYRE_BURST(--[[Vehicle]] vehicle, --[[int]] index, --[[BOOL]] onRim, --[[float]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_TYRE_BURST' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(index) == "number", "Arg #2 (index) must be a number.")
	assert(type(onRim) == "boolean", "Arg #3 (onRim) must be a boolean.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0xEC6A202EE4960385, vehicle, index, onRim, p3)
end
natives.vehicle.set_vehicle_tyre_burst = natives.VEHICLE.SET_VEHICLE_TYRE_BURST

--[[
Closes all doors of a vehicle:
]]
function natives.VEHICLE.SET_VEHICLE_DOORS_SHUT(--[[Vehicle]] vehicle, --[[BOOL]] closeInstantly) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_DOORS_SHUT' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(closeInstantly) == "boolean", "Arg #2 (closeInstantly) must be a boolean.")

	local result = native_call(0x781B3D62BB013EF5, vehicle, closeInstantly)
end
natives.vehicle.set_vehicle_doors_shut = natives.VEHICLE.SET_VEHICLE_DOORS_SHUT

--[[
Allows you to toggle bulletproof tires.
]]
function natives.VEHICLE.SET_VEHICLE_TYRES_CAN_BURST(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_TYRES_CAN_BURST' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xEB9DC3C7D8596C46, vehicle, toggle)
end
natives.vehicle.set_vehicle_tyres_can_burst = natives.VEHICLE.SET_VEHICLE_TYRES_CAN_BURST

function natives.VEHICLE.GET_VEHICLE_TYRES_CAN_BURST(--[[Vehicle]] vehicle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_VEHICLE_TYRES_CAN_BURST' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x678B9BB8C3F58FEB, vehicle)
	return result:__tointeger() ~= 0
end
natives.vehicle.get_vehicle_tyres_can_burst = natives.VEHICLE.GET_VEHICLE_TYRES_CAN_BURST

function natives.VEHICLE.SET_VEHICLE_WHEELS_CAN_BREAK(--[[Vehicle]] vehicle, --[[BOOL]] enabled) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_WHEELS_CAN_BREAK' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(enabled) == "boolean", "Arg #2 (enabled) must be a boolean.")

	local result = native_call(0x29B18B4FD460CA8F, vehicle, enabled)
end
natives.vehicle.set_vehicle_wheels_can_break = natives.VEHICLE.SET_VEHICLE_WHEELS_CAN_BREAK

--[[
doorId: see SET_VEHICLE_DOOR_SHUT
]]
function natives.VEHICLE.SET_VEHICLE_DOOR_OPEN(--[[Vehicle]] vehicle, --[[int]] doorId, --[[BOOL]] loose, --[[BOOL]] openInstantly) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_DOOR_OPEN' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(doorId) == "number", "Arg #2 (doorId) must be a number.")
	assert(type(loose) == "boolean", "Arg #3 (loose) must be a boolean.")
	assert(type(openInstantly) == "boolean", "Arg #4 (openInstantly) must be a boolean.")

	local result = native_call(0x7C65DAC73C35C862, vehicle, doorId, loose, openInstantly)
end
natives.vehicle.set_vehicle_door_open = natives.VEHICLE.SET_VEHICLE_DOOR_OPEN

--[[
doorId: see SET_VEHICLE_DOOR_SHUT

Usually used alongside other vehicle door natives.
]]
function natives.VEHICLE.SET_VEHICLE_DOOR_AUTO_LOCK(--[[Vehicle]] vehicle, --[[int]] doorId, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_DOOR_AUTO_LOCK' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(doorId) == "number", "Arg #2 (doorId) must be a number.")
	assert(type(toggle) == "boolean", "Arg #3 (toggle) must be a boolean.")

	local result = native_call(0x3B458DDB57038F08, vehicle, doorId, toggle)
end
natives.vehicle.set_vehicle_door_auto_lock = natives.VEHICLE.SET_VEHICLE_DOOR_AUTO_LOCK

function natives.VEHICLE.SET_FLEEING_VEHICLES_USE_SWITCHED_OFF_NODES(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_FLEEING_VEHICLES_USE_SWITCHED_OFF_NODES' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xA247F9EF01D8082E, p0)
end
natives.vehicle.set_fleeing_vehicles_use_switched_off_nodes = natives.VEHICLE.SET_FLEEING_VEHICLES_USE_SWITCHED_OFF_NODES

--[[
windowIndex:
0 = Front Right Window
1 = Front Left Window
2 = Back Right Window
3 = Back Left Window
4 = Unknown
5 = Unknown
6 = Windscreen
7 = Rear Windscreen
]]
function natives.VEHICLE.REMOVE_VEHICLE_WINDOW(--[[Vehicle]] vehicle, --[[int]] windowIndex) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.REMOVE_VEHICLE_WINDOW' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(windowIndex) == "number", "Arg #2 (windowIndex) must be a number.")

	local result = native_call(0xA711568EEDB43069, vehicle, windowIndex)
end
natives.vehicle.remove_vehicle_window = natives.VEHICLE.REMOVE_VEHICLE_WINDOW

--[[
Roll down all the windows of the vehicle passed through the first parameter.
]]
function natives.VEHICLE.ROLL_DOWN_WINDOWS(--[[Vehicle]] vehicle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.ROLL_DOWN_WINDOWS' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x85796B0549DDE156, vehicle)
end
natives.vehicle.roll_down_windows = natives.VEHICLE.ROLL_DOWN_WINDOWS

--[[
windowIndex:
0 = Front Right Window
1 = Front Left Window
2 = Back Right Window
3 = Back Left Window
]]
function natives.VEHICLE.ROLL_DOWN_WINDOW(--[[Vehicle]] vehicle, --[[int]] windowIndex) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.ROLL_DOWN_WINDOW' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(windowIndex) == "number", "Arg #2 (windowIndex) must be a number.")

	local result = native_call(0x7AD9E6CE657D69E3, vehicle, windowIndex)
end
natives.vehicle.roll_down_window = natives.VEHICLE.ROLL_DOWN_WINDOW

--[[
Window indexes:
0 = Front Left Window
1 = Front Right Window
2 = Back Left Window
3 = Back Right Window
]]
function natives.VEHICLE.ROLL_UP_WINDOW(--[[Vehicle]] vehicle, --[[int]] windowIndex) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.ROLL_UP_WINDOW' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(windowIndex) == "number", "Arg #2 (windowIndex) must be a number.")

	local result = native_call(0x602E548F46E24D59, vehicle, windowIndex)
end
natives.vehicle.roll_up_window = natives.VEHICLE.ROLL_UP_WINDOW

--[[
`index` = 0 to 13
0 = front right window
1 = front left window
2 = rear right window
3 = rear left window
4 = unsure
5 = unsure
6 = windowscreen
7 = rear windowscreen
8 = unsure
9 = unsure
10 = unsure
11 = unsure
12 = unsure
13 = unsure
]]
function natives.VEHICLE.SMASH_VEHICLE_WINDOW(--[[Vehicle]] vehicle, --[[int]] index) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SMASH_VEHICLE_WINDOW' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(index) == "number", "Arg #2 (index) must be a number.")

	local result = native_call(0x9E5B5E4D2CCD2259, vehicle, index)
end
natives.vehicle.smash_vehicle_window = natives.VEHICLE.SMASH_VEHICLE_WINDOW

--[[
`index` = 0 to 13
0 = front right window
1 = front left window
2 = rear right window
3 = rear left window
4 = unsure
5 = unsure
6 = windowscreen
7 = rear windowscreen
8 = unsure
9 = unsure
10 = unsure
11 = unsure
12 = unsure
13 = unsure

Additional information: FIX_VEHICLE_WINDOW (0x140D0BB88) references an array of bone vehicle indices (0x141D4B3E0) { 2Ah, 2Bh, 2Ch, 2Dh, 2Eh, 2Fh, 28h, 29h } that correspond to: window_lf, window_rf, window_lr, window_rr, window_lm, window_rm, windscreen, windscreen_r. This array is used by most vehwindow natives.

Also, this function is coded to not work on vehicles of type: CBike, Bmx, CBoat, CTrain, and CSubmarine.
]]
function natives.VEHICLE.FIX_VEHICLE_WINDOW(--[[Vehicle]] vehicle, --[[int]] index) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.FIX_VEHICLE_WINDOW' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(index) == "number", "Arg #2 (index) must be a number.")

	local result = native_call(0x772282EBEB95E682, vehicle, index)
end
natives.vehicle.fix_vehicle_window = natives.VEHICLE.FIX_VEHICLE_WINDOW

--[[
Detaches the vehicle's windscreen.
For further information, see : gtaforums.com/topic/859570-glass/#entry1068894566
]]
function natives.VEHICLE.POP_OUT_VEHICLE_WINDSCREEN(--[[Vehicle]] vehicle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.POP_OUT_VEHICLE_WINDSCREEN' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x6D645D59FB5F5AD3, vehicle)
end
natives.vehicle.pop_out_vehicle_windscreen = natives.VEHICLE.POP_OUT_VEHICLE_WINDSCREEN

--[[
POPOUT_TEMP_ACTION_IN_DIRECTION?
]]
function natives.VEHICLE.POP_OFF_VEHICLE_ROOF_WITH_IMPULSE(--[[Vehicle]] vehicle, --[[float]] x, --[[float]] y, --[[float]] z) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.POP_OFF_VEHICLE_ROOF_WITH_IMPULSE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")

	local result = native_call(0xE38CB9D7D39FDBCC, vehicle, x, y, z)
end
natives.vehicle.pop_off_vehicle_roof_with_impulse = natives.VEHICLE.POP_OFF_VEHICLE_ROOF_WITH_IMPULSE

--[[
set's if the vehicle has lights or not.
not an on off toggle.
p1 = 0 ;vehicle normal lights, off then lowbeams, then highbeams
p1 = 1 ;vehicle doesn't have lights, always off
p1 = 2 ;vehicle has always on lights
p1 = 3 ;or even larger like 4,5,... normal lights like =1
note1: when using =2 on day it's lowbeam,highbeam
but at night it's lowbeam,lowbeam,highbeam
note2: when using =0 it's affected by day or night for highbeams don't exist in daytime.
]]
function natives.VEHICLE.SET_VEHICLE_LIGHTS(--[[Vehicle]] vehicle, --[[int]] state) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_LIGHTS' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(state) == "number", "Arg #2 (state) must be a number.")

	local result = native_call(0x34E710FF01247C5A, vehicle, state)
end
natives.vehicle.set_vehicle_lights = natives.VEHICLE.SET_VEHICLE_LIGHTS

function natives.VEHICLE.SET_VEHICLE_USE_PLAYER_LIGHT_SETTINGS(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_USE_PLAYER_LIGHT_SETTINGS' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xC45C27EF50F36ADC, vehicle, toggle)
end
natives.vehicle.set_vehicle_use_player_light_settings = natives.VEHICLE.SET_VEHICLE_USE_PLAYER_LIGHT_SETTINGS

--[[
p1 can be either 0, 1 or 2.

Determines how vehicle lights behave when toggled.

0 = Default (Lights can be toggled between off, normal and high beams)
1 = Lights Disabled (Lights are fully disabled, cannot be toggled)
2 = Always On (Lights can be toggled between normal and high beams)
]]
function natives.VEHICLE.SET_VEHICLE_HEADLIGHT_SHADOWS(--[[Vehicle]] vehicle, --[[int]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_HEADLIGHT_SHADOWS' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x1FD09E7390A74D54, vehicle, p1)
end
natives.vehicle.set_vehicle_headlight_shadows = natives.VEHICLE.SET_VEHICLE_HEADLIGHT_SHADOWS

function natives.VEHICLE.SET_VEHICLE_ALARM(--[[Vehicle]] vehicle, --[[BOOL]] state) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_ALARM' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(state) == "boolean", "Arg #2 (state) must be a boolean.")

	local result = native_call(0xCDE5E70C1DDB954C, vehicle, state)
end
natives.vehicle.set_vehicle_alarm = natives.VEHICLE.SET_VEHICLE_ALARM

function natives.VEHICLE.START_VEHICLE_ALARM(--[[Vehicle]] vehicle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.START_VEHICLE_ALARM' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0xB8FF7AB45305C345, vehicle)
end
natives.vehicle.start_vehicle_alarm = natives.VEHICLE.START_VEHICLE_ALARM

function natives.VEHICLE.IS_VEHICLE_ALARM_ACTIVATED(--[[Vehicle]] vehicle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.IS_VEHICLE_ALARM_ACTIVATED' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x4319E335B71FFF34, vehicle)
	return result:__tointeger() ~= 0
end
natives.vehicle.is_vehicle_alarm_activated = natives.VEHICLE.IS_VEHICLE_ALARM_ACTIVATED

function natives.VEHICLE.SET_VEHICLE_INTERIORLIGHT(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_INTERIORLIGHT' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xBC2042F090AF6AD3, vehicle, toggle)
end
natives.vehicle.set_vehicle_interiorlight = natives.VEHICLE.SET_VEHICLE_INTERIORLIGHT

--[[
Sets some bit of vehicle
]]
function natives.VEHICLE.SET_VEHICLE_FORCE_INTERIORLIGHT(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_FORCE_INTERIORLIGHT' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x8821196D91FA2DE5, vehicle, toggle)
end
natives.vehicle.set_vehicle_force_interiorlight = natives.VEHICLE.SET_VEHICLE_FORCE_INTERIORLIGHT

--[[
multiplier = brightness of head lights.
this value isn't capped afaik.

multiplier = 0.0 no lights
multiplier = 1.0 default game value

]]
function natives.VEHICLE.SET_VEHICLE_LIGHT_MULTIPLIER(--[[Vehicle]] vehicle, --[[float]] multiplier) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_LIGHT_MULTIPLIER' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(multiplier) == "number", "Arg #2 (multiplier) must be a number.")

	local result = native_call(0xB385454F8791F57C, vehicle, multiplier)
end
natives.vehicle.set_vehicle_light_multiplier = natives.VEHICLE.SET_VEHICLE_LIGHT_MULTIPLIER

function natives.VEHICLE.ATTACH_VEHICLE_TO_TRAILER(--[[Vehicle]] vehicle, --[[Vehicle]] trailer, --[[float]] radius) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.ATTACH_VEHICLE_TO_TRAILER' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(trailer) == "number", "Arg #2 (trailer) must be a number.")
	assert(type(radius) == "number", "Arg #3 (radius) must be a number.")

	local result = native_call(0x3C7D42D58F770B54, vehicle, trailer, radius)
end
natives.vehicle.attach_vehicle_to_trailer = natives.VEHICLE.ATTACH_VEHICLE_TO_TRAILER

--[[
This is the proper way of attaching vehicles to the car carrier, it's what Rockstar uses. Video Demo: https://www.youtube.com/watch?v=2lVEIzf7bgo
]]
function natives.VEHICLE.ATTACH_VEHICLE_ON_TO_TRAILER(--[[Vehicle]] vehicle, --[[Vehicle]] trailer, --[[float]] offsetX, --[[float]] offsetY, --[[float]] offsetZ, --[[float]] coordsX, --[[float]] coordsY, --[[float]] coordsZ, --[[float]] rotationX, --[[float]] rotationY, --[[float]] rotationZ, --[[float]] disableCollisions) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.ATTACH_VEHICLE_ON_TO_TRAILER' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(trailer) == "number", "Arg #2 (trailer) must be a number.")
	assert(type(offsetX) == "number", "Arg #3 (offsetX) must be a number.")
	assert(type(offsetY) == "number", "Arg #4 (offsetY) must be a number.")
	assert(type(offsetZ) == "number", "Arg #5 (offsetZ) must be a number.")
	assert(type(coordsX) == "number", "Arg #6 (coordsX) must be a number.")
	assert(type(coordsY) == "number", "Arg #7 (coordsY) must be a number.")
	assert(type(coordsZ) == "number", "Arg #8 (coordsZ) must be a number.")
	assert(type(rotationX) == "number", "Arg #9 (rotationX) must be a number.")
	assert(type(rotationY) == "number", "Arg #10 (rotationY) must be a number.")
	assert(type(rotationZ) == "number", "Arg #11 (rotationZ) must be a number.")
	assert(type(disableCollisions) == "number", "Arg #12 (disableCollisions) must be a number.")

	local result = native_call(0x16B5E274BDE402F8, vehicle, trailer, offsetX, offsetY, offsetZ, coordsX, coordsY, coordsZ, rotationX, rotationY, rotationZ, disableCollisions)
end
natives.vehicle.attach_vehicle_on_to_trailer = natives.VEHICLE.ATTACH_VEHICLE_ON_TO_TRAILER

function natives.VEHICLE.STABILISE_ENTITY_ATTACHED_TO_HELI(--[[Vehicle]] vehicle, --[[Entity]] entity, --[[float]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.STABILISE_ENTITY_ATTACHED_TO_HELI' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(entity) == "number", "Arg #2 (entity) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0x374706271354CB18, vehicle, entity, p2)
end
natives.vehicle.stabilise_entity_attached_to_heli = natives.VEHICLE.STABILISE_ENTITY_ATTACHED_TO_HELI

function natives.VEHICLE.DETACH_VEHICLE_FROM_TRAILER(--[[Vehicle]] vehicle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.DETACH_VEHICLE_FROM_TRAILER' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x90532EDF0D2BDD86, vehicle)
end
natives.vehicle.detach_vehicle_from_trailer = natives.VEHICLE.DETACH_VEHICLE_FROM_TRAILER

function natives.VEHICLE.IS_VEHICLE_ATTACHED_TO_TRAILER(--[[Vehicle]] vehicle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.IS_VEHICLE_ATTACHED_TO_TRAILER' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0xE7CF3C4F9F489F0C, vehicle)
	return result:__tointeger() ~= 0
end
natives.vehicle.is_vehicle_attached_to_trailer = natives.VEHICLE.IS_VEHICLE_ATTACHED_TO_TRAILER

function natives.VEHICLE.SET_TRAILER_INVERSE_MASS_SCALE(--[[Vehicle]] vehicle, --[[float]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_TRAILER_INVERSE_MASS_SCALE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x2A8F319B392E7B3F, vehicle, p1)
end
natives.vehicle.set_trailer_inverse_mass_scale = natives.VEHICLE.SET_TRAILER_INVERSE_MASS_SCALE

--[[
in the decompiled scripts, seems to be always called on the vehicle right after being attached to a trailer.
]]
function natives.VEHICLE.SET_TRAILER_LEGS_RAISED(--[[Vehicle]] vehicle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_TRAILER_LEGS_RAISED' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x95CF53B3D687F9FA, vehicle)
end
natives.vehicle.set_trailer_legs_raised = natives.VEHICLE.SET_TRAILER_LEGS_RAISED

function natives.VEHICLE.SET_TRAILER_LEGS_LOWERED(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_TRAILER_LEGS_LOWERED' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x878C75C09FBDB942, p0)
end
natives.vehicle.set_trailer_legs_lowered = natives.VEHICLE.SET_TRAILER_LEGS_LOWERED

--[[
tyreIndex = 0 to 4 on normal vehicles

'0 = wheel_lf / bike, plane or jet front
'1 = wheel_rf
'2 = wheel_lm / in 6 wheels trailer, plane or jet is first one on left
'3 = wheel_rm / in 6 wheels trailer, plane or jet is first one on right
'4 = wheel_lr / bike rear / in 6 wheels trailer, plane or jet is last one on left
'5 = wheel_rr / in 6 wheels trailer, plane or jet is last one on right
'45 = 6 wheels trailer mid wheel left
'47 = 6 wheels trailer mid wheel right
]]
function natives.VEHICLE.SET_VEHICLE_TYRE_FIXED(--[[Vehicle]] vehicle, --[[int]] tyreIndex) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_TYRE_FIXED' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(tyreIndex) == "number", "Arg #2 (tyreIndex) must be a number.")

	local result = native_call(0x6E13FC662B882D1D, vehicle, tyreIndex)
end
natives.vehicle.set_vehicle_tyre_fixed = natives.VEHICLE.SET_VEHICLE_TYRE_FIXED

--[[
Sets a vehicle's license plate text.  8 chars maximum.

Example:
Ped playerPed = PLAYER::PLAYER_PED_ID();
Vehicle veh = PED::GET_VEHICLE_PED_IS_USING(playerPed);
char *plateText = "KING";
VEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT(veh, plateText);
]]
function natives.VEHICLE.SET_VEHICLE_NUMBER_PLATE_TEXT(--[[Vehicle]] vehicle, --[[const char*]] plateText) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_NUMBER_PLATE_TEXT' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(plateText) == "string", "Arg #2 (plateText) must be a string.")

	local result = native_call(0x95A88F0B409CDA47, vehicle, plateText)
end
natives.vehicle.set_vehicle_number_plate_text = natives.VEHICLE.SET_VEHICLE_NUMBER_PLATE_TEXT

--[[
Returns the license plate text from a vehicle.  8 chars maximum.
]]
function natives.VEHICLE.GET_VEHICLE_NUMBER_PLATE_TEXT(--[[Vehicle]] vehicle) -- Returns const char*
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_VEHICLE_NUMBER_PLATE_TEXT' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x7CE1CCB9B293020E, vehicle)
	return result:__tostring(true)
end
natives.vehicle.get_vehicle_number_plate_text = natives.VEHICLE.GET_VEHICLE_NUMBER_PLATE_TEXT

--[[
Returns the number of *types* of licence plates, enumerated below in SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX.
]]
function natives.VEHICLE.GET_NUMBER_OF_VEHICLE_NUMBER_PLATES() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_NUMBER_OF_VEHICLE_NUMBER_PLATES' due to disabled trusted mode")

	local result = native_call(0x4C4D6B2644F458CB)
	return result:__tointeger()
end
natives.vehicle.get_number_of_vehicle_number_plates = natives.VEHICLE.GET_NUMBER_OF_VEHICLE_NUMBER_PLATES

--[[
Plates:
Blue/White - 0
Yellow/black - 1
Yellow/Blue - 2
Blue/White2 - 3
Blue/White3 - 4
Yankton - 5
]]
function natives.VEHICLE.SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX(--[[Vehicle]] vehicle, --[[int]] plateIndex) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(plateIndex) == "number", "Arg #2 (plateIndex) must be a number.")

	local result = native_call(0x9088EB5A43FFB0A1, vehicle, plateIndex)
end
natives.vehicle.set_vehicle_number_plate_text_index = natives.VEHICLE.SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX

--[[
Returns the PlateType of a vehicle
      Blue_on_White_1 = 3,
      Blue_on_White_2 = 0,
      Blue_on_White_3 = 4,
      Yellow_on_Blue = 2,
       Yellow_on_Black = 1,
      North_Yankton = 5,
]]
function natives.VEHICLE.GET_VEHICLE_NUMBER_PLATE_TEXT_INDEX(--[[Vehicle]] vehicle) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_VEHICLE_NUMBER_PLATE_TEXT_INDEX' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0xF11BC2DD9A3E7195, vehicle)
	return result:__tointeger()
end
natives.vehicle.get_vehicle_number_plate_text_index = natives.VEHICLE.GET_VEHICLE_NUMBER_PLATE_TEXT_INDEX

function natives.VEHICLE.SET_RANDOM_TRAINS(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_RANDOM_TRAINS' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x80D9F74197EA47D9, toggle)
end
natives.vehicle.set_random_trains = natives.VEHICLE.SET_RANDOM_TRAINS

--[[
Train models HAVE TO be loaded (requested) before you use this.
For variation 15 - request:

freight
freightcar
freightgrain
freightcont1
freightcont2
freighttrailer


]]
function natives.VEHICLE.CREATE_MISSION_TRAIN(--[[int]] variation, --[[float]] x, --[[float]] y, --[[float]] z, --[[BOOL]] direction, --[[Any]] p5, --[[Any]] p6) -- Returns Vehicle
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.CREATE_MISSION_TRAIN' due to disabled trusted mode")

	assert(type(variation) == "number", "Arg #1 (variation) must be a number.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")
	assert(type(direction) == "boolean", "Arg #5 (direction) must be a boolean.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")
	assert(type(p6) == "number", "Arg #7 (p6) must be a number.")

	local result = native_call(0x63C6CCA8E68AE8C8, variation, x, y, z, direction, p5, p6)
	return result:__tointeger()
end
natives.vehicle.create_mission_train = natives.VEHICLE.CREATE_MISSION_TRAIN

--[[
Toggles whether ambient trains can spawn on the specified track or not

`trackId` is the internal id of the train track to switch.
`state` is whether ambient trains can spawn or not

trackIds
0 (`trains1.dat`) Main track around SA
1 (`trains2.dat`) Davis Quartz Quarry branch
2 (`trains3.dat`) Second track alongside live track along Roy Lewenstein Blv.
3 (`trains4.dat`) Metro track circuit
4 (`trains5.dat`) Branch in Mirror Park Railyard
5 (`trains6.dat`) Branch in Mirror Park Railyard
6 (`trains7.dat`) LS branch to Mirror Park Railyard
7 (`trains8.dat`) Overground part of metro track along Forum Dr.
8 (`trains9.dat`) Branch to Mirror Park Railyard
9 (`trains10.dat`) Yankton train
10 (`trains11.dat`) Part of metro track near mission row
11 (`trains12.dat`) Yankton prologue mission train
Full list of all train tracks + track nodes by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/traintracks.json
]]
function natives.VEHICLE.SWITCH_TRAIN_TRACK(--[[int]] trackId, --[[BOOL]] state) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SWITCH_TRAIN_TRACK' due to disabled trusted mode")

	assert(type(trackId) == "number", "Arg #1 (trackId) must be a number.")
	assert(type(state) == "boolean", "Arg #2 (state) must be a boolean.")

	local result = native_call(0xFD813BB7DB977F20, trackId, state)
end
natives.vehicle.switch_train_track = natives.VEHICLE.SWITCH_TRAIN_TRACK

--[[
Only called once inside main_persitant with the parameters p0 = 0, p1 = 120000

trackIndex: 0 - 26
Full list of all train tracks + track nodes by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/traintracks.json
]]
function natives.VEHICLE.SET_TRAIN_TRACK_SPAWN_FREQUENCY(--[[int]] trackIndex, --[[int]] frequency) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_TRAIN_TRACK_SPAWN_FREQUENCY' due to disabled trusted mode")

	assert(type(trackIndex) == "number", "Arg #1 (trackIndex) must be a number.")
	assert(type(frequency) == "number", "Arg #2 (frequency) must be a number.")

	local result = native_call(0x21973BBF8D17EDFA, trackIndex, frequency)
end
natives.vehicle.set_train_track_spawn_frequency = natives.VEHICLE.SET_TRAIN_TRACK_SPAWN_FREQUENCY

function natives.VEHICLE.ALLOW_TRAIN_TO_BE_REMOVED_BY_POPULATION(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.ALLOW_TRAIN_TO_BE_REMOVED_BY_POPULATION' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x2310A8F9421EBF43, p0)
end
natives.vehicle.allow_train_to_be_removed_by_population = natives.VEHICLE.ALLOW_TRAIN_TO_BE_REMOVED_BY_POPULATION

function natives.VEHICLE.DELETE_ALL_TRAINS() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.DELETE_ALL_TRAINS' due to disabled trusted mode")

	local result = native_call(0x736A718577F39C7D)
end
natives.vehicle.delete_all_trains = natives.VEHICLE.DELETE_ALL_TRAINS

function natives.VEHICLE.SET_TRAIN_SPEED(--[[Vehicle]] train, --[[float]] speed) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_TRAIN_SPEED' due to disabled trusted mode")

	assert(type(train) == "number", "Arg #1 (train) must be a number.")
	assert(type(speed) == "number", "Arg #2 (speed) must be a number.")

	local result = native_call(0xAA0BC91BE0B796E3, train, speed)
end
natives.vehicle.set_train_speed = natives.VEHICLE.SET_TRAIN_SPEED

function natives.VEHICLE.SET_TRAIN_CRUISE_SPEED(--[[Vehicle]] train, --[[float]] speed) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_TRAIN_CRUISE_SPEED' due to disabled trusted mode")

	assert(type(train) == "number", "Arg #1 (train) must be a number.")
	assert(type(speed) == "number", "Arg #2 (speed) must be a number.")

	local result = native_call(0x16469284DB8C62B5, train, speed)
end
natives.vehicle.set_train_cruise_speed = natives.VEHICLE.SET_TRAIN_CRUISE_SPEED

function natives.VEHICLE.SET_RANDOM_BOATS(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_RANDOM_BOATS' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x84436EC293B1415F, toggle)
end
natives.vehicle.set_random_boats = natives.VEHICLE.SET_RANDOM_BOATS

function natives.VEHICLE.SET_RANDOM_BOATS_MP(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_RANDOM_BOATS_MP' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0xDA5E12F728DB30CA, toggle)
end
natives.vehicle.set_random_boats_mp = natives.VEHICLE.SET_RANDOM_BOATS_MP

function natives.VEHICLE.SET_GARBAGE_TRUCKS(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_GARBAGE_TRUCKS' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x2AFD795EEAC8D30D, toggle)
end
natives.vehicle.set_garbage_trucks = natives.VEHICLE.SET_GARBAGE_TRUCKS

--[[
Maximum amount of vehicles with vehicle stuck check appears to be 16.
]]
function natives.VEHICLE.DOES_VEHICLE_HAVE_STUCK_VEHICLE_CHECK(--[[Vehicle]] vehicle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.DOES_VEHICLE_HAVE_STUCK_VEHICLE_CHECK' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x57E4C39DE5EE8470, vehicle)
	return result:__tointeger() ~= 0
end
natives.vehicle.does_vehicle_have_stuck_vehicle_check = natives.VEHICLE.DOES_VEHICLE_HAVE_STUCK_VEHICLE_CHECK

--[[
See REQUEST_VEHICLE_RECORDING
]]
function natives.VEHICLE.GET_VEHICLE_RECORDING_ID(--[[int]] recording, --[[const char*]] script) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_VEHICLE_RECORDING_ID' due to disabled trusted mode")

	assert(type(recording) == "number", "Arg #1 (recording) must be a number.")
	assert(type(script) == "string", "Arg #2 (script) must be a string.")

	local result = native_call(0x21543C612379DB3C, recording, script)
	return result:__tointeger()
end
natives.vehicle.get_vehicle_recording_id = natives.VEHICLE.GET_VEHICLE_RECORDING_ID

--[[
Request the vehicle recording defined by the lowercase format string "%s%03d.yvr". For example, REQUEST_VEHICLE_RECORDING(1, "FBIs1UBER") corresponds to fbis1uber001.yvr.
For all vehicle recording/playback natives, "script" is a common prefix that usually corresponds to the script/mission the recording is used in, "recording" is its int suffix, and "id" (e.g., in native GET_TOTAL_DURATION_OF_VEHICLE_RECORDING_ID) corresponds to a unique identifier within the recording streaming module.
Note that only 24 recordings (hardcoded in multiple places) can ever active at a given time before clobbering begins.
]]
function natives.VEHICLE.REQUEST_VEHICLE_RECORDING(--[[int]] recording, --[[const char*]] script) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.REQUEST_VEHICLE_RECORDING' due to disabled trusted mode")

	assert(type(recording) == "number", "Arg #1 (recording) must be a number.")
	assert(type(script) == "string", "Arg #2 (script) must be a string.")

	local result = native_call(0xAF514CABE74CBF15, recording, script)
end
natives.vehicle.request_vehicle_recording = natives.VEHICLE.REQUEST_VEHICLE_RECORDING

--[[
See REQUEST_VEHICLE_RECORDING
]]
function natives.VEHICLE.HAS_VEHICLE_RECORDING_BEEN_LOADED(--[[int]] recording, --[[const char*]] script) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.HAS_VEHICLE_RECORDING_BEEN_LOADED' due to disabled trusted mode")

	assert(type(recording) == "number", "Arg #1 (recording) must be a number.")
	assert(type(script) == "string", "Arg #2 (script) must be a string.")

	local result = native_call(0x300D614A4C785FC4, recording, script)
	return result:__tointeger() ~= 0
end
natives.vehicle.has_vehicle_recording_been_loaded = natives.VEHICLE.HAS_VEHICLE_RECORDING_BEEN_LOADED

--[[
See REQUEST_VEHICLE_RECORDING
]]
function natives.VEHICLE.REMOVE_VEHICLE_RECORDING(--[[int]] recording, --[[const char*]] script) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.REMOVE_VEHICLE_RECORDING' due to disabled trusted mode")

	assert(type(recording) == "number", "Arg #1 (recording) must be a number.")
	assert(type(script) == "string", "Arg #2 (script) must be a string.")

	local result = native_call(0xF1160ACCF98A3FC8, recording, script)
end
natives.vehicle.remove_vehicle_recording = natives.VEHICLE.REMOVE_VEHICLE_RECORDING

function natives.VEHICLE.GET_POSITION_OF_VEHICLE_RECORDING_ID_AT_TIME(--[[int]] id, --[[float]] time) -- Returns Vector3
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_POSITION_OF_VEHICLE_RECORDING_ID_AT_TIME' due to disabled trusted mode")

	assert(type(id) == "number", "Arg #1 (id) must be a number.")
	assert(type(time) == "number", "Arg #2 (time) must be a number.")

	local result = native_call(0x92523B76657A517D, id, time)
	return result:__tov3()
end
natives.vehicle.get_position_of_vehicle_recording_id_at_time = natives.VEHICLE.GET_POSITION_OF_VEHICLE_RECORDING_ID_AT_TIME

--[[
This native does no interpolation between pathpoints. The same position will be returned for all times up to the next pathpoint in the recording.

See REQUEST_VEHICLE_RECORDING
]]
function natives.VEHICLE.GET_POSITION_OF_VEHICLE_RECORDING_AT_TIME(--[[int]] recording, --[[float]] time, --[[const char*]] script) -- Returns Vector3
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_POSITION_OF_VEHICLE_RECORDING_AT_TIME' due to disabled trusted mode")

	assert(type(recording) == "number", "Arg #1 (recording) must be a number.")
	assert(type(time) == "number", "Arg #2 (time) must be a number.")
	assert(type(script) == "string", "Arg #3 (script) must be a string.")

	local result = native_call(0xD242728AA6F0FBA2, recording, time, script)
	return result:__tov3()
end
natives.vehicle.get_position_of_vehicle_recording_at_time = natives.VEHICLE.GET_POSITION_OF_VEHICLE_RECORDING_AT_TIME

function natives.VEHICLE.GET_ROTATION_OF_VEHICLE_RECORDING_ID_AT_TIME(--[[int]] id, --[[float]] time) -- Returns Vector3
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_ROTATION_OF_VEHICLE_RECORDING_ID_AT_TIME' due to disabled trusted mode")

	assert(type(id) == "number", "Arg #1 (id) must be a number.")
	assert(type(time) == "number", "Arg #2 (time) must be a number.")

	local result = native_call(0xF0F2103EFAF8CBA7, id, time)
	return result:__tov3()
end
natives.vehicle.get_rotation_of_vehicle_recording_id_at_time = natives.VEHICLE.GET_ROTATION_OF_VEHICLE_RECORDING_ID_AT_TIME

--[[
This native does no interpolation between pathpoints. The same rotation will be returned for all times up to the next pathpoint in the recording.

See REQUEST_VEHICLE_RECORDING
]]
function natives.VEHICLE.GET_ROTATION_OF_VEHICLE_RECORDING_AT_TIME(--[[int]] recording, --[[float]] time, --[[const char*]] script) -- Returns Vector3
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_ROTATION_OF_VEHICLE_RECORDING_AT_TIME' due to disabled trusted mode")

	assert(type(recording) == "number", "Arg #1 (recording) must be a number.")
	assert(type(time) == "number", "Arg #2 (time) must be a number.")
	assert(type(script) == "string", "Arg #3 (script) must be a string.")

	local result = native_call(0x2058206FBE79A8AD, recording, time, script)
	return result:__tov3()
end
natives.vehicle.get_rotation_of_vehicle_recording_at_time = natives.VEHICLE.GET_ROTATION_OF_VEHICLE_RECORDING_AT_TIME

function natives.VEHICLE.GET_TOTAL_DURATION_OF_VEHICLE_RECORDING_ID(--[[int]] id) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_TOTAL_DURATION_OF_VEHICLE_RECORDING_ID' due to disabled trusted mode")

	assert(type(id) == "number", "Arg #1 (id) must be a number.")

	local result = native_call(0x102D125411A7B6E6, id)
	return result:__tonumber()
end
natives.vehicle.get_total_duration_of_vehicle_recording_id = natives.VEHICLE.GET_TOTAL_DURATION_OF_VEHICLE_RECORDING_ID

--[[
See REQUEST_VEHICLE_RECORDING
]]
function natives.VEHICLE.GET_TOTAL_DURATION_OF_VEHICLE_RECORDING(--[[int]] recording, --[[const char*]] script) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_TOTAL_DURATION_OF_VEHICLE_RECORDING' due to disabled trusted mode")

	assert(type(recording) == "number", "Arg #1 (recording) must be a number.")
	assert(type(script) == "string", "Arg #2 (script) must be a string.")

	local result = native_call(0x0E48D1C262390950, recording, script)
	return result:__tonumber()
end
natives.vehicle.get_total_duration_of_vehicle_recording = natives.VEHICLE.GET_TOTAL_DURATION_OF_VEHICLE_RECORDING

--[[
Distance traveled in the vehicles current recording.
]]
function natives.VEHICLE.GET_POSITION_IN_RECORDING(--[[Vehicle]] vehicle) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_POSITION_IN_RECORDING' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x2DACD605FC681475, vehicle)
	return result:__tonumber()
end
natives.vehicle.get_position_in_recording = natives.VEHICLE.GET_POSITION_IN_RECORDING

--[[
Can be used with GET_TOTAL_DURATION_OF_VEHICLE_RECORDING{_ID} to compute a percentage.
]]
function natives.VEHICLE.GET_TIME_POSITION_IN_RECORDING(--[[Vehicle]] vehicle) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_TIME_POSITION_IN_RECORDING' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x5746F3A7AB7FE544, vehicle)
	return result:__tonumber()
end
natives.vehicle.get_time_position_in_recording = natives.VEHICLE.GET_TIME_POSITION_IN_RECORDING

--[[
p3 is some flag related to 'trailers' (invokes CVehicle::GetTrailer).

See REQUEST_VEHICLE_RECORDING
]]
function natives.VEHICLE.START_PLAYBACK_RECORDED_VEHICLE(--[[Vehicle]] vehicle, --[[int]] recording, --[[const char*]] script, --[[BOOL]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.START_PLAYBACK_RECORDED_VEHICLE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(recording) == "number", "Arg #2 (recording) must be a number.")
	assert(type(script) == "string", "Arg #3 (script) must be a string.")
	assert(type(p3) == "boolean", "Arg #4 (p3) must be a boolean.")

	local result = native_call(0x3F878F92B3A7A071, vehicle, recording, script, p3)
end
natives.vehicle.start_playback_recorded_vehicle = natives.VEHICLE.START_PLAYBACK_RECORDED_VEHICLE

--[[
flags requires further research, e.g., 0x4/0x8 are related to the AI driving task and 0x20 is internally set and interacts with dynamic entity components.

time, often zero and capped at 500, is related to SET_PLAYBACK_TO_USE_AI_TRY_TO_REVERT_BACK_LATER
]]
function natives.VEHICLE.START_PLAYBACK_RECORDED_VEHICLE_WITH_FLAGS(--[[Vehicle]] vehicle, --[[int]] recording, --[[const char*]] script, --[[int]] flags, --[[int]] time, --[[int]] drivingStyle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.START_PLAYBACK_RECORDED_VEHICLE_WITH_FLAGS' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(recording) == "number", "Arg #2 (recording) must be a number.")
	assert(type(script) == "string", "Arg #3 (script) must be a string.")
	assert(type(flags) == "number", "Arg #4 (flags) must be a number.")
	assert(type(time) == "number", "Arg #5 (time) must be a number.")
	assert(type(drivingStyle) == "number", "Arg #6 (drivingStyle) must be a number.")

	local result = native_call(0x7D80FD645D4DA346, vehicle, recording, script, flags, time, drivingStyle)
end
natives.vehicle.start_playback_recorded_vehicle_with_flags = natives.VEHICLE.START_PLAYBACK_RECORDED_VEHICLE_WITH_FLAGS

--[[
Often called after START_PLAYBACK_RECORDED_VEHICLE and SKIP_TIME_IN_PLAYBACK_RECORDED_VEHICLE; similar in use to FORCE_ENTITY_AI_AND_ANIMATION_UPDATE.
]]
function natives.VEHICLE.FORCE_PLAYBACK_RECORDED_VEHICLE_UPDATE(--[[Vehicle]] vehicle, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.FORCE_PLAYBACK_RECORDED_VEHICLE_UPDATE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0x1F2E4E06DEA8992B, vehicle, p1)
end
natives.vehicle.force_playback_recorded_vehicle_update = natives.VEHICLE.FORCE_PLAYBACK_RECORDED_VEHICLE_UPDATE

function natives.VEHICLE.STOP_PLAYBACK_RECORDED_VEHICLE(--[[Vehicle]] vehicle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.STOP_PLAYBACK_RECORDED_VEHICLE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x54833611C17ABDEA, vehicle)
end
natives.vehicle.stop_playback_recorded_vehicle = natives.VEHICLE.STOP_PLAYBACK_RECORDED_VEHICLE

function natives.VEHICLE.PAUSE_PLAYBACK_RECORDED_VEHICLE(--[[Vehicle]] vehicle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.PAUSE_PLAYBACK_RECORDED_VEHICLE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x632A689BF42301B1, vehicle)
end
natives.vehicle.pause_playback_recorded_vehicle = natives.VEHICLE.PAUSE_PLAYBACK_RECORDED_VEHICLE

function natives.VEHICLE.UNPAUSE_PLAYBACK_RECORDED_VEHICLE(--[[Vehicle]] vehicle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.UNPAUSE_PLAYBACK_RECORDED_VEHICLE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x8879EE09268305D5, vehicle)
end
natives.vehicle.unpause_playback_recorded_vehicle = natives.VEHICLE.UNPAUSE_PLAYBACK_RECORDED_VEHICLE

function natives.VEHICLE.IS_PLAYBACK_GOING_ON_FOR_VEHICLE(--[[Vehicle]] vehicle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.IS_PLAYBACK_GOING_ON_FOR_VEHICLE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x1C8A4C2C19E68EEC, vehicle)
	return result:__tointeger() ~= 0
end
natives.vehicle.is_playback_going_on_for_vehicle = natives.VEHICLE.IS_PLAYBACK_GOING_ON_FOR_VEHICLE

function natives.VEHICLE.IS_PLAYBACK_USING_AI_GOING_ON_FOR_VEHICLE(--[[Vehicle]] vehicle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.IS_PLAYBACK_USING_AI_GOING_ON_FOR_VEHICLE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0xAEA8FD591FAD4106, vehicle)
	return result:__tointeger() ~= 0
end
natives.vehicle.is_playback_using_ai_going_on_for_vehicle = natives.VEHICLE.IS_PLAYBACK_USING_AI_GOING_ON_FOR_VEHICLE

function natives.VEHICLE.GET_CURRENT_PLAYBACK_FOR_VEHICLE(--[[Vehicle]] vehicle) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_CURRENT_PLAYBACK_FOR_VEHICLE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x42BC05C27A946054, vehicle)
	return result:__tointeger()
end
natives.vehicle.get_current_playback_for_vehicle = natives.VEHICLE.GET_CURRENT_PLAYBACK_FOR_VEHICLE

function natives.VEHICLE.SKIP_TO_END_AND_STOP_PLAYBACK_RECORDED_VEHICLE(--[[Vehicle]] vehicle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SKIP_TO_END_AND_STOP_PLAYBACK_RECORDED_VEHICLE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0xAB8E2EDA0C0A5883, vehicle)
end
natives.vehicle.skip_to_end_and_stop_playback_recorded_vehicle = natives.VEHICLE.SKIP_TO_END_AND_STOP_PLAYBACK_RECORDED_VEHICLE

function natives.VEHICLE.SET_PLAYBACK_SPEED(--[[Vehicle]] vehicle, --[[float]] speed) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_PLAYBACK_SPEED' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(speed) == "number", "Arg #2 (speed) must be a number.")

	local result = native_call(0x6683AB880E427778, vehicle, speed)
end
natives.vehicle.set_playback_speed = natives.VEHICLE.SET_PLAYBACK_SPEED

--[[
AI abides by the provided driving style (e.g., stopping at red lights or waiting behind traffic) while executing the specificed vehicle recording.

0x1F2E4E06DEA8992B is a related native that deals with the AI physics for such recordings.
]]
function natives.VEHICLE.START_PLAYBACK_RECORDED_VEHICLE_USING_AI(--[[Vehicle]] vehicle, --[[int]] recording, --[[const char*]] script, --[[float]] speed, --[[int]] drivingStyle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.START_PLAYBACK_RECORDED_VEHICLE_USING_AI' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(recording) == "number", "Arg #2 (recording) must be a number.")
	assert(type(script) == "string", "Arg #3 (script) must be a string.")
	assert(type(speed) == "number", "Arg #4 (speed) must be a number.")
	assert(type(drivingStyle) == "number", "Arg #5 (drivingStyle) must be a number.")

	local result = native_call(0x29DE5FA52D00428C, vehicle, recording, script, speed, drivingStyle)
end
natives.vehicle.start_playback_recorded_vehicle_using_ai = natives.VEHICLE.START_PLAYBACK_RECORDED_VEHICLE_USING_AI

--[[
SET_TIME_POSITION_IN_RECORDING can be emulated by: desired_time - GET_TIME_POSITION_IN_RECORDING(vehicle)
]]
function natives.VEHICLE.SKIP_TIME_IN_PLAYBACK_RECORDED_VEHICLE(--[[Vehicle]] vehicle, --[[float]] time) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SKIP_TIME_IN_PLAYBACK_RECORDED_VEHICLE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(time) == "number", "Arg #2 (time) must be a number.")

	local result = native_call(0x9438F7AD68771A20, vehicle, time)
end
natives.vehicle.skip_time_in_playback_recorded_vehicle = natives.VEHICLE.SKIP_TIME_IN_PLAYBACK_RECORDED_VEHICLE

--[[
Identical to SET_PLAYBACK_TO_USE_AI_TRY_TO_REVERT_BACK_LATER with 0 as arguments for p1 and p3.
]]
function natives.VEHICLE.SET_PLAYBACK_TO_USE_AI(--[[Vehicle]] vehicle, --[[int]] drivingStyle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_PLAYBACK_TO_USE_AI' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(drivingStyle) == "number", "Arg #2 (drivingStyle) must be a number.")

	local result = native_call(0xA549C3B37EA28131, vehicle, drivingStyle)
end
natives.vehicle.set_playback_to_use_ai = natives.VEHICLE.SET_PLAYBACK_TO_USE_AI

--[[
Time is number of milliseconds before reverting, zero for indefinitely.
]]
function natives.VEHICLE.SET_PLAYBACK_TO_USE_AI_TRY_TO_REVERT_BACK_LATER(--[[Vehicle]] vehicle, --[[int]] time, --[[int]] drivingStyle, --[[BOOL]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_PLAYBACK_TO_USE_AI_TRY_TO_REVERT_BACK_LATER' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(time) == "number", "Arg #2 (time) must be a number.")
	assert(type(drivingStyle) == "number", "Arg #3 (drivingStyle) must be a number.")
	assert(type(p3) == "boolean", "Arg #4 (p3) must be a boolean.")

	local result = native_call(0x6E63860BBB190730, vehicle, time, drivingStyle, p3)
end
natives.vehicle.set_playback_to_use_ai_try_to_revert_back_later = natives.VEHICLE.SET_PLAYBACK_TO_USE_AI_TRY_TO_REVERT_BACK_LATER

function natives.VEHICLE.SET_ADDITIONAL_ROTATION_FOR_RECORDED_VEHICLE_PLAYBACK(--[[Vehicle]] vehicle, --[[float]] x, --[[float]] y, --[[float]] z, --[[Any]] p4) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_ADDITIONAL_ROTATION_FOR_RECORDED_VEHICLE_PLAYBACK' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")

	local result = native_call(0x5845066D8A1EA7F7, vehicle, x, y, z, p4)
end
natives.vehicle.set_additional_rotation_for_recorded_vehicle_playback = natives.VEHICLE.SET_ADDITIONAL_ROTATION_FOR_RECORDED_VEHICLE_PLAYBACK

function natives.VEHICLE.SET_POSITION_OFFSET_FOR_RECORDED_VEHICLE_PLAYBACK(--[[Any]] p0, --[[float]] p1, --[[float]] p2, --[[float]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_POSITION_OFFSET_FOR_RECORDED_VEHICLE_PLAYBACK' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x796A877E459B99EA, p0, p1, p2, p3)
end
natives.vehicle.set_position_offset_for_recorded_vehicle_playback = natives.VEHICLE.SET_POSITION_OFFSET_FOR_RECORDED_VEHICLE_PLAYBACK

function natives.VEHICLE.SET_GLOBAL_POSITION_OFFSET_FOR_RECORDED_VEHICLE_PLAYBACK(--[[Any]] p0, --[[float]] p1, --[[float]] p2, --[[float]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_GLOBAL_POSITION_OFFSET_FOR_RECORDED_VEHICLE_PLAYBACK' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0xFAF2A78061FD9EF4, p0, p1, p2, p3)
end
natives.vehicle.set_global_position_offset_for_recorded_vehicle_playback = natives.VEHICLE.SET_GLOBAL_POSITION_OFFSET_FOR_RECORDED_VEHICLE_PLAYBACK

--[[
A vehicle recording playback flag only used in jewelry_heist
]]
function natives.VEHICLE.SET_SHOULD_LERP_FROM_AI_TO_FULL_RECORDING(--[[Vehicle]] vehicle, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_SHOULD_LERP_FROM_AI_TO_FULL_RECORDING' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0x063AE2B2CC273588, vehicle, p1)
end
natives.vehicle.set_should_lerp_from_ai_to_full_recording = natives.VEHICLE.SET_SHOULD_LERP_FROM_AI_TO_FULL_RECORDING

function natives.VEHICLE.EXPLODE_VEHICLE_IN_CUTSCENE(--[[Vehicle]] vehicle, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.EXPLODE_VEHICLE_IN_CUTSCENE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0x786A4EB67B01BF0B, vehicle, p1)
end
natives.vehicle.explode_vehicle_in_cutscene = natives.VEHICLE.EXPLODE_VEHICLE_IN_CUTSCENE

function natives.VEHICLE.ADD_VEHICLE_STUCK_CHECK_WITH_WARP(--[[Any]] p0, --[[float]] p1, --[[Any]] p2, --[[BOOL]] p3, --[[BOOL]] p4, --[[BOOL]] p5, --[[Any]] p6) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.ADD_VEHICLE_STUCK_CHECK_WITH_WARP' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "boolean", "Arg #4 (p3) must be a boolean.")
	assert(type(p4) == "boolean", "Arg #5 (p4) must be a boolean.")
	assert(type(p5) == "boolean", "Arg #6 (p5) must be a boolean.")
	assert(type(p6) == "number", "Arg #7 (p6) must be a number.")

	local result = native_call(0x2FA9923062DD396C, p0, p1, p2, p3, p4, p5, p6)
end
natives.vehicle.add_vehicle_stuck_check_with_warp = natives.VEHICLE.ADD_VEHICLE_STUCK_CHECK_WITH_WARP

--[[
seems to make the vehicle stop spawning naturally in traffic. Here's an essential example:

VEHICLE::SET_VEHICLE_MODEL_IS_SUPPRESSED(MISC::GET_HASH_KEY("taco"), true);

god I hate taco vans

Confirmed to work? Needs to be looped? Can not get it to work.
Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
]]
function natives.VEHICLE.SET_VEHICLE_MODEL_IS_SUPPRESSED(--[[Hash]] model, --[[BOOL]] suppressed) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_MODEL_IS_SUPPRESSED' due to disabled trusted mode")

	assert(type(model) == "number", "Arg #1 (model) must be a number.")
	assert(type(suppressed) == "boolean", "Arg #2 (suppressed) must be a boolean.")

	local result = native_call(0x0FC2D89AC25A5814, model, suppressed)
end
natives.vehicle.set_vehicle_model_is_suppressed = natives.VEHICLE.SET_VEHICLE_MODEL_IS_SUPPRESSED

--[[
Gets a random vehicle in a sphere at the specified position, of the specified radius.

x: The X-component of the position of the sphere.
y: The Y-component of the position of the sphere.
z: The Z-component of the position of the sphere.
radius: The radius of the sphere. Max is 9999.9004.
modelHash: The vehicle model to limit the selection to. Pass 0 for any model.
flags: The bitwise flags that modifies the behaviour of this function.

Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
]]
function natives.VEHICLE.GET_RANDOM_VEHICLE_IN_SPHERE(--[[float]] x, --[[float]] y, --[[float]] z, --[[float]] radius, --[[Hash]] modelHash, --[[int]] flags) -- Returns Vehicle
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_RANDOM_VEHICLE_IN_SPHERE' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(radius) == "number", "Arg #4 (radius) must be a number.")
	assert(type(modelHash) == "number", "Arg #5 (modelHash) must be a number.")
	assert(type(flags) == "number", "Arg #6 (flags) must be a number.")

	local result = native_call(0x386F6CE5BAF6091C, x, y, z, radius, modelHash, flags)
	return result:__tointeger()
end
natives.vehicle.get_random_vehicle_in_sphere = natives.VEHICLE.GET_RANDOM_VEHICLE_IN_SPHERE

function natives.VEHICLE.GET_RANDOM_VEHICLE_FRONT_BUMPER_IN_SPHERE(--[[float]] p0, --[[float]] p1, --[[float]] p2, --[[float]] p3, --[[int]] p4, --[[int]] p5, --[[int]] p6) -- Returns Vehicle
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_RANDOM_VEHICLE_FRONT_BUMPER_IN_SPHERE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")
	assert(type(p6) == "number", "Arg #7 (p6) must be a number.")

	local result = native_call(0xC5574E0AEB86BA68, p0, p1, p2, p3, p4, p5, p6)
	return result:__tointeger()
end
natives.vehicle.get_random_vehicle_front_bumper_in_sphere = natives.VEHICLE.GET_RANDOM_VEHICLE_FRONT_BUMPER_IN_SPHERE

function natives.VEHICLE.GET_RANDOM_VEHICLE_BACK_BUMPER_IN_SPHERE(--[[float]] p0, --[[float]] p1, --[[float]] p2, --[[float]] p3, --[[int]] p4, --[[int]] p5, --[[int]] p6) -- Returns Vehicle
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_RANDOM_VEHICLE_BACK_BUMPER_IN_SPHERE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")
	assert(type(p6) == "number", "Arg #7 (p6) must be a number.")

	local result = native_call(0xB50807EABE20A8DC, p0, p1, p2, p3, p4, p5, p6)
	return result:__tointeger()
end
natives.vehicle.get_random_vehicle_back_bumper_in_sphere = natives.VEHICLE.GET_RANDOM_VEHICLE_BACK_BUMPER_IN_SPHERE

--[[
Example usage
VEHICLE::GET_CLOSEST_VEHICLE(x, y, z, radius, hash, unknown leave at 70) 

x, y, z: Position to get closest vehicle to.
radius: Max radius to get a vehicle.
modelHash: Limit to vehicles with this model. 0 for any.
flags: The bitwise flags altering the function's behaviour.

Does not return police cars or helicopters.

It seems to return police cars for me, does not seem to return helicopters, planes or boats for some reason

Only returns non police cars and motorbikes with the flag set to 70 and modelHash to 0. ModelHash seems to always be 0 when not a modelHash in the scripts, as stated above. 

These flags were found in the b617d scripts: 0,2,4,6,7,23,127,260,2146,2175,12294,16384,16386,20503,32768,67590,67711,98309,100359.
Converted to binary, each bit probably represents a flag as explained regarding another native here: gtaforums.com/topic/822314-guide-driving-styles

Conversion of found flags to binary: pastebin.com/kghNFkRi

At exactly 16384 which is 0100000000000000 in binary and 4000 in hexadecimal only planes are returned. 

It's probably more convenient to use worldGetAllVehicles(int *arr, int arrSize) and check the shortest distance yourself and sort if you want by checking the vehicle type with for example VEHICLE::IS_THIS_MODEL_A_BOAT

-------------------------------------------------------------------------

Conclusion: This native is not worth trying to use. Use something like this instead: pastebin.com/xiFdXa7h

Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
]]
function natives.VEHICLE.GET_CLOSEST_VEHICLE(--[[float]] x, --[[float]] y, --[[float]] z, --[[float]] radius, --[[Hash]] modelHash, --[[int]] flags) -- Returns Vehicle
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_CLOSEST_VEHICLE' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(radius) == "number", "Arg #4 (radius) must be a number.")
	assert(type(modelHash) == "number", "Arg #5 (modelHash) must be a number.")
	assert(type(flags) == "number", "Arg #6 (flags) must be a number.")

	local result = native_call(0xF73EB622C4F1689B, x, y, z, radius, modelHash, flags)
	return result:__tointeger()
end
natives.vehicle.get_closest_vehicle = natives.VEHICLE.GET_CLOSEST_VEHICLE

--[[
Corrected p1. it's basically the 'carriage/trailer number'. So if the train has 3 trailers you'd call the native once with a var or 3 times with 1, 2, 3.
]]
function natives.VEHICLE.GET_TRAIN_CARRIAGE(--[[Vehicle]] train, --[[int]] trailerNumber) -- Returns Entity
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_TRAIN_CARRIAGE' due to disabled trusted mode")

	assert(type(train) == "number", "Arg #1 (train) must be a number.")
	assert(type(trailerNumber) == "number", "Arg #2 (trailerNumber) must be a number.")

	local result = native_call(0x08AAFD0814722BC3, train, trailerNumber)
	return result:__tointeger()
end
natives.vehicle.get_train_carriage = natives.VEHICLE.GET_TRAIN_CARRIAGE

function natives.VEHICLE.IS_MISSION_TRAIN(--[[Vehicle]] vehicle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.IS_MISSION_TRAIN' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0xAD464F2E18836BFC, vehicle)
	return result:__tointeger() ~= 0
end
natives.vehicle.is_mission_train = natives.VEHICLE.IS_MISSION_TRAIN

function natives.VEHICLE.DELETE_MISSION_TRAIN(--[[Vehicle*]] train) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.DELETE_MISSION_TRAIN' due to disabled trusted mode")

	assert(type(train) == "userdata", "Arg #1 (train) must be a userdata.")

	local result = native_call(0x5B76B14AE875C795, train)
end
natives.vehicle.delete_mission_train = natives.VEHICLE.DELETE_MISSION_TRAIN

--[[
p1 is always 0
]]
function natives.VEHICLE.SET_MISSION_TRAIN_AS_NO_LONGER_NEEDED(--[[Vehicle*]] train, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_MISSION_TRAIN_AS_NO_LONGER_NEEDED' due to disabled trusted mode")

	assert(type(train) == "userdata", "Arg #1 (train) must be a userdata.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0xBBE7648349B49BE8, train, p1)
end
natives.vehicle.set_mission_train_as_no_longer_needed = natives.VEHICLE.SET_MISSION_TRAIN_AS_NO_LONGER_NEEDED

function natives.VEHICLE.SET_MISSION_TRAIN_COORDS(--[[Vehicle]] train, --[[float]] x, --[[float]] y, --[[float]] z) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_MISSION_TRAIN_COORDS' due to disabled trusted mode")

	assert(type(train) == "number", "Arg #1 (train) must be a number.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")

	local result = native_call(0x591CA673AA6AB736, train, x, y, z)
end
natives.vehicle.set_mission_train_coords = natives.VEHICLE.SET_MISSION_TRAIN_COORDS

function natives.VEHICLE.IS_THIS_MODEL_A_BOAT(--[[Hash]] model) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.IS_THIS_MODEL_A_BOAT' due to disabled trusted mode")

	assert(type(model) == "number", "Arg #1 (model) must be a number.")

	local result = native_call(0x45A9187928F4B9E3, model)
	return result:__tointeger() ~= 0
end
natives.vehicle.is_this_model_a_boat = natives.VEHICLE.IS_THIS_MODEL_A_BOAT

--[[
Checks if model is a boat, then checks for FLAG_IS_JETSKI.
]]
function natives.VEHICLE.IS_THIS_MODEL_A_JETSKI(--[[Hash]] model) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.IS_THIS_MODEL_A_JETSKI' due to disabled trusted mode")

	assert(type(model) == "number", "Arg #1 (model) must be a number.")

	local result = native_call(0x9537097412CF75FE, model)
	return result:__tointeger() ~= 0
end
natives.vehicle.is_this_model_a_jetski = natives.VEHICLE.IS_THIS_MODEL_A_JETSKI

function natives.VEHICLE.IS_THIS_MODEL_A_PLANE(--[[Hash]] model) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.IS_THIS_MODEL_A_PLANE' due to disabled trusted mode")

	assert(type(model) == "number", "Arg #1 (model) must be a number.")

	local result = native_call(0xA0948AB42D7BA0DE, model)
	return result:__tointeger() ~= 0
end
natives.vehicle.is_this_model_a_plane = natives.VEHICLE.IS_THIS_MODEL_A_PLANE

function natives.VEHICLE.IS_THIS_MODEL_A_HELI(--[[Hash]] model) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.IS_THIS_MODEL_A_HELI' due to disabled trusted mode")

	assert(type(model) == "number", "Arg #1 (model) must be a number.")

	local result = native_call(0xDCE4334788AF94EA, model)
	return result:__tointeger() ~= 0
end
natives.vehicle.is_this_model_a_heli = natives.VEHICLE.IS_THIS_MODEL_A_HELI

--[[
To check if the model is an amphibious car, see gtaforums.com/topic/717612-v-scriptnative-documentation-and-research/page-33#entry1069317363 (for build 944 and above only!)
]]
function natives.VEHICLE.IS_THIS_MODEL_A_CAR(--[[Hash]] model) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.IS_THIS_MODEL_A_CAR' due to disabled trusted mode")

	assert(type(model) == "number", "Arg #1 (model) must be a number.")

	local result = native_call(0x7F6DB52EEFC96DF8, model)
	return result:__tointeger() ~= 0
end
natives.vehicle.is_this_model_a_car = natives.VEHICLE.IS_THIS_MODEL_A_CAR

function natives.VEHICLE.IS_THIS_MODEL_A_TRAIN(--[[Hash]] model) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.IS_THIS_MODEL_A_TRAIN' due to disabled trusted mode")

	assert(type(model) == "number", "Arg #1 (model) must be a number.")

	local result = native_call(0xAB935175B22E822B, model)
	return result:__tointeger() ~= 0
end
natives.vehicle.is_this_model_a_train = natives.VEHICLE.IS_THIS_MODEL_A_TRAIN

function natives.VEHICLE.IS_THIS_MODEL_A_BIKE(--[[Hash]] model) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.IS_THIS_MODEL_A_BIKE' due to disabled trusted mode")

	assert(type(model) == "number", "Arg #1 (model) must be a number.")

	local result = native_call(0xB50C0B0CEDC6CE84, model)
	return result:__tointeger() ~= 0
end
natives.vehicle.is_this_model_a_bike = natives.VEHICLE.IS_THIS_MODEL_A_BIKE

function natives.VEHICLE.IS_THIS_MODEL_A_BICYCLE(--[[Hash]] model) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.IS_THIS_MODEL_A_BICYCLE' due to disabled trusted mode")

	assert(type(model) == "number", "Arg #1 (model) must be a number.")

	local result = native_call(0xBF94DD42F63BDED2, model)
	return result:__tointeger() ~= 0
end
natives.vehicle.is_this_model_a_bicycle = natives.VEHICLE.IS_THIS_MODEL_A_BICYCLE

function natives.VEHICLE.IS_THIS_MODEL_A_QUADBIKE(--[[Hash]] model) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.IS_THIS_MODEL_A_QUADBIKE' due to disabled trusted mode")

	assert(type(model) == "number", "Arg #1 (model) must be a number.")

	local result = native_call(0x39DAC362EE65FA28, model)
	return result:__tointeger() ~= 0
end
natives.vehicle.is_this_model_a_quadbike = natives.VEHICLE.IS_THIS_MODEL_A_QUADBIKE

function natives.VEHICLE.IS_THIS_MODEL_AN_AMPHIBIOUS_CAR(--[[Hash]] model) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.IS_THIS_MODEL_AN_AMPHIBIOUS_CAR' due to disabled trusted mode")

	assert(type(model) == "number", "Arg #1 (model) must be a number.")

	local result = native_call(0x633F6F44A537EBB6, model)
	return result:__tointeger() ~= 0
end
natives.vehicle.is_this_model_an_amphibious_car = natives.VEHICLE.IS_THIS_MODEL_AN_AMPHIBIOUS_CAR

function natives.VEHICLE.IS_THIS_MODEL_AN_AMPHIBIOUS_QUADBIKE(--[[Hash]] model) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.IS_THIS_MODEL_AN_AMPHIBIOUS_QUADBIKE' due to disabled trusted mode")

	assert(type(model) == "number", "Arg #1 (model) must be a number.")

	local result = native_call(0xA1A9FC1C76A6730D, model)
	return result:__tointeger() ~= 0
end
natives.vehicle.is_this_model_an_amphibious_quadbike = natives.VEHICLE.IS_THIS_MODEL_AN_AMPHIBIOUS_QUADBIKE

--[[
Equivalent of SET_HELI_BLADES_SPEED(vehicleHandle, 1.0f);

this native works on planes to?
]]
function natives.VEHICLE.SET_HELI_BLADES_FULL_SPEED(--[[Vehicle]] vehicle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_HELI_BLADES_FULL_SPEED' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0xA178472EBB8AE60D, vehicle)
end
natives.vehicle.set_heli_blades_full_speed = natives.VEHICLE.SET_HELI_BLADES_FULL_SPEED

--[[
Sets the speed of the helicopter blades in percentage of the full speed.

vehicleHandle: The helicopter.
speed: The speed in percentage, 0.0f being 0% and 1.0f being 100%.
]]
function natives.VEHICLE.SET_HELI_BLADES_SPEED(--[[Vehicle]] vehicle, --[[float]] speed) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_HELI_BLADES_SPEED' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(speed) == "number", "Arg #2 (speed) must be a number.")

	local result = native_call(0xFD280B4D7F3ABC4D, vehicle, speed)
end
natives.vehicle.set_heli_blades_speed = natives.VEHICLE.SET_HELI_BLADES_SPEED

function natives.VEHICLE.FORCE_SUB_THROTTLE_FOR_TIME(--[[Vehicle]] vehicle, --[[float]] p1, --[[float]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.FORCE_SUB_THROTTLE_FOR_TIME' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0x99CAD8E7AFDB60FA, vehicle, p1, p2)
end
natives.vehicle.force_sub_throttle_for_time = natives.VEHICLE.FORCE_SUB_THROTTLE_FOR_TIME

--[[
This has not yet been tested - it's just an assumption of what the types could be.
]]
function natives.VEHICLE.SET_VEHICLE_CAN_BE_TARGETTED(--[[Vehicle]] vehicle, --[[BOOL]] state) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_CAN_BE_TARGETTED' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(state) == "boolean", "Arg #2 (state) must be a boolean.")

	local result = native_call(0x3750146A28097A82, vehicle, state)
end
natives.vehicle.set_vehicle_can_be_targetted = natives.VEHICLE.SET_VEHICLE_CAN_BE_TARGETTED

--[[
In the decompiled scripts, its always called after
VEHICLE::_SET_EXCLUSIVE_DRIVER(a_0, 0, 0);
VEHICLE::SET_VEHICLE_DOORS_LOCKED_FOR_ALL_PLAYERS(a_0, 1);
VEHICLE::SET_VEHICLE_DOORS_LOCKED_FOR_PLAYER(a_0, PLAYER::PLAYER_ID(), 0);
-->VEHICLE::_DBC631F109350B8C(a_0, 1);
]]
function natives.VEHICLE.SET_DONT_ALLOW_PLAYER_TO_ENTER_VEHICLE_IF_LOCKED_FOR_PLAYER(--[[Vehicle]] vehicle, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_DONT_ALLOW_PLAYER_TO_ENTER_VEHICLE_IF_LOCKED_FOR_PLAYER' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0xDBC631F109350B8C, vehicle, p1)
end
natives.vehicle.set_dont_allow_player_to_enter_vehicle_if_locked_for_player = natives.VEHICLE.SET_DONT_ALLOW_PLAYER_TO_ENTER_VEHICLE_IF_LOCKED_FOR_PLAYER

function natives.VEHICLE.SET_VEHICLE_CAN_BE_VISIBLY_DAMAGED(--[[Vehicle]] vehicle, --[[BOOL]] state) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_CAN_BE_VISIBLY_DAMAGED' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(state) == "boolean", "Arg #2 (state) must be a boolean.")

	local result = native_call(0x4C7028F78FFD3681, vehicle, state)
end
natives.vehicle.set_vehicle_can_be_visibly_damaged = natives.VEHICLE.SET_VEHICLE_CAN_BE_VISIBLY_DAMAGED

function natives.VEHICLE.SET_VEHICLE_HAS_UNBREAKABLE_LIGHTS(--[[Vehicle]] vehicle, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_HAS_UNBREAKABLE_LIGHTS' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0x1AA8A837D2169D94, vehicle, p1)
end
natives.vehicle.set_vehicle_has_unbreakable_lights = natives.VEHICLE.SET_VEHICLE_HAS_UNBREAKABLE_LIGHTS

function natives.VEHICLE.SET_VEHICLE_RESPECTS_LOCKS_WHEN_HAS_DRIVER(--[[Vehicle]] vehicle, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_RESPECTS_LOCKS_WHEN_HAS_DRIVER' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0x2311DD7159F00582, vehicle, p1)
end
natives.vehicle.set_vehicle_respects_locks_when_has_driver = natives.VEHICLE.SET_VEHICLE_RESPECTS_LOCKS_WHEN_HAS_DRIVER

function natives.VEHICLE.SET_VEHICLE_CAN_EJECT_PASSENGERS_IF_LOCKED(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_CAN_EJECT_PASSENGERS_IF_LOCKED' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x065D03A9D6B2C6B5, p0, p1)
end
natives.vehicle.set_vehicle_can_eject_passengers_if_locked = natives.VEHICLE.SET_VEHICLE_CAN_EJECT_PASSENGERS_IF_LOCKED

--[[
Dirt level 0..15
]]
function natives.VEHICLE.GET_VEHICLE_DIRT_LEVEL(--[[Vehicle]] vehicle) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_VEHICLE_DIRT_LEVEL' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x8F17BC8BA08DA62B, vehicle)
	return result:__tonumber()
end
natives.vehicle.get_vehicle_dirt_level = natives.VEHICLE.GET_VEHICLE_DIRT_LEVEL

--[[
You can't use values greater than 15.0
You can see why here: pastebin.com/Wbn34fGD

Also, R* does (float)(rand() % 15) to get a random dirt level when generating a vehicle.
]]
function natives.VEHICLE.SET_VEHICLE_DIRT_LEVEL(--[[Vehicle]] vehicle, --[[float]] dirtLevel) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_DIRT_LEVEL' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(dirtLevel) == "number", "Arg #2 (dirtLevel) must be a number.")

	local result = native_call(0x79D3B596FE44EE8B, vehicle, dirtLevel)
end
natives.vehicle.set_vehicle_dirt_level = natives.VEHICLE.SET_VEHICLE_DIRT_LEVEL

--[[
Appears to return true if the vehicle has any damage, including cosmetically.
]]
function natives.VEHICLE.GET_DOES_VEHICLE_HAVE_DAMAGE_DECALS(--[[Vehicle]] vehicle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_DOES_VEHICLE_HAVE_DAMAGE_DECALS' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0xBCDC5017D3CE1E9E, vehicle)
	return result:__tointeger() ~= 0
end
natives.vehicle.get_does_vehicle_have_damage_decals = natives.VEHICLE.GET_DOES_VEHICLE_HAVE_DAMAGE_DECALS

--[[
doorId: see SET_VEHICLE_DOOR_SHUT
]]
function natives.VEHICLE.IS_VEHICLE_DOOR_FULLY_OPEN(--[[Vehicle]] vehicle, --[[int]] doorId) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.IS_VEHICLE_DOOR_FULLY_OPEN' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(doorId) == "number", "Arg #2 (doorId) must be a number.")

	local result = native_call(0x3E933CFF7B111C22, vehicle, doorId)
	return result:__tointeger() ~= 0
end
natives.vehicle.is_vehicle_door_fully_open = natives.VEHICLE.IS_VEHICLE_DOOR_FULLY_OPEN

--[[
Starts or stops the engine on the specified vehicle.

vehicle: The vehicle to start or stop the engine on.
value: true to turn the vehicle on; false to turn it off.
instantly: if true, the vehicle will be set to the state immediately; otherwise, the current driver will physically turn on or off the engine.
disableAutoStart: If true, the system will prevent the engine from starting when the player got into it.

from what I've tested when I do this to a helicopter the propellers turn off after the engine has started. so is there any way to keep the heli propellers on?
]]
function natives.VEHICLE.SET_VEHICLE_ENGINE_ON(--[[Vehicle]] vehicle, --[[BOOL]] value, --[[BOOL]] instantly, --[[BOOL]] disableAutoStart) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_ENGINE_ON' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(value) == "boolean", "Arg #2 (value) must be a boolean.")
	assert(type(instantly) == "boolean", "Arg #3 (instantly) must be a boolean.")
	assert(type(disableAutoStart) == "boolean", "Arg #4 (disableAutoStart) must be a boolean.")

	local result = native_call(0x2497C4717C8B881E, vehicle, value, instantly, disableAutoStart)
end
natives.vehicle.set_vehicle_engine_on = natives.VEHICLE.SET_VEHICLE_ENGINE_ON

function natives.VEHICLE.SET_VEHICLE_UNDRIVEABLE(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_UNDRIVEABLE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x8ABA6AF54B942B95, vehicle, toggle)
end
natives.vehicle.set_vehicle_undriveable = natives.VEHICLE.SET_VEHICLE_UNDRIVEABLE

function natives.VEHICLE.SET_VEHICLE_PROVIDES_COVER(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_PROVIDES_COVER' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x5AFEEDD9BB2899D7, vehicle, toggle)
end
natives.vehicle.set_vehicle_provides_cover = natives.VEHICLE.SET_VEHICLE_PROVIDES_COVER

--[[
doorId: see SET_VEHICLE_DOOR_SHUT
]]
function natives.VEHICLE.SET_VEHICLE_DOOR_CONTROL(--[[Vehicle]] vehicle, --[[int]] doorId, --[[int]] speed, --[[float]] angle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_DOOR_CONTROL' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(doorId) == "number", "Arg #2 (doorId) must be a number.")
	assert(type(speed) == "number", "Arg #3 (speed) must be a number.")
	assert(type(angle) == "number", "Arg #4 (angle) must be a number.")

	local result = native_call(0xF2BFA0430F0A0FCB, vehicle, doorId, speed, angle)
end
natives.vehicle.set_vehicle_door_control = natives.VEHICLE.SET_VEHICLE_DOOR_CONTROL

--[[
doorId: see SET_VEHICLE_DOOR_SHUT
]]
function natives.VEHICLE.SET_VEHICLE_DOOR_LATCHED(--[[Vehicle]] vehicle, --[[int]] doorId, --[[BOOL]] p2, --[[BOOL]] p3, --[[BOOL]] p4) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_DOOR_LATCHED' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(doorId) == "number", "Arg #2 (doorId) must be a number.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")
	assert(type(p3) == "boolean", "Arg #4 (p3) must be a boolean.")
	assert(type(p4) == "boolean", "Arg #5 (p4) must be a boolean.")

	local result = native_call(0xA5A9653A8D2CAF48, vehicle, doorId, p2, p3, p4)
end
natives.vehicle.set_vehicle_door_latched = natives.VEHICLE.SET_VEHICLE_DOOR_LATCHED

--[[
doorId: see SET_VEHICLE_DOOR_SHUT
]]
function natives.VEHICLE.GET_VEHICLE_DOOR_ANGLE_RATIO(--[[Vehicle]] vehicle, --[[int]] doorId) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_VEHICLE_DOOR_ANGLE_RATIO' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(doorId) == "number", "Arg #2 (doorId) must be a number.")

	local result = native_call(0xFE3F9C29F7B32BD5, vehicle, doorId)
	return result:__tonumber()
end
natives.vehicle.get_vehicle_door_angle_ratio = natives.VEHICLE.GET_VEHICLE_DOOR_ANGLE_RATIO

--[[
doorId: see SET_VEHICLE_DOOR_SHUT
]]
function natives.VEHICLE.GET_PED_USING_VEHICLE_DOOR(--[[Vehicle]] vehicle, --[[int]] doord) -- Returns Ped
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_PED_USING_VEHICLE_DOOR' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(doord) == "number", "Arg #2 (doord) must be a number.")

	local result = native_call(0x218297BF0CFD853B, vehicle, doord)
	return result:__tointeger()
end
natives.vehicle.get_ped_using_vehicle_door = natives.VEHICLE.GET_PED_USING_VEHICLE_DOOR

--[[
enum eDoorId
{
	VEH_EXT_DOOR_INVALID_ID = -1,
	VEH_EXT_DOOR_DSIDE_F,
	VEH_EXT_DOOR_DSIDE_R,
	VEH_EXT_DOOR_PSIDE_F,
	VEH_EXT_DOOR_PSIDE_R,
	VEH_EXT_BONNET,
	VEH_EXT_BOOT
};
]]
function natives.VEHICLE.SET_VEHICLE_DOOR_SHUT(--[[Vehicle]] vehicle, --[[int]] doorId, --[[BOOL]] closeInstantly) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_DOOR_SHUT' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(doorId) == "number", "Arg #2 (doorId) must be a number.")
	assert(type(closeInstantly) == "boolean", "Arg #3 (closeInstantly) must be a boolean.")

	local result = native_call(0x93D9BD300D7789E5, vehicle, doorId, closeInstantly)
end
natives.vehicle.set_vehicle_door_shut = natives.VEHICLE.SET_VEHICLE_DOOR_SHUT

--[[
doorId: see SET_VEHICLE_DOOR_SHUT
]]
function natives.VEHICLE.SET_VEHICLE_DOOR_BROKEN(--[[Vehicle]] vehicle, --[[int]] doorId, --[[BOOL]] deleteDoor) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_DOOR_BROKEN' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(doorId) == "number", "Arg #2 (doorId) must be a number.")
	assert(type(deleteDoor) == "boolean", "Arg #3 (deleteDoor) must be a boolean.")

	local result = native_call(0xD4D4F6A4AB575A33, vehicle, doorId, deleteDoor)
end
natives.vehicle.set_vehicle_door_broken = natives.VEHICLE.SET_VEHICLE_DOOR_BROKEN

function natives.VEHICLE.SET_VEHICLE_CAN_BREAK(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_CAN_BREAK' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x59BF8C3D52C92F66, vehicle, toggle)
end
natives.vehicle.set_vehicle_can_break = natives.VEHICLE.SET_VEHICLE_CAN_BREAK

function natives.VEHICLE.DOES_VEHICLE_HAVE_ROOF(--[[Vehicle]] vehicle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.DOES_VEHICLE_HAVE_ROOF' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x8AC862B0B32C5B80, vehicle)
	return result:__tointeger() ~= 0
end
natives.vehicle.does_vehicle_have_roof = natives.VEHICLE.DOES_VEHICLE_HAVE_ROOF

function natives.VEHICLE.SET_VEHICLE_REMOVE_AGGRESSIVE_CARJACK_MISSION(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_REMOVE_AGGRESSIVE_CARJACK_MISSION' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xC4B3347BD68BD609, p0)
end
natives.vehicle.set_vehicle_remove_aggressive_carjack_mission = natives.VEHICLE.SET_VEHICLE_REMOVE_AGGRESSIVE_CARJACK_MISSION

function natives.VEHICLE.SET_VEHICLE_AVOID_PLAYER_VEHICLE_RIOT_VAN_MISSION(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_AVOID_PLAYER_VEHICLE_RIOT_VAN_MISSION' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xD3301660A57C9272, p0)
end
natives.vehicle.set_vehicle_avoid_player_vehicle_riot_van_mission = natives.VEHICLE.SET_VEHICLE_AVOID_PLAYER_VEHICLE_RIOT_VAN_MISSION

function natives.VEHICLE.SET_CARJACK_MISSION_REMOVAL_PARAMETERS(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_CARJACK_MISSION_REMOVAL_PARAMETERS' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xB9562064627FF9DB, p0, p1)
end
natives.vehicle.set_carjack_mission_removal_parameters = natives.VEHICLE.SET_CARJACK_MISSION_REMOVAL_PARAMETERS

function natives.VEHICLE.IS_BIG_VEHICLE(--[[Vehicle]] vehicle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.IS_BIG_VEHICLE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x9F243D3919F442FE, vehicle)
	return result:__tointeger() ~= 0
end
natives.vehicle.is_big_vehicle = natives.VEHICLE.IS_BIG_VEHICLE

--[[
Actually number of color combinations
]]
function natives.VEHICLE.GET_NUMBER_OF_VEHICLE_COLOURS(--[[Vehicle]] vehicle) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_NUMBER_OF_VEHICLE_COLOURS' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x3B963160CD65D41E, vehicle)
	return result:__tointeger()
end
natives.vehicle.get_number_of_vehicle_colours = natives.VEHICLE.GET_NUMBER_OF_VEHICLE_COLOURS

--[[
Sets the selected vehicle's colors to their default value (specific variant specified using the colorCombination parameter).
Range of possible values for colorCombination is currently unknown, I couldn't find where these values are stored either (Disquse's guess was vehicles.meta but I haven't seen it in there.)
]]
function natives.VEHICLE.SET_VEHICLE_COLOUR_COMBINATION(--[[Vehicle]] vehicle, --[[int]] colorCombination) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_COLOUR_COMBINATION' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(colorCombination) == "number", "Arg #2 (colorCombination) must be a number.")

	local result = native_call(0x33E8CD3322E2FE31, vehicle, colorCombination)
end
natives.vehicle.set_vehicle_colour_combination = natives.VEHICLE.SET_VEHICLE_COLOUR_COMBINATION

function natives.VEHICLE.GET_VEHICLE_COLOUR_COMBINATION(--[[Vehicle]] vehicle) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_VEHICLE_COLOUR_COMBINATION' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x6A842D197F845D56, vehicle)
	return result:__tointeger()
end
natives.vehicle.get_vehicle_colour_combination = natives.VEHICLE.GET_VEHICLE_COLOUR_COMBINATION

--[[
`color`: is the paint index for the vehicle.
Paint index goes from 0 to 12.
Be aware that it only works on xenon lights. Example: https://i.imgur.com/yV3cpG9.png
Full list of all vehicle xenon lights by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicleColors.json
]]
function natives.VEHICLE.SET_VEHICLE_XENON_LIGHT_COLOR_INDEX(--[[Vehicle]] vehicle, --[[int]] colorIndex) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_XENON_LIGHT_COLOR_INDEX' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(colorIndex) == "number", "Arg #2 (colorIndex) must be a number.")

	local result = native_call(0xE41033B25D003A07, vehicle, colorIndex)
end
natives.vehicle.set_vehicle_xenon_light_color_index = natives.VEHICLE.SET_VEHICLE_XENON_LIGHT_COLOR_INDEX

--[[
Returns the headlight color index from the vehicle. Value between 0, 12.
Use _SET_VEHICLE_HEADLIGHTS_COLOUR to set the headlights color for the vehicle.
Must enable xenon headlights before it'll take affect.

Returns an int, value between 0-12 or 255 if no color is set.
]]
function natives.VEHICLE.GET_VEHICLE_XENON_LIGHT_COLOR_INDEX(--[[Vehicle]] vehicle) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_VEHICLE_XENON_LIGHT_COLOR_INDEX' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x3DFF319A831E0CDB, vehicle)
	return result:__tointeger()
end
natives.vehicle.get_vehicle_xenon_light_color_index = natives.VEHICLE.GET_VEHICLE_XENON_LIGHT_COLOR_INDEX

--[[
Setting this to false, makes the specified vehicle to where if you press Y your character doesn't even attempt the animation to enter the vehicle. Hence it's not considered aka ignored.
]]
function natives.VEHICLE.SET_VEHICLE_IS_CONSIDERED_BY_PLAYER(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_IS_CONSIDERED_BY_PLAYER' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x31B927BBC44156CD, vehicle, toggle)
end
natives.vehicle.set_vehicle_is_considered_by_player = natives.VEHICLE.SET_VEHICLE_IS_CONSIDERED_BY_PLAYER

function natives.VEHICLE.SET_VEHICLE_WILL_FORCE_OTHER_VEHICLES_TO_STOP(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_WILL_FORCE_OTHER_VEHICLES_TO_STOP' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xBE5C1255A1830FF5, vehicle, toggle)
end
natives.vehicle.set_vehicle_will_force_other_vehicles_to_stop = natives.VEHICLE.SET_VEHICLE_WILL_FORCE_OTHER_VEHICLES_TO_STOP

function natives.VEHICLE.SET_VEHICLE_ACT_AS_IF_HAS_SIREN_ON(--[[Vehicle]] vehicle, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_ACT_AS_IF_HAS_SIREN_ON' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0x9BECD4B9FEF3F8A6, vehicle, p1)
end
natives.vehicle.set_vehicle_act_as_if_has_siren_on = natives.VEHICLE.SET_VEHICLE_ACT_AS_IF_HAS_SIREN_ON

function natives.VEHICLE.SET_VEHICLE_USE_MORE_RESTRICTIVE_SPAWN_CHECKS(--[[Vehicle]] vehicle, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_USE_MORE_RESTRICTIVE_SPAWN_CHECKS' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0x88BC673CA9E0AE99, vehicle, p1)
end
natives.vehicle.set_vehicle_use_more_restrictive_spawn_checks = natives.VEHICLE.SET_VEHICLE_USE_MORE_RESTRICTIVE_SPAWN_CHECKS

function natives.VEHICLE.SET_VEHICLE_MAY_BE_USED_BY_GOTO_POINT_ANY_MEANS(--[[Vehicle]] vehicle, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_MAY_BE_USED_BY_GOTO_POINT_ANY_MEANS' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0xE851E480B814D4BA, vehicle, p1)
end
natives.vehicle.set_vehicle_may_be_used_by_goto_point_any_means = natives.VEHICLE.SET_VEHICLE_MAY_BE_USED_BY_GOTO_POINT_ANY_MEANS

--[[
Not present in the retail version! It's just a nullsub.

p0 always true (except in one case)
successIndicator: 0 if success, -1 if failed
]]
function natives.VEHICLE.GET_RANDOM_VEHICLE_MODEL_IN_MEMORY(--[[BOOL]] p0, --[[Hash*]] modelHash, --[[int*]] successIndicator) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_RANDOM_VEHICLE_MODEL_IN_MEMORY' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")
	assert(type(modelHash) == "userdata", "Arg #2 (modelHash) must be a userdata.")
	assert(type(successIndicator) == "userdata", "Arg #3 (successIndicator) must be a userdata.")

	local result = native_call(0x055BF0AC0C34F4FD, p0, modelHash, successIndicator)
end
natives.vehicle.get_random_vehicle_model_in_memory = natives.VEHICLE.GET_RANDOM_VEHICLE_MODEL_IN_MEMORY

--[[
enum VehicleLockStatus = {
    None = 0,
    Unlocked = 1,
    Locked = 2,
    LockedForPlayer = 3,
    StickPlayerInside = 4, -- Doesn't allow players to exit the vehicle with the exit vehicle key.
    CanBeBrokenInto = 7, -- Can be broken into the car. If the glass is broken, the value will be set to 1
    CanBeBrokenIntoPersist = 8, -- Can be broken into persist
    CannotBeTriedToEnter = 10, -- Cannot be tried to enter (Nothing happens when you press the vehicle enter key).
}
]]
function natives.VEHICLE.GET_VEHICLE_DOOR_LOCK_STATUS(--[[Vehicle]] vehicle) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_VEHICLE_DOOR_LOCK_STATUS' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x25BC98A59C2EA962, vehicle)
	return result:__tointeger()
end
natives.vehicle.get_vehicle_door_lock_status = natives.VEHICLE.GET_VEHICLE_DOOR_LOCK_STATUS

--[[
Returns vehicle door destroy type previously set with _SET_VEHICLE_DOOR_DESTROY_TYPE
]]
function natives.VEHICLE.GET_VEHICLE_INDIVIDUAL_DOOR_LOCK_STATUS(--[[Vehicle]] vehicle, --[[int]] doorId) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_VEHICLE_INDIVIDUAL_DOOR_LOCK_STATUS' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(doorId) == "number", "Arg #2 (doorId) must be a number.")

	local result = native_call(0xCA4AC3EAAE46EC7B, vehicle, doorId)
	return result:__tointeger()
end
natives.vehicle.get_vehicle_individual_door_lock_status = natives.VEHICLE.GET_VEHICLE_INDIVIDUAL_DOOR_LOCK_STATUS

--[[
doorID starts at 0, not seeming to skip any numbers. Four door vehicles intuitively range from 0 to 3.
]]
function natives.VEHICLE.IS_VEHICLE_DOOR_DAMAGED(--[[Vehicle]] veh, --[[int]] doorID) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.IS_VEHICLE_DOOR_DAMAGED' due to disabled trusted mode")

	assert(type(veh) == "number", "Arg #1 (veh) must be a number.")
	assert(type(doorID) == "number", "Arg #2 (doorID) must be a number.")

	local result = native_call(0xB8E181E559464527, veh, doorID)
	return result:__tointeger() ~= 0
end
natives.vehicle.is_vehicle_door_damaged = natives.VEHICLE.IS_VEHICLE_DOOR_DAMAGED

--[[
doorId: see SET_VEHICLE_DOOR_SHUT
]]
function natives.VEHICLE.SET_DOOR_ALLOWED_TO_BE_BROKEN_OFF(--[[Vehicle]] vehicle, --[[int]] doorId, --[[BOOL]] isBreakable) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_DOOR_ALLOWED_TO_BE_BROKEN_OFF' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(doorId) == "number", "Arg #2 (doorId) must be a number.")
	assert(type(isBreakable) == "boolean", "Arg #3 (isBreakable) must be a boolean.")

	local result = native_call(0x2FA133A4A9D37ED8, vehicle, doorId, isBreakable)
end
natives.vehicle.set_door_allowed_to_be_broken_off = natives.VEHICLE.SET_DOOR_ALLOWED_TO_BE_BROKEN_OFF

function natives.VEHICLE.IS_VEHICLE_BUMPER_BOUNCING(--[[Vehicle]] vehicle, --[[BOOL]] frontBumper) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.IS_VEHICLE_BUMPER_BOUNCING' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(frontBumper) == "boolean", "Arg #2 (frontBumper) must be a boolean.")

	local result = native_call(0x27B926779DEB502D, vehicle, frontBumper)
	return result:__tointeger() ~= 0
end
natives.vehicle.is_vehicle_bumper_bouncing = natives.VEHICLE.IS_VEHICLE_BUMPER_BOUNCING

function natives.VEHICLE.IS_VEHICLE_BUMPER_BROKEN_OFF(--[[Vehicle]] vehicle, --[[BOOL]] front) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.IS_VEHICLE_BUMPER_BROKEN_OFF' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(front) == "boolean", "Arg #2 (front) must be a boolean.")

	local result = native_call(0x468056A6BB6F3846, vehicle, front)
	return result:__tointeger() ~= 0
end
natives.vehicle.is_vehicle_bumper_broken_off = natives.VEHICLE.IS_VEHICLE_BUMPER_BROKEN_OFF

--[[
Usage:

public bool isCopInRange(Vector3 Location, float Range)
        {
            return Function.Call<bool>(Hash.IS_COP_PED_IN_AREA_3D, Location.X - Range, Location.Y - Range, Location.Z - Range, Location.X + Range, Location.Y + Range, Location.Z + Range);
        }
]]
function natives.VEHICLE.IS_COP_VEHICLE_IN_AREA_3D(--[[float]] x1, --[[float]] x2, --[[float]] y1, --[[float]] y2, --[[float]] z1, --[[float]] z2) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.IS_COP_VEHICLE_IN_AREA_3D' due to disabled trusted mode")

	assert(type(x1) == "number", "Arg #1 (x1) must be a number.")
	assert(type(x2) == "number", "Arg #2 (x2) must be a number.")
	assert(type(y1) == "number", "Arg #3 (y1) must be a number.")
	assert(type(y2) == "number", "Arg #4 (y2) must be a number.")
	assert(type(z1) == "number", "Arg #5 (z1) must be a number.")
	assert(type(z2) == "number", "Arg #6 (z2) must be a number.")

	local result = native_call(0x7EEF65D5F153E26A, x1, x2, y1, y2, z1, z2)
	return result:__tointeger() ~= 0
end
natives.vehicle.is_cop_vehicle_in_area_3d = natives.VEHICLE.IS_COP_VEHICLE_IN_AREA_3D

--[[
 Public Function isVehicleOnAllWheels(vh As Vehicle) As Boolean
        Return Native.Function.Call(Of Boolean)(Hash.IS_VEHICLE_ON_ALL_WHEELS, vh)
    End Function

]]
function natives.VEHICLE.IS_VEHICLE_ON_ALL_WHEELS(--[[Vehicle]] vehicle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.IS_VEHICLE_ON_ALL_WHEELS' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0xB104CD1BABF302E2, vehicle)
	return result:__tointeger() ~= 0
end
natives.vehicle.is_vehicle_on_all_wheels = natives.VEHICLE.IS_VEHICLE_ON_ALL_WHEELS

--[[
Returns `nMonetaryValue` from handling.meta for specific model.
]]
function natives.VEHICLE.GET_VEHICLE_MODEL_VALUE(--[[Hash]] vehicleModel) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_VEHICLE_MODEL_VALUE' due to disabled trusted mode")

	assert(type(vehicleModel) == "number", "Arg #1 (vehicleModel) must be a number.")

	local result = native_call(0x5873C14A52D74236, vehicleModel)
	return result:__tointeger()
end
natives.vehicle.get_vehicle_model_value = natives.VEHICLE.GET_VEHICLE_MODEL_VALUE

--[[
Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
]]
function natives.VEHICLE.GET_VEHICLE_LAYOUT_HASH(--[[Vehicle]] vehicle) -- Returns Hash
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_VEHICLE_LAYOUT_HASH' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x28D37D4F71AC5C58, vehicle)
	return result:__tointeger()
end
natives.vehicle.get_vehicle_layout_hash = natives.VEHICLE.GET_VEHICLE_LAYOUT_HASH

function natives.VEHICLE.GET_IN_VEHICLE_CLIPSET_HASH_FOR_SEAT(--[[Vehicle]] vehicle, --[[int]] p1) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_IN_VEHICLE_CLIPSET_HASH_FOR_SEAT' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xA01BC64DD4BFBBAC, vehicle, p1)
	return result:__tointeger()
end
natives.vehicle.get_in_vehicle_clipset_hash_for_seat = natives.VEHICLE.GET_IN_VEHICLE_CLIPSET_HASH_FOR_SEAT

--[[
makes the train all jumbled up and derailed as it moves on the tracks (though that wont stop it from its normal operations)
]]
function natives.VEHICLE.SET_RENDER_TRAIN_AS_DERAILED(--[[Vehicle]] train, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_RENDER_TRAIN_AS_DERAILED' due to disabled trusted mode")

	assert(type(train) == "number", "Arg #1 (train) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x317B11A312DF5534, train, toggle)
end
natives.vehicle.set_render_train_as_derailed = natives.VEHICLE.SET_RENDER_TRAIN_AS_DERAILED

--[[
They use the same color indexs as SET_VEHICLE_COLOURS.
]]
function natives.VEHICLE.SET_VEHICLE_EXTRA_COLOURS(--[[Vehicle]] vehicle, --[[int]] pearlescentColor, --[[int]] wheelColor) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_EXTRA_COLOURS' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(pearlescentColor) == "number", "Arg #2 (pearlescentColor) must be a number.")
	assert(type(wheelColor) == "number", "Arg #3 (wheelColor) must be a number.")

	local result = native_call(0x2036F561ADD12E33, vehicle, pearlescentColor, wheelColor)
end
natives.vehicle.set_vehicle_extra_colours = natives.VEHICLE.SET_VEHICLE_EXTRA_COLOURS

function natives.VEHICLE.GET_VEHICLE_EXTRA_COLOURS(--[[Vehicle]] vehicle, --[[int*]] pearlescentColor, --[[int*]] wheelColor) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_VEHICLE_EXTRA_COLOURS' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(pearlescentColor) == "userdata", "Arg #2 (pearlescentColor) must be a userdata.")
	assert(type(wheelColor) == "userdata", "Arg #3 (wheelColor) must be a userdata.")

	local result = native_call(0x3BC4245933A166F7, vehicle, pearlescentColor, wheelColor)
end
natives.vehicle.get_vehicle_extra_colours = natives.VEHICLE.GET_VEHICLE_EXTRA_COLOURS

function natives.VEHICLE.SET_VEHICLE_EXTRA_COLOUR_5(--[[Vehicle]] vehicle, --[[int]] color) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_EXTRA_COLOUR_5' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(color) == "number", "Arg #2 (color) must be a number.")

	local result = native_call(0xF40DD601A65F7F19, vehicle, color)
end
natives.vehicle.set_vehicle_extra_colour_5 = natives.VEHICLE.SET_VEHICLE_EXTRA_COLOUR_5

function natives.VEHICLE.GET_VEHICLE_EXTRA_COLOUR_5(--[[Vehicle]] vehicle, --[[int*]] color) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_VEHICLE_EXTRA_COLOUR_5' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(color) == "userdata", "Arg #2 (color) must be a userdata.")

	local result = native_call(0x7D1464D472D32136, vehicle, color)
end
natives.vehicle.get_vehicle_extra_colour_5 = natives.VEHICLE.GET_VEHICLE_EXTRA_COLOUR_5

function natives.VEHICLE.SET_VEHICLE_EXTRA_COLOUR_6(--[[Vehicle]] vehicle, --[[int]] color) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_EXTRA_COLOUR_6' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(color) == "number", "Arg #2 (color) must be a number.")

	local result = native_call(0x6089CDF6A57F326C, vehicle, color)
end
natives.vehicle.set_vehicle_extra_colour_6 = natives.VEHICLE.SET_VEHICLE_EXTRA_COLOUR_6

function natives.VEHICLE.GET_VEHICLE_EXTRA_COLOUR_6(--[[Vehicle]] vehicle, --[[int*]] color) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_VEHICLE_EXTRA_COLOUR_6' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(color) == "userdata", "Arg #2 (color) must be a userdata.")

	local result = native_call(0xB7635E80A5C31BFF, vehicle, color)
end
natives.vehicle.get_vehicle_extra_colour_6 = natives.VEHICLE.GET_VEHICLE_EXTRA_COLOUR_6

function natives.VEHICLE.STOP_ALL_GARAGE_ACTIVITY() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.STOP_ALL_GARAGE_ACTIVITY' due to disabled trusted mode")

	local result = native_call(0x0F87E938BDF29D66)
end
natives.vehicle.stop_all_garage_activity = natives.VEHICLE.STOP_ALL_GARAGE_ACTIVITY

--[[
This fixes a vehicle.
If the vehicle's engine's broken then you cannot fix it with this native.
]]
function natives.VEHICLE.SET_VEHICLE_FIXED(--[[Vehicle]] vehicle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_FIXED' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x115722B1B9C14C1C, vehicle)
end
natives.vehicle.set_vehicle_fixed = natives.VEHICLE.SET_VEHICLE_FIXED

--[[
This fixes the deformation of a vehicle but the vehicle health doesn't improve
]]
function natives.VEHICLE.SET_VEHICLE_DEFORMATION_FIXED(--[[Vehicle]] vehicle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_DEFORMATION_FIXED' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x953DA1E1B12C0491, vehicle)
end
natives.vehicle.set_vehicle_deformation_fixed = natives.VEHICLE.SET_VEHICLE_DEFORMATION_FIXED

function natives.VEHICLE.SET_VEHICLE_CAN_ENGINE_MISSFIRE(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_CAN_ENGINE_MISSFIRE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x206BC5DC9D1AC70A, vehicle, toggle)
end
natives.vehicle.set_vehicle_can_engine_missfire = natives.VEHICLE.SET_VEHICLE_CAN_ENGINE_MISSFIRE

function natives.VEHICLE.SET_VEHICLE_CAN_LEAK_OIL(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_CAN_LEAK_OIL' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x51BB2D88D31A914B, vehicle, toggle)
end
natives.vehicle.set_vehicle_can_leak_oil = natives.VEHICLE.SET_VEHICLE_CAN_LEAK_OIL

function natives.VEHICLE.SET_VEHICLE_CAN_LEAK_PETROL(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_CAN_LEAK_PETROL' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x192547247864DFDD, vehicle, toggle)
end
natives.vehicle.set_vehicle_can_leak_petrol = natives.VEHICLE.SET_VEHICLE_CAN_LEAK_PETROL

function natives.VEHICLE.SET_DISABLE_VEHICLE_PETROL_TANK_FIRES(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_DISABLE_VEHICLE_PETROL_TANK_FIRES' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x465BF26AB9684352, vehicle, toggle)
end
natives.vehicle.set_disable_vehicle_petrol_tank_fires = natives.VEHICLE.SET_DISABLE_VEHICLE_PETROL_TANK_FIRES

function natives.VEHICLE.SET_DISABLE_VEHICLE_PETROL_TANK_DAMAGE(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_DISABLE_VEHICLE_PETROL_TANK_DAMAGE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x37C8252A7C92D017, vehicle, toggle)
end
natives.vehicle.set_disable_vehicle_petrol_tank_damage = natives.VEHICLE.SET_DISABLE_VEHICLE_PETROL_TANK_DAMAGE

function natives.VEHICLE.SET_DISABLE_VEHICLE_ENGINE_FIRES(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_DISABLE_VEHICLE_ENGINE_FIRES' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x91A0BD635321F145, vehicle, toggle)
end
natives.vehicle.set_disable_vehicle_engine_fires = natives.VEHICLE.SET_DISABLE_VEHICLE_ENGINE_FIRES

function natives.VEHICLE.SET_VEHICLE_LIMIT_SPEED_WHEN_PLAYER_INACTIVE(--[[Vehicle]] vehicle, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_LIMIT_SPEED_WHEN_PLAYER_INACTIVE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0xC50CE861B55EAB8B, vehicle, p1)
end
natives.vehicle.set_vehicle_limit_speed_when_player_inactive = natives.VEHICLE.SET_VEHICLE_LIMIT_SPEED_WHEN_PLAYER_INACTIVE

--[[
sfink: sets bit in vehicle's structure, used by maintransition, fm_mission_controller, mission_race and a couple of other scripts. see dissassembly: 
CVehicle *__fastcall sub_140CDAA10(signed int a1, char a2)
{
    CVehicle *result; // rax@1

    result = EntityAsCVehicle(a1);
    if ( result )
    {
        result->field_886 &= 0xEFu;
        result->field_886 |= 16 * (a2 & 1);
    }
    return result;
}
]]
function natives.VEHICLE.SET_VEHICLE_STOP_INSTANTLY_WHEN_PLAYER_INACTIVE(--[[Vehicle]] vehicle, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_STOP_INSTANTLY_WHEN_PLAYER_INACTIVE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0x6EBFB22D646FFC18, vehicle, p1)
end
natives.vehicle.set_vehicle_stop_instantly_when_player_inactive = natives.VEHICLE.SET_VEHICLE_STOP_INSTANTLY_WHEN_PLAYER_INACTIVE

function natives.VEHICLE.SET_DISABLE_PRETEND_OCCUPANTS(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_DISABLE_PRETEND_OCCUPANTS' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x25367DE49D64CF16, vehicle, toggle)
end
natives.vehicle.set_disable_pretend_occupants = natives.VEHICLE.SET_DISABLE_PRETEND_OCCUPANTS

function natives.VEHICLE.REMOVE_VEHICLES_FROM_GENERATORS_IN_AREA(--[[float]] x1, --[[float]] y1, --[[float]] z1, --[[float]] x2, --[[float]] y2, --[[float]] z2, --[[Any]] unk) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.REMOVE_VEHICLES_FROM_GENERATORS_IN_AREA' due to disabled trusted mode")

	assert(type(x1) == "number", "Arg #1 (x1) must be a number.")
	assert(type(y1) == "number", "Arg #2 (y1) must be a number.")
	assert(type(z1) == "number", "Arg #3 (z1) must be a number.")
	assert(type(x2) == "number", "Arg #4 (x2) must be a number.")
	assert(type(y2) == "number", "Arg #5 (y2) must be a number.")
	assert(type(z2) == "number", "Arg #6 (z2) must be a number.")
	assert(type(unk) == "number", "Arg #7 (unk) must be a number.")

	local result = native_call(0x46A1E1A299EC4BBA, x1, y1, z1, x2, y2, z2, unk)
end
natives.vehicle.remove_vehicles_from_generators_in_area = natives.VEHICLE.REMOVE_VEHICLES_FROM_GENERATORS_IN_AREA

--[[
Locks the vehicle's steering to the desired angle, explained below.

Requires to be called onTick. Steering is unlocked the moment the function stops being called on the vehicle.

Steer bias:
-1.0 = full right
0.0 = centered steering
1.0 = full left
]]
function natives.VEHICLE.SET_VEHICLE_STEER_BIAS(--[[Vehicle]] vehicle, --[[float]] value) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_STEER_BIAS' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(value) == "number", "Arg #2 (value) must be a number.")

	local result = native_call(0x42A8EC77D5150CBE, vehicle, value)
end
natives.vehicle.set_vehicle_steer_bias = natives.VEHICLE.SET_VEHICLE_STEER_BIAS

function natives.VEHICLE.IS_VEHICLE_EXTRA_TURNED_ON(--[[Vehicle]] vehicle, --[[int]] extraId) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.IS_VEHICLE_EXTRA_TURNED_ON' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(extraId) == "number", "Arg #2 (extraId) must be a number.")

	local result = native_call(0xD2E6822DBFD6C8BD, vehicle, extraId)
	return result:__tointeger() ~= 0
end
natives.vehicle.is_vehicle_extra_turned_on = natives.VEHICLE.IS_VEHICLE_EXTRA_TURNED_ON

--[[
Note: only some vehicle have extras
extra ids are from 1 - 9 depending on the vehicle

-------------------------------------------------

^ not sure if outdated or simply wrong. Max extra ID for b944 is 14

-------------------------------------------------
p2 is not a on/off toggle. mostly 0 means on and 1 means off.
not sure if it really should be a BOOL.
]]
function natives.VEHICLE.SET_VEHICLE_EXTRA(--[[Vehicle]] vehicle, --[[int]] extraId, --[[BOOL]] disable) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_EXTRA' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(extraId) == "number", "Arg #2 (extraId) must be a number.")
	assert(type(disable) == "boolean", "Arg #3 (disable) must be a boolean.")

	local result = native_call(0x7EE3A3C5E4A40CC9, vehicle, extraId, disable)
end
natives.vehicle.set_vehicle_extra = natives.VEHICLE.SET_VEHICLE_EXTRA

--[[
Checks via CVehicleModelInfo
]]
function natives.VEHICLE.DOES_EXTRA_EXIST(--[[Vehicle]] vehicle, --[[int]] extraId) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.DOES_EXTRA_EXIST' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(extraId) == "number", "Arg #2 (extraId) must be a number.")

	local result = native_call(0x1262D55792428154, vehicle, extraId)
	return result:__tointeger() ~= 0
end
natives.vehicle.does_extra_exist = natives.VEHICLE.DOES_EXTRA_EXIST

--[[
Checks if vehicle tyre at index exists. Also returns false if tyre was removed.
]]
function natives.VEHICLE.IS_EXTRA_BROKEN_OFF(--[[Vehicle]] vehicle, --[[int]] tyreIndex) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.IS_EXTRA_BROKEN_OFF' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(tyreIndex) == "number", "Arg #2 (tyreIndex) must be a number.")

	local result = native_call(0x534E36D4DB9ECC5D, vehicle, tyreIndex)
	return result:__tointeger() ~= 0
end
natives.vehicle.is_extra_broken_off = natives.VEHICLE.IS_EXTRA_BROKEN_OFF

function natives.VEHICLE.SET_CONVERTIBLE_ROOF(--[[Vehicle]] vehicle, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_CONVERTIBLE_ROOF' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0xF39C4F538B5124C2, vehicle, p1)
end
natives.vehicle.set_convertible_roof = natives.VEHICLE.SET_CONVERTIBLE_ROOF

function natives.VEHICLE.LOWER_CONVERTIBLE_ROOF(--[[Vehicle]] vehicle, --[[BOOL]] instantlyLower) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.LOWER_CONVERTIBLE_ROOF' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(instantlyLower) == "boolean", "Arg #2 (instantlyLower) must be a boolean.")

	local result = native_call(0xDED51F703D0FA83D, vehicle, instantlyLower)
end
natives.vehicle.lower_convertible_roof = natives.VEHICLE.LOWER_CONVERTIBLE_ROOF

function natives.VEHICLE.RAISE_CONVERTIBLE_ROOF(--[[Vehicle]] vehicle, --[[BOOL]] instantlyRaise) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.RAISE_CONVERTIBLE_ROOF' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(instantlyRaise) == "boolean", "Arg #2 (instantlyRaise) must be a boolean.")

	local result = native_call(0x8F5FB35D7E88FC70, vehicle, instantlyRaise)
end
natives.vehicle.raise_convertible_roof = natives.VEHICLE.RAISE_CONVERTIBLE_ROOF

--[[
0 -> up
1 -> lowering down
2 -> down
3 -> raising up
]]
function natives.VEHICLE.GET_CONVERTIBLE_ROOF_STATE(--[[Vehicle]] vehicle) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_CONVERTIBLE_ROOF_STATE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0xF8C397922FC03F41, vehicle)
	return result:__tointeger()
end
natives.vehicle.get_convertible_roof_state = natives.VEHICLE.GET_CONVERTIBLE_ROOF_STATE

--[[
p1 is false almost always.

However, in launcher_carwash/carwash1/carwash2 scripts, p1 is true and is accompanied by DOES_VEHICLE_HAVE_ROOF 
]]
function natives.VEHICLE.IS_VEHICLE_A_CONVERTIBLE(--[[Vehicle]] vehicle, --[[BOOL]] p1) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.IS_VEHICLE_A_CONVERTIBLE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0x52F357A30698BCCE, vehicle, p1)
	return result:__tointeger() ~= 0
end
natives.vehicle.is_vehicle_a_convertible = natives.VEHICLE.IS_VEHICLE_A_CONVERTIBLE

--[[
Transforms the `stormberg` to its "water vehicle" variant. If the vehicle is already in that state then the vehicle transformation audio will still play, but the vehicle won't change at all.
]]
function natives.VEHICLE.TRANSFORM_TO_SUBMARINE(--[[Vehicle]] vehicle, --[[BOOL]] noAnimation) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.TRANSFORM_TO_SUBMARINE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(noAnimation) == "boolean", "Arg #2 (noAnimation) must be a boolean.")

	local result = native_call(0xBE4C854FFDB6EEBE, vehicle, noAnimation)
end
natives.vehicle.transform_to_submarine = natives.VEHICLE.TRANSFORM_TO_SUBMARINE

--[[
Transforms the `stormberg` to its "road vehicle" variant. If the vehicle is already in that state then the vehicle transformation audio will still play, but the vehicle won't change at all.
]]
function natives.VEHICLE.TRANSFORM_TO_CAR(--[[Vehicle]] vehicle, --[[BOOL]] noAnimation) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.TRANSFORM_TO_CAR' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(noAnimation) == "boolean", "Arg #2 (noAnimation) must be a boolean.")

	local result = native_call(0x2A69FFD1B42BFF9E, vehicle, noAnimation)
end
natives.vehicle.transform_to_car = natives.VEHICLE.TRANSFORM_TO_CAR

function natives.VEHICLE.IS_VEHICLE_IN_SUBMARINE_MODE(--[[Vehicle]] vehicle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.IS_VEHICLE_IN_SUBMARINE_MODE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0xA77DC70BD689A1E5, vehicle)
	return result:__tointeger() ~= 0
end
natives.vehicle.is_vehicle_in_submarine_mode = natives.VEHICLE.IS_VEHICLE_IN_SUBMARINE_MODE

function natives.VEHICLE.IS_VEHICLE_STOPPED_AT_TRAFFIC_LIGHTS(--[[Vehicle]] vehicle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.IS_VEHICLE_STOPPED_AT_TRAFFIC_LIGHTS' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x2959F696AE390A99, vehicle)
	return result:__tointeger() ~= 0
end
natives.vehicle.is_vehicle_stopped_at_traffic_lights = natives.VEHICLE.IS_VEHICLE_STOPPED_AT_TRAFFIC_LIGHTS

--[[
Apply damage to vehicle at a location. Location is relative to vehicle model (not world).

Radius of effect damage applied in a sphere at impact location
When `focusOnModel` set to `true`, the damage sphere will travel towards the vehicle from the given point, thus guaranteeing an impact
]]
function natives.VEHICLE.SET_VEHICLE_DAMAGE(--[[Vehicle]] vehicle, --[[float]] xOffset, --[[float]] yOffset, --[[float]] zOffset, --[[float]] damage, --[[float]] radius, --[[BOOL]] focusOnModel) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_DAMAGE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(xOffset) == "number", "Arg #2 (xOffset) must be a number.")
	assert(type(yOffset) == "number", "Arg #3 (yOffset) must be a number.")
	assert(type(zOffset) == "number", "Arg #4 (zOffset) must be a number.")
	assert(type(damage) == "number", "Arg #5 (damage) must be a number.")
	assert(type(radius) == "number", "Arg #6 (radius) must be a number.")
	assert(type(focusOnModel) == "boolean", "Arg #7 (focusOnModel) must be a boolean.")

	local result = native_call(0xA1DD317EA8FD4F29, vehicle, xOffset, yOffset, zOffset, damage, radius, focusOnModel)
end
natives.vehicle.set_vehicle_damage = natives.VEHICLE.SET_VEHICLE_DAMAGE

function natives.VEHICLE.SET_VEHICLE_OCCUPANTS_TAKE_EXPLOSIVE_DAMAGE(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_OCCUPANTS_TAKE_EXPLOSIVE_DAMAGE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x35BB21DE06784373, p0, p1)
end
natives.vehicle.set_vehicle_occupants_take_explosive_damage = natives.VEHICLE.SET_VEHICLE_OCCUPANTS_TAKE_EXPLOSIVE_DAMAGE

--[[
Returns 1000.0 if the function is unable to get the address of the specified vehicle or if it's not a vehicle.

Minimum: -4000
Maximum: 1000

-4000: Engine is destroyed
0 and below: Engine catches fire and health rapidly declines
300: Engine is smoking and losing functionality
1000: Engine is perfect
]]
function natives.VEHICLE.GET_VEHICLE_ENGINE_HEALTH(--[[Vehicle]] vehicle) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_VEHICLE_ENGINE_HEALTH' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0xC45D23BAF168AAB8, vehicle)
	return result:__tonumber()
end
natives.vehicle.get_vehicle_engine_health = natives.VEHICLE.GET_VEHICLE_ENGINE_HEALTH

--[[
1000 is max health
Begins leaking gas at around 650 health
-999.90002441406 appears to be minimum health, although nothing special occurs <- false statement

-------------------------
Minimum: -4000
Maximum: 1000

-4000: Engine is destroyed
0 and below: Engine catches fire and health rapidly declines
300: Engine is smoking and losing functionality
1000: Engine is perfect
]]
function natives.VEHICLE.SET_VEHICLE_ENGINE_HEALTH(--[[Vehicle]] vehicle, --[[float]] health) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_ENGINE_HEALTH' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(health) == "number", "Arg #2 (health) must be a number.")

	local result = native_call(0x45F6D8EEF34ABEF1, vehicle, health)
end
natives.vehicle.set_vehicle_engine_health = natives.VEHICLE.SET_VEHICLE_ENGINE_HEALTH

--[[
Works just like SET_VEHICLE_ENGINE_HEALTH, didn't saw any difference. But this native works only for planes.
]]
function natives.VEHICLE.SET_PLANE_ENGINE_HEALTH(--[[Vehicle]] vehicle, --[[float]] health) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_PLANE_ENGINE_HEALTH' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(health) == "number", "Arg #2 (health) must be a number.")

	local result = native_call(0x2A86A0475B6A1434, vehicle, health)
end
natives.vehicle.set_plane_engine_health = natives.VEHICLE.SET_PLANE_ENGINE_HEALTH

--[[
1000 is max health
Begins leaking gas at around 650 health
-999.90002441406 appears to be minimum health, although nothing special occurs
]]
function natives.VEHICLE.GET_VEHICLE_PETROL_TANK_HEALTH(--[[Vehicle]] vehicle) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_VEHICLE_PETROL_TANK_HEALTH' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x7D5DABE888D2D074, vehicle)
	return result:__tonumber()
end
natives.vehicle.get_vehicle_petrol_tank_health = natives.VEHICLE.GET_VEHICLE_PETROL_TANK_HEALTH

--[[
1000 is max health
Begins leaking gas at around 650 health
-999.90002441406 appears to be minimum health, although nothing special occurs
]]
function natives.VEHICLE.SET_VEHICLE_PETROL_TANK_HEALTH(--[[Vehicle]] vehicle, --[[float]] health) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_PETROL_TANK_HEALTH' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(health) == "number", "Arg #2 (health) must be a number.")

	local result = native_call(0x70DB57649FA8D0D8, vehicle, health)
end
natives.vehicle.set_vehicle_petrol_tank_health = natives.VEHICLE.SET_VEHICLE_PETROL_TANK_HEALTH

--[[
p1 can be anywhere from 0 to 3 in the scripts. p2 is generally somewhere in the 1000 to 10000 range.
]]
function natives.VEHICLE.IS_VEHICLE_STUCK_TIMER_UP(--[[Vehicle]] vehicle, --[[int]] p1, --[[int]] p2) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.IS_VEHICLE_STUCK_TIMER_UP' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0x679BE1DAF71DA874, vehicle, p1, p2)
	return result:__tointeger() ~= 0
end
natives.vehicle.is_vehicle_stuck_timer_up = natives.VEHICLE.IS_VEHICLE_STUCK_TIMER_UP

--[[
The inner function has a switch on the second parameter. It's the stuck timer index.

Here's some pseudo code I wrote for the inner function:
void __fastcall NATIVE_RESET_VEHICLE_STUCK_TIMER_INNER(CUnknown* unknownClassInVehicle, int timerIndex)
{
 switch (timerIndex)
   {
 case 0:
       unknownClassInVehicle->FirstStuckTimer = (WORD)0u;
 case 1:
       unknownClassInVehicle->SecondStuckTimer = (WORD)0u;
    case 2:
       unknownClassInVehicle->ThirdStuckTimer = (WORD)0u;
 case 3:
       unknownClassInVehicle->FourthStuckTimer = (WORD)0u;
    case 4:
       unknownClassInVehicle->FirstStuckTimer = (WORD)0u;
     unknownClassInVehicle->SecondStuckTimer = (WORD)0u;
        unknownClassInVehicle->ThirdStuckTimer = (WORD)0u;
     unknownClassInVehicle->FourthStuckTimer = (WORD)0u;
        break;
    };
}
]]
function natives.VEHICLE.RESET_VEHICLE_STUCK_TIMER(--[[Vehicle]] vehicle, --[[int]] nullAttributes) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.RESET_VEHICLE_STUCK_TIMER' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(nullAttributes) == "number", "Arg #2 (nullAttributes) must be a number.")

	local result = native_call(0xD7591B0065AFAA7A, vehicle, nullAttributes)
end
natives.vehicle.reset_vehicle_stuck_timer = natives.VEHICLE.RESET_VEHICLE_STUCK_TIMER

--[[
p1 is always 0 in the scripts.

p1 = check if vehicle is on fire
]]
function natives.VEHICLE.IS_VEHICLE_DRIVEABLE(--[[Vehicle]] vehicle, --[[BOOL]] isOnFireCheck) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.IS_VEHICLE_DRIVEABLE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(isOnFireCheck) == "boolean", "Arg #2 (isOnFireCheck) must be a boolean.")

	local result = native_call(0x4C241E39B23DF959, vehicle, isOnFireCheck)
	return result:__tointeger() ~= 0
end
natives.vehicle.is_vehicle_driveable = natives.VEHICLE.IS_VEHICLE_DRIVEABLE

function natives.VEHICLE.SET_VEHICLE_HAS_BEEN_OWNED_BY_PLAYER(--[[Vehicle]] vehicle, --[[BOOL]] owned) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_HAS_BEEN_OWNED_BY_PLAYER' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(owned) == "boolean", "Arg #2 (owned) must be a boolean.")

	local result = native_call(0x2B5F9D2AF1F1722D, vehicle, owned)
end
natives.vehicle.set_vehicle_has_been_owned_by_player = natives.VEHICLE.SET_VEHICLE_HAS_BEEN_OWNED_BY_PLAYER

function natives.VEHICLE.SET_VEHICLE_NEEDS_TO_BE_HOTWIRED(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_NEEDS_TO_BE_HOTWIRED' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xFBA550EA44404EE6, vehicle, toggle)
end
natives.vehicle.set_vehicle_needs_to_be_hotwired = natives.VEHICLE.SET_VEHICLE_NEEDS_TO_BE_HOTWIRED

function natives.VEHICLE.SET_VEHICLE_BLIP_THROTTLE_RANDOMLY(--[[Vehicle]] vehicle, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_BLIP_THROTTLE_RANDOMLY' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0x9F3F689B814F2599, vehicle, p1)
end
natives.vehicle.set_vehicle_blip_throttle_randomly = natives.VEHICLE.SET_VEHICLE_BLIP_THROTTLE_RANDOMLY

function natives.VEHICLE.SET_POLICE_FOCUS_WILL_TRACK_VEHICLE(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_POLICE_FOCUS_WILL_TRACK_VEHICLE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x4E74E62E0A97E901, vehicle, toggle)
end
natives.vehicle.set_police_focus_will_track_vehicle = natives.VEHICLE.SET_POLICE_FOCUS_WILL_TRACK_VEHICLE

--[[
Sounds the horn for the specified vehicle.

vehicle: The vehicle to activate the horn for.
mode: The hash of "NORMAL" or "HELDDOWN". Can be 0.
duration: The duration to sound the horn, in milliseconds.

Note: If a player is in the vehicle, it will only sound briefly.
]]
function natives.VEHICLE.START_VEHICLE_HORN(--[[Vehicle]] vehicle, --[[int]] duration, --[[Hash]] mode, --[[BOOL]] forever) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.START_VEHICLE_HORN' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(duration) == "number", "Arg #2 (duration) must be a number.")
	assert(type(mode) == "number", "Arg #3 (mode) must be a number.")
	assert(type(forever) == "boolean", "Arg #4 (forever) must be a boolean.")

	local result = native_call(0x9C8C6504B5B63D2C, vehicle, duration, mode, forever)
end
natives.vehicle.start_vehicle_horn = natives.VEHICLE.START_VEHICLE_HORN

--[[
If set to TRUE, it seems to suppress door noises and doesn't allow the horn to be continuous.

-Doesn't seem to suppress door noises for me, at least with the vehicle add-on I tried
]]
function natives.VEHICLE.SET_VEHICLE_IN_CAR_MOD_SHOP(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_IN_CAR_MOD_SHOP' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x9D44FCCE98450843, vehicle, toggle)
end
natives.vehicle.set_vehicle_in_car_mod_shop = natives.VEHICLE.SET_VEHICLE_IN_CAR_MOD_SHOP

--[[
if true, axles won't bend.
]]
function natives.VEHICLE.SET_VEHICLE_HAS_STRONG_AXLES(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_HAS_STRONG_AXLES' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x92F0CF722BC4202F, vehicle, toggle)
end
natives.vehicle.set_vehicle_has_strong_axles = natives.VEHICLE.SET_VEHICLE_HAS_STRONG_AXLES

--[[
Returns model name of vehicle in all caps. Needs to be displayed through localizing text natives to get proper display name.
-----------------------------------------------------------------------------------------------------------------------------------------
While often the case, this does not simply return the model name of the vehicle (which could be hashed to return the model hash). Variations of the same vehicle may also use the same display name.
-----------------------------------------------------------------------------------------------------------------------------------------

Returns "CARNOTFOUND" if the hash doesn't match a vehicle hash.

Using HUD::_GET_LABEL_TEXT, you can get the localized name.

Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
]]
function natives.VEHICLE.GET_DISPLAY_NAME_FROM_VEHICLE_MODEL(--[[Hash]] modelHash) -- Returns const char*
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_DISPLAY_NAME_FROM_VEHICLE_MODEL' due to disabled trusted mode")

	assert(type(modelHash) == "number", "Arg #1 (modelHash) must be a number.")

	local result = native_call(0xB215AAC32D25D019, modelHash)
	return result:__tostring(true)
end
natives.vehicle.get_display_name_from_vehicle_model = natives.VEHICLE.GET_DISPLAY_NAME_FROM_VEHICLE_MODEL

--[[
Will return a vehicle's manufacturer display label.
Returns "CARNOTFOUND" if the hash doesn't match a vehicle hash.

Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
]]
function natives.VEHICLE.GET_MAKE_NAME_FROM_VEHICLE_MODEL(--[[Hash]] modelHash) -- Returns const char*
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_MAKE_NAME_FROM_VEHICLE_MODEL' due to disabled trusted mode")

	assert(type(modelHash) == "number", "Arg #1 (modelHash) must be a number.")

	local result = native_call(0xF7AF4F159FF99F97, modelHash)
	return result:__tostring(true)
end
natives.vehicle.get_make_name_from_vehicle_model = natives.VEHICLE.GET_MAKE_NAME_FROM_VEHICLE_MODEL

--[[
The only example I can find of this function in the scripts, is this:

struct _s = VEHICLE::GET_VEHICLE_DEFORMATION_AT_POS(rPtr((A_0) + 4), 1.21f, 6.15f, 0.3f);

-----------------------------------------------------------------------------------------------------------------------------------------
PC scripts:

v_5/*{3}*/ = VEHICLE::GET_VEHICLE_DEFORMATION_AT_POS(a_0._f1, 1.21, 6.15, 0.3);
]]
function natives.VEHICLE.GET_VEHICLE_DEFORMATION_AT_POS(--[[Vehicle]] vehicle, --[[float]] offsetX, --[[float]] offsetY, --[[float]] offsetZ) -- Returns Vector3
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_VEHICLE_DEFORMATION_AT_POS' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(offsetX) == "number", "Arg #2 (offsetX) must be a number.")
	assert(type(offsetY) == "number", "Arg #3 (offsetY) must be a number.")
	assert(type(offsetZ) == "number", "Arg #4 (offsetZ) must be a number.")

	local result = native_call(0x4EC6CFBC7B2E9536, vehicle, offsetX, offsetY, offsetZ)
	return result:__tov3()
end
natives.vehicle.get_vehicle_deformation_at_pos = natives.VEHICLE.GET_VEHICLE_DEFORMATION_AT_POS

function natives.VEHICLE.SET_VEHICLE_LIVERY(--[[Vehicle]] vehicle, --[[int]] livery) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_LIVERY' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(livery) == "number", "Arg #2 (livery) must be a number.")

	local result = native_call(0x60BF608F1B8CD1B6, vehicle, livery)
end
natives.vehicle.set_vehicle_livery = natives.VEHICLE.SET_VEHICLE_LIVERY

--[[
-1 = no livery
]]
function natives.VEHICLE.GET_VEHICLE_LIVERY(--[[Vehicle]] vehicle) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_VEHICLE_LIVERY' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x2BB9230590DA5E8A, vehicle)
	return result:__tointeger()
end
natives.vehicle.get_vehicle_livery = natives.VEHICLE.GET_VEHICLE_LIVERY

--[[
Returns -1 if the vehicle has no livery
]]
function natives.VEHICLE.GET_VEHICLE_LIVERY_COUNT(--[[Vehicle]] vehicle) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_VEHICLE_LIVERY_COUNT' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x87B63E25A529D526, vehicle)
	return result:__tointeger()
end
natives.vehicle.get_vehicle_livery_count = natives.VEHICLE.GET_VEHICLE_LIVERY_COUNT

--[[
Used to set the tornado custom (convertible) rooftop livery.

Livery value that works for tornado custom is between 0 and 9 from what i can tell. Maybe 0-8 even.

Might work on other custom vehicles but im not sure what those might be, only confirmed it working with the tornado custom.
]]
function natives.VEHICLE.SET_VEHICLE_LIVERY2(--[[Vehicle]] vehicle, --[[int]] livery) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_LIVERY2' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(livery) == "number", "Arg #2 (livery) must be a number.")

	local result = native_call(0xA6D3A8750DC73270, vehicle, livery)
end
natives.vehicle.set_vehicle_livery2 = natives.VEHICLE.SET_VEHICLE_LIVERY2

--[[
Returns index of the current vehicle's rooftop livery. A getter for _SET_VEHICLE_ROOF_LIVERY.
]]
function natives.VEHICLE.GET_VEHICLE_LIVERY2(--[[Vehicle]] vehicle) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_VEHICLE_LIVERY2' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x60190048C0764A26, vehicle)
	return result:__tointeger()
end
natives.vehicle.get_vehicle_livery2 = natives.VEHICLE.GET_VEHICLE_LIVERY2

--[[
Returns a number of available rooftop liveries, or -1 if vehicle has no rooftop liveries available.
]]
function natives.VEHICLE.GET_VEHICLE_LIVERY2_COUNT(--[[Vehicle]] vehicle) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_VEHICLE_LIVERY2_COUNT' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x5ECB40269053C0D4, vehicle)
	return result:__tointeger()
end
natives.vehicle.get_vehicle_livery2_count = natives.VEHICLE.GET_VEHICLE_LIVERY2_COUNT

--[[
This will return false if the window is broken, or rolled down.
Window indexes:
0 = Front Right Window
1 = Front Left Window
2 = Back Right Window
3 = Back Left Window


Those numbers go on for vehicles that have more than 4 doors with windows.
]]
function natives.VEHICLE.IS_VEHICLE_WINDOW_INTACT(--[[Vehicle]] vehicle, --[[int]] windowIndex) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.IS_VEHICLE_WINDOW_INTACT' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(windowIndex) == "number", "Arg #2 (windowIndex) must be a number.")

	local result = native_call(0x46E571A0E20D01F1, vehicle, windowIndex)
	return result:__tointeger() ~= 0
end
natives.vehicle.is_vehicle_window_intact = natives.VEHICLE.IS_VEHICLE_WINDOW_INTACT

--[[
Appears to return false if any window is broken.
]]
function natives.VEHICLE.ARE_ALL_VEHICLE_WINDOWS_INTACT(--[[Vehicle]] vehicle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.ARE_ALL_VEHICLE_WINDOWS_INTACT' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x11D862A3E977A9EF, vehicle)
	return result:__tointeger() ~= 0
end
natives.vehicle.are_all_vehicle_windows_intact = natives.VEHICLE.ARE_ALL_VEHICLE_WINDOWS_INTACT

--[[
Returns false if every seat is occupied.
]]
function natives.VEHICLE.ARE_ANY_VEHICLE_SEATS_FREE(--[[Vehicle]] vehicle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.ARE_ANY_VEHICLE_SEATS_FREE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x2D34FC3BC4ADB780, vehicle)
	return result:__tointeger() ~= 0
end
natives.vehicle.are_any_vehicle_seats_free = natives.VEHICLE.ARE_ANY_VEHICLE_SEATS_FREE

function natives.VEHICLE.RESET_VEHICLE_WHEELS(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.RESET_VEHICLE_WHEELS' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x21D2E5662C1F6FED, vehicle, toggle)
end
natives.vehicle.reset_vehicle_wheels = natives.VEHICLE.RESET_VEHICLE_WHEELS

function natives.VEHICLE.IS_HELI_PART_BROKEN(--[[Vehicle]] vehicle, --[[BOOL]] p1, --[[BOOL]] p2, --[[BOOL]] p3) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.IS_HELI_PART_BROKEN' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")
	assert(type(p3) == "boolean", "Arg #4 (p3) must be a boolean.")

	local result = native_call(0xBC74B4BE25EB6C8A, vehicle, p1, p2, p3)
	return result:__tointeger() ~= 0
end
natives.vehicle.is_heli_part_broken = natives.VEHICLE.IS_HELI_PART_BROKEN

--[[
Max 1000.
At 0 the main rotor will stall.
]]
function natives.VEHICLE.GET_HELI_MAIN_ROTOR_HEALTH(--[[Vehicle]] vehicle) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_HELI_MAIN_ROTOR_HEALTH' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0xE4CB7541F413D2C5, vehicle)
	return result:__tonumber()
end
natives.vehicle.get_heli_main_rotor_health = natives.VEHICLE.GET_HELI_MAIN_ROTOR_HEALTH

--[[
Max 1000.
At 0 the tail rotor will stall.
]]
function natives.VEHICLE.GET_HELI_TAIL_ROTOR_HEALTH(--[[Vehicle]] vehicle) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_HELI_TAIL_ROTOR_HEALTH' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0xAE8CE82A4219AC8C, vehicle)
	return result:__tonumber()
end
natives.vehicle.get_heli_tail_rotor_health = natives.VEHICLE.GET_HELI_TAIL_ROTOR_HEALTH

--[[
Max 1000.
At -100 both helicopter rotors will stall.
]]
function natives.VEHICLE.GET_HELI_TAIL_BOOM_HEALTH(--[[Vehicle]] vehicle) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_HELI_TAIL_BOOM_HEALTH' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0xAC51915D27E4A5F7, vehicle)
	return result:__tonumber()
end
natives.vehicle.get_heli_tail_boom_health = natives.VEHICLE.GET_HELI_TAIL_BOOM_HEALTH

function natives.VEHICLE.SET_HELI_MAIN_ROTOR_HEALTH(--[[Vehicle]] vehicle, --[[float]] health) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_HELI_MAIN_ROTOR_HEALTH' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(health) == "number", "Arg #2 (health) must be a number.")

	local result = native_call(0x4056EA1105F5ABD7, vehicle, health)
end
natives.vehicle.set_heli_main_rotor_health = natives.VEHICLE.SET_HELI_MAIN_ROTOR_HEALTH

function natives.VEHICLE.SET_HELI_TAIL_ROTOR_HEALTH(--[[Vehicle]] vehicle, --[[float]] health) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_HELI_TAIL_ROTOR_HEALTH' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(health) == "number", "Arg #2 (health) must be a number.")

	local result = native_call(0xFE205F38AAA58E5B, vehicle, health)
end
natives.vehicle.set_heli_tail_rotor_health = natives.VEHICLE.SET_HELI_TAIL_ROTOR_HEALTH

function natives.VEHICLE.SET_HELI_TAIL_BOOM_CAN_BREAK_OFF(--[[Vehicle]] vehicle, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_HELI_TAIL_BOOM_CAN_BREAK_OFF' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0x3EC8BF18AA453FE9, vehicle, p1)
end
natives.vehicle.set_heli_tail_boom_can_break_off = natives.VEHICLE.SET_HELI_TAIL_BOOM_CAN_BREAK_OFF

--[[
NOTE: Debugging functions are not present in the retail version of the game.
]]
function natives.VEHICLE.SET_VEHICLE_NAME_DEBUG(--[[Vehicle]] vehicle, --[[const char*]] name) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_NAME_DEBUG' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(name) == "string", "Arg #2 (name) must be a string.")

	local result = native_call(0xBFDF984E2C22B94F, vehicle, name)
end
natives.vehicle.set_vehicle_name_debug = natives.VEHICLE.SET_VEHICLE_NAME_DEBUG

--[[
Sets a vehicle to be strongly resistant to explosions. p0 is the vehicle; set p1 to false to toggle the effect on/off.
]]
function natives.VEHICLE.SET_VEHICLE_EXPLODES_ON_HIGH_EXPLOSION_DAMAGE(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_EXPLODES_ON_HIGH_EXPLOSION_DAMAGE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x71B0892EC081D60A, vehicle, toggle)
end
natives.vehicle.set_vehicle_explodes_on_high_explosion_damage = natives.VEHICLE.SET_VEHICLE_EXPLODES_ON_HIGH_EXPLOSION_DAMAGE

function natives.VEHICLE.SET_VEHICLE_EXPLODES_ON_EXPLOSION_DAMAGE_AT_ZERO_BODY_HEALTH(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_EXPLODES_ON_EXPLOSION_DAMAGE_AT_ZERO_BODY_HEALTH' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xD565F438137F0E10, p0, p1)
end
natives.vehicle.set_vehicle_explodes_on_explosion_damage_at_zero_body_health = natives.VEHICLE.SET_VEHICLE_EXPLODES_ON_EXPLOSION_DAMAGE_AT_ZERO_BODY_HEALTH

function natives.VEHICLE.SET_ALLOW_VEHICLE_EXPLODES_ON_CONTACT(--[[Vehicle]] vehicle, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_ALLOW_VEHICLE_EXPLODES_ON_CONTACT' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0x3441CAD2F2231923, vehicle, p1)
end
natives.vehicle.set_allow_vehicle_explodes_on_contact = natives.VEHICLE.SET_ALLOW_VEHICLE_EXPLODES_ON_CONTACT

function natives.VEHICLE.SET_VEHICLE_DISABLE_TOWING(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_DISABLE_TOWING' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x2B6747FAA9DB9D6B, vehicle, toggle)
end
natives.vehicle.set_vehicle_disable_towing = natives.VEHICLE.SET_VEHICLE_DISABLE_TOWING

function natives.VEHICLE.GET_VEHICLE_HAS_LANDING_GEAR(--[[Vehicle]] vehicle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_VEHICLE_HAS_LANDING_GEAR' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0xE43701C36CAFF1A4, vehicle)
	return result:__tointeger() ~= 0
end
natives.vehicle.get_vehicle_has_landing_gear = natives.VEHICLE.GET_VEHICLE_HAS_LANDING_GEAR

--[[
Works for vehicles with a retractable landing gear

landing gear states:

0: Deployed
1: Closing
2: Opening
3: Retracted

what can I use to make the hydra thing forward?
]]
function natives.VEHICLE.CONTROL_LANDING_GEAR(--[[Vehicle]] vehicle, --[[int]] state) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.CONTROL_LANDING_GEAR' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(state) == "number", "Arg #2 (state) must be a number.")

	local result = native_call(0xCFC8BE9A5E1FE575, vehicle, state)
end
natives.vehicle.control_landing_gear = natives.VEHICLE.CONTROL_LANDING_GEAR

--[[
Landing gear states:

0: Deployed
1: Closing (Retracting)
2:(Landing gear state 2 is never used.)
3: Opening (Deploying)
4: Retracted

Returns the current state of the vehicles landing gear.
]]
function natives.VEHICLE.GET_LANDING_GEAR_STATE(--[[Vehicle]] vehicle) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_LANDING_GEAR_STATE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x9B0F3DCA3DB0F4CD, vehicle)
	return result:__tointeger()
end
natives.vehicle.get_landing_gear_state = natives.VEHICLE.GET_LANDING_GEAR_STATE

function natives.VEHICLE.IS_ANY_VEHICLE_NEAR_POINT(--[[float]] x, --[[float]] y, --[[float]] z, --[[float]] radius) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.IS_ANY_VEHICLE_NEAR_POINT' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(radius) == "number", "Arg #4 (radius) must be a number.")

	local result = native_call(0x61E1DD6125A3EEE6, x, y, z, radius)
	return result:__tointeger() ~= 0
end
natives.vehicle.is_any_vehicle_near_point = natives.VEHICLE.IS_ANY_VEHICLE_NEAR_POINT

function natives.VEHICLE.REQUEST_VEHICLE_HIGH_DETAIL_MODEL(--[[Vehicle]] vehicle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.REQUEST_VEHICLE_HIGH_DETAIL_MODEL' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0xA6E9FDCB2C76785E, vehicle)
end
natives.vehicle.request_vehicle_high_detail_model = natives.VEHICLE.REQUEST_VEHICLE_HIGH_DETAIL_MODEL

function natives.VEHICLE.REMOVE_VEHICLE_HIGH_DETAIL_MODEL(--[[Vehicle]] vehicle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.REMOVE_VEHICLE_HIGH_DETAIL_MODEL' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x00689CDE5F7C6787, vehicle)
end
natives.vehicle.remove_vehicle_high_detail_model = natives.VEHICLE.REMOVE_VEHICLE_HIGH_DETAIL_MODEL

function natives.VEHICLE.IS_VEHICLE_HIGH_DETAIL(--[[Vehicle]] vehicle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.IS_VEHICLE_HIGH_DETAIL' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x1F25887F3C104278, vehicle)
	return result:__tointeger() ~= 0
end
natives.vehicle.is_vehicle_high_detail = natives.VEHICLE.IS_VEHICLE_HIGH_DETAIL

--[[
REQUEST_VEHICLE_ASSET(GET_HASH_KEY(cargobob3), 3);

vehicle found that have asset's:
cargobob3
submersible
blazer
]]
function natives.VEHICLE.REQUEST_VEHICLE_ASSET(--[[Hash]] vehicleHash, --[[int]] vehicleAsset) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.REQUEST_VEHICLE_ASSET' due to disabled trusted mode")

	assert(type(vehicleHash) == "number", "Arg #1 (vehicleHash) must be a number.")
	assert(type(vehicleAsset) == "number", "Arg #2 (vehicleAsset) must be a number.")

	local result = native_call(0x81A15811460FAB3A, vehicleHash, vehicleAsset)
end
natives.vehicle.request_vehicle_asset = natives.VEHICLE.REQUEST_VEHICLE_ASSET

function natives.VEHICLE.HAS_VEHICLE_ASSET_LOADED(--[[int]] vehicleAsset) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.HAS_VEHICLE_ASSET_LOADED' due to disabled trusted mode")

	assert(type(vehicleAsset) == "number", "Arg #1 (vehicleAsset) must be a number.")

	local result = native_call(0x1BBE0523B8DB9A21, vehicleAsset)
	return result:__tointeger() ~= 0
end
natives.vehicle.has_vehicle_asset_loaded = natives.VEHICLE.HAS_VEHICLE_ASSET_LOADED

function natives.VEHICLE.REMOVE_VEHICLE_ASSET(--[[int]] vehicleAsset) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.REMOVE_VEHICLE_ASSET' due to disabled trusted mode")

	assert(type(vehicleAsset) == "number", "Arg #1 (vehicleAsset) must be a number.")

	local result = native_call(0xACE699C71AB9DEB5, vehicleAsset)
end
natives.vehicle.remove_vehicle_asset = natives.VEHICLE.REMOVE_VEHICLE_ASSET

--[[
Sets how much the crane on the tow truck is raised, where 0.0 is fully lowered and 1.0 is fully raised.
]]
function natives.VEHICLE.SET_VEHICLE_TOW_TRUCK_ARM_POSITION(--[[Vehicle]] vehicle, --[[float]] position) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_TOW_TRUCK_ARM_POSITION' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(position) == "number", "Arg #2 (position) must be a number.")

	local result = native_call(0xFE54B92A344583CA, vehicle, position)
end
natives.vehicle.set_vehicle_tow_truck_arm_position = natives.VEHICLE.SET_VEHICLE_TOW_TRUCK_ARM_POSITION

--[[
HookOffset defines where the hook is attached. leave at 0 for default attachment.
]]
function natives.VEHICLE.ATTACH_VEHICLE_TO_TOW_TRUCK(--[[Vehicle]] towTruck, --[[Vehicle]] vehicle, --[[BOOL]] rear, --[[float]] hookOffsetX, --[[float]] hookOffsetY, --[[float]] hookOffsetZ) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.ATTACH_VEHICLE_TO_TOW_TRUCK' due to disabled trusted mode")

	assert(type(towTruck) == "number", "Arg #1 (towTruck) must be a number.")
	assert(type(vehicle) == "number", "Arg #2 (vehicle) must be a number.")
	assert(type(rear) == "boolean", "Arg #3 (rear) must be a boolean.")
	assert(type(hookOffsetX) == "number", "Arg #4 (hookOffsetX) must be a number.")
	assert(type(hookOffsetY) == "number", "Arg #5 (hookOffsetY) must be a number.")
	assert(type(hookOffsetZ) == "number", "Arg #6 (hookOffsetZ) must be a number.")

	local result = native_call(0x29A16F8D621C4508, towTruck, vehicle, rear, hookOffsetX, hookOffsetY, hookOffsetZ)
end
natives.vehicle.attach_vehicle_to_tow_truck = natives.VEHICLE.ATTACH_VEHICLE_TO_TOW_TRUCK

--[[
First two parameters swapped. Scripts verify that towTruck is the first parameter, not the second.
]]
function natives.VEHICLE.DETACH_VEHICLE_FROM_TOW_TRUCK(--[[Vehicle]] towTruck, --[[Vehicle]] vehicle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.DETACH_VEHICLE_FROM_TOW_TRUCK' due to disabled trusted mode")

	assert(type(towTruck) == "number", "Arg #1 (towTruck) must be a number.")
	assert(type(vehicle) == "number", "Arg #2 (vehicle) must be a number.")

	local result = native_call(0xC2DB6B6708350ED8, towTruck, vehicle)
end
natives.vehicle.detach_vehicle_from_tow_truck = natives.VEHICLE.DETACH_VEHICLE_FROM_TOW_TRUCK

function natives.VEHICLE.DETACH_VEHICLE_FROM_ANY_TOW_TRUCK(--[[Vehicle]] vehicle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.DETACH_VEHICLE_FROM_ANY_TOW_TRUCK' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0xD0E9CE05A1E68CD8, vehicle)
	return result:__tointeger() ~= 0
end
natives.vehicle.detach_vehicle_from_any_tow_truck = natives.VEHICLE.DETACH_VEHICLE_FROM_ANY_TOW_TRUCK

--[[
Scripts verify that towTruck is the first parameter, not the second.
]]
function natives.VEHICLE.IS_VEHICLE_ATTACHED_TO_TOW_TRUCK(--[[Vehicle]] towTruck, --[[Vehicle]] vehicle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.IS_VEHICLE_ATTACHED_TO_TOW_TRUCK' due to disabled trusted mode")

	assert(type(towTruck) == "number", "Arg #1 (towTruck) must be a number.")
	assert(type(vehicle) == "number", "Arg #2 (vehicle) must be a number.")

	local result = native_call(0x146DF9EC4C4B9FD4, towTruck, vehicle)
	return result:__tointeger() ~= 0
end
natives.vehicle.is_vehicle_attached_to_tow_truck = natives.VEHICLE.IS_VEHICLE_ATTACHED_TO_TOW_TRUCK

function natives.VEHICLE.GET_ENTITY_ATTACHED_TO_TOW_TRUCK(--[[Vehicle]] towTruck) -- Returns Entity
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_ENTITY_ATTACHED_TO_TOW_TRUCK' due to disabled trusted mode")

	assert(type(towTruck) == "number", "Arg #1 (towTruck) must be a number.")

	local result = native_call(0xEFEA18DCF10F8F75, towTruck)
	return result:__tointeger()
end
natives.vehicle.get_entity_attached_to_tow_truck = natives.VEHICLE.GET_ENTITY_ATTACHED_TO_TOW_TRUCK

function natives.VEHICLE.SET_VEHICLE_AUTOMATICALLY_ATTACHES(--[[Vehicle]] vehicle, --[[BOOL]] p1, --[[Any]] p2) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_AUTOMATICALLY_ATTACHES' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0x8BA6F76BC53A1493, vehicle, p1, p2)
	return result:__tointeger()
end
natives.vehicle.set_vehicle_automatically_attaches = natives.VEHICLE.SET_VEHICLE_AUTOMATICALLY_ATTACHES

--[[
Sets the arm position of a bulldozer. Position must be a value between 0.0 and 1.0. Ignored when `p2` is set to false, instead incrementing arm position by 0.1 (or 10%).
]]
function natives.VEHICLE.SET_VEHICLE_BULLDOZER_ARM_POSITION(--[[Vehicle]] vehicle, --[[float]] position, --[[BOOL]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_BULLDOZER_ARM_POSITION' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(position) == "number", "Arg #2 (position) must be a number.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")

	local result = native_call(0xF8EBCCC96ADB9FB7, vehicle, position, p2)
end
natives.vehicle.set_vehicle_bulldozer_arm_position = natives.VEHICLE.SET_VEHICLE_BULLDOZER_ARM_POSITION

function natives.VEHICLE.SET_VEHICLE_TANK_TURRET_POSITION(--[[Vehicle]] vehicle, --[[float]] position, --[[BOOL]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_TANK_TURRET_POSITION' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(position) == "number", "Arg #2 (position) must be a number.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")

	local result = native_call(0x56B94C6D7127DFBA, vehicle, position, p2)
end
natives.vehicle.set_vehicle_tank_turret_position = natives.VEHICLE.SET_VEHICLE_TANK_TURRET_POSITION

function natives.VEHICLE.SET_VEHICLE_TURRET_TARGET(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3, --[[Any]] p4, --[[Any]] p5) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_TURRET_TARGET' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")

	local result = native_call(0x0581730AB9380412, p0, p1, p2, p3, p4, p5)
end
natives.vehicle.set_vehicle_turret_target = natives.VEHICLE.SET_VEHICLE_TURRET_TARGET

function natives.VEHICLE.SET_VEHICLE_TANK_STATIONARY(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_TANK_STATIONARY' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x737E398138550FFF, p0, p1)
end
natives.vehicle.set_vehicle_tank_stationary = natives.VEHICLE.SET_VEHICLE_TANK_STATIONARY

function natives.VEHICLE.SET_VEHICLE_TURRET_SPEED_THIS_FRAME(--[[Vehicle]] vehicle, --[[float]] speed) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_TURRET_SPEED_THIS_FRAME' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(speed) == "number", "Arg #2 (speed) must be a number.")

	local result = native_call(0x1093408B4B9D1146, vehicle, speed)
end
natives.vehicle.set_vehicle_turret_speed_this_frame = natives.VEHICLE.SET_VEHICLE_TURRET_SPEED_THIS_FRAME

function natives.VEHICLE.DISABLE_VEHICLE_TURRET_MOVEMENT_THIS_FRAME(--[[Vehicle]] vehicle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.DISABLE_VEHICLE_TURRET_MOVEMENT_THIS_FRAME' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x32CAEDF24A583345, vehicle)
end
natives.vehicle.disable_vehicle_turret_movement_this_frame = natives.VEHICLE.DISABLE_VEHICLE_TURRET_MOVEMENT_THIS_FRAME

function natives.VEHICLE.SET_VEHICLE_FLIGHT_NOZZLE_POSITION(--[[Vehicle]] vehicle, --[[float]] angleRatio) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_FLIGHT_NOZZLE_POSITION' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(angleRatio) == "number", "Arg #2 (angleRatio) must be a number.")

	local result = native_call(0x30D779DE7C4F6DD3, vehicle, angleRatio)
end
natives.vehicle.set_vehicle_flight_nozzle_position = natives.VEHICLE.SET_VEHICLE_FLIGHT_NOZZLE_POSITION

function natives.VEHICLE.SET_VEHICLE_FLIGHT_NOZZLE_POSITION_IMMEDIATE(--[[Vehicle]] vehicle, --[[float]] angle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_FLIGHT_NOZZLE_POSITION_IMMEDIATE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(angle) == "number", "Arg #2 (angle) must be a number.")

	local result = native_call(0x9AA47FFF660CB932, vehicle, angle)
end
natives.vehicle.set_vehicle_flight_nozzle_position_immediate = natives.VEHICLE.SET_VEHICLE_FLIGHT_NOZZLE_POSITION_IMMEDIATE

function natives.VEHICLE.GET_VEHICLE_FLIGHT_NOZZLE_POSITION(--[[Vehicle]] plane) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_VEHICLE_FLIGHT_NOZZLE_POSITION' due to disabled trusted mode")

	assert(type(plane) == "number", "Arg #1 (plane) must be a number.")

	local result = native_call(0xDA62027C8BDB326E, plane)
	return result:__tonumber()
end
natives.vehicle.get_vehicle_flight_nozzle_position = natives.VEHICLE.GET_VEHICLE_FLIGHT_NOZZLE_POSITION

--[[
True stops vtols from switching modes. Doesn't stop the sound though.
]]
function natives.VEHICLE.SET_DISABLE_VERTICAL_FLIGHT_MODE_TRANSITION(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_DISABLE_VERTICAL_FLIGHT_MODE_TRANSITION' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xCE2B43770B655F8F, vehicle, toggle)
end
natives.vehicle.set_disable_vertical_flight_mode_transition = natives.VEHICLE.SET_DISABLE_VERTICAL_FLIGHT_MODE_TRANSITION

function natives.VEHICLE.GENERATE_VEHICLE_CREATION_POS_FROM_PATHS(--[[Vector3*]] outVec, --[[Any]] p1, --[[Vector3*]] outVec1, --[[Any]] p3, --[[Any]] p4, --[[Any]] p5, --[[Any]] p6, --[[Any]] p7, --[[Any]] p8) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GENERATE_VEHICLE_CREATION_POS_FROM_PATHS' due to disabled trusted mode")

	assert(type(outVec) == "userdata", "Arg #1 (outVec) must be a userdata.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(outVec1) == "userdata", "Arg #3 (outVec1) must be a userdata.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")
	assert(type(p6) == "number", "Arg #7 (p6) must be a number.")
	assert(type(p7) == "number", "Arg #8 (p7) must be a number.")
	assert(type(p8) == "number", "Arg #9 (p8) must be a number.")

	local result = native_call(0xA4822F1CF23F4810, outVec, p1, outVec1, p3, p4, p5, p6, p7, p8)
	return result:__tointeger() ~= 0
end
natives.vehicle.generate_vehicle_creation_pos_from_paths = natives.VEHICLE.GENERATE_VEHICLE_CREATION_POS_FROM_PATHS

--[[
On accelerating, spins the driven wheels with the others braked, so you don't go anywhere.
]]
function natives.VEHICLE.SET_VEHICLE_BURNOUT(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_BURNOUT' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xFB8794444A7D60FB, vehicle, toggle)
end
natives.vehicle.set_vehicle_burnout = natives.VEHICLE.SET_VEHICLE_BURNOUT

--[[
Returns whether the specified vehicle is currently in a burnout.


vb.net
Public Function isVehicleInBurnout(vh As Vehicle) As Boolean
        Return Native.Function.Call(Of Boolean)(Hash.IS_VEHICLE_IN_BURNOUT, vh)
    End Function
]]
function natives.VEHICLE.IS_VEHICLE_IN_BURNOUT(--[[Vehicle]] vehicle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.IS_VEHICLE_IN_BURNOUT' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x1297A88E081430EB, vehicle)
	return result:__tointeger() ~= 0
end
natives.vehicle.is_vehicle_in_burnout = natives.VEHICLE.IS_VEHICLE_IN_BURNOUT

--[[
Reduces grip significantly so it's hard to go anywhere.
]]
function natives.VEHICLE.SET_VEHICLE_REDUCE_GRIP(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_REDUCE_GRIP' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x222FF6A823D122E2, vehicle, toggle)
end
natives.vehicle.set_vehicle_reduce_grip = natives.VEHICLE.SET_VEHICLE_REDUCE_GRIP

--[[
val is 0-3
Often used in conjunction with: SET_VEHICLE_REDUCE_GRIP
]]
function natives.VEHICLE.SET_VEHICLE_REDUCE_GRIP_LEVEL(--[[Vehicle]] vehicle, --[[int]] val) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_REDUCE_GRIP_LEVEL' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(val) == "number", "Arg #2 (val) must be a number.")

	local result = native_call(0x6DEE944E1EE90CFB, vehicle, val)
end
natives.vehicle.set_vehicle_reduce_grip_level = natives.VEHICLE.SET_VEHICLE_REDUCE_GRIP_LEVEL

--[[
Sets the turn signal enabled for a vehicle.
Set turnSignal to 1 for left light, 0 for right light.
]]
function natives.VEHICLE.SET_VEHICLE_INDICATOR_LIGHTS(--[[Vehicle]] vehicle, --[[int]] turnSignal, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_INDICATOR_LIGHTS' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(turnSignal) == "number", "Arg #2 (turnSignal) must be a number.")
	assert(type(toggle) == "boolean", "Arg #3 (toggle) must be a boolean.")

	local result = native_call(0xB5D45264751B7DF0, vehicle, turnSignal, toggle)
end
natives.vehicle.set_vehicle_indicator_lights = natives.VEHICLE.SET_VEHICLE_INDICATOR_LIGHTS

function natives.VEHICLE.SET_VEHICLE_BRAKE_LIGHTS(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_BRAKE_LIGHTS' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x92B35082E0B42F66, vehicle, toggle)
end
natives.vehicle.set_vehicle_brake_lights = natives.VEHICLE.SET_VEHICLE_BRAKE_LIGHTS

function natives.VEHICLE.SET_VEHICLE_HANDBRAKE(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_HANDBRAKE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x684785568EF26A22, vehicle, toggle)
end
natives.vehicle.set_vehicle_handbrake = natives.VEHICLE.SET_VEHICLE_HANDBRAKE

function natives.VEHICLE.SET_VEHICLE_BRAKE(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_BRAKE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xE4E2FD323574965C, vehicle, toggle)
end
natives.vehicle.set_vehicle_brake = natives.VEHICLE.SET_VEHICLE_BRAKE

function natives.VEHICLE.INSTANTLY_FILL_VEHICLE_POPULATION() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.INSTANTLY_FILL_VEHICLE_POPULATION' due to disabled trusted mode")

	local result = native_call(0x48ADC8A773564670)
end
natives.vehicle.instantly_fill_vehicle_population = natives.VEHICLE.INSTANTLY_FILL_VEHICLE_POPULATION

function natives.VEHICLE.HAS_INSTANT_FILL_VEHICLE_POPULATION_FINISHED() -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.HAS_INSTANT_FILL_VEHICLE_POPULATION_FINISHED' due to disabled trusted mode")

	local result = native_call(0x91D6DD290888CBAB)
	return result:__tointeger() ~= 0
end
natives.vehicle.has_instant_fill_vehicle_population_finished = natives.VEHICLE.HAS_INSTANT_FILL_VEHICLE_POPULATION_FINISHED

function natives.VEHICLE.NETWORK_ENABLE_EMPTY_CROWDING_VEHICLES_REMOVAL(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.NETWORK_ENABLE_EMPTY_CROWDING_VEHICLES_REMOVAL' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x51DB102F4A3BA5E0, toggle)
end
natives.vehicle.network_enable_empty_crowding_vehicles_removal = natives.VEHICLE.NETWORK_ENABLE_EMPTY_CROWDING_VEHICLES_REMOVAL

--[[
Default:1000||This sets a value which is used when _0x51db102f4a3ba5e0(true) is called each frame.
]]
function natives.VEHICLE.NETWORK_CAP_EMPTY_CROWDING_VEHICLES_REMOVAL(--[[int]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.NETWORK_CAP_EMPTY_CROWDING_VEHICLES_REMOVAL' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xA4A9A4C40E615885, p0)
end
natives.vehicle.network_cap_empty_crowding_vehicles_removal = natives.VEHICLE.NETWORK_CAP_EMPTY_CROWDING_VEHICLES_REMOVAL

--[[
Gets the trailer of a vehicle and puts it into the trailer parameter.
]]
function natives.VEHICLE.GET_VEHICLE_TRAILER_VEHICLE(--[[Vehicle]] vehicle, --[[Vehicle*]] trailer) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_VEHICLE_TRAILER_VEHICLE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(trailer) == "userdata", "Arg #2 (trailer) must be a userdata.")

	local result = native_call(0x1CDD6BADC297830D, vehicle, trailer)
	return result:__tointeger() ~= 0
end
natives.vehicle.get_vehicle_trailer_vehicle = natives.VEHICLE.GET_VEHICLE_TRAILER_VEHICLE

--[[
vehicle must be a plane
]]
function natives.VEHICLE.SET_VEHICLE_USES_LARGE_REAR_RAMP(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_USES_LARGE_REAR_RAMP' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xCAC66558B944DA67, vehicle, toggle)
end
natives.vehicle.set_vehicle_uses_large_rear_ramp = natives.VEHICLE.SET_VEHICLE_USES_LARGE_REAR_RAMP

function natives.VEHICLE.SET_VEHICLE_RUDDER_BROKEN(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_RUDDER_BROKEN' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x09606148B6C71DEF, vehicle, toggle)
end
natives.vehicle.set_vehicle_rudder_broken = natives.VEHICLE.SET_VEHICLE_RUDDER_BROKEN

function natives.VEHICLE.SET_CONVERTIBLE_ROOF_LATCH_STATE(--[[Vehicle]] vehicle, --[[BOOL]] state) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_CONVERTIBLE_ROOF_LATCH_STATE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(state) == "boolean", "Arg #2 (state) must be a boolean.")

	local result = native_call(0x1A78AD3D8240536F, vehicle, state)
end
natives.vehicle.set_convertible_roof_latch_state = natives.VEHICLE.SET_CONVERTIBLE_ROOF_LATCH_STATE

function natives.VEHICLE.GET_VEHICLE_ESTIMATED_MAX_SPEED(--[[Vehicle]] vehicle) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_VEHICLE_ESTIMATED_MAX_SPEED' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x53AF99BAA671CA47, vehicle)
	return result:__tonumber()
end
natives.vehicle.get_vehicle_estimated_max_speed = natives.VEHICLE.GET_VEHICLE_ESTIMATED_MAX_SPEED

function natives.VEHICLE.GET_VEHICLE_MAX_BRAKING(--[[Vehicle]] vehicle) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_VEHICLE_MAX_BRAKING' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0xAD7E85FC227197C4, vehicle)
	return result:__tonumber()
end
natives.vehicle.get_vehicle_max_braking = natives.VEHICLE.GET_VEHICLE_MAX_BRAKING

function natives.VEHICLE.GET_VEHICLE_MAX_TRACTION(--[[Vehicle]] vehicle) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_VEHICLE_MAX_TRACTION' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0xA132FB5370554DB0, vehicle)
	return result:__tonumber()
end
natives.vehicle.get_vehicle_max_traction = natives.VEHICLE.GET_VEHICLE_MAX_TRACTION

--[[
static - max acceleration
]]
function natives.VEHICLE.GET_VEHICLE_ACCELERATION(--[[Vehicle]] vehicle) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_VEHICLE_ACCELERATION' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x5DD35C8D074E57AE, vehicle)
	return result:__tonumber()
end
natives.vehicle.get_vehicle_acceleration = natives.VEHICLE.GET_VEHICLE_ACCELERATION

--[[
Returns max speed (without mods) of the specified vehicle model in m/s.

Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
]]
function natives.VEHICLE.GET_VEHICLE_MODEL_ESTIMATED_MAX_SPEED(--[[Hash]] modelHash) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_VEHICLE_MODEL_ESTIMATED_MAX_SPEED' due to disabled trusted mode")

	assert(type(modelHash) == "number", "Arg #1 (modelHash) must be a number.")

	local result = native_call(0xF417C2502FFFED43, modelHash)
	return result:__tonumber()
end
natives.vehicle.get_vehicle_model_estimated_max_speed = natives.VEHICLE.GET_VEHICLE_MODEL_ESTIMATED_MAX_SPEED

--[[
Returns max braking of the specified vehicle model.

Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
]]
function natives.VEHICLE.GET_VEHICLE_MODEL_MAX_BRAKING(--[[Hash]] modelHash) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_VEHICLE_MODEL_MAX_BRAKING' due to disabled trusted mode")

	assert(type(modelHash) == "number", "Arg #1 (modelHash) must be a number.")

	local result = native_call(0xDC53FD41B4ED944C, modelHash)
	return result:__tonumber()
end
natives.vehicle.get_vehicle_model_max_braking = natives.VEHICLE.GET_VEHICLE_MODEL_MAX_BRAKING

--[[
Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
]]
function natives.VEHICLE.GET_VEHICLE_MODEL_MAX_BRAKING_MAX_MODS(--[[Hash]] modelHash) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_VEHICLE_MODEL_MAX_BRAKING_MAX_MODS' due to disabled trusted mode")

	assert(type(modelHash) == "number", "Arg #1 (modelHash) must be a number.")

	local result = native_call(0xBFBA3BA79CFF7EBF, modelHash)
	return result:__tonumber()
end
natives.vehicle.get_vehicle_model_max_braking_max_mods = natives.VEHICLE.GET_VEHICLE_MODEL_MAX_BRAKING_MAX_MODS

--[[
Returns max traction of the specified vehicle model.

Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
]]
function natives.VEHICLE.GET_VEHICLE_MODEL_MAX_TRACTION(--[[Hash]] modelHash) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_VEHICLE_MODEL_MAX_TRACTION' due to disabled trusted mode")

	assert(type(modelHash) == "number", "Arg #1 (modelHash) must be a number.")

	local result = native_call(0x539DE94D44FDFD0D, modelHash)
	return result:__tonumber()
end
natives.vehicle.get_vehicle_model_max_traction = natives.VEHICLE.GET_VEHICLE_MODEL_MAX_TRACTION

--[[
Returns the acceleration of the specified model.

Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
]]
function natives.VEHICLE.GET_VEHICLE_MODEL_ACCELERATION(--[[Hash]] modelHash) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_VEHICLE_MODEL_ACCELERATION' due to disabled trusted mode")

	assert(type(modelHash) == "number", "Arg #1 (modelHash) must be a number.")

	local result = native_call(0x8C044C5C84505B6A, modelHash)
	return result:__tonumber()
end
natives.vehicle.get_vehicle_model_acceleration = natives.VEHICLE.GET_VEHICLE_MODEL_ACCELERATION

--[[
9.8 * thrust if air vehicle, else 0.38 + drive force?

Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
]]
function natives.VEHICLE.GET_VEHICLE_MODEL_ACCELERATION_MAX_MODS(--[[Hash]] modelHash) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_VEHICLE_MODEL_ACCELERATION_MAX_MODS' due to disabled trusted mode")

	assert(type(modelHash) == "number", "Arg #1 (modelHash) must be a number.")

	local result = native_call(0x53409B5163D5B846, modelHash)
	return result:__tonumber()
end
natives.vehicle.get_vehicle_model_acceleration_max_mods = natives.VEHICLE.GET_VEHICLE_MODEL_ACCELERATION_MAX_MODS

--[[
Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
]]
function natives.VEHICLE.GET_FLYING_VEHICLE_MODEL_AGILITY(--[[Hash]] modelHash) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_FLYING_VEHICLE_MODEL_AGILITY' due to disabled trusted mode")

	assert(type(modelHash) == "number", "Arg #1 (modelHash) must be a number.")

	local result = native_call(0xC6AD107DDC9054CC, modelHash)
	return result:__tonumber()
end
natives.vehicle.get_flying_vehicle_model_agility = natives.VEHICLE.GET_FLYING_VEHICLE_MODEL_AGILITY

--[[
Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
]]
function natives.VEHICLE.GET_BOAT_VEHICLE_MODEL_AGILITY(--[[Hash]] modelHash) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_BOAT_VEHICLE_MODEL_AGILITY' due to disabled trusted mode")

	assert(type(modelHash) == "number", "Arg #1 (modelHash) must be a number.")

	local result = native_call(0x5AA3F878A178C4FC, modelHash)
	return result:__tonumber()
end
natives.vehicle.get_boat_vehicle_model_agility = natives.VEHICLE.GET_BOAT_VEHICLE_MODEL_AGILITY

function natives.VEHICLE.GET_VEHICLE_CLASS_ESTIMATED_MAX_SPEED(--[[int]] vehicleClass) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_VEHICLE_CLASS_ESTIMATED_MAX_SPEED' due to disabled trusted mode")

	assert(type(vehicleClass) == "number", "Arg #1 (vehicleClass) must be a number.")

	local result = native_call(0x00C09F246ABEDD82, vehicleClass)
	return result:__tonumber()
end
natives.vehicle.get_vehicle_class_estimated_max_speed = natives.VEHICLE.GET_VEHICLE_CLASS_ESTIMATED_MAX_SPEED

function natives.VEHICLE.GET_VEHICLE_CLASS_MAX_TRACTION(--[[int]] vehicleClass) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_VEHICLE_CLASS_MAX_TRACTION' due to disabled trusted mode")

	assert(type(vehicleClass) == "number", "Arg #1 (vehicleClass) must be a number.")

	local result = native_call(0xDBC86D85C5059461, vehicleClass)
	return result:__tonumber()
end
natives.vehicle.get_vehicle_class_max_traction = natives.VEHICLE.GET_VEHICLE_CLASS_MAX_TRACTION

function natives.VEHICLE.GET_VEHICLE_CLASS_MAX_AGILITY(--[[int]] vehicleClass) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_VEHICLE_CLASS_MAX_AGILITY' due to disabled trusted mode")

	assert(type(vehicleClass) == "number", "Arg #1 (vehicleClass) must be a number.")

	local result = native_call(0x4F930AD022D6DE3B, vehicleClass)
	return result:__tonumber()
end
natives.vehicle.get_vehicle_class_max_agility = natives.VEHICLE.GET_VEHICLE_CLASS_MAX_AGILITY

function natives.VEHICLE.GET_VEHICLE_CLASS_MAX_ACCELERATION(--[[int]] vehicleClass) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_VEHICLE_CLASS_MAX_ACCELERATION' due to disabled trusted mode")

	assert(type(vehicleClass) == "number", "Arg #1 (vehicleClass) must be a number.")

	local result = native_call(0x2F83E7E45D9EA7AE, vehicleClass)
	return result:__tonumber()
end
natives.vehicle.get_vehicle_class_max_acceleration = natives.VEHICLE.GET_VEHICLE_CLASS_MAX_ACCELERATION

function natives.VEHICLE.GET_VEHICLE_CLASS_MAX_BRAKING(--[[int]] vehicleClass) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_VEHICLE_CLASS_MAX_BRAKING' due to disabled trusted mode")

	assert(type(vehicleClass) == "number", "Arg #1 (vehicleClass) must be a number.")

	local result = native_call(0x4BF54C16EC8FEC03, vehicleClass)
	return result:__tonumber()
end
natives.vehicle.get_vehicle_class_max_braking = natives.VEHICLE.GET_VEHICLE_CLASS_MAX_BRAKING

function natives.VEHICLE.ADD_ROAD_NODE_SPEED_ZONE(--[[float]] x, --[[float]] y, --[[float]] z, --[[float]] radius, --[[float]] speed, --[[BOOL]] p5) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.ADD_ROAD_NODE_SPEED_ZONE' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(radius) == "number", "Arg #4 (radius) must be a number.")
	assert(type(speed) == "number", "Arg #5 (speed) must be a number.")
	assert(type(p5) == "boolean", "Arg #6 (p5) must be a boolean.")

	local result = native_call(0x2CE544C68FB812A0, x, y, z, radius, speed, p5)
	return result:__tointeger()
end
natives.vehicle.add_road_node_speed_zone = natives.VEHICLE.ADD_ROAD_NODE_SPEED_ZONE

function natives.VEHICLE.REMOVE_ROAD_NODE_SPEED_ZONE(--[[int]] speedzone) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.REMOVE_ROAD_NODE_SPEED_ZONE' due to disabled trusted mode")

	assert(type(speedzone) == "number", "Arg #1 (speedzone) must be a number.")

	local result = native_call(0x1033371FC8E842A7, speedzone)
	return result:__tointeger() ~= 0
end
natives.vehicle.remove_road_node_speed_zone = natives.VEHICLE.REMOVE_ROAD_NODE_SPEED_ZONE

function natives.VEHICLE.OPEN_BOMB_BAY_DOORS(--[[Vehicle]] vehicle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.OPEN_BOMB_BAY_DOORS' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x87E7F24270732CB1, vehicle)
end
natives.vehicle.open_bomb_bay_doors = natives.VEHICLE.OPEN_BOMB_BAY_DOORS

function natives.VEHICLE.CLOSE_BOMB_BAY_DOORS(--[[Vehicle]] vehicle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.CLOSE_BOMB_BAY_DOORS' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x3556041742A0DC74, vehicle)
end
natives.vehicle.close_bomb_bay_doors = natives.VEHICLE.CLOSE_BOMB_BAY_DOORS

--[[
Returns true when the bomb bay doors of this plane are open. False if they're closed.
]]
function natives.VEHICLE.GET_ARE_BOMB_BAY_DOORS_OPEN(--[[Vehicle]] aircraft) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_ARE_BOMB_BAY_DOORS_OPEN' due to disabled trusted mode")

	assert(type(aircraft) == "number", "Arg #1 (aircraft) must be a number.")

	local result = native_call(0xD0917A423314BBA8, aircraft)
	return result:__tointeger() ~= 0
end
natives.vehicle.get_are_bomb_bay_doors_open = natives.VEHICLE.GET_ARE_BOMB_BAY_DOORS_OPEN

--[[
Possibly: Returns whether the searchlight (found on police vehicles) is toggled on.

@Author Nac
]]
function natives.VEHICLE.IS_VEHICLE_SEARCHLIGHT_ON(--[[Vehicle]] vehicle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.IS_VEHICLE_SEARCHLIGHT_ON' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0xC0F97FCE55094987, vehicle)
	return result:__tointeger() ~= 0
end
natives.vehicle.is_vehicle_searchlight_on = natives.VEHICLE.IS_VEHICLE_SEARCHLIGHT_ON

--[[
Only works during nighttime.
]]
function natives.VEHICLE.SET_VEHICLE_SEARCHLIGHT(--[[Vehicle]] heli, --[[BOOL]] toggle, --[[BOOL]] canBeUsedByAI) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_SEARCHLIGHT' due to disabled trusted mode")

	assert(type(heli) == "number", "Arg #1 (heli) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")
	assert(type(canBeUsedByAI) == "boolean", "Arg #3 (canBeUsedByAI) must be a boolean.")

	local result = native_call(0x14E85C5EE7A4D542, heli, toggle, canBeUsedByAI)
end
natives.vehicle.set_vehicle_searchlight = natives.VEHICLE.SET_VEHICLE_SEARCHLIGHT

function natives.VEHICLE.DOES_VEHICLE_HAVE_SEARCHLIGHT(--[[Vehicle]] vehicle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.DOES_VEHICLE_HAVE_SEARCHLIGHT' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x99015ED7DBEA5113, vehicle)
	return result:__tointeger() ~= 0
end
natives.vehicle.does_vehicle_have_searchlight = natives.VEHICLE.DOES_VEHICLE_HAVE_SEARCHLIGHT

--[[
Check if a vehicle seat is accessible. If you park your vehicle near a wall and the ped cannot enter/exit this side, the return value toggles from true (not blocked) to false (blocked).

seatIndex  = -1 being the driver seat.
Use GET_VEHICLE_MAX_NUMBER_OF_PASSENGERS(vehicle) - 1 for last seat index.
side = only relevant for bikes/motorcycles to check if the left (false)/right (true) side is blocked.
onEnter = check if you can enter (true) or exit (false) a vehicle.
]]
function natives.VEHICLE.IS_ENTRY_POINT_FOR_SEAT_CLEAR(--[[Ped]] ped, --[[Vehicle]] vehicle, --[[int]] seatIndex, --[[BOOL]] side, --[[BOOL]] onEnter) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.IS_ENTRY_POINT_FOR_SEAT_CLEAR' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(vehicle) == "number", "Arg #2 (vehicle) must be a number.")
	assert(type(seatIndex) == "number", "Arg #3 (seatIndex) must be a number.")
	assert(type(side) == "boolean", "Arg #4 (side) must be a boolean.")
	assert(type(onEnter) == "boolean", "Arg #5 (onEnter) must be a boolean.")

	local result = native_call(0x639431E895B9AA57, ped, vehicle, seatIndex, side, onEnter)
	return result:__tointeger() ~= 0
end
natives.vehicle.is_entry_point_for_seat_clear = natives.VEHICLE.IS_ENTRY_POINT_FOR_SEAT_CLEAR

--[[
doorId: see SET_VEHICLE_DOOR_SHUT
]]
function natives.VEHICLE.GET_ENTRY_POINT_POSITION(--[[Vehicle]] vehicle, --[[int]] doorId) -- Returns Vector3
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_ENTRY_POINT_POSITION' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(doorId) == "number", "Arg #2 (doorId) must be a number.")

	local result = native_call(0xC0572928C0ABFDA3, vehicle, doorId)
	return result:__tov3()
end
natives.vehicle.get_entry_point_position = natives.VEHICLE.GET_ENTRY_POINT_POSITION

function natives.VEHICLE.CAN_SHUFFLE_SEAT(--[[Vehicle]] vehicle, --[[int]] seatIndex) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.CAN_SHUFFLE_SEAT' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(seatIndex) == "number", "Arg #2 (seatIndex) must be a number.")

	local result = native_call(0x30785D90C956BF35, vehicle, seatIndex)
	return result:__tointeger() ~= 0
end
natives.vehicle.can_shuffle_seat = natives.VEHICLE.CAN_SHUFFLE_SEAT

function natives.VEHICLE.GET_NUM_MOD_KITS(--[[Vehicle]] vehicle) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_NUM_MOD_KITS' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x33F2E3FE70EAAE1D, vehicle)
	return result:__tointeger()
end
natives.vehicle.get_num_mod_kits = natives.VEHICLE.GET_NUM_MOD_KITS

--[[
Set modKit to 0 if you plan to call SET_VEHICLE_MOD. That's what the game does. Most body modifications through SET_VEHICLE_MOD will not take effect until this is set to 0.

Full list of vehicle mod kits and mods by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicleModKits.json
]]
function natives.VEHICLE.SET_VEHICLE_MOD_KIT(--[[Vehicle]] vehicle, --[[int]] modKit) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_MOD_KIT' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(modKit) == "number", "Arg #2 (modKit) must be a number.")

	local result = native_call(0x1F2AA07F00B3217A, vehicle, modKit)
end
natives.vehicle.set_vehicle_mod_kit = natives.VEHICLE.SET_VEHICLE_MOD_KIT

function natives.VEHICLE.GET_VEHICLE_MOD_KIT(--[[Vehicle]] vehicle) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_VEHICLE_MOD_KIT' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x6325D1A044AE510D, vehicle)
	return result:__tointeger()
end
natives.vehicle.get_vehicle_mod_kit = natives.VEHICLE.GET_VEHICLE_MOD_KIT

function natives.VEHICLE.GET_VEHICLE_MOD_KIT_TYPE(--[[Vehicle]] vehicle) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_VEHICLE_MOD_KIT_TYPE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0xFC058F5121E54C32, vehicle)
	return result:__tointeger()
end
natives.vehicle.get_vehicle_mod_kit_type = natives.VEHICLE.GET_VEHICLE_MOD_KIT_TYPE

--[[
Returns an int

Wheel Types:
0: Sport
1: Muscle
2: Lowrider
3: SUV
4: Offroad
5: Tuner
6: Bike Wheels
7: High End

Tested in Los Santos Customs
]]
function natives.VEHICLE.GET_VEHICLE_WHEEL_TYPE(--[[Vehicle]] vehicle) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_VEHICLE_WHEEL_TYPE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0xB3ED1BFB4BE636DC, vehicle)
	return result:__tointeger()
end
natives.vehicle.get_vehicle_wheel_type = natives.VEHICLE.GET_VEHICLE_WHEEL_TYPE

--[[
0: Sport
1: Muscle
2: Lowrider
3: SUV
4: Offroad
5: Tuner
6: Bike Wheels
7: High End
]]
function natives.VEHICLE.SET_VEHICLE_WHEEL_TYPE(--[[Vehicle]] vehicle, --[[int]] WheelType) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_WHEEL_TYPE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(WheelType) == "number", "Arg #2 (WheelType) must be a number.")

	local result = native_call(0x487EB21CC7295BA1, vehicle, WheelType)
end
natives.vehicle.set_vehicle_wheel_type = natives.VEHICLE.SET_VEHICLE_WHEEL_TYPE

--[[
paintType:
0: Normal
1: Metallic
2: Pearl
3: Matte
4: Metal
5: Chrome
]]
function natives.VEHICLE.GET_NUM_MOD_COLORS(--[[int]] paintType, --[[BOOL]] p1) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_NUM_MOD_COLORS' due to disabled trusted mode")

	assert(type(paintType) == "number", "Arg #1 (paintType) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0xA551BE18C11A476D, paintType, p1)
	return result:__tointeger()
end
natives.vehicle.get_num_mod_colors = natives.VEHICLE.GET_NUM_MOD_COLORS

--[[
paintType:
0: Normal
1: Metallic
2: Pearl
3: Matte
4: Metal
5: Chrome

color: number of the color.

p3 seems to always be 0.

Full list of vehicle colors and vehicle plates by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicleColors.json
]]
function natives.VEHICLE.SET_VEHICLE_MOD_COLOR_1(--[[Vehicle]] vehicle, --[[int]] paintType, --[[int]] color, --[[int]] pearlescentColor) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_MOD_COLOR_1' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(paintType) == "number", "Arg #2 (paintType) must be a number.")
	assert(type(color) == "number", "Arg #3 (color) must be a number.")
	assert(type(pearlescentColor) == "number", "Arg #4 (pearlescentColor) must be a number.")

	local result = native_call(0x43FEB945EE7F85B8, vehicle, paintType, color, pearlescentColor)
end
natives.vehicle.set_vehicle_mod_color_1 = natives.VEHICLE.SET_VEHICLE_MOD_COLOR_1

--[[
Changes the secondary paint type and color
paintType:
0: Normal
1: Metallic
2: Pearl
3: Matte
4: Metal
5: Chrome

color: number of the color

Full list of vehicle colors and vehicle plates by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicleColors.json
]]
function natives.VEHICLE.SET_VEHICLE_MOD_COLOR_2(--[[Vehicle]] vehicle, --[[int]] paintType, --[[int]] color) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_MOD_COLOR_2' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(paintType) == "number", "Arg #2 (paintType) must be a number.")
	assert(type(color) == "number", "Arg #3 (color) must be a number.")

	local result = native_call(0x816562BADFDEC83E, vehicle, paintType, color)
end
natives.vehicle.set_vehicle_mod_color_2 = natives.VEHICLE.SET_VEHICLE_MOD_COLOR_2

function natives.VEHICLE.GET_VEHICLE_MOD_COLOR_1(--[[Vehicle]] vehicle, --[[int*]] paintType, --[[int*]] color, --[[int*]] pearlescentColor) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_VEHICLE_MOD_COLOR_1' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(paintType) == "userdata", "Arg #2 (paintType) must be a userdata.")
	assert(type(color) == "userdata", "Arg #3 (color) must be a userdata.")
	assert(type(pearlescentColor) == "userdata", "Arg #4 (pearlescentColor) must be a userdata.")

	local result = native_call(0xE8D65CA700C9A693, vehicle, paintType, color, pearlescentColor)
end
natives.vehicle.get_vehicle_mod_color_1 = natives.VEHICLE.GET_VEHICLE_MOD_COLOR_1

function natives.VEHICLE.GET_VEHICLE_MOD_COLOR_2(--[[Vehicle]] vehicle, --[[int*]] paintType, --[[int*]] color) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_VEHICLE_MOD_COLOR_2' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(paintType) == "userdata", "Arg #2 (paintType) must be a userdata.")
	assert(type(color) == "userdata", "Arg #3 (color) must be a userdata.")

	local result = native_call(0x81592BE4E3878728, vehicle, paintType, color)
end
natives.vehicle.get_vehicle_mod_color_2 = natives.VEHICLE.GET_VEHICLE_MOD_COLOR_2

--[[
returns a string which is the codename of the vehicle's currently selected primary color

p1 is always 0
]]
function natives.VEHICLE.GET_VEHICLE_MOD_COLOR_1_NAME(--[[Vehicle]] vehicle, --[[BOOL]] p1) -- Returns const char*
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_VEHICLE_MOD_COLOR_1_NAME' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0xB45085B721EFD38C, vehicle, p1)
	return result:__tostring(true)
end
natives.vehicle.get_vehicle_mod_color_1_name = natives.VEHICLE.GET_VEHICLE_MOD_COLOR_1_NAME

--[[
returns a string which is the codename of the vehicle's currently selected secondary color
]]
function natives.VEHICLE.GET_VEHICLE_MOD_COLOR_2_NAME(--[[Vehicle]] vehicle) -- Returns const char*
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_VEHICLE_MOD_COLOR_2_NAME' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x4967A516ED23A5A1, vehicle)
	return result:__tostring(true)
end
natives.vehicle.get_vehicle_mod_color_2_name = natives.VEHICLE.GET_VEHICLE_MOD_COLOR_2_NAME

function natives.VEHICLE.HAVE_VEHICLE_MODS_STREAMED_IN(--[[Vehicle]] vehicle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.HAVE_VEHICLE_MODS_STREAMED_IN' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x9A83F5F9963775EF, vehicle)
	return result:__tointeger() ~= 0
end
natives.vehicle.have_vehicle_mods_streamed_in = natives.VEHICLE.HAVE_VEHICLE_MODS_STREAMED_IN

--[[
mpsum2_g9ec
]]
function natives.VEHICLE.IS_VEHICLE_MOD_GEN9_EXCLUSIVE(--[[Vehicle]] vehicle, --[[int]] modType, --[[int]] modIndex) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.IS_VEHICLE_MOD_GEN9_EXCLUSIVE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(modType) == "number", "Arg #2 (modType) must be a number.")
	assert(type(modIndex) == "number", "Arg #3 (modIndex) must be a number.")

	local result = native_call(0x00834EAC4A96E010, vehicle, modType, modIndex)
	return result:__tointeger() ~= 0
end
natives.vehicle.is_vehicle_mod_gen9_exclusive = natives.VEHICLE.IS_VEHICLE_MOD_GEN9_EXCLUSIVE

--[[
In b944, there are 50 (0 - 49) mod types.

Sets the vehicle mod.
The vehicle must have a mod kit first.

Any out of range ModIndex is stock.

#Mod Type
Spoilers - 0
Front Bumper - 1
Rear Bumper - 2
Side Skirt - 3
Exhaust - 4
Frame - 5
Grille - 6
Hood - 7
Fender - 8
Right Fender - 9
Roof - 10
Engine - 11
Brakes - 12
Transmission - 13
Horns - 14 (modIndex from 0 to 51)
Suspension - 15
Armor - 16
Front Wheels - 23
Back Wheels - 24 //only for motocycles
Plate holders - 25
Trim Design - 27
Ornaments - 28
Dial Design - 30
Steering Wheel - 33
Shifter Leavers - 34
Plaques - 35
Hydraulics - 38
Livery - 48

ENUMS: pastebin.com/QzEAn02v
]]
function natives.VEHICLE.SET_VEHICLE_MOD(--[[Vehicle]] vehicle, --[[int]] modType, --[[int]] modIndex, --[[BOOL]] customTires) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_MOD' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(modType) == "number", "Arg #2 (modType) must be a number.")
	assert(type(modIndex) == "number", "Arg #3 (modIndex) must be a number.")
	assert(type(customTires) == "boolean", "Arg #4 (customTires) must be a boolean.")

	local result = native_call(0x6AF0636DDEDCB6DD, vehicle, modType, modIndex, customTires)
end
natives.vehicle.set_vehicle_mod = natives.VEHICLE.SET_VEHICLE_MOD

--[[
In b944, there are 50 (0 - 49) mod types.

Returns -1 if the vehicle mod is stock
]]
function natives.VEHICLE.GET_VEHICLE_MOD(--[[Vehicle]] vehicle, --[[int]] modType) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_VEHICLE_MOD' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(modType) == "number", "Arg #2 (modType) must be a number.")

	local result = native_call(0x772960298DA26FDB, vehicle, modType)
	return result:__tointeger()
end
natives.vehicle.get_vehicle_mod = natives.VEHICLE.GET_VEHICLE_MOD

--[[
Only used for wheels(ModType = 23/24) Returns true if the wheels are custom wheels
]]
function natives.VEHICLE.GET_VEHICLE_MOD_VARIATION(--[[Vehicle]] vehicle, --[[int]] modType) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_VEHICLE_MOD_VARIATION' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(modType) == "number", "Arg #2 (modType) must be a number.")

	local result = native_call(0xB3924ECD70E095DC, vehicle, modType)
	return result:__tointeger() ~= 0
end
natives.vehicle.get_vehicle_mod_variation = natives.VEHICLE.GET_VEHICLE_MOD_VARIATION

--[[
Returns how many possible mods a vehicle has for a given mod type
]]
function natives.VEHICLE.GET_NUM_VEHICLE_MODS(--[[Vehicle]] vehicle, --[[int]] modType) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_NUM_VEHICLE_MODS' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(modType) == "number", "Arg #2 (modType) must be a number.")

	local result = native_call(0xE38E9162A2500646, vehicle, modType)
	return result:__tointeger()
end
natives.vehicle.get_num_vehicle_mods = natives.VEHICLE.GET_NUM_VEHICLE_MODS

function natives.VEHICLE.REMOVE_VEHICLE_MOD(--[[Vehicle]] vehicle, --[[int]] modType) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.REMOVE_VEHICLE_MOD' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(modType) == "number", "Arg #2 (modType) must be a number.")

	local result = native_call(0x92D619E420858204, vehicle, modType)
end
natives.vehicle.remove_vehicle_mod = natives.VEHICLE.REMOVE_VEHICLE_MOD

--[[
Toggles:
UNK17 - 17
Turbo - 18
UNK19 - 19
Tire Smoke - 20
UNK21 - 21
Xenon Headlights - 22
]]
function natives.VEHICLE.TOGGLE_VEHICLE_MOD(--[[Vehicle]] vehicle, --[[int]] modType, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.TOGGLE_VEHICLE_MOD' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(modType) == "number", "Arg #2 (modType) must be a number.")
	assert(type(toggle) == "boolean", "Arg #3 (toggle) must be a boolean.")

	local result = native_call(0x2A1F4F37F95BAD08, vehicle, modType, toggle)
end
natives.vehicle.toggle_vehicle_mod = natives.VEHICLE.TOGGLE_VEHICLE_MOD

function natives.VEHICLE.IS_TOGGLE_MOD_ON(--[[Vehicle]] vehicle, --[[int]] modType) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.IS_TOGGLE_MOD_ON' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(modType) == "number", "Arg #2 (modType) must be a number.")

	local result = native_call(0x84B233A8C8FC8AE7, vehicle, modType)
	return result:__tointeger() ~= 0
end
natives.vehicle.is_toggle_mod_on = natives.VEHICLE.IS_TOGGLE_MOD_ON

--[[
Returns the text label of a mod type for a given vehicle

Use _GET_LABEL_TEXT to get the part name in the game's language
]]
function natives.VEHICLE.GET_MOD_TEXT_LABEL(--[[Vehicle]] vehicle, --[[int]] modType, --[[int]] modValue) -- Returns const char*
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_MOD_TEXT_LABEL' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(modType) == "number", "Arg #2 (modType) must be a number.")
	assert(type(modValue) == "number", "Arg #3 (modValue) must be a number.")

	local result = native_call(0x8935624F8C5592CC, vehicle, modType, modValue)
	return result:__tostring(true)
end
natives.vehicle.get_mod_text_label = natives.VEHICLE.GET_MOD_TEXT_LABEL

--[[
Returns the name for the type of vehicle mod(Armour, engine etc)

]]
function natives.VEHICLE.GET_MOD_SLOT_NAME(--[[Vehicle]] vehicle, --[[int]] modType) -- Returns const char*
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_MOD_SLOT_NAME' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(modType) == "number", "Arg #2 (modType) must be a number.")

	local result = native_call(0x51F0FEB9F6AE98C0, vehicle, modType)
	return result:__tostring(true)
end
natives.vehicle.get_mod_slot_name = natives.VEHICLE.GET_MOD_SLOT_NAME

--[[
Second Param = LiveryIndex

example 

int count = VEHICLE::GET_VEHICLE_LIVERY_COUNT(veh);
for (int i = 0; i < count; i++)  
  {
     const char* LiveryName = VEHICLE::GET_LIVERY_NAME(veh, i);
  }


this example will work fine to fetch all names 
for example for Sanchez we get 

SANC_LV1
SANC_LV2
SANC_LV3
SANC_LV4
SANC_LV5


Use _GET_LABEL_TEXT, to get the localized livery name.

Full list of vehicle mod kits and mods by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicleModKits.json
]]
function natives.VEHICLE.GET_LIVERY_NAME(--[[Vehicle]] vehicle, --[[int]] liveryIndex) -- Returns const char*
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_LIVERY_NAME' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(liveryIndex) == "number", "Arg #2 (liveryIndex) must be a number.")

	local result = native_call(0xB4C7A93837C91A1F, vehicle, liveryIndex)
	return result:__tostring(true)
end
natives.vehicle.get_livery_name = natives.VEHICLE.GET_LIVERY_NAME

function natives.VEHICLE.GET_VEHICLE_MOD_MODIFIER_VALUE(--[[Vehicle]] vehicle, --[[int]] modType, --[[int]] modIndex) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_VEHICLE_MOD_MODIFIER_VALUE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(modType) == "number", "Arg #2 (modType) must be a number.")
	assert(type(modIndex) == "number", "Arg #3 (modIndex) must be a number.")

	local result = native_call(0x90A38E9838E0A8C1, vehicle, modType, modIndex)
	return result:__tointeger()
end
natives.vehicle.get_vehicle_mod_modifier_value = natives.VEHICLE.GET_VEHICLE_MOD_MODIFIER_VALUE

--[[
Can be used for IS_DLC_VEHICLE_MOD and _0xC098810437312FFF
]]
function natives.VEHICLE.GET_VEHICLE_MOD_IDENTIFIER_HASH(--[[Vehicle]] vehicle, --[[int]] modType, --[[int]] modIndex) -- Returns Hash
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_VEHICLE_MOD_IDENTIFIER_HASH' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(modType) == "number", "Arg #2 (modType) must be a number.")
	assert(type(modIndex) == "number", "Arg #3 (modIndex) must be a number.")

	local result = native_call(0x4593CF82AA179706, vehicle, modType, modIndex)
	return result:__tointeger()
end
natives.vehicle.get_vehicle_mod_identifier_hash = natives.VEHICLE.GET_VEHICLE_MOD_IDENTIFIER_HASH

function natives.VEHICLE.PRELOAD_VEHICLE_MOD(--[[Any]] p0, --[[int]] modType, --[[Any]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.PRELOAD_VEHICLE_MOD' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(modType) == "number", "Arg #2 (modType) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0x758F49C24925568A, p0, modType, p2)
end
natives.vehicle.preload_vehicle_mod = natives.VEHICLE.PRELOAD_VEHICLE_MOD

function natives.VEHICLE.HAS_PRELOAD_MODS_FINISHED(--[[Any]] p0) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.HAS_PRELOAD_MODS_FINISHED' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x06F43E5175EB6D96, p0)
	return result:__tointeger() ~= 0
end
natives.vehicle.has_preload_mods_finished = natives.VEHICLE.HAS_PRELOAD_MODS_FINISHED

function natives.VEHICLE.RELEASE_PRELOAD_MODS(--[[Vehicle]] vehicle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.RELEASE_PRELOAD_MODS' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x445D79F995508307, vehicle)
end
natives.vehicle.release_preload_mods = natives.VEHICLE.RELEASE_PRELOAD_MODS

--[[
Sets the tire smoke's color of this vehicle.

vehicle: The vehicle that is the target of this method.
r: The red level in the RGB color code.
g: The green level in the RGB color code.
b: The blue level in the RGB color code.

Note:
setting r,g,b to 0 will give the car independance day tyre smoke
]]
function natives.VEHICLE.SET_VEHICLE_TYRE_SMOKE_COLOR(--[[Vehicle]] vehicle, --[[int]] r, --[[int]] g, --[[int]] b) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_TYRE_SMOKE_COLOR' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(r) == "number", "Arg #2 (r) must be a number.")
	assert(type(g) == "number", "Arg #3 (g) must be a number.")
	assert(type(b) == "number", "Arg #4 (b) must be a number.")

	local result = native_call(0xB5BA80F839791C0F, vehicle, r, g, b)
end
natives.vehicle.set_vehicle_tyre_smoke_color = natives.VEHICLE.SET_VEHICLE_TYRE_SMOKE_COLOR

function natives.VEHICLE.GET_VEHICLE_TYRE_SMOKE_COLOR(--[[Vehicle]] vehicle, --[[int*]] r, --[[int*]] g, --[[int*]] b) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_VEHICLE_TYRE_SMOKE_COLOR' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(r) == "userdata", "Arg #2 (r) must be a userdata.")
	assert(type(g) == "userdata", "Arg #3 (g) must be a userdata.")
	assert(type(b) == "userdata", "Arg #4 (b) must be a userdata.")

	local result = native_call(0xB635392A4938B3C3, vehicle, r, g, b)
end
natives.vehicle.get_vehicle_tyre_smoke_color = natives.VEHICLE.GET_VEHICLE_TYRE_SMOKE_COLOR

--[[
enum WindowTints
{
 WINDOWTINT_NONE,
  WINDOWTINT_PURE_BLACK,
    WINDOWTINT_DARKSMOKE,
 WINDOWTINT_LIGHTSMOKE,
    WINDOWTINT_STOCK,
 WINDOWTINT_LIMO,
  WINDOWTINT_GREEN
};
Full list of all vehicle window tints by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicleColors.json
]]
function natives.VEHICLE.SET_VEHICLE_WINDOW_TINT(--[[Vehicle]] vehicle, --[[int]] tint) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_WINDOW_TINT' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(tint) == "number", "Arg #2 (tint) must be a number.")

	local result = native_call(0x57C51E6BAD752696, vehicle, tint)
end
natives.vehicle.set_vehicle_window_tint = natives.VEHICLE.SET_VEHICLE_WINDOW_TINT

function natives.VEHICLE.GET_VEHICLE_WINDOW_TINT(--[[Vehicle]] vehicle) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_VEHICLE_WINDOW_TINT' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x0EE21293DAD47C95, vehicle)
	return result:__tointeger()
end
natives.vehicle.get_vehicle_window_tint = natives.VEHICLE.GET_VEHICLE_WINDOW_TINT

function natives.VEHICLE.GET_NUM_VEHICLE_WINDOW_TINTS() -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_NUM_VEHICLE_WINDOW_TINTS' due to disabled trusted mode")

	local result = native_call(0x9D1224004B3A6707)
	return result:__tointeger()
end
natives.vehicle.get_num_vehicle_window_tints = natives.VEHICLE.GET_NUM_VEHICLE_WINDOW_TINTS

--[[
What's this for? Primary and Secondary RGB have their own natives and this one doesn't seem specific.
]]
function natives.VEHICLE.GET_VEHICLE_COLOR(--[[Vehicle]] vehicle, --[[int*]] r, --[[int*]] g, --[[int*]] b) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_VEHICLE_COLOR' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(r) == "userdata", "Arg #2 (r) must be a userdata.")
	assert(type(g) == "userdata", "Arg #3 (g) must be a userdata.")
	assert(type(b) == "userdata", "Arg #4 (b) must be a userdata.")

	local result = native_call(0xF3CC740D36221548, vehicle, r, g, b)
end
natives.vehicle.get_vehicle_color = natives.VEHICLE.GET_VEHICLE_COLOR

--[[
Some kind of flags.
]]
function natives.VEHICLE.GET_VEHICLE_COLOURS_WHICH_CAN_BE_SET(--[[Vehicle]] vehicle) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_VEHICLE_COLOURS_WHICH_CAN_BE_SET' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0xEEBFC7A7EFDC35B4, vehicle)
	return result:__tointeger()
end
natives.vehicle.get_vehicle_colours_which_can_be_set = natives.VEHICLE.GET_VEHICLE_COLOURS_WHICH_CAN_BE_SET

--[[
iVar3 = get_vehicle_cause_of_destruction(uLocal_248[iVar2]);
if (iVar3 == joaat("weapon_stickybomb"))
{
	func_171(726);
	iLocal_260 = 1;
}
]]
function natives.VEHICLE.GET_VEHICLE_CAUSE_OF_DESTRUCTION(--[[Vehicle]] vehicle) -- Returns Hash
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_VEHICLE_CAUSE_OF_DESTRUCTION' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0xE495D1EF4C91FD20, vehicle)
	return result:__tointeger()
end
natives.vehicle.get_vehicle_cause_of_destruction = natives.VEHICLE.GET_VEHICLE_CAUSE_OF_DESTRUCTION

--[[
Used for helis.
]]
function natives.VEHICLE.OVERRIDE_PLANE_DAMAGE_THREHSOLD(--[[Vehicle]] vehicle, --[[float]] health) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.OVERRIDE_PLANE_DAMAGE_THREHSOLD' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(health) == "number", "Arg #2 (health) must be a number.")

	local result = native_call(0x5EE5632F47AE9695, vehicle, health)
end
natives.vehicle.override_plane_damage_threhsold = natives.VEHICLE.OVERRIDE_PLANE_DAMAGE_THREHSOLD

--[[
From the driver's perspective, is the left headlight broken.
]]
function natives.VEHICLE.GET_IS_LEFT_VEHICLE_HEADLIGHT_DAMAGED(--[[Vehicle]] vehicle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_IS_LEFT_VEHICLE_HEADLIGHT_DAMAGED' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x5EF77C9ADD3B11A3, vehicle)
	return result:__tointeger() ~= 0
end
natives.vehicle.get_is_left_vehicle_headlight_damaged = natives.VEHICLE.GET_IS_LEFT_VEHICLE_HEADLIGHT_DAMAGED

--[[
From the driver's perspective, is the right headlight broken.
]]
function natives.VEHICLE.GET_IS_RIGHT_VEHICLE_HEADLIGHT_DAMAGED(--[[Vehicle]] vehicle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_IS_RIGHT_VEHICLE_HEADLIGHT_DAMAGED' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0xA7ECB73355EB2F20, vehicle)
	return result:__tointeger() ~= 0
end
natives.vehicle.get_is_right_vehicle_headlight_damaged = natives.VEHICLE.GET_IS_RIGHT_VEHICLE_HEADLIGHT_DAMAGED

--[[
Only ever used once in decompiled scripts: **am_pi_menu**:
Returns true if the engine is on fire, or if the vehicle engine health is < 0 and it **has been** on fire.

It sometimes doesn't return true when the vehicle engine has been on fire, and has since been fixed. I'm not really sure what the exact conditions are.

This usually returns true even if there are no visible flames yet (engine health > 0). However if you monitor engine health you'll see that it starts decreasing as soon as this returns true.
]]
function natives.VEHICLE.GET_BOTH_VEHICLE_HEADLIGHTS_DAMAGED(--[[Vehicle]] vehicle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_BOTH_VEHICLE_HEADLIGHTS_DAMAGED' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0xEC69ADF931AAE0C3, vehicle)
	return result:__tointeger() ~= 0
end
natives.vehicle.get_both_vehicle_headlights_damaged = natives.VEHICLE.GET_BOTH_VEHICLE_HEADLIGHTS_DAMAGED

function natives.VEHICLE.MODIFY_VEHICLE_TOP_SPEED(--[[Vehicle]] vehicle, --[[float]] value) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.MODIFY_VEHICLE_TOP_SPEED' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(value) == "number", "Arg #2 (value) must be a number.")

	local result = native_call(0x93A3996368C94158, vehicle, value)
end
natives.vehicle.modify_vehicle_top_speed = natives.VEHICLE.MODIFY_VEHICLE_TOP_SPEED

--[[
To reset the max speed, set the `speed` value to `0.0` or lower.
]]
function natives.VEHICLE.SET_VEHICLE_MAX_SPEED(--[[Vehicle]] vehicle, --[[float]] speed) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_MAX_SPEED' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(speed) == "number", "Arg #2 (speed) must be a number.")

	local result = native_call(0xBAA045B4E42F3C06, vehicle, speed)
end
natives.vehicle.set_vehicle_max_speed = natives.VEHICLE.SET_VEHICLE_MAX_SPEED

--[[
Has something to do with trains. Always precedes SET_MISSION_TRAIN_AS_NO_LONGER_NEEDED.
May be true that it can be used with trains not sure, but not specifically for trains. Go find Xbox360 decompiled scripts and search for 'func_1333' in freemode.c it isn't used just for trains. Thanks for the info tho.
]]
function natives.VEHICLE.SET_VEHICLE_STAYS_FROZEN_WHEN_CLEANED_UP(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_STAYS_FROZEN_WHEN_CLEANED_UP' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x1CF38D529D7441D9, vehicle, toggle)
end
natives.vehicle.set_vehicle_stays_frozen_when_cleaned_up = natives.VEHICLE.SET_VEHICLE_STAYS_FROZEN_WHEN_CLEANED_UP

function natives.VEHICLE.SET_VEHICLE_ACT_AS_IF_HIGH_SPEED_FOR_FRAG_SMASHING(--[[Vehicle]] vehicle, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_ACT_AS_IF_HIGH_SPEED_FOR_FRAG_SMASHING' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0x1F9FB66F3A3842D2, vehicle, p1)
end
natives.vehicle.set_vehicle_act_as_if_high_speed_for_frag_smashing = natives.VEHICLE.SET_VEHICLE_ACT_AS_IF_HIGH_SPEED_FOR_FRAG_SMASHING

--[[
Sets some bit and float of vehicle. float is >= 0
]]
function natives.VEHICLE.SET_PEDS_CAN_FALL_OFF_THIS_VEHICLE_FROM_LARGE_FALL_DAMAGE(--[[Vehicle]] vehicle, --[[BOOL]] toggle, --[[float]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_PEDS_CAN_FALL_OFF_THIS_VEHICLE_FROM_LARGE_FALL_DAMAGE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0x59C3757B3B7408E8, vehicle, toggle, p2)
end
natives.vehicle.set_peds_can_fall_off_this_vehicle_from_large_fall_damage = natives.VEHICLE.SET_PEDS_CAN_FALL_OFF_THIS_VEHICLE_FROM_LARGE_FALL_DAMAGE

function natives.VEHICLE.ADD_VEHICLE_COMBAT_ANGLED_AVOIDANCE_AREA(--[[float]] p0, --[[float]] p1, --[[float]] p2, --[[float]] p3, --[[float]] p4, --[[float]] p5, --[[float]] p6) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.ADD_VEHICLE_COMBAT_ANGLED_AVOIDANCE_AREA' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")
	assert(type(p6) == "number", "Arg #7 (p6) must be a number.")

	local result = native_call(0x54B0F614960F4A5F, p0, p1, p2, p3, p4, p5, p6)
	return result:__tointeger()
end
natives.vehicle.add_vehicle_combat_angled_avoidance_area = natives.VEHICLE.ADD_VEHICLE_COMBAT_ANGLED_AVOIDANCE_AREA

function natives.VEHICLE.REMOVE_VEHICLE_COMBAT_AVOIDANCE_AREA(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.REMOVE_VEHICLE_COMBAT_AVOIDANCE_AREA' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xE30524E1871F481D, p0)
end
natives.vehicle.remove_vehicle_combat_avoidance_area = natives.VEHICLE.REMOVE_VEHICLE_COMBAT_AVOIDANCE_AREA

function natives.VEHICLE.IS_ANY_PED_RAPPELLING_FROM_HELI(--[[Vehicle]] vehicle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.IS_ANY_PED_RAPPELLING_FROM_HELI' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x291E373D483E7EE7, vehicle)
	return result:__tointeger() ~= 0
end
natives.vehicle.is_any_ped_rappelling_from_heli = natives.VEHICLE.IS_ANY_PED_RAPPELLING_FROM_HELI

--[[
<1.0 - Decreased torque
=1.0 - Default torque
>1.0 - Increased torque

Negative values will cause the vehicle to go backwards instead of forwards while accelerating.

value - is between 0.2 and 1.8 in the decompiled scripts. 

This needs to be called every frame to take effect.
]]
function natives.VEHICLE.SET_VEHICLE_CHEAT_POWER_INCREASE(--[[Vehicle]] vehicle, --[[float]] value) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_CHEAT_POWER_INCREASE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(value) == "number", "Arg #2 (value) must be a number.")

	local result = native_call(0xB59E4BD37AE292DB, vehicle, value)
end
natives.vehicle.set_vehicle_cheat_power_increase = natives.VEHICLE.SET_VEHICLE_CHEAT_POWER_INCREASE

function natives.VEHICLE.SET_VEHICLE_INFLUENCES_WANTED_LEVEL(--[[Any]] p0, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_INFLUENCES_WANTED_LEVEL' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0x0AD9E8F87FF7C16F, p0, p1)
end
natives.vehicle.set_vehicle_influences_wanted_level = natives.VEHICLE.SET_VEHICLE_INFLUENCES_WANTED_LEVEL

--[[
Sets the wanted state of this vehicle.

]]
function natives.VEHICLE.SET_VEHICLE_IS_WANTED(--[[Vehicle]] vehicle, --[[BOOL]] state) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_IS_WANTED' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(state) == "boolean", "Arg #2 (state) must be a boolean.")

	local result = native_call(0xF7EC25A3EBEEC726, vehicle, state)
end
natives.vehicle.set_vehicle_is_wanted = natives.VEHICLE.SET_VEHICLE_IS_WANTED

--[[
Sets the boat boom position for the `TR3` trailer.
Ratio value is between `0.0` and `1.0`, where `0.0` is 90 degrees to the left of the boat, and `1.0` is just slightly to the right/back of the boat.
To get the current boom position ratio, use GET_BOAT_BOOM_POSITION_RATIO
]]
function natives.VEHICLE.SWING_BOAT_BOOM_TO_RATIO(--[[Vehicle]] vehicle, --[[float]] ratio) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SWING_BOAT_BOOM_TO_RATIO' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(ratio) == "number", "Arg #2 (ratio) must be a number.")

	local result = native_call(0xF488C566413B4232, vehicle, ratio)
end
natives.vehicle.swing_boat_boom_to_ratio = natives.VEHICLE.SWING_BOAT_BOOM_TO_RATIO

--[[
Same call as VEHICLE::_0x0F3B4D4E43177236
]]
function natives.VEHICLE.SWING_BOAT_BOOM_FREELY(--[[Vehicle]] vehicle, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SWING_BOAT_BOOM_FREELY' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0xC1F981A6F74F0C23, vehicle, p1)
end
natives.vehicle.swing_boat_boom_freely = natives.VEHICLE.SWING_BOAT_BOOM_FREELY

function natives.VEHICLE.ALLOW_BOAT_BOOM_TO_ANIMATE(--[[Vehicle]] vehicle, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.ALLOW_BOAT_BOOM_TO_ANIMATE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0x0F3B4D4E43177236, vehicle, p1)
end
natives.vehicle.allow_boat_boom_to_animate = natives.VEHICLE.ALLOW_BOAT_BOOM_TO_ANIMATE

function natives.VEHICLE.GET_BOAT_BOOM_POSITION_RATIO(--[[Vehicle]] vehicle) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_BOAT_BOOM_POSITION_RATIO' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x6636C535F6CC2725, vehicle)
	return result:__tonumber()
end
natives.vehicle.get_boat_boom_position_ratio = natives.VEHICLE.GET_BOAT_BOOM_POSITION_RATIO

function natives.VEHICLE.DISABLE_PLANE_AILERON(--[[Vehicle]] vehicle, --[[BOOL]] p1, --[[BOOL]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.DISABLE_PLANE_AILERON' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")

	local result = native_call(0x23428FC53C60919C, vehicle, p1, p2)
end
natives.vehicle.disable_plane_aileron = natives.VEHICLE.DISABLE_PLANE_AILERON

--[[
Returns true when in a vehicle, false whilst entering/exiting.
]]
function natives.VEHICLE.GET_IS_VEHICLE_ENGINE_RUNNING(--[[Vehicle]] vehicle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_IS_VEHICLE_ENGINE_RUNNING' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0xAE31E7DF9B5B132E, vehicle)
	return result:__tointeger() ~= 0
end
natives.vehicle.get_is_vehicle_engine_running = natives.VEHICLE.GET_IS_VEHICLE_ENGINE_RUNNING

function natives.VEHICLE.SET_VEHICLE_USE_ALTERNATE_HANDLING(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_USE_ALTERNATE_HANDLING' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x1D97D1E3A70A649F, vehicle, toggle)
end
natives.vehicle.set_vehicle_use_alternate_handling = natives.VEHICLE.SET_VEHICLE_USE_ALTERNATE_HANDLING

--[[
Only works on bikes, both X and Y work in the -1 - 1 range.

X forces the bike to turn left or right (-1, 1)
Y forces the bike to lean to the left or to the right (-1, 1)

Example with X -1/Y 1
http://i.imgur.com/TgIuAPJ.jpg
]]
function natives.VEHICLE.SET_BIKE_ON_STAND(--[[Vehicle]] vehicle, --[[float]] x, --[[float]] y) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_BIKE_ON_STAND' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")

	local result = native_call(0x9CFA4896C3A53CBB, vehicle, x, y)
end
natives.vehicle.set_bike_on_stand = natives.VEHICLE.SET_BIKE_ON_STAND

function natives.VEHICLE.SET_VEHICLE_NOT_STEALABLE_AMBIENTLY(--[[Vehicle]] vehicle, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_NOT_STEALABLE_AMBIENTLY' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0xAB04325045427AAE, vehicle, p1)
end
natives.vehicle.set_vehicle_not_stealable_ambiently = natives.VEHICLE.SET_VEHICLE_NOT_STEALABLE_AMBIENTLY

function natives.VEHICLE.LOCK_DOORS_WHEN_NO_LONGER_NEEDED(--[[Vehicle]] vehicle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.LOCK_DOORS_WHEN_NO_LONGER_NEEDED' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0xCFD778E7904C255E, vehicle)
end
natives.vehicle.lock_doors_when_no_longer_needed = natives.VEHICLE.LOCK_DOORS_WHEN_NO_LONGER_NEEDED

function natives.VEHICLE.SET_LAST_DRIVEN_VEHICLE(--[[Vehicle]] vehicle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_LAST_DRIVEN_VEHICLE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0xACFB2463CC22BED2, vehicle)
end
natives.vehicle.set_last_driven_vehicle = natives.VEHICLE.SET_LAST_DRIVEN_VEHICLE

function natives.VEHICLE.GET_LAST_DRIVEN_VEHICLE() -- Returns Vehicle
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_LAST_DRIVEN_VEHICLE' due to disabled trusted mode")

	local result = native_call(0xB2D06FAEDE65B577)
	return result:__tointeger()
end
natives.vehicle.get_last_driven_vehicle = natives.VEHICLE.GET_LAST_DRIVEN_VEHICLE

function natives.VEHICLE.CLEAR_LAST_DRIVEN_VEHICLE() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.CLEAR_LAST_DRIVEN_VEHICLE' due to disabled trusted mode")

	local result = native_call(0xE01903C47C7AC89E)
end
natives.vehicle.clear_last_driven_vehicle = natives.VEHICLE.CLEAR_LAST_DRIVEN_VEHICLE

function natives.VEHICLE.SET_VEHICLE_HAS_BEEN_DRIVEN_FLAG(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_HAS_BEEN_DRIVEN_FLAG' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x02398B627547189C, vehicle, toggle)
end
natives.vehicle.set_vehicle_has_been_driven_flag = natives.VEHICLE.SET_VEHICLE_HAS_BEEN_DRIVEN_FLAG

function natives.VEHICLE.SET_TASK_VEHICLE_GOTO_PLANE_MIN_HEIGHT_ABOVE_TERRAIN(--[[Vehicle]] plane, --[[int]] height) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_TASK_VEHICLE_GOTO_PLANE_MIN_HEIGHT_ABOVE_TERRAIN' due to disabled trusted mode")

	assert(type(plane) == "number", "Arg #1 (plane) must be a number.")
	assert(type(height) == "number", "Arg #2 (height) must be a number.")

	local result = native_call(0xB893215D8D4C015B, plane, height)
end
natives.vehicle.set_task_vehicle_goto_plane_min_height_above_terrain = natives.VEHICLE.SET_TASK_VEHICLE_GOTO_PLANE_MIN_HEIGHT_ABOVE_TERRAIN

function natives.VEHICLE.SET_VEHICLE_LOD_MULTIPLIER(--[[Vehicle]] vehicle, --[[float]] multiplier) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_LOD_MULTIPLIER' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(multiplier) == "number", "Arg #2 (multiplier) must be a number.")

	local result = native_call(0x93AE6A61BE015BF1, vehicle, multiplier)
end
natives.vehicle.set_vehicle_lod_multiplier = natives.VEHICLE.SET_VEHICLE_LOD_MULTIPLIER

function natives.VEHICLE.SET_VEHICLE_CAN_SAVE_IN_GARAGE(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_CAN_SAVE_IN_GARAGE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x428BACCDF5E26EAD, vehicle, toggle)
end
natives.vehicle.set_vehicle_can_save_in_garage = natives.VEHICLE.SET_VEHICLE_CAN_SAVE_IN_GARAGE

--[[
Also includes some "turnOffBones" when vehicle mods are installed.
]]
function natives.VEHICLE.GET_VEHICLE_NUM_OF_BROKEN_OFF_PARTS(--[[Vehicle]] vehicle) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_VEHICLE_NUM_OF_BROKEN_OFF_PARTS' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x42A4BEB35D372407, vehicle)
	return result:__tointeger()
end
natives.vehicle.get_vehicle_num_of_broken_off_parts = natives.VEHICLE.GET_VEHICLE_NUM_OF_BROKEN_OFF_PARTS

function natives.VEHICLE.GET_VEHICLE_NUM_OF_BROKEN_LOOSEN_PARTS(--[[Vehicle]] vehicle) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_VEHICLE_NUM_OF_BROKEN_LOOSEN_PARTS' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x2C8CBFE1EA5FC631, vehicle)
	return result:__tointeger()
end
natives.vehicle.get_vehicle_num_of_broken_loosen_parts = natives.VEHICLE.GET_VEHICLE_NUM_OF_BROKEN_LOOSEN_PARTS

function natives.VEHICLE.SET_FORCE_VEHICLE_ENGINE_DAMAGE_BY_BULLET(--[[Any]] p0, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_FORCE_VEHICLE_ENGINE_DAMAGE_BY_BULLET' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0x4D9D109F63FEE1D4, p0, p1)
end
natives.vehicle.set_force_vehicle_engine_damage_by_bullet = natives.VEHICLE.SET_FORCE_VEHICLE_ENGINE_DAMAGE_BY_BULLET

--[[
Allows creation of CEventShockingPlaneFlyby, CEventShockingHelicopterOverhead, and other(?) Shocking events
]]
function natives.VEHICLE.SET_VEHICLE_GENERATES_ENGINE_SHOCKING_EVENTS(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_GENERATES_ENGINE_SHOCKING_EVENTS' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x279D50DE5652D935, vehicle, toggle)
end
natives.vehicle.set_vehicle_generates_engine_shocking_events = natives.VEHICLE.SET_VEHICLE_GENERATES_ENGINE_SHOCKING_EVENTS

--[[
Copies sourceVehicle's damage (broken bumpers, broken lights, etc.) to targetVehicle.
]]
function natives.VEHICLE.COPY_VEHICLE_DAMAGES(--[[Vehicle]] sourceVehicle, --[[Vehicle]] targetVehicle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.COPY_VEHICLE_DAMAGES' due to disabled trusted mode")

	assert(type(sourceVehicle) == "number", "Arg #1 (sourceVehicle) must be a number.")
	assert(type(targetVehicle) == "number", "Arg #2 (targetVehicle) must be a number.")

	local result = native_call(0xE44A982368A4AF23, sourceVehicle, targetVehicle)
end
natives.vehicle.copy_vehicle_damages = natives.VEHICLE.COPY_VEHICLE_DAMAGES

function natives.VEHICLE.DISABLE_VEHICLE_EXPLOSION_BREAK_OFF_PARTS() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.DISABLE_VEHICLE_EXPLOSION_BREAK_OFF_PARTS' due to disabled trusted mode")

	local result = native_call(0xF25E02CB9C5818F8)
end
natives.vehicle.disable_vehicle_explosion_break_off_parts = natives.VEHICLE.DISABLE_VEHICLE_EXPLOSION_BREAK_OFF_PARTS

function natives.VEHICLE.SET_LIGHTS_CUTOFF_DISTANCE_TWEAK(--[[float]] distance) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_LIGHTS_CUTOFF_DISTANCE_TWEAK' due to disabled trusted mode")

	assert(type(distance) == "number", "Arg #1 (distance) must be a number.")

	local result = native_call(0xBC3CCA5844452B06, distance)
end
natives.vehicle.set_lights_cutoff_distance_tweak = natives.VEHICLE.SET_LIGHTS_CUTOFF_DISTANCE_TWEAK

--[[
Commands the driver of an armed vehicle (p0) to shoot its weapon at a target (p1). p3, p4 and p5 are the coordinates of the target. Example:

WEAPON::SET_CURRENT_PED_VEHICLE_WEAPON(pilot,MISC::GET_HASH_KEY("VEHICLE_WEAPON_PLANE_ROCKET"));                        VEHICLE::SET_VEHICLE_SHOOT_AT_TARGET(pilot, target, targPos.x, targPos.y, targPos.z);
]]
function natives.VEHICLE.SET_VEHICLE_SHOOT_AT_TARGET(--[[Ped]] driver, --[[Entity]] entity, --[[float]] xTarget, --[[float]] yTarget, --[[float]] zTarget) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_SHOOT_AT_TARGET' due to disabled trusted mode")

	assert(type(driver) == "number", "Arg #1 (driver) must be a number.")
	assert(type(entity) == "number", "Arg #2 (entity) must be a number.")
	assert(type(xTarget) == "number", "Arg #3 (xTarget) must be a number.")
	assert(type(yTarget) == "number", "Arg #4 (yTarget) must be a number.")
	assert(type(zTarget) == "number", "Arg #5 (zTarget) must be a number.")

	local result = native_call(0x74CD9A9327A282EA, driver, entity, xTarget, yTarget, zTarget)
end
natives.vehicle.set_vehicle_shoot_at_target = natives.VEHICLE.SET_VEHICLE_SHOOT_AT_TARGET

function natives.VEHICLE.GET_VEHICLE_LOCK_ON_TARGET(--[[Vehicle]] vehicle, --[[Entity*]] entity) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_VEHICLE_LOCK_ON_TARGET' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(entity) == "userdata", "Arg #2 (entity) must be a userdata.")

	local result = native_call(0x8F5EBAB1F260CFCE, vehicle, entity)
	return result:__tointeger() ~= 0
end
natives.vehicle.get_vehicle_lock_on_target = natives.VEHICLE.GET_VEHICLE_LOCK_ON_TARGET

function natives.VEHICLE.SET_FORCE_HD_VEHICLE(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_FORCE_HD_VEHICLE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x97CE68CB032583F0, vehicle, toggle)
end
natives.vehicle.set_force_hd_vehicle = natives.VEHICLE.SET_FORCE_HD_VEHICLE

function natives.VEHICLE.SET_VEHICLE_CUSTOM_PATH_NODE_STREAMING_RADIUS(--[[Vehicle]] vehicle, --[[float]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_CUSTOM_PATH_NODE_STREAMING_RADIUS' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x182F266C2D9E2BEB, vehicle, p1)
end
natives.vehicle.set_vehicle_custom_path_node_streaming_radius = natives.VEHICLE.SET_VEHICLE_CUSTOM_PATH_NODE_STREAMING_RADIUS

function natives.VEHICLE.GET_VEHICLE_PLATE_TYPE(--[[Vehicle]] vehicle) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_VEHICLE_PLATE_TYPE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x9CCC9525BF2408E0, vehicle)
	return result:__tointeger()
end
natives.vehicle.get_vehicle_plate_type = natives.VEHICLE.GET_VEHICLE_PLATE_TYPE

--[[
in script hook .net 

Vehicle v = ...;
Function.Call(Hash.TRACK_VEHICLE_VISIBILITY, v.Handle);
]]
function natives.VEHICLE.TRACK_VEHICLE_VISIBILITY(--[[Vehicle]] vehicle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.TRACK_VEHICLE_VISIBILITY' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x64473AEFDCF47DCA, vehicle)
end
natives.vehicle.track_vehicle_visibility = natives.VEHICLE.TRACK_VEHICLE_VISIBILITY

--[[
must be called after TRACK_VEHICLE_VISIBILITY 

it's not instant so probabilly must pass an 'update' to see correct result.
]]
function natives.VEHICLE.IS_VEHICLE_VISIBLE(--[[Vehicle]] vehicle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.IS_VEHICLE_VISIBLE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0xAA0A52D24FB98293, vehicle)
	return result:__tointeger() ~= 0
end
natives.vehicle.is_vehicle_visible = natives.VEHICLE.IS_VEHICLE_VISIBLE

function natives.VEHICLE.SET_VEHICLE_GRAVITY(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_GRAVITY' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x89F149B6131E57DA, vehicle, toggle)
end
natives.vehicle.set_vehicle_gravity = natives.VEHICLE.SET_VEHICLE_GRAVITY

--[[
Enable/Disables global slipstream physics
]]
function natives.VEHICLE.SET_ENABLE_VEHICLE_SLIPSTREAMING(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_ENABLE_VEHICLE_SLIPSTREAMING' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0xE6C0C80B8C867537, toggle)
end
natives.vehicle.set_enable_vehicle_slipstreaming = natives.VEHICLE.SET_ENABLE_VEHICLE_SLIPSTREAMING

function natives.VEHICLE.SET_VEHICLE_SLIPSTREAMING_SHOULD_TIME_OUT(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_SLIPSTREAMING_SHOULD_TIME_OUT' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xF051D9BFB6BA39C0, p0)
end
natives.vehicle.set_vehicle_slipstreaming_should_time_out = natives.VEHICLE.SET_VEHICLE_SLIPSTREAMING_SHOULD_TIME_OUT

--[[
Returns a float value between 0.0 and 3.0 related to its slipstream draft (boost/speedup).
]]
function natives.VEHICLE.GET_VEHICLE_CURRENT_TIME_IN_SLIP_STREAM(--[[Vehicle]] vehicle) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_VEHICLE_CURRENT_TIME_IN_SLIP_STREAM' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x36492C2F0D134C56, vehicle)
	return result:__tonumber()
end
natives.vehicle.get_vehicle_current_time_in_slip_stream = natives.VEHICLE.GET_VEHICLE_CURRENT_TIME_IN_SLIP_STREAM

--[[
Returns true if the vehicle is being slipstreamed by another vehicle
]]
function natives.VEHICLE.IS_VEHICLE_PRODUCING_SLIP_STREAM(--[[Vehicle]] vehicle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.IS_VEHICLE_PRODUCING_SLIP_STREAM' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x48C633E94A8142A7, vehicle)
	return result:__tointeger() ~= 0
end
natives.vehicle.is_vehicle_producing_slip_stream = natives.VEHICLE.IS_VEHICLE_PRODUCING_SLIP_STREAM

function natives.VEHICLE.SET_VEHICLE_INACTIVE_DURING_PLAYBACK(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_INACTIVE_DURING_PLAYBACK' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x06582AFF74894C75, vehicle, toggle)
end
natives.vehicle.set_vehicle_inactive_during_playback = natives.VEHICLE.SET_VEHICLE_INACTIVE_DURING_PLAYBACK

function natives.VEHICLE.SET_VEHICLE_ACTIVE_DURING_PLAYBACK(--[[Any]] p0, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_ACTIVE_DURING_PLAYBACK' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0xDFFCEF48E511DB48, p0, p1)
end
natives.vehicle.set_vehicle_active_during_playback = natives.VEHICLE.SET_VEHICLE_ACTIVE_DURING_PLAYBACK

--[[
Returns false if the vehicle has the FLAG_NO_RESPRAY flag set.
]]
function natives.VEHICLE.IS_VEHICLE_SPRAYABLE(--[[Vehicle]] vehicle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.IS_VEHICLE_SPRAYABLE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x8D474C8FAEFF6CDE, vehicle)
	return result:__tointeger() ~= 0
end
natives.vehicle.is_vehicle_sprayable = natives.VEHICLE.IS_VEHICLE_SPRAYABLE

function natives.VEHICLE.SET_VEHICLE_ENGINE_CAN_DEGRADE(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_ENGINE_CAN_DEGRADE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x983765856F2564F9, vehicle, toggle)
end
natives.vehicle.set_vehicle_engine_can_degrade = natives.VEHICLE.SET_VEHICLE_ENGINE_CAN_DEGRADE

--[[
Adds some kind of shadow to the vehicle.

-1 disables the effect.
]]
function natives.VEHICLE.DISABLE_VEHCILE_DYNAMIC_AMBIENT_SCALES(--[[Vehicle]] vehicle, --[[int]] p1, --[[int]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.DISABLE_VEHCILE_DYNAMIC_AMBIENT_SCALES' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0xF0E4BA16D1DB546C, vehicle, p1, p2)
end
natives.vehicle.disable_vehcile_dynamic_ambient_scales = natives.VEHICLE.DISABLE_VEHCILE_DYNAMIC_AMBIENT_SCALES

--[[
Remove the weird shadow applied by DISABLE_VEHCILE_DYNAMIC_AMBIENT_SCALES.
]]
function natives.VEHICLE.ENABLE_VEHICLE_DYNAMIC_AMBIENT_SCALES(--[[Vehicle]] vehicle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.ENABLE_VEHICLE_DYNAMIC_AMBIENT_SCALES' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0xF87D9F2301F7D206, vehicle)
end
natives.vehicle.enable_vehicle_dynamic_ambient_scales = natives.VEHICLE.ENABLE_VEHICLE_DYNAMIC_AMBIENT_SCALES

function natives.VEHICLE.IS_PLANE_LANDING_GEAR_INTACT(--[[Vehicle]] plane) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.IS_PLANE_LANDING_GEAR_INTACT' due to disabled trusted mode")

	assert(type(plane) == "number", "Arg #1 (plane) must be a number.")

	local result = native_call(0x4198AB0022B15F87, plane)
	return result:__tointeger() ~= 0
end
natives.vehicle.is_plane_landing_gear_intact = natives.VEHICLE.IS_PLANE_LANDING_GEAR_INTACT

function natives.VEHICLE.ARE_PLANE_PROPELLERS_INTACT(--[[Vehicle]] plane) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.ARE_PLANE_PROPELLERS_INTACT' due to disabled trusted mode")

	assert(type(plane) == "number", "Arg #1 (plane) must be a number.")

	local result = native_call(0x755D6D5267CBBD7E, plane)
	return result:__tointeger() ~= 0
end
natives.vehicle.are_plane_propellers_intact = natives.VEHICLE.ARE_PLANE_PROPELLERS_INTACT

function natives.VEHICLE.SET_PLANE_PROPELLER_HEALTH(--[[Vehicle]] plane, --[[float]] health) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_PLANE_PROPELLER_HEALTH' due to disabled trusted mode")

	assert(type(plane) == "number", "Arg #1 (plane) must be a number.")
	assert(type(health) == "number", "Arg #2 (health) must be a number.")

	local result = native_call(0x4C815EB175086F84, plane, health)
end
natives.vehicle.set_plane_propeller_health = natives.VEHICLE.SET_PLANE_PROPELLER_HEALTH

function natives.VEHICLE.SET_VEHICLE_CAN_DEFORM_WHEELS(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_CAN_DEFORM_WHEELS' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x0CDDA42F9E360CA6, vehicle, toggle)
end
natives.vehicle.set_vehicle_can_deform_wheels = natives.VEHICLE.SET_VEHICLE_CAN_DEFORM_WHEELS

function natives.VEHICLE.IS_VEHICLE_STOLEN(--[[Vehicle]] vehicle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.IS_VEHICLE_STOLEN' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x4AF9BD80EEBEB453, vehicle)
	return result:__tointeger() ~= 0
end
natives.vehicle.is_vehicle_stolen = natives.VEHICLE.IS_VEHICLE_STOLEN

function natives.VEHICLE.SET_VEHICLE_IS_STOLEN(--[[Vehicle]] vehicle, --[[BOOL]] isStolen) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_IS_STOLEN' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(isStolen) == "boolean", "Arg #2 (isStolen) must be a boolean.")

	local result = native_call(0x67B2C79AA7FF5738, vehicle, isStolen)
end
natives.vehicle.set_vehicle_is_stolen = natives.VEHICLE.SET_VEHICLE_IS_STOLEN

--[[
This native sets the turbulence multiplier. It only works for planes.
0.0 = no turbulence at all.
1.0 = heavy turbulence.
Works by just calling it once, does not need to be called every tick.
]]
function natives.VEHICLE.SET_PLANE_TURBULENCE_MULTIPLIER(--[[Vehicle]] vehicle, --[[float]] multiplier) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_PLANE_TURBULENCE_MULTIPLIER' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(multiplier) == "number", "Arg #2 (multiplier) must be a number.")

	local result = native_call(0xAD2D28A1AFDFF131, vehicle, multiplier)
end
natives.vehicle.set_plane_turbulence_multiplier = natives.VEHICLE.SET_PLANE_TURBULENCE_MULTIPLIER

function natives.VEHICLE.ARE_WINGS_OF_PLANE_INTACT(--[[Vehicle]] plane) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.ARE_WINGS_OF_PLANE_INTACT' due to disabled trusted mode")

	assert(type(plane) == "number", "Arg #1 (plane) must be a number.")

	local result = native_call(0x5991A01434CE9677, plane)
	return result:__tointeger() ~= 0
end
natives.vehicle.are_wings_of_plane_intact = natives.VEHICLE.ARE_WINGS_OF_PLANE_INTACT

--[[
This native doesn't seem to do anything, might be a debug-only native.

Confirmed, it is a debug native.
]]
function natives.VEHICLE.ALLOW_AMBIENT_VEHICLES_TO_AVOID_ADVERSE_CONDITIONS(--[[Vehicle]] vehicle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.ALLOW_AMBIENT_VEHICLES_TO_AVOID_ADVERSE_CONDITIONS' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0xB264C4D2F2B0A78B, vehicle)
end
natives.vehicle.allow_ambient_vehicles_to_avoid_adverse_conditions = natives.VEHICLE.ALLOW_AMBIENT_VEHICLES_TO_AVOID_ADVERSE_CONDITIONS

function natives.VEHICLE.DETACH_VEHICLE_FROM_CARGOBOB(--[[Vehicle]] vehicle, --[[Vehicle]] cargobob) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.DETACH_VEHICLE_FROM_CARGOBOB' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(cargobob) == "number", "Arg #2 (cargobob) must be a number.")

	local result = native_call(0x0E21D3DF1051399D, vehicle, cargobob)
end
natives.vehicle.detach_vehicle_from_cargobob = natives.VEHICLE.DETACH_VEHICLE_FROM_CARGOBOB

function natives.VEHICLE.DETACH_VEHICLE_FROM_ANY_CARGOBOB(--[[Vehicle]] vehicle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.DETACH_VEHICLE_FROM_ANY_CARGOBOB' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0xADF7BE450512C12F, vehicle)
	return result:__tointeger() ~= 0
end
natives.vehicle.detach_vehicle_from_any_cargobob = natives.VEHICLE.DETACH_VEHICLE_FROM_ANY_CARGOBOB

function natives.VEHICLE.DETACH_ENTITY_FROM_CARGOBOB(--[[Vehicle]] cargobob, --[[Entity]] entity) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.DETACH_ENTITY_FROM_CARGOBOB' due to disabled trusted mode")

	assert(type(cargobob) == "number", "Arg #1 (cargobob) must be a number.")
	assert(type(entity) == "number", "Arg #2 (entity) must be a number.")

	local result = native_call(0xAF03011701811146, cargobob, entity)
	return result:__tointeger()
end
natives.vehicle.detach_entity_from_cargobob = natives.VEHICLE.DETACH_ENTITY_FROM_CARGOBOB

function natives.VEHICLE.IS_VEHICLE_ATTACHED_TO_CARGOBOB(--[[Vehicle]] cargobob, --[[Vehicle]] vehicleAttached) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.IS_VEHICLE_ATTACHED_TO_CARGOBOB' due to disabled trusted mode")

	assert(type(cargobob) == "number", "Arg #1 (cargobob) must be a number.")
	assert(type(vehicleAttached) == "number", "Arg #2 (vehicleAttached) must be a number.")

	local result = native_call(0xD40148F22E81A1D9, cargobob, vehicleAttached)
	return result:__tointeger() ~= 0
end
natives.vehicle.is_vehicle_attached_to_cargobob = natives.VEHICLE.IS_VEHICLE_ATTACHED_TO_CARGOBOB

--[[
Returns attached vehicle (Vehicle in parameter must be cargobob)
]]
function natives.VEHICLE.GET_VEHICLE_ATTACHED_TO_CARGOBOB(--[[Vehicle]] cargobob) -- Returns Vehicle
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_VEHICLE_ATTACHED_TO_CARGOBOB' due to disabled trusted mode")

	assert(type(cargobob) == "number", "Arg #1 (cargobob) must be a number.")

	local result = native_call(0x873B82D42AC2B9E5, cargobob)
	return result:__tointeger()
end
natives.vehicle.get_vehicle_attached_to_cargobob = natives.VEHICLE.GET_VEHICLE_ATTACHED_TO_CARGOBOB

function natives.VEHICLE.GET_ENTITY_ATTACHED_TO_CARGOBOB(--[[Any]] p0) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_ENTITY_ATTACHED_TO_CARGOBOB' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x99093F60746708CA, p0)
	return result:__tointeger()
end
natives.vehicle.get_entity_attached_to_cargobob = natives.VEHICLE.GET_ENTITY_ATTACHED_TO_CARGOBOB

function natives.VEHICLE.ATTACH_VEHICLE_TO_CARGOBOB(--[[Vehicle]] vehicle, --[[Vehicle]] cargobob, --[[int]] p2, --[[float]] x, --[[float]] y, --[[float]] z) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.ATTACH_VEHICLE_TO_CARGOBOB' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(cargobob) == "number", "Arg #2 (cargobob) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(x) == "number", "Arg #4 (x) must be a number.")
	assert(type(y) == "number", "Arg #5 (y) must be a number.")
	assert(type(z) == "number", "Arg #6 (z) must be a number.")

	local result = native_call(0x4127F1D84E347769, vehicle, cargobob, p2, x, y, z)
end
natives.vehicle.attach_vehicle_to_cargobob = natives.VEHICLE.ATTACH_VEHICLE_TO_CARGOBOB

function natives.VEHICLE.ATTACH_ENTITY_TO_CARGOBOB(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3, --[[Any]] p4, --[[Any]] p5) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.ATTACH_ENTITY_TO_CARGOBOB' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")

	local result = native_call(0xA1DD82F3CCF9A01E, p0, p1, p2, p3, p4, p5)
end
natives.vehicle.attach_entity_to_cargobob = natives.VEHICLE.ATTACH_ENTITY_TO_CARGOBOB

--[[
Stops cargobob from being able to detach the attached vehicle.
]]
function natives.VEHICLE.SET_CARGOBOB_FORCE_DONT_DETACH_VEHICLE(--[[Vehicle]] cargobob, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_CARGOBOB_FORCE_DONT_DETACH_VEHICLE' due to disabled trusted mode")

	assert(type(cargobob) == "number", "Arg #1 (cargobob) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x571FEB383F629926, cargobob, toggle)
end
natives.vehicle.set_cargobob_force_dont_detach_vehicle = natives.VEHICLE.SET_CARGOBOB_FORCE_DONT_DETACH_VEHICLE

function natives.VEHICLE.SET_CARGOBOB_EXCLUDE_FROM_PICKUP_ENTITY(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_CARGOBOB_EXCLUDE_FROM_PICKUP_ENTITY' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x1F34B0626C594380, p0, p1)
end
natives.vehicle.set_cargobob_exclude_from_pickup_entity = natives.VEHICLE.SET_CARGOBOB_EXCLUDE_FROM_PICKUP_ENTITY

function natives.VEHICLE.CAN_CARGOBOB_PICK_UP_ENTITY(--[[Any]] p0, --[[Any]] p1) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.CAN_CARGOBOB_PICK_UP_ENTITY' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x2C1D8B3B19E517CC, p0, p1)
	return result:__tointeger()
end
natives.vehicle.can_cargobob_pick_up_entity = natives.VEHICLE.CAN_CARGOBOB_PICK_UP_ENTITY

--[[
Gets the position of the cargobob hook, in world coords.
]]
function natives.VEHICLE.GET_ATTACHED_PICK_UP_HOOK_POSITION(--[[Vehicle]] cargobob) -- Returns Vector3
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_ATTACHED_PICK_UP_HOOK_POSITION' due to disabled trusted mode")

	assert(type(cargobob) == "number", "Arg #1 (cargobob) must be a number.")

	local result = native_call(0xCBDB9B923CACC92D, cargobob)
	return result:__tov3()
end
natives.vehicle.get_attached_pick_up_hook_position = natives.VEHICLE.GET_ATTACHED_PICK_UP_HOOK_POSITION

--[[
Returns true only when the hook is active, will return false if the magnet is active
]]
function natives.VEHICLE.DOES_CARGOBOB_HAVE_PICK_UP_ROPE(--[[Vehicle]] cargobob) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.DOES_CARGOBOB_HAVE_PICK_UP_ROPE' due to disabled trusted mode")

	assert(type(cargobob) == "number", "Arg #1 (cargobob) must be a number.")

	local result = native_call(0x1821D91AD4B56108, cargobob)
	return result:__tointeger() ~= 0
end
natives.vehicle.does_cargobob_have_pick_up_rope = natives.VEHICLE.DOES_CARGOBOB_HAVE_PICK_UP_ROPE

--[[
Drops the Hook/Magnet on a cargobob

state
enum eCargobobHook
{
  CARGOBOB_HOOK = 0,
    CARGOBOB_MAGNET = 1,
};
]]
function natives.VEHICLE.CREATE_PICK_UP_ROPE_FOR_CARGOBOB(--[[Vehicle]] cargobob, --[[int]] state) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.CREATE_PICK_UP_ROPE_FOR_CARGOBOB' due to disabled trusted mode")

	assert(type(cargobob) == "number", "Arg #1 (cargobob) must be a number.")
	assert(type(state) == "number", "Arg #2 (state) must be a number.")

	local result = native_call(0x7BEB0C7A235F6F3B, cargobob, state)
end
natives.vehicle.create_pick_up_rope_for_cargobob = natives.VEHICLE.CREATE_PICK_UP_ROPE_FOR_CARGOBOB

--[[
Retracts the hook on the cargobob.

Note: after you retract it the natives for dropping the hook no longer work
]]
function natives.VEHICLE.REMOVE_PICK_UP_ROPE_FOR_CARGOBOB(--[[Vehicle]] cargobob) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.REMOVE_PICK_UP_ROPE_FOR_CARGOBOB' due to disabled trusted mode")

	assert(type(cargobob) == "number", "Arg #1 (cargobob) must be a number.")

	local result = native_call(0x9768CF648F54C804, cargobob)
end
natives.vehicle.remove_pick_up_rope_for_cargobob = natives.VEHICLE.REMOVE_PICK_UP_ROPE_FOR_CARGOBOB

--[[
min: 1.9f, max: 100.0f
]]
function natives.VEHICLE.SET_PICKUP_ROPE_LENGTH_FOR_CARGOBOB(--[[Vehicle]] cargobob, --[[float]] length1, --[[float]] length2, --[[BOOL]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_PICKUP_ROPE_LENGTH_FOR_CARGOBOB' due to disabled trusted mode")

	assert(type(cargobob) == "number", "Arg #1 (cargobob) must be a number.")
	assert(type(length1) == "number", "Arg #2 (length1) must be a number.")
	assert(type(length2) == "number", "Arg #3 (length2) must be a number.")
	assert(type(p3) == "boolean", "Arg #4 (p3) must be a boolean.")

	local result = native_call(0x877C1EAEAC531023, cargobob, length1, length2, p3)
end
natives.vehicle.set_pickup_rope_length_for_cargobob = natives.VEHICLE.SET_PICKUP_ROPE_LENGTH_FOR_CARGOBOB

function natives.VEHICLE.SET_PICKUP_ROPE_LENGTH_WITHOUT_CREATING_ROPE_FOR_CARGOBOB(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_PICKUP_ROPE_LENGTH_WITHOUT_CREATING_ROPE_FOR_CARGOBOB' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0xC0ED6438E6D39BA8, p0, p1, p2)
end
natives.vehicle.set_pickup_rope_length_without_creating_rope_for_cargobob = natives.VEHICLE.SET_PICKUP_ROPE_LENGTH_WITHOUT_CREATING_ROPE_FOR_CARGOBOB

function natives.VEHICLE.SET_CARGOBOB_PICKUP_ROPE_DAMPING_MULTIPLIER(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_CARGOBOB_PICKUP_ROPE_DAMPING_MULTIPLIER' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xCF1182F682F65307, p0, p1)
end
natives.vehicle.set_cargobob_pickup_rope_damping_multiplier = natives.VEHICLE.SET_CARGOBOB_PICKUP_ROPE_DAMPING_MULTIPLIER

function natives.VEHICLE.SET_CARGOBOB_PICKUP_ROPE_TYPE(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_CARGOBOB_PICKUP_ROPE_TYPE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x0D5F65A8F4EBDAB5, p0, p1)
end
natives.vehicle.set_cargobob_pickup_rope_type = natives.VEHICLE.SET_CARGOBOB_PICKUP_ROPE_TYPE

--[[
Returns true only when the magnet is active, will return false if the hook is active
]]
function natives.VEHICLE.DOES_CARGOBOB_HAVE_PICKUP_MAGNET(--[[Vehicle]] cargobob) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.DOES_CARGOBOB_HAVE_PICKUP_MAGNET' due to disabled trusted mode")

	assert(type(cargobob) == "number", "Arg #1 (cargobob) must be a number.")

	local result = native_call(0x6E08BF5B3722BAC9, cargobob)
	return result:__tointeger() ~= 0
end
natives.vehicle.does_cargobob_have_pickup_magnet = natives.VEHICLE.DOES_CARGOBOB_HAVE_PICKUP_MAGNET

--[[
Won't attract or magnetize to any helicopters or planes of course, but that's common sense.
]]
function natives.VEHICLE.SET_CARGOBOB_PICKUP_MAGNET_ACTIVE(--[[Vehicle]] cargobob, --[[BOOL]] isActive) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_CARGOBOB_PICKUP_MAGNET_ACTIVE' due to disabled trusted mode")

	assert(type(cargobob) == "number", "Arg #1 (cargobob) must be a number.")
	assert(type(isActive) == "boolean", "Arg #2 (isActive) must be a boolean.")

	local result = native_call(0x9A665550F8DA349B, cargobob, isActive)
end
natives.vehicle.set_cargobob_pickup_magnet_active = natives.VEHICLE.SET_CARGOBOB_PICKUP_MAGNET_ACTIVE

function natives.VEHICLE.SET_CARGOBOB_PICKUP_MAGNET_STRENGTH(--[[Vehicle]] cargobob, --[[float]] strength) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_CARGOBOB_PICKUP_MAGNET_STRENGTH' due to disabled trusted mode")

	assert(type(cargobob) == "number", "Arg #1 (cargobob) must be a number.")
	assert(type(strength) == "number", "Arg #2 (strength) must be a number.")

	local result = native_call(0xBCBFCD9D1DAC19E2, cargobob, strength)
end
natives.vehicle.set_cargobob_pickup_magnet_strength = natives.VEHICLE.SET_CARGOBOB_PICKUP_MAGNET_STRENGTH

function natives.VEHICLE.SET_CARGOBOB_PICKUP_MAGNET_FALLOFF(--[[Vehicle]] cargobob, --[[float]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_CARGOBOB_PICKUP_MAGNET_FALLOFF' due to disabled trusted mode")

	assert(type(cargobob) == "number", "Arg #1 (cargobob) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xA17BAD153B51547E, cargobob, p1)
end
natives.vehicle.set_cargobob_pickup_magnet_falloff = natives.VEHICLE.SET_CARGOBOB_PICKUP_MAGNET_FALLOFF

function natives.VEHICLE.SET_CARGOBOB_PICKUP_MAGNET_REDUCED_STRENGTH(--[[Vehicle]] cargobob, --[[float]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_CARGOBOB_PICKUP_MAGNET_REDUCED_STRENGTH' due to disabled trusted mode")

	assert(type(cargobob) == "number", "Arg #1 (cargobob) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x66979ACF5102FD2F, cargobob, p1)
end
natives.vehicle.set_cargobob_pickup_magnet_reduced_strength = natives.VEHICLE.SET_CARGOBOB_PICKUP_MAGNET_REDUCED_STRENGTH

function natives.VEHICLE.SET_CARGOBOB_PICKUP_MAGNET_REDUCED_FALLOFF(--[[Vehicle]] cargobob, --[[float]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_CARGOBOB_PICKUP_MAGNET_REDUCED_FALLOFF' due to disabled trusted mode")

	assert(type(cargobob) == "number", "Arg #1 (cargobob) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x6D8EAC07506291FB, cargobob, p1)
end
natives.vehicle.set_cargobob_pickup_magnet_reduced_falloff = natives.VEHICLE.SET_CARGOBOB_PICKUP_MAGNET_REDUCED_FALLOFF

function natives.VEHICLE.SET_CARGOBOB_PICKUP_MAGNET_PULL_STRENGTH(--[[Vehicle]] cargobob, --[[float]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_CARGOBOB_PICKUP_MAGNET_PULL_STRENGTH' due to disabled trusted mode")

	assert(type(cargobob) == "number", "Arg #1 (cargobob) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xED8286F71A819BAA, cargobob, p1)
end
natives.vehicle.set_cargobob_pickup_magnet_pull_strength = natives.VEHICLE.SET_CARGOBOB_PICKUP_MAGNET_PULL_STRENGTH

function natives.VEHICLE.SET_CARGOBOB_PICKUP_MAGNET_PULL_ROPE_LENGTH(--[[Vehicle]] vehicle, --[[float]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_CARGOBOB_PICKUP_MAGNET_PULL_ROPE_LENGTH' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x685D5561680D088B, vehicle, p1)
end
natives.vehicle.set_cargobob_pickup_magnet_pull_rope_length = natives.VEHICLE.SET_CARGOBOB_PICKUP_MAGNET_PULL_ROPE_LENGTH

function natives.VEHICLE.SET_CARGOBOB_PICKUP_MAGNET_SET_TARGETED_MODE(--[[Vehicle]] vehicle, --[[Vehicle]] cargobob) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_CARGOBOB_PICKUP_MAGNET_SET_TARGETED_MODE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(cargobob) == "number", "Arg #2 (cargobob) must be a number.")

	local result = native_call(0xE301BD63E9E13CF0, vehicle, cargobob)
end
natives.vehicle.set_cargobob_pickup_magnet_set_targeted_mode = natives.VEHICLE.SET_CARGOBOB_PICKUP_MAGNET_SET_TARGETED_MODE

function natives.VEHICLE.SET_CARGOBOB_PICKUP_MAGNET_SET_AMBIENT_MODE(--[[Vehicle]] vehicle, --[[BOOL]] p1, --[[BOOL]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_CARGOBOB_PICKUP_MAGNET_SET_AMBIENT_MODE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")

	local result = native_call(0x9BDDC73CC6A115D4, vehicle, p1, p2)
end
natives.vehicle.set_cargobob_pickup_magnet_set_ambient_mode = natives.VEHICLE.SET_CARGOBOB_PICKUP_MAGNET_SET_AMBIENT_MODE

function natives.VEHICLE.SET_CARGOBOB_PICKUP_MAGNET_ENSURE_PICKUP_ENTITY_UPRIGHT(--[[Vehicle]] vehicle, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_CARGOBOB_PICKUP_MAGNET_ENSURE_PICKUP_ENTITY_UPRIGHT' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0x56EB5E94318D3FB6, vehicle, p1)
end
natives.vehicle.set_cargobob_pickup_magnet_ensure_pickup_entity_upright = natives.VEHICLE.SET_CARGOBOB_PICKUP_MAGNET_ENSURE_PICKUP_ENTITY_UPRIGHT

function natives.VEHICLE.DOES_VEHICLE_HAVE_WEAPONS(--[[Vehicle]] vehicle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.DOES_VEHICLE_HAVE_WEAPONS' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x25ECB9F8017D98E0, vehicle)
	return result:__tointeger() ~= 0
end
natives.vehicle.does_vehicle_have_weapons = natives.VEHICLE.DOES_VEHICLE_HAVE_WEAPONS

--[[
SET_VEHICLE_W* (next character is either H or I)
]]
function natives.VEHICLE.SET_VEHICLE_WILL_TELL_OTHERS_TO_HURRY(--[[Vehicle]] vehicle, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_WILL_TELL_OTHERS_TO_HURRY' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0x2C4A1590ABF43E8B, vehicle, p1)
end
natives.vehicle.set_vehicle_will_tell_others_to_hurry = natives.VEHICLE.SET_VEHICLE_WILL_TELL_OTHERS_TO_HURRY

--[[
Full list of weapons by DurtyFree (Search for VEHICLE_*): https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
]]
function natives.VEHICLE.DISABLE_VEHICLE_WEAPON(--[[BOOL]] disabled, --[[Hash]] weaponHash, --[[Vehicle]] vehicle, --[[Ped]] owner) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.DISABLE_VEHICLE_WEAPON' due to disabled trusted mode")

	assert(type(disabled) == "boolean", "Arg #1 (disabled) must be a boolean.")
	assert(type(weaponHash) == "number", "Arg #2 (weaponHash) must be a number.")
	assert(type(vehicle) == "number", "Arg #3 (vehicle) must be a number.")
	assert(type(owner) == "number", "Arg #4 (owner) must be a number.")

	local result = native_call(0xF4FC6A6F67D8D856, disabled, weaponHash, vehicle, owner)
end
natives.vehicle.disable_vehicle_weapon = natives.VEHICLE.DISABLE_VEHICLE_WEAPON

--[[
Full list of weapons by DurtyFree (Search for VEHICLE_*): https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
]]
function natives.VEHICLE.IS_VEHICLE_WEAPON_DISABLED(--[[Hash]] weaponHash, --[[Vehicle]] vehicle, --[[Ped]] owner) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.IS_VEHICLE_WEAPON_DISABLED' due to disabled trusted mode")

	assert(type(weaponHash) == "number", "Arg #1 (weaponHash) must be a number.")
	assert(type(vehicle) == "number", "Arg #2 (vehicle) must be a number.")
	assert(type(owner) == "number", "Arg #3 (owner) must be a number.")

	local result = native_call(0x563B65A643ED072E, weaponHash, vehicle, owner)
	return result:__tointeger() ~= 0
end
natives.vehicle.is_vehicle_weapon_disabled = natives.VEHICLE.IS_VEHICLE_WEAPON_DISABLED

function natives.VEHICLE.SET_VEHICLE_USED_FOR_PILOT_SCHOOL(--[[Any]] p0, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_USED_FOR_PILOT_SCHOOL' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0xE05DD0E9707003A3, p0, p1)
end
natives.vehicle.set_vehicle_used_for_pilot_school = natives.VEHICLE.SET_VEHICLE_USED_FOR_PILOT_SCHOOL

function natives.VEHICLE.SET_VEHICLE_ACTIVE_FOR_PED_NAVIGATION(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_ACTIVE_FOR_PED_NAVIGATION' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x21115BCD6E44656A, vehicle, toggle)
end
natives.vehicle.set_vehicle_active_for_ped_navigation = natives.VEHICLE.SET_VEHICLE_ACTIVE_FOR_PED_NAVIGATION

--[[
Returns an int

Vehicle Classes:
0: Compacts
1: Sedans
2: SUVs
3: Coupes
4: Muscle
5: Sports Classics
6: Sports
7: Super
8: Motorcycles
9: Off-road
10: Industrial
11: Utility
12: Vans
13: Cycles
14: Boats
15: Helicopters
16: Planes
17: Service
18: Emergency
19: Military
20: Commercial
21: Trains

char buffer[128];
std::sprintf(buffer, "VEH_CLASS_%i", VEHICLE::GET_VEHICLE_CLASS(vehicle));

const char* className = HUD::_GET_LABEL_TEXT(buffer);
]]
function natives.VEHICLE.GET_VEHICLE_CLASS(--[[Vehicle]] vehicle) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_VEHICLE_CLASS' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x29439776AAA00A62, vehicle)
	return result:__tointeger()
end
natives.vehicle.get_vehicle_class = natives.VEHICLE.GET_VEHICLE_CLASS

--[[
For a full enum, see here : pastebin.com/i2GGAjY0

char buffer[128];
std::sprintf(buffer, "VEH_CLASS_%i", VEHICLE::GET_VEHICLE_CLASS_FROM_NAME (hash));

const char* className = HUD::_GET_LABEL_TEXT(buffer);

Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
]]
function natives.VEHICLE.GET_VEHICLE_CLASS_FROM_NAME(--[[Hash]] modelHash) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_VEHICLE_CLASS_FROM_NAME' due to disabled trusted mode")

	assert(type(modelHash) == "number", "Arg #1 (modelHash) must be a number.")

	local result = native_call(0xDEDF1C8BD47C2200, modelHash)
	return result:__tointeger()
end
natives.vehicle.get_vehicle_class_from_name = natives.VEHICLE.GET_VEHICLE_CLASS_FROM_NAME

function natives.VEHICLE.SET_PLAYERS_LAST_VEHICLE(--[[Vehicle]] vehicle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_PLAYERS_LAST_VEHICLE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0xBCDF8BAF56C87B6A, vehicle)
end
natives.vehicle.set_players_last_vehicle = natives.VEHICLE.SET_PLAYERS_LAST_VEHICLE

function natives.VEHICLE.SET_VEHICLE_CAN_BE_USED_BY_FLEEING_PEDS(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_CAN_BE_USED_BY_FLEEING_PEDS' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x300504B23BD3B711, vehicle, toggle)
end
natives.vehicle.set_vehicle_can_be_used_by_fleeing_peds = natives.VEHICLE.SET_VEHICLE_CAN_BE_USED_BY_FLEEING_PEDS

function natives.VEHICLE.SET_AIRCRAFT_PILOT_SKILL_NOISE_SCALAR(--[[Vehicle]] vehicle, --[[float]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_AIRCRAFT_PILOT_SKILL_NOISE_SCALAR' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xE5810AC70602F2F5, vehicle, p1)
end
natives.vehicle.set_aircraft_pilot_skill_noise_scalar = natives.VEHICLE.SET_AIRCRAFT_PILOT_SKILL_NOISE_SCALAR

--[[
Money pickups are created around cars when they explode. Only works when the vehicle model is a car. A single pickup is between 1 and 18 dollars in size. All car models seem to give the same amount of money.

youtu.be/3arlUxzHl5Y 
i.imgur.com/WrNpYFs.jpg
]]
function natives.VEHICLE.SET_VEHICLE_DROPS_MONEY_WHEN_BLOWN_UP(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_DROPS_MONEY_WHEN_BLOWN_UP' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x068F64F2470F9656, vehicle, toggle)
end
natives.vehicle.set_vehicle_drops_money_when_blown_up = natives.VEHICLE.SET_VEHICLE_DROPS_MONEY_WHEN_BLOWN_UP

function natives.VEHICLE.SET_VEHICLE_KEEP_ENGINE_ON_WHEN_ABANDONED(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_KEEP_ENGINE_ON_WHEN_ABANDONED' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xB8FBC8B1330CA9B4, vehicle, toggle)
end
natives.vehicle.set_vehicle_keep_engine_on_when_abandoned = natives.VEHICLE.SET_VEHICLE_KEEP_ENGINE_ON_WHEN_ABANDONED

--[[
Seems to copy some values in vehicle
]]
function natives.VEHICLE.SET_VEHICLE_IMPATIENCE_TIMER(--[[Vehicle]] vehicle, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_IMPATIENCE_TIMER' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x6A973569BA094650, vehicle, p1)
end
natives.vehicle.set_vehicle_impatience_timer = natives.VEHICLE.SET_VEHICLE_IMPATIENCE_TIMER

--[[
Use the "AIHandling" string found in handling.meta
]]
function natives.VEHICLE.SET_VEHICLE_HANDLING_OVERRIDE(--[[Vehicle]] vehicle, --[[Hash]] hash) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_HANDLING_OVERRIDE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(hash) == "number", "Arg #2 (hash) must be a number.")

	local result = native_call(0x10655FAB9915623D, vehicle, hash)
end
natives.vehicle.set_vehicle_handling_override = natives.VEHICLE.SET_VEHICLE_HANDLING_OVERRIDE

--[[
Max value is 32767
]]
function natives.VEHICLE.SET_VEHICLE_EXTENDED_REMOVAL_RANGE(--[[Vehicle]] vehicle, --[[int]] range) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_EXTENDED_REMOVAL_RANGE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(range) == "number", "Arg #2 (range) must be a number.")

	local result = native_call(0x79DF7E806202CE01, vehicle, range)
end
natives.vehicle.set_vehicle_extended_removal_range = natives.VEHICLE.SET_VEHICLE_EXTENDED_REMOVAL_RANGE

function natives.VEHICLE.SET_VEHICLE_STEERING_BIAS_SCALAR(--[[Any]] p0, --[[float]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_STEERING_BIAS_SCALAR' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x9007A2F21DC108D4, p0, p1)
end
natives.vehicle.set_vehicle_steering_bias_scalar = natives.VEHICLE.SET_VEHICLE_STEERING_BIAS_SCALAR

--[[
value between 0.0 and 1.0
]]
function natives.VEHICLE.SET_HELI_CONTROL_LAGGING_RATE_SCALAR(--[[Vehicle]] helicopter, --[[float]] multiplier) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_HELI_CONTROL_LAGGING_RATE_SCALAR' due to disabled trusted mode")

	assert(type(helicopter) == "number", "Arg #1 (helicopter) must be a number.")
	assert(type(multiplier) == "number", "Arg #2 (multiplier) must be a number.")

	local result = native_call(0x6E0859B530A365CC, helicopter, multiplier)
end
natives.vehicle.set_heli_control_lagging_rate_scalar = natives.VEHICLE.SET_HELI_CONTROL_LAGGING_RATE_SCALAR

--[[
Seems to be related to the metal parts, not tyres (like i was expecting lol)
]]
function natives.VEHICLE.SET_VEHICLE_FRICTION_OVERRIDE(--[[Vehicle]] vehicle, --[[float]] friction) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_FRICTION_OVERRIDE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(friction) == "number", "Arg #2 (friction) must be a number.")

	local result = native_call(0x1837AF7C627009BA, vehicle, friction)
end
natives.vehicle.set_vehicle_friction_override = natives.VEHICLE.SET_VEHICLE_FRICTION_OVERRIDE

function natives.VEHICLE.SET_VEHICLE_WHEELS_CAN_BREAK_OFF_WHEN_BLOW_UP(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_WHEELS_CAN_BREAK_OFF_WHEN_BLOW_UP' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xA37B9A517B133349, vehicle, toggle)
end
natives.vehicle.set_vehicle_wheels_can_break_off_when_blow_up = natives.VEHICLE.SET_VEHICLE_WHEELS_CAN_BREAK_OFF_WHEN_BLOW_UP

function natives.VEHICLE.ARE_PLANE_CONTROL_PANELS_INTACT(--[[Vehicle]] vehicle, --[[BOOL]] p1) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.ARE_PLANE_CONTROL_PANELS_INTACT' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0xF78F94D60248C737, vehicle, p1)
	return result:__tointeger() ~= 0
end
natives.vehicle.are_plane_control_panels_intact = natives.VEHICLE.ARE_PLANE_CONTROL_PANELS_INTACT

function natives.VEHICLE.SET_VEHICLE_CEILING_HEIGHT(--[[Vehicle]] vehicle, --[[float]] height) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_CEILING_HEIGHT' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(height) == "number", "Arg #2 (height) must be a number.")

	local result = native_call(0xA46413066687A328, vehicle, height)
end
natives.vehicle.set_vehicle_ceiling_height = natives.VEHICLE.SET_VEHICLE_CEILING_HEIGHT

function natives.VEHICLE.SET_VEHICLE_NO_EXPLOSION_DAMAGE_FROM_DRIVER(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_NO_EXPLOSION_DAMAGE_FROM_DRIVER' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x5E569EC46EC21CAE, vehicle, toggle)
end
natives.vehicle.set_vehicle_no_explosion_damage_from_driver = natives.VEHICLE.SET_VEHICLE_NO_EXPLOSION_DAMAGE_FROM_DRIVER

function natives.VEHICLE.CLEAR_VEHICLE_ROUTE_HISTORY(--[[Vehicle]] vehicle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.CLEAR_VEHICLE_ROUTE_HISTORY' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x6D6AF961B72728AE, vehicle)
end
natives.vehicle.clear_vehicle_route_history = natives.VEHICLE.CLEAR_VEHICLE_ROUTE_HISTORY

function natives.VEHICLE.DOES_VEHICLE_EXIST_WITH_DECORATOR(--[[const char*]] decorator) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.DOES_VEHICLE_EXIST_WITH_DECORATOR' due to disabled trusted mode")

	assert(type(decorator) == "string", "Arg #1 (decorator) must be a string.")

	local result = native_call(0x956B409B984D9BF7, decorator)
	return result:__tointeger() ~= 0
end
natives.vehicle.does_vehicle_exist_with_decorator = natives.VEHICLE.DOES_VEHICLE_EXIST_WITH_DECORATOR

--[[
Used to be incorrectly named SET_VEHICLE_EXCLUSIVE_DRIVER
Toggles a flag related to SET_VEHICLE_EXCLUSIVE_DRIVER, however, doesn't enable that feature (or trigger script events related to it).
]]
function natives.VEHICLE.SET_VEHICLE_AI_CAN_USE_EXCLUSIVE_SEATS(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_AI_CAN_USE_EXCLUSIVE_SEATS' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x41062318F23ED854, vehicle, toggle)
end
natives.vehicle.set_vehicle_ai_can_use_exclusive_seats = natives.VEHICLE.SET_VEHICLE_AI_CAN_USE_EXCLUSIVE_SEATS

--[[
index: 0 - 1

Used to be incorrectly named _SET_VEHICLE_EXCLUSIVE_DRIVER_2
]]
function natives.VEHICLE.SET_VEHICLE_EXCLUSIVE_DRIVER(--[[Vehicle]] vehicle, --[[Ped]] ped, --[[int]] index) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_EXCLUSIVE_DRIVER' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(ped) == "number", "Arg #2 (ped) must be a number.")
	assert(type(index) == "number", "Arg #3 (index) must be a number.")

	local result = native_call(0xB5C51B5502E85E83, vehicle, ped, index)
end
natives.vehicle.set_vehicle_exclusive_driver = natives.VEHICLE.SET_VEHICLE_EXCLUSIVE_DRIVER

function natives.VEHICLE.IS_PED_EXCLUSIVE_DRIVER_OF_VEHICLE(--[[Ped]] ped, --[[Vehicle]] vehicle, --[[int*]] outIndex) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.IS_PED_EXCLUSIVE_DRIVER_OF_VEHICLE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(vehicle) == "number", "Arg #2 (vehicle) must be a number.")
	assert(type(outIndex) == "userdata", "Arg #3 (outIndex) must be a userdata.")

	local result = native_call(0xB09D25E77C33EB3F, ped, vehicle, outIndex)
	return result:__tointeger() ~= 0
end
natives.vehicle.is_ped_exclusive_driver_of_vehicle = natives.VEHICLE.IS_PED_EXCLUSIVE_DRIVER_OF_VEHICLE

function natives.VEHICLE.DISABLE_INDIVIDUAL_PLANE_PROPELLER(--[[Vehicle]] vehicle, --[[int]] propeller) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.DISABLE_INDIVIDUAL_PLANE_PROPELLER' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(propeller) == "number", "Arg #2 (propeller) must be a number.")

	local result = native_call(0x500873A45724C863, vehicle, propeller)
end
natives.vehicle.disable_individual_plane_propeller = natives.VEHICLE.DISABLE_INDIVIDUAL_PLANE_PROPELLER

function natives.VEHICLE.SET_VEHICLE_FORCE_AFTERBURNER(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_FORCE_AFTERBURNER' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xB055A34527CB8FD7, vehicle, toggle)
end
natives.vehicle.set_vehicle_force_afterburner = natives.VEHICLE.SET_VEHICLE_FORCE_AFTERBURNER

--[[
R* used it to "remove" vehicle windows when "nightshark" had some mod, which adding some kind of armored windows. When enabled, you can't break vehicles glass. All your bullets wiil shoot through glass. You also will not able to break the glass with any other way (hitting and etc)
]]
function natives.VEHICLE.SET_DONT_PROCESS_VEHICLE_GLASS(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_DONT_PROCESS_VEHICLE_GLASS' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x1087BC8EC540DAEB, vehicle, toggle)
end
natives.vehicle.set_dont_process_vehicle_glass = natives.VEHICLE.SET_DONT_PROCESS_VEHICLE_GLASS

function natives.VEHICLE.SET_DISABLE_WANTED_CONES_RESPONSE(--[[Vehicle]] vehicle, --[[BOOL]] togle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_DISABLE_WANTED_CONES_RESPONSE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(togle) == "boolean", "Arg #2 (togle) must be a boolean.")

	local result = native_call(0x4AD280EB48B2D8E6, vehicle, togle)
end
natives.vehicle.set_disable_wanted_cones_response = natives.VEHICLE.SET_DISABLE_WANTED_CONES_RESPONSE

function natives.VEHICLE.SET_USE_DESIRED_Z_CRUISE_SPEED_FOR_LANDING(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_USE_DESIRED_Z_CRUISE_SPEED_FOR_LANDING' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xB68CFAF83A02768D, vehicle, toggle)
end
natives.vehicle.set_use_desired_z_cruise_speed_for_landing = natives.VEHICLE.SET_USE_DESIRED_Z_CRUISE_SPEED_FOR_LANDING

function natives.VEHICLE.SET_ARRIVE_DISTANCE_OVERRIDE_FOR_VEHICLE_PERSUIT_ATTACK(--[[Vehicle]] vehicle, --[[float]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_ARRIVE_DISTANCE_OVERRIDE_FOR_VEHICLE_PERSUIT_ATTACK' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x0205F5365292D2EB, vehicle, p1)
end
natives.vehicle.set_arrive_distance_override_for_vehicle_persuit_attack = natives.VEHICLE.SET_ARRIVE_DISTANCE_OVERRIDE_FOR_VEHICLE_PERSUIT_ATTACK

function natives.VEHICLE.SET_VEHICLE_READY_FOR_CLEANUP(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_READY_FOR_CLEANUP' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xCF9159024555488C, p0)
end
natives.vehicle.set_vehicle_ready_for_cleanup = natives.VEHICLE.SET_VEHICLE_READY_FOR_CLEANUP

--[[
Toggles to render distant vehicles. They may not be vehicles but images to look like vehicles.
]]
function natives.VEHICLE.SET_DISTANT_CARS_ENABLED(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_DISTANT_CARS_ENABLED' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0xF796359A959DF65D, toggle)
end
natives.vehicle.set_distant_cars_enabled = natives.VEHICLE.SET_DISTANT_CARS_ENABLED

--[[
Sets the color of the neon lights of the specified vehicle.

More info: pastebin.com/G49gqy8b
]]
function natives.VEHICLE.SET_VEHICLE_NEON_COLOUR(--[[Vehicle]] vehicle, --[[int]] r, --[[int]] g, --[[int]] b) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_NEON_COLOUR' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(r) == "number", "Arg #2 (r) must be a number.")
	assert(type(g) == "number", "Arg #3 (g) must be a number.")
	assert(type(b) == "number", "Arg #4 (b) must be a number.")

	local result = native_call(0x8E0A582209A62695, vehicle, r, g, b)
end
natives.vehicle.set_vehicle_neon_colour = natives.VEHICLE.SET_VEHICLE_NEON_COLOUR

--[[
Index references CVehicleModelColor
]]
function natives.VEHICLE.SET_VEHICLE_NEON_INDEX_COLOUR(--[[Vehicle]] vehicle, --[[int]] index) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_NEON_INDEX_COLOUR' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(index) == "number", "Arg #2 (index) must be a number.")

	local result = native_call(0xB93B2867F7B479D1, vehicle, index)
end
natives.vehicle.set_vehicle_neon_index_colour = natives.VEHICLE.SET_VEHICLE_NEON_INDEX_COLOUR

--[[
Gets the color of the neon lights of the specified vehicle.

See _SET_VEHICLE_NEON_LIGHTS_COLOUR (0x8E0A582209A62695) for more information
]]
function natives.VEHICLE.GET_VEHICLE_NEON_COLOUR(--[[Vehicle]] vehicle, --[[int*]] r, --[[int*]] g, --[[int*]] b) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_VEHICLE_NEON_COLOUR' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(r) == "userdata", "Arg #2 (r) must be a userdata.")
	assert(type(g) == "userdata", "Arg #3 (g) must be a userdata.")
	assert(type(b) == "userdata", "Arg #4 (b) must be a userdata.")

	local result = native_call(0x7619EEE8C886757F, vehicle, r, g, b)
end
natives.vehicle.get_vehicle_neon_colour = natives.VEHICLE.GET_VEHICLE_NEON_COLOUR

--[[
Sets the neon lights of the specified vehicle on/off.

Indices:
0 = Left
1 = Right
2 = Front
3 = Back
]]
function natives.VEHICLE.SET_VEHICLE_NEON_ENABLED(--[[Vehicle]] vehicle, --[[int]] index, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_NEON_ENABLED' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(index) == "number", "Arg #2 (index) must be a number.")
	assert(type(toggle) == "boolean", "Arg #3 (toggle) must be a boolean.")

	local result = native_call(0x2AA720E4287BF269, vehicle, index, toggle)
end
natives.vehicle.set_vehicle_neon_enabled = natives.VEHICLE.SET_VEHICLE_NEON_ENABLED

--[[
indices:
0 = Left
1 = Right
2 = Front
3 = Back
]]
function natives.VEHICLE.GET_VEHICLE_NEON_ENABLED(--[[Vehicle]] vehicle, --[[int]] index) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_VEHICLE_NEON_ENABLED' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(index) == "number", "Arg #2 (index) must be a number.")

	local result = native_call(0x8C4B92553E4766A5, vehicle, index)
	return result:__tointeger() ~= 0
end
natives.vehicle.get_vehicle_neon_enabled = natives.VEHICLE.GET_VEHICLE_NEON_ENABLED

function natives.VEHICLE.SET_AMBIENT_VEHICLE_NEON_ENABLED(--[[BOOL]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_AMBIENT_VEHICLE_NEON_ENABLED' due to disabled trusted mode")

	assert(type(p0) == "boolean", "Arg #1 (p0) must be a boolean.")

	local result = native_call(0x35E0654F4BAD7971, p0)
end
natives.vehicle.set_ambient_vehicle_neon_enabled = natives.VEHICLE.SET_AMBIENT_VEHICLE_NEON_ENABLED

function natives.VEHICLE.SUPPRESS_NEONS_ON_VEHICLE(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SUPPRESS_NEONS_ON_VEHICLE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x83F813570FF519DE, vehicle, toggle)
end
natives.vehicle.suppress_neons_on_vehicle = natives.VEHICLE.SUPPRESS_NEONS_ON_VEHICLE

function natives.VEHICLE.SET_DISABLE_SUPERDUMMY(--[[Vehicle]] vehicle, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_DISABLE_SUPERDUMMY' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0xB088E9A47AE6EDD5, vehicle, p1)
end
natives.vehicle.set_disable_superdummy = natives.VEHICLE.SET_DISABLE_SUPERDUMMY

function natives.VEHICLE.REQUEST_VEHICLE_DIAL(--[[Vehicle]] vehicle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.REQUEST_VEHICLE_DIAL' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0xDBA3C090E3D74690, vehicle)
end
natives.vehicle.request_vehicle_dial = natives.VEHICLE.REQUEST_VEHICLE_DIAL

--[[
Seems related to vehicle health, like the one in IV.
Max 1000, min 0.
Vehicle does not necessarily explode or become undrivable at 0.
]]
function natives.VEHICLE.GET_VEHICLE_BODY_HEALTH(--[[Vehicle]] vehicle) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_VEHICLE_BODY_HEALTH' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0xF271147EB7B40F12, vehicle)
	return result:__tonumber()
end
natives.vehicle.get_vehicle_body_health = natives.VEHICLE.GET_VEHICLE_BODY_HEALTH

--[[
p2 often set to 1000.0 in the decompiled scripts.
]]
function natives.VEHICLE.SET_VEHICLE_BODY_HEALTH(--[[Vehicle]] vehicle, --[[float]] value) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_BODY_HEALTH' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(value) == "number", "Arg #2 (value) must be a number.")

	local result = native_call(0xB77D05AC8C78AADB, vehicle, value)
end
natives.vehicle.set_vehicle_body_health = natives.VEHICLE.SET_VEHICLE_BODY_HEALTH

--[[
Outputs 2 Vector3's.
Scripts check if out2.x - out1.x > someshit.x
Could be suspension related, as in max suspension height and min suspension height, considering the natives location.
]]
function natives.VEHICLE.GET_VEHICLE_SIZE(--[[Vehicle]] vehicle, --[[Vector3*]] out1, --[[Vector3*]] out2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_VEHICLE_SIZE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(out1) == "userdata", "Arg #2 (out1) must be a userdata.")
	assert(type(out2) == "userdata", "Arg #3 (out2) must be a userdata.")

	local result = native_call(0xDF7E3EEB29642C38, vehicle, out1, out2)
end
natives.vehicle.get_vehicle_size = natives.VEHICLE.GET_VEHICLE_SIZE

--[[
Gets the height of the vehicle's suspension.
The higher the value the lower the suspension. Each 0.002 corresponds with one more level lowered.
0.000 is the stock suspension.
0.008 is Ultra Suspension.
]]
function natives.VEHICLE.GET_FAKE_SUSPENSION_LOWERING_AMOUNT(--[[Vehicle]] vehicle) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_FAKE_SUSPENSION_LOWERING_AMOUNT' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x53952FD2BAA19F17, vehicle)
	return result:__tonumber()
end
natives.vehicle.get_fake_suspension_lowering_amount = natives.VEHICLE.GET_FAKE_SUSPENSION_LOWERING_AMOUNT

function natives.VEHICLE.SET_CAR_HIGH_SPEED_BUMP_SEVERITY_MULTIPLIER(--[[float]] multiplier) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_CAR_HIGH_SPEED_BUMP_SEVERITY_MULTIPLIER' due to disabled trusted mode")

	assert(type(multiplier) == "number", "Arg #1 (multiplier) must be a number.")

	local result = native_call(0x84FD40F56075E816, multiplier)
end
natives.vehicle.set_car_high_speed_bump_severity_multiplier = natives.VEHICLE.SET_CAR_HIGH_SPEED_BUMP_SEVERITY_MULTIPLIER

function natives.VEHICLE.GET_NUMBER_OF_VEHICLE_DOORS(--[[Vehicle]] vehicle) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_NUMBER_OF_VEHICLE_DOORS' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x92922A607497B14D, vehicle)
	return result:__tointeger()
end
natives.vehicle.get_number_of_vehicle_doors = natives.VEHICLE.GET_NUMBER_OF_VEHICLE_DOORS

function natives.VEHICLE.SET_HYDRAULICS_CONTROL(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_HYDRAULICS_CONTROL' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x28B18377EB6E25F6, p0, p1)
end
natives.vehicle.set_hydraulics_control = natives.VEHICLE.SET_HYDRAULICS_CONTROL

function natives.VEHICLE.SET_CAN_ADJUST_GROUND_CLEARANCE(--[[Vehicle]] vehicle, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_CAN_ADJUST_GROUND_CLEARANCE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0xA7DCDF4DED40A8F4, vehicle, p1)
end
natives.vehicle.set_can_adjust_ground_clearance = natives.VEHICLE.SET_CAN_ADJUST_GROUND_CLEARANCE

--[[
0 min 100 max
starts at 100
Seams to have health zones
Front of vehicle when damaged goes from 100-50 and stops at 50.
Rear can be damaged from 100-0
Only tested with two cars.

any idea how this differs from the first one?

--
May return the vehicle health on a scale of 0.0 - 100.0 (needs to be confirmed)

example:

v_F = ENTITY::GET_ENTITY_MODEL(v_3);
if (((v_F == ${tanker}) || (v_F == ${armytanker})) || (v_F == ${tanker2})) {
    if (VEHICLE::_GET_VEHICLE_BODY_HEALTH_2(v_3) <= 1.0) {
        NETWORK::NETWORK_EXPLODE_VEHICLE(v_3, 1, 1, -1);
    }
}
]]
function natives.VEHICLE.GET_VEHICLE_HEALTH_PERCENTAGE(--[[Vehicle]] vehicle, --[[float]] maxEngineHealth, --[[float]] maxPetrolTankHealth, --[[float]] maxBodyHealth, --[[float]] maxMainRotorHealth, --[[float]] maxTailRotorHealth, --[[float]] maxUnkHealth) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_VEHICLE_HEALTH_PERCENTAGE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(maxEngineHealth) == "number", "Arg #2 (maxEngineHealth) must be a number.")
	assert(type(maxPetrolTankHealth) == "number", "Arg #3 (maxPetrolTankHealth) must be a number.")
	assert(type(maxBodyHealth) == "number", "Arg #4 (maxBodyHealth) must be a number.")
	assert(type(maxMainRotorHealth) == "number", "Arg #5 (maxMainRotorHealth) must be a number.")
	assert(type(maxTailRotorHealth) == "number", "Arg #6 (maxTailRotorHealth) must be a number.")
	assert(type(maxUnkHealth) == "number", "Arg #7 (maxUnkHealth) must be a number.")

	local result = native_call(0xB8EF61207C2393A9, vehicle, maxEngineHealth, maxPetrolTankHealth, maxBodyHealth, maxMainRotorHealth, maxTailRotorHealth, maxUnkHealth)
	return result:__tonumber()
end
natives.vehicle.get_vehicle_health_percentage = natives.VEHICLE.GET_VEHICLE_HEALTH_PERCENTAGE

function natives.VEHICLE.GET_VEHICLE_IS_MERCENARY(--[[Vehicle]] vehicle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_VEHICLE_IS_MERCENARY' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0xD4C4642CB7F50B5D, vehicle)
	return result:__tointeger() ~= 0
end
natives.vehicle.get_vehicle_is_mercenary = natives.VEHICLE.GET_VEHICLE_IS_MERCENARY

function natives.VEHICLE.SET_VEHICLE_BROKEN_PARTS_DONT_AFFECT_AI_HANDLING(--[[Vehicle]] vehicle, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_BROKEN_PARTS_DONT_AFFECT_AI_HANDLING' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0xC361AA040D6637A8, vehicle, p1)
end
natives.vehicle.set_vehicle_broken_parts_dont_affect_ai_handling = natives.VEHICLE.SET_VEHICLE_BROKEN_PARTS_DONT_AFFECT_AI_HANDLING

function natives.VEHICLE.SET_VEHICLE_KERS_ALLOWED(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_KERS_ALLOWED' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x99C82F8A139F3E4E, vehicle, toggle)
end
natives.vehicle.set_vehicle_kers_allowed = natives.VEHICLE.SET_VEHICLE_KERS_ALLOWED

--[[
Returns true if the vehicle has a kers boost (for instance the lectro or the vindicator)
]]
function natives.VEHICLE.GET_VEHICLE_HAS_KERS(--[[Vehicle]] vehicle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_VEHICLE_HAS_KERS' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x50634E348C8D44EF, vehicle)
	return result:__tointeger() ~= 0
end
natives.vehicle.get_vehicle_has_kers = natives.VEHICLE.GET_VEHICLE_HAS_KERS

function natives.VEHICLE.SET_PLANE_RESIST_TO_EXPLOSION(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_PLANE_RESIST_TO_EXPLOSION' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xE16142B94664DEFD, vehicle, toggle)
end
natives.vehicle.set_plane_resist_to_explosion = natives.VEHICLE.SET_PLANE_RESIST_TO_EXPLOSION

function natives.VEHICLE.SET_HELI_RESIST_TO_EXPLOSION(--[[Vehicle]] vehicle, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_HELI_RESIST_TO_EXPLOSION' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0x8074CC1886802912, vehicle, p1)
end
natives.vehicle.set_heli_resist_to_explosion = natives.VEHICLE.SET_HELI_RESIST_TO_EXPLOSION

function natives.VEHICLE.SET_DISABLE_BMX_EXTRA_TRICK_FORCES(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_DISABLE_BMX_EXTRA_TRICK_FORCES' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x26D99D5A82FD18E8, p0)
end
natives.vehicle.set_disable_bmx_extra_trick_forces = natives.VEHICLE.SET_DISABLE_BMX_EXTRA_TRICK_FORCES

--[[
Works only on vehicles that support hydraulic.
]]
function natives.VEHICLE.SET_HYDRAULIC_SUSPENSION_RAISE_FACTOR(--[[Vehicle]] vehicle, --[[int]] wheelId, --[[float]] value) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_HYDRAULIC_SUSPENSION_RAISE_FACTOR' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(wheelId) == "number", "Arg #2 (wheelId) must be a number.")
	assert(type(value) == "number", "Arg #3 (value) must be a number.")

	local result = native_call(0x84EA99C62CB3EF0C, vehicle, wheelId, value)
end
natives.vehicle.set_hydraulic_suspension_raise_factor = natives.VEHICLE.SET_HYDRAULIC_SUSPENSION_RAISE_FACTOR

function natives.VEHICLE.GET_HYDRAULIC_SUSPENSION_RAISE_FACTOR(--[[Vehicle]] vehicle, --[[int]] wheelId) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_HYDRAULIC_SUSPENSION_RAISE_FACTOR' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(wheelId) == "number", "Arg #2 (wheelId) must be a number.")

	local result = native_call(0x0BB5CBDDD0F25AE3, vehicle, wheelId)
	return result:__tonumber()
end
natives.vehicle.get_hydraulic_suspension_raise_factor = natives.VEHICLE.GET_HYDRAULIC_SUSPENSION_RAISE_FACTOR

function natives.VEHICLE.SET_CAN_USE_HYDRAULICS(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_CAN_USE_HYDRAULICS' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x1201E8A3290A3B98, p0, p1)
end
natives.vehicle.set_can_use_hydraulics = natives.VEHICLE.SET_CAN_USE_HYDRAULICS

function natives.VEHICLE.SET_HYDRAULIC_VEHICLE_STATE(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_HYDRAULIC_VEHICLE_STATE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x8EA86DF356801C7D, p0, p1)
end
natives.vehicle.set_hydraulic_vehicle_state = natives.VEHICLE.SET_HYDRAULIC_VEHICLE_STATE

--[[
Sets vehicle wheel hydraulic states transition. Known states:
0 - reset
1 - raise wheel (uses value arg, works just like _SET_VEHICLE_HYDRAULIC_WHEEL_VALUE)
2 - jump using wheel
]]
function natives.VEHICLE.SET_HYDRAULIC_WHEEL_STATE(--[[Vehicle]] vehicle, --[[int]] wheelId, --[[int]] state, --[[float]] value, --[[Any]] p4) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_HYDRAULIC_WHEEL_STATE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(wheelId) == "number", "Arg #2 (wheelId) must be a number.")
	assert(type(state) == "number", "Arg #3 (state) must be a number.")
	assert(type(value) == "number", "Arg #4 (value) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")

	local result = native_call(0xC24075310A8B9CD1, vehicle, wheelId, state, value, p4)
end
natives.vehicle.set_hydraulic_wheel_state = natives.VEHICLE.SET_HYDRAULIC_WHEEL_STATE

function natives.VEHICLE.HAS_VEHICLE_PETROLTANK_SET_ON_FIRE_BY_ENTITY(--[[Any]] p0, --[[Any]] p1) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.HAS_VEHICLE_PETROLTANK_SET_ON_FIRE_BY_ENTITY' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x5BA68A0840D546AC, p0, p1)
	return result:__tointeger()
end
natives.vehicle.has_vehicle_petroltank_set_on_fire_by_entity = natives.VEHICLE.HAS_VEHICLE_PETROLTANK_SET_ON_FIRE_BY_ENTITY

function natives.VEHICLE.CLEAR_VEHICLE_PETROLTANK_FIRE_CULPRIT(--[[Vehicle]] vehicle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.CLEAR_VEHICLE_PETROLTANK_FIRE_CULPRIT' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x4419966C9936071A, vehicle)
end
natives.vehicle.clear_vehicle_petroltank_fire_culprit = natives.VEHICLE.CLEAR_VEHICLE_PETROLTANK_FIRE_CULPRIT

function natives.VEHICLE.SET_VEHICLE_BOBBLEHEAD_VELOCITY(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_BOBBLEHEAD_VELOCITY' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0x870B8B7A766615C8, p0, p1, p2)
end
natives.vehicle.set_vehicle_bobblehead_velocity = natives.VEHICLE.SET_VEHICLE_BOBBLEHEAD_VELOCITY

function natives.VEHICLE.GET_VEHICLE_IS_DUMMY(--[[Any]] p0) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_VEHICLE_IS_DUMMY' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x8533CAFDE1F0F336, p0)
	return result:__tointeger()
end
natives.vehicle.get_vehicle_is_dummy = natives.VEHICLE.GET_VEHICLE_IS_DUMMY

function natives.VEHICLE.SET_VEHICLE_DAMAGE_SCALE(--[[Vehicle]] vehicle, --[[float]] p1) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_DAMAGE_SCALE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x4E20D2A627011E8E, vehicle, p1)
	return result:__tointeger()
end
natives.vehicle.set_vehicle_damage_scale = natives.VEHICLE.SET_VEHICLE_DAMAGE_SCALE

function natives.VEHICLE.SET_VEHICLE_WEAPON_DAMAGE_SCALE(--[[Vehicle]] vehicle, --[[float]] multiplier) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_WEAPON_DAMAGE_SCALE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(multiplier) == "number", "Arg #2 (multiplier) must be a number.")

	local result = native_call(0x45A561A9421AB6AD, vehicle, multiplier)
end
natives.vehicle.set_vehicle_weapon_damage_scale = natives.VEHICLE.SET_VEHICLE_WEAPON_DAMAGE_SCALE

function natives.VEHICLE.SET_DISABLE_DAMAGE_WITH_PICKED_UP_ENTITY(--[[Any]] p0, --[[Any]] p1) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_DISABLE_DAMAGE_WITH_PICKED_UP_ENTITY' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xD4196117AF7BB974, p0, p1)
	return result:__tointeger()
end
natives.vehicle.set_disable_damage_with_picked_up_entity = natives.VEHICLE.SET_DISABLE_DAMAGE_WITH_PICKED_UP_ENTITY

function natives.VEHICLE.SET_VEHICLE_USES_MP_PLAYER_DAMAGE_MULTIPLIER(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_USES_MP_PLAYER_DAMAGE_MULTIPLIER' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xBB2333BB87DDD87F, p0, p1)
end
natives.vehicle.set_vehicle_uses_mp_player_damage_multiplier = natives.VEHICLE.SET_VEHICLE_USES_MP_PLAYER_DAMAGE_MULTIPLIER

function natives.VEHICLE.SET_BIKE_EASY_TO_LAND(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_BIKE_EASY_TO_LAND' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x73561D4425A021A2, p0, p1)
end
natives.vehicle.set_bike_easy_to_land = natives.VEHICLE.SET_BIKE_EASY_TO_LAND

--[[
Inverts vehicle's controls. So INPUT_VEH_ACCELERATE will be INPUT_VEH_BRAKE and vise versa (same for A/D controls)
Doesn't work for planes/helis.
]]
function natives.VEHICLE.SET_INVERT_VEHICLE_CONTROLS(--[[Vehicle]] vehicle, --[[BOOL]] state) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_INVERT_VEHICLE_CONTROLS' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(state) == "boolean", "Arg #2 (state) must be a boolean.")

	local result = native_call(0x5B91B229243351A8, vehicle, state)
end
natives.vehicle.set_invert_vehicle_controls = natives.VEHICLE.SET_INVERT_VEHICLE_CONTROLS

function natives.VEHICLE.SET_SPEED_BOOST_EFFECT_DISABLED(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_SPEED_BOOST_EFFECT_DISABLED' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x7BBE7FF626A591FE, p0)
end
natives.vehicle.set_speed_boost_effect_disabled = natives.VEHICLE.SET_SPEED_BOOST_EFFECT_DISABLED

function natives.VEHICLE.SET_SLOW_DOWN_EFFECT_DISABLED(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_SLOW_DOWN_EFFECT_DISABLED' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x65B080555EA48149, p0)
end
natives.vehicle.set_slow_down_effect_disabled = natives.VEHICLE.SET_SLOW_DOWN_EFFECT_DISABLED

function natives.VEHICLE.SET_FORMATION_LEADER(--[[Vehicle]] vehicle, --[[float]] x, --[[float]] y, --[[float]] z, --[[float]] p4) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_FORMATION_LEADER' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")

	local result = native_call(0x428AD3E26C8D9EB0, vehicle, x, y, z, p4)
end
natives.vehicle.set_formation_leader = natives.VEHICLE.SET_FORMATION_LEADER

--[[
Resets the effect of SET_FORMATION_LEADER
]]
function natives.VEHICLE.RESET_FORMATION_LEADER() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.RESET_FORMATION_LEADER' due to disabled trusted mode")

	local result = native_call(0xE2F53F172B45EDE1)
end
natives.vehicle.reset_formation_leader = natives.VEHICLE.RESET_FORMATION_LEADER

function natives.VEHICLE.GET_IS_BOAT_CAPSIZED(--[[Vehicle]] vehicle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_IS_BOAT_CAPSIZED' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0xBA91D045575699AD, vehicle)
	return result:__tointeger() ~= 0
end
natives.vehicle.get_is_boat_capsized = natives.VEHICLE.GET_IS_BOAT_CAPSIZED

function natives.VEHICLE.SET_ALLOW_RAMMING_SOOP_OR_RAMP(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_ALLOW_RAMMING_SOOP_OR_RAMP' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x80E3357FDEF45C21, p0, p1)
end
natives.vehicle.set_allow_ramming_soop_or_ramp = natives.VEHICLE.SET_ALLOW_RAMMING_SOOP_OR_RAMP

function natives.VEHICLE.SET_SCRIPT_RAMP_IMPULSE_SCALE(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_SCRIPT_RAMP_IMPULSE_SCALE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xEFC13B1CE30D755D, p0, p1)
end
natives.vehicle.set_script_ramp_impulse_scale = natives.VEHICLE.SET_SCRIPT_RAMP_IMPULSE_SCALE

--[[
doorId: see SET_VEHICLE_DOOR_SHUT
]]
function natives.VEHICLE.GET_IS_DOOR_VALID(--[[Vehicle]] vehicle, --[[int]] doorId) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_IS_DOOR_VALID' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(doorId) == "number", "Arg #2 (doorId) must be a number.")

	local result = native_call(0x645F4B6E8499F632, vehicle, doorId)
	return result:__tointeger() ~= 0
end
natives.vehicle.get_is_door_valid = natives.VEHICLE.GET_IS_DOOR_VALID

function natives.VEHICLE.SET_SCRIPT_ROCKET_BOOST_RECHARGE_TIME(--[[Vehicle]] vehicle, --[[float]] seconds) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_SCRIPT_ROCKET_BOOST_RECHARGE_TIME' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(seconds) == "number", "Arg #2 (seconds) must be a number.")

	local result = native_call(0xE00F2AB100B76E89, vehicle, seconds)
end
natives.vehicle.set_script_rocket_boost_recharge_time = natives.VEHICLE.SET_SCRIPT_ROCKET_BOOST_RECHARGE_TIME

function natives.VEHICLE.GET_HAS_ROCKET_BOOST(--[[Vehicle]] vehicle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_HAS_ROCKET_BOOST' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x36D782F68B309BDA, vehicle)
	return result:__tointeger() ~= 0
end
natives.vehicle.get_has_rocket_boost = natives.VEHICLE.GET_HAS_ROCKET_BOOST

function natives.VEHICLE.IS_ROCKET_BOOST_ACTIVE(--[[Vehicle]] vehicle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.IS_ROCKET_BOOST_ACTIVE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x3D34E80EED4AE3BE, vehicle)
	return result:__tointeger() ~= 0
end
natives.vehicle.is_rocket_boost_active = natives.VEHICLE.IS_ROCKET_BOOST_ACTIVE

function natives.VEHICLE.SET_ROCKET_BOOST_ACTIVE(--[[Vehicle]] vehicle, --[[BOOL]] active) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_ROCKET_BOOST_ACTIVE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(active) == "boolean", "Arg #2 (active) must be a boolean.")

	local result = native_call(0x81E1552E35DC3839, vehicle, active)
end
natives.vehicle.set_rocket_boost_active = natives.VEHICLE.SET_ROCKET_BOOST_ACTIVE

function natives.VEHICLE.GET_HAS_RETRACTABLE_WHEELS(--[[Vehicle]] vehicle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_HAS_RETRACTABLE_WHEELS' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0xDCA174A42133F08C, vehicle)
	return result:__tointeger() ~= 0
end
natives.vehicle.get_has_retractable_wheels = natives.VEHICLE.GET_HAS_RETRACTABLE_WHEELS

function natives.VEHICLE.GET_IS_WHEELS_RETRACTED(--[[Vehicle]] vehicle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_IS_WHEELS_RETRACTED' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x1DA0DA9CB3F0C8BF, vehicle)
	return result:__tointeger() ~= 0
end
natives.vehicle.get_is_wheels_retracted = natives.VEHICLE.GET_IS_WHEELS_RETRACTED

function natives.VEHICLE.SET_WHEELS_EXTENDED_INSTANTLY(--[[Vehicle]] vehicle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_WHEELS_EXTENDED_INSTANTLY' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0xF660602546D27BA8, vehicle)
end
natives.vehicle.set_wheels_extended_instantly = natives.VEHICLE.SET_WHEELS_EXTENDED_INSTANTLY

function natives.VEHICLE.SET_WHEELS_RETRACTED_INSTANTLY(--[[Vehicle]] vehicle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_WHEELS_RETRACTED_INSTANTLY' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x5335BE58C083E74E, vehicle)
end
natives.vehicle.set_wheels_retracted_instantly = natives.VEHICLE.SET_WHEELS_RETRACTED_INSTANTLY

--[[
Returns true if the vehicle has the FLAG_JUMPING_CAR flag set.
]]
function natives.VEHICLE.GET_CAR_HAS_JUMP(--[[Vehicle]] vehicle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_CAR_HAS_JUMP' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x9078C0C5EF8C19E9, vehicle)
	return result:__tointeger() ~= 0
end
natives.vehicle.get_car_has_jump = natives.VEHICLE.GET_CAR_HAS_JUMP

--[[
Allows vehicles with the FLAG_JUMPING_CAR flag to jump higher (i.e. Ruiner 2000).
]]
function natives.VEHICLE.SET_USE_HIGHER_CAR_JUMP(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_USE_HIGHER_CAR_JUMP' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xF06A16CA55D138D8, vehicle, toggle)
end
natives.vehicle.set_use_higher_car_jump = natives.VEHICLE.SET_USE_HIGHER_CAR_JUMP

function natives.VEHICLE.SET_CLEAR_FREEZE_WAITING_ON_COLLISION_ONCE_PLAYER_ENTERS(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_CLEAR_FREEZE_WAITING_ON_COLLISION_ONCE_PLAYER_ENTERS' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xB2E0C0D6922D31F2, vehicle, toggle)
end
natives.vehicle.set_clear_freeze_waiting_on_collision_once_player_enters = natives.VEHICLE.SET_CLEAR_FREEZE_WAITING_ON_COLLISION_ONCE_PLAYER_ENTERS

--[[
Set vehicle's primary mounted weapon 2 ammo. For example, use it on APC.
For example, you can "remove" any vehicle weapon from any vehicle.
ammoAmount -1 = infinite ammo (default value for any spawned vehicle tho)
]]
function natives.VEHICLE.SET_VEHICLE_WEAPON_RESTRICTED_AMMO(--[[Vehicle]] vehicle, --[[int]] weaponIndex, --[[int]] capacity) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_WEAPON_RESTRICTED_AMMO' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(weaponIndex) == "number", "Arg #2 (weaponIndex) must be a number.")
	assert(type(capacity) == "number", "Arg #3 (capacity) must be a number.")

	local result = native_call(0x44CD1F493DB2A0A6, vehicle, weaponIndex, capacity)
end
natives.vehicle.set_vehicle_weapon_restricted_ammo = natives.VEHICLE.SET_VEHICLE_WEAPON_RESTRICTED_AMMO

function natives.VEHICLE.GET_VEHICLE_WEAPON_RESTRICTED_AMMO(--[[Vehicle]] vehicle, --[[int]] weaponIndex) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_VEHICLE_WEAPON_RESTRICTED_AMMO' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(weaponIndex) == "number", "Arg #2 (weaponIndex) must be a number.")

	local result = native_call(0x8181CE2F25CB9BB7, vehicle, weaponIndex)
	return result:__tointeger()
end
natives.vehicle.get_vehicle_weapon_restricted_ammo = natives.VEHICLE.GET_VEHICLE_WEAPON_RESTRICTED_AMMO

function natives.VEHICLE.GET_VEHICLE_HAS_PARACHUTE(--[[Vehicle]] vehicle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_VEHICLE_HAS_PARACHUTE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0xBC9CFF381338CB4F, vehicle)
	return result:__tointeger() ~= 0
end
natives.vehicle.get_vehicle_has_parachute = natives.VEHICLE.GET_VEHICLE_HAS_PARACHUTE

function natives.VEHICLE.GET_VEHICLE_CAN_DEPLOY_PARACHUTE(--[[Vehicle]] vehicle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_VEHICLE_CAN_DEPLOY_PARACHUTE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0xA916396DF4154EE3, vehicle)
	return result:__tointeger() ~= 0
end
natives.vehicle.get_vehicle_can_deploy_parachute = natives.VEHICLE.GET_VEHICLE_CAN_DEPLOY_PARACHUTE

function natives.VEHICLE.VEHICLE_START_PARACHUTING(--[[Vehicle]] vehicle, --[[BOOL]] active) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.VEHICLE_START_PARACHUTING' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(active) == "boolean", "Arg #2 (active) must be a boolean.")

	local result = native_call(0x0BFFB028B3DD0A97, vehicle, active)
end
natives.vehicle.vehicle_start_parachuting = natives.VEHICLE.VEHICLE_START_PARACHUTING

function natives.VEHICLE.IS_VEHICLE_PARACHUTE_DEPLOYED(--[[Vehicle]] vehicle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.IS_VEHICLE_PARACHUTE_DEPLOYED' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x3DE51E9C80B116CF, vehicle)
	return result:__tointeger() ~= 0
end
natives.vehicle.is_vehicle_parachute_deployed = natives.VEHICLE.IS_VEHICLE_PARACHUTE_DEPLOYED

function natives.VEHICLE.VEHICLE_SET_RAMP_AND_RAMMING_CARS_TAKE_DAMAGE(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.VEHICLE_SET_RAMP_AND_RAMMING_CARS_TAKE_DAMAGE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x28D034A93FE31BF5, vehicle, toggle)
end
natives.vehicle.vehicle_set_ramp_and_ramming_cars_take_damage = natives.VEHICLE.VEHICLE_SET_RAMP_AND_RAMMING_CARS_TAKE_DAMAGE

function natives.VEHICLE.VEHICLE_SET_ENABLE_RAMP_CAR_SIDE_IMPULSE(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.VEHICLE_SET_ENABLE_RAMP_CAR_SIDE_IMPULSE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x1BBAC99C0BC53656, p0, p1)
end
natives.vehicle.vehicle_set_enable_ramp_car_side_impulse = natives.VEHICLE.VEHICLE_SET_ENABLE_RAMP_CAR_SIDE_IMPULSE

function natives.VEHICLE.VEHICLE_SET_ENABLE_NORMALISE_RAMP_CAR_VERTICAL_VELOCTIY(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.VEHICLE_SET_ENABLE_NORMALISE_RAMP_CAR_VERTICAL_VELOCTIY' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x756AE6E962168A04, p0, p1)
end
natives.vehicle.vehicle_set_enable_normalise_ramp_car_vertical_veloctiy = natives.VEHICLE.VEHICLE_SET_ENABLE_NORMALISE_RAMP_CAR_VERTICAL_VELOCTIY

function natives.VEHICLE.VEHICLE_SET_JET_WASH_FORCE_ENABLED(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.VEHICLE_SET_JET_WASH_FORCE_ENABLED' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x9D30687C57BAA0BB, p0)
end
natives.vehicle.vehicle_set_jet_wash_force_enabled = natives.VEHICLE.VEHICLE_SET_JET_WASH_FORCE_ENABLED

function natives.VEHICLE.SET_VEHICLE_WEAPON_CAN_TARGET_OBJECTS(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_WEAPON_CAN_TARGET_OBJECTS' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x86B4B6212CB8B627, p0, p1)
end
natives.vehicle.set_vehicle_weapon_can_target_objects = natives.VEHICLE.SET_VEHICLE_WEAPON_CAN_TARGET_OBJECTS

function natives.VEHICLE.SET_VEHICLE_USE_BOOST_BUTTON_FOR_WHEEL_RETRACT(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_USE_BOOST_BUTTON_FOR_WHEEL_RETRACT' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x41290B40FA63E6DA, p0)
end
natives.vehicle.set_vehicle_use_boost_button_for_wheel_retract = natives.VEHICLE.SET_VEHICLE_USE_BOOST_BUTTON_FOR_WHEEL_RETRACT

--[[
Parachute models:
- sr_prop_specraces_para_s_01
- imp_prop_impexp_para_s (SecuroServ; Default)
Plus, many more props can be used as vehicle parachutes, like umbrellas (prop_beach_parasol_03), and unlike SET_PLAYER_PARACHUTE_MODEL_OVERRIDE, you won't get stuck mid-air when using an umbrella.
]]
function natives.VEHICLE.VEHICLE_SET_PARACHUTE_MODEL_OVERRIDE(--[[Vehicle]] vehicle, --[[Hash]] modelHash) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.VEHICLE_SET_PARACHUTE_MODEL_OVERRIDE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(modelHash) == "number", "Arg #2 (modelHash) must be a number.")

	local result = native_call(0x4D610C6B56031351, vehicle, modelHash)
end
natives.vehicle.vehicle_set_parachute_model_override = natives.VEHICLE.VEHICLE_SET_PARACHUTE_MODEL_OVERRIDE

--[[
Variations available for the generic parachute (sr_prop_specraces_para_s_01):
- 0: Rainbow
- 1: Red
- 2: White, blue, yellow
- 3: Black, red, white
- 4: Red, white, blue
- 5: Blue
- 6: Black
- 7: Black, yellow
]]
function natives.VEHICLE.VEHICLE_SET_PARACHUTE_MODEL_TINT_INDEX(--[[Vehicle]] vehicle, --[[int]] textureVariation) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.VEHICLE_SET_PARACHUTE_MODEL_TINT_INDEX' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(textureVariation) == "number", "Arg #2 (textureVariation) must be a number.")

	local result = native_call(0xA74AD2439468C883, vehicle, textureVariation)
end
natives.vehicle.vehicle_set_parachute_model_tint_index = natives.VEHICLE.VEHICLE_SET_PARACHUTE_MODEL_TINT_INDEX

function natives.VEHICLE.VEHICLE_SET_OVERRIDE_EXTENABLE_SIDE_RATIO(--[[Any]] p0, --[[Any]] p1) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.VEHICLE_SET_OVERRIDE_EXTENABLE_SIDE_RATIO' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x0419B167EE128F33, p0, p1)
	return result:__tointeger()
end
natives.vehicle.vehicle_set_override_extenable_side_ratio = natives.VEHICLE.VEHICLE_SET_OVERRIDE_EXTENABLE_SIDE_RATIO

function natives.VEHICLE.VEHICLE_SET_EXTENABLE_SIDE_TARGET_RATIO(--[[Any]] p0, --[[Any]] p1) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.VEHICLE_SET_EXTENABLE_SIDE_TARGET_RATIO' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xF3B0E0AED097A3F5, p0, p1)
	return result:__tointeger()
end
natives.vehicle.vehicle_set_extenable_side_target_ratio = natives.VEHICLE.VEHICLE_SET_EXTENABLE_SIDE_TARGET_RATIO

function natives.VEHICLE.VEHICLE_SET_OVERRIDE_SIDE_RATIO(--[[Any]] p0, --[[Any]] p1) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.VEHICLE_SET_OVERRIDE_SIDE_RATIO' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xD3E51C0AB8C26EEE, p0, p1)
	return result:__tointeger()
end
natives.vehicle.vehicle_set_override_side_ratio = natives.VEHICLE.VEHICLE_SET_OVERRIDE_SIDE_RATIO

function natives.VEHICLE.GET_ALL_VEHICLES(--[[Any*]] vehsStruct) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_ALL_VEHICLES' due to disabled trusted mode")

	assert(type(vehsStruct) == "userdata", "Arg #1 (vehsStruct) must be a userdata.")

	local result = native_call(0x9B8E1BF04B51F2E8, vehsStruct)
	return result:__tointeger()
end
natives.vehicle.get_all_vehicles = natives.VEHICLE.GET_ALL_VEHICLES

function natives.VEHICLE.SET_CARGOBOB_EXTA_PICKUP_RANGE(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_CARGOBOB_EXTA_PICKUP_RANGE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x72BECCF4B829522E, p0, p1)
end
natives.vehicle.set_cargobob_exta_pickup_range = natives.VEHICLE.SET_CARGOBOB_EXTA_PICKUP_RANGE

function natives.VEHICLE.SET_OVERRIDE_VEHICLE_DOOR_TORQUE(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_OVERRIDE_VEHICLE_DOOR_TORQUE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0x66E3AAFACE2D1EB8, p0, p1, p2)
end
natives.vehicle.set_override_vehicle_door_torque = natives.VEHICLE.SET_OVERRIDE_VEHICLE_DOOR_TORQUE

function natives.VEHICLE.SET_WHEELIE_ENABLED(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_WHEELIE_ENABLED' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x1312DDD8385AEE4E, p0, p1)
end
natives.vehicle.set_wheelie_enabled = natives.VEHICLE.SET_WHEELIE_ENABLED

function natives.VEHICLE.SET_DISABLE_HELI_EXPLODE_FROM_BODY_DAMAGE(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_DISABLE_HELI_EXPLODE_FROM_BODY_DAMAGE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xEDBC8405B3895CC9, p0, p1)
end
natives.vehicle.set_disable_heli_explode_from_body_damage = natives.VEHICLE.SET_DISABLE_HELI_EXPLODE_FROM_BODY_DAMAGE

function natives.VEHICLE.SET_DISABLE_EXPLODE_FROM_BODY_DAMAGE_ON_COLLISION(--[[Vehicle]] vehicle, --[[float]] value) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_DISABLE_EXPLODE_FROM_BODY_DAMAGE_ON_COLLISION' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(value) == "number", "Arg #2 (value) must be a number.")

	local result = native_call(0x26E13D440E7F6064, vehicle, value)
end
natives.vehicle.set_disable_explode_from_body_damage_on_collision = natives.VEHICLE.SET_DISABLE_EXPLODE_FROM_BODY_DAMAGE_ON_COLLISION

function natives.VEHICLE.SET_TRAILER_ATTACHMENT_ENABLED(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_TRAILER_ATTACHMENT_ENABLED' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x2FA2494B47FDD009, p0, p1)
end
natives.vehicle.set_trailer_attachment_enabled = natives.VEHICLE.SET_TRAILER_ATTACHMENT_ENABLED

function natives.VEHICLE.SET_ROCKET_BOOST_FILL(--[[Vehicle]] vehicle, --[[float]] percentage) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_ROCKET_BOOST_FILL' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(percentage) == "number", "Arg #2 (percentage) must be a number.")

	local result = native_call(0xFEB2DDED3509562E, vehicle, percentage)
end
natives.vehicle.set_rocket_boost_fill = natives.VEHICLE.SET_ROCKET_BOOST_FILL

--[[
Set state to true to extend the wings, false to retract them.
]]
function natives.VEHICLE.SET_GLIDER_ACTIVE(--[[Vehicle]] vehicle, --[[BOOL]] state) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_GLIDER_ACTIVE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(state) == "boolean", "Arg #2 (state) must be a boolean.")

	local result = native_call(0x544996C0081ABDEB, vehicle, state)
end
natives.vehicle.set_glider_active = natives.VEHICLE.SET_GLIDER_ACTIVE

function natives.VEHICLE.SET_SHOULD_RESET_TURRET_IN_SCRIPTED_CAMERAS(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_SHOULD_RESET_TURRET_IN_SCRIPTED_CAMERAS' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x78CEEE41F49F421F, p0, p1)
end
natives.vehicle.set_should_reset_turret_in_scripted_cameras = natives.VEHICLE.SET_SHOULD_RESET_TURRET_IN_SCRIPTED_CAMERAS

function natives.VEHICLE.SET_VEHICLE_DISABLE_COLLISION_UPON_CREATION(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_DISABLE_COLLISION_UPON_CREATION' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xAF60E6A2936F982A, p0, p1)
end
natives.vehicle.set_vehicle_disable_collision_upon_creation = natives.VEHICLE.SET_VEHICLE_DISABLE_COLLISION_UPON_CREATION

function natives.VEHICLE.SET_GROUND_EFFECT_REDUCES_DRAG(--[[Any]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_GROUND_EFFECT_REDUCES_DRAG' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x430A7631A84C9BE7, p0)
end
natives.vehicle.set_ground_effect_reduces_drag = natives.VEHICLE.SET_GROUND_EFFECT_REDUCES_DRAG

--[[
Disables collision for this vehicle (maybe it also supports other entities, not sure).
Only world/building/fixed world objects will have their collisions disabled, props, peds, or any other entity still collides with the vehicle.
Example: https://streamable.com/6n45d5
Not sure if there is a native (and if so, which one) that resets the collisions.
]]
function natives.VEHICLE.SET_DISABLE_MAP_COLLISION(--[[Vehicle]] vehicle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_DISABLE_MAP_COLLISION' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x75627043C6AA90AD, vehicle)
end
natives.vehicle.set_disable_map_collision = natives.VEHICLE.SET_DISABLE_MAP_COLLISION

function natives.VEHICLE.SET_DISABLE_PED_STAND_ON_TOP(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_DISABLE_PED_STAND_ON_TOP' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x8235F1BEAD557629, vehicle, toggle)
end
natives.vehicle.set_disable_ped_stand_on_top = natives.VEHICLE.SET_DISABLE_PED_STAND_ON_TOP

function natives.VEHICLE.SET_VEHICLE_DAMAGE_SCALES(--[[Vehicle]] vehicle, --[[Any]] p1, --[[Any]] p2, --[[Any]] p3, --[[Any]] p4) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_DAMAGE_SCALES' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")

	local result = native_call(0x9640E30A7F395E4B, vehicle, p1, p2, p3, p4)
end
natives.vehicle.set_vehicle_damage_scales = natives.VEHICLE.SET_VEHICLE_DAMAGE_SCALES

function natives.VEHICLE.SET_PLANE_SECTION_DAMAGE_SCALE(--[[Any]] p0, --[[Any]] p1, --[[Any]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_PLANE_SECTION_DAMAGE_SCALE' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0x0BBB9A7A8FFE931B, p0, p1, p2)
end
natives.vehicle.set_plane_section_damage_scale = natives.VEHICLE.SET_PLANE_SECTION_DAMAGE_SCALE

--[[
Stops the cargobob from being able to attach any vehicle
]]
function natives.VEHICLE.SET_HELI_CAN_PICKUP_ENTITY_THAT_HAS_PICK_UP_DISABLED(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_HELI_CAN_PICKUP_ENTITY_THAT_HAS_PICK_UP_DISABLED' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x94A68DA412C4007D, vehicle, toggle)
end
natives.vehicle.set_heli_can_pickup_entity_that_has_pick_up_disabled = natives.VEHICLE.SET_HELI_CAN_PICKUP_ENTITY_THAT_HAS_PICK_UP_DISABLED

--[[
Sets the amount of bombs that this vehicle has. As far as I know, this does _not_ impact vehicle weapons or the ammo of those weapons in any way, it is just a way to keep track of the amount of bombs in a specific plane. 
]]
function natives.VEHICLE.SET_VEHICLE_BOMB_AMMO(--[[Vehicle]] vehicle, --[[int]] bombCount) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_BOMB_AMMO' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(bombCount) == "number", "Arg #2 (bombCount) must be a number.")

	local result = native_call(0xF4B2ED59DEB5D774, vehicle, bombCount)
end
natives.vehicle.set_vehicle_bomb_ammo = natives.VEHICLE.SET_VEHICLE_BOMB_AMMO

--[[
Gets the amount of bombs that this vehicle has. As far as I know, this does _not_ impact vehicle weapons or the ammo of those weapons in any way, it is just a way to keep track of the amount of bombs in a specific plane. 
]]
function natives.VEHICLE.GET_VEHICLE_BOMB_AMMO(--[[Vehicle]] vehicle) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_VEHICLE_BOMB_AMMO' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0xEA12BD130D7569A1, vehicle)
	return result:__tointeger()
end
natives.vehicle.get_vehicle_bomb_ammo = natives.VEHICLE.GET_VEHICLE_BOMB_AMMO

--[[
Similar to 0xF4B2ED59DEB5D774, this sets the amount of countermeasures that are present on this vehicle.
Use 0xF846AA63DF56B804 to get the current amount.
]]
function natives.VEHICLE.SET_VEHICLE_COUNTERMEASURE_AMMO(--[[Vehicle]] vehicle, --[[int]] counterMeasureCount) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_COUNTERMEASURE_AMMO' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(counterMeasureCount) == "number", "Arg #2 (counterMeasureCount) must be a number.")

	local result = native_call(0x9BDA23BF666F0855, vehicle, counterMeasureCount)
end
natives.vehicle.set_vehicle_countermeasure_ammo = natives.VEHICLE.SET_VEHICLE_COUNTERMEASURE_AMMO

--[[
Similar to `0xEA12BD130D7569A1`, this gets the amount of countermeasures that are present on this vehicle.
Use 0x9BDA23BF666F0855 to set the current amount.
]]
function natives.VEHICLE.GET_VEHICLE_COUNTERMEASURE_AMMO(--[[Vehicle]] vehicle) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_VEHICLE_COUNTERMEASURE_AMMO' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0xF846AA63DF56B804, vehicle)
	return result:__tointeger()
end
natives.vehicle.get_vehicle_countermeasure_ammo = natives.VEHICLE.GET_VEHICLE_COUNTERMEASURE_AMMO

function natives.VEHICLE.SET_HELI_COMBAT_OFFSET(--[[Vehicle]] vehicle, --[[float]] x, --[[float]] y, --[[float]] z) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_HELI_COMBAT_OFFSET' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")

	local result = native_call(0x0A3F820A9A9A9AC5, vehicle, x, y, z)
end
natives.vehicle.set_heli_combat_offset = natives.VEHICLE.SET_HELI_COMBAT_OFFSET

--[[
Used in decompiled scripts in combination with _GET_VEHICLE_SUSPENSION_BOUNDS
p7 is usually 2
p8 is usually 1
]]
function natives.VEHICLE.GET_CAN_VEHICLE_BE_PLACED_HERE(--[[Vehicle]] vehicle, --[[float]] x, --[[float]] y, --[[float]] z, --[[float]] rotX, --[[float]] rotY, --[[float]] rotZ, --[[int]] p7, --[[Any]] p8) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_CAN_VEHICLE_BE_PLACED_HERE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")
	assert(type(rotX) == "number", "Arg #5 (rotX) must be a number.")
	assert(type(rotY) == "number", "Arg #6 (rotY) must be a number.")
	assert(type(rotZ) == "number", "Arg #7 (rotZ) must be a number.")
	assert(type(p7) == "number", "Arg #8 (p7) must be a number.")
	assert(type(p8) == "number", "Arg #9 (p8) must be a number.")

	local result = native_call(0x51F30DB60626A20E, vehicle, x, y, z, rotX, rotY, rotZ, p7, p8)
	return result:__tointeger() ~= 0
end
natives.vehicle.get_can_vehicle_be_placed_here = natives.VEHICLE.GET_CAN_VEHICLE_BE_PLACED_HERE

--[[
Sets a flag on heli and another vehicle type.
]]
function natives.VEHICLE.SET_DISABLE_AUTOMATIC_CRASH_TASK(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_DISABLE_AUTOMATIC_CRASH_TASK' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x97841634EF7DF1D6, vehicle, toggle)
end
natives.vehicle.set_disable_automatic_crash_task = natives.VEHICLE.SET_DISABLE_AUTOMATIC_CRASH_TASK

function natives.VEHICLE.SET_SPECIAL_FLIGHT_MODE_RATIO(--[[Vehicle]] vehicle, --[[float]] ratio) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_SPECIAL_FLIGHT_MODE_RATIO' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(ratio) == "number", "Arg #2 (ratio) must be a number.")

	local result = native_call(0xD138FA15C9776837, vehicle, ratio)
end
natives.vehicle.set_special_flight_mode_ratio = natives.VEHICLE.SET_SPECIAL_FLIGHT_MODE_RATIO

--[[
According to decompiled scripts this should work with the `deluxo` and `oppressor2` vehicles.
I've only seen this work for `deluxo` though, can't figure out what it's supposed to do on `oppressor2`.

For the deluxo:
- Set `state` to `0.0`: Fully transform to a 'road' vehicle (non-hover mode).
- Set `state` to `1.0`: Fully transform to a 'flying' vehicle (hover mode).

If you set it to something like 0.5, then something [weird happens](https://streamable.com/p6wmr), you end up in some 50% hover mode, 50% not hover mode.

This doesn't need to be called every tick, just once and the vehicle will transform to that state at the usual transform speed. It'll just stop transforming when it reaches the state you provided.

Once this native is used then players will just be able to hit the vehicle transform key to toggle the transformation cycle; it won't block users from using the key.
]]
function natives.VEHICLE.SET_SPECIAL_FLIGHT_MODE_TARGET_RATIO(--[[Vehicle]] vehicle, --[[float]] percentage) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_SPECIAL_FLIGHT_MODE_TARGET_RATIO' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(percentage) == "number", "Arg #2 (percentage) must be a number.")

	local result = native_call(0x438B3D7CA026FE91, vehicle, percentage)
end
natives.vehicle.set_special_flight_mode_target_ratio = natives.VEHICLE.SET_SPECIAL_FLIGHT_MODE_TARGET_RATIO

--[[
It will override the ability to transform deluxo. For oppressor it will work just like 0x2D55FE374D5FDB91
]]
function natives.VEHICLE.SET_SPECIAL_FLIGHT_MODE_ALLOWED(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_SPECIAL_FLIGHT_MODE_ALLOWED' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xF1211889DF15A763, vehicle, toggle)
end
natives.vehicle.set_special_flight_mode_allowed = natives.VEHICLE.SET_SPECIAL_FLIGHT_MODE_ALLOWED

--[[
Disables "wings" for some flying vehicles. Works only for oppressor _2_ and deluxo.
For deluxo it just immediately removes vehicle's "wings" and you will be not able to fly up.
For oppressor 2 it will remove wings right after you land. And you will not able to fly up anymore too.
But for opressor 2 you still can fly if you somehow get back in the air.
]]
function natives.VEHICLE.SET_DISABLE_HOVER_MODE_FLIGHT(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_DISABLE_HOVER_MODE_FLIGHT' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x2D55FE374D5FDB91, vehicle, toggle)
end
natives.vehicle.set_disable_hover_mode_flight = natives.VEHICLE.SET_DISABLE_HOVER_MODE_FLIGHT

--[[
Checks if Chernobog's stabilizers are deployed or not.
These are the metal supports that allow it to fire.
This native only applies to the Chernobog.
]]
function natives.VEHICLE.GET_OUTRIGGERS_DEPLOYED(--[[Vehicle]] vehicle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_OUTRIGGERS_DEPLOYED' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x3A9128352EAC9E85, vehicle)
	return result:__tointeger() ~= 0
end
natives.vehicle.get_outriggers_deployed = natives.VEHICLE.GET_OUTRIGGERS_DEPLOYED

--[[
Native is significantly more complicated than simply generating a random vector & length.
The 'point' is either 400.0 or 250.0 units away from the Ped's current coordinates; and paths into functions like rage::grcViewport___IsSphereVisible
]]
function natives.VEHICLE.FIND_SPAWN_COORDINATES_FOR_HELI(--[[Ped]] ped) -- Returns Vector3
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.FIND_SPAWN_COORDINATES_FOR_HELI' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x8DC9675797123522, ped)
	return result:__tov3()
end
natives.vehicle.find_spawn_coordinates_for_heli = natives.VEHICLE.FIND_SPAWN_COORDINATES_FOR_HELI

--[[
Only used with the "akula" and "annihilator2" in the decompiled native scripts.
]]
function natives.VEHICLE.SET_DEPLOY_FOLDING_WINGS(--[[Vehicle]] vehicle, --[[BOOL]] deploy, --[[BOOL]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_DEPLOY_FOLDING_WINGS' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(deploy) == "boolean", "Arg #2 (deploy) must be a boolean.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")

	local result = native_call(0xB251E0B33E58B424, vehicle, deploy, p2)
end
natives.vehicle.set_deploy_folding_wings = natives.VEHICLE.SET_DEPLOY_FOLDING_WINGS

--[[
Only used with the "akula" and "annihilator2" in the decompiled native scripts.
]]
function natives.VEHICLE.ARE_FOLDING_WINGS_DEPLOYED(--[[Vehicle]] vehicle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.ARE_FOLDING_WINGS_DEPLOYED' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0xAEF12960FA943792, vehicle)
	return result:__tointeger() ~= 0
end
natives.vehicle.are_folding_wings_deployed = natives.VEHICLE.ARE_FOLDING_WINGS_DEPLOYED

function natives.VEHICLE.SET_DIP_STRAIGHT_DOWN_WHEN_CRASHING_PLANE(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_DIP_STRAIGHT_DOWN_WHEN_CRASHING_PLANE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xAA653AE61924B0A0, vehicle, toggle)
end
natives.vehicle.set_dip_straight_down_when_crashing_plane = natives.VEHICLE.SET_DIP_STRAIGHT_DOWN_WHEN_CRASHING_PLANE

--[[
Toggles specific flag on turret
]]
function natives.VEHICLE.SET_TURRET_HIDDEN(--[[Vehicle]] vehicle, --[[int]] index, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_TURRET_HIDDEN' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(index) == "number", "Arg #2 (index) must be a number.")
	assert(type(toggle) == "boolean", "Arg #3 (toggle) must be a boolean.")

	local result = native_call(0xC60060EB0D8AC7B1, vehicle, index, toggle)
end
natives.vehicle.set_turret_hidden = natives.VEHICLE.SET_TURRET_HIDDEN

function natives.VEHICLE.SET_HOVER_MODE_WING_RATIO(--[[Vehicle]] vehicle, --[[float]] ratio) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_HOVER_MODE_WING_RATIO' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(ratio) == "number", "Arg #2 (ratio) must be a number.")

	local result = native_call(0x70A252F60A3E036B, vehicle, ratio)
end
natives.vehicle.set_hover_mode_wing_ratio = natives.VEHICLE.SET_HOVER_MODE_WING_RATIO

--[[
Disables turret movement when called in a loop. You can still fire and aim. You cannot shoot backwards though.
]]
function natives.VEHICLE.SET_DISABLE_TURRET_MOVEMENT(--[[Vehicle]] vehicle, --[[int]] turretId) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_DISABLE_TURRET_MOVEMENT' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(turretId) == "number", "Arg #2 (turretId) must be a number.")

	local result = native_call(0xE615BB7A7752C76A, vehicle, turretId)
end
natives.vehicle.set_disable_turret_movement = natives.VEHICLE.SET_DISABLE_TURRET_MOVEMENT

function natives.VEHICLE.SET_FORCE_FIX_LINK_MATRICES(--[[Vehicle]] vehicle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_FORCE_FIX_LINK_MATRICES' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x887FA38787DE8C72, vehicle)
end
natives.vehicle.set_force_fix_link_matrices = natives.VEHICLE.SET_FORCE_FIX_LINK_MATRICES

function natives.VEHICLE.SET_TRANSFORM_RATE_FOR_ANIMATION(--[[Vehicle]] vehicle, --[[float]] value) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_TRANSFORM_RATE_FOR_ANIMATION' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(value) == "number", "Arg #2 (value) must be a number.")

	local result = native_call(0x498218259FB7C72D, vehicle, value)
end
natives.vehicle.set_transform_rate_for_animation = natives.VEHICLE.SET_TRANSFORM_RATE_FOR_ANIMATION

function natives.VEHICLE.SET_TRANSFORM_TO_SUBMARINE_USES_ALTERNATE_INPUT(--[[Vehicle]] vehicle, --[[BOOL]] value) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_TRANSFORM_TO_SUBMARINE_USES_ALTERNATE_INPUT' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(value) == "boolean", "Arg #2 (value) must be a boolean.")

	local result = native_call(0x41B9FB92EDED32A6, vehicle, value)
end
natives.vehicle.set_transform_to_submarine_uses_alternate_input = natives.VEHICLE.SET_TRANSFORM_TO_SUBMARINE_USES_ALTERNATE_INPUT

--[[
Does nothing. It's a nullsub.
]]
function natives.VEHICLE.SET_VEHICLE_COMBAT_MODE(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_COMBAT_MODE' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x36DE109527A2C0C4, toggle)
end
natives.vehicle.set_vehicle_combat_mode = natives.VEHICLE.SET_VEHICLE_COMBAT_MODE

--[[
Does nothing. It's a nullsub.
]]
function natives.VEHICLE.SET_VEHICLE_DETONATION_MODE(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_DETONATION_MODE' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x82E0AC411E41A5B4, toggle)
end
natives.vehicle.set_vehicle_detonation_mode = natives.VEHICLE.SET_VEHICLE_DETONATION_MODE

--[[
Does nothing. It's a nullsub.
]]
function natives.VEHICLE.SET_VEHICLE_SHUNT_ON_STICK(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_VEHICLE_SHUNT_ON_STICK' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x99A05839C46CE316, toggle)
end
natives.vehicle.set_vehicle_shunt_on_stick = natives.VEHICLE.SET_VEHICLE_SHUNT_ON_STICK

function natives.VEHICLE.GET_IS_VEHICLE_SHUNTING(--[[Vehicle]] vehicle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_IS_VEHICLE_SHUNTING' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0xA2459F72C14E2E8D, vehicle)
	return result:__tointeger() ~= 0
end
natives.vehicle.get_is_vehicle_shunting = natives.VEHICLE.GET_IS_VEHICLE_SHUNTING

function natives.VEHICLE.GET_HAS_VEHICLE_BEEN_HIT_BY_SHUNT(--[[Vehicle]] vehicle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_HAS_VEHICLE_BEEN_HIT_BY_SHUNT' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0xE8718FAF591FD224, vehicle)
	return result:__tointeger() ~= 0
end
natives.vehicle.get_has_vehicle_been_hit_by_shunt = natives.VEHICLE.GET_HAS_VEHICLE_BEEN_HIT_BY_SHUNT

--[[
Returns last vehicle that was rammed by the given vehicle using the shunt boost.
]]
function natives.VEHICLE.GET_LAST_SHUNT_VEHICLE(--[[Vehicle]] vehicle) -- Returns Vehicle
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_LAST_SHUNT_VEHICLE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x04F2FA6E234162F7, vehicle)
	return result:__tointeger()
end
natives.vehicle.get_last_shunt_vehicle = natives.VEHICLE.GET_LAST_SHUNT_VEHICLE

function natives.VEHICLE.SET_DISABLE_VEHICLE_EXPLOSIONS_DAMAGE(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_DISABLE_VEHICLE_EXPLOSIONS_DAMAGE' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x143921E45EC44D62, toggle)
end
natives.vehicle.set_disable_vehicle_explosions_damage = natives.VEHICLE.SET_DISABLE_VEHICLE_EXPLOSIONS_DAMAGE

function natives.VEHICLE.SET_OVERRIDE_NITROUS_LEVEL(--[[Vehicle]] vehicle, --[[BOOL]] toggle, --[[float]] level, --[[float]] power, --[[float]] rechargeTime, --[[BOOL]] disableSound) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_OVERRIDE_NITROUS_LEVEL' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")
	assert(type(level) == "number", "Arg #3 (level) must be a number.")
	assert(type(power) == "number", "Arg #4 (power) must be a number.")
	assert(type(rechargeTime) == "number", "Arg #5 (rechargeTime) must be a number.")
	assert(type(disableSound) == "boolean", "Arg #6 (disableSound) must be a boolean.")

	local result = native_call(0xC8E9B6B71B8E660D, vehicle, toggle, level, power, rechargeTime, disableSound)
end
natives.vehicle.set_override_nitrous_level = natives.VEHICLE.SET_OVERRIDE_NITROUS_LEVEL

function natives.VEHICLE.SET_INCREASE_WHEEL_CRUSH_DAMAGE(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_INCREASE_WHEEL_CRUSH_DAMAGE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x2970EAA18FD5E42F, vehicle, toggle)
end
natives.vehicle.set_increase_wheel_crush_damage = natives.VEHICLE.SET_INCREASE_WHEEL_CRUSH_DAMAGE

--[[
Sets some global vehicle related bool
]]
function natives.VEHICLE.SET_DISABLE_WEAPON_BLADE_FORCES(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_DISABLE_WEAPON_BLADE_FORCES' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x211E95CE9903940C, toggle)
end
natives.vehicle.set_disable_weapon_blade_forces = natives.VEHICLE.SET_DISABLE_WEAPON_BLADE_FORCES

function natives.VEHICLE.SET_USE_DOUBLE_CLICK_FOR_CAR_JUMP(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_USE_DOUBLE_CLICK_FOR_CAR_JUMP' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x5BBCF35BF6E456F7, toggle)
end
natives.vehicle.set_use_double_click_for_car_jump = natives.VEHICLE.SET_USE_DOUBLE_CLICK_FOR_CAR_JUMP

function natives.VEHICLE.GET_DOES_VEHICLE_HAVE_TOMBSTONE(--[[Vehicle]] vehicle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_DOES_VEHICLE_HAVE_TOMBSTONE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x71AFB258CCED3A27, vehicle)
	return result:__tointeger() ~= 0
end
natives.vehicle.get_does_vehicle_have_tombstone = natives.VEHICLE.GET_DOES_VEHICLE_HAVE_TOMBSTONE

--[[
Disables detachable bumber from domnator4, dominator5, dominator6, see https://gfycat.com/SecondUnluckyGosling
]]
function natives.VEHICLE.HIDE_TOMBSTONE(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.HIDE_TOMBSTONE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xAE71FB656C600587, vehicle, toggle)
end
natives.vehicle.hide_tombstone = natives.VEHICLE.HIDE_TOMBSTONE

--[[
Returns whether this vehicle is currently disabled by an EMP mine.
]]
function natives.VEHICLE.GET_IS_VEHICLE_DISABLED_BY_EMP(--[[Vehicle]] vehicle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_IS_VEHICLE_DISABLED_BY_EMP' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x0506ED94363AD905, vehicle)
	return result:__tointeger() ~= 0
end
natives.vehicle.get_is_vehicle_disabled_by_emp = natives.VEHICLE.GET_IS_VEHICLE_DISABLED_BY_EMP

function natives.VEHICLE.SET_DISABLE_RETRACTING_WEAPON_BLADES(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_DISABLE_RETRACTING_WEAPON_BLADES' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0x8F0D5BA1C2CC91D7, toggle)
end
natives.vehicle.set_disable_retracting_weapon_blades = natives.VEHICLE.SET_DISABLE_RETRACTING_WEAPON_BLADES

--[[
Usable wheels:
0: wheel_lf
1: wheel_rf
2: wheel_lm1
3: wheel_rm1
4: wheel_lr
5: wheel_rr
]]
function natives.VEHICLE.GET_TYRE_HEALTH(--[[Vehicle]] vehicle, --[[int]] wheelIndex) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_TYRE_HEALTH' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(wheelIndex) == "number", "Arg #2 (wheelIndex) must be a number.")

	local result = native_call(0x55EAB010FAEE9380, vehicle, wheelIndex)
	return result:__tonumber()
end
natives.vehicle.get_tyre_health = natives.VEHICLE.GET_TYRE_HEALTH

--[[
_SET_TYRE_WEAR_MULTIPLIER must be active, otherwise values set to <1000.0f will default to 350.0f

Usable wheels:
0: wheel_lf
1: wheel_rf
2: wheel_lm1
3: wheel_rm1
4: wheel_lr
5: wheel_rr
]]
function natives.VEHICLE.SET_TYRE_HEALTH(--[[Vehicle]] vehicle, --[[int]] wheelIndex, --[[float]] health) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_TYRE_HEALTH' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(wheelIndex) == "number", "Arg #2 (wheelIndex) must be a number.")
	assert(type(health) == "number", "Arg #3 (health) must be a number.")

	local result = native_call(0x74C68EF97645E79D, vehicle, wheelIndex, health)
end
natives.vehicle.set_tyre_health = natives.VEHICLE.SET_TYRE_HEALTH

--[[
Returns the multiplier value from _SET_TYRE_WEAR_MULTIPLIER

Usable wheels:
0: wheel_lf
1: wheel_rf
2: wheel_lm1
3: wheel_rm1
4: wheel_lr
5: wheel_rr
]]
function natives.VEHICLE.GET_TYRE_WEAR_RATE(--[[Vehicle]] vehicle, --[[int]] wheelIndex) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_TYRE_WEAR_RATE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(wheelIndex) == "number", "Arg #2 (wheelIndex) must be a number.")

	local result = native_call(0x6E387895952F4F71, vehicle, wheelIndex)
	return result:__tonumber()
end
natives.vehicle.get_tyre_wear_rate = natives.VEHICLE.GET_TYRE_WEAR_RATE

--[[
Needs to be run for tire wear to work. Multiplier affects the downforce and how fast the tires will wear out, higher values essentially make the vehicle slower on straights and its tires will wear down quicker when cornering. Value must be >0f.
Default value in Rockstar's Open Wheel Race JSON's ("owrtws", "owrtwm", "owrtwh") is 1.0

Usable wheels:
0: wheel_lf
1: wheel_rf
2: wheel_lm1
3: wheel_rm1
4: wheel_lr
5: wheel_rr
]]
function natives.VEHICLE.SET_TYRE_WEAR_RATE(--[[Vehicle]] vehicle, --[[int]] wheelIndex, --[[float]] multiplier) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_TYRE_WEAR_RATE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(wheelIndex) == "number", "Arg #2 (wheelIndex) must be a number.")
	assert(type(multiplier) == "number", "Arg #3 (multiplier) must be a number.")

	local result = native_call(0x01894E2EDE923CA2, vehicle, wheelIndex, multiplier)
end
natives.vehicle.set_tyre_wear_rate = natives.VEHICLE.SET_TYRE_WEAR_RATE

--[[
Controls how fast the tires wear out.

Default values from Rockstar's Open Wheel Race JSON's:
"owrtss" (Soft): 2.2
"owrtsm" (Medium): 1.7
"owrtsh" (Hard): 1.2

Usable wheels:
0: wheel_lf
1: wheel_rf
2: wheel_lm1
3: wheel_rm1
4: wheel_lr
5: wheel_rr
]]
function natives.VEHICLE.SET_TYRE_WEAR_RATE_SCALE(--[[Vehicle]] vehicle, --[[int]] wheelIndex, --[[float]] multiplier) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_TYRE_WEAR_RATE_SCALE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(wheelIndex) == "number", "Arg #2 (wheelIndex) must be a number.")
	assert(type(multiplier) == "number", "Arg #3 (multiplier) must be a number.")

	local result = native_call(0x392183BB9EA57697, vehicle, wheelIndex, multiplier)
end
natives.vehicle.set_tyre_wear_rate_scale = natives.VEHICLE.SET_TYRE_WEAR_RATE_SCALE

--[[
Controls how much traction the wheel loses.

Default values from Rockstar's Open Wheel Race JSON's:
"owrtds" (Soft): 0.05
"owrtdm" (Medium): 0.45
"owrtdh" (Hard): 0.8

Usable wheels:
0: wheel_lf
1: wheel_rf
2: wheel_lm1
3: wheel_rm1
4: wheel_lr
5: wheel_rr
]]
function natives.VEHICLE.SET_TYRE_MAXIMUM_GRIP_DIFFERENCE_DUE_TO_WEAR_RATE(--[[Vehicle]] vehicle, --[[int]] wheelIndex, --[[float]] multiplier) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_TYRE_MAXIMUM_GRIP_DIFFERENCE_DUE_TO_WEAR_RATE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(wheelIndex) == "number", "Arg #2 (wheelIndex) must be a number.")
	assert(type(multiplier) == "number", "Arg #3 (multiplier) must be a number.")

	local result = native_call(0xC970D0E0FC31D768, vehicle, wheelIndex, multiplier)
end
natives.vehicle.set_tyre_maximum_grip_difference_due_to_wear_rate = natives.VEHICLE.SET_TYRE_MAXIMUM_GRIP_DIFFERENCE_DUE_TO_WEAR_RATE

function natives.VEHICLE.SET_AIRCRAFT_IGNORE_HIGHTMAP_OPTIMISATION(--[[Vehicle]] vehicle, --[[int]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_AIRCRAFT_IGNORE_HIGHTMAP_OPTIMISATION' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xF8B49F5BA7F850E7, vehicle, p1)
end
natives.vehicle.set_aircraft_ignore_hightmap_optimisation = natives.VEHICLE.SET_AIRCRAFT_IGNORE_HIGHTMAP_OPTIMISATION

--[[
Lowers the vehicle's stance. Only works for vehicles that support this feature.
]]
function natives.VEHICLE.SET_REDUCED_SUSPENSION_FORCE(--[[Vehicle]] vehicle, --[[BOOL]] enable) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_REDUCED_SUSPENSION_FORCE' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(enable) == "boolean", "Arg #2 (enable) must be a boolean.")

	local result = native_call(0x3A375167F5782A65, vehicle, enable)
end
natives.vehicle.set_reduced_suspension_force = natives.VEHICLE.SET_REDUCED_SUSPENSION_FORCE

function natives.VEHICLE.SET_DRIFT_TYRES(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_DRIFT_TYRES' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x5AC79C98C5C17F05, vehicle, toggle)
end
natives.vehicle.set_drift_tyres = natives.VEHICLE.SET_DRIFT_TYRES

function natives.VEHICLE.GET_DRIFT_TYRES_SET(--[[Vehicle]] vehicle) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.GET_DRIFT_TYRES_SET' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")

	local result = native_call(0x2F5A72430E78C8D3, vehicle)
	return result:__tointeger() ~= 0
end
natives.vehicle.get_drift_tyres_set = natives.VEHICLE.GET_DRIFT_TYRES_SET

--[[
Implemented only for trains.
]]
function natives.VEHICLE.NETWORK_USE_HIGH_PRECISION_TRAIN_BLENDING(--[[Vehicle]] vehicle, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.NETWORK_USE_HIGH_PRECISION_TRAIN_BLENDING' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xEC0C1D4922AF9754, vehicle, toggle)
end
natives.vehicle.network_use_high_precision_train_blending = natives.VEHICLE.NETWORK_USE_HIGH_PRECISION_TRAIN_BLENDING

--[[
Only used in R* Script fm_content_cargo
]]
function natives.VEHICLE.SET_CHECK_FOR_ENOUGH_ROOM_FOR_PED(--[[Vehicle]] vehicle, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'VEHICLE.SET_CHECK_FOR_ENOUGH_ROOM_FOR_PED' due to disabled trusted mode")

	assert(type(vehicle) == "number", "Arg #1 (vehicle) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0xEF9D388F8D377F44, vehicle, p1)
end
natives.vehicle.set_check_for_enough_room_for_ped = natives.VEHICLE.SET_CHECK_FOR_ENOUGH_ROOM_FOR_PED


natives.WATER = {}
natives.water = {}

--[[
This function set height to the value of z-axis of the water surface.

This function works with sea and lake. However it does not work with shallow rivers (e.g. raton canyon will return -100000.0f)

note: seems to return true when you are in water
]]
function natives.WATER.GET_WATER_HEIGHT(--[[float]] x, --[[float]] y, --[[float]] z, --[[float*]] height) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WATER.GET_WATER_HEIGHT' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(height) == "userdata", "Arg #4 (height) must be a userdata.")

	local result = native_call(0xF6829842C06AE524, x, y, z, height)
	return result:__tointeger() ~= 0
end
natives.water.get_water_height = natives.WATER.GET_WATER_HEIGHT

function natives.WATER.GET_WATER_HEIGHT_NO_WAVES(--[[float]] x, --[[float]] y, --[[float]] z, --[[float*]] height) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WATER.GET_WATER_HEIGHT_NO_WAVES' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(height) == "userdata", "Arg #4 (height) must be a userdata.")

	local result = native_call(0x8EE6B53CE13A9794, x, y, z, height)
	return result:__tointeger() ~= 0
end
natives.water.get_water_height_no_waves = natives.WATER.GET_WATER_HEIGHT_NO_WAVES

function natives.WATER.TEST_PROBE_AGAINST_WATER(--[[float]] x1, --[[float]] y1, --[[float]] z1, --[[float]] x2, --[[float]] y2, --[[float]] z2, --[[Vector3*]] result) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WATER.TEST_PROBE_AGAINST_WATER' due to disabled trusted mode")

	assert(type(x1) == "number", "Arg #1 (x1) must be a number.")
	assert(type(y1) == "number", "Arg #2 (y1) must be a number.")
	assert(type(z1) == "number", "Arg #3 (z1) must be a number.")
	assert(type(x2) == "number", "Arg #4 (x2) must be a number.")
	assert(type(y2) == "number", "Arg #5 (y2) must be a number.")
	assert(type(z2) == "number", "Arg #6 (z2) must be a number.")
	assert(type(result) == "userdata", "Arg #7 (result) must be a userdata.")

	local result = native_call(0xFFA5D878809819DB, x1, y1, z1, x2, y2, z2, result)
	return result:__tointeger() ~= 0
end
natives.water.test_probe_against_water = natives.WATER.TEST_PROBE_AGAINST_WATER

--[[
enum eScriptWaterTestResult
{
	SCRIPT_WATER_TEST_RESULT_NONE,
	SCRIPT_WATER_TEST_RESULT_WATER,
	SCRIPT_WATER_TEST_RESULT_BLOCKED,
};
]]
function natives.WATER.TEST_PROBE_AGAINST_ALL_WATER(--[[float]] x1, --[[float]] y1, --[[float]] z1, --[[float]] x2, --[[float]] y2, --[[float]] z2, --[[int]] flags, --[[float*]] waterHeight) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WATER.TEST_PROBE_AGAINST_ALL_WATER' due to disabled trusted mode")

	assert(type(x1) == "number", "Arg #1 (x1) must be a number.")
	assert(type(y1) == "number", "Arg #2 (y1) must be a number.")
	assert(type(z1) == "number", "Arg #3 (z1) must be a number.")
	assert(type(x2) == "number", "Arg #4 (x2) must be a number.")
	assert(type(y2) == "number", "Arg #5 (y2) must be a number.")
	assert(type(z2) == "number", "Arg #6 (z2) must be a number.")
	assert(type(flags) == "number", "Arg #7 (flags) must be a number.")
	assert(type(waterHeight) == "userdata", "Arg #8 (waterHeight) must be a userdata.")

	local result = native_call(0x8974647ED222EA5F, x1, y1, z1, x2, y2, z2, flags, waterHeight)
	return result:__tointeger()
end
natives.water.test_probe_against_all_water = natives.WATER.TEST_PROBE_AGAINST_ALL_WATER

--[[
See TEST_PROBE_AGAINST_ALL_WATER.
]]
function natives.WATER.TEST_VERTICAL_PROBE_AGAINST_ALL_WATER(--[[float]] x, --[[float]] y, --[[float]] z, --[[int]] flags, --[[float*]] waterHeight) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WATER.TEST_VERTICAL_PROBE_AGAINST_ALL_WATER' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(flags) == "number", "Arg #4 (flags) must be a number.")
	assert(type(waterHeight) == "userdata", "Arg #5 (waterHeight) must be a userdata.")

	local result = native_call(0x2B3451FA1E3142E2, x, y, z, flags, waterHeight)
	return result:__tointeger()
end
natives.water.test_vertical_probe_against_all_water = natives.WATER.TEST_VERTICAL_PROBE_AGAINST_ALL_WATER

--[[
Sets the water height for a given position and radius.

]]
function natives.WATER.MODIFY_WATER(--[[float]] x, --[[float]] y, --[[float]] radius, --[[float]] height) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WATER.MODIFY_WATER' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(radius) == "number", "Arg #3 (radius) must be a number.")
	assert(type(height) == "number", "Arg #4 (height) must be a number.")

	local result = native_call(0xC443FD757C3BA637, x, y, radius, height)
end
natives.water.modify_water = natives.WATER.MODIFY_WATER

function natives.WATER.ADD_EXTRA_CALMING_QUAD(--[[float]] xLow, --[[float]] yLow, --[[float]] xHigh, --[[float]] yHigh, --[[float]] height) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WATER.ADD_EXTRA_CALMING_QUAD' due to disabled trusted mode")

	assert(type(xLow) == "number", "Arg #1 (xLow) must be a number.")
	assert(type(yLow) == "number", "Arg #2 (yLow) must be a number.")
	assert(type(xHigh) == "number", "Arg #3 (xHigh) must be a number.")
	assert(type(yHigh) == "number", "Arg #4 (yHigh) must be a number.")
	assert(type(height) == "number", "Arg #5 (height) must be a number.")

	local result = native_call(0xFDBF4CDBC07E1706, xLow, yLow, xHigh, yHigh, height)
	return result:__tointeger()
end
natives.water.add_extra_calming_quad = natives.WATER.ADD_EXTRA_CALMING_QUAD

--[[
p0 is the handle returned from _0xFDBF4CDBC07E1706
]]
function natives.WATER.REMOVE_EXTRA_CALMING_QUAD(--[[int]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WATER.REMOVE_EXTRA_CALMING_QUAD' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xB1252E3E59A82AAF, p0)
end
natives.water.remove_extra_calming_quad = natives.WATER.REMOVE_EXTRA_CALMING_QUAD

--[[
Sets a value that determines how aggressive the ocean waves will be. Values of 2.0 or more make for very aggressive waves like you see during a thunderstorm.

Works only ~200 meters around the player.
]]
function natives.WATER.SET_DEEP_OCEAN_SCALER(--[[float]] intensity) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WATER.SET_DEEP_OCEAN_SCALER' due to disabled trusted mode")

	assert(type(intensity) == "number", "Arg #1 (intensity) must be a number.")

	local result = native_call(0xB96B00E976BE977F, intensity)
end
natives.water.set_deep_ocean_scaler = natives.WATER.SET_DEEP_OCEAN_SCALER

--[[
Gets the aggressiveness factor of the ocean waves.
]]
function natives.WATER.GET_DEEP_OCEAN_SCALER() -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WATER.GET_DEEP_OCEAN_SCALER' due to disabled trusted mode")

	local result = native_call(0x2B2A2CC86778B619)
	return result:__tonumber()
end
natives.water.get_deep_ocean_scaler = natives.WATER.GET_DEEP_OCEAN_SCALER

function natives.WATER.SET_CALMED_WAVE_HEIGHT_SCALER(--[[float]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WATER.SET_CALMED_WAVE_HEIGHT_SCALER' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0x547237AA71AB44DE, p0)
end
natives.water.set_calmed_wave_height_scaler = natives.WATER.SET_CALMED_WAVE_HEIGHT_SCALER

--[[
Sets the waves intensity back to original (1.0 in most cases).
]]
function natives.WATER.RESET_DEEP_OCEAN_SCALER() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WATER.RESET_DEEP_OCEAN_SCALER' due to disabled trusted mode")

	local result = native_call(0x5E5E99285AE812DB)
end
natives.water.reset_deep_ocean_scaler = natives.WATER.RESET_DEEP_OCEAN_SCALER


natives.WEAPON = {}
natives.weapon = {}

--[[
Enables laser sight on any weapon.

It doesn't work. Neither on tick nor OnKeyDown
]]
function natives.WEAPON.ENABLE_LASER_SIGHT_RENDERING(--[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.ENABLE_LASER_SIGHT_RENDERING' due to disabled trusted mode")

	assert(type(toggle) == "boolean", "Arg #1 (toggle) must be a boolean.")

	local result = native_call(0xC8B46D7727D864AA, toggle)
end
natives.weapon.enable_laser_sight_rendering = natives.WEAPON.ENABLE_LASER_SIGHT_RENDERING

function natives.WEAPON.GET_WEAPON_COMPONENT_TYPE_MODEL(--[[Hash]] componentHash) -- Returns Hash
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.GET_WEAPON_COMPONENT_TYPE_MODEL' due to disabled trusted mode")

	assert(type(componentHash) == "number", "Arg #1 (componentHash) must be a number.")

	local result = native_call(0x0DB57B41EC1DB083, componentHash)
	return result:__tointeger()
end
natives.weapon.get_weapon_component_type_model = natives.WEAPON.GET_WEAPON_COMPONENT_TYPE_MODEL

--[[
Returns the model of any weapon.

Can also take an ammo hash?
sub_6663a(&l_115B, WEAPON::GET_WEAPONTYPE_MODEL(${ammo_rpg}));
]]
function natives.WEAPON.GET_WEAPONTYPE_MODEL(--[[Hash]] weaponHash) -- Returns Hash
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.GET_WEAPONTYPE_MODEL' due to disabled trusted mode")

	assert(type(weaponHash) == "number", "Arg #1 (weaponHash) must be a number.")

	local result = native_call(0xF46CDC33180FDA94, weaponHash)
	return result:__tointeger()
end
natives.weapon.get_weapontype_model = natives.WEAPON.GET_WEAPONTYPE_MODEL

function natives.WEAPON.GET_WEAPONTYPE_SLOT(--[[Hash]] weaponHash) -- Returns Hash
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.GET_WEAPONTYPE_SLOT' due to disabled trusted mode")

	assert(type(weaponHash) == "number", "Arg #1 (weaponHash) must be a number.")

	local result = native_call(0x4215460B9B8B7FA0, weaponHash)
	return result:__tointeger()
end
natives.weapon.get_weapontype_slot = natives.WEAPON.GET_WEAPONTYPE_SLOT

function natives.WEAPON.GET_WEAPONTYPE_GROUP(--[[Hash]] weaponHash) -- Returns Hash
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.GET_WEAPONTYPE_GROUP' due to disabled trusted mode")

	assert(type(weaponHash) == "number", "Arg #1 (weaponHash) must be a number.")

	local result = native_call(0xC3287EE3050FB74C, weaponHash)
	return result:__tointeger()
end
natives.weapon.get_weapontype_group = natives.WEAPON.GET_WEAPONTYPE_GROUP

--[[
Returns the amount of extra components the specified component has.
Returns -1 if the component isn't of type CWeaponComponentVariantModel.
]]
function natives.WEAPON.GET_WEAPON_COMPONENT_VARIANT_EXTRA_COUNT(--[[Hash]] componentHash) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.GET_WEAPON_COMPONENT_VARIANT_EXTRA_COUNT' due to disabled trusted mode")

	assert(type(componentHash) == "number", "Arg #1 (componentHash) must be a number.")

	local result = native_call(0x6558AC7C17BFEF58, componentHash)
	return result:__tointeger()
end
natives.weapon.get_weapon_component_variant_extra_count = natives.WEAPON.GET_WEAPON_COMPONENT_VARIANT_EXTRA_COUNT

--[[
Returns the model hash of the extra component at specified index.
]]
function natives.WEAPON.GET_WEAPON_COMPONENT_VARIANT_EXTRA_MODEL(--[[Hash]] componentHash, --[[int]] extraComponentIndex) -- Returns Hash
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.GET_WEAPON_COMPONENT_VARIANT_EXTRA_MODEL' due to disabled trusted mode")

	assert(type(componentHash) == "number", "Arg #1 (componentHash) must be a number.")
	assert(type(extraComponentIndex) == "number", "Arg #2 (extraComponentIndex) must be a number.")

	local result = native_call(0x4D1CB8DC40208A17, componentHash, extraComponentIndex)
	return result:__tointeger()
end
natives.weapon.get_weapon_component_variant_extra_model = natives.WEAPON.GET_WEAPON_COMPONENT_VARIANT_EXTRA_MODEL

--[[
Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
]]
function natives.WEAPON.SET_CURRENT_PED_WEAPON(--[[Ped]] ped, --[[Hash]] weaponHash, --[[BOOL]] bForceInHand) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.SET_CURRENT_PED_WEAPON' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(weaponHash) == "number", "Arg #2 (weaponHash) must be a number.")
	assert(type(bForceInHand) == "boolean", "Arg #3 (bForceInHand) must be a boolean.")

	local result = native_call(0xADF692B254977C0C, ped, weaponHash, bForceInHand)
end
natives.weapon.set_current_ped_weapon = natives.WEAPON.SET_CURRENT_PED_WEAPON

--[[
The return value seems to indicate returns true if the hash of the weapon object weapon equals the weapon hash.
p2 seems to be 1 most of the time.





p2 is not implemented

disassembly said that?

]]
function natives.WEAPON.GET_CURRENT_PED_WEAPON(--[[Ped]] ped, --[[Hash*]] weaponHash, --[[BOOL]] p2) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.GET_CURRENT_PED_WEAPON' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(weaponHash) == "userdata", "Arg #2 (weaponHash) must be a userdata.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")

	local result = native_call(0x3A87E44BB9A01D54, ped, weaponHash, p2)
	return result:__tointeger() ~= 0
end
natives.weapon.get_current_ped_weapon = natives.WEAPON.GET_CURRENT_PED_WEAPON

function natives.WEAPON.GET_CURRENT_PED_WEAPON_ENTITY_INDEX(--[[Ped]] ped, --[[Any]] p1) -- Returns Entity
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.GET_CURRENT_PED_WEAPON_ENTITY_INDEX' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x3B390A939AF0B5FC, ped, p1)
	return result:__tointeger()
end
natives.weapon.get_current_ped_weapon_entity_index = natives.WEAPON.GET_CURRENT_PED_WEAPON_ENTITY_INDEX

--[[
p1 is always 0 in the scripts.
]]
function natives.WEAPON.GET_BEST_PED_WEAPON(--[[Ped]] ped, --[[BOOL]] p1) -- Returns Hash
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.GET_BEST_PED_WEAPON' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0x8483E98E8B888AE2, ped, p1)
	return result:__tointeger()
end
natives.weapon.get_best_ped_weapon = natives.WEAPON.GET_BEST_PED_WEAPON

--[[
Full list of weapons by DurtyFree (Search for VEHICLE_*): https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
]]
function natives.WEAPON.SET_CURRENT_PED_VEHICLE_WEAPON(--[[Ped]] ped, --[[Hash]] weaponHash) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.SET_CURRENT_PED_VEHICLE_WEAPON' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(weaponHash) == "number", "Arg #2 (weaponHash) must be a number.")

	local result = native_call(0x75C55983C2C39DAA, ped, weaponHash)
	return result:__tointeger() ~= 0
end
natives.weapon.set_current_ped_vehicle_weapon = natives.WEAPON.SET_CURRENT_PED_VEHICLE_WEAPON

--[[
Example in VB

    Public Shared Function GetVehicleCurrentWeapon(Ped As Ped) As Integer
        Dim arg As New OutputArgument()
        Native.Function.Call(Hash.GET_CURRENT_PED_VEHICLE_WEAPON, Ped, arg)
        Return arg.GetResult(Of Integer)()
    End Function

Usage:
If GetVehicleCurrentWeapon(Game.Player.Character) = -821520672 Then ...Do something
Note: -821520672 = VEHICLE_WEAPON_PLANE_ROCKET
]]
function natives.WEAPON.GET_CURRENT_PED_VEHICLE_WEAPON(--[[Ped]] ped, --[[Hash*]] weaponHash) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.GET_CURRENT_PED_VEHICLE_WEAPON' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(weaponHash) == "userdata", "Arg #2 (weaponHash) must be a userdata.")

	local result = native_call(0x1017582BCD3832DC, ped, weaponHash)
	return result:__tointeger() ~= 0
end
natives.weapon.get_current_ped_vehicle_weapon = natives.WEAPON.GET_CURRENT_PED_VEHICLE_WEAPON

function natives.WEAPON.SET_PED_CYCLE_VEHICLE_WEAPONS_ONLY(--[[Ped]] ped) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.SET_PED_CYCLE_VEHICLE_WEAPONS_ONLY' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x50276EF8172F5F12, ped)
end
natives.weapon.set_ped_cycle_vehicle_weapons_only = natives.WEAPON.SET_PED_CYCLE_VEHICLE_WEAPONS_ONLY

--[[
Checks if the ped is currently equipped with a weapon matching a bit specified using a bitwise-or in typeFlags.

Type flag bit values:
1 = Melee weapons
2 = Explosive weapons
4 = Any other weapons

Not specifying any bit will lead to the native *always* returning 'false', and for example specifying '4 | 2' will check for any weapon except fists and melee weapons.
7 returns true if you are equipped with any weapon except your fists.
6 returns true if you are equipped with any weapon except melee weapons.
5 returns true if you are equipped with any weapon except the Explosives weapon group.
4 returns true if you are equipped with any weapon except Explosives weapon group AND melee weapons.
3 returns true if you are equipped with either Explosives or Melee weapons (the exact opposite of 4).
2 returns true only if you are equipped with any weapon from the Explosives weapon group.
1 returns true only if you are equipped with any Melee weapon.
0 never returns true.

Note: When I say "Explosives weapon group", it does not include the Jerry can and Fire Extinguisher.
]]
function natives.WEAPON.IS_PED_ARMED(--[[Ped]] ped, --[[int]] typeFlags) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.IS_PED_ARMED' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(typeFlags) == "number", "Arg #2 (typeFlags) must be a number.")

	local result = native_call(0x475768A975D5AD17, ped, typeFlags)
	return result:__tointeger() ~= 0
end
natives.weapon.is_ped_armed = natives.WEAPON.IS_PED_ARMED

--[[
Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
]]
function natives.WEAPON.IS_WEAPON_VALID(--[[Hash]] weaponHash) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.IS_WEAPON_VALID' due to disabled trusted mode")

	assert(type(weaponHash) == "number", "Arg #1 (weaponHash) must be a number.")

	local result = native_call(0x937C71165CF334B3, weaponHash)
	return result:__tointeger() ~= 0
end
natives.weapon.is_weapon_valid = natives.WEAPON.IS_WEAPON_VALID

--[[
p2 should be FALSE, otherwise it seems to always return FALSE

Bool does not check if the weapon is current equipped, unfortunately.
Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
]]
function natives.WEAPON.HAS_PED_GOT_WEAPON(--[[Ped]] ped, --[[Hash]] weaponHash, --[[BOOL]] p2) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.HAS_PED_GOT_WEAPON' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(weaponHash) == "number", "Arg #2 (weaponHash) must be a number.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")

	local result = native_call(0x8DECB02F88F428BC, ped, weaponHash, p2)
	return result:__tointeger() ~= 0
end
natives.weapon.has_ped_got_weapon = natives.WEAPON.HAS_PED_GOT_WEAPON

function natives.WEAPON.IS_PED_WEAPON_READY_TO_SHOOT(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.IS_PED_WEAPON_READY_TO_SHOOT' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0xB80CA294F2F26749, ped)
	return result:__tointeger() ~= 0
end
natives.weapon.is_ped_weapon_ready_to_shoot = natives.WEAPON.IS_PED_WEAPON_READY_TO_SHOOT

function natives.WEAPON.GET_PED_WEAPONTYPE_IN_SLOT(--[[Ped]] ped, --[[Hash]] weaponSlot) -- Returns Hash
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.GET_PED_WEAPONTYPE_IN_SLOT' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(weaponSlot) == "number", "Arg #2 (weaponSlot) must be a number.")

	local result = native_call(0xEFFED78E9011134D, ped, weaponSlot)
	return result:__tointeger()
end
natives.weapon.get_ped_weapontype_in_slot = natives.WEAPON.GET_PED_WEAPONTYPE_IN_SLOT

--[[
WEAPON::GET_AMMO_IN_PED_WEAPON(PLAYER::PLAYER_PED_ID(), a_0)

From decompiled scripts
Returns total ammo in weapon

GTALua Example :
natives.WEAPON.GET_AMMO_IN_PED_WEAPON(plyPed, WeaponHash)
Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
]]
function natives.WEAPON.GET_AMMO_IN_PED_WEAPON(--[[Ped]] ped, --[[Hash]] weaponhash) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.GET_AMMO_IN_PED_WEAPON' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(weaponhash) == "number", "Arg #2 (weaponhash) must be a number.")

	local result = native_call(0x015A522136D7F951, ped, weaponhash)
	return result:__tointeger()
end
natives.weapon.get_ammo_in_ped_weapon = natives.WEAPON.GET_AMMO_IN_PED_WEAPON

--[[
Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
]]
function natives.WEAPON.ADD_AMMO_TO_PED(--[[Ped]] ped, --[[Hash]] weaponHash, --[[int]] ammo) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.ADD_AMMO_TO_PED' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(weaponHash) == "number", "Arg #2 (weaponHash) must be a number.")
	assert(type(ammo) == "number", "Arg #3 (ammo) must be a number.")

	local result = native_call(0x78F0424C34306220, ped, weaponHash, ammo)
end
natives.weapon.add_ammo_to_ped = natives.WEAPON.ADD_AMMO_TO_PED

--[[
Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
]]
function natives.WEAPON.SET_PED_AMMO(--[[Ped]] ped, --[[Hash]] weaponHash, --[[int]] ammo, --[[BOOL]] p3) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.SET_PED_AMMO' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(weaponHash) == "number", "Arg #2 (weaponHash) must be a number.")
	assert(type(ammo) == "number", "Arg #3 (ammo) must be a number.")
	assert(type(p3) == "boolean", "Arg #4 (p3) must be a boolean.")

	local result = native_call(0x14E56BC5B5DB6A19, ped, weaponHash, ammo, p3)
end
natives.weapon.set_ped_ammo = natives.WEAPON.SET_PED_AMMO

--[[
Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
]]
function natives.WEAPON.SET_PED_INFINITE_AMMO(--[[Ped]] ped, --[[BOOL]] toggle, --[[Hash]] weaponHash) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.SET_PED_INFINITE_AMMO' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")
	assert(type(weaponHash) == "number", "Arg #3 (weaponHash) must be a number.")

	local result = native_call(0x3EDCB0505123623B, ped, toggle, weaponHash)
end
natives.weapon.set_ped_infinite_ammo = natives.WEAPON.SET_PED_INFINITE_AMMO

function natives.WEAPON.SET_PED_INFINITE_AMMO_CLIP(--[[Ped]] ped, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.SET_PED_INFINITE_AMMO_CLIP' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x183DADC6AA953186, ped, toggle)
end
natives.weapon.set_ped_infinite_ammo_clip = natives.WEAPON.SET_PED_INFINITE_AMMO_CLIP

function natives.WEAPON.SET_PED_STUN_GUN_FINITE_AMMO(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.SET_PED_STUN_GUN_FINITE_AMMO' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x24C024BA8379A70A, p0, p1)
end
natives.weapon.set_ped_stun_gun_finite_ammo = natives.WEAPON.SET_PED_STUN_GUN_FINITE_AMMO

--[[
Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
]]
function natives.WEAPON.GIVE_WEAPON_TO_PED(--[[Ped]] ped, --[[Hash]] weaponHash, --[[int]] ammoCount, --[[BOOL]] isHidden, --[[BOOL]] bForceInHand) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.GIVE_WEAPON_TO_PED' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(weaponHash) == "number", "Arg #2 (weaponHash) must be a number.")
	assert(type(ammoCount) == "number", "Arg #3 (ammoCount) must be a number.")
	assert(type(isHidden) == "boolean", "Arg #4 (isHidden) must be a boolean.")
	assert(type(bForceInHand) == "boolean", "Arg #5 (bForceInHand) must be a boolean.")

	local result = native_call(0xBF0FD6E56C964FCB, ped, weaponHash, ammoCount, isHidden, bForceInHand)
end
natives.weapon.give_weapon_to_ped = natives.WEAPON.GIVE_WEAPON_TO_PED

--[[
Gives a weapon to PED with a delay, example:

WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PED::PLAYER_PED_ID(), MISC::GET_HASH_KEY("WEAPON_PISTOL"), 1000, false)
Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
]]
function natives.WEAPON.GIVE_DELAYED_WEAPON_TO_PED(--[[Ped]] ped, --[[Hash]] weaponHash, --[[int]] ammoCount, --[[BOOL]] bForceInHand) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.GIVE_DELAYED_WEAPON_TO_PED' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(weaponHash) == "number", "Arg #2 (weaponHash) must be a number.")
	assert(type(ammoCount) == "number", "Arg #3 (ammoCount) must be a number.")
	assert(type(bForceInHand) == "boolean", "Arg #4 (bForceInHand) must be a boolean.")

	local result = native_call(0xB282DC6EBD803C75, ped, weaponHash, ammoCount, bForceInHand)
end
natives.weapon.give_delayed_weapon_to_ped = natives.WEAPON.GIVE_DELAYED_WEAPON_TO_PED

--[[
setting the last params to false it does that same so I would suggest its not a toggle
]]
function natives.WEAPON.REMOVE_ALL_PED_WEAPONS(--[[Ped]] ped, --[[BOOL]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.REMOVE_ALL_PED_WEAPONS' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0xF25DF915FA38C5F3, ped, p1)
end
natives.weapon.remove_all_ped_weapons = natives.WEAPON.REMOVE_ALL_PED_WEAPONS

--[[
This native removes a specified weapon from your selected ped.
Weapon Hashes: pastebin.com/0wwDZgkF

Example:
C#:
Function.Call(Hash.REMOVE_WEAPON_FROM_PED, Game.Player.Character, 0x99B507EA);

C++:
WEAPON::REMOVE_WEAPON_FROM_PED(PLAYER::PLAYER_PED_ID(), 0x99B507EA);

The code above removes the knife from the player.
Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
]]
function natives.WEAPON.REMOVE_WEAPON_FROM_PED(--[[Ped]] ped, --[[Hash]] weaponHash) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.REMOVE_WEAPON_FROM_PED' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(weaponHash) == "number", "Arg #2 (weaponHash) must be a number.")

	local result = native_call(0x4899CB088EDF59B8, ped, weaponHash)
end
natives.weapon.remove_weapon_from_ped = natives.WEAPON.REMOVE_WEAPON_FROM_PED

--[[
Hides the players weapon during a cutscene.
]]
function natives.WEAPON.HIDE_PED_WEAPON_FOR_SCRIPTED_CUTSCENE(--[[Ped]] ped, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.HIDE_PED_WEAPON_FOR_SCRIPTED_CUTSCENE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x6F6981D2253C208F, ped, toggle)
end
natives.weapon.hide_ped_weapon_for_scripted_cutscene = natives.WEAPON.HIDE_PED_WEAPON_FOR_SCRIPTED_CUTSCENE

--[[
Has 5 parameters since latest patches.
]]
function natives.WEAPON.SET_PED_CURRENT_WEAPON_VISIBLE(--[[Ped]] ped, --[[BOOL]] visible, --[[BOOL]] deselectWeapon, --[[BOOL]] p3, --[[BOOL]] p4) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.SET_PED_CURRENT_WEAPON_VISIBLE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(visible) == "boolean", "Arg #2 (visible) must be a boolean.")
	assert(type(deselectWeapon) == "boolean", "Arg #3 (deselectWeapon) must be a boolean.")
	assert(type(p3) == "boolean", "Arg #4 (p3) must be a boolean.")
	assert(type(p4) == "boolean", "Arg #5 (p4) must be a boolean.")

	local result = native_call(0x0725A4CCFDED9A70, ped, visible, deselectWeapon, p3, p4)
end
natives.weapon.set_ped_current_weapon_visible = natives.WEAPON.SET_PED_CURRENT_WEAPON_VISIBLE

function natives.WEAPON.SET_PED_DROPS_WEAPONS_WHEN_DEAD(--[[Ped]] ped, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.SET_PED_DROPS_WEAPONS_WHEN_DEAD' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x476AE72C1D19D1A8, ped, toggle)
end
natives.weapon.set_ped_drops_weapons_when_dead = natives.WEAPON.SET_PED_DROPS_WEAPONS_WHEN_DEAD

--[[
It determines what weapons caused damage:

If you want to define only a specific weapon, second parameter=weapon hash code, third parameter=0
If you want to define any melee weapon, second parameter=0, third parameter=1.
If you want to identify any weapon (firearms, melee, rockets, etc.), second parameter=0, third parameter=2.
Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
]]
function natives.WEAPON.HAS_PED_BEEN_DAMAGED_BY_WEAPON(--[[Ped]] ped, --[[Hash]] weaponHash, --[[int]] weaponType) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.HAS_PED_BEEN_DAMAGED_BY_WEAPON' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(weaponHash) == "number", "Arg #2 (weaponHash) must be a number.")
	assert(type(weaponType) == "number", "Arg #3 (weaponType) must be a number.")

	local result = native_call(0x2D343D2219CD027A, ped, weaponHash, weaponType)
	return result:__tointeger() ~= 0
end
natives.weapon.has_ped_been_damaged_by_weapon = natives.WEAPON.HAS_PED_BEEN_DAMAGED_BY_WEAPON

--[[
Does NOT seem to work with HAS_PED_BEEN_DAMAGED_BY_WEAPON. Use CLEAR_ENTITY_LAST_WEAPON_DAMAGE and HAS_ENTITY_BEEN_DAMAGED_BY_WEAPON instead.
]]
function natives.WEAPON.CLEAR_PED_LAST_WEAPON_DAMAGE(--[[Ped]] ped) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.CLEAR_PED_LAST_WEAPON_DAMAGE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x0E98F88A24C5F4B8, ped)
end
natives.weapon.clear_ped_last_weapon_damage = natives.WEAPON.CLEAR_PED_LAST_WEAPON_DAMAGE

--[[
It determines what weapons caused damage:

If you want to define only a specific weapon, second parameter=weapon hash code, third parameter=0
If you want to define any melee weapon, second parameter=0, third parameter=1.
If you want to identify any weapon (firearms, melee, rockets, etc.), second parameter=0, third parameter=2.
Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
]]
function natives.WEAPON.HAS_ENTITY_BEEN_DAMAGED_BY_WEAPON(--[[Entity]] entity, --[[Hash]] weaponHash, --[[int]] weaponType) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.HAS_ENTITY_BEEN_DAMAGED_BY_WEAPON' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")
	assert(type(weaponHash) == "number", "Arg #2 (weaponHash) must be a number.")
	assert(type(weaponType) == "number", "Arg #3 (weaponType) must be a number.")

	local result = native_call(0x131D401334815E94, entity, weaponHash, weaponType)
	return result:__tointeger() ~= 0
end
natives.weapon.has_entity_been_damaged_by_weapon = natives.WEAPON.HAS_ENTITY_BEEN_DAMAGED_BY_WEAPON

function natives.WEAPON.CLEAR_ENTITY_LAST_WEAPON_DAMAGE(--[[Entity]] entity) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.CLEAR_ENTITY_LAST_WEAPON_DAMAGE' due to disabled trusted mode")

	assert(type(entity) == "number", "Arg #1 (entity) must be a number.")

	local result = native_call(0xAC678E40BE7C74D2, entity)
end
natives.weapon.clear_entity_last_weapon_damage = natives.WEAPON.CLEAR_ENTITY_LAST_WEAPON_DAMAGE

function natives.WEAPON.SET_PED_DROPS_WEAPON(--[[Ped]] ped) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.SET_PED_DROPS_WEAPON' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x6B7513D9966FBEC0, ped)
end
natives.weapon.set_ped_drops_weapon = natives.WEAPON.SET_PED_DROPS_WEAPON

--[[
Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
]]
function natives.WEAPON.SET_PED_DROPS_INVENTORY_WEAPON(--[[Ped]] ped, --[[Hash]] weaponHash, --[[float]] xOffset, --[[float]] yOffset, --[[float]] zOffset, --[[int]] ammoCount) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.SET_PED_DROPS_INVENTORY_WEAPON' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(weaponHash) == "number", "Arg #2 (weaponHash) must be a number.")
	assert(type(xOffset) == "number", "Arg #3 (xOffset) must be a number.")
	assert(type(yOffset) == "number", "Arg #4 (yOffset) must be a number.")
	assert(type(zOffset) == "number", "Arg #5 (zOffset) must be a number.")
	assert(type(ammoCount) == "number", "Arg #6 (ammoCount) must be a number.")

	local result = native_call(0x208A1888007FC0E6, ped, weaponHash, xOffset, yOffset, zOffset, ammoCount)
end
natives.weapon.set_ped_drops_inventory_weapon = natives.WEAPON.SET_PED_DROPS_INVENTORY_WEAPON

--[[
p2 is mostly 1 in the scripts.
Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
]]
function natives.WEAPON.GET_MAX_AMMO_IN_CLIP(--[[Ped]] ped, --[[Hash]] weaponHash, --[[BOOL]] p2) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.GET_MAX_AMMO_IN_CLIP' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(weaponHash) == "number", "Arg #2 (weaponHash) must be a number.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")

	local result = native_call(0xA38DCFFCEA8962FA, ped, weaponHash, p2)
	return result:__tointeger()
end
natives.weapon.get_max_ammo_in_clip = natives.WEAPON.GET_MAX_AMMO_IN_CLIP

--[[
Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
]]
function natives.WEAPON.GET_AMMO_IN_CLIP(--[[Ped]] ped, --[[Hash]] weaponHash, --[[int*]] ammo) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.GET_AMMO_IN_CLIP' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(weaponHash) == "number", "Arg #2 (weaponHash) must be a number.")
	assert(type(ammo) == "userdata", "Arg #3 (ammo) must be a userdata.")

	local result = native_call(0x2E1202248937775C, ped, weaponHash, ammo)
	return result:__tointeger() ~= 0
end
natives.weapon.get_ammo_in_clip = natives.WEAPON.GET_AMMO_IN_CLIP

--[[
Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
]]
function natives.WEAPON.SET_AMMO_IN_CLIP(--[[Ped]] ped, --[[Hash]] weaponHash, --[[int]] ammo) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.SET_AMMO_IN_CLIP' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(weaponHash) == "number", "Arg #2 (weaponHash) must be a number.")
	assert(type(ammo) == "number", "Arg #3 (ammo) must be a number.")

	local result = native_call(0xDCD2A934D65CB497, ped, weaponHash, ammo)
	return result:__tointeger() ~= 0
end
natives.weapon.set_ammo_in_clip = natives.WEAPON.SET_AMMO_IN_CLIP

--[[
Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
]]
function natives.WEAPON.GET_MAX_AMMO(--[[Ped]] ped, --[[Hash]] weaponHash, --[[int*]] ammo) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.GET_MAX_AMMO' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(weaponHash) == "number", "Arg #2 (weaponHash) must be a number.")
	assert(type(ammo) == "userdata", "Arg #3 (ammo) must be a userdata.")

	local result = native_call(0xDC16122C7A20C933, ped, weaponHash, ammo)
	return result:__tointeger() ~= 0
end
natives.weapon.get_max_ammo = natives.WEAPON.GET_MAX_AMMO

--[[
Returns the max ammo for an ammo type. Ammo types: https://gist.github.com/root-cause/faf41f59f7a6d818b7db0b839bd147c1
]]
function natives.WEAPON.GET_MAX_AMMO_BY_TYPE(--[[Ped]] ped, --[[Hash]] ammoTypeHash, --[[int*]] ammo) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.GET_MAX_AMMO_BY_TYPE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(ammoTypeHash) == "number", "Arg #2 (ammoTypeHash) must be a number.")
	assert(type(ammo) == "userdata", "Arg #3 (ammo) must be a userdata.")

	local result = native_call(0x585847C5E4E11709, ped, ammoTypeHash, ammo)
	return result:__tointeger() ~= 0
end
natives.weapon.get_max_ammo_by_type = natives.WEAPON.GET_MAX_AMMO_BY_TYPE

--[[
Ammo types: https://gist.github.com/root-cause/faf41f59f7a6d818b7db0b839bd147c1
]]
function natives.WEAPON.ADD_PED_AMMO_BY_TYPE(--[[Ped]] ped, --[[Hash]] ammoTypeHash, --[[int]] ammo) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.ADD_PED_AMMO_BY_TYPE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(ammoTypeHash) == "number", "Arg #2 (ammoTypeHash) must be a number.")
	assert(type(ammo) == "number", "Arg #3 (ammo) must be a number.")

	local result = native_call(0x2472622CE1F2D45F, ped, ammoTypeHash, ammo)
end
natives.weapon.add_ped_ammo_by_type = natives.WEAPON.ADD_PED_AMMO_BY_TYPE

--[[
Ammo types: https://gist.github.com/root-cause/faf41f59f7a6d818b7db0b839bd147c1
]]
function natives.WEAPON.SET_PED_AMMO_BY_TYPE(--[[Ped]] ped, --[[Hash]] ammoTypeHash, --[[int]] ammo) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.SET_PED_AMMO_BY_TYPE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(ammoTypeHash) == "number", "Arg #2 (ammoTypeHash) must be a number.")
	assert(type(ammo) == "number", "Arg #3 (ammo) must be a number.")

	local result = native_call(0x5FD1E1F011E76D7E, ped, ammoTypeHash, ammo)
end
natives.weapon.set_ped_ammo_by_type = natives.WEAPON.SET_PED_AMMO_BY_TYPE

function natives.WEAPON.GET_PED_AMMO_BY_TYPE(--[[Ped]] ped, --[[Hash]] ammoTypeHash) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.GET_PED_AMMO_BY_TYPE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(ammoTypeHash) == "number", "Arg #2 (ammoTypeHash) must be a number.")

	local result = native_call(0x39D22031557946C1, ped, ammoTypeHash)
	return result:__tointeger()
end
natives.weapon.get_ped_ammo_by_type = natives.WEAPON.GET_PED_AMMO_BY_TYPE

function natives.WEAPON.SET_PED_AMMO_TO_DROP(--[[Ped]] ped, --[[int]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.SET_PED_AMMO_TO_DROP' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xA4EFEF9440A5B0EF, ped, p1)
end
natives.weapon.set_ped_ammo_to_drop = natives.WEAPON.SET_PED_AMMO_TO_DROP

function natives.WEAPON.SET_PICKUP_AMMO_AMOUNT_SCALER(--[[float]] p0) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.SET_PICKUP_AMMO_AMOUNT_SCALER' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")

	local result = native_call(0xE620FD3512A04F18, p0)
end
natives.weapon.set_pickup_ammo_amount_scaler = natives.WEAPON.SET_PICKUP_AMMO_AMOUNT_SCALER

--[[
Returns the current ammo type of the specified ped's specified weapon.
MkII magazines will change the return value, like Pistol MkII returning AMMO_PISTOL without any components and returning AMMO_PISTOL_TRACER after Tracer Rounds component is attached.
Use 0xF489B44DD5AF4BD9 if you always want AMMO_PISTOL.
Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
]]
function natives.WEAPON.GET_PED_AMMO_TYPE_FROM_WEAPON(--[[Ped]] ped, --[[Hash]] weaponHash) -- Returns Hash
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.GET_PED_AMMO_TYPE_FROM_WEAPON' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(weaponHash) == "number", "Arg #2 (weaponHash) must be a number.")

	local result = native_call(0x7FEAD38B326B9F74, ped, weaponHash)
	return result:__tointeger()
end
natives.weapon.get_ped_ammo_type_from_weapon = natives.WEAPON.GET_PED_AMMO_TYPE_FROM_WEAPON

--[[
Returns the base/default ammo type of the specified ped's specified weapon.
Use GET_PED_AMMO_TYPE_FROM_WEAPON if you want current ammo type (like AMMO_MG_INCENDIARY/AMMO_MG_TRACER while using MkII magazines) and use this if you want base ammo type. (AMMO_MG)
Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
]]
function natives.WEAPON.GET_PED_ORIGINAL_AMMO_TYPE_FROM_WEAPON(--[[Ped]] ped, --[[Hash]] weaponHash) -- Returns Hash
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.GET_PED_ORIGINAL_AMMO_TYPE_FROM_WEAPON' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(weaponHash) == "number", "Arg #2 (weaponHash) must be a number.")

	local result = native_call(0xF489B44DD5AF4BD9, ped, weaponHash)
	return result:__tointeger()
end
natives.weapon.get_ped_original_ammo_type_from_weapon = natives.WEAPON.GET_PED_ORIGINAL_AMMO_TYPE_FROM_WEAPON

--[[
Pass ped. Pass address of Vector3.
The coord will be put into the Vector3.
The return will determine whether there was a coord found or not.
]]
function natives.WEAPON.GET_PED_LAST_WEAPON_IMPACT_COORD(--[[Ped]] ped, --[[Vector3*]] coords) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.GET_PED_LAST_WEAPON_IMPACT_COORD' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(coords) == "userdata", "Arg #2 (coords) must be a userdata.")

	local result = native_call(0x6C4D0409BA1A2BC2, ped, coords)
	return result:__tointeger() ~= 0
end
natives.weapon.get_ped_last_weapon_impact_coord = natives.WEAPON.GET_PED_LAST_WEAPON_IMPACT_COORD

--[[
p1/gadgetHash was always 0xFBAB5776 ("GADGET_PARACHUTE").
p2 is always true.
]]
function natives.WEAPON.SET_PED_GADGET(--[[Ped]] ped, --[[Hash]] gadgetHash, --[[BOOL]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.SET_PED_GADGET' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(gadgetHash) == "number", "Arg #2 (gadgetHash) must be a number.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")

	local result = native_call(0xD0D7B1E680ED4A1A, ped, gadgetHash, p2)
end
natives.weapon.set_ped_gadget = natives.WEAPON.SET_PED_GADGET

--[[
gadgetHash - was always 0xFBAB5776 ("GADGET_PARACHUTE").
]]
function natives.WEAPON.GET_IS_PED_GADGET_EQUIPPED(--[[Ped]] ped, --[[Hash]] gadgetHash) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.GET_IS_PED_GADGET_EQUIPPED' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(gadgetHash) == "number", "Arg #2 (gadgetHash) must be a number.")

	local result = native_call(0xF731332072F5156C, ped, gadgetHash)
	return result:__tointeger() ~= 0
end
natives.weapon.get_is_ped_gadget_equipped = natives.WEAPON.GET_IS_PED_GADGET_EQUIPPED

--[[
Returns the hash of the weapon. 

            var num7 = WEAPON::GET_SELECTED_PED_WEAPON(num4);
            sub_27D3(num7);
            switch (num7)
            {
                case 0x24B17070:

Also see WEAPON::GET_CURRENT_PED_WEAPON. Difference?

-------------------------------------------------------------------------

The difference is that GET_SELECTED_PED_WEAPON simply returns the ped's current weapon hash but GET_CURRENT_PED_WEAPON also checks the weapon object and returns true if the hash of the weapon object equals the weapon hash
Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
]]
function natives.WEAPON.GET_SELECTED_PED_WEAPON(--[[Ped]] ped) -- Returns Hash
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.GET_SELECTED_PED_WEAPON' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x0A6DB4965674D243, ped)
	return result:__tointeger()
end
natives.weapon.get_selected_ped_weapon = natives.WEAPON.GET_SELECTED_PED_WEAPON

--[[
             WEAPON::EXPLODE_PROJECTILES(PLAYER::PLAYER_PED_ID(), func_221(0x00000003), 0x00000001);
]]
function natives.WEAPON.EXPLODE_PROJECTILES(--[[Ped]] ped, --[[Hash]] weaponHash, --[[BOOL]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.EXPLODE_PROJECTILES' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(weaponHash) == "number", "Arg #2 (weaponHash) must be a number.")
	assert(type(p2) == "boolean", "Arg #3 (p2) must be a boolean.")

	local result = native_call(0xFC4BD125DE7611E4, ped, weaponHash, p2)
end
natives.weapon.explode_projectiles = natives.WEAPON.EXPLODE_PROJECTILES

--[[
If `explode` true, then removal is done through exploding the projectile. Basically the same as EXPLODE_PROJECTILES but without defining the owner ped.
]]
function natives.WEAPON.REMOVE_ALL_PROJECTILES_OF_TYPE(--[[Hash]] weaponHash, --[[BOOL]] explode) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.REMOVE_ALL_PROJECTILES_OF_TYPE' due to disabled trusted mode")

	assert(type(weaponHash) == "number", "Arg #1 (weaponHash) must be a number.")
	assert(type(explode) == "boolean", "Arg #2 (explode) must be a boolean.")

	local result = native_call(0xFC52E0F37E446528, weaponHash, explode)
end
natives.weapon.remove_all_projectiles_of_type = natives.WEAPON.REMOVE_ALL_PROJECTILES_OF_TYPE

function natives.WEAPON.GET_LOCKON_DISTANCE_OF_CURRENT_PED_WEAPON(--[[Ped]] ped) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.GET_LOCKON_DISTANCE_OF_CURRENT_PED_WEAPON' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x840F03E9041E2C9C, ped)
	return result:__tonumber()
end
natives.weapon.get_lockon_distance_of_current_ped_weapon = natives.WEAPON.GET_LOCKON_DISTANCE_OF_CURRENT_PED_WEAPON

function natives.WEAPON.GET_MAX_RANGE_OF_CURRENT_PED_WEAPON(--[[Ped]] ped) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.GET_MAX_RANGE_OF_CURRENT_PED_WEAPON' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x814C9D19DFD69679, ped)
	return result:__tonumber()
end
natives.weapon.get_max_range_of_current_ped_weapon = natives.WEAPON.GET_MAX_RANGE_OF_CURRENT_PED_WEAPON

--[[
Third Parameter = unsure, but pretty sure it is weapon hash
--> get_hash_key("weapon_stickybomb")

Fourth Parameter = unsure, almost always -1
]]
function natives.WEAPON.HAS_VEHICLE_GOT_PROJECTILE_ATTACHED(--[[Ped]] driver, --[[Vehicle]] vehicle, --[[Hash]] weaponHash, --[[Any]] p3) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.HAS_VEHICLE_GOT_PROJECTILE_ATTACHED' due to disabled trusted mode")

	assert(type(driver) == "number", "Arg #1 (driver) must be a number.")
	assert(type(vehicle) == "number", "Arg #2 (vehicle) must be a number.")
	assert(type(weaponHash) == "number", "Arg #3 (weaponHash) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")

	local result = native_call(0x717C8481234E3B88, driver, vehicle, weaponHash, p3)
	return result:__tointeger() ~= 0
end
natives.weapon.has_vehicle_got_projectile_attached = natives.WEAPON.HAS_VEHICLE_GOT_PROJECTILE_ATTACHED

--[[
Full list of weapons & components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
]]
function natives.WEAPON.GIVE_WEAPON_COMPONENT_TO_PED(--[[Ped]] ped, --[[Hash]] weaponHash, --[[Hash]] componentHash) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.GIVE_WEAPON_COMPONENT_TO_PED' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(weaponHash) == "number", "Arg #2 (weaponHash) must be a number.")
	assert(type(componentHash) == "number", "Arg #3 (componentHash) must be a number.")

	local result = native_call(0xD966D51AA5B28BB9, ped, weaponHash, componentHash)
end
natives.weapon.give_weapon_component_to_ped = natives.WEAPON.GIVE_WEAPON_COMPONENT_TO_PED

--[[
Full list of weapons & components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
]]
function natives.WEAPON.REMOVE_WEAPON_COMPONENT_FROM_PED(--[[Ped]] ped, --[[Hash]] weaponHash, --[[Hash]] componentHash) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.REMOVE_WEAPON_COMPONENT_FROM_PED' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(weaponHash) == "number", "Arg #2 (weaponHash) must be a number.")
	assert(type(componentHash) == "number", "Arg #3 (componentHash) must be a number.")

	local result = native_call(0x1E8BE90C74FB4C09, ped, weaponHash, componentHash)
end
natives.weapon.remove_weapon_component_from_ped = natives.WEAPON.REMOVE_WEAPON_COMPONENT_FROM_PED

--[[
Full list of weapons & components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
]]
function natives.WEAPON.HAS_PED_GOT_WEAPON_COMPONENT(--[[Ped]] ped, --[[Hash]] weaponHash, --[[Hash]] componentHash) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.HAS_PED_GOT_WEAPON_COMPONENT' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(weaponHash) == "number", "Arg #2 (weaponHash) must be a number.")
	assert(type(componentHash) == "number", "Arg #3 (componentHash) must be a number.")

	local result = native_call(0xC593212475FAE340, ped, weaponHash, componentHash)
	return result:__tointeger() ~= 0
end
natives.weapon.has_ped_got_weapon_component = natives.WEAPON.HAS_PED_GOT_WEAPON_COMPONENT

--[[
Full list of weapons & components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
]]
function natives.WEAPON.IS_PED_WEAPON_COMPONENT_ACTIVE(--[[Ped]] ped, --[[Hash]] weaponHash, --[[Hash]] componentHash) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.IS_PED_WEAPON_COMPONENT_ACTIVE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(weaponHash) == "number", "Arg #2 (weaponHash) must be a number.")
	assert(type(componentHash) == "number", "Arg #3 (componentHash) must be a number.")

	local result = native_call(0x0D78DE0572D3969E, ped, weaponHash, componentHash)
	return result:__tointeger() ~= 0
end
natives.weapon.is_ped_weapon_component_active = natives.WEAPON.IS_PED_WEAPON_COMPONENT_ACTIVE

function natives.WEAPON.REFILL_AMMO_INSTANTLY(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.REFILL_AMMO_INSTANTLY' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x8C0D57EA686FAD87, ped)
	return result:__tointeger() ~= 0
end
natives.weapon.refill_ammo_instantly = natives.WEAPON.REFILL_AMMO_INSTANTLY

--[[
Forces a ped to reload only if they are able to; if they have a full magazine, they will not reload.
]]
function natives.WEAPON.MAKE_PED_RELOAD(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.MAKE_PED_RELOAD' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x20AE33F3AC9C0033, ped)
	return result:__tointeger() ~= 0
end
natives.weapon.make_ped_reload = natives.WEAPON.MAKE_PED_RELOAD

--[[
Nearly every instance of p1 I found was 31. Nearly every instance of p2 I found was 0.

REQUEST_WEAPON_ASSET(iLocal_1888, 31, 26);
]]
function natives.WEAPON.REQUEST_WEAPON_ASSET(--[[Hash]] weaponHash, --[[int]] p1, --[[int]] p2) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.REQUEST_WEAPON_ASSET' due to disabled trusted mode")

	assert(type(weaponHash) == "number", "Arg #1 (weaponHash) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")

	local result = native_call(0x5443438F033E29C3, weaponHash, p1, p2)
end
natives.weapon.request_weapon_asset = natives.WEAPON.REQUEST_WEAPON_ASSET

function natives.WEAPON.HAS_WEAPON_ASSET_LOADED(--[[Hash]] weaponHash) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.HAS_WEAPON_ASSET_LOADED' due to disabled trusted mode")

	assert(type(weaponHash) == "number", "Arg #1 (weaponHash) must be a number.")

	local result = native_call(0x36E353271F0E90EE, weaponHash)
	return result:__tointeger() ~= 0
end
natives.weapon.has_weapon_asset_loaded = natives.WEAPON.HAS_WEAPON_ASSET_LOADED

function natives.WEAPON.REMOVE_WEAPON_ASSET(--[[Hash]] weaponHash) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.REMOVE_WEAPON_ASSET' due to disabled trusted mode")

	assert(type(weaponHash) == "number", "Arg #1 (weaponHash) must be a number.")

	local result = native_call(0xAA08EF13F341C8FC, weaponHash)
end
natives.weapon.remove_weapon_asset = natives.WEAPON.REMOVE_WEAPON_ASSET

--[[
Now has 8 params.
]]
function natives.WEAPON.CREATE_WEAPON_OBJECT(--[[Hash]] weaponHash, --[[int]] ammoCount, --[[float]] x, --[[float]] y, --[[float]] z, --[[BOOL]] showWorldModel, --[[float]] scale, --[[Any]] p7, --[[Any]] p8, --[[Any]] p9) -- Returns Object
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.CREATE_WEAPON_OBJECT' due to disabled trusted mode")

	assert(type(weaponHash) == "number", "Arg #1 (weaponHash) must be a number.")
	assert(type(ammoCount) == "number", "Arg #2 (ammoCount) must be a number.")
	assert(type(x) == "number", "Arg #3 (x) must be a number.")
	assert(type(y) == "number", "Arg #4 (y) must be a number.")
	assert(type(z) == "number", "Arg #5 (z) must be a number.")
	assert(type(showWorldModel) == "boolean", "Arg #6 (showWorldModel) must be a boolean.")
	assert(type(scale) == "number", "Arg #7 (scale) must be a number.")
	assert(type(p7) == "number", "Arg #8 (p7) must be a number.")
	assert(type(p8) == "number", "Arg #9 (p8) must be a number.")
	assert(type(p9) == "number", "Arg #10 (p9) must be a number.")

	local result = native_call(0x9541D3CF0D398F36, weaponHash, ammoCount, x, y, z, showWorldModel, scale, p7, p8, p9)
	return result:__tointeger()
end
natives.weapon.create_weapon_object = natives.WEAPON.CREATE_WEAPON_OBJECT

--[[
addonHash:
(use WEAPON::GET_WEAPON_COMPONENT_TYPE_MODEL() to get hash value)
${component_at_ar_flsh}, ${component_at_ar_supp}, ${component_at_pi_flsh}, ${component_at_scope_large}, ${component_at_ar_supp_02}
]]
function natives.WEAPON.GIVE_WEAPON_COMPONENT_TO_WEAPON_OBJECT(--[[Object]] weaponObject, --[[Hash]] addonHash) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.GIVE_WEAPON_COMPONENT_TO_WEAPON_OBJECT' due to disabled trusted mode")

	assert(type(weaponObject) == "number", "Arg #1 (weaponObject) must be a number.")
	assert(type(addonHash) == "number", "Arg #2 (addonHash) must be a number.")

	local result = native_call(0x33E179436C0B31DB, weaponObject, addonHash)
end
natives.weapon.give_weapon_component_to_weapon_object = natives.WEAPON.GIVE_WEAPON_COMPONENT_TO_WEAPON_OBJECT

function natives.WEAPON.REMOVE_WEAPON_COMPONENT_FROM_WEAPON_OBJECT(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.REMOVE_WEAPON_COMPONENT_FROM_WEAPON_OBJECT' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xF7D82B0D66777611, p0, p1)
end
natives.weapon.remove_weapon_component_from_weapon_object = natives.WEAPON.REMOVE_WEAPON_COMPONENT_FROM_WEAPON_OBJECT

function natives.WEAPON.HAS_WEAPON_GOT_WEAPON_COMPONENT(--[[Object]] weapon, --[[Hash]] addonHash) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.HAS_WEAPON_GOT_WEAPON_COMPONENT' due to disabled trusted mode")

	assert(type(weapon) == "number", "Arg #1 (weapon) must be a number.")
	assert(type(addonHash) == "number", "Arg #2 (addonHash) must be a number.")

	local result = native_call(0x76A18844E743BF91, weapon, addonHash)
	return result:__tointeger() ~= 0
end
natives.weapon.has_weapon_got_weapon_component = natives.WEAPON.HAS_WEAPON_GOT_WEAPON_COMPONENT

function natives.WEAPON.GIVE_WEAPON_OBJECT_TO_PED(--[[Object]] weaponObject, --[[Ped]] ped) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.GIVE_WEAPON_OBJECT_TO_PED' due to disabled trusted mode")

	assert(type(weaponObject) == "number", "Arg #1 (weaponObject) must be a number.")
	assert(type(ped) == "number", "Arg #2 (ped) must be a number.")

	local result = native_call(0xB1FA61371AF7C4B7, weaponObject, ped)
end
natives.weapon.give_weapon_object_to_ped = natives.WEAPON.GIVE_WEAPON_OBJECT_TO_PED

--[[
Full list of weapons & components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
]]
function natives.WEAPON.DOES_WEAPON_TAKE_WEAPON_COMPONENT(--[[Hash]] weaponHash, --[[Hash]] componentHash) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.DOES_WEAPON_TAKE_WEAPON_COMPONENT' due to disabled trusted mode")

	assert(type(weaponHash) == "number", "Arg #1 (weaponHash) must be a number.")
	assert(type(componentHash) == "number", "Arg #2 (componentHash) must be a number.")

	local result = native_call(0x5CEE3DF569CECAB0, weaponHash, componentHash)
	return result:__tointeger() ~= 0
end
natives.weapon.does_weapon_take_weapon_component = natives.WEAPON.DOES_WEAPON_TAKE_WEAPON_COMPONENT

--[[
Drops the current weapon and returns the object

Unknown behavior when unarmed.
]]
function natives.WEAPON.GET_WEAPON_OBJECT_FROM_PED(--[[Ped]] ped, --[[BOOL]] p1) -- Returns Object
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.GET_WEAPON_OBJECT_FROM_PED' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(p1) == "boolean", "Arg #2 (p1) must be a boolean.")

	local result = native_call(0xCAE1DC9A0E22A16D, ped, p1)
	return result:__tointeger()
end
natives.weapon.get_weapon_object_from_ped = natives.WEAPON.GET_WEAPON_OBJECT_FROM_PED

--[[
Gives the specified loadout to the specified ped. 
Loadouts are defined in common.rpf\data\ai\loadouts.meta
]]
function natives.WEAPON.GIVE_LOADOUT_TO_PED(--[[Ped]] ped, --[[Hash]] loadoutHash) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.GIVE_LOADOUT_TO_PED' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(loadoutHash) == "number", "Arg #2 (loadoutHash) must be a number.")

	local result = native_call(0x68F8BE6AF5CDF8A6, ped, loadoutHash)
end
natives.weapon.give_loadout_to_ped = natives.WEAPON.GIVE_LOADOUT_TO_PED

--[[
tintIndex can be the following:

0 - Normal
1 - Green
2 - Gold
3 - Pink
4 - Army
5 - LSPD
6 - Orange
7 - Platinum
Full list of weapons, components & tint indexes by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
]]
function natives.WEAPON.SET_PED_WEAPON_TINT_INDEX(--[[Ped]] ped, --[[Hash]] weaponHash, --[[int]] tintIndex) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.SET_PED_WEAPON_TINT_INDEX' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(weaponHash) == "number", "Arg #2 (weaponHash) must be a number.")
	assert(type(tintIndex) == "number", "Arg #3 (tintIndex) must be a number.")

	local result = native_call(0x50969B9B89ED5738, ped, weaponHash, tintIndex)
end
natives.weapon.set_ped_weapon_tint_index = natives.WEAPON.SET_PED_WEAPON_TINT_INDEX

--[[
Full list of weapons, components & tint indexes by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
]]
function natives.WEAPON.GET_PED_WEAPON_TINT_INDEX(--[[Ped]] ped, --[[Hash]] weaponHash) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.GET_PED_WEAPON_TINT_INDEX' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(weaponHash) == "number", "Arg #2 (weaponHash) must be a number.")

	local result = native_call(0x2B9EEDC07BD06B9F, ped, weaponHash)
	return result:__tointeger()
end
natives.weapon.get_ped_weapon_tint_index = natives.WEAPON.GET_PED_WEAPON_TINT_INDEX

--[[
Full list of weapons, components & tint indexes by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
]]
function natives.WEAPON.SET_WEAPON_OBJECT_TINT_INDEX(--[[Object]] weapon, --[[int]] tintIndex) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.SET_WEAPON_OBJECT_TINT_INDEX' due to disabled trusted mode")

	assert(type(weapon) == "number", "Arg #1 (weapon) must be a number.")
	assert(type(tintIndex) == "number", "Arg #2 (tintIndex) must be a number.")

	local result = native_call(0xF827589017D4E4A9, weapon, tintIndex)
end
natives.weapon.set_weapon_object_tint_index = natives.WEAPON.SET_WEAPON_OBJECT_TINT_INDEX

function natives.WEAPON.GET_WEAPON_OBJECT_TINT_INDEX(--[[Object]] weapon) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.GET_WEAPON_OBJECT_TINT_INDEX' due to disabled trusted mode")

	assert(type(weapon) == "number", "Arg #1 (weapon) must be a number.")

	local result = native_call(0xCD183314F7CD2E57, weapon)
	return result:__tointeger()
end
natives.weapon.get_weapon_object_tint_index = natives.WEAPON.GET_WEAPON_OBJECT_TINT_INDEX

--[[
Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
]]
function natives.WEAPON.GET_WEAPON_TINT_COUNT(--[[Hash]] weaponHash) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.GET_WEAPON_TINT_COUNT' due to disabled trusted mode")

	assert(type(weaponHash) == "number", "Arg #1 (weaponHash) must be a number.")

	local result = native_call(0x5DCF6C5CAB2E9BF7, weaponHash)
	return result:__tointeger()
end
natives.weapon.get_weapon_tint_count = natives.WEAPON.GET_WEAPON_TINT_COUNT

--[[
Colors:
0 = Gray
1 = Dark Gray
2 = Black
3 = White
4 = Blue
5 = Cyan
6 = Aqua
7 = Cool Blue
8 = Dark Blue
9 = Royal Blue
10 = Plum
11 = Dark Purple
12 = Purple
13 = Red
14 = Wine Red
15 = Magenta
16 = Pink
17 = Salmon
18 = Hot Pink
19 = Rust Orange
20 = Brown
21 = Earth
22 = Orange
23 = Light Orange
24 = Dark Yellow
25 = Yellow
26 = Light Brown
27 = Lime Green
28 = Olive
29 = Moss
30 = Turquoise
31 = Dark Green
Full list of weapons, components, tint indexes & weapon liveries by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
]]
function natives.WEAPON.SET_PED_WEAPON_COMPONENT_TINT_INDEX(--[[Ped]] ped, --[[Hash]] weaponHash, --[[Hash]] camoComponentHash, --[[int]] colorIndex) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.SET_PED_WEAPON_COMPONENT_TINT_INDEX' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(weaponHash) == "number", "Arg #2 (weaponHash) must be a number.")
	assert(type(camoComponentHash) == "number", "Arg #3 (camoComponentHash) must be a number.")
	assert(type(colorIndex) == "number", "Arg #4 (colorIndex) must be a number.")

	local result = native_call(0x9FE5633880ECD8ED, ped, weaponHash, camoComponentHash, colorIndex)
end
natives.weapon.set_ped_weapon_component_tint_index = natives.WEAPON.SET_PED_WEAPON_COMPONENT_TINT_INDEX

--[[
Returns -1 if camoComponentHash is invalid/not attached to the weapon.
Full list of weapons, components, tint indexes & weapon liveries by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
]]
function natives.WEAPON.GET_PED_WEAPON_COMPONENT_TINT_INDEX(--[[Ped]] ped, --[[Hash]] weaponHash, --[[Hash]] camoComponentHash) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.GET_PED_WEAPON_COMPONENT_TINT_INDEX' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(weaponHash) == "number", "Arg #2 (weaponHash) must be a number.")
	assert(type(camoComponentHash) == "number", "Arg #3 (camoComponentHash) must be a number.")

	local result = native_call(0xF0A60040BE558F2D, ped, weaponHash, camoComponentHash)
	return result:__tointeger()
end
natives.weapon.get_ped_weapon_component_tint_index = natives.WEAPON.GET_PED_WEAPON_COMPONENT_TINT_INDEX

--[[
Colors:
0 = Gray
1 = Dark Gray
2 = Black
3 = White
4 = Blue
5 = Cyan
6 = Aqua
7 = Cool Blue
8 = Dark Blue
9 = Royal Blue
10 = Plum
11 = Dark Purple
12 = Purple
13 = Red
14 = Wine Red
15 = Magenta
16 = Pink
17 = Salmon
18 = Hot Pink
19 = Rust Orange
20 = Brown
21 = Earth
22 = Orange
23 = Light Orange
24 = Dark Yellow
25 = Yellow
26 = Light Brown
27 = Lime Green
28 = Olive
29 = Moss
30 = Turquoise
31 = Dark Green
Full list of weapons, components, tint indexes & weapon liveries by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
]]
function natives.WEAPON.SET_WEAPON_OBJECT_COMPONENT_TINT_INDEX(--[[Object]] weaponObject, --[[Hash]] camoComponentHash, --[[int]] colorIndex) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.SET_WEAPON_OBJECT_COMPONENT_TINT_INDEX' due to disabled trusted mode")

	assert(type(weaponObject) == "number", "Arg #1 (weaponObject) must be a number.")
	assert(type(camoComponentHash) == "number", "Arg #2 (camoComponentHash) must be a number.")
	assert(type(colorIndex) == "number", "Arg #3 (colorIndex) must be a number.")

	local result = native_call(0x5DA825A85D0EA6E6, weaponObject, camoComponentHash, colorIndex)
end
natives.weapon.set_weapon_object_component_tint_index = natives.WEAPON.SET_WEAPON_OBJECT_COMPONENT_TINT_INDEX

--[[
Returns -1 if camoComponentHash is invalid/not attached to the weapon object.
Full list of weapons, components, tint indexes & weapon liveries by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
]]
function natives.WEAPON.GET_WEAPON_OBJECT_COMPONENT_TINT_INDEX(--[[Object]] weaponObject, --[[Hash]] camoComponentHash) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.GET_WEAPON_OBJECT_COMPONENT_TINT_INDEX' due to disabled trusted mode")

	assert(type(weaponObject) == "number", "Arg #1 (weaponObject) must be a number.")
	assert(type(camoComponentHash) == "number", "Arg #2 (camoComponentHash) must be a number.")

	local result = native_call(0xB3EA4FEABF41464B, weaponObject, camoComponentHash)
	return result:__tointeger()
end
natives.weapon.get_weapon_object_component_tint_index = natives.WEAPON.GET_WEAPON_OBJECT_COMPONENT_TINT_INDEX

function natives.WEAPON.GET_PED_WEAPON_CAMO_INDEX(--[[Ped]] ped, --[[Hash]] weaponHash) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.GET_PED_WEAPON_CAMO_INDEX' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(weaponHash) == "number", "Arg #2 (weaponHash) must be a number.")

	local result = native_call(0xA2C9AC24B4061285, ped, weaponHash)
	return result:__tointeger()
end
natives.weapon.get_ped_weapon_camo_index = natives.WEAPON.GET_PED_WEAPON_CAMO_INDEX

function natives.WEAPON.SET_WEAPON_OBJECT_CAMO_INDEX(--[[Object]] weaponObject, --[[int]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.SET_WEAPON_OBJECT_CAMO_INDEX' due to disabled trusted mode")

	assert(type(weaponObject) == "number", "Arg #1 (weaponObject) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0x977CA98939E82E4B, weaponObject, p1)
end
natives.weapon.set_weapon_object_camo_index = natives.WEAPON.SET_WEAPON_OBJECT_CAMO_INDEX

--[[
struct WeaponHudStatsData
{
    BYTE hudDamage; // 0x0000
    char _0x0001[0x7]; // 0x0001
    BYTE hudSpeed; // 0x0008
    char _0x0009[0x7]; // 0x0009
    BYTE hudCapacity; // 0x0010
    char _0x0011[0x7]; // 0x0011
    BYTE hudAccuracy; // 0x0018
    char _0x0019[0x7]; // 0x0019
    BYTE hudRange; // 0x0020
};

Usage:

WeaponHudStatsData data;
if (GET_WEAPON_HUD_STATS(weaponHash, (int *)&data))
{
    // BYTE damagePercentage = data.hudDamage and so on
}
Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
]]
function natives.WEAPON.GET_WEAPON_HUD_STATS(--[[Hash]] weaponHash, --[[Any*]] outData) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.GET_WEAPON_HUD_STATS' due to disabled trusted mode")

	assert(type(weaponHash) == "number", "Arg #1 (weaponHash) must be a number.")
	assert(type(outData) == "userdata", "Arg #2 (outData) must be a userdata.")

	local result = native_call(0xD92C739EE34C9EBA, weaponHash, outData)
	return result:__tointeger() ~= 0
end
natives.weapon.get_weapon_hud_stats = natives.WEAPON.GET_WEAPON_HUD_STATS

function natives.WEAPON.GET_WEAPON_COMPONENT_HUD_STATS(--[[Hash]] componentHash, --[[Any*]] outData) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.GET_WEAPON_COMPONENT_HUD_STATS' due to disabled trusted mode")

	assert(type(componentHash) == "number", "Arg #1 (componentHash) must be a number.")
	assert(type(outData) == "userdata", "Arg #2 (outData) must be a userdata.")

	local result = native_call(0xB3CAF387AE12E9F8, componentHash, outData)
	return result:__tointeger() ~= 0
end
natives.weapon.get_weapon_component_hud_stats = natives.WEAPON.GET_WEAPON_COMPONENT_HUD_STATS

--[[
This native does not return damages of weapons from the melee and explosive group.
Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
]]
function natives.WEAPON.GET_WEAPON_DAMAGE(--[[Hash]] weaponHash, --[[Hash]] componentHash) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.GET_WEAPON_DAMAGE' due to disabled trusted mode")

	assert(type(weaponHash) == "number", "Arg #1 (weaponHash) must be a number.")
	assert(type(componentHash) == "number", "Arg #2 (componentHash) must be a number.")

	local result = native_call(0x3133B907D8B32053, weaponHash, componentHash)
	return result:__tonumber()
end
natives.weapon.get_weapon_damage = natives.WEAPON.GET_WEAPON_DAMAGE

--[[
// Returns the size of the default weapon component clip.

Use it like this:

char cClipSize[32];
Hash cur;
if (WEAPON::GET_CURRENT_PED_WEAPON(playerPed, &cur, 1))
{
    if (WEAPON::IS_WEAPON_VALID(cur))
    {
        int iClipSize = WEAPON::GET_WEAPON_CLIP_SIZE(cur);
        sprintf_s(cClipSize, "ClipSize: %.d", iClipSize);
        vDrawString(cClipSize, 0.5f, 0.5f);
    }
}
Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
]]
function natives.WEAPON.GET_WEAPON_CLIP_SIZE(--[[Hash]] weaponHash) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.GET_WEAPON_CLIP_SIZE' due to disabled trusted mode")

	assert(type(weaponHash) == "number", "Arg #1 (weaponHash) must be a number.")

	local result = native_call(0x583BE370B1EC6EB4, weaponHash)
	return result:__tointeger()
end
natives.weapon.get_weapon_clip_size = natives.WEAPON.GET_WEAPON_CLIP_SIZE

--[[
Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
]]
function natives.WEAPON.GET_WEAPON_TIME_BETWEEN_SHOTS(--[[Hash]] weaponHash) -- Returns float
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.GET_WEAPON_TIME_BETWEEN_SHOTS' due to disabled trusted mode")

	assert(type(weaponHash) == "number", "Arg #1 (weaponHash) must be a number.")

	local result = native_call(0x065D2AACAD8CF7A4, weaponHash)
	return result:__tonumber()
end
natives.weapon.get_weapon_time_between_shots = natives.WEAPON.GET_WEAPON_TIME_BETWEEN_SHOTS

function natives.WEAPON.SET_PED_CHANCE_OF_FIRING_BLANKS(--[[Ped]] ped, --[[float]] xBias, --[[float]] yBias) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.SET_PED_CHANCE_OF_FIRING_BLANKS' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(xBias) == "number", "Arg #2 (xBias) must be a number.")
	assert(type(yBias) == "number", "Arg #3 (yBias) must be a number.")

	local result = native_call(0x8378627201D5497D, ped, xBias, yBias)
end
natives.weapon.set_ped_chance_of_firing_blanks = natives.WEAPON.SET_PED_CHANCE_OF_FIRING_BLANKS

--[[
Returns handle of the projectile.
]]
function natives.WEAPON.SET_PED_SHOOT_ORDNANCE_WEAPON(--[[Ped]] ped, --[[float]] p1) -- Returns Object
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.SET_PED_SHOOT_ORDNANCE_WEAPON' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xB4C8D77C80C0421E, ped, p1)
	return result:__tointeger()
end
natives.weapon.set_ped_shoot_ordnance_weapon = natives.WEAPON.SET_PED_SHOOT_ORDNANCE_WEAPON

function natives.WEAPON.REQUEST_WEAPON_HIGH_DETAIL_MODEL(--[[Entity]] weaponObject) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.REQUEST_WEAPON_HIGH_DETAIL_MODEL' due to disabled trusted mode")

	assert(type(weaponObject) == "number", "Arg #1 (weaponObject) must be a number.")

	local result = native_call(0x48164DBB970AC3F0, weaponObject)
end
natives.weapon.request_weapon_high_detail_model = natives.WEAPON.REQUEST_WEAPON_HIGH_DETAIL_MODEL

--[[
Changes the weapon damage output by the given multiplier value. Must be run every frame.
Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
]]
function natives.WEAPON.SET_WEAPON_DAMAGE_MODIFIER(--[[Hash]] weaponHash, --[[float]] damageMultiplier) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.SET_WEAPON_DAMAGE_MODIFIER' due to disabled trusted mode")

	assert(type(weaponHash) == "number", "Arg #1 (weaponHash) must be a number.")
	assert(type(damageMultiplier) == "number", "Arg #2 (damageMultiplier) must be a number.")

	local result = native_call(0x4757F00BC6323CFE, weaponHash, damageMultiplier)
end
natives.weapon.set_weapon_damage_modifier = natives.WEAPON.SET_WEAPON_DAMAGE_MODIFIER

function natives.WEAPON.SET_WEAPON_AOE_MODIFIER(--[[Hash]] weaponHash, --[[float]] multiplier) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.SET_WEAPON_AOE_MODIFIER' due to disabled trusted mode")

	assert(type(weaponHash) == "number", "Arg #1 (weaponHash) must be a number.")
	assert(type(multiplier) == "number", "Arg #2 (multiplier) must be a number.")

	local result = native_call(0x4AE5AC8B852D642C, weaponHash, multiplier)
end
natives.weapon.set_weapon_aoe_modifier = natives.WEAPON.SET_WEAPON_AOE_MODIFIER

function natives.WEAPON.SET_WEAPON_EFFECT_DURATION_MODIFIER(--[[Any]] p0, --[[Any]] p1) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.SET_WEAPON_EFFECT_DURATION_MODIFIER' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")

	local result = native_call(0xE6D2CEDD370FF98E, p0, p1)
end
natives.weapon.set_weapon_effect_duration_modifier = natives.WEAPON.SET_WEAPON_EFFECT_DURATION_MODIFIER

--[[
This native returns a true or false value.

Ped ped = The ped whose weapon you want to check.
]]
function natives.WEAPON.IS_PED_CURRENT_WEAPON_SILENCED(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.IS_PED_CURRENT_WEAPON_SILENCED' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x65F0C5AE05943EC7, ped)
	return result:__tointeger() ~= 0
end
natives.weapon.is_ped_current_weapon_silenced = natives.WEAPON.IS_PED_CURRENT_WEAPON_SILENCED

function natives.WEAPON.IS_FLASH_LIGHT_ON(--[[Ped]] ped) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.IS_FLASH_LIGHT_ON' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0x4B7620C47217126C, ped)
	return result:__tointeger() ~= 0
end
natives.weapon.is_flash_light_on = natives.WEAPON.IS_FLASH_LIGHT_ON

function natives.WEAPON.SET_FLASH_LIGHT_FADE_DISTANCE(--[[float]] distance) -- Returns Any
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.SET_FLASH_LIGHT_FADE_DISTANCE' due to disabled trusted mode")

	assert(type(distance) == "number", "Arg #1 (distance) must be a number.")

	local result = native_call(0xCEA66DAD478CD39B, distance)
	return result:__tointeger()
end
natives.weapon.set_flash_light_fade_distance = natives.WEAPON.SET_FLASH_LIGHT_FADE_DISTANCE

--[[
Enables/disables flashlight on ped's weapon.
]]
function natives.WEAPON.SET_FLASH_LIGHT_ACTIVE_HISTORY(--[[Ped]] ped, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.SET_FLASH_LIGHT_ACTIVE_HISTORY' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0x988DB6FE9B3AC000, ped, toggle)
end
natives.weapon.set_flash_light_active_history = natives.WEAPON.SET_FLASH_LIGHT_ACTIVE_HISTORY

--[[
Changes the selected ped aiming animation style. 
Note : You must use GET_HASH_KEY!

Strings to use with GET_HASH_KEY :

    "Ballistic",
    "Default",
  "Fat",
  "Female",
   "FirstPerson",
  "FirstPersonAiming",
    "FirstPersonFranklin",
  "FirstPersonFranklinAiming",
    "FirstPersonFranklinRNG",
   "FirstPersonFranklinScope",
 "FirstPersonMPFemale",
  "FirstPersonMichael",
   "FirstPersonMichaelAiming",
 "FirstPersonMichaelRNG",
    "FirstPersonMichaelScope",
  "FirstPersonRNG",
   "FirstPersonScope",
 "FirstPersonTrevor",
    "FirstPersonTrevorAiming",
  "FirstPersonTrevorRNG",
 "FirstPersonTrevorScope",
   "Franklin",
 "Gang",
 "Gang1H",
   "GangFemale",
   "Hillbilly",
    "MP_F_Freemode",
    "Michael",
  "SuperFat",
 "Trevor"
]]
function natives.WEAPON.SET_WEAPON_ANIMATION_OVERRIDE(--[[Ped]] ped, --[[Hash]] animStyle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.SET_WEAPON_ANIMATION_OVERRIDE' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(animStyle) == "number", "Arg #2 (animStyle) must be a number.")

	local result = native_call(0x1055AC3A667F09D9, ped, animStyle)
end
natives.weapon.set_weapon_animation_override = natives.WEAPON.SET_WEAPON_ANIMATION_OVERRIDE

--[[
enum class eDamageType
{
	UNKNOWN = 0,
	NONE = 1,
	MELEE = 2,
	BULLET = 3,
	BULLET_RUBBER = 4,
	EXPLOSIVE = 5,
	FIRE = 6,
	COLLISION = 7,
	FALL = 8,
	DROWN = 9,
	ELECTRIC = 10,
	BARBED_WIRE = 11,
	FIRE_EXTINGUISHER = 12,
	SMOKE = 13,
	WATER_CANNON = 14,
	TRANQUILIZER = 15,
};

Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
]]
function natives.WEAPON.GET_WEAPON_DAMAGE_TYPE(--[[Hash]] weaponHash) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.GET_WEAPON_DAMAGE_TYPE' due to disabled trusted mode")

	assert(type(weaponHash) == "number", "Arg #1 (weaponHash) must be a number.")

	local result = native_call(0x3BE0BB12D25FB305, weaponHash)
	return result:__tointeger()
end
natives.weapon.get_weapon_damage_type = natives.WEAPON.GET_WEAPON_DAMAGE_TYPE

function natives.WEAPON.SET_EQIPPED_WEAPON_START_SPINNING_AT_FULL_SPEED(--[[Ped]] ped) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.SET_EQIPPED_WEAPON_START_SPINNING_AT_FULL_SPEED' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")

	local result = native_call(0xE4DCEC7FD5B739A5, ped)
end
natives.weapon.set_eqipped_weapon_start_spinning_at_full_speed = natives.WEAPON.SET_EQIPPED_WEAPON_START_SPINNING_AT_FULL_SPEED

--[[
this returns if you can use the weapon while using a parachute
Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
]]
function natives.WEAPON.CAN_USE_WEAPON_ON_PARACHUTE(--[[Hash]] weaponHash) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.CAN_USE_WEAPON_ON_PARACHUTE' due to disabled trusted mode")

	assert(type(weaponHash) == "number", "Arg #1 (weaponHash) must be a number.")

	local result = native_call(0xBC7BE5ABC0879F74, weaponHash)
	return result:__tointeger() ~= 0
end
natives.weapon.can_use_weapon_on_parachute = natives.WEAPON.CAN_USE_WEAPON_ON_PARACHUTE

--[[
Both coordinates are from objects in the decompiled scripts. Native related to 0xECDC202B25E5CF48 p1 value. The only weapon hash used in the decompiled scripts is weapon_air_defence_gun. These two natives are used by the yacht script, decompiled scripts suggest it and the weapon hash used (valkyrie's rockets) are also used by yachts.
]]
function natives.WEAPON.CREATE_AIR_DEFENCE_SPHERE(--[[float]] x, --[[float]] y, --[[float]] z, --[[float]] radius, --[[float]] p4, --[[float]] p5, --[[float]] p6, --[[Hash]] weaponHash) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.CREATE_AIR_DEFENCE_SPHERE' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(radius) == "number", "Arg #4 (radius) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")
	assert(type(p6) == "number", "Arg #7 (p6) must be a number.")
	assert(type(weaponHash) == "number", "Arg #8 (weaponHash) must be a number.")

	local result = native_call(0x91EF34584710BE99, x, y, z, radius, p4, p5, p6, weaponHash)
	return result:__tointeger()
end
natives.weapon.create_air_defence_sphere = natives.WEAPON.CREATE_AIR_DEFENCE_SPHERE

--[[
Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
]]
function natives.WEAPON.CREATE_AIR_DEFENCE_ANGLED_AREA(--[[float]] p0, --[[float]] p1, --[[float]] p2, --[[float]] p3, --[[float]] p4, --[[float]] p5, --[[float]] p6, --[[float]] p7, --[[float]] p8, --[[float]] p9, --[[Hash]] weaponHash) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.CREATE_AIR_DEFENCE_ANGLED_AREA' due to disabled trusted mode")

	assert(type(p0) == "number", "Arg #1 (p0) must be a number.")
	assert(type(p1) == "number", "Arg #2 (p1) must be a number.")
	assert(type(p2) == "number", "Arg #3 (p2) must be a number.")
	assert(type(p3) == "number", "Arg #4 (p3) must be a number.")
	assert(type(p4) == "number", "Arg #5 (p4) must be a number.")
	assert(type(p5) == "number", "Arg #6 (p5) must be a number.")
	assert(type(p6) == "number", "Arg #7 (p6) must be a number.")
	assert(type(p7) == "number", "Arg #8 (p7) must be a number.")
	assert(type(p8) == "number", "Arg #9 (p8) must be a number.")
	assert(type(p9) == "number", "Arg #10 (p9) must be a number.")
	assert(type(weaponHash) == "number", "Arg #11 (weaponHash) must be a number.")

	local result = native_call(0x9DA58CDBF6BDBC08, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, weaponHash)
	return result:__tointeger()
end
natives.weapon.create_air_defence_angled_area = natives.WEAPON.CREATE_AIR_DEFENCE_ANGLED_AREA

function natives.WEAPON.REMOVE_AIR_DEFENCE_SPHERE(--[[int]] zoneId) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.REMOVE_AIR_DEFENCE_SPHERE' due to disabled trusted mode")

	assert(type(zoneId) == "number", "Arg #1 (zoneId) must be a number.")

	local result = native_call(0x0ABF535877897560, zoneId)
	return result:__tointeger() ~= 0
end
natives.weapon.remove_air_defence_sphere = natives.WEAPON.REMOVE_AIR_DEFENCE_SPHERE

function natives.WEAPON.REMOVE_ALL_AIR_DEFENCE_SPHERES() -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.REMOVE_ALL_AIR_DEFENCE_SPHERES' due to disabled trusted mode")

	local result = native_call(0x1E45B34ADEBEE48E)
end
natives.weapon.remove_all_air_defence_spheres = natives.WEAPON.REMOVE_ALL_AIR_DEFENCE_SPHERES

function natives.WEAPON.SET_PLAYER_TARGETTABLE_FOR_AIR_DEFENCE_SPHERE(--[[Player]] player, --[[int]] zoneId, --[[BOOL]] enable) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.SET_PLAYER_TARGETTABLE_FOR_AIR_DEFENCE_SPHERE' due to disabled trusted mode")

	assert(type(player) == "number", "Arg #1 (player) must be a number.")
	assert(type(zoneId) == "number", "Arg #2 (zoneId) must be a number.")
	assert(type(enable) == "boolean", "Arg #3 (enable) must be a boolean.")

	local result = native_call(0xECDC202B25E5CF48, player, zoneId, enable)
end
natives.weapon.set_player_targettable_for_air_defence_sphere = natives.WEAPON.SET_PLAYER_TARGETTABLE_FOR_AIR_DEFENCE_SPHERE

function natives.WEAPON.IS_AIR_DEFENCE_SPHERE_IN_AREA(--[[float]] x, --[[float]] y, --[[float]] z, --[[float]] radius, --[[int*]] outZoneId) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.IS_AIR_DEFENCE_SPHERE_IN_AREA' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")
	assert(type(radius) == "number", "Arg #4 (radius) must be a number.")
	assert(type(outZoneId) == "userdata", "Arg #5 (outZoneId) must be a userdata.")

	local result = native_call(0xDAB963831DBFD3F4, x, y, z, radius, outZoneId)
	return result:__tointeger() ~= 0
end
natives.weapon.is_air_defence_sphere_in_area = natives.WEAPON.IS_AIR_DEFENCE_SPHERE_IN_AREA

function natives.WEAPON.FIRE_AIR_DEFENCE_SPHERE_WEAPON_AT_POSITION(--[[int]] zoneId, --[[float]] x, --[[float]] y, --[[float]] z) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.FIRE_AIR_DEFENCE_SPHERE_WEAPON_AT_POSITION' due to disabled trusted mode")

	assert(type(zoneId) == "number", "Arg #1 (zoneId) must be a number.")
	assert(type(x) == "number", "Arg #2 (x) must be a number.")
	assert(type(y) == "number", "Arg #3 (y) must be a number.")
	assert(type(z) == "number", "Arg #4 (z) must be a number.")

	local result = native_call(0x44F1012B69313374, zoneId, x, y, z)
end
natives.weapon.fire_air_defence_sphere_weapon_at_position = natives.WEAPON.FIRE_AIR_DEFENCE_SPHERE_WEAPON_AT_POSITION

function natives.WEAPON.DOES_AIR_DEFENCE_SPHERE_EXIST(--[[int]] zoneId) -- Returns BOOL
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.DOES_AIR_DEFENCE_SPHERE_EXIST' due to disabled trusted mode")

	assert(type(zoneId) == "number", "Arg #1 (zoneId) must be a number.")

	local result = native_call(0xCD79A550999D7D4F, zoneId)
	return result:__tointeger() ~= 0
end
natives.weapon.does_air_defence_sphere_exist = natives.WEAPON.DOES_AIR_DEFENCE_SPHERE_EXIST

--[[
Disables selecting the given weapon. Ped isn't forced to put the gun away. However you can't reselect the weapon if you holster then unholster. Weapon is also grayed out on the weapon wheel.
Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
]]
function natives.WEAPON.SET_CAN_PED_SELECT_INVENTORY_WEAPON(--[[Ped]] ped, --[[Hash]] weaponHash, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.SET_CAN_PED_SELECT_INVENTORY_WEAPON' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(weaponHash) == "number", "Arg #2 (weaponHash) must be a number.")
	assert(type(toggle) == "boolean", "Arg #3 (toggle) must be a boolean.")

	local result = native_call(0xB4771B9AAF4E68E4, ped, weaponHash, toggle)
end
natives.weapon.set_can_ped_select_inventory_weapon = natives.WEAPON.SET_CAN_PED_SELECT_INVENTORY_WEAPON

--[[
Disable all weapons. Does the same as 0xB4771B9AAF4E68E4 except for all weapons.
]]
function natives.WEAPON.SET_CAN_PED_SELECT_ALL_WEAPONS(--[[Ped]] ped, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'WEAPON.SET_CAN_PED_SELECT_ALL_WEAPONS' due to disabled trusted mode")

	assert(type(ped) == "number", "Arg #1 (ped) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xEFF296097FF1E509, ped, toggle)
end
natives.weapon.set_can_ped_select_all_weapons = natives.WEAPON.SET_CAN_PED_SELECT_ALL_WEAPONS


natives.ZONE = {}
natives.zone = {}

function natives.ZONE.GET_ZONE_AT_COORDS(--[[float]] x, --[[float]] y, --[[float]] z) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ZONE.GET_ZONE_AT_COORDS' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")

	local result = native_call(0x27040C25DE6CB2F4, x, y, z)
	return result:__tointeger()
end
natives.zone.get_zone_at_coords = natives.ZONE.GET_ZONE_AT_COORDS

--[[
'zoneName' corresponds to an entry in 'popzone.ipl'.

AIRP = Los Santos International Airport
ALAMO = Alamo Sea
ALTA = Alta
ARMYB = Fort Zancudo
BANHAMC = Banham Canyon Dr
BANNING = Banning
BEACH = Vespucci Beach
BHAMCA = Banham Canyon
BRADP = Braddock Pass
BRADT = Braddock Tunnel
BURTON = Burton
CALAFB = Calafia Bridge
CANNY = Raton Canyon
CCREAK = Cassidy Creek
CHAMH = Chamberlain Hills
CHIL = Vinewood Hills
CHU = Chumash
CMSW = Chiliad Mountain State Wilderness
CYPRE = Cypress Flats
DAVIS = Davis
DELBE = Del Perro Beach
DELPE = Del Perro
DELSOL = La Puerta
DESRT = Grand Senora Desert
DOWNT = Downtown
DTVINE = Downtown Vinewood
EAST_V = East Vinewood
EBURO = El Burro Heights
ELGORL = El Gordo Lighthouse
ELYSIAN = Elysian Island
GALFISH = Galilee
GOLF = GWC and Golfing Society
GRAPES = Grapeseed
GREATC = Great Chaparral
HARMO = Harmony
HAWICK = Hawick
HORS = Vinewood Racetrack
HUMLAB = Humane Labs and Research
JAIL = Bolingbroke Penitentiary
KOREAT = Little Seoul
LACT = Land Act Reservoir
LAGO = Lago Zancudo
LDAM = Land Act Dam
LEGSQU = Legion Square
LMESA = La Mesa
LOSPUER = La Puerta
MIRR = Mirror Park
MORN = Morningwood
MOVIE = Richards Majestic
MTCHIL = Mount Chiliad
MTGORDO = Mount Gordo
MTJOSE = Mount Josiah
MURRI = Murrieta Heights
NCHU = North Chumash
NOOSE = N.O.O.S.E
OCEANA = Pacific Ocean
PALCOV = Paleto Cove
PALETO = Paleto Bay
PALFOR = Paleto Forest
PALHIGH = Palomino Highlands
PALMPOW = Palmer-Taylor Power Station
PBLUFF = Pacific Bluffs
PBOX = Pillbox Hill
PROCOB = Procopio Beach
RANCHO = Rancho
RGLEN = Richman Glen
RICHM = Richman
ROCKF = Rockford Hills
RTRAK = Redwood Lights Track
SANAND = San Andreas
SANCHIA = San Chianski Mountain Range
SANDY = Sandy Shores
SKID = Mission Row
SLAB = Stab City
STAD = Maze Bank Arena
STRAW = Strawberry
TATAMO = Tataviam Mountains
TERMINA = Terminal
TEXTI = Textile City
TONGVAH = Tongva Hills
TONGVAV = Tongva Valley
VCANA = Vespucci Canals
VESP = Vespucci
VINE = Vinewood
WINDF = Ron Alternates Wind Farm
WVINE = West Vinewood
ZANCUDO = Zancudo River
ZP_ORT = Port of South Los Santos
ZQ_UAR = Davis Quartz

Full list of zones by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/zones.json
]]
function natives.ZONE.GET_ZONE_FROM_NAME_ID(--[[const char*]] zoneName) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ZONE.GET_ZONE_FROM_NAME_ID' due to disabled trusted mode")

	assert(type(zoneName) == "string", "Arg #1 (zoneName) must be a string.")

	local result = native_call(0x98CD1D2934B76CC1, zoneName)
	return result:__tointeger()
end
natives.zone.get_zone_from_name_id = natives.ZONE.GET_ZONE_FROM_NAME_ID

function natives.ZONE.GET_ZONE_POPSCHEDULE(--[[int]] zoneId) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ZONE.GET_ZONE_POPSCHEDULE' due to disabled trusted mode")

	assert(type(zoneId) == "number", "Arg #1 (zoneId) must be a number.")

	local result = native_call(0x4334BC40AA0CB4BB, zoneId)
	return result:__tointeger()
end
natives.zone.get_zone_popschedule = natives.ZONE.GET_ZONE_POPSCHEDULE

--[[
AIRP = Los Santos International Airport
ALAMO = Alamo Sea
ALTA = Alta
ARMYB = Fort Zancudo
BANHAMC = Banham Canyon Dr
BANNING = Banning
BEACH = Vespucci Beach
BHAMCA = Banham Canyon
BRADP = Braddock Pass
BRADT = Braddock Tunnel
BURTON = Burton
CALAFB = Calafia Bridge
CANNY = Raton Canyon
CCREAK = Cassidy Creek
CHAMH = Chamberlain Hills
CHIL = Vinewood Hills
CHU = Chumash
CMSW = Chiliad Mountain State Wilderness
CYPRE = Cypress Flats
DAVIS = Davis
DELBE = Del Perro Beach
DELPE = Del Perro
DELSOL = La Puerta
DESRT = Grand Senora Desert
DOWNT = Downtown
DTVINE = Downtown Vinewood
EAST_V = East Vinewood
EBURO = El Burro Heights
ELGORL = El Gordo Lighthouse
ELYSIAN = Elysian Island
GALFISH = Galilee
GOLF = GWC and Golfing Society
GRAPES = Grapeseed
GREATC = Great Chaparral
HARMO = Harmony
HAWICK = Hawick
HORS = Vinewood Racetrack
HUMLAB = Humane Labs and Research
JAIL = Bolingbroke Penitentiary
KOREAT = Little Seoul
LACT = Land Act Reservoir
LAGO = Lago Zancudo
LDAM = Land Act Dam
LEGSQU = Legion Square
LMESA = La Mesa
LOSPUER = La Puerta
MIRR = Mirror Park
MORN = Morningwood
MOVIE = Richards Majestic
MTCHIL = Mount Chiliad
MTGORDO = Mount Gordo
MTJOSE = Mount Josiah
MURRI = Murrieta Heights
NCHU = North Chumash
NOOSE = N.O.O.S.E
OCEANA = Pacific Ocean
PALCOV = Paleto Cove
PALETO = Paleto Bay
PALFOR = Paleto Forest
PALHIGH = Palomino Highlands
PALMPOW = Palmer-Taylor Power Station
PBLUFF = Pacific Bluffs
PBOX = Pillbox Hill
PROCOB = Procopio Beach
RANCHO = Rancho
RGLEN = Richman Glen
RICHM = Richman
ROCKF = Rockford Hills
RTRAK = Redwood Lights Track
SANAND = San Andreas
SANCHIA = San Chianski Mountain Range
SANDY = Sandy Shores
SKID = Mission Row
SLAB = Stab City
STAD = Maze Bank Arena
STRAW = Strawberry
TATAMO = Tataviam Mountains
TERMINA = Terminal
TEXTI = Textile City
TONGVAH = Tongva Hills
TONGVAV = Tongva Valley
VCANA = Vespucci Canals
VESP = Vespucci
VINE = Vinewood
WINDF = Ron Alternates Wind Farm
WVINE = West Vinewood
ZANCUDO = Zancudo River
ZP_ORT = Port of South Los Santos
ZQ_UAR = Davis Quartz

Full list of zones by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/zones.json
]]
function natives.ZONE.GET_NAME_OF_ZONE(--[[float]] x, --[[float]] y, --[[float]] z) -- Returns const char*
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ZONE.GET_NAME_OF_ZONE' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")

	local result = native_call(0xCD90657D4C30E1CA, x, y, z)
	return result:__tostring(true)
end
natives.zone.get_name_of_zone = natives.ZONE.GET_NAME_OF_ZONE

function natives.ZONE.SET_ZONE_ENABLED(--[[int]] zoneId, --[[BOOL]] toggle) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ZONE.SET_ZONE_ENABLED' due to disabled trusted mode")

	assert(type(zoneId) == "number", "Arg #1 (zoneId) must be a number.")
	assert(type(toggle) == "boolean", "Arg #2 (toggle) must be a boolean.")

	local result = native_call(0xBA5ECEEA120E5611, zoneId, toggle)
end
natives.zone.set_zone_enabled = natives.ZONE.SET_ZONE_ENABLED

--[[
cellphone range 1- 5 used for signal bar in iFruit phone
]]
function natives.ZONE.GET_ZONE_SCUMMINESS(--[[int]] zoneId) -- Returns int
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ZONE.GET_ZONE_SCUMMINESS' due to disabled trusted mode")

	assert(type(zoneId) == "number", "Arg #1 (zoneId) must be a number.")

	local result = native_call(0x5F7B268D15BA0739, zoneId)
	return result:__tointeger()
end
natives.zone.get_zone_scumminess = natives.ZONE.GET_ZONE_SCUMMINESS

--[[
Only used once in the decompiled scripts. Seems to be related to scripted vehicle generators.

Modified example from "am_imp_exp.c4", line 6406:
/* popSchedules[0] = ZONE::GET_ZONE_POPSCHEDULE(ZONE::GET_ZONE_AT_COORDS(891.3, 807.9, 188.1));
etc.
*/
ZONE::OVERRIDE_POPSCHEDULE_VEHICLE_MODEL(popSchedules[index], vehicleHash);
STREAMING::REQUEST_MODEL(vehicleHash);
]]
function natives.ZONE.OVERRIDE_POPSCHEDULE_VEHICLE_MODEL(--[[int]] scheduleId, --[[Hash]] vehicleHash) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ZONE.OVERRIDE_POPSCHEDULE_VEHICLE_MODEL' due to disabled trusted mode")

	assert(type(scheduleId) == "number", "Arg #1 (scheduleId) must be a number.")
	assert(type(vehicleHash) == "number", "Arg #2 (vehicleHash) must be a number.")

	local result = native_call(0x5F7D596BAC2E7777, scheduleId, vehicleHash)
end
natives.zone.override_popschedule_vehicle_model = natives.ZONE.OVERRIDE_POPSCHEDULE_VEHICLE_MODEL

--[[
Only used once in the decompiled scripts. Seems to be related to scripted vehicle generators.

Modified example from "am_imp_exp.c4", line 6418:
/* popSchedules[0] = ZONE::GET_ZONE_POPSCHEDULE(ZONE::GET_ZONE_AT_COORDS(891.3, 807.9, 188.1));
etc.
*/
STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(vehicleHash);
ZONE::CLEAR_POPSCHEDULE_OVERRIDE_VEHICLE_MODEL(popSchedules[index]);
]]
function natives.ZONE.CLEAR_POPSCHEDULE_OVERRIDE_VEHICLE_MODEL(--[[int]] scheduleId) -- Returns void
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ZONE.CLEAR_POPSCHEDULE_OVERRIDE_VEHICLE_MODEL' due to disabled trusted mode")

	assert(type(scheduleId) == "number", "Arg #1 (scheduleId) must be a number.")

	local result = native_call(0x5C0DE367AA0D911C, scheduleId)
end
natives.zone.clear_popschedule_override_vehicle_model = natives.ZONE.CLEAR_POPSCHEDULE_OVERRIDE_VEHICLE_MODEL

--[[
Returns a hash representing which part of the map the given coords are located.

Possible return values:
(Hash of) city -> -289320599
(Hash of) countryside -> 2072609373

C# Example :

Ped player = Game.Player.Character;
Hash h = Function.Call<Hash>(Hash.GET_HASH_OF_MAP_AREA_AT_COORDS, player.Position.X, player.Position.Y, player.Position.Z);
]]
function natives.ZONE.GET_HASH_OF_MAP_AREA_AT_COORDS(--[[float]] x, --[[float]] y, --[[float]] z) -- Returns Hash
	assert(is_trusted_mode_enabled(natives_trust), "Could not call 'ZONE.GET_HASH_OF_MAP_AREA_AT_COORDS' due to disabled trusted mode")

	assert(type(x) == "number", "Arg #1 (x) must be a number.")
	assert(type(y) == "number", "Arg #2 (y) must be a number.")
	assert(type(z) == "number", "Arg #3 (z) must be a number.")

	local result = native_call(0x7EE64D51E8498728, x, y, z)
	return result:__tointeger()
end
natives.zone.get_hash_of_map_area_at_coords = natives.ZONE.GET_HASH_OF_MAP_AREA_AT_COORDS

return natives